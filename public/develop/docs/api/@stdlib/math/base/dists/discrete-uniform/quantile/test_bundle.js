// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/math/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/math/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/math/float64-ninf' );
* // returns -Infinity
*/


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],3:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/math/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/math/float64-pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],4:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is an integer.
*
* @module @stdlib/math/base/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/math/base/assert/is-integer' );
*
* var bool = isInteger( 1.0 );
* // returns true
*
* bool = isInteger( 3.14 );
* // returns false
*/

// MODULES //

var isInteger = require( './is_integer.js' );


// EXPORTS //

module.exports = isInteger;

},{"./is_integer.js":5}],5:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is an integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an integer
*
* @example
* var bool = isInteger( 1.0 );
* // returns true
*
* @example
* var bool = isInteger( 3.14 );
* // returns false
*/
function isInteger( x ) {
	return (floor(x) === x);
}


// EXPORTS //

module.exports = isInteger;

},{"@stdlib/math/base/special/floor":20}],6:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":7}],7:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],8:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a discrete uniform distribution with minimum support `a` an maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2, 4 );
* var y = quantile( 0.4 );
* // returns 2.8
*
* y = quantile( 0.8 );
* // returns 3.6
*/
function factory( a, b ) {
	var n;
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return constantFunction( NaN );
	}
	n = b - a + 1;
	return quantile;

	/**
	* Evaluates the quantile function for a discrete uniform distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + floor( p * n );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-integer":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/floor":20,"@stdlib/utils/constant-function":22}],9:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution quantile function.
*
* @module @stdlib/math/base/dists/discrete-uniform/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/discrete-uniform/quantile' );
*
* var y = quantile( 0.5, 0, 10 );
* // returns 5
*
* var myQuantile = quantile.factory( 0, 4 );
* y = myQuantile( 0.8 );
* // returns 4
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":8,"./quantile.js":10,"@stdlib/utils/define-read-only-property":24}],10:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Evaluates the quantile function for a discrete uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0, 1 );
* // returns 1
*
* @example
* var y = quantile( 0.5, 0, 10 );
* // returns 5
*
* @example
* var y = quantile( 1.1, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1, 1.5 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 2, 1 );
* // returns NaN
*/
function quantile( p, a, b ) {
	var n;
	if (
		isnan( p ) ||
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	n = b - a + 1;
	return a + floor( p * n );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-integer":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/floor":20}],11:[function(require,module,exports){
module.exports={"expected":[7.0,48.0,9.0,63.0,11.0,45.0,33.0,12.0,6.0,12.0,24.0,4.0,18.0,23.0,22.0,6.0,38.0,41.0,45.0,77.0,54.0,48.0,71.0,38.0,15.0,17.0,6.0,42.0,18.0,36.0,21.0,14.0,94.0,34.0,23.0,5.0,26.0,25.0,24.0,5.0,8.0,58.0,17.0,15.0,51.0,63.0,66.0,33.0,16.0,19.0,44.0,13.0,65.0,68.0,22.0,52.0,49.0,19.0,36.0,5.0,19.0,80.0,12.0,16.0,9.0,38.0,55.0,5.0,24.0,8.0,16.0,23.0,9.0,13.0,12.0,38.0,11.0,23.0,18.0,34.0,35.0,46.0,80.0,23.0,51.0,55.0,22.0,30.0,31.0,10.0,14.0,13.0,23.0,14.0,6.0,14.0,34.0,22.0,28.0,53.0,17.0,53.0,20.0,13.0,11.0,44.0,18.0,18.0,22.0,18.0,9.0,49.0,26.0,6.0,26.0,26.0,25.0,38.0,53.0,50.0,15.0,23.0,21.0,81.0,20.0,24.0,21.0,26.0,39.0,0.0,15.0,16.0,34.0,35.0,10.0,55.0,42.0,14.0,14.0,14.0,31.0,11.0,50.0,3.0,38.0,47.0,13.0,18.0,15.0,21.0,34.0,47.0,15.0,17.0,17.0,9.0,11.0,21.0,25.0,11.0,39.0,79.0,18.0,27.0,56.0,27.0,54.0,18.0,12.0,13.0,40.0,38.0,64.0,30.0,23.0,11.0,61.0,19.0,40.0,23.0,20.0,40.0,45.0,35.0,14.0,71.0,12.0,21.0,61.0,41.0,63.0,67.0,10.0,8.0,16.0,64.0,41.0,33.0,77.0,21.0,14.0,41.0,18.0,46.0,61.0,19.0,15.0,26.0,14.0,30.0,19.0,57.0,15.0,13.0,49.0,40.0,74.0,39.0,27.0,28.0,54.0,41.0,30.0,52.0,1.0,5.0,24.0,19.0,0.0,16.0,5.0,18.0,42.0,27.0,70.0,9.0,30.0,18.0,28.0,34.0,40.0,20.0,7.0,16.0,13.0,23.0,21.0,60.0,36.0,12.0,75.0,22.0,27.0,65.0,26.0,24.0,48.0,21.0,19.0,9.0,41.0,30.0,45.0,54.0,26.0,19.0,13.0,12.0,48.0,37.0,40.0,18.0,5.0,26.0,31.0,7.0,57.0,55.0,38.0,21.0,57.0,16.0,30.0,15.0,35.0,40.0,42.0,17.0,19.0,12.0,75.0,18.0,9.0,36.0,49.0,18.0,22.0,17.0,45.0,19.0,30.0,5.0,13.0,15.0,7.0,8.0,14.0,25.0,18.0,32.0,31.0,6.0,12.0,39.0,18.0,26.0,8.0,68.0,7.0,52.0,49.0,25.0,19.0,7.0,42.0,37.0,28.0,21.0,20.0,16.0,33.0,27.0,36.0,21.0,23.0,44.0,44.0,8.0,58.0,82.0,8.0,72.0,18.0,71.0,21.0,25.0,30.0,15.0,18.0,10.0,34.0,50.0,54.0,17.0,18.0,90.0,86.0,41.0,25.0,74.0,4.0,91.0,45.0,34.0,27.0,43.0,61.0,24.0,26.0,44.0,67.0,21.0,21.0,22.0,41.0,11.0,54.0,44.0,27.0,27.0,35.0,35.0,69.0,33.0,34.0,48.0,27.0,13.0,5.0,36.0,11.0,76.0,14.0,29.0,17.0,64.0,43.0,21.0,12.0,15.0,18.0,28.0,25.0,55.0,26.0,67.0,26.0,16.0,55.0,7.0,19.0,41.0,16.0,29.0,20.0,49.0,28.0,23.0,23.0,2.0,16.0,27.0,17.0,40.0,49.0,17.0,14.0,18.0,44.0,24.0,29.0,45.0,17.0,12.0,20.0,23.0,14.0,35.0,40.0,32.0,19.0,44.0,24.0,21.0,50.0,25.0,26.0,23.0,21.0,44.0,13.0,43.0,18.0,43.0,91.0,37.0,21.0,4.0,57.0,32.0,32.0,46.0,49.0,16.0,28.0,71.0,20.0,52.0,8.0,3.0,19.0,44.0,22.0,22.0,51.0,22.0,7.0,1.0,52.0,5.0,13.0,15.0,25.0,26.0,37.0,38.0,48.0,21.0,13.0,90.0,17.0,25.0,16.0,87.0,15.0,5.0,39.0,71.0,57.0,8.0,22.0,21.0,37.0,39.0,37.0,35.0,24.0,41.0,23.0,20.0,32.0,20.0,20.0,24.0,21.0,64.0,12.0,9.0,11.0,44.0,72.0,22.0,7.0,26.0,33.0,55.0,37.0,38.0,29.0,23.0,10.0,18.0,9.0,41.0,12.0,42.0,53.0,37.0,20.0,1.0,18.0,27.0,15.0,26.0,49.0,18.0,13.0,11.0,19.0,24.0,22.0,12.0,14.0,43.0,17.0,13.0,32.0,48.0,19.0,10.0,26.0,11.0,42.0,44.0,35.0,42.0,27.0,76.0,63.0,16.0,15.0,43.0,13.0,26.0,21.0,21.0,15.0,24.0,59.0,14.0,28.0,23.0,5.0,81.0,27.0,10.0,18.0,26.0,18.0,56.0,15.0,27.0,61.0,74.0,31.0,17.0,23.0,42.0,19.0,25.0,8.0,56.0,40.0,24.0,38.0,47.0,21.0,24.0,72.0,15.0,19.0,9.0,89.0,12.0,40.0,15.0,22.0,4.0,52.0,19.0,38.0,10.0,15.0,16.0,68.0,17.0,17.0,22.0,30.0,26.0,17.0,21.0,8.0,18.0,13.0,34.0,9.0,32.0,57.0,23.0,17.0,55.0,10.0,13.0,20.0,43.0,23.0,25.0,63.0,29.0,30.0,32.0,12.0,16.0,7.0,10.0,18.0,64.0,54.0,10.0,36.0,16.0,47.0,70.0,11.0,81.0,25.0,34.0,18.0,42.0,16.0,44.0,14.0,8.0,25.0,24.0,11.0,57.0,20.0,37.0,17.0,21.0,28.0,13.0,46.0,18.0,24.0,43.0,18.0,49.0,7.0,64.0,11.0,42.0,28.0,23.0,46.0,11.0,67.0,11.0,24.0,56.0,67.0,68.0,20.0,19.0,34.0,39.0,44.0,13.0,55.0,30.0,22.0,17.0,43.0,6.0,47.0,40.0,55.0,26.0,32.0,4.0,30.0,27.0,25.0,32.0,18.0,54.0,55.0,71.0,8.0,24.0,17.0,41.0,14.0,39.0,34.0,60.0,28.0,25.0,17.0,35.0,52.0,24.0,32.0,13.0,38.0,29.0,12.0,75.0,3.0,30.0,43.0,8.0,28.0,8.0,27.0,21.0,3.0,44.0,14.0,15.0,28.0,7.0,80.0,22.0,48.0,19.0,2.0,12.0,71.0,1.0,27.0,19.0,58.0,5.0,68.0,13.0,57.0,4.0,17.0,14.0,51.0,22.0,24.0,52.0,29.0,12.0,27.0,14.0,54.0,10.0,22.0,15.0,9.0,6.0,41.0,17.0,21.0,16.0,13.0,42.0,52.0,30.0,15.0,23.0,0.0,32.0,17.0,80.0,18.0,42.0,16.0,12.0,10.0,60.0,26.0,29.0,9.0,16.0,48.0,33.0,21.0,8.0,12.0,17.0,18.0,74.0,23.0,45.0,13.0,16.0,29.0,12.0,35.0,37.0,59.0,38.0,54.0,29.0,52.0,23.0,37.0,9.0,15.0,15.0,20.0,22.0,53.0,22.0,14.0,41.0,17.0,32.0,16.0,37.0,31.0,3.0,15.0,54.0,12.0,18.0,14.0,53.0,10.0,55.0,41.0,41.0,41.0,33.0,21.0,13.0,15.0,16.0,21.0,6.0,46.0,18.0,1.0,83.0,43.0,39.0,7.0,23.0,66.0,48.0,27.0,3.0,15.0,11.0,19.0,17.0,25.0,26.0,17.0,24.0,28.0,14.0,27.0,6.0,18.0,34.0,25.0,23.0,27.0,4.0,59.0,19.0,87.0,21.0,14.0,38.0,43.0,16.0,9.0,39.0,10.0,26.0,29.0,40.0,41.0,18.0,8.0,53.0,36.0,12.0,21.0,21.0,6.0,15.0,11.0,23.0,20.0,28.0,47.0,26.0,63.0,17.0,10.0,36.0,20.0,9.0,54.0,29.0,45.0,36.0,20.0,38.0,31.0,66.0,70.0,39.0,27.0,30.0,51.0,19.0,45.0,35.0,18.0,53.0,25.0,16.0,4.0,73.0,21.0,31.0,17.0,19.0,25.0,12.0,30.0,67.0,46.0,57.0,42.0,1.0,27.0,23.0,22.0,10.0,29.0,6.0,30.0,67.0,22.0,42.0,30.0,19.0,29.0,25.0,72.0,26.0,25.0,6.0,31.0,19.0,40.0,17.0,29.0,14.0],"b":[7,90,13,74,18,66,46,19,9,31,82,4,19,46,61,44,41,46,70,83,69,61,76,50,66,18,20,53,52,50,34,36,97,43,56,8,82,68,74,15,37,59,25,23,83,77,76,74,80,74,70,50,66,72,42,68,84,19,52,8,29,82,32,25,50,41,74,6,26,81,87,30,9,13,70,50,22,88,18,40,48,64,84,47,80,85,61,48,59,20,18,73,27,37,13,49,37,49,28,89,23,76,43,67,86,62,22,22,33,34,14,51,36,35,52,93,41,95,55,66,26,70,21,82,20,24,64,36,86,2,55,16,45,52,30,57,49,62,14,25,50,13,85,37,55,69,47,23,30,40,35,73,32,22,33,35,11,22,49,17,58,83,74,31,57,42,76,18,22,16,41,54,68,48,33,30,78,85,73,57,32,75,85,62,72,72,35,25,80,68,65,76,59,18,30,68,86,57,78,24,31,76,28,63,66,56,16,31,31,72,32,97,36,13,70,44,76,42,67,41,56,68,79,77,10,13,24,70,3,16,6,39,45,31,82,30,37,52,62,68,93,24,58,54,60,53,85,61,48,48,84,31,74,95,38,64,74,75,54,16,49,62,58,84,34,19,26,20,52,87,76,57,76,27,41,26,80,66,40,43,67,31,52,23,57,57,77,18,34,22,87,24,37,50,78,75,90,35,66,80,45,7,35,72,39,40,40,67,24,44,85,7,18,62,52,88,11,80,25,61,53,51,25,15,50,49,41,51,55,17,57,27,40,30,23,73,46,9,88,95,25,82,19,81,62,27,40,22,53,13,66,79,54,17,46,91,87,60,48,79,12,97,50,45,80,61,78,37,68,83,84,57,43,51,89,56,57,46,34,56,37,92,84,48,64,62,42,29,20,81,11,90,83,83,33,79,50,36,31,15,64,33,27,57,29,75,49,17,79,19,39,75,19,31,27,61,31,98,27,10,28,47,70,79,66,21,14,28,92,47,31,51,36,20,51,27,69,86,48,35,24,76,43,64,56,31,27,23,30,49,22,54,26,55,95,81,51,16,71,87,85,48,79,86,80,72,69,78,20,32,51,98,47,36,81,30,47,2,82,51,16,17,92,65,63,59,71,21,74,90,71,59,21,87,16,34,61,82,63,50,39,24,44,43,38,65,28,72,55,28,46,20,41,62,52,64,41,16,15,89,81,76,7,55,72,76,94,56,39,36,80,18,12,52,15,55,78,77,47,15,21,64,88,58,95,54,20,24,71,42,22,15,32,51,42,80,32,87,20,70,71,34,42,92,70,47,34,87,67,60,23,63,53,26,35,39,34,75,84,14,78,34,36,89,80,17,28,84,23,67,32,33,88,74,70,64,27,45,22,53,15,79,42,54,46,76,21,58,74,16,71,17,93,33,71,23,33,11,81,37,66,41,16,25,80,30,17,82,73,67,20,57,12,19,16,47,21,67,70,28,59,67,11,23,59,68,27,38,69,40,64,69,31,60,11,11,40,74,63,10,41,88,84,71,16,81,39,44,51,65,28,45,66,31,41,53,19,76,20,83,44,50,29,70,87,28,63,57,38,51,26,67,30,67,34,51,68,21,67,56,28,95,80,84,46,50,65,52,66,41,91,78,24,21,68,23,57,68,69,37,56,11,32,51,94,67,19,99,73,87,11,48,18,50,16,40,44,61,30,25,24,74,79,31,41,51,39,50,48,82,19,64,49,8,33,12,38,63,4,93,27,85,41,7,97,30,76,81,8,25,79,5,63,20,72,5,71,26,63,5,81,51,77,28,24,67,55,48,78,30,59,13,28,19,10,9,42,20,30,44,46,52,66,43,16,52,67,36,32,86,74,94,20,34,10,66,37,77,18,43,80,35,23,18,69,18,19,75,23,54,56,16,69,26,56,43,84,41,59,41,68,61,66,15,17,23,50,39,94,73,21,64,23,36,26,73,36,8,33,58,15,25,21,74,10,80,75,62,50,66,39,23,18,35,21,58,71,74,57,83,54,58,9,75,89,68,53,3,53,37,19,60,69,26,63,86,59,22,69,11,84,95,73,68,35,42,80,20,98,29,19,41,52,57,23,59,36,27,81,46,47,59,14,75,43,17,46,23,11,92,16,23,73,35,70,40,68,31,45,83,21,44,76,54,62,63,22,60,75,88,82,64,82,74,72,19,53,81,30,55,27,42,61,85,80,85,23,45,25,39,32,71,71,66,65,69,47,26,75,11,47,46,31,68,48,62,87,29,39,36,73,30,35,7,71,60,58,25,65,17],"a":[5,12,9,3,9,16,8,1,6,8,18,2,12,0,16,3,12,14,15,4,3,17,8,15,1,1,5,2,7,17,19,5,19,19,11,4,14,8,14,3,2,14,16,4,13,19,20,16,12,5,17,7,14,4,8,4,19,10,20,4,12,20,12,7,2,18,19,3,18,3,11,12,9,12,6,16,1,11,18,9,0,17,16,18,4,8,20,14,20,3,8,3,5,14,1,5,5,12,7,13,15,19,12,6,10,16,7,16,6,15,5,1,16,5,12,19,4,19,17,1,8,13,18,19,17,19,8,1,13,0,11,10,8,5,7,5,18,9,1,2,6,11,10,1,4,8,13,15,7,19,3,12,15,13,17,9,11,10,18,10,15,10,14,18,11,9,19,9,3,6,4,7,12,17,20,4,15,15,18,2,18,14,8,15,1,13,6,13,4,15,3,6,5,5,6,4,20,16,7,1,1,4,4,8,10,9,7,15,1,20,15,20,13,12,2,11,8,4,7,17,8,11,4,12,1,1,12,16,0,0,0,16,0,15,15,8,14,12,13,18,18,20,3,14,8,13,16,1,14,1,6,16,19,18,15,1,1,16,12,8,10,14,5,9,16,17,3,10,5,19,19,5,4,0,9,5,2,2,5,18,7,9,19,9,12,3,20,14,9,7,9,8,1,6,14,4,12,7,18,7,13,3,12,15,7,3,8,15,10,17,10,6,2,19,8,19,4,9,1,11,16,7,1,2,8,16,9,19,11,14,11,14,15,8,16,10,5,8,11,18,1,13,14,16,5,0,19,12,0,8,17,11,13,3,12,19,13,15,17,6,3,20,3,1,12,17,17,3,20,8,16,16,20,19,11,1,11,20,17,13,19,15,15,8,14,13,12,2,5,4,9,13,8,8,15,7,10,18,1,4,17,16,7,3,9,12,7,10,18,2,19,15,14,17,4,1,11,19,18,2,5,3,2,10,8,3,5,3,14,3,19,6,16,11,15,11,10,12,17,1,17,15,11,16,2,12,20,0,6,19,3,4,6,9,17,19,11,1,3,11,19,8,3,15,19,20,0,20,5,3,15,19,20,12,9,18,2,1,15,3,8,14,17,18,7,13,7,20,3,15,12,0,13,11,15,2,14,11,16,1,2,5,14,14,3,7,16,4,9,11,8,18,12,13,8,16,6,4,1,14,1,17,7,6,6,20,19,12,19,4,2,3,7,2,8,8,10,14,8,1,16,17,14,4,17,3,10,3,12,19,3,12,9,0,15,2,18,15,12,2,5,9,11,18,16,12,2,19,18,1,15,10,3,16,16,3,14,19,6,14,13,2,0,13,4,9,6,12,16,11,8,1,20,12,10,16,15,15,11,7,5,2,6,9,16,15,13,20,20,12,10,6,16,11,5,9,19,4,12,12,12,7,10,8,2,0,17,8,6,18,12,1,5,18,13,11,7,11,16,18,4,4,10,12,2,3,14,5,1,15,3,9,10,6,4,9,0,4,6,2,18,10,18,0,8,20,10,5,8,17,9,10,2,3,11,12,4,3,3,11,5,7,14,12,18,16,13,19,2,5,5,8,2,6,13,5,8,5,17,10,14,16,8,5,13,5,10,20,5,13,12,14,16,8,6,4,1,2,11,12,11,2,18,7,18,4,18,20,12,15,5,13,12,18,6,16,13,8,8,7,1,11,20,1,20,6,18,12,9,18,2,18,16,2,12,6,9,12,3,14,11,8,3,3,18,18,11,7,2,12,9,1,6,9,11,5,9,1,7,4,7,10,5,4,18,4,11,1,13,11,7,9,9,6,9,5,13,17,6,2,4,18,17,10,13,11,0,15,17,8,18,19,7,2,5,13,19,7,2,16,20,2,7,7,1,13,18,16,19,14,13,11,19,12,8,14,17,10,15,20,2,2,16,2,0,14,11,15,17,16,13,16,2,18,16,10,1,1,5,4,11,12,0,10,8,5,1,19,10,4,1,11,14,2,20,1,6,9,1,16,19,8,7,15,12,18,10,2,5,3,17,6,11,19,4,13,2,11,18,6,6,20,5,16,8,2,12,6,20,13,10,16,5,3,6,3,6,7,6,11,19,2,5,16,2,0,6,19,4,14,7,16,4,11,8,16,5,17,8,11,9,4,3,12,13,10,16,7,5,14,14,19,19,18,7,17,10,15,6,17,16,13,2,13,14,18,16,6,19,12,8,19,10,19,18,1,11,7,10,5,7,5,13,19,0,0,9,9,12,16,8,5,20,5,11,15,16,1,3,11],"p":[0.7775828668051128,0.45733337752693326,0.1404690112714273,0.834149537024202,0.24346112040105772,0.5793333208032176,0.6524544101636636,0.612309706846863,0.0363223520537832,0.1952198008028565,0.10362934153814041,0.8664265840284329,0.8134643201312959,0.4924843030693886,0.14622299008818662,0.07409779692360141,0.8755600378624173,0.8279637792821286,0.5412576327492555,0.9222606336112984,0.76988595903806,0.7089523400825917,0.9260402838692041,0.6485617151958527,0.2161994758117154,0.8898439650344085,0.07588077538415106,0.7869731774645243,0.2503575307083923,0.5644765631870814,0.17656003381780105,0.30845541516578945,0.9533640476002287,0.6175786238042023,0.27383821185811374,0.22434937207593775,0.18533155550760894,0.28695929574575696,0.17342738952654368,0.1637425710595739,0.1855084401704723,0.9741065999016214,0.1707850343045625,0.561406862994918,0.5395839779909479,0.7568623672137125,0.8190240445503671,0.30359653903687156,0.06781147861300818,0.20534715820978278,0.5058882992236775,0.15404231436291416,0.9808458256215868,0.930795283629672,0.41036439092670984,0.747833331871721,0.465970006368402,0.9324639773651151,0.5139473023367565,0.3478409722055691,0.40447009740110573,0.9545699860081589,0.009240072368956298,0.4839974037198356,0.15313102845453685,0.8732077993016263,0.6548451901080734,0.6013815202366879,0.7411865015565022,0.06453908115114304,0.07358800482025796,0.6129293003850318,0.13134985677509192,0.5746696179592232,0.10172459996087935,0.6523023304913667,0.46038002463088357,0.15706639447445214,0.4481022474981855,0.8084199884936101,0.7173640611217587,0.6101491412792088,0.9344415090955922,0.17806978931981932,0.6193462642703358,0.6101906463682911,0.05572042758647999,0.4610690188843052,0.28929623229016665,0.39046166970402796,0.5473449356259639,0.14738204111183095,0.8097163625191472,0.03672083079947286,0.4035605350460265,0.21986345443892907,0.8939310644526426,0.268506650413578,0.9672177628020291,0.5208291061591694,0.3268825521959089,0.6019605477061152,0.26548274057837573,0.11830032549786607,0.017173301060965818,0.5968870672647122,0.7162708418186234,0.3926034929038644,0.5720247349080643,0.16475744429611217,0.40042132445567846,0.941339451256002,0.47874968193761935,0.03473919805096348,0.36209374947935835,0.1035951670672508,0.5543459986584123,0.25373918336009593,0.9478575892856562,0.7469810435543174,0.41659390699988785,0.18180176395140335,0.8511850063903332,0.9706950241384811,0.9474494155868145,0.9690834256759591,0.24105936767372782,0.7215064052475484,0.35716786527636946,0.10037064257750283,0.09042512991131346,0.8761901694707903,0.6854222474429881,0.6312806439914738,0.14264857286140553,0.9549124712873638,0.7755472068152085,0.10178660670655493,0.9345763816733954,0.5070282499899537,0.5747266826282116,0.2317343966164942,0.5324836808004141,0.0701602352675228,0.6548609240520968,0.6451108153336071,0.015684002945210773,0.4046752765706929,0.3522518729683486,0.10043796678582928,0.963412761249739,0.5653622438188055,0.02624289238731836,0.44933389459209416,0.04131097422786789,0.01691470520259797,0.946247428215196,0.9086191538181849,0.2239072220413041,0.1642323308833431,0.5482332240279364,0.9419015950743661,0.07872921340630668,0.6748257205920445,0.9751198101279164,0.5523944856320553,0.6187338211158135,0.9069080897163189,0.45459904210563606,0.6998713017612206,0.9723911769760356,0.6486879612642218,0.9134683641938612,0.4088236944302608,0.27143671011810877,0.29026109296056957,0.7221910946259991,0.05924044224225322,0.3928694483471653,0.3862300461983017,0.13366713718620704,0.42562801395696725,0.48297774720939946,0.4237053234363768,0.1836760409383582,0.970642661143843,0.20754933900201222,0.6640606145817103,0.7496011162136214,0.48594300777024846,0.9678657832188531,0.8710850240212391,0.10566101857468557,0.21659236211314425,0.4241173674979981,0.924883183336993,0.31954346341429685,0.4282879601055205,0.983712803637784,0.8598113064487836,0.45080367907680063,0.516975177753944,0.5854035570087786,0.6856585824766637,0.9089320038707607,0.22692911846260744,0.8686606905812975,0.6596848517105727,0.4422918608254276,0.19519680362316194,0.23169833049307842,0.47901242039162684,0.12102719562913622,0.6822708057376277,0.6866550891179886,0.8684531206767125,0.9651622625680265,0.9230393707859377,0.3291259651543952,0.46057965042914484,0.9423933207951023,0.5317668450748956,0.34673249849990184,0.6067778430186539,0.06204202872731113,0.3214980166354815,0.9716507746454053,0.06989657189455767,0.22388614308806365,0.975525792738096,0.7702022605570926,0.12042899534793539,0.9247535744526898,0.7116549419310101,0.8172343133200113,0.06474807700311391,0.6987802468839222,0.15552695131128225,0.3086865561973391,0.3282049875355266,0.29754509736953527,0.004715055146505165,0.08216363367270385,0.04962738851121795,0.10558793403387612,0.2552872254399714,0.08300251991282126,0.9725083300446704,0.6436221083844551,0.23157978970257265,0.8782434265291679,0.437098123898211,0.14516710909647412,0.6130002778070822,0.472237140744286,0.3643793222512979,0.6447309071338625,0.08521715402423435,0.16498227227188633,0.1279241146832304,0.779342295979806,0.3365879374243661,0.7434331427630565,0.5991455588153798,0.5354370588289614,0.9371382630470844,0.44059015729618256,0.2501756045429069,0.9166170157658946,0.2744769626484356,0.37379202910449605,0.2605344245474883,0.024761643677000178,0.9640101239271968,0.6911977526916606,0.12851495778359556,0.698241409754532,0.8268341693778567,0.9178036970438856,0.12234431679353519,0.8209406171588054,0.3217607345434168,0.3433049407657267,0.4140136060273294,0.5191544946293654,0.6818250083418325,0.3862602843394829,0.7788427244365816,0.38835601989083846,0.37329350959114604,0.8438485860062241,0.6156309172166068,0.23868975687526572,0.6696555590422932,0.5420781130397723,0.19791079574429937,0.13831889188356095,0.3613668269572563,0.5681523536655162,0.17246824434868602,0.524477937814001,0.547694046801491,0.05459486131075897,0.013838978083211328,0.01719342501751564,0.1493207762870481,0.19203054644666562,0.197271655473922,0.5708994126471174,0.557589631882679,0.2844449282658912,0.024139565083277414,0.642426399416484,0.46744130330769007,0.23337132820364914,0.10404181362643805,0.5673802521826841,0.8266835760958076,0.2671864693262973,0.8055049215043859,0.8808925771142129,0.40736384170881546,0.7360972868650286,0.4162858963033591,0.8087893211299477,0.6436412798309512,0.5955493406878631,0.06755446926554187,0.21230079260876167,0.6250381906425404,0.48441030415063957,0.9396602631997564,0.8122217820712037,0.5909122391162751,0.893423336345134,0.5352343727354938,0.9373983202455944,0.3822372358395443,0.6078528581144416,0.8205557635378029,0.2974645862451093,0.8556476624000151,0.8109258649255147,0.8365301717638647,0.2930257060933774,0.92196922429833,0.51629139218538,0.3118643172053053,0.34543173234413205,0.33870210331542006,0.34755315159510114,0.5671137426656223,0.980950996139144,0.9527504732427654,0.18883100234691486,0.9862450969906387,0.9737630762155725,0.5691583055152136,0.2602375923474074,0.9324309829506272,0.1480183185400119,0.9173127340485041,0.8927264574990847,0.7439874543899228,0.2251762885506423,0.5781688900142912,0.7138662967928371,0.6250361807878351,0.13151486981540494,0.47964687248138493,0.751446630280755,0.12029657358887924,0.05935055456025373,0.10230727971005926,0.3908974703575976,0.19284807372179347,0.9340283290826656,0.9025038542950947,0.5832882044097993,0.33811732881172385,0.8471939748069226,0.2684978630401089,0.7739299598480744,0.6194510895859595,0.3961720135405902,0.7094614298307917,0.5114231160767828,0.40032184059385,0.06027530774176526,0.42209319291302716,0.7844956056539567,0.8171386239967977,0.08142681866168733,0.27916858022129154,0.15315801176535815,0.7821242734155343,0.8101025320803885,0.20952417481599395,0.3829875680550565,0.9182126413988922,0.03491289726613944,0.697949838087706,0.8584900870888297,0.9547996060501351,0.8540843251829386,0.8630906369827196,0.4528378289789159,0.7854942561224161,0.6095575061579068,0.3195683436872523,0.04660246077977326,0.4297938649378197,0.36749721997991913,0.8501497860390552,0.6743238051344829,0.791960570241361,0.8220593921210213,0.05751455859630439,0.5514686838803533,0.04442969195004931,0.46176676717096377,0.5475342885960837,0.23071562363822196,0.44198830591702865,0.7032459792042589,0.7801865453138588,0.9351824977005578,0.5969558243971493,0.386876515816732,0.4735290793732323,0.8242001178390206,0.8513498619488524,0.06329076007091539,0.11425400657504081,0.15215689206785088,0.7588359939127827,0.08110799621119913,0.31315603768695643,0.7254977125388604,0.9097549333318116,0.3625047545029516,0.4799315281796377,0.42066480401081807,0.10853552664042065,0.8742037774149884,0.6828362137483392,0.761988919266646,0.9913335168016781,0.6150332742388236,0.8126916353368461,0.5164805574707265,0.7697259807854213,0.617036124734339,0.7333067146857823,0.9479844789477203,0.2869832728307551,0.261891083619858,0.23898899563637266,0.7956268949040792,0.2837272300685043,0.19822289241673552,0.9445166532004952,0.6016300995701644,0.015757170986529845,0.15883044288688608,0.9658464008266636,0.2875127361960428,0.5494477156522621,0.18871333169544813,0.01698879024955846,0.11945992292191177,0.32270251240351344,0.0876767743863478,0.4149396345720804,0.5800387296354539,0.37509004281887814,0.12747892247222437,0.4775527667710773,0.5493509313570195,0.05123708262031501,0.6657091898136076,0.4493801188448041,0.11568637746037314,0.17896434482281887,0.537789542256637,0.5481372467181105,0.6365673311750017,0.8499856919563704,0.14406833199725844,0.9956290058682213,0.09555464114642898,0.42907647083640943,0.3937757779843958,0.9929939825132155,0.06446830665044123,0.11227041236613156,0.5212196891102161,0.8428320382846068,0.8653812624928701,0.15461350884358716,0.5278408253087623,0.8068909767798327,0.7533868445486984,0.864924814619368,0.9627242205123663,0.4880923789323124,0.633710723863733,0.5471584557738685,0.3005272371446581,0.5007360907460237,0.618208167877905,0.7704885102418091,0.2916966498323348,0.2354179883093983,0.3006193774020296,0.9808287347382783,0.18963098838061687,0.3992865307271143,0.7199654549604169,0.4006358574650506,0.8831832631284449,0.0986175864684189,0.5548038607237538,0.4096695065304008,0.4115011642301789,0.6226774137000628,0.24446269336365334,0.5869645362927043,0.5136455642758178,0.5993083239527996,0.1117490910672343,0.9870486070474944,0.4119409677507191,0.7652792961801416,0.5438273843626098,0.7108250533429428,0.6339042964622534,0.3717908781591508,0.3111352893754644,0.042345152737995884,0.40722757328580994,0.22303296281086604,0.01948937477653412,0.4106794410042516,0.4167099785046826,0.3051119942393916,0.28398882420479343,0.407195959607797,0.12423947390949674,0.22812827195192442,0.9939494757933338,0.011274585452559771,0.24377042350742717,0.8410599358334119,0.09528655377807427,0.1426115254386522,0.9713170095367352,0.4614966672136791,0.8422180995943369,0.1266746987442764,0.31862096748880253,0.0889434129959421,0.9771129316394189,0.3551677613752573,0.35977374194666667,0.8569961139737294,0.779311751078666,0.833667137356193,0.914880637754989,0.2564736189308843,0.062322565113913875,0.6279141041507166,0.20540124334563847,0.9246160347834331,0.267230935812272,0.5088687690366287,0.05136723866731896,0.10153682779180095,0.6822534018575901,0.3655851323985866,0.24201799604688,0.6384198116928193,0.15397494780540866,0.8881138290284725,0.3064441223863801,0.14681179284469636,0.5306646962141359,0.20313679738472468,0.25833386349909815,0.7997586761194269,0.29564876149463704,0.8017270531164242,0.596018761246822,0.9905435839423367,0.3538282617052615,0.030699094840766827,0.6236653940938139,0.8745678545363886,0.7472468218244501,0.39326575805830744,0.3150769176070216,0.6931946465032961,0.9202549655822925,0.33247046653175416,0.718599117379477,0.5191489330840757,0.8975280288934091,0.11938324294457225,0.9495744023267336,0.7881016798625868,0.15938088280725626,0.29388432384918706,0.9439178838245248,0.0723575192949053,0.5342093999316575,0.4403926929228701,0.2514366914707582,0.058715500325060566,0.5796785313893378,0.2874864082999342,0.48401120076542803,0.10732284259325375,0.7687154339521585,0.4605145474992436,0.8375535447561535,0.5645866610808974,0.9791234403597506,0.19829918015288217,0.3580350228185929,0.1757879243359537,0.5676547813078434,0.3544079284327051,0.3826335945068362,0.2469076916248958,0.011464145718101282,0.6391191315098461,0.18008658569876723,0.38539013144210443,0.7473352299369596,0.5364185839111499,0.2359100749177756,0.7992061066304836,0.3562938482660094,0.14994842897474503,0.3135350605408782,0.6128415406164363,0.6870376876528883,0.6000284244020029,0.9100910664110635,0.5615176993134001,0.4490110023942382,0.3906256751052506,0.09470795402885046,0.19688238061591434,0.39801976856538124,0.4172103658355375,0.44559409975776587,0.8527597823170572,0.8283708024699494,0.8989811164979267,0.7741443684736697,0.08703288249677543,0.4348892550425332,0.9792546200371723,0.3937905802201207,0.993148537500157,0.5257457148282607,0.727899379133987,0.22957643412631779,0.5241919931323584,0.356921293892978,0.9546776675707895,0.198712701921818,0.19403972120370905,0.4627633359266774,0.29655034221580645,0.4864166089483217,0.7374406825104616,0.9805359520528136,0.3626800641200514,0.32045969933259033,0.33454651979494177,0.9219716306412677,0.01696961575708511,0.40888220569628264,0.16226056863382032,0.2198552194789276,0.6359331052595196,0.444879400594574,0.9426062580510519,0.10046914207901692,0.935052357804153,0.32213700053969174,0.5864945973790101,0.683728740174143,0.39366437533994003,0.6369102879046222,0.4036157874320232,0.9892605209419894,0.021349963642786962,0.6693513036754115,0.5087522119141688,0.8112939811333937,0.7993915801583131,0.2117509117625489,0.30803993432940624,0.4302558919846151,0.5897441568328776,0.6405794641250877,0.02196655261624003,0.5437189611308846,0.2550667942281708,0.6965836542353112,0.6474480516919356,0.5941303542466208,0.11947327109126848,0.8230195950967143,0.5791653009182243,0.7518340214186372,0.5439316789585162,0.46562258229381714,0.2822376067845951,0.809565090704307,0.4567668868137904,0.09733559257034585,0.44815048882220654,0.3019041055317253,0.42810823896814476,0.6943838278023853,0.7801631218877145,0.4523987144068433,0.3062948312984679,0.7220557380645214,0.72014829414545,0.7289130505724115,0.9423958327501256,0.67860741449262,0.9733395188745741,0.8781636911622694,0.9823134153197446,0.6870021282585765,0.38749310452527763,0.5339023828647935,0.7582952450424394,0.5574688502877829,0.1660540144428535,0.91304690416976,0.4425087135805894,0.08266531730969184,0.8777826045999304,0.08667666880560798,0.2762421262347017,0.8104758359796966,0.872642428463595,0.7418928687434252,0.36084713408471525,0.6035693219770839,0.1913795478312108,0.3577349740199196,0.38637529809003146,0.19866944978074597,0.09624756328544626,0.6614202503853965,0.9378217701621527,0.7750159741363833,0.34835230074219714,0.5719981461618728,0.16935399798299833,0.11521225368467958,0.04999909418587922,0.874172189571764,0.12265883338908323,0.3693773408619452,0.8488345549265215,0.7732288443449589,0.5478415888760189,0.9481765952359626,0.4798318129680137,0.8940576745902937,0.478085287886695,0.13496011470551106,0.0998684905669085,0.6346684648462142,0.7489695158694087,0.9224223528908329,0.7507167418545893,0.4158525010631797,0.2378679386188849,0.21840944434582377,0.17978228163945253,0.8976416115773502,0.21802500046756879,0.6945092930111998,0.6885869647344385,0.32843845931194515,0.3006819497739166,0.9432882055628804,0.09796245536831294,0.6069424963598022,0.3411923085994424,0.21163826760984494,0.6891529110460592,0.7110045882932392,0.6073738026916675,0.5276769276928803,0.2895312945040598,0.005005072871173466,0.7906286948919516,0.019650600275587182,0.9234415636753999,0.006802539151130826,0.3138914137834805,0.6896587681578772,0.31220923518288446,0.9922456739506151,0.8722380254677589,0.4104304304792299,0.32340341456153787,0.45947494748973017,0.025846821410038467,0.465013102983155,0.9189004544979733,0.8393254934684884,0.11166380800098996,0.16381927050919032,0.7283644839667702,0.03589042345668769,0.9823675469606334,0.9694954544296857,0.7609990446532839,0.008400931385867061,0.8527964018328891,0.2040433055993558,0.05260179290025557,0.5583479926177939,0.7969554445051394,0.6186967420423577,0.8953056961661987,0.8776843625598485,0.4315714305545697,0.7539491073903419,0.3647214859833725,0.4281309414800294,0.5361366368941367,0.8371101579122227,0.13831636768264644,0.22514185971260114,0.31326096653218194,0.4630656676540099,0.1193133837691962,0.18886773132821122,0.5128758670590854,0.6953236459080552,0.764158041101902,0.001159496751860667,0.43306492347149894,0.8480231833694305,0.33988093673848296,0.3557150637345319,0.9190386464189799,0.3652869846719209,0.4722438410759806,0.6414744486060129,0.668345425190501,0.820326755896329,0.6686642633086539,0.5410500914501373,0.5213941127740627,0.7634939154680633,0.4660119652005954,0.5365314749839645,0.1643759878010791,0.37332278857893897,0.42054004592970595,0.6232340403349512,0.10217050358307644,0.6201250140314565,0.14649104114161338,0.014153377627473374,0.9915353725442253,0.6847276745395325,0.6259724282251269,0.2586757940494433,0.13983471436213102,0.6951250765681267,0.6009104780519767,0.3950710350947393,0.8291795237842141,0.22116869097416791,0.23366752158713622,0.7628851701244639,0.20784087718004285,0.2395582912839631,0.9384435946414165,0.22553924381228363,0.1576527496113107,0.45659965539170844,0.316837162141024,0.17434202229648998,0.12379502943421383,0.15562209266899063,0.18486042454473672,0.2914132180947193,0.13789290712922675,0.6884942230117492,0.05280011750290403,0.6850986723405936,0.9087485668010449,0.859583044893586,0.47260739970154875,0.4039895707940415,0.8599624511497095,0.8021164029458299,0.2506270339304595,0.2149072205325,0.636604170621115,0.15969539453431048,0.9472912788502819,0.3142782481957176,0.8068624650198157,0.7743315935016106,0.28339598565081636,0.3850172942228607,0.6327475944239138,0.8244750642402301,0.6823526667565121,0.3895382118005164,0.5285799661440762,0.28945288292442206,0.02227820900818611,0.40638037289662354,0.8917236422456227,0.2349193861786476,0.6829720345938244,0.6347773960576593,0.4358606376942187,0.9106248922512801,0.03979128916018326,0.052892002683829986,0.3555410707890141,0.917064059584793,0.13282332744148717,0.7007023790888327,0.4163747607008883,0.653480661730345,0.4957941065488507,0.6483948054795401,0.5865067297153348,0.3770181632261487,0.6973158094984304,0.8117943118584301,0.451962723291911,0.12791361988263494,0.2270594483446411,0.6781523291274247,0.7336729511407982,0.8105602108926795,0.30401876316821563,0.5014026963694118,0.9427198346600314,0.7628231256763316,0.13316074403934453,0.044618204101862124,0.8336035874904602,0.11050474483387962,0.200893346216648,0.20834900427057468,0.3446616352952241,0.9784810163208226,0.013811818195002656,0.8816100440252916,0.9166275143256435,0.5911942115837334,0.8029026239631192,0.5038868050787382,0.003529353859622608,0.4480740788903843,0.8308191939823171,0.18269569841009026,0.8036672538664973,0.5601971820972476,0.03616992118237916,0.8957071074265903,0.9657645276545097,0.46029389963618494,0.6821296431162645,0.27187812897077146,0.4847435005805205,0.6161979440060128,0.44245246220481027,0.9819746239664704,0.8363255133833896,0.3442793475178769,0.6374825261415731,0.33435483465809024,0.09176475055426048,0.5679056464209127,0.6669369051984373,0.4260013609431772,0.45822543896679213]}
},{}],12:[function(require,module,exports){
module.exports={"expected":[38.0,20.0,21.0,31.0,28.0,25.0,20.0,28.0,37.0,26.0,7.0,19.0,18.0,14.0,24.0,34.0,11.0,12.0,23.0,17.0,22.0,4.0,39.0,9.0,24.0,11.0,13.0,14.0,16.0,24.0,25.0,27.0,24.0,26.0,38.0,24.0,13.0,20.0,22.0,17.0,39.0,19.0,14.0,20.0,21.0,22.0,8.0,27.0,21.0,6.0,12.0,37.0,45.0,5.0,9.0,45.0,18.0,19.0,11.0,24.0,3.0,37.0,7.0,19.0,19.0,22.0,30.0,11.0,3.0,22.0,22.0,17.0,11.0,36.0,14.0,29.0,19.0,22.0,26.0,21.0,16.0,6.0,18.0,9.0,14.0,18.0,30.0,13.0,16.0,27.0,17.0,29.0,19.0,30.0,35.0,9.0,25.0,31.0,18.0,20.0,37.0,11.0,7.0,21.0,32.0,16.0,19.0,18.0,29.0,38.0,41.0,14.0,25.0,14.0,6.0,18.0,31.0,6.0,15.0,17.0,14.0,12.0,24.0,15.0,6.0,34.0,21.0,18.0,35.0,18.0,19.0,23.0,28.0,16.0,27.0,3.0,16.0,5.0,44.0,12.0,12.0,7.0,13.0,32.0,26.0,22.0,16.0,40.0,37.0,22.0,12.0,23.0,31.0,3.0,39.0,16.0,18.0,2.0,14.0,23.0,13.0,15.0,19.0,9.0,21.0,18.0,10.0,20.0,7.0,30.0,12.0,19.0,27.0,14.0,6.0,12.0,34.0,14.0,1.0,10.0,15.0,14.0,30.0,34.0,40.0,44.0,18.0,18.0,2.0,33.0,25.0,10.0,17.0,17.0,35.0,33.0,17.0,15.0,9.0,24.0,19.0,3.0,16.0,19.0,43.0,38.0,33.0,16.0,23.0,36.0,30.0,18.0,7.0,44.0,22.0,12.0,15.0,11.0,2.0,23.0,39.0,17.0,11.0,9.0,9.0,16.0,0.0,10.0,14.0,17.0,34.0,12.0,26.0,8.0,33.0,25.0,21.0,18.0,17.0,33.0,19.0,20.0,15.0,19.0,37.0,11.0,11.0,17.0,36.0,36.0,19.0,15.0,25.0,24.0,39.0,7.0,25.0,8.0,25.0,24.0,22.0,11.0,22.0,11.0,18.0,16.0,13.0,35.0,17.0,4.0,13.0,48.0,23.0,11.0,24.0,14.0,29.0,23.0,14.0,5.0,42.0,8.0,25.0,14.0,15.0,20.0,29.0,25.0,32.0,16.0,43.0,9.0,12.0,8.0,16.0,40.0,22.0,16.0,27.0,32.0,25.0,10.0,9.0,17.0,16.0,31.0,35.0,17.0,28.0,32.0,12.0,20.0,14.0,12.0,16.0,25.0,22.0,18.0,4.0,29.0,15.0,17.0,26.0,22.0,19.0,34.0,37.0,2.0,18.0,14.0,36.0,17.0,7.0,12.0,23.0,3.0,22.0,24.0,19.0,16.0,10.0,14.0,14.0,9.0,34.0,31.0,35.0,30.0,20.0,13.0,9.0,19.0,11.0,16.0,15.0,43.0,14.0,23.0,30.0,11.0,11.0,10.0,10.0,9.0,27.0,17.0,12.0,16.0,20.0,11.0,17.0,13.0,4.0,2.0,21.0,27.0,43.0,17.0,29.0,15.0,20.0,16.0,12.0,32.0,24.0,23.0,10.0,15.0,15.0,37.0,17.0,22.0,8.0,32.0,16.0,23.0,33.0,51.0,17.0,32.0,19.0,3.0,45.0,9.0,11.0,12.0,20.0,25.0,19.0,13.0,44.0,9.0,46.0,28.0,33.0,16.0,8.0,23.0,28.0,8.0,20.0,13.0,12.0,33.0,23.0,11.0,41.0,21.0,21.0,6.0,17.0,16.0,14.0,24.0,48.0,14.0,25.0,30.0,43.0,14.0,14.0,3.0,22.0,9.0,30.0,23.0,21.0,1.0,32.0,19.0,24.0,19.0,8.0,38.0,21.0,13.0,33.0,20.0,45.0,13.0,13.0,18.0,16.0,12.0,20.0,9.0,9.0,12.0,5.0,22.0,19.0,19.0,11.0,23.0,21.0,15.0,6.0,7.0,23.0,6.0,11.0,37.0,28.0,21.0,14.0,20.0,31.0,31.0,13.0,7.0,9.0,22.0,13.0,20.0,29.0,29.0,16.0,24.0,30.0,33.0,12.0,17.0,27.0,18.0,29.0,11.0,18.0,19.0,6.0,42.0,37.0,15.0,19.0,24.0,23.0,34.0,13.0,14.0,17.0,4.0,39.0,38.0,10.0,13.0,16.0,12.0,30.0,11.0,15.0,21.0,15.0,22.0,11.0,28.0,16.0,16.0,23.0,21.0,4.0,25.0,17.0,22.0,12.0,18.0,2.0,7.0,15.0,44.0,19.0,2.0,24.0,20.0,27.0,7.0,43.0,22.0,20.0,27.0,16.0,29.0,21.0,52.0,9.0,18.0,22.0,23.0,22.0,26.0,22.0,25.0,7.0,16.0,16.0,24.0,24.0,33.0,19.0,23.0,16.0,12.0,19.0,15.0,30.0,23.0,17.0,5.0,12.0,17.0,24.0,14.0,19.0,28.0,23.0,22.0,12.0,21.0,12.0,9.0,10.0,37.0,28.0,23.0,8.0,18.0,41.0,26.0,37.0,17.0,6.0,20.0,26.0,25.0,8.0,13.0,18.0,18.0,28.0,15.0,36.0,17.0,24.0,28.0,22.0,8.0,24.0,19.0,10.0,36.0,20.0,31.0,42.0,23.0,39.0,21.0,17.0,9.0,7.0,12.0,13.0,2.0,21.0,15.0,18.0,18.0,14.0,20.0,40.0,26.0,32.0,46.0,19.0,49.0,7.0,4.0,8.0,22.0,19.0,9.0,25.0,13.0,27.0,26.0,14.0,13.0,19.0,17.0,9.0,18.0,19.0,35.0,23.0,23.0,11.0,28.0,11.0,21.0,30.0,21.0,48.0,15.0,25.0,23.0,12.0,6.0,19.0,24.0,11.0,15.0,10.0,8.0,17.0,36.0,27.0,25.0,29.0,25.0,17.0,24.0,34.0,23.0,15.0,24.0,22.0,1.0,34.0,29.0,43.0,14.0,22.0,14.0,49.0,32.0,8.0,37.0,25.0,30.0,23.0,31.0,16.0,16.0,4.0,7.0,27.0,12.0,20.0,13.0,16.0,45.0,15.0,34.0,11.0,19.0,1.0,29.0,3.0,27.0,34.0,47.0,30.0,8.0,50.0,20.0,27.0,16.0,8.0,21.0,48.0,13.0,13.0,28.0,3.0,10.0,6.0,11.0,23.0,2.0,35.0,25.0,13.0,15.0,5.0,12.0,30.0,40.0,24.0,31.0,31.0,20.0,18.0,7.0,16.0,27.0,4.0,18.0,6.0,17.0,20.0,11.0,34.0,19.0,4.0,18.0,2.0,14.0,39.0,9.0,6.0,17.0,21.0,12.0,6.0,1.0,31.0,8.0,41.0,22.0,15.0,24.0,6.0,33.0,25.0,6.0,9.0,16.0,16.0,16.0,25.0,9.0,19.0,17.0,12.0,39.0,23.0,37.0,12.0,9.0,11.0,4.0,19.0,12.0,16.0,18.0,35.0,21.0,20.0,12.0,13.0,44.0,3.0,49.0,8.0,14.0,5.0,15.0,30.0,11.0,5.0,37.0,8.0,4.0,5.0,24.0,15.0,12.0,36.0,25.0,10.0,43.0,46.0,17.0,12.0,24.0,6.0,9.0,31.0,4.0,36.0,14.0,30.0,16.0,32.0,17.0,15.0,33.0,16.0,15.0,28.0,41.0,19.0,46.0,12.0,18.0,13.0,22.0,24.0,15.0,15.0,3.0,11.0,38.0,36.0,29.0,13.0,15.0,23.0,10.0,26.0,10.0,5.0,35.0,38.0,12.0,6.0,25.0,28.0,43.0,29.0,29.0,9.0,34.0,50.0,10.0,22.0,17.0,7.0,33.0,25.0,9.0,23.0,39.0,16.0,1.0,25.0,32.0,32.0,12.0,7.0,20.0,10.0,36.0,14.0,24.0,18.0,14.0,23.0,25.0,12.0,20.0,11.0,6.0,41.0,26.0,15.0,24.0,4.0,10.0,19.0,20.0,22.0,24.0,19.0,4.0,12.0,25.0,25.0,18.0,13.0,9.0,25.0,16.0,18.0,11.0,5.0,25.0,1.0,28.0,5.0,12.0,39.0,28.0,27.0,14.0,3.0,11.0,18.0,28.0,15.0,53.0,23.0,13.0,11.0,21.0,5.0,8.0,36.0,33.0,21.0,14.0,24.0,15.0,28.0,35.0,21.0,14.0,16.0,17.0,19.0,26.0,20.0,15.0,25.0,2.0,18.0,37.0,27.0,20.0,19.0,18.0,29.0,11.0],"b":[38,23,38,35,28,47,55,29,45,35,30,40,40,16,42,43,25,34,42,27,39,7,45,43,41,13,24,16,23,31,48,27,33,43,49,32,13,36,40,34,42,20,22,20,34,42,13,28,25,19,35,47,47,5,12,54,20,39,38,32,26,45,10,20,41,38,33,45,15,41,34,18,14,55,24,38,19,46,43,54,27,17,40,10,19,36,35,40,20,35,17,29,31,56,42,35,28,47,18,33,42,47,19,40,36,36,19,19,48,40,47,23,30,14,19,20,52,15,30,49,20,46,31,15,6,43,31,18,38,22,22,45,41,28,47,15,22,6,47,24,21,19,17,39,42,24,17,42,37,39,16,24,42,8,49,29,52,19,22,24,30,16,19,21,26,21,24,25,23,47,15,31,33,25,22,46,37,14,37,10,47,17,49,49,47,56,28,38,3,42,28,40,26,35,43,37,23,38,30,52,20,7,27,19,45,47,47,20,50,42,32,49,7,45,44,14,22,15,20,43,49,38,13,21,9,27,0,36,29,31,39,12,32,8,37,31,28,30,35,44,23,35,29,31,38,15,48,28,49,38,19,15,39,27,39,18,25,8,41,30,35,17,23,32,33,43,16,47,47,16,26,49,34,23,43,34,49,32,41,22,43,9,34,18,16,46,35,46,37,40,46,23,28,22,33,47,26,40,43,43,36,10,27,17,22,36,36,33,48,32,38,36,21,16,32,34,22,21,16,30,34,30,39,32,27,36,41,15,32,23,44,25,34,13,41,6,27,40,33,18,29,37,32,20,38,39,53,31,37,36,10,26,41,16,21,44,26,26,44,36,25,19,11,34,37,20,27,18,53,37,20,17,27,27,33,30,43,40,51,44,32,20,23,42,28,35,43,24,22,37,46,45,10,38,37,35,48,54,23,37,20,7,46,36,17,20,22,30,27,44,45,26,47,40,39,24,31,42,35,13,51,34,12,33,29,18,42,28,24,15,35,29,19,39,52,49,39,32,44,27,15,4,24,29,53,39,22,12,41,20,30,26,48,44,41,14,43,43,48,17,17,50,27,14,43,15,36,12,8,37,25,35,11,29,22,39,10,11,40,26,15,41,44,31,17,27,37,37,17,23,10,27,48,20,39,32,40,42,33,37,19,24,31,36,29,16,30,54,16,47,40,15,21,28,34,35,46,25,27,18,47,40,12,45,30,12,31,24,22,29,35,23,11,44,42,32,31,47,41,33,29,23,15,37,11,7,16,44,28,5,29,23,27,10,46,26,24,29,37,29,23,53,33,39,28,27,26,44,22,26,16,25,44,51,35,35,30,41,36,15,33,16,39,50,24,8,32,29,28,14,34,35,26,44,33,49,37,12,30,41,30,38,10,18,43,32,39,44,7,25,27,29,14,16,22,22,35,17,43,17,41,29,31,10,25,37,12,44,25,35,45,25,48,26,20,9,7,12,20,2,25,20,18,33,15,24,44,42,48,52,52,50,7,4,42,27,30,13,25,13,28,41,21,41,19,30,9,33,28,43,51,30,38,41,21,35,34,27,50,17,42,40,13,8,33,31,24,26,24,19,20,49,46,34,45,30,23,38,34,25,35,30,26,2,36,35,44,24,25,40,52,40,28,51,46,48,28,33,22,16,17,32,40,25,27,49,25,49,45,42,13,39,5,45,5,46,40,49,38,8,50,24,38,22,15,44,55,27,23,32,4,11,38,36,32,19,39,34,20,19,43,20,38,45,24,32,37,32,23,23,16,55,11,48,8,20,45,11,41,38,42,26,3,14,39,20,21,25,55,12,9,5,34,9,42,24,33,30,12,33,42,6,23,19,29,19,35,17,29,32,12,49,34,42,24,20,11,4,19,13,23,20,45,26,25,12,35,49,4,52,26,21,10,19,46,11,12,39,11,36,32,38,22,35,38,25,11,49,49,31,12,33,19,17,52,8,36,31,40,49,43,18,28,34,31,21,30,54,19,56,15,32,13,24,37,16,31,7,34,42,43,34,19,47,23,30,32,29,14,35,39,15,10,43,33,51,45,31,17,39,55,10,31,26,16,37,35,18,27,49,29,15,47,35,42,19,8,21,40,37,45,33,34,31,25,54,17,50,22,23,51,36,31,44,17,13,23,25,38,37,23,5,47,36,37,21,13,10,29,17,28,11,7,25,31,41,6,45,41,31,39,14,10,44,45,29,19,53,40,15,16,31,5,31,39,39,21,29,39,21,43,37,52,28,18,17,30,51,24,35,26,9,28,50,31,23,25,18,32,12],"a":[10,7,20,15,16,17,18,3,19,17,3,18,7,8,7,15,9,1,13,10,13,4,11,5,12,9,12,0,14,19,20,17,14,16,10,0,13,4,10,12,12,19,12,20,15,4,2,13,7,1,11,20,17,2,5,14,11,12,11,15,2,16,2,3,14,12,19,8,1,9,7,0,3,16,5,16,11,15,8,17,9,1,4,9,8,16,11,7,1,20,3,13,12,20,9,4,20,15,17,16,13,11,1,12,1,5,13,18,19,17,19,13,1,2,1,17,16,4,8,12,13,10,8,14,6,14,7,13,7,4,12,18,9,1,10,1,14,5,11,3,9,6,9,19,13,19,12,3,5,7,3,14,15,1,19,16,13,1,10,18,1,11,16,1,12,18,1,12,4,18,11,6,16,11,2,10,5,14,1,10,15,4,14,14,17,17,15,18,2,10,19,8,12,9,10,14,4,7,8,20,5,1,10,16,13,7,19,16,12,19,4,10,4,15,7,12,10,5,2,5,10,10,10,6,7,7,0,3,5,8,8,12,18,6,4,16,14,15,11,11,7,8,9,18,19,11,10,3,12,1,12,11,5,13,19,6,9,6,18,18,13,2,12,4,12,13,9,10,14,0,11,10,14,1,16,8,20,14,14,0,4,8,16,14,13,14,17,19,0,14,10,2,11,4,1,9,15,11,9,4,19,10,3,17,4,19,18,4,20,11,7,11,8,7,11,5,20,18,1,18,14,13,10,9,19,3,8,0,11,13,20,9,2,10,12,1,10,11,4,5,4,1,6,8,7,17,13,18,9,2,7,1,5,15,9,5,13,16,20,5,9,8,9,3,9,5,6,1,16,3,8,5,4,0,16,5,5,5,20,6,19,12,9,12,13,4,9,7,15,17,17,19,7,9,12,18,10,20,7,6,18,1,12,6,3,10,16,16,17,7,19,4,7,16,17,14,8,11,13,0,19,11,12,11,15,7,18,15,13,4,17,11,2,9,19,12,18,15,16,6,2,1,14,8,17,13,9,1,7,16,1,10,8,13,3,13,17,16,17,13,12,16,14,8,8,3,2,10,2,19,0,6,3,19,11,6,2,3,1,5,5,7,17,1,14,20,1,1,8,6,9,18,10,17,8,13,16,2,12,17,10,2,8,13,8,2,15,14,4,20,19,13,0,10,14,7,9,0,13,0,8,4,10,9,12,12,18,3,14,16,1,5,8,16,6,16,19,8,4,12,3,9,8,2,2,4,15,12,19,2,20,12,3,4,14,17,19,4,1,9,18,19,3,13,15,7,15,8,20,19,2,13,12,13,17,2,14,18,15,9,19,2,19,12,4,3,7,14,20,11,16,3,7,17,7,15,9,9,7,18,12,1,4,14,19,6,4,10,5,14,5,18,4,11,12,6,17,12,18,16,11,7,3,4,15,17,10,16,14,17,14,20,15,8,7,2,7,12,7,2,14,11,18,5,13,11,12,18,18,18,19,14,1,4,7,20,3,6,19,1,8,15,13,7,17,13,6,17,19,12,16,18,3,6,7,3,6,15,11,5,12,10,6,4,12,18,2,8,9,6,10,13,16,6,9,9,8,8,15,8,12,13,19,1,11,18,18,10,1,9,16,19,8,11,11,18,5,2,13,13,2,1,17,6,0,12,8,19,5,11,6,3,1,17,3,17,11,20,14,5,13,16,16,2,5,6,16,9,8,3,3,7,0,8,13,2,13,6,8,8,5,11,13,14,2,12,17,12,3,7,7,16,2,8,6,14,9,5,7,9,3,9,2,12,19,1,5,15,18,7,6,0,18,8,17,17,12,19,1,5,10,6,4,16,11,15,15,9,16,11,10,14,6,2,12,1,3,1,19,3,9,14,15,7,19,6,13,15,1,20,7,11,0,10,15,2,1,17,7,1,3,7,6,12,17,3,9,13,9,15,11,16,6,6,15,0,13,4,19,16,12,17,13,9,4,9,9,19,15,18,11,12,8,8,14,12,15,2,6,15,7,15,7,13,19,5,19,4,2,5,15,3,6,7,2,19,16,14,8,5,18,9,17,17,3,7,14,2,13,14,5,1,18,7,17,10,7,18,2,2,6,18,13,14,17,18,10,18,3,0,18,17,12,9,2,1,17,7,0,18,6,0,11,17,6,16,13,9,4,8,14,10,5,18,1,19,5,9,16,18,15,11,3,11,13,2,10,17,11,1,2,17,3,4,14,6,7,4,12,1,12,18,15,13,16,10,12,20,12,5,13,0,18,17,20,19,11,17,0,10],"p":[0.9803842064855792,0.7727389922253456,0.10438591605691316,0.7838937951026286,0.997891663444199,0.27225827013693005,0.05504004394581363,0.9563375037340163,0.6950204721134179,0.5241264896631401,0.17040177400698986,0.08164678153666616,0.34784173955954567,0.6816671300495571,0.49390847355695566,0.6736834794280013,0.125896249853773,0.3306932235313278,0.35905755889811997,0.40454711423820755,0.3458889426169556,0.23091303020557152,0.808609344558948,0.12470153360986158,0.4323784606030261,0.563407574283598,0.14310599037213656,0.8606309394355007,0.26519957761422774,0.4133221694254807,0.2034502885042886,0.9655051390038116,0.514842754785479,0.36871620515733916,0.715435664951612,0.7313640321468629,0.7654785980014494,0.5017823213037818,0.41729818816654407,0.2355040633370129,0.8965426841112611,0.15791882387623435,0.20356722907312697,0.5584301665403628,0.3137303064082215,0.47033787408004857,0.5600994673735482,0.8783739720773915,0.7843165028548531,0.30897686798555934,0.07658858549257053,0.6141190756591293,0.9053622193120425,0.7938245139304019,0.5773687128527765,0.7778286768038205,0.7790548619507425,0.2648367545219954,0.017578641642459036,0.5104432015865821,0.054399641111146035,0.7236409588342323,0.5852394277901682,0.9360540387092271,0.19254036541176434,0.3720633160651683,0.7768904894035873,0.08880639186106087,0.17495117090810997,0.39811960886964126,0.5580563230267648,0.9467493615434632,0.7195469740892644,0.5077080897989568,0.4706919959470892,0.6022849564971897,0.9769815700993554,0.2443385663622939,0.5077962803411509,0.12544583118348251,0.4167240489112376,0.309747397645302,0.3888301065009405,0.06546510358707813,0.5634062203714092,0.10574345296253851,0.7972595729143142,0.201099523113353,0.759898128779076,0.47157642308594583,0.9580518599684351,0.9729590080761708,0.3789985190590228,0.2923982934696219,0.7719057967877025,0.16074735104303217,0.5585134377343617,0.4916975852223966,0.8841679776220894,0.23382035271852386,0.8251254763786025,0.002481644705085495,0.34591655228982954,0.3215684960794165,0.8781705179471693,0.35370651306653844,0.8683505111565781,0.03414715645609223,0.35504174793591337,0.8896597952390899,0.7877246518471264,0.13223645288929498,0.8257479060882409,0.9465015131602987,0.30771029622191914,0.333778070760848,0.4292857566212793,0.17494669877401536,0.3131637858181888,0.14054999573505533,0.24504835832040506,0.06650170648007481,0.7010455542405134,0.8640086635750395,0.6665295104245279,0.6938074686473434,0.5930731576091999,0.8803946775001568,0.8764684134422127,0.7853823317672903,0.6857187406957914,0.18246788604818653,0.5803759313670955,0.5575380812571742,0.4571472023301888,0.1693763111896336,0.3233242253023436,0.2857717209636721,0.912128106034803,0.43485035668718264,0.2970059082322296,0.13705425758959078,0.5205783261694799,0.6290600699355025,0.4470426756102672,0.5296791944143664,0.7247409709257742,0.9352825861743634,0.9943728878200524,0.4619175433906577,0.6575984159545507,0.8279555283089597,0.5991897486919897,0.35289939130722225,0.6734530455819541,0.007989643136223634,0.13069538269946124,0.08770673093511316,0.3634402881776999,0.7228438902347671,0.4048701022247523,0.8026965716483372,0.9189532056685528,0.4169725581603212,0.6300564198412235,0.032376223168876894,0.41106005992411876,0.6133339135588254,0.19801997352105505,0.40696673241712555,0.20396168791477365,0.5293178088610326,0.6342740671232245,0.25063131025535723,0.19309444521283425,0.05445549448865328,0.8980079955807414,0.372298645359449,0.003472456347533903,0.10030286525738008,0.023139159849444146,0.7656809721555826,0.4695730851587743,0.5825239573311476,0.7462258018235162,0.6758434752555404,0.24221069491520342,0.027119315840200553,0.10141651973513999,0.7187775481307825,0.6930384770832427,0.08603188898309755,0.3636281410970985,0.30058643641205873,0.7620655023699086,0.827587165185723,0.6737245137282277,0.2649662458929858,0.07722358395876094,0.14424745976003983,0.8791288709481437,0.29692007466799675,0.3411336059130974,0.9855303230825923,0.9091207515040216,0.7800125155324651,0.5051506754792625,0.1426403153575928,0.28677069833452395,0.7406340962056657,0.9028881655844054,0.21886274038343156,0.8111608474045287,0.9358892465826252,0.4096440968551982,0.26641016259557904,0.38997700333141494,0.5571134886013829,0.011221193089369752,0.46214298052799374,0.7368114162791657,0.26847931347803144,0.34287431965030346,0.2351522268204893,0.9107266530037854,0.45757992303338413,0.0742181737275438,0.22878999406622258,0.3822748286948012,0.3835917983215025,0.8180911402473947,0.026665989571424964,0.5882945736128402,0.888132270750801,0.8570036147157718,0.5962713020934847,0.5311718827317073,0.19733918532149874,0.27802468193927465,0.6603889721808314,0.7086364376342214,0.457205104084367,0.3289699023874171,0.11572634198844356,0.9175377099071971,0.10136553254732061,0.042658948161521604,0.5577030014518214,0.6497074061461585,0.9312497924559688,0.9761764710931875,0.8660232725963728,0.5870078889842911,0.7433682678879234,0.9826409454476783,0.12165581380861545,0.9903020122384731,0.7863523751509347,0.3010364433744932,0.47556967847908904,0.4041818185804922,0.5653031156120409,0.9030385604331161,0.26691157912530117,0.27481015088181016,0.10391436112913044,0.6097037476792391,0.6629472638007805,0.09598938319762484,0.2824819282426849,0.1298810811429647,0.9671688623476333,0.4331836069872479,0.4679480584479976,0.28614247868858733,0.22707326980978282,0.3182513120865704,0.523606988909304,0.02787008709844141,0.2215470492994398,0.9731969293601834,0.21015549591281335,0.49817602075426426,0.09754200825333759,0.6913158270064117,0.20964115078146217,0.6787886700467332,0.23757235966488754,0.8447227831019435,0.09106158959672772,0.9047833846295188,0.3231523505668352,0.0947285568668308,0.24394201306171337,0.4551368463925325,0.8181589212587181,0.6615112487396373,0.17684549029484997,0.5358933389660618,0.7235379539753282,0.34038075813985214,0.14819173319990186,0.2698486450979132,0.6676124890136619,0.6352636559254887,0.7007442507693487,0.9297615330772708,0.4552127862809783,0.2939826365008589,0.9927024558627728,0.1588992118834185,0.3545569546658338,0.48109800817383985,0.5648679574098479,0.2311106160271319,0.6922798894412721,0.9893955668850096,0.010195118006633308,0.19420809230836888,0.8640794947895243,0.09265290125462622,0.2339326472025267,0.5653935532382335,0.5580558294090612,0.08162964464900702,0.9303915773793194,0.8553781136229237,0.14898341506973045,0.3350636216680267,0.10083432843059881,0.645298602915533,0.4723006647007997,0.17004412602554142,0.643754530891055,0.3812910330778576,0.4875995027890738,0.6734291061058149,0.4497776980085575,0.5109676434786932,0.855121227322003,0.2641446798983771,0.36710315228954893,0.32323956332542236,0.09715353869716381,0.8681252772632058,0.6345428176979475,0.5545763764901079,0.9059850596568353,0.4077387294691537,0.34125744657174795,0.6020217273486332,0.7075027305981374,0.16379496752700273,0.6064636532109495,0.4966604588212258,0.9565377675198443,0.09836429971938099,0.7178955776382516,0.4294149547043229,0.20959297620558814,0.12979749746915714,0.18620350228765403,0.5341926875940166,0.19225603513454348,0.6532183557584945,0.7869131625088266,0.28434503936071875,0.8824866042929596,0.12979584658920973,0.24639979424246228,0.737619673688974,0.6673559325762399,0.03539449463474176,0.09753063982280352,0.3069765280459671,0.8833268378332839,0.9844981493685998,0.33923032769184824,0.31115607557506886,0.23640905799643397,0.11027085061957465,0.4559531763766336,0.2448821920631603,0.6770132244716522,0.7084152399163421,0.5985166307331748,0.05523529837416752,0.47407511414948433,0.03738027068386818,0.978124340478419,0.02999057066322064,0.1474807070750046,0.32857778188375586,0.768165949858497,0.15976246169456876,0.3218805866753185,0.5943186968594738,0.8904041984847291,0.5892748612809853,0.823997064314518,0.6188665045770498,0.36588850994856204,0.9710873633852353,0.11648667656432221,0.5919268635590671,0.2562306421945799,0.6652532095976054,0.6162271173370191,0.24521378076772504,0.17316000734134218,0.9422348528731852,0.2535742035656525,0.95693236095479,0.48506849926386164,0.7293874170204737,0.20887212268366295,0.03547666430686647,0.3996460422305388,0.6626969805287601,0.6352837813787418,0.03896839888262549,0.09215009092844406,0.7166912247605823,0.966265877344539,0.5372486009299042,0.39613156135495076,0.9489223183071995,0.45079469011963225,0.7396894746051079,0.1949482032487635,0.01234255924242933,0.274566783577868,0.7177809081089026,0.4898789762458051,0.8606284834536588,0.07863985059931,0.35634511976450045,0.8424742667550671,0.963698883477698,0.39915894780468664,0.8710937838287038,0.5622326876040828,0.7644671236225276,0.061637151722793826,0.35582472702938084,0.3916419768555153,0.8990110783572829,0.06843572912451368,0.7424667348013059,0.6318064836642294,0.7931160886605837,0.5352340749919662,0.0008054004374409285,0.8018070205180294,0.4727277024743064,0.2673620633378808,0.6043768119662849,0.1492728329654942,0.8977819288696671,0.08205808055129826,0.18401237556109917,0.06084380962216751,0.21017253512184708,0.7014181162081345,0.3384165930481966,0.5311530409888945,0.20840911065245593,0.9726657773007548,0.5178559897833932,0.1898080707677694,0.7664166044177105,0.4623888880497986,0.9606342907050227,0.41763723475237313,0.8912233511030534,0.27260477432149344,0.47815386908689783,0.5314868776435007,0.5650325528908287,0.08277390123267248,0.6237171873583789,0.8623096874490659,0.425647483104417,0.6738826172660639,0.06732500414785125,0.11639884574900239,0.8313591354992735,0.8260830898861031,0.510425506462187,0.07137526415835449,0.44690414896840847,0.4914771451306823,0.08657380992703234,0.9379997399558819,0.6840421386825772,0.8222304493698771,0.032759798591460054,0.5440638737001966,0.8296528472997307,0.8047066135435352,0.29771500104626414,0.6715019393951751,0.8119925702563717,0.2113044122127845,0.9784306131220779,0.6616861547344934,0.2342128129137402,0.12835327032513,0.17678569982304837,0.8118654910961047,0.8354993605315593,0.9778130697292644,0.8939287834724403,0.7644635208000361,0.4347644202580301,0.961643859093464,0.12524666955050012,0.5690749080969593,0.2774017738294299,0.21300765605371197,0.7840857365248679,0.9269612714900108,0.17979788825334775,0.12345638112603763,0.21992215391315706,0.5467603343210936,0.9129885985833259,0.3927955312212885,0.11356537645413822,0.35953023053485067,0.42522342641928446,0.9432820310998107,0.9939421498545231,0.41885750049227344,0.2861401289590195,0.05218362813892652,0.3724063209191928,0.3337067959784279,0.01153220542829847,0.6352470194153292,0.5250397237321469,0.8768332892595452,0.5985956519189524,0.446675890766713,0.03726915984543311,0.966695635014144,0.47744972400761587,0.9965531219466683,0.05983421466157823,0.12513358021129717,0.4505611868897279,0.6756758224917125,0.9817848956741073,0.45098060654082617,0.9012764121001586,0.5641374730179314,0.2809759597202943,0.892422892584422,0.4175346769504773,0.9955048927607808,0.5970538509607457,0.9699649242683095,0.2102561846964921,0.21747995800481879,0.5228638878286169,0.7970005120119468,0.585285911697774,0.502538419732447,0.7419909655906596,0.7998730380844057,0.3964789640085504,0.26664166701527003,0.14616713224109446,0.30389454693056694,0.38433901194634945,0.9289807105318608,0.3008745046966408,0.24524520493248603,0.06857856181756827,0.5240968151167706,0.023576569998499997,0.9132128333237557,0.5350873669039584,0.2902300698978484,0.65410627650983,0.38659816116415646,0.22513090734954777,0.2326184654620047,0.44796594574180837,0.98506179004503,0.16808688047524956,0.7648268529879185,0.8236649454578258,0.189653867307906,0.19111489181552543,0.194218948334828,0.129571964193941,0.12749332944830583,0.14639018352321864,0.8227739513145982,0.876882826590021,0.593276627624675,0.5903714217123963,0.9306218664343953,0.9099748101654872,0.7635168499029892,0.9306411336120368,0.2136384472258459,0.5147095090054714,0.5367751112399437,0.9400441575234184,0.5927857933557672,0.3886929935900094,0.43797992201360136,0.6164765182654894,0.7250910848145713,0.591882068877446,0.5056225542094381,0.6940141763684606,0.5035277399395206,0.4281910330333474,0.9264158166669574,0.6786582865552264,0.584003123400884,0.8642212419924,0.10272934260400413,0.32906477265490697,0.6998375489532336,0.5117648064097007,0.7766497851100638,0.8938263112999763,0.6279419655210274,0.732427700879821,0.6950402514124354,0.7773928906406098,0.9579866933279382,0.5782111198091455,0.8195857794615613,0.4566912715834184,0.6017758622254732,0.6545586604055438,0.4809025917041694,0.0702578214842271,0.4647300339707612,0.6227701378285695,0.7011941006236992,0.8617633529608197,0.355550357033227,0.45828729075873476,0.8280395997546168,0.029041610013469388,0.967298760216345,0.9709573366273341,0.03731929056094985,0.03765410937103364,0.2521640513306558,0.5976998003899983,0.45220791296925267,0.929473961663795,0.9248521635624907,0.9328558779461549,0.4243033813203776,0.1823804172995216,0.1733488077065426,0.9482408381130143,0.2501927111366615,0.9140633659842612,0.09690599245473086,0.034926796145769545,0.7362141102980588,0.21101603804809388,0.386288045157714,0.22454867791274657,0.6225736755248108,0.3136946074276603,0.5569766801686011,0.8280714382538124,0.5178981574163246,0.9423132811498303,0.8060592199748584,0.4302671682794468,0.4344001156622288,0.8308259033571244,0.5329173124351232,0.34183505238858825,0.4386134709013194,0.4322773101349888,0.3774897249685618,0.1233668756567401,0.16496485547535733,0.6904361580889435,0.6277968690234879,0.380422368817839,0.6857183081762859,0.5416281712186359,0.732346391555367,0.6084018332286978,0.5198351517932076,0.9817229899345032,0.8789681343904805,0.13292783972944022,0.6147408587403931,0.38651622846934175,0.22321438022499862,0.9217752096800993,0.6265828596174785,0.9364297319650228,0.28998995203858424,0.8424675999778013,0.16932051383258218,0.9052553775103322,0.6332326938127111,0.018487794198378316,0.650456180752019,0.4009524196611558,0.38890074370431704,0.7503875261662436,0.9276259004615472,0.34867293521650966,0.9389053507612275,0.18257706446792676,0.21523415897809284,0.43088276672834036,0.345361115360614,0.7471445676850224,0.031319953403367684,0.4600254140776556,0.8537082581555602,0.26476302556293385,0.7240663101493028,0.64200933355599,0.4404698236898923,0.17205072346764294,0.43055217017219993,0.21716601359717713,0.3449496062732931,0.7822069487610275,0.912728837656275,0.661389216758814,0.865965081894537,0.9901753256001402,0.46979270472476475,0.5057717363556098,0.6683761470522505,0.2932990093306589,0.395257231600725,0.8040410537300842,0.2573603566551175,0.3499119392226786,0.8422296784450065,0.31171807761321113,0.7079402852955579,0.1711833263130187,0.1355651118093446,0.5001440664435413,0.0517723918979931,0.8507469652602075,0.68303270621371,0.3851616841190897,0.5964837156737921,0.0034120029756015136,0.168640342462266,0.6543769297998789,0.824965771615358,0.9625446015386154,0.9406791173375981,0.701616342065265,0.40649202541464313,0.7200605275326857,0.057420014930422925,0.9126406418844386,0.278597889246998,0.2340562400683477,0.2619550966835118,0.16170492936873626,0.5026068054079622,0.3115442094752445,0.9013628799179674,0.7791000942376045,0.3422061088778101,0.04321705819514898,0.5300558416552115,0.45627028270559866,0.6708242043568358,0.9758324293723004,0.4343979728330798,0.0993628183283064,0.27138696101948945,0.08563954230133075,0.9634816065048448,0.1473166022330319,0.32778617292369705,0.8124496678406636,0.0092385931987089,0.9614293286507658,0.6324245361331686,0.1407456076389042,0.4393162069574874,0.4468696745737273,0.9876611637013022,0.45955274347927766,0.2958212185583242,0.25864773207498115,0.04778970122180626,0.31212129926367327,0.22737044627539116,0.4789151328655954,0.06977036287474636,0.22027457597180744,0.29525765130852366,0.7163744047985228,0.7042558948327551,0.5952239533644315,0.8740169026292361,0.005973899393471704,0.4392065703261636,0.9750232868630413,0.9159599469100732,0.6497748052074388,0.8903910154004409,0.4828400206965837,0.7084075624212249,0.6599366079111724,0.7398202951456039,0.14354735578137956,0.9191273908406952,0.027138593108395836,0.8344602623529231,0.6514116505316192,0.8934201939947028,0.08791335354383079,0.2925822631466506,0.49653079867073724,0.5228801707377337,0.46950613956246645,0.9803034954047589,0.3893353187654387,0.91159427141695,0.3348129736900709,0.10196650113374894,0.09372802812589365,0.5383766811942765,0.5729076404223628,0.017825283798722724,0.8748313357380177,0.995252669731616,0.6232822471335224,0.8152386123396751,0.9080313854802482,0.15642755951506282,0.7515284240636275,0.4533610991094883,0.04821823053214458,0.25903143787718186,0.4384801854584919,0.48285892716936996,0.9633845245207704,0.37095162235064993,0.5270009726186282,0.009435982367339113,0.6533102486910911,0.23804652265041204,0.1587376693549114,0.9291506621641497,0.4594960684490301,0.5154819838404614,0.8642883230134801,0.6222636655134548,0.8906349200108759,0.7228893960387546,0.35729547861323496,0.292719046291783,0.9914875330524209,0.8464831858419348,0.42095237596868507,0.603613563785983,0.054178123170378845,0.2602681705002621,0.18645819922247786,0.8445367945662137,0.7878060605070927,0.7028782317961897,0.5039821603579104,0.059625534817991266,0.9741644851163629,0.2136625221095514,0.5591235263599226,0.257939818480033,0.24064296474988733,0.9949421938148153,0.9532464839274144,0.7415565558487196,0.1643271789877392,0.49035924821391363,0.8162469320113093,0.748762932937022,0.4454322206526877,0.8509844012188057,0.10798424063771139,0.845330007436653,0.8661819122941083,0.565425993257183,0.3774615504211618,0.06690554202456123,0.32816271663195273,0.8632977236897155,0.5256655585897727,0.4457580142377311,0.6922746823072725,0.7011514054724406,0.4788084960961412,0.02162423637777322,0.2342053444373695,0.8891859222016802,0.607310324673769,0.28669504215196207,0.12741935763140289,0.5752369167051574,0.20748257350790822,0.969242183978754,0.20586502724664846,0.4271740692382817,0.2664853318057505,0.034960342223068874,0.6681669352945909,0.21487795292516387,0.2539648334380302,0.08899929116726302,0.4005395231907112,0.26546417701751746,0.6901518992252709,0.48600217655076117,0.17796763015479122,0.4360148676340556,0.18222366762308861,0.7623559886713116,0.3144329608784415,0.6970048059807592,0.5660901299428287,0.3050555993065591,0.7555296276071617,0.6866270953532669,0.04200771058207198,0.4389949673297173,0.5987367038341649,0.4898126654287369,0.13376446065572667,0.1664979543103131,0.8348648578405646,0.8865833173984781,0.28099462498361705,0.7687102356521271,0.11282122097134151,0.9277649381738429,0.03176215819029893,0.4221995319745906,0.2942410583860462,0.08497961242755703,0.9077553073428501,0.7708405912793452,0.4898359540309438,0.7872166225110477,0.021370681338971576,0.019226714126404643,0.16234351406603342,0.9562541041534767,0.5738994157920103,0.9961993988622166,0.4319396543635987,0.8293022380129047,0.6293052867960656,0.3114834933772206,0.9692933105193826,0.1705166945920933,0.8671100687643063,0.8039824630291847,0.937983992668818,0.3963694150237591,0.43279175388613367,0.6953790630829586,0.5286663833244749,0.8762439293547071,0.1819035479764639,0.11065026714088,0.01618477316507616,0.9527150865311032,0.37054962437982075,0.2044839440664281,0.6499471123408314,0.32339342723755515,0.8852847999129316,0.21707238781830274,0.010391243778154813,0.5907884174997682,0.6645069622533357,0.3917333079035419,0.5865138716322655,0.6121251752823098,0.8850418687630222,0.5267557133112108]}
},{}],13:[function(require,module,exports){
module.exports={"expected":[4.0,12.0,14.0,26.0,17.0,23.0,9.0,34.0,20.0,5.0,18.0,9.0,1.0,10.0,12.0,10.0,19.0,19.0,27.0,12.0,29.0,20.0,8.0,19.0,9.0,21.0,26.0,17.0,2.0,5.0,17.0,16.0,11.0,14.0,15.0,32.0,17.0,25.0,12.0,18.0,3.0,14.0,16.0,25.0,30.0,1.0,18.0,19.0,12.0,28.0,13.0,15.0,17.0,3.0,5.0,8.0,15.0,18.0,9.0,5.0,7.0,9.0,8.0,16.0,21.0,10.0,20.0,5.0,21.0,9.0,31.0,17.0,11.0,10.0,10.0,6.0,8.0,25.0,15.0,9.0,7.0,19.0,3.0,13.0,21.0,21.0,16.0,34.0,20.0,13.0,7.0,13.0,7.0,22.0,7.0,18.0,27.0,29.0,13.0,7.0,34.0,15.0,0.0,16.0,22.0,20.0,37.0,9.0,27.0,5.0,20.0,1.0,24.0,6.0,8.0,19.0,7.0,2.0,16.0,18.0,20.0,10.0,22.0,19.0,12.0,19.0,29.0,15.0,36.0,7.0,9.0,9.0,15.0,17.0,20.0,22.0,17.0,1.0,8.0,6.0,10.0,24.0,23.0,4.0,22.0,27.0,14.0,23.0,17.0,1.0,11.0,16.0,28.0,16.0,13.0,13.0,20.0,32.0,11.0,5.0,16.0,21.0,16.0,14.0,24.0,21.0,7.0,19.0,1.0,13.0,6.0,12.0,12.0,24.0,3.0,16.0,27.0,9.0,23.0,14.0,5.0,10.0,8.0,16.0,11.0,9.0,14.0,9.0,10.0,10.0,10.0,18.0,5.0,19.0,30.0,8.0,10.0,33.0,10.0,8.0,10.0,19.0,6.0,11.0,6.0,11.0,4.0,16.0,17.0,9.0,20.0,15.0,27.0,5.0,9.0,21.0,19.0,18.0,24.0,16.0,21.0,14.0,11.0,17.0,19.0,10.0,19.0,18.0,5.0,16.0,6.0,26.0,13.0,16.0,14.0,15.0,19.0,16.0,7.0,26.0,26.0,5.0,12.0,15.0,13.0,21.0,13.0,4.0,9.0,12.0,9.0,19.0,14.0,15.0,27.0,23.0,20.0,11.0,19.0,19.0,10.0,22.0,19.0,17.0,4.0,14.0,19.0,13.0,24.0,10.0,10.0,10.0,16.0,4.0,13.0,26.0,13.0,10.0,16.0,24.0,7.0,7.0,14.0,21.0,7.0,18.0,2.0,18.0,7.0,19.0,7.0,1.0,4.0,14.0,11.0,24.0,20.0,19.0,9.0,10.0,28.0,16.0,19.0,19.0,9.0,12.0,1.0,10.0,24.0,9.0,18.0,3.0,26.0,26.0,21.0,26.0,6.0,6.0,10.0,17.0,24.0,15.0,6.0,26.0,26.0,18.0,16.0,5.0,21.0,18.0,17.0,22.0,9.0,14.0,21.0,1.0,11.0,8.0,14.0,0.0,7.0,4.0,4.0,17.0,6.0,6.0,21.0,6.0,22.0,20.0,4.0,4.0,25.0,21.0,9.0,7.0,25.0,29.0,19.0,20.0,8.0,9.0,5.0,13.0,30.0,25.0,28.0,13.0,15.0,10.0,19.0,20.0,19.0,24.0,11.0,32.0,7.0,21.0,22.0,24.0,25.0,2.0,13.0,22.0,10.0,7.0,13.0,16.0,3.0,34.0,18.0,19.0,13.0,25.0,11.0,19.0,18.0,15.0,17.0,11.0,20.0,15.0,11.0,21.0,17.0,21.0,18.0,27.0,30.0,10.0,21.0,29.0,19.0,25.0,6.0,10.0,34.0,13.0,6.0,28.0,17.0,13.0,21.0,20.0,3.0,20.0,4.0,12.0,24.0,38.0,17.0,21.0,24.0,8.0,12.0,30.0,33.0,11.0,16.0,20.0,10.0,4.0,3.0,2.0,6.0,10.0,21.0,15.0,10.0,8.0,6.0,33.0,11.0,10.0,29.0,31.0,4.0,6.0,0.0,21.0,9.0,18.0,20.0,26.0,16.0,10.0,6.0,10.0,24.0,24.0,19.0,22.0,3.0,13.0,24.0,19.0,24.0,23.0,17.0,12.0,20.0,23.0,24.0,22.0,3.0,7.0,18.0,12.0,19.0,9.0,3.0,21.0,9.0,16.0,19.0,2.0,14.0,3.0,16.0,20.0,13.0,19.0,21.0,20.0,5.0,8.0,14.0,26.0,18.0,5.0,15.0,22.0,27.0,17.0,5.0,7.0,23.0,19.0,4.0,24.0,16.0,24.0,12.0,14.0,2.0,19.0,13.0,10.0,15.0,20.0,15.0,22.0,27.0,22.0,20.0,28.0,7.0,3.0,0.0,11.0,10.0,4.0,9.0,12.0,24.0,14.0,4.0,23.0,1.0,17.0,11.0,16.0,16.0,17.0,19.0,18.0,14.0,22.0,22.0,16.0,18.0,32.0,14.0,6.0,25.0,18.0,14.0,16.0,21.0,16.0,11.0,7.0,9.0,13.0,25.0,4.0,11.0,32.0,23.0,19.0,5.0,17.0,13.0,3.0,6.0,23.0,31.0,18.0,23.0,18.0,5.0,16.0,11.0,31.0,11.0,1.0,11.0,12.0,14.0,28.0,3.0,15.0,9.0,17.0,21.0,16.0,19.0,15.0,3.0,12.0,20.0,13.0,11.0,20.0,16.0,20.0,19.0,13.0,14.0,3.0,12.0,12.0,7.0,9.0,8.0,11.0,4.0,15.0,1.0,26.0,13.0,21.0,17.0,12.0,12.0,5.0,10.0,4.0,17.0,11.0,18.0,23.0,8.0,8.0,18.0,10.0,16.0,6.0,11.0,13.0,12.0,11.0,20.0,7.0,16.0,13.0,9.0,22.0,11.0,10.0,4.0,29.0,16.0,29.0,26.0,22.0,24.0,14.0,26.0,11.0,5.0,12.0,8.0,18.0,16.0,2.0,11.0,24.0,3.0,17.0,22.0,18.0,4.0,24.0,3.0,12.0,19.0,20.0,12.0,12.0,10.0,5.0,16.0,11.0,25.0,21.0,24.0,29.0,18.0,9.0,25.0,23.0,4.0,8.0,9.0,11.0,26.0,18.0,17.0,19.0,31.0,13.0,10.0,21.0,17.0,17.0,4.0,15.0,7.0,10.0,12.0,20.0,15.0,17.0,8.0,14.0,15.0,18.0,19.0,23.0,13.0,17.0,1.0,18.0,17.0,12.0,15.0,12.0,19.0,17.0,11.0,26.0,15.0,22.0,18.0,13.0,10.0,15.0,22.0,20.0,10.0,22.0,20.0,25.0,15.0,3.0,6.0,24.0,1.0,2.0,5.0,25.0,11.0,1.0,15.0,10.0,10.0,22.0,17.0,5.0,9.0,14.0,11.0,20.0,18.0,18.0,12.0,14.0,18.0,19.0,31.0,15.0,9.0,9.0,13.0,23.0,13.0,15.0,22.0,12.0,13.0,24.0,21.0,14.0,9.0,14.0,23.0,12.0,25.0,12.0,10.0,23.0,15.0,24.0,7.0,21.0,6.0,12.0,10.0,5.0,9.0,22.0,3.0,33.0,4.0,7.0,11.0,18.0,18.0,10.0,21.0,17.0,13.0,11.0,10.0,6.0,16.0,2.0,20.0,3.0,14.0,21.0,15.0,6.0,1.0,18.0,8.0,19.0,10.0,3.0,7.0,8.0,12.0,2.0,12.0,11.0,11.0,8.0,22.0,14.0,2.0,21.0,8.0,24.0,17.0,4.0,7.0,8.0,22.0,3.0,32.0,15.0,25.0,20.0,21.0,15.0,21.0,12.0,23.0,15.0,14.0,7.0,7.0,13.0,3.0,12.0,6.0,21.0,5.0,12.0,10.0,15.0,6.0,21.0,23.0,20.0,25.0,2.0,24.0,14.0,2.0,13.0,25.0,28.0,17.0,19.0,13.0,11.0,17.0,14.0,13.0,7.0,16.0,9.0,15.0,4.0,19.0,14.0,13.0,19.0,27.0,3.0,18.0,13.0,5.0,17.0,15.0,20.0,15.0,13.0,5.0,10.0,21.0,19.0,18.0,19.0,17.0,27.0,23.0,22.0,5.0,24.0,22.0,19.0,12.0,18.0,20.0,17.0,18.0,19.0,10.0,25.0,22.0,21.0,6.0,29.0,5.0,29.0,5.0,10.0,4.0,7.0,22.0,17.0,10.0,14.0,16.0,15.0,12.0,20.0,17.0,27.0,4.0,16.0,10.0,18.0,14.0,30.0,17.0,0.0,2.0,8.0,28.0,6.0,26.0,24.0,23.0,18.0,16.0,2.0,16.0,6.0,10.0,19.0,19.0,13.0,8.0,5.0,14.0,23.0,5.0,13.0,11.0,4.0,6.0,19.0,18.0,28.0,29.0,11.0],"b":[7,21,19,33,18,29,21,34,27,6,33,12,3,10,14,13,20,20,27,19,34,32,8,20,9,27,28,27,7,12,17,19,16,18,26,38,20,31,16,18,17,27,17,34,35,11,28,32,12,28,24,18,24,3,11,21,26,29,12,12,23,26,14,26,23,22,23,16,22,20,39,29,19,18,16,15,14,31,21,11,11,19,11,14,21,22,27,34,22,14,10,19,12,23,19,22,28,31,18,7,37,15,15,21,34,26,39,14,34,5,21,2,24,17,11,26,19,18,23,21,27,16,24,21,16,19,30,29,38,10,15,19,18,17,20,33,21,2,9,7,12,29,23,4,22,35,14,23,23,15,17,20,28,20,14,16,27,35,13,21,34,27,26,14,24,22,14,20,5,13,12,12,12,24,3,22,27,25,23,18,12,24,15,24,12,15,20,11,19,11,23,21,7,19,33,13,10,34,18,21,11,21,8,15,6,16,6,17,25,10,20,22,28,10,27,23,25,20,32,20,24,20,13,24,29,20,19,34,5,17,19,29,15,26,19,17,21,16,11,26,30,7,15,25,13,23,24,12,16,21,14,21,15,20,31,29,29,12,22,20,24,22,36,23,4,14,25,15,28,19,16,17,21,4,15,35,19,12,28,27,17,9,19,27,10,19,4,27,9,26,22,15,17,15,11,28,21,23,11,14,35,16,27,31,21,15,3,10,28,14,28,3,26,33,24,30,7,9,13,23,25,21,7,28,26,27,20,12,25,24,21,30,23,22,21,6,22,12,14,12,7,4,15,21,8,6,23,12,26,27,19,4,29,25,10,8,30,30,26,21,11,11,10,24,35,26,28,15,19,10,25,26,25,25,21,37,11,37,31,27,28,4,18,28,12,14,20,31,19,36,22,19,13,37,11,20,21,18,23,12,31,19,15,32,21,25,29,31,33,15,21,30,27,31,11,20,34,17,17,32,24,19,22,25,7,23,4,21,32,38,24,30,25,8,12,31,35,11,23,20,10,4,9,7,7,16,27,16,11,13,11,36,11,10,32,32,6,22,3,21,13,20,22,30,16,13,18,18,31,24,28,25,20,13,24,35,30,24,17,13,29,24,31,36,4,14,18,18,21,20,18,24,20,24,20,3,19,16,17,21,18,25,21,36,6,12,14,28,22,6,15,26,31,18,13,13,25,36,4,27,18,34,22,15,19,22,29,18,21,26,21,35,35,22,29,32,15,14,0,11,10,4,15,14,27,18,5,32,1,19,16,23,21,17,30,32,14,22,23,17,29,35,16,10,36,21,17,25,21,27,12,7,14,15,32,14,17,34,34,22,8,17,20,4,15,23,32,18,29,34,15,23,17,37,12,1,20,28,18,28,3,16,9,22,26,20,32,21,4,18,22,13,20,21,16,32,20,13,14,16,13,16,20,23,11,22,5,22,3,35,17,27,19,14,26,17,10,14,18,11,27,25,8,9,18,25,22,17,22,14,18,20,23,11,16,16,11,22,22,12,6,31,30,29,35,23,27,17,36,13,7,21,20,24,23,7,11,24,10,25,23,20,14,30,9,12,27,23,23,13,25,12,19,14,29,22,30,30,29,11,30,25,4,22,22,11,27,18,28,29,31,16,14,33,26,23,19,24,11,26,14,22,18,18,22,25,19,19,33,31,27,18,1,27,23,14,26,12,28,21,20,32,29,26,28,14,19,18,29,20,11,22,20,29,16,4,14,27,17,2,10,28,18,8,16,12,20,25,18,7,10,19,27,33,27,18,16,32,20,26,34,19,12,21,13,26,18,19,34,14,13,30,26,17,16,31,35,29,29,27,10,32,16,25,7,21,7,16,16,12,9,24,13,33,17,15,18,21,22,12,36,20,21,18,11,7,17,22,27,5,18,29,22,15,1,20,8,30,18,4,18,13,15,11,12,17,15,12,31,20,3,30,14,25,17,13,20,10,23,4,33,20,26,26,28,21,21,26,29,16,17,8,10,23,7,15,11,21,5,25,21,16,24,25,24,21,31,3,31,14,11,16,25,28,21,22,13,11,34,15,17,8,21,20,34,6,22,15,21,26,31,16,35,24,6,18,24,20,15,21,17,15,22,19,25,20,17,33,34,24,10,27,24,27,17,19,29,21,20,19,14,26,22,21,6,33,12,35,11,12,10,10,22,28,13,17,28,22,14,23,20,33,6,24,12,24,15,37,25,8,2,11,36,6,31,24,34,18,30,3,18,6,27,22,30,23,9,9,16,24,8,22,18,15,13,19,28,31,29,16],"a":[2,3,11,13,16,11,3,14,19,5,14,7,1,10,6,10,19,14,17,2,17,16,4,13,6,7,14,7,2,3,14,4,10,13,7,20,13,14,9,17,3,7,13,19,16,1,9,13,5,9,11,14,6,2,1,8,10,12,7,4,7,7,5,10,11,9,18,4,15,9,20,10,9,2,0,1,5,20,3,8,4,10,1,10,14,8,15,15,11,3,5,4,5,17,1,12,13,15,3,6,19,15,0,16,18,11,20,4,17,5,5,1,8,3,2,19,7,0,14,13,10,1,13,16,12,18,16,9,20,2,5,4,3,14,16,14,16,1,7,6,3,15,16,2,13,17,1,11,8,1,11,16,13,14,10,13,20,18,2,5,14,19,14,12,12,15,2,15,1,10,6,6,9,18,0,14,16,8,18,11,3,6,6,12,7,6,2,4,8,5,3,17,1,16,15,7,6,16,8,3,6,12,6,2,4,11,4,16,16,3,15,10,12,5,9,19,9,14,19,15,20,9,11,12,14,4,17,16,2,13,4,19,10,8,11,5,2,15,2,17,16,3,10,13,9,17,13,2,7,2,4,16,7,8,20,13,14,5,16,18,7,20,19,8,4,8,7,11,18,10,8,6,2,3,13,18,4,6,9,17,6,1,6,9,7,15,0,17,5,19,7,1,4,9,9,9,4,17,5,6,15,16,14,15,7,11,1,7,13,9,12,2,19,17,13,20,6,6,1,6,18,11,2,16,19,18,12,4,7,18,17,18,3,5,19,1,4,5,10,0,2,3,2,17,6,1,16,6,9,14,2,2,19,13,9,0,10,20,18,20,8,3,4,9,17,19,17,10,10,2,7,19,19,18,6,18,3,18,15,13,19,0,1,19,7,3,7,12,2,20,5,3,13,17,11,19,18,8,14,3,13,9,8,17,9,13,18,14,14,6,5,17,8,14,5,8,16,13,4,14,17,5,6,13,1,9,2,2,15,20,10,11,20,5,10,17,15,10,16,5,10,1,1,2,6,9,9,9,1,5,6,19,11,10,16,16,3,2,0,8,3,15,18,11,14,2,0,9,15,12,12,18,1,8,12,15,16,16,17,11,17,17,14,18,0,5,7,12,19,6,2,5,4,12,7,1,10,3,16,16,3,15,20,19,2,8,13,17,15,4,15,8,15,4,3,2,11,16,3,11,12,19,11,8,1,13,12,7,15,12,13,18,17,19,16,18,6,0,0,7,6,3,7,8,19,9,3,19,0,9,8,12,12,15,16,14,13,6,20,0,17,19,8,3,20,2,10,14,17,13,5,7,6,2,15,3,4,19,18,9,5,17,8,2,6,15,15,11,12,16,3,13,1,19,5,1,9,8,2,14,2,15,8,6,16,16,19,7,2,4,6,13,11,17,14,12,5,6,3,0,8,1,7,6,2,4,2,10,1,19,6,12,10,4,9,3,9,0,17,6,9,19,8,4,13,9,7,3,8,3,4,10,19,3,14,12,4,15,10,3,4,13,15,18,18,17,17,14,19,5,1,12,2,7,16,2,11,15,1,12,15,16,3,19,1,9,12,17,9,3,7,1,14,3,10,16,12,14,18,6,16,17,4,4,8,8,18,1,15,15,14,12,10,15,10,12,1,15,7,8,6,12,7,15,8,13,8,13,18,20,11,15,1,8,10,9,13,9,13,8,11,14,15,15,9,9,6,14,15,19,10,5,1,19,15,2,6,19,0,2,3,15,7,1,5,10,4,14,16,3,8,7,11,14,18,16,12,14,16,10,19,12,2,7,9,18,9,12,15,2,9,13,13,14,4,14,17,11,15,7,1,19,15,20,7,14,4,10,3,4,8,17,1,17,3,3,6,5,5,5,19,7,13,4,9,3,16,2,14,1,11,15,14,4,0,16,6,16,2,3,2,1,1,2,12,8,5,7,20,8,2,14,7,17,16,2,0,6,17,3,20,15,18,10,13,7,17,12,16,7,10,7,7,7,1,2,2,15,5,6,1,15,5,7,20,18,15,2,19,14,2,12,19,15,1,18,12,11,17,12,13,6,16,5,14,3,16,7,7,19,13,0,16,12,4,11,11,13,14,7,0,2,13,18,16,8,12,19,17,11,4,18,10,18,2,17,19,17,11,18,7,18,9,17,3,16,0,17,5,10,3,4,17,9,8,10,13,8,3,17,4,16,0,12,1,18,13,19,11,0,1,0,19,5,18,16,16,12,16,2,7,2,10,3,11,13,5,4,8,15,4,13,1,4,0,17,17,18,10,10],"p":[0.37961885674270013,0.4933759301582379,0.4014620004921088,0.6371521252622787,0.41435803110352865,0.677019608859883,0.33458704033952724,0.9828216027207402,0.20780942897938903,0.45433493794313917,0.24022763724930551,0.41485458692013233,0.02810460052324726,0.8155912734625039,0.7662882511031892,0.09950867450514056,0.0882121538554963,0.7750170242537315,0.9454840068932253,0.5915396389832606,0.7040059790935187,0.2656752338121935,0.9610511306556893,0.8155605393223839,0.9657877114130595,0.6688098745876734,0.8374079231025233,0.5216314752510096,0.08734700847767596,0.21587617396675496,0.871878040078994,0.7752972959279651,0.16323541754957738,0.3144439637693386,0.4075000246688649,0.6349761646365719,0.6128764702077634,0.6652080052862932,0.45938099239870844,0.7558647062355632,0.045008726913688735,0.3423126682482198,0.7844546728262458,0.4172984984800998,0.7224890782568876,0.08812271554851892,0.46580823023059614,0.3434733801918639,0.8758712577111645,0.9922071517281725,0.2056961085947948,0.22280890159723565,0.5843258575229822,0.8850783302998955,0.3835550611844667,0.039965038990965374,0.3400267666845245,0.3458050969087556,0.4652932455660883,0.13488352601971276,0.012440215720378012,0.13321341651442453,0.3487085123989253,0.3572418538458926,0.7899803583014862,0.10244880072697504,0.4754590629339417,0.12007527630603487,0.8499884600306487,0.062496573801722466,0.5571899565234131,0.37827930433963464,0.20219057612927083,0.49698162581804484,0.5946269965602888,0.3849957590221873,0.3053882392578404,0.47718406878320785,0.6810947276340407,0.43401026149652644,0.44150611291025776,0.9984028958508542,0.18467706858794686,0.7247233633587591,0.9915277958455653,0.8739138929545813,0.09372335251662678,0.9657119159527761,0.8287718894637417,0.838878335057059,0.43517847556721856,0.5983329880477761,0.3359416579557515,0.8402694927819034,0.3169621738555528,0.6332270846002392,0.9000023110964197,0.8451097900329758,0.6647382012626133,0.8586205685150503,0.8283016211533387,0.5950842262545757,0.059223921333338536,0.0224831485646948,0.2672065866584097,0.5930423881520204,0.888375317773175,0.5173619837458079,0.5815741802914409,0.8722495711036895,0.9376018389230261,0.45483100800880516,0.9501570547599905,0.2649809486416699,0.6662697616106685,0.06342196849629289,0.004517834674112597,0.11837402459953839,0.2598923170814622,0.5574129687562324,0.5898016757123308,0.5634567318476238,0.7738945266230373,0.514309736682667,0.1116269035823485,0.9685646857359327,0.9217993357299712,0.3173428471426756,0.8724464797104798,0.6333773934732443,0.4460851926596161,0.3715663896176826,0.7734320688114278,0.7712687395187963,0.9214426506867412,0.41483017737029293,0.21339321484142437,0.027742649361092164,0.4325721098540358,0.003550515679472843,0.7948103037724539,0.6642667254567463,0.8984690396853521,0.783796120653516,0.908041508380178,0.577782548676149,0.9918066153113203,0.990244412238781,0.6015734695252184,0.04438561722123224,0.07366978385794987,0.01569708197042985,0.958692921861289,0.3574387158592711,0.6177785004080159,0.03281266043737796,0.05897726554242322,0.8201905325839858,0.7626157967318161,0.025914648975067234,0.10286922706426127,0.26018432077585096,0.227441490912216,0.8790619488081188,0.9495955118231798,0.8364956999451283,0.4410588668039239,0.7833242001185141,0.08768578820969508,0.9534455141822515,0.13261163854498959,0.8934351097447877,0.9349014535748135,0.9866933187093578,0.8640616026943146,0.32643655158218055,0.9434285614727767,0.06679410247810735,0.9712983166107132,0.4879331716843296,0.21169157377988457,0.22039335969582186,0.27592489013546073,0.3271349378860542,0.8231586739778938,0.34320166330940194,0.6777782510146582,0.7261289487516787,0.18372521396634478,0.7905882266935833,0.3763631907420093,0.32327434370961816,0.6442556830562218,0.9821451537240906,0.8348027544886183,0.24766203304377998,0.9961950492915697,0.9299502937609319,0.27224553008897856,0.2808425317567056,0.6857580348073584,0.7099302639885077,0.22718960794822207,0.6899589181807273,0.8940456419954121,0.014132531456789499,0.20889244571992016,0.350226064052344,0.1696697468395938,0.8394572734463233,0.8775104837122101,0.44739661066458436,0.9258945443930924,0.033110993488308926,0.03913994220955064,0.4960657086346498,0.6389381808996004,0.6431792676402084,0.3742562881080935,0.2355988322754028,0.2396308711619588,0.42406030880100043,0.2905191515639576,0.3939117122334803,0.34520212743803547,0.38161181666064437,0.7871165303340724,0.11213921270623772,0.9255595745028291,0.7179907207313272,0.15079446796461293,0.649116949095021,0.6055769083917764,0.4464837912681088,0.36969676496457926,0.8229546762726949,0.8829293537425766,0.5688636107931035,0.5597124275723888,0.9922007776798529,0.6798693363014967,0.48741549605493706,0.40043580290145964,0.22243641377157686,0.935054697779498,0.6569280031015472,0.013729027536158567,0.2545502712245762,0.25941482008013117,0.548537448634761,0.4550766235562427,0.5603146915061337,0.8543485413791618,0.5446557638430485,0.6457681790771932,0.639254428583051,0.4327762076326289,0.753040306842474,0.49987250332633226,0.3360862075829163,0.1744290779277009,0.7401643003687859,0.026371373286820043,0.5980878953931368,0.500250959876289,0.8785541764514819,0.6590485603543348,0.4960181557270109,0.5872489951469744,0.06442528426738492,0.2544100062366552,0.37272095735691213,0.712855694077345,0.5242337904298953,0.19461942772658425,0.456556611940484,0.6156167254270006,0.6966776161893313,0.3549507014434701,0.6726366376261934,0.13261804626335216,0.6831482479527244,0.639956576528216,0.6803246317900233,0.02147512445313171,0.7841238702477329,0.41424584997730185,0.17883474056006787,0.4805073127182695,0.005344134665812961,0.03218711635129479,0.015069521985226597,0.0696659774091084,0.7837627071621498,0.7134090479383182,0.7600354505506106,0.9284697546257625,0.32508455661194513,0.6057801658023854,0.518345539750128,0.623558905761793,0.8809132616512898,0.4220903178163464,0.2548381009671008,0.14904380471840506,0.2705852652848679,0.28979331667253194,0.9546784850972885,0.6988367452022477,0.15455026731623822,0.3618641537604461,0.5596549570180807,0.9485135672719323,0.5881248188079604,0.6670505343497841,0.595924968858174,0.2155510439049011,0.08653305925049715,0.7487923180267564,0.6269224556114743,0.8258042974536008,0.4187362747247423,0.6708015502162765,0.7878924910208596,0.8892888794658675,0.007915453131199124,0.501265352927611,0.13275280391183264,0.7601547554835602,0.12228472850268424,0.16620866960282443,0.3599167529670113,0.2865409954302045,0.5018179213222473,0.8700749220785211,0.14656532197202243,0.3998728530320468,0.385680273727665,0.9853492590015873,0.06126534666265826,0.9996902060555941,0.9256727519338046,0.1551780589896834,0.015783279142884687,0.053869811350474084,0.8606034636556652,0.7316206703886454,0.012403601140692277,0.7275371335160066,0.4780761937337925,0.11142343489596307,0.9379570172118195,0.5822807342983516,0.6820058716479722,0.367483886862346,0.8313258349233907,0.7479482071526622,0.9021286149757304,0.14807734565456987,0.4306451407152516,0.1450068688801982,0.7007253989549882,0.16666370730151447,0.2831418294816732,0.6976262471770154,0.8167431294311538,0.9911623945944679,0.5267615691813288,0.521513397067604,0.9860142468051516,0.6456977157169737,0.19957416972203612,0.07494587703751243,0.7970575524449368,0.3713903462845092,0.7372419184673176,0.5124758867995662,0.16352227470385539,0.4380778358795767,0.7917670214801265,0.6378159054630139,0.4153181744377954,0.6895781639698433,0.39382926435429577,0.6569366620482666,0.3564188088736737,0.48613480207787996,0.23752029791162377,0.09616058974161223,0.8308390060759063,0.7615696325719594,0.9736215266726225,0.6774067550421827,0.4282489131241869,0.5813532209928571,0.08856089359159447,0.01018812215066034,0.6621902790545018,0.3568387380314151,0.8462573657256103,0.3786183967516077,0.591036006483072,0.3894210118111747,0.2769540010383913,0.6549705710660836,0.6835354752090668,0.0005107402778887771,0.773222623484429,0.8350244534069766,0.4504625727877165,0.9756855988590651,0.8953714907013373,0.569891266303107,0.6386888668728257,0.17712395810995063,0.1792023232216311,0.9864038307364393,0.1824652179388626,0.16160465448197692,0.7799864062854602,0.05577802028263368,0.5844140262523241,0.9004236449336642,0.5717464516671085,0.4143390194659664,0.7377795121838171,0.7064731626028555,0.5306141810498517,0.5429889954809846,0.9920535098100753,0.5258809052819937,0.5119448972073803,0.8186984904913681,0.8957866534312311,0.6954185079443507,0.929362490834972,0.8929286093129098,0.9784143472877007,0.10783609007239248,0.9699665609162951,0.8434167057646298,0.8540414859310013,0.291503615112622,0.03661056838353516,0.05240319002688687,0.18685856976516702,0.6325332502911409,0.8494689780550528,0.8616093277341774,0.349701887233713,0.030009525066504672,0.8207586623918035,0.5077363212198645,0.2813294760055016,0.7996349347905058,0.8948495906222771,0.45232489315632707,0.2186211475426385,0.03866917233694256,0.9429716305184814,0.5574379242822529,0.664232411375145,0.5676940727955881,0.7750281154344654,0.7522926648996748,0.7090411775222174,0.3579913719704546,0.15084694707758817,0.5298997517427739,0.9500312805225517,0.46725614580054153,0.5719645794921044,0.11645789891972358,0.9794796869296172,0.9771367607927179,0.19477240302221177,0.558807492068508,0.7871251675026634,0.741613258922297,0.5403731396022138,0.2939874208017197,0.8301915572310168,0.5630794228493574,0.22359796266281728,0.7506493244125716,0.2457051591102435,0.9890952586391641,0.09144876945613789,0.3216352420901454,0.26276876140983685,0.10607411782442844,0.8390404326916685,0.29876746743003246,0.36851571671906247,0.9231383042470105,0.630899171279607,0.4081794198949362,0.016520953000517702,0.18567526944187307,0.8301043767099316,0.6477273720569383,0.41361048990095894,0.5527893117948568,0.07779342335680983,0.6380200505087528,0.068707903610574,0.5032214918445743,0.8085557025379848,0.4632348488689355,0.4073721003163475,0.6239949373506732,0.7521222630867836,0.7200534942081176,0.8982169915976819,0.20199492593193935,0.46959890726617526,0.8442336702049373,0.1543077112909519,0.7381946072656413,0.7709966046737644,0.634677942866184,0.3664563875892226,0.1550619909083777,0.8557587785218363,0.057499629991772494,0.6222882865554493,0.10124554886898163,0.3320188608605439,0.13374547699331263,0.556476581568726,0.28972127932230385,0.2413610964795705,0.5498714110879412,0.8041356803524242,0.2996090381841765,0.6993470954428302,0.1053558472488938,0.2641835831212356,0.750691574752705,0.9147477754415188,0.8781941496921282,0.9876839662469241,0.2811047883833828,0.7072237531265735,0.6092498823743369,0.5389862660085569,0.6471986703400208,0.31361915325856216,0.8883676702080434,0.8005916807685698,0.36370001130028173,0.35783194284214925,0.40071333586354596,0.8696715388777283,0.22286702621387855,0.24263590681930913,0.9127743783730231,0.9677739345794505,0.6912101051770685,0.9365910152692434,0.13566621308785698,0.8150458279641977,0.7266994739249664,0.3949811658547766,0.3453135750592804,0.8104435595405872,0.5483444892362925,0.20518270835104668,0.9684062980269672,0.2600306309797189,0.795825427357145,0.9595145848155475,0.3599798599320463,0.8377222414464645,0.5845521796431234,0.0994672752766319,0.5171215524927046,0.8407014162409772,0.3118439746113284,0.7383802695646109,0.13492774798695062,0.48773214097544315,0.4206831165383491,0.5375718710679374,0.08496777487737006,0.9951793912632652,0.9226870144750696,0.8751521773003779,0.6298554938399215,0.15356760716861761,0.1655462344489309,0.29898251102687956,0.6237793110728145,0.6817061124959138,0.7677050446355396,0.9153980348383379,0.2428622117769481,0.19598231002134847,0.7499690410914106,0.9561965475194587,0.9878811785618264,0.38002570811237124,0.7781299052029089,0.7040879729688387,0.5055810714471669,0.04038021211712062,0.046789654000396474,0.5444786097207142,0.45645115311221995,0.5617457092692457,0.8571746729786447,0.47521128776950894,0.09984002621019905,0.6025135078373807,0.6999791542144846,0.3827428280225389,0.8964789101077013,0.9408964454269406,0.9846736731669901,0.20010406250827772,0.8250362201805332,0.6933953461676854,0.022503816203778504,0.18481598307224556,0.643176676380371,0.36921470792037314,0.5363285530157289,0.4483742341354382,0.12029720003639488,0.4156684596503466,0.6224537914673414,0.578399709100337,0.7368694502091557,0.7291036787392284,0.17159071883766486,0.15317244431736166,0.580273893826383,0.3067980937688852,0.00029033611439799323,0.9319487345237847,0.5053054892644657,0.6145590767843396,0.9581189773219654,0.7889916832878296,0.9102959928530734,0.05886139595970841,0.5899612937706948,0.23455177544730543,0.20805159943530338,0.8446307814992084,0.5518038151023721,0.1334475166977318,0.32990570272891895,0.5450743966442368,0.8145127678945292,0.3848744161665578,0.7302839989224355,0.9071394972880491,0.1053949174099007,0.7445502766716194,0.2410048144937913,0.8559071005712873,0.08038160219028101,0.9853842036668319,0.4823893439002913,0.7380583452893232,0.6975546145926044,0.13214079618070373,0.4192868388823525,0.68133263673371,0.6659388382780886,0.0799180592134725,0.33531236987237034,0.611515132169764,0.11818212788706761,0.06048338929618202,0.1008332380619541,0.9297727316934079,0.2623280805009769,0.3756258249044604,0.8037583686375798,0.5804190633328858,0.140399591431299,0.4257439214212855,0.26253557620448587,0.8624186223491643,0.45370513044067695,0.5262202673680438,0.25561729756251816,0.8366527315706036,0.2100453373631317,0.3564666734874573,0.35136062567050685,0.7443745155712731,0.7614490177267055,0.826474364115539,0.6419713253163959,0.9078666298909497,0.05847789954385818,0.6444416940680964,0.6188862251012885,0.6913079768738373,0.27752021696804263,0.24246820371259825,0.13278391551828728,0.8852392528294666,0.8100311588062368,0.961134898435241,0.16678259676134055,0.32644213831777846,0.9495733674449116,0.34529496705243323,0.1396719015903216,0.32242974069256514,0.4689036905068389,0.42386765269714544,0.21016433859019412,0.062436870372898357,0.11173503008112462,0.11396110801523074,0.7074440649489213,0.8072791600896598,0.6749168187777779,0.5753840320914327,0.05353891518390386,0.10188312694045876,0.6408684149866912,0.7918575054420072,0.11505950374213025,0.3007516497915199,0.11798396850956161,0.6814846634227261,0.7207145793937588,0.5180149312438578,0.5072302230440551,0.6014814990369457,0.14964767791309508,0.9335014079035926,0.3930773421900393,0.7118644699342145,0.044785016979562275,0.6561606702390994,0.03654114202013137,0.6529794846871404,0.477144615262705,0.7632956163375542,0.3202434376802674,0.25130161668923656,0.5134152777220078,0.6151252748403806,0.4663835190289094,0.9618583333160391,0.9878826144711161,0.5682147417271941,0.24304061174829372,0.6378977433808444,0.09795375613447033,0.5684144390119867,0.0850050881732134,0.046966199530163566,0.36615274017936783,0.7386722670773544,0.3907143335761212,0.08244749532305051,0.8500741429508643,0.16665991085685583,0.3604237855505279,0.7390358974381783,0.6502758177804602,0.4640537326551546,0.33652010359077233,0.5902139293578266,0.03566256841365956,0.3368181382228923,0.021307305784711295,0.7133027147521049,0.12608873580601365,0.012490679549612471,0.5345365520457488,0.5739454757746154,0.7780393133326917,0.40380249349343345,0.6409050435644312,0.19967458925339776,0.9632004988617555,0.6612719731914987,0.4418080059254741,0.4504826065517762,0.35667949248821595,0.834550364939417,0.9475525408874585,0.612502283754413,0.6193636594729712,0.17709204848807536,0.4213818543383179,0.04362660567685839,0.36143756682806605,0.07892708606917331,0.7203658697548152,0.2637134696858152,0.9097446629524641,0.31249832763162244,0.1421512315748077,0.697845032694614,0.8432622531548657,0.9010499123520113,0.6941694987635514,0.41700468771947286,0.5324951958067199,0.17374695126392226,0.5620358547359225,0.6264653556363671,0.19940890184116755,0.9968910264427788,0.1231296509850206,0.3343206430957302,0.40143043317168114,0.7690545864487097,0.7271303324409404,0.7337566855310074,0.11406685557960872,0.7616153891321686,0.046455598322595604,0.4885968235608156,0.4542978896634584,0.6491391001658027,0.3464395893973562,0.008517638303970454,0.47249145982969365,0.4459557116813917,0.45133714527370783,0.4407636706392475,0.14002001904327233,0.20760073923239952,0.7875847124860833,0.4418568444648139,0.9901324944514571,0.20397865472341614,0.4935051029827484,0.07464980431520174,0.32716062661545275,0.5432790622266574,0.7758961280061325,0.0009082010285119679,0.920892378036064,0.3905591066489025,0.6151888269406245,0.1803899567727698,0.21920217009729415,0.5355070023108184,0.10158408886856685,0.45053509929131863,0.13264442892707828,0.7952040858212348,0.5120596666301549,0.19802632290207822,0.3398912114763626,0.5976013342514126,0.782070014580801,0.025482920616784588,0.8671030237981958,0.08465060176414108,0.865933056312264,0.6128333587067099,0.5150914669702202,0.5348183645910514,0.9619781540046382,0.05752188037629802,0.531477391208975,0.8582499862968898,0.5920040351659464,0.47750467411384,0.009195943688753205,0.39839193270835316,0.3023911145571645,0.730006168595045,0.4485621107759883,0.9128020617137063,0.5801332673637458,0.3461785293474817,0.46057770457336344,0.07543827230102873,0.09948061364786098,0.7482396211387705,0.7978130251404383,0.6185726451572353,0.6121745906046019,0.09465714222549604,0.41993992213929343,0.07454485915746312,0.04803581265449175,0.35929439624531323,0.8780689965205668,0.9597419095880457,0.8051089038042636,0.39290837334254625,0.7297945797367156,0.6385897143519259,0.0478536312672968,0.5687429488783537,0.0043955683965382075,0.37884888589188837,0.03047500424554661,0.3051257949041959,0.06594367868888718,0.4875350617360099,0.5559401040414549,0.8495879793005288,0.4639478351651931,0.08045268202691402,0.7591362941941686,0.21866475065533386,0.1391447669335215,0.10981073241142192,0.666489270862598,0.8282994242114685,0.3181386679733851,0.9131236493717234,0.7915152109190517,0.4225392829723129,0.331547332864631,0.57299223021067,0.8932874250353215,0.5347423061847822,0.2694904067570494,0.8823367707866501,0.9607502265923011,0.5671450687095121,0.3558124193579528,0.8556311801796195,0.15213244210618004,0.6363431382638014,0.8661415628101194,0.13241523625740004,0.6719791799211983,0.4621407232410659,0.12128504405224216,0.0107681878723358,0.7738268973944111,0.7144462484623149,0.4532258721371587,0.869673463163567,0.9469739951894338,0.9126694347252915,0.8819244210527255,0.7534822885339187,0.4381760219819917,0.6676698051675443,0.09157713949991231,0.12587357658080278,0.24727826522747698,0.46632296879679735,0.8504701355326487,0.4199890015094745,0.4677322311149663,0.5393118278578186,0.23387249497716023,0.5112642840287827,0.7936887307336273,0.490774440012435,0.8142117460571767,0.6391374765216504,0.6112592290716394,0.3742523196459393,0.7517539690278594,0.08611935995684417,0.40954231856378276,0.6015917507605841,0.441200648282672,0.0685504916404267,0.6579559302754623,0.6821996457214485,0.5103299395600405,0.8772661802363915,0.6189914061097035,0.9993816198278236,0.4066523892916569,0.9906447618316125,0.04446095627562774,0.1986498001028365,0.7785987400427636,0.8507281998487746,0.004437708543334473,0.8163524239891911,0.40481186133023517,0.06983416411838506,0.6282015411676869,0.25460114020956226,0.7502828001536521,0.8597453734974991,0.2411720032663025,0.060669066327112775,0.5926071548607141,0.05853864771584516,0.4562941491525305,0.910476201691448,0.14648807991432444,0.7613776038806319,0.9651173912638418,0.21168933495547626]}
},{}],14:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var factory = require( './../lib/factory.js' );


// FIXTURES //

var smallRange = require( './fixtures/julia/small_range.json' );
var mediumRange = require( './fixtures/julia/medium_range.json' );
var largeRange = require( './fixtures/julia/large_range.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a function', function test( t ) {
	var quantile = factory( 0, 1 );
	t.equal( typeof quantile, 'function', 'returns a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the created function returns `NaN`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0, 1 );
	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, 1 );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( 1, NaN );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, NaN );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, NaN );
	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a finite `a` and `b`, the function returns a function which returns `NaN` when provided a number outside `[0,1]` for `p`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( -2, 2 );
	y = quantile( -0.1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 1.1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a non-integer value for `a` or `b`, the created function always returns `NaN`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 2, 1.5 );

	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( 1.2, 4 );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided `a > b`, the created function always returns `NaN`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 2, 1 );

	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( PINF, NINF );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the created function evaluates the quantile for `p` given a small range `b - a`', function test( t ) {
	var expected;
	var quantile;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = smallRange.expected;
	p = smallRange.p;
	a = smallRange.a;
	b = smallRange.b;
	for ( i = 0; i < p.length; i++ ) {
		quantile = factory( a[i], b[i] );
		y = quantile( p[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the created function evaluates the quantile for `p` given a medium range `b - a`', function test( t ) {
	var expected;
	var quantile;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = mediumRange.expected;
	p = mediumRange.p;
	a = mediumRange.a;
	b = mediumRange.b;
	for ( i = 0; i < p.length; i++ ) {
		quantile = factory( a[i], b[i] );
		y = quantile( p[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the created function evaluates the quantile for `p` given a large range `b - a`', function test( t ) {
	var expected;
	var quantile;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = largeRange.expected;
	p = largeRange.p;
	a = largeRange.a;
	b = largeRange.b;
	for ( i = 0; i < p.length; i++ ) {
		quantile = factory( a[i], b[i] );
		y = quantile( p[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dists/discrete-uniform/quantile/test/test.factory.js")
},{"./../lib/factory.js":8,"./fixtures/julia/large_range.json":11,"./fixtures/julia/medium_range.json":12,"./fixtures/julia/small_range.json":13,"@stdlib/constants/math/float64-eps":1,"@stdlib/constants/math/float64-ninf":2,"@stdlib/constants/math/float64-pinf":3,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":18,"tape":79}],15:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var quantile = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof quantile, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a factory method for generating `quantile` functions', function test( t ) {
	t.equal( typeof quantile.factory, 'function', 'exports a factory method' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dists/discrete-uniform/quantile/test/test.js")
},{"./../lib":9,"tape":79}],16:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var quantile = require( './../lib' );


// FIXTURES //

var smallRange = require( './fixtures/julia/small_range.json' );
var mediumRange = require( './fixtures/julia/medium_range.json' );
var largeRange = require( './fixtures/julia/large_range.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof quantile, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', function test( t ) {
	var y = quantile( NaN, 0, 1 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = quantile( 0.2, NaN, 1 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = quantile( 0.2, 1, NaN );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided a number outside `[0,1]` for `p` and a valid `a` and `b`, the function returns `NaN`', function test( t ) {
	var y = quantile( 1.1, 0, 1 );
	t.equal( isnan( y ), true, 'returns true' );
	y = quantile( -0.1, 0, 1 );
	t.equal( isnan( y ), true, 'returns true' );
	t.end();
});

tape( 'if provided `a > b`, the function returns `NaN`', function test( t ) {
	var y;

	y = quantile( 0.5, PINF, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.5, 2, 1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.5, -2, -3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a non-integer value for `a` or `b`, the function returns `NaN`', function test( t ) {
	var y;

	y = quantile( 0.5, 1, 2.5 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.5, -0.1, 2 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the function evaluates the quantile for `p` given a small range `b - a`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = smallRange.expected;
	p = smallRange.p;
	a = smallRange.a;
	b = smallRange.b;
	for ( i = 0; i < p.length; i++ ) {
		y = quantile( p[i], a[i], b[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the quantile for `p` given a medium range `b - a`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = mediumRange.expected;
	p = mediumRange.p;
	a = mediumRange.a;
	b = mediumRange.b;
	for ( i = 0; i < p.length; i++ ) {
		y = quantile( p[i], a[i], b[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the quantile for `p` given a large range `b - a`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = largeRange.expected;
	p = largeRange.p;
	a = largeRange.a;
	b = largeRange.b;
	for ( i = 0; i < p.length; i++ ) {
		y = quantile( p[i], a[i], b[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dists/discrete-uniform/quantile/test/test.quantile.js")
},{"./../lib":9,"./fixtures/julia/large_range.json":11,"./fixtures/julia/medium_range.json":12,"./fixtures/julia/small_range.json":13,"@stdlib/constants/math/float64-eps":1,"@stdlib/constants/math/float64-ninf":2,"@stdlib/constants/math/float64-pinf":3,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":18,"tape":79}],17:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
}


// EXPORTS //

module.exports = abs;

},{}],18:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":17}],19:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],20:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":19}],21:[function(require,module,exports){
'use strict';

/**
* Creates a function which always returns the same value.
*
* @param {*} [value] - value to always return
* @returns {Function} constant function
*
* @example
* var fcn = wrap( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/
function wrap( value ) {
	return constantFunction;

	/**
	* Constant function.
	*
	* @returns {*} constant value
	*/
	function constantFunction() {
		return value;
	}
}


// EXPORTS //

module.exports = wrap;

},{}],22:[function(require,module,exports){
'use strict';

/**
* Create a constant function.
*
* @module @stdlib/utils/constant-function
*
* @example
* var constantFunction = require( '@stdlib/utils/constant-function' );
*
* var fcn = constantFunction( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/

// MODULES //

var constantFunction = require( './constant_function.js' );


// EXPORTS //

module.exports = constantFunction;

},{"./constant_function.js":21}],23:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
}


// EXPORTS //

module.exports = setReadOnly;

},{}],24:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":23}],25:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],26:[function(require,module,exports){

},{}],27:[function(require,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"dup":26}],28:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],29:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":25,"ieee754":48}],30:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":50}],31:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":32,"./lib/keys.js":33}],32:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],33:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],34:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":44,"object-keys":54}],35:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],36:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":37,"./helpers/isNaN":38,"./helpers/mod":39,"./helpers/sign":40,"es-to-primitive/es5":41,"has":47,"is-callable":51}],37:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],38:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],39:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],40:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],41:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":42,"is-callable":51}],42:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],43:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],44:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],45:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],46:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":45}],47:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":46}],48:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],49:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],50:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],51:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],52:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],53:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],54:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":55}],55:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],56:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":28}],57:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":28}],58:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":59}],59:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":61,"./_stream_writable":63,"core-util-is":30,"inherits":49,"process-nextick-args":57}],60:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":62,"core-util-is":30,"inherits":49}],61:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":59,"./internal/streams/BufferList":64,"./internal/streams/destroy":65,"./internal/streams/stream":66,"_process":28,"core-util-is":30,"events":43,"inherits":49,"isarray":52,"process-nextick-args":57,"safe-buffer":72,"string_decoder/":78,"util":26}],62:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":59,"core-util-is":30,"inherits":49}],63:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":59,"./internal/streams/destroy":65,"./internal/streams/stream":66,"_process":28,"core-util-is":30,"inherits":49,"process-nextick-args":57,"safe-buffer":72,"util-deprecate":85}],64:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":72}],65:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":57}],66:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":43}],67:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":68}],68:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":59,"./lib/_stream_passthrough.js":60,"./lib/_stream_readable.js":61,"./lib/_stream_transform.js":62,"./lib/_stream_writable.js":63}],69:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":68}],70:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":63}],71:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":28,"through":84}],72:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":29}],73:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":43,"inherits":49,"readable-stream/duplex.js":58,"readable-stream/passthrough.js":67,"readable-stream/readable.js":68,"readable-stream/transform.js":69,"readable-stream/writable.js":70}],74:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":36,"function-bind":46}],75:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":74,"./polyfill":76,"./shim":77,"define-properties":34,"function-bind":46}],76:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":74}],77:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":76,"define-properties":34}],78:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":72}],79:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":80,"./lib/results":82,"./lib/test":83,"_process":28,"defined":35,"through":84}],80:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":28,"fs":27,"through":84}],81:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":28}],82:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":28,"events":43,"function-bind":46,"has":47,"inherits":49,"object-inspect":53,"resumer":71,"through":84}],83:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":81,"deep-equal":31,"defined":35,"events":43,"has":47,"inherits":49,"path":56,"string.prototype.trim":75}],84:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":28,"stream":73}],85:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[14,15,16]);
