// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/math/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/math/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/math/float64-ninf' );
* // returns -Infinity
*/


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],3:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/math/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/math/float64-pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],4:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":5}],5:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],6:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0 );
* var y = mgf( 3.0 );
* // returns 4.0
*
* y = mgf( 0.5 );
* // returns ~1.143
*/
function factory( lambda ) {
	if (
		isnan( lambda ) ||
		lambda <= 0.0 ||
		lambda === PINF
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for an exponential distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) || t >= lambda ) {
			return NaN;
		}
		return lambda / ( lambda - t );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":3,"@stdlib/math/base/assert/is-nan":4,"@stdlib/utils/constant-function":18}],7:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for an exponential distribution.
*
* @module @stdlib/math/base/dists/exponential/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/exponential/mgf' );
*
* var v = mgf( 2.0, 3.0 );
* // returns 3.0
*
* var mymgf = mgf.factory( 4.0 );
* v = mymgf( 3.0 );
* // returns 4.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":6,"./mgf.js":8,"@stdlib/utils/define-read-only-property":20}],8:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for an exponential distribution with rate parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var v = mgf( 2.0, 3.0 )
* // returns 3.0
*
* @example
* var v = mgf( 0.4, 1.2 )
* // returns 1.5
*
* @example
* var v = mgf( 0.8, 1.6 )
* // returns 2.0
*
* @example
* var v = mgf( 4.0, 3.0 )
* // returns NaN
*
* @example
* var v = mgf( NaN, 3.0 )
* // returns NaN
*
* @example
* var v = mgf( 2.0, NaN )
* // returns NaN
*/
function mgf( t, lambda ) {
	if (
		isnan( t ) ||
		isnan( lambda ) ||
		lambda <= 0.0 ||
		lambda === PINF ||
		t >= lambda
	) {
		return NaN;
	}
	return lambda / ( lambda - t );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/constants/math/float64-pinf":3,"@stdlib/math/base/assert/is-nan":4}],9:[function(require,module,exports){
module.exports={"expected":[1.673372202700291,0.624336548259999,0.015030674618243128,0.35527268715625115,0.4716192142005403,0.6239020450036216,68.09669524357902,1.7986805475903216,2.001891316371071,4.647511603836097,0.7648588260052298,0.35507135329757966,1.8046952139137122,0.7108828301150198,1.5833136834509238,1.7997302390760832,2.221639146236265,1.0841379829015736,1.039512160997273,0.0804019768285266,0.5821290854559392,3.069588699385783,0.2867337692765809,2.450633544834767,0.5332922361997393,0.46852848814977477,0.7049202169570566,1.6885813074516292,4.244049967355622,0.35658310857407516,2.386954755449636,0.09054794609786385,0.8762915634187673,0.5304272187527329,3.331896003880737,1.059221165291542,0.08262994875633131,0.35005873526585646,1.0049050568470805,0.908548374428317,0.9989364515097336,0.1818314573560927,0.0806938763492818,0.9855559104244445,0.7016556401072322,0.6320050676090183,0.7672964860324769,6.3619662206588945,0.8413149833258365,1.0517788965663242,2.7480860084310526,0.8808600728708079,0.495574360498852,1.3089152471815755,6.07869372147132,19.66451705308079,0.22998910789517765,1.2725489019934693,6.692759472295123,2.4778906036209802,1.277267719789365,0.4757642249743175,2.0373667137416756,0.1651849455407723,10.614831735665803,1.456325938164762,0.29175444814220497,0.019380583951128672,0.21282166757907856,2.7538795270604552,0.7698148833383957,1.521195576573252,0.0437646665247791,1.1220554056496395,2.694383702932313,0.9494934114414298,0.28958682999279745,1.4651789634472507,3.699738271789834,1.3865047085664037,0.6206543364797575,0.10920298819417243,1.2074380155416413,0.6382605507316577,22.082138679864414,2.1675789504660576,0.3076307123723989,1.3339598166223516,31.22113162119828,5.111193595237169,22.316818774157948,6.202449416265922,2.092767008315816,0.14521659182625266,0.3298320775352503,0.9856782972419932,15.6740841201035,0.3033352861440653,0.8308461352938131,0.17797476686537747,0.33578789450633306,2.233963337606347,0.24952676333974214,0.4208251098429776,2.2673415091964055,6.681552639973743,0.6078673047468167,0.6416551977352551,0.5963487134313139,2.3831755998214192,0.7462826228218126,0.4078499344195567,1.6167243840553218,0.12408651120690735,1.0885432893425224,47.866476998099095,0.24934493110732658,3.8967250545678596,27.567419255942227,3.38507977797861,0.7408823119503858,0.7221686078039569,0.48429423454867576,10.657635135652344,1.6942066850306134,7.156842564721231,0.0290086116284798,0.798998976588934,0.36959947194685766,0.3200473238000717,11.371942659549434,0.6650339152436348,20.763326259254907,0.7886857520510295,0.6123502639745204,0.18209264204143333,1.816485855009039,5.607106530703185,3.204777120807641,1.8416965734272175,3.9378788227842727,14.887894662990318,6.778714098511156,1.3336758624387692,1.5197997831418113,0.8763493489159733,0.06429885763805254,2.4788124193009033,3.518229449230649,0.9711043980105097,1.2622653620565478,0.8957676571533665,6.781331477773174,2.505357589840099,251.54786763160834,0.8697224190702874,7.952452049251916,3.4764498882202397,0.11338650552249158,0.30269556514987367,5.260119403328324,0.13261341022653966,0.45794619650621593,10.184554691889474,22.731615758142976,0.9968270274100482,1.0379540190008918,0.37589837584498004,1.3892358707752739,0.7205886801367761,1.7728557080340872,1.0001259772237818,1.068716283662692,1.1268660183945962,1.1203678215047512,0.6453441820257685,829.324290874833,1.5421014891874083,0.5229482723464639,0.6124652662539067,1.8327169515374815,0.5560231708049314,0.12653120903649448,4.372727057363926,1.8333796421032427,1.082444299609504,1.005638371344933,0.6776052737836845,1.949054323758583,1.3280322342907211,0.6812102653497911,3.0383635818868586,0.027548481532406466,1.3695847650396769,4.741546697334959,3.295864884121455,0.7722741482496628,0.5974772080985048,1.1515808499278954,1.4858647651979002,0.014463090204086527,0.39340146477679394,0.6279634604384795,0.7895099772325478,0.29619134254670804,0.8854998731864046,1.7341718113706346,0.4498919858384623,0.795773703963293,0.9854530083556531,1.3905695920675982,0.5489135820143602,0.4903002231414128,1.1959961587593968,3.0880400538104213,1.178102783114462,1.8908154055421171,0.9932960269898259,0.3363805184856143,2.0428367676272408,238.93984974757936,5.927718271193068,1.4518982126354845,0.09898977164768297,0.040526337218500595,1.116109059622352,0.016150561221459084,0.935697051637372,5.734805439211671,82.70872353685479,0.2597074607334892,1.475099555567088,1.6228301463733237,1.0058940254209918,0.9305398543944065,1.1606634144063748,0.11797960062442461,1.8100127174758343,0.5265015232124335,1.5795636717519912,14.046082046683221,0.4230968573746804,4.341381259352327,0.8652938090036979,1.403102539200723,0.10537391691978122,2.114480764412167,0.8269637728828448,1.0097651225503737,0.5369937574618242,4.8012227751839625,0.7252332192412447,1.6309378752938801,2.92540133005637,0.10990493634447168,0.27062770305749617,2.0693583417798145,0.9799529574826358,1.436077060056393,2.5975816386583825,1.1096178305322308,0.2821491798551998,1.1023627058991812,1.1473861844551336,0.5668966904974535,5.500457940178093,0.05428121666245861,0.22714208961392904,0.8987932279588935,0.5367685172958113,1.1831693622144464,0.02764166803763569,1.0750150138321923,0.6179999532649734,5.582562996461062,0.7319386196575677,1.4793724862199868,4.405451626386525,0.0795749044614866,3.271954836301347,0.7298334101320285,1.408097295286397,1.2815779407505512,1.209405020735959,0.6645733549077869,1.3415875683493625,0.19949904419609904,4.883989019193123,0.8103405865042367,2.318652031032152,0.49081606155969126,1.1592000623570775,4.347020015063606,1.249594626712364,0.7443681121095341,0.12366014368835207,1.0835110264716494,9.532950316535842,1.5247813612420846,0.24539536952900248,0.35349872063423154,7.221974391604579,0.7241218172881192,4.519762915589115,0.8457590297744795,0.6125634766602666,0.20977832420937803,0.13600589386642156,0.8711238937040848,0.7309099036756989,0.06829240123717807,0.8790890349758654,1.1061250692863644,13.282260597516899,0.8812945605504084,1.158912872572404,2.1484856521686697,1.5990995087048514,2.37554761531578,0.48565550901172805,4.877429014621115,0.22787503363417122,21.111229276823785,2.264605755071124,0.036852161598561466,0.643453306496688,46.19969756533794,0.4504378833026709,1.4892781780896056,0.28050279532289424,4.564037543246399,0.9014789051676592,0.4699527736241943,1.0220268264383787,0.6715473005017851,2.0195417337166925,0.5048819254188686,7.180664223340297,27.28607332773459,2.9476252647540555,0.42141682714968454,0.7942299124053583,2.02397721169997,0.12506459820193944,2.4323056756992467,0.36824968062337754,15.801007073467883,1.2442643308838823,0.5557571103715898,0.06015029807412775,2.0833101873818674,12.872207971084407,4.006269582274801,1.3806778431177213,1.9263632787556664,1.2544196809501749,0.8303081387342095,0.7598924728908296,0.6636590485744155,1.0029319377981656,0.07952367600015833,1.192773680638956,1.0583699985759945,0.950333296976534,3.8625321506360994,0.3485198266089542,1.785798092144155,1.3104167813599588,2.1742067978040676,3.4177597899581826,1.9489091256105457,11.922808657405128,10.495174014115465,0.5357314749518377,0.48871166274863403,7.975036905946972,1.302903264603716,1.1275178952324425,0.17793447379339616,2.7691960916082685,1.1409472573285175,0.49321381587161894,0.20965337099531764,0.2566605099919803,0.5483434650501641,4.552911514517593,0.9853066803100647,9.986768048537597,12.727899124332458,0.1333773623790255,0.8560297676527033,0.8223407685110029,0.10867257358346438,0.11430240167432207,0.31477393401971926,0.6978317516600838,1.5826573885237196,1.8722374814298968,0.10308694702171252,0.2826441790415085,0.08394021604431688,0.00014507011821183663,6.200643217165789,0.8387057022431537,0.9354706404834138,1.346337356709265,1.9698660778008332,0.08586832202204114,1.7250848648265638,5.907929507671617,0.2693583129673935,1.1132074622024368,0.11472150852429154,2.580215256901854,25.267642335779758,1.4049106316663418,2.161635147459226,0.16999698910248479,1.1379369337818914,0.324413876248149,1.6582601948586737,0.31148137073730714,0.238424158373443,0.22863372173949098,12.14543597763081,2.015721959999386,1.878593051924485,0.921846821113566,0.4848048987463624,3.3719448677271187,18.654132758118667,1.8883734978070854,1.7177579889119234,1.9595586789543382,0.8189485234444657,0.8337929411188333,1.4919120690650225,0.3418879315547973,4.765621965641158,1.574098222476555,0.1984817944558841,1.0302650732687944,1.1095467708442512,0.22917067927743262,0.5970416114286384,1.6832286962915304,0.43678060944360403,3.897721425573274,0.12883967162276827,1.1189890972094934,4.601578830219696,0.5512082248162499,2.5589233592520375,5.450542709302385,7.406683610912426,6.552509665409007,0.1061935157847665,12.496298920983959,3.5957726709730693,9.177060549599464,1.249880161957665,2.2633857099917427,1.4111839941635147,0.11835947823687751,0.8998577681970424,2.0939997804331236,6.903963516567308,0.47802618022081156,1.0831017593462755,4.784303891145687,0.6451793966178809,3.4082923706652406,4.557362954993779,0.8972609300777598,0.5083227047311806,5.433463142857975,3.7349700651461766,0.015436121403806133,1.1312639856734708,0.6809348974523877,0.6062628108303447,0.12775454957297427,0.49340751260500826,1.0384241270757641,1.17297663033085,2.329495049093203,3.351422057382886,74.34572780455575,2.699542146196738,1.1568536905829052,0.921587883142651,6.641010647412853,0.5149273867237365,1.0162477259726197,0.2911965604360057,0.661051045153364,1.8349098273636324,4.040293875887261,1.5299258428000708,0.791165347204742,0.16211089313494867,44.59015159325847,10.442559596713677,0.1344925156757871,2.0668378027620484,5.527016131257072,0.2785788654193252,48.96901575569354,342.87625034730536,2.5606610828447307,1.3312360800813312,0.7779656843560029,1.0162344505694443,1.2509756922311852,0.4204603067696261,2.9893475917138828,1.9178235689646956,4.206654663985619,0.22278272160813112,1.431220213041012,6.579940512457185,1.4493132063883838,0.2564083832167451,1.7924085791202795,0.8638032618932494,2.5878014964269176,0.9508547613448133,1.2840881079985604,6.530096107504578,1.3114855241072867,1.064565445662737,0.8745787818250063,8.745675248090274,0.26666518257182253,1.3728369068324404,1.152082306903913,2.0988180168357244,1.112339320134867,3.893613972165555,3.514005155846232,19.67747541419603,0.05270680025124054,1.2419037591194293,0.947670264691302,0.9958204486811411,342.9241917229025,1.5947669818818726,0.1507861711898752,0.7361983310144735,0.5156194383389546,1.6989345665755722,0.04544809419549475,6.58961039574532,0.2947026069717003,5.532226659304188,0.823304708386986,3.211952349980414,3.9524077104763427,1.1631440445301826,3.7382022266392805,2.553825838984382,2.047525644079586,0.962721631149717,0.18425511555058766,3.140936411706538,0.4471999447534724,53.0553244458007,1.0472010269442165,19.70470730750047,2.2450637013177213,0.25141508379882876,0.5605212960736096,9.955783640178048,0.48811753466618346,0.407888820087842,1.1187122152973112,1.0049348133625142,0.06582335346959264,1.8109278741890467,3.3946292381946748,0.09324502867073012,0.76155957288075,1.4939286114658605,2.6757981784982023,0.2558756363478623,0.9186037167347981,1.4773951830751355,3.468693889613104,0.3109586544800624,0.4319122669780882,0.04491786695279768,1.0520863485040808,0.897313078273843,0.31582896757654194,1.4107879422575624,1.1299637788039725,1.1772605737065283,4.498216252176362,0.7912762782431094,1.1139352826253697,0.21153257626633146,1.0246813493191802,3.6046357466651187,1.50137786940365,7.9379530075394,1.7906899794372815,0.6269226540926879,1.404692818031221,0.6117653216994817,0.06933895509865724,0.2625086762612166,3.2118673204083374,0.5703381088312374,1.3514728466585793,4.176098653382127,0.6123399141199911,0.36891201690305464,3.1936358107978573,0.7550969429136317,5.1291013211868055,1.0306792056816687,2.272161357079843,2.1030309464719608,0.524486592687858,0.02135507041933549,1.022610272055939,0.3505350817805353,0.7853703419015207,0.9611807655037556,0.4553069004649266,0.745464923629302,1.2687385108842122,1.26432684955848,1.6571569044217698,1.350401919135292,2.286885287866403,0.9169456927423483,1.3476186184087284,1.1927410211576277,0.06894095473503603,0.18565993908708894,0.29937185693242624,0.2812945085716564,0.12391935356256414,0.3918623899964336,0.5530506231164123,0.15684279633006165,5.42503068254291,2.2577128578286523,0.43263019086016746,0.6221382749689469,0.27762745087908997,0.9840729060135549,1.4284745007116424,1.218638783868727,5.03757382295213,0.16988904088645382,0.22080195334974795,1.718732752890911,1.2396224601146222,0.9889675431322733,0.46470771879621764,1.3573878204955632,1.2463197732713194,0.7260123184755636,1.2590961791562207,0.10319773906491041,2.3253251300897326,2.4815004808231893,0.28271613988545047,1.1360975090871088,3.8081223771288633,0.934201468094854,0.5964502016227987,0.1580944304100981,1.228362185096289,0.4319335304345803,1.1856612999802913,0.5933594645866487,7.5072007227466715,2.3157354970293667,16.72069385761364,1.0442967997508537,0.5189497089374238,0.6749057934868429,0.6966665743457974,0.24059046735607412,1.023062745531023,0.16730039017944892,0.7843130038301646,0.8817493036525402,0.36396894767648014,1.2778257400331563,9.576717453730648,0.3403707167374591,0.08320111475841921,3.5284430724494067,0.667574362077978,1.4403051296826181,0.8974307069943555,1.2107011079534777,0.23488540286244738,0.43213673980752393,0.4269447326426502,0.4057071163721187,2.995547727868694,0.009373108974698698,0.7415636163030958,1.8938168105437267,0.6754474720331067,2.140822866483006,16.70069041680237,1.1485579708876812,2.2167942931804663,13.663770806380905,0.6970097984305513,0.17719312724067612,1.1204381214519463,0.08212355180031135,0.7194537253715101,0.6481301431394725,0.22815032239021688,0.1424652415286831,2.093951878541174,0.27805643906740557,0.2818537183589637,3.335388893504159,0.2359605154322292,1.857931928714666,3.475186840067057,0.2117886275296624,0.9161659856743909,0.800707567279927,0.06884381871297998,1.2005925836715095,1.235643577671757,1.5010691460680718,2.4819720080161622,0.2898217835956002,0.07755486267586396,0.006543034047945423,0.3504314796092371,0.10388280600125278,0.782759055124659,2.2192006681526424,0.9405720977875885,0.08902610565014145,4.0655885131610185,0.603300398169329,1.4329287752091533,0.21544124172475673,3.2587857047838926,1.293654471188646,0.058232002884312524,0.40625779769854015,0.3680460401764015,1.5637728569767333,1.4807719844557365,6.79332168006407,1.2598218057375161,0.15313126822214657,1.4592451725821345,2.6564756507070584,0.8679709942740199,1.1266856578067344,0.0960477707614471,0.13931403315519442,3.0382836650686027,0.5008416318063955,1.1406265655465997,1.1308750412462778,0.44840703313190466,5.567906884509549,0.86905521691176,17.918735015208824,1.2521298083874552,0.11809337669816791,1.0283241412500241,0.1186957038393139,0.6281153218666775,0.8453148578535721,3.2575136673379554,0.07783911671452964,0.38246191138157626,0.6201374696441988,1.4053741559208208,2.44644358845414,0.8297138220012162,0.24035395899389655,0.24709648137915471,3.804275252630442,0.4053180992171857,0.9020362478576082,0.6201994532775,2.16221155645076,0.8092689086103128,1.1203387240098046,1.3978833330983993,0.2669117204110322,1.6937854173470135,2.298639342812405,0.03194426272740401,1.3166463229851169,0.9875301373456028,0.324903472806328,5.595962101642766,0.6587672109661793,1.1959396580668593,0.008152216893249102,0.7456173922080764,2.30178375537444,0.015762028392877738,0.39207838622131574,0.969678594275614,2.4793795992319563,21.326817377067876,2.374919493786186,0.1598072469303122,1.4644829421603207,0.7857970931593545,8.231361511181452,1.8979295169615344,0.09080765656598459,0.9642928322447467,3.3038387369303353,0.8796236118711503,1.0838511428510278,0.5204436289426292,0.2689752212556069,1.3295674865959028,0.6590308253448568,0.674264529456617,1.0542689164379404,1.636718776994041,1.6189555026476152,0.1664045941946996,1.6131101333710876,46.116815852618274,1.8124430078452545,0.24458179894138496,0.6280422621645505,1.9347333973096021,2.535075826956674,0.746195747894782,5.108315626726991,16.293496121348056,0.10432695979197572,2.4329667459715236,0.6478558256542976,1.2409101924903185,1.0229028673846867,1.6229641384309683,1.0407331805001852,1.1165493379983111,0.5992184267844471,1.0412570789457074,20.85168575292701,0.41191977069206237,2.261772195560662,0.6276918850266855,2.3535629966135128,0.38168948770526173,1.2836233479466908,0.8706161795923736,0.17327342562863537,0.480233790451765,0.1895291184622385,2.4572556597318354,2.1093380439504337,5.755906495586895,1.2764543869329779,2.583296747819399,0.7925800884203097,0.8377056511299992,0.6286704081201362,2.096217219418303,10.265863228253771,0.5215523098368974,0.21280393050063762,1.4175407239571225,2.7783984101158015,0.6938318141597803,0.08259410358107017,14.115056035325004,2.636659225600258,0.7580594731559143,14.669757733672808,2.270474276731865,14.740898131397437,1.228011280396784,0.9740308957055672,2.0337237393804957,2.0303659957929763,1.1781814439720557,5.888132380514784,0.5908827311078949,1.1611849753796728,1.5276663152177583,1.3481597694839091,0.24846306164610074,0.8056463135725604,0.15269139734128967,1.0036025468946999,2.3719289626297595,0.32146757160350575,0.24941796615156062,0.1873772245067221,0.40471112408799165,0.46961612784479645,0.338627045914552,5.31293685799792,1.1386675066798433,0.265904397299991,0.9081912696588198,5.6564760289502365,0.3039841104399083,0.4793765672155878,0.745361913345812,0.23753391809612448,0.39441181905736133,4.663297495802677,0.11972193972416352,0.2404881877408917,2.5978157015705676,0.7744416388283976,0.5140175207972237,1.7699219905422863,0.2208888110827331,1.7055969155880013,1.0947981319162892,7.018157254617456,1.5088967245661105,1.6138699544944897,0.776945927040459,4.033720782525693,60.38261370602173,0.5086784741743823,0.3541744159868511,2.8205137185170575,1.959063836414933,0.9123506386513411,1.3853222878647267,3.8282968515901223,92.46455000023452,0.07616989452205203,8.245143975458102,0.15638774286345394,4.232092974148134,0.034459392085622154,1.077280955100334,1.2375468485348853,2.603891641370284,0.12497747794180641,0.2683774245073851,0.27552434902335793,1.7055955404391094,1.7630427829147854,57.542517875221755,0.5510161035531624,1.7334088989290872,12.382288778560012,1.700689683703792,0.13367870869539372,0.8596994612538892,0.6738129383384839,0.3433912365433116,1.338945146634481,3.4909385958290167,0.8235561160648615,0.39461382266798417,2.07060122540952,3.2456617790020896,0.4877908116594239,1.2063178320194443,0.034586077336174414,1.3733787394526717,0.2938001481492032,0.44554516434536734,1.3288410835910394,1.4556925973365182,0.704774533815278,0.3783593288611642,1.1852038981907647,0.5408244806437497,0.6258677505755098,2.081190428500221,0.03126348790856643,5.450475735235263,0.9134425970241311,1.4264235916319268,8.365233444452663,0.7281697600463355,0.7773692785024727,1.2608548134913684,1.6122342589993843,4.180719211036513,0.6664465847281384,0.35413634375359315,3.737740243351141,5.355178142333809],"x":[11.63680015997237,-12.750456326722148,-36.374886909699406,-27.902387519768503,-15.876434425794859,-14.855347036504774,32.254250890480115,17.970699447979023,18.27548968479125,33.8203233758629,-4.453022355752299,-28.115138498984315,20.60629143524521,-11.10209074863927,8.67294255093406,20.64873005138751,13.477603508001366,1.3474900517285526,1.3796097509124152,-37.15844285534096,-20.549233071032635,5.979193477684751,-33.34112359706137,24.22824300149897,-11.475863120381558,-22.309573117610025,-13.732156131962192,7.272824312420468,25.296633164051904,-21.568543923723148,28.65085449334872,-31.970353629889495,-6.155333454278541,-7.584558864109837,34.02392096010587,0.8085977745836086,-11.127648383230571,-12.929381488837631,0.10610610807171028,-2.6007746217111993,-0.034235138997679826,-40.83737743469724,-18.22087482714123,-0.3940729599966737,-13.012351714391833,-9.056866004527818,-1.3901624246468227,41.32575780444184,-7.55939961766822,1.0110100159769644,6.46825701269046,-2.554240689582098,-23.66199417370538,11.601846837863697,34.33014394848034,14.933020551917863,-35.84627483386434,10.306613309534804,20.683417221883303,25.653325643399338,8.283480310192715,-18.140575280883105,15.65527550804272,-30.11781994587426,36.878463678454665,15.24965528622171,-8.614822702473168,-36.719396072620206,-21.07870062317352,21.852051364791073,-1.7921069801697502,10.330231356790144,-30.548012535920645,4.948213185380084,29.386344334577863,-1.7335138433144763,-35.39578156023629,11.336266670270518,20.124840275566157,13.78388749770101,-4.54059062109361,-44.38731624542184,3.1624723308889884,-2.0376131563836104,41.445813077995524,19.47095036196598,-29.719708250831843,3.4276212327751026,25.62950516310636,25.58508220833532,29.962482729860785,21.876234787876236,17.61604764405559,-13.716652560739096,-12.742783280975333,-0.7013070698163659,13.236309652458145,-24.521944003972266,-2.9433082896429106,-36.064179843024164,-20.972235271065365,18.79616818490225,-20.14266686163335,-20.99201354533323,12.353399286036062,14.909357395649259,-4.8418615257343145,-15.699469408377897,-17.684624264416385,25.476078396444464,-10.14944196654033,-24.78160290859779,11.52792911682323,-43.636319975282746,3.631222451628254,38.10961983972878,-21.60246486686851,35.09520366045476,33.27583607571132,11.663317951753681,-9.847509632452702,-12.420706688039012,-12.348449739791324,11.837457556900032,14.159326953150064,22.604430760577376,-24.804906514733485,-8.743289904691963,-30.57153548433915,-23.59756129679562,27.14185935005371,-13.493476147251059,27.81936562803814,-9.983365865459042,-13.66208880613685,-40.557144238077086,12.972108694644481,36.34297625653947,21.484644428953047,12.327782020108613,30.87489081215643,18.61692261919723,37.24571894210484,8.460713625635087,10.994536077488348,-3.8357734100792023,-25.351487442651766,23.486684703448603,12.68134196626035,-0.39365854847475035,5.304693510548965,-3.819955595138225,41.29580599164106,16.50768504245763,33.36466963265189,-5.110184670492586,24.7145728173503,26.272880507507494,-21.008685105803394,-18.40560883695037,21.66109212568309,-41.4210302669085,-24.327448073035363,35.64583183694376,31.899740420562395,-0.15331429412934483,1.5744863846628192,-23.228091378814305,6.194529648120485,-12.117507962050642,21.582214729289653,0.00520774824489223,2.4764859528420686,5.07894992345684,3.4691129179435194,-15.595885421549902,48.628473368507066,9.713881698857818,-20.838640882508418,-14.505302084762342,22.40789839703236,-12.349823367510215,-36.56662615858592,31.705933156634345,22.240631539914137,3.7855921040828946,0.2062532238568977,-11.535965876152744,20.235177661998407,3.078653148000754,-4.567357075802127,18.430250272988516,-47.39753621533848,3.34790290756356,18.960032446995278,31.807009393085508,-4.461218617351172,-7.331318648004782,0.6977009881958924,3.4265625978547654,-47.042022814543905,-26.232322809646952,-12.348790611302196,-7.4384507478987985,-27.028096613827955,-4.900929292952661,14.1001006103467,-26.047135962181912,-5.593120566324558,-0.6623835883624238,4.376808651248444,-18.937274103156746,-24.240971248058276,7.148435919460162,22.313531715474156,1.8038982192671966,16.771317941147924,-0.18148749331664504,-14.674048349275937,15.846857559431546,35.9036925654961,29.413202027518224,14.071547210407722,-22.960495694896906,-21.297264615773635,3.336614280023774,-21.875656099748788,-0.9271813700738036,21.231768220842174,31.919350734925956,-32.57247970875527,4.8632878343242485,16.233558770686585,0.20216277414321127,-2.6754506611511033,4.129627676733847,-16.165324595531473,16.02200044114628,-12.423616717125096,4.375173213478223,41.414716370731654,-18.2592572348782,17.567826505357022,-3.5271675650386918,7.342003992440027,-27.167931835556047,12.68620060462705,-8.117706230292498,0.29248249729808506,-18.55174919053525,38.09280265484646,-12.30792260775474,15.206702952846065,6.270112992116761,-35.38798595079655,-10.753100895108403,18.429777242519584,-0.20872120184036724,12.619998321667133,19.550158896703074,3.2668835511920022,-22.620812017495865,2.698029988562144,6.311585235279004,-18.254606757527473,16.45863460352639,-3.251545854494664,-37.018066989087814,-3.8065410389797663,-19.29213805551915,4.9104116998634595,-31.1253364276563,2.97524358557677,-13.418340157700392,37.04037655094034,-10.592741932795533,5.2693517194530095,26.63410951198162,-27.33072693459695,31.231513605416286,-12.949391275803208,12.00087967532496,8.419814711395155,8.41005252471713,-3.0871799139672316,8.799374862882338,-22.815683379929087,29.48749075183492,-1.5849790484521513,25.32828911482125,-13.812104630777368,6.072559601796399,25.277783347731486,9.736252869551898,-9.616137130488191,-19.53957465711301,2.2858229336857327,23.982187299472947,12.338809223800936,-8.731798166566339,-17.898289848173874,34.45720730378218,-5.99763487501883,27.01451690789417,-7.16320645734605,-13.841158152591127,-8.68749290898263,-28.32760983954949,-3.8833361639788464,-12.377424100184953,-26.06552538566891,-3.4127898992108534,4.576223119635486,19.427073316369057,-5.082340647068889,2.722845910166381,15.262379712824494,17.078959217710462,2.1354461536925884,-16.07667375355749,31.64840908334864,-17.773030265205513,33.423813367827776,13.401158839563477,-40.70345611026896,-12.494563101899132,16.77312388912722,-13.357826493162404,11.342042323360669,-31.5249862989742,37.584797428217556,-2.9229057751627465,-13.720782528085685,0.9054936938444413,-15.210905034849933,18.880537115000482,-16.95203224464929,30.14659132359926,43.38580705219343,26.509874508855425,-7.0285043369951445,-5.112031716937061,10.349402592807465,-42.94477410240205,14.466617459995192,-20.32133381476789,21.79235012109291,4.8449555673577684,-12.421796553956478,-16.137463604268184,18.271016514896118,45.16012158087691,28.3159496627961,9.105944180066405,9.145360230084222,8.828521704293138,-4.852594063529715,-5.905806325744667,-14.756294781487803,0.0457257810491658,-33.05734704066651,4.319379856555795,2.739371028921539,-1.4017467652519322,16.52560053029879,-25.690535980356756,21.383579960881015,11.293489229328145,20.92666979819099,25.97644874368256,4.267929701518902,39.368617958714005,29.13202371419976,-20.015715759536675,-14.227692713234307,25.287056690652765,9.342689369133943,3.305981933919078,-26.334162704291675,16.634008147431235,5.001104188395331,-23.598003477767662,-32.13876475878595,-4.980205994487674,-19.784001937054985,26.738536076327584,-0.23551392280863936,40.57738017595898,25.69133646782683,-27.136870731608575,-5.2542580596949975,-8.738297688670642,-41.656972612690225,-25.686465154640747,-30.338685719269186,-12.418646400092506,8.597339843261185,11.745734824743005,-7.915200417391554,-27.885896339240478,-43.36257664195938,-31.389465295508614,40.70925380508803,-6.6404243729454535,-0.4886142280825947,10.083897928595654,6.931254402049037,-22.77666298434656,13.072938145336199,24.785609273549024,-20.47345991000914,2.511670149575753,-37.675706256091324,2.770126857018973,47.38754582233098,11.961570164309968,19.967516928308847,-12.240583898244838,4.324235261879519,-16.7670520235243,17.99337529894094,-18.777626031085237,-29.970053543749206,-38.48833296787293,31.04962031866069,14.458974079190057,21.713920160209366,-3.0160487914240974,-8.941793654827224,10.101090544463808,42.561794459483416,16.044163083075237,15.835933026157289,12.739072818985031,-6.04654396936893,-7.715973418809796,12.837445568028095,-8.727246148271627,31.180063325554077,16.127069903583894,-34.2614498328302,0.45292926367178765,4.186018786154278,-7.971369567086695,-8.219744802944241,12.54913988588595,-18.195812331383955,24.84729863858297,-30.68809976555852,4.36371157370786,30.132682827846555,-17.68824501864553,18.103383852210463,17.40617107873924,25.72372630086528,42.13398691391792,-19.385076432657144,38.33459470635324,14.45539998324108,41.95786762210835,7.006092740884593,25.795962524872206,14.030214025331532,-43.284367481432966,-1.099741361968654,25.69558870040154,18.51618223115137,-16.21253820639528,3.811279095064279,25.904315607614407,-14.132263478791828,9.828038642104598,21.805989754888433,-3.3435047159121716,-10.11829272280895,24.58323060358998,30.81875085269328,-22.828285327296992,4.17208698129641,-10.387900035861598,-10.970939271970877,-32.19273297685476,-25.010958275022865,1.6038199123655659,2.0351417600232633,24.674339935854036,21.56835946067026,9.42814465936792,15.881101650158705,6.281753927395556,-2.6635693930123807,20.472715706703603,-13.724009174856434,0.6419048101385059,-24.822958058536848,-15.193141381776286,11.607320629998307,27.490994513308255,3.2078627610949937,-7.994176330459002,-20.22580246961162,47.02016051046088,32.46773300387233,-30.009762515651495,10.070971728756408,18.479857195117766,-11.24474660168102,47.72317263028414,32.532990453975685,19.393714449627673,12.395082514173701,-8.962838406780534,0.647836546085621,8.34412752238618,-6.82052916109005,31.66123451934342,16.37928471660547,34.063733533597265,-30.302318969988846,9.687966216495251,31.598891360850658,7.8591745026461695,-36.108005959780684,18.98862638317359,-2.865472674403538,30.214673696120265,-0.27483661281851823,9.690057160225194,18.229582529116293,4.68874066164733,1.1206356134255273,-3.3728384483147984,31.67097243618209,-35.037204473787654,4.7927899740513045,6.021988677654612,22.833798066437193,4.4809266812895885,28.0668017929782,15.93703679629649,39.942057794548674,-40.07122420178138,9.235182049225244,-0.4172693940734611,-0.1825682133687181,33.43258706038939,17.062557042368443,-36.5287799609003,-7.442872736572049,-22.378112571021294,4.802849574434532,-28.510595166090614,28.303324659095395,-27.441013397585913,33.72447940816761,-1.4273300559889286,34.39657695432025,24.795918946402974,3.2468817695877306,32.60229245150783,23.410038099729448,13.50804764045699,-0.5826459984812349,-20.274068947205592,29.8199369013043,-19.98480854719493,32.81341507591217,1.093441822121875,33.54847386516323,21.605906793346882,-27.969081000632684,-5.527438789408589,28.988760102021132,-22.727375192199794,-26.200466255218245,4.179675312665914,0.2057193730347251,-38.50642663575009,10.595113636755372,30.273842602359494,-6.237287824007199,-9.353671758778308,15.668993921434428,19.109997715861546,-35.1739995102083,-2.278585393609344,8.721487412697904,21.89125891645689,-24.653019411734864,-13.846859151276668,-47.3679941889269,2.3896841882347886,-3.80498411457053,-33.6495780529846,2.924135315210708,5.0152450227912055,6.262594900087173,31.41221935736315,-1.7724001507908085,4.902776448195446,-20.61858526170679,1.131571608002936,20.668716867967106,11.317088517618629,40.44860233030497,21.886794410485845,-9.513781014140779,13.062735802187852,-17.974477995101594,-29.560499176031165,-31.052254162137046,10.140884755905955,-14.53717274850409,7.034098284096967,35.456176890744956,-11.286825605847639,-14.37585669079121,10.556036500335487,-9.258437432262902,11.319264828646924,1.0461655117709512,21.089236337493535,22.81723741683632,-21.175054145078153,-37.899722902941605,0.6013682702685088,-26.830198865719286,-6.871919437686326,-1.6329160559292006,-19.32669091701962,-10.828822759639,7.994049080351477,10.35987948082343,12.114328969040024,3.572378616976968,14.830589186494713,-1.4107221110537864,9.376323106008865,4.580843715142567,-34.902962942186576,-36.925006325553866,-26.721704811168927,-29.584768689436856,-19.89195835992814,-27.270970335711006,-14.186210749815864,-16.121808004652127,35.607053816557055,10.469183196955111,-26.505207892255214,-15.808063798553285,-34.644419397933554,-0.3612937691539351,13.657286423993234,8.512999878490596,28.055459308109135,-26.697554335571205,-11.914617439195107,8.23084239233306,8.307659906313646,-0.3012166909546643,-6.07186101033429,10.399275218669704,8.860612930356424,-11.376535969735116,9.542694962122425,-1.936522134569485,8.786666673677368,15.868536331918504,-25.714957443818996,5.277526322788653,11.48139732240312,-2.477102601707692,-13.938764535128048,-32.099691292091556,4.912542253652244,-15.0993111940822,3.5558371201084427,-13.068602668939793,29.379641770036105,17.733419709654008,31.69899549442745,1.413131684579504,-15.269798988357973,-9.69173024819985,-1.4861305268195513,-17.324446090934675,0.6245137566109769,-31.52300473940796,-7.991298416863259,-5.1644728037184535,-16.793357339787796,8.828693317858047,38.8961210053818,-13.695407120110293,-42.91448493278601,14.972937964824705,-11.51968962056608,12.212903099249814,-2.385562855858513,5.144571625600957,-18.138363023539206,-25.181319450922715,-19.90754354047203,-7.79306581089585,30.52186242431586,-20.410673020661175,-7.129493464327663,22.565697106217723,-13.036266376898595,22.73831074960346,38.65055367324941,5.834969795044913,27.07791197897654,33.80222567456603,-12.906467836829574,-18.71870572952384,4.012245957574855,-31.667997749598122,-9.067161309490778,-12.563965415642201,-31.827999484084323,-37.78906425845486,12.404897110750088,-23.10104676976559,-18.60682507457865,16.263714601086818,-27.86088502736837,19.10864170127804,26.153762900046132,-38.58041391119776,-3.718779721152103,-6.350603752827876,-30.006667972986676,2.3030854805402345,6.895574066031415,15.355662495265797,23.81868594879879,-22.541216229040074,-39.411069241635865,-45.74695055744672,-7.939072621048936,-36.11276329642922,-1.8080533770815528,18.48279254223847,-2.2418380387318706,-31.219746303887604,27.759138138303975,-5.021215901390917,2.8605862905876975,-17.449816689505504,26.670376996916524,6.916306009246043,-35.46397618629228,-29.61678881114429,-19.667774208244182,11.000135381118291,6.62939088276535,22.940244415546285,7.138049705703018,-24.208610293530498,4.319387777830443,8.260142947052495,-5.83295642332407,4.793059593527751,-24.856220250846505,-12.329997539869662,32.979135942183845,-12.841714468693022,5.396505659159182,2.508713815045784,-26.059139005558073,18.17878105781142,-2.190269354737442,26.820992057680073,6.1853802530590265,-20.806005937930074,0.3703182284171991,-15.260707171419051,-7.324180526579628,-2.314756606529466,19.87987163450252,-16.79984314050663,-22.20721706243265,-12.145482818982089,8.762714080392861,28.48822446788497,-7.744178167165373,-24.6236610574765,-14.638885579566253,9.292347803560919,-16.0353628988897,-1.9953508108117362,-6.304547307210571,26.26509557895529,-6.1180911308049595,1.4772525926756597,3.3278197344018263,-17.420944109417423,14.913003446190054,14.381098879674369,-12.431088055920192,7.5647892738402795,-0.3296464269038495,-13.462995716641524,28.83502631259637,-13.705135712309467,6.66159262335119,-40.05403967220816,-10.99894414412882,17.28478452600337,-20.544857665976004,-10.76503341689299,-0.5506275731992254,18.931378177192258,22.75592938782236,13.697800813783111,-26.80588595946408,11.655915845653723,-7.092809454049895,42.727278696404326,21.17171756733743,-28.77239999383544,-1.2674231982270143,25.11304130990615,-4.822210550054628,1.4902464449376822,-14.332345751385402,-30.947983290431942,12.056512701135127,-14.582957898876568,-6.617452663979483,1.9797975184082546,18.95936340907144,19.005061856079205,-36.63925043839441,1.1456514501558157,27.949795500919517,1.3603749483045324,-13.881485198591658,-11.434368628621925,8.382007692661142,14.182905077597088,-11.867621881293005,36.74778709363264,41.95433616388281,-28.94693784652854,26.821511585164547,-15.902424520723379,8.56303761678656,0.9548117273671224,10.919188978645433,1.7960397263810464,4.447404893580298,-19.089853754124817,1.4151923314639774,15.756731534081535,-22.9062602178968,19.21281851072321,-9.584032461164504,21.360158233791374,-11.385783432465345,6.261214601187859,-4.897063410431329,-30.449854168016774,-4.752563101597295,-21.414726527896132,21.363561462914785,20.30598890216719,34.80562577861745,3.9168286593587602,15.926502572548165,-9.522264826030401,-6.870108425664789,-15.19716535810447,8.799544187423114,37.80839114554239,-13.989866821922647,-33.460924299025976,14.327040653471478,28.353168448088113,-15.153721603445838,-31.064391644152998,30.169962744256985,5.998722306294836,-11.666171365426003,21.91371892562688,21.53003400790159,11.517839746489365,8.82311766996542,-0.872798285293662,12.939018662167957,8.452470385537872,1.8076483499867564,24.669973974772653,-9.755449343129786,5.003212439058267,13.994705148507318,12.48343760775741,-33.145341367568,-5.050125673991499,-29.97597191487607,0.159696488064057,22.6988956783439,-33.390803064795286,-11.80786836934976,-18.29649143939067,-9.278615413258517,-20.779297463817667,-27.591602347809044,31.186914632435922,4.772060986746645,-15.174631601197877,-3.194241314687563,38.48350672567229,-19.669196515758046,-23.311782807345462,-10.52208929435906,-29.70367025223956,-14.413851275001676,35.20544220908981,-42.3840034517285,-33.80811934691298,20.122992244999164,-10.69822262216826,-23.055897741051133,17.29229604156812,-9.046242037504491,6.7557594495315385,3.847293688147012,7.528156814644261,12.654729089035612,6.463105468236286,-10.117255313266995,35.54564155206913,19.703741930262808,-13.253151198374212,-18.26536602809711,23.44663868226583,15.049406713741309,-1.1905060772704932,13.220842838132938,36.2917617525724,10.469539702160535,-20.48514994766978,36.19468050409663,-41.79440578062906,6.184315224004289,-32.873920946023105,3.5158690406627926,3.0893128333333593,26.29142059970989,-32.248320026102995,-26.691455784784445,-10.229023659512638,13.426312370037973,8.191180513673444,46.29963593436875,-9.97739484045018,20.64151562613102,44.36478732355824,18.3823123491491,-12.412977797447777,-5.730472649004021,-8.710667760540314,-26.053010195485268,8.921759028435552,2.497216462851082,-7.965996339384908,-13.475543745701213,9.063243967108782,31.58298327124162,-14.400568986168215,5.173886475931489,-44.23087208362593,12.123434180388294,-25.512389838025047,-22.488783472826487,9.413032769091444,13.963931806238197,-13.107098950878413,-16.88698638550946,2.6314144637549877,-20.885113360058025,-17.467402462629522,24.073797426342626,-6.603932287303638,38.05565123416052,-4.090956900352175,11.837609529737502,14.080672230696734,-10.045716959612893,-8.402740506116512,6.772336906349352,14.1644931682373,20.028196667470088,-11.83291051142169,-29.243594756366818,8.946487040766337,19.46334132054286],"lambda":[28.918179036777225,21.19071167262535,0.555082351628744,15.375424609358268,14.17090047449533,24.64326453304716,32.73496384919423,40.47118415641214,36.51647988619005,43.092486716013475,14.484632331007663,15.479046133284092,46.21386443797819,27.29787959229907,23.541344916577767,46.46834902095741,24.50999678839384,17.36273079388986,36.29568915764574,3.2488241450712274,28.626797985002728,8.868266789429867,13.403166488347074,40.930078615164355,13.11310670291228,19.667414585725464,32.804939667527854,17.834865764484377,33.094488751545335,11.953336230718348,49.3082367048257,3.1830703386595327,43.60144647428087,8.567482240069857,48.61458919894813,14.46246241238558,1.0022967443054087,6.963772231947207,21.738089463140152,25.838026826083993,32.15530705019262,9.075782637103458,1.599372594667614,26.8885714694305,30.602857633184875,15.554521836284119,4.5838016163123445,49.03295999553726,40.078365913719935,20.53653263274322,10.168450814078911,18.88475756339104,23.246791424714885,49.15857783031067,41.089784484262594,15.73309593074761,10.706670327571832,48.122261195658986,24.31670215558602,43.011393676680086,38.15886687335094,16.463273111558998,30.746636451730357,5.959416305433917,40.71404444495478,48.66799514117783,3.5487873334468234,0.7257079827029389,5.698841078650507,34.31131725371769,5.9933962971960515,30.150490432489086,1.398111463598184,45.48892630695987,46.72972664150258,32.58901501456315,14.428437717507991,35.705955673965114,27.579207421394734,49.44681007586891,7.428942861793608,5.4414501931180475,18.407856946777546,3.595206710249421,43.411733789710624,36.14729619210778,13.204940172939573,13.691195058637884,26.477570863767575,31.80835572140357,31.36806219494419,26.08122229231563,33.736636488703844,2.33028100111472,6.271530675010217,48.26682763220303,14.138329127344784,10.677117346856003,14.456875234128852,7.808171502567629,10.602370337000188,34.02852364642125,6.697286753863818,15.252675066153365,22.100889758331167,17.533526938803956,7.505646306042202,28.111601128035634,26.12701427821745,43.89462077077037,29.85350177906013,17.068604241689556,30.220118715392996,6.181750568885425,44.64192443245444,38.92277291375383,7.175686060341402,47.21067993084258,34.52834147546966,16.553434441541924,28.156494287832214,32.28520861499026,11.596308234718567,13.063167307851442,34.55574095847711,26.275863077216588,0.7410528128096394,34.75544336698453,17.923879928387144,11.107149961458429,29.75871332244472,26.789635371532782,29.226991311240667,37.26080229810883,21.58129597263897,9.029332571844972,28.859840998960852,44.23143640269382,31.229232317765554,26.974131321392314,41.38413665739379,19.957437007516234,43.69104887315315,33.816798910909995,32.14601869457291,27.185279665271,1.7420858094425618,39.3688103854548,17.717158686668675,13.229817737567984,25.53112931950342,32.82851157746358,48.43876365639465,27.473641007917703,33.49783647996152,34.11517270891434,28.26937228123292,36.881970815565026,2.686741635004397,7.989761559491093,26.74571301888149,6.332798020575902,20.55268728665377,39.52689445050969,33.36763589486045,48.16550655382319,43.058535402655494,13.990352669081174,22.109120551015216,31.250484315364414,49.50749820062265,41.344015578375526,38.51577418033712,45.1129163687471,32.290045909628375,28.378820846156273,48.687180415860645,27.632817345794702,22.843500224090196,22.92438052599943,49.31728021718107,15.466545765762984,5.29706323351019,41.10661474674654,48.92790636196801,49.70255812857807,36.78653700425139,24.246151317701468,41.55658904534274,12.463868459713911,9.759820305908883,27.471939614753605,1.3427200495993996,12.40645516472748,24.027464175296352,45.66105176860488,15.129085175834955,10.882106269804325,5.300531679063358,10.479065358492434,0.6903577254050663,17.012626339454464,20.843622762546477,27.900282414369613,11.37452365462429,37.901899222087366,33.30555142168069,21.30199419343375,21.793757004618953,44.871676274787156,15.583028336909289,23.04420294446212,23.318341799833785,43.620762544164705,32.999884055676944,11.932309396917795,35.59824643475825,26.890144961231922,7.438093861783967,31.042771293359237,36.05458655237381,35.382131338973544,45.210301064604266,2.5225620689254935,0.8995558305877505,32.07351294130145,0.3591038518426237,13.49177442717967,25.715958435926744,32.309998750869184,11.426990745220134,15.099643093632654,42.29774154220615,34.50177292227753,35.842330115508425,29.833224802390323,2.1622839348105494,35.80193734272249,13.814306583943747,11.92425440459619,44.589210921857116,13.39121558415619,22.825480493864237,22.65698580572595,25.55574188403914,3.199986504155461,24.069259881848748,38.795627269497444,30.244231263307874,21.516283345776866,48.11399975582482,32.486148108388626,39.30844663999282,9.526635616380863,4.3695493909474585,3.9898512847110434,35.66420327397084,10.202849565248062,41.55983368020475,31.787504659590603,33.06936673600056,8.891044461170472,29.055578520148227,49.135037505327695,23.893782222677583,20.115736796747886,0.1866282748375414,10.879569163197832,33.80498398262344,22.35472485392339,31.718452305008825,0.8848139505902908,42.637218350153226,21.708200460259242,45.12327177344905,28.92336411449834,16.26153811088239,34.45513075498271,2.3628647189493424,44.978051655556385,34.98174366627638,41.407787816931005,38.32206731311525,48.571709084621,6.116560931124326,34.559606435135215,5.686073194510599,37.07955411919242,6.771996327766427,44.53600162635924,13.313858283696122,44.216763265334954,32.83010847096536,48.74451597920641,28.000989628785867,2.757225512802186,29.657333382808627,26.792726024044956,35.85109478706235,2.8395569695878864,9.786558456739735,39.99519334086325,15.74252165371468,34.68961251966002,39.278451987051064,21.88381179417396,2.306248689272994,4.459199281541759,26.24898452440567,33.619898986979,1.9105536119482625,24.812854470839763,47.697260876389805,21.00879136917577,37.73238351919069,19.857052007446484,28.55151369896072,45.58667616548796,3.687879620855672,15.179952953316423,39.81062403660967,5.245303604838969,35.085761173591465,23.998262945585648,1.5574040478408713,22.548709853829642,17.144213183804048,10.948482270327597,34.52321579740738,12.290314294336524,48.13036463175,26.74491084966086,12.165179788709068,42.01417071445878,31.09988814203064,37.39918769163981,17.286330511528945,35.02415629626926,45.036331514758054,40.12125806841459,5.119281265496756,19.731383459167372,20.45646598694859,6.138591382806558,24.5668479522975,11.845383306673218,23.264706023155657,24.679843247544476,15.539926287227923,1.0327962481321062,35.136930569533895,48.963973542606986,37.73491522388521,33.02628612980912,19.01768617371261,43.52914577284584,23.743910372997355,18.690700068073873,29.116729656788586,15.64147991941307,2.855958037099071,26.72586108490106,49.67051880606307,26.821321808267996,22.29867124554876,13.743566590461187,48.59614279942529,47.67518605593184,38.74863253706017,36.72046427887841,8.76565196630673,42.97287572734424,32.200111110059204,23.096652793684292,13.599448405847214,28.912421979988057,40.186494837380884,29.231613218005602,5.6999779630707685,26.036023122667963,40.48320070580995,22.966019411596903,8.525373708230333,1.71956720662928,24.019198960397613,34.26434581492393,15.793125471048885,45.0926163494977,27.881953576267314,4.1764939943624295,31.241189464625506,40.44742497506738,5.078908476671728,3.3149290042667867,13.936754497481507,28.679802786145203,23.352734716128552,25.21194680807547,0.9097357245325233,10.98727583629282,3.9733913826528244,0.004554334138817673,48.536988203540666,34.52919206914351,7.083353504791068,39.19972310093086,14.077864187356326,2.1395099621244418,31.10246652125006,29.835724446313115,7.547744290861303,24.698106456083536,4.882321097863795,4.523132876243241,49.34025079328168,41.502829960537426,37.15666359969063,2.5070540470785274,35.67360010072017,8.051474340529607,45.32812140614564,8.494876459070255,9.382630595679142,11.407979656354195,33.835479963898266,28.694143395799887,46.42834296681685,35.57545617866518,8.41433731976653,14.35965940156504,44.97266306700028,34.10431809972039,37.89898668880419,26.01504342754355,27.35027821845929,38.70788770207376,38.93447870736178,4.533787293783076,39.46025278961919,44.2182035671139,8.484241526197122,15.418340371359186,42.398179253264466,2.3699204601458135,12.178750515856084,30.9165473937979,14.110980787738924,33.42206998109298,4.538595902187604,41.03691673321141,38.49920324800586,21.724787921638146,29.71613167895184,21.317193220456343,29.73886546850739,49.7222649094348,2.3031488991128946,41.66911088150087,20.024223534273467,47.08903515689731,35.043903689924946,46.21408370580657,48.15171248947691,5.81088893313384,9.882052654091755,49.1833344568298,21.65241133879956,14.84752188101236,49.6740758041341,32.74951524082144,25.69705687094075,13.908954548253405,27.93580839604718,29.200149012340926,10.460840827128271,30.128157856045434,42.08715603395661,0.35790484641312625,35.95602954475624,22.169405520020902,16.892670195824834,4.715149960332409,24.36000339011084,43.343737886381625,13.8005562910537,43.233521448175914,30.740834216085144,9.556688542448487,25.225442822101797,46.33024691503954,31.30528006246238,24.101979501143177,14.5686810311771,40.14926794638454,10.197975352573819,29.631134263654502,25.509804766100007,36.53321070541418,9.261280998154342,30.28575577590703,3.9131943306763506,48.09884821380287,35.90617918695729,4.663262338758722,19.510993166581926,22.561984728863983,4.342191543979235,48.71804759026536,32.62815058990477,31.820316652251535,49.81577204512768,31.404067856264263,40.552885584514385,41.590883206996544,4.948344033897145,47.57662037308772,34.225072589629136,44.68655922049513,8.685901972148491,32.15436719564846,37.26183548907323,25.350702441072137,12.450914211996334,42.95180255707933,18.17374393412926,49.24392499995979,5.317497870422672,43.799394677001125,21.526013942736387,19.741577146056024,18.477220113426675,23.519249648045825,35.759831240840946,12.74070493553776,17.647713631609886,45.61889380258387,43.614125396882564,44.368355908296564,37.76636851575472,22.27633835231576,42.08057260497055,2.2295378140433364,47.412273975547,7.556579348175074,43.49872660527188,33.53036483648627,45.75035842028229,6.486040007449212,20.771022820625518,23.821331300718573,11.6745222661517,1.3574455268475227,33.36688413018827,11.465997558124307,41.16551930826501,6.650587827159704,49.94690151471362,33.19446053617629,23.148814315994816,44.508751417295066,38.476101176033296,26.403242824271235,15.046954127566448,4.579374002534253,43.748392103546784,16.16715699174206,33.443771632619004,24.259078099784592,35.342058405869224,38.95916090434549,9.393521952372053,7.049823180341819,32.22563598767449,21.672221846894857,18.04876791581225,39.38814397950057,41.893085828960395,2.713215044188555,23.660534093970288,42.916235052717745,0.6414037974609044,29.874876318349163,47.39218945556768,30.513517519772137,12.094980284480151,25.715142356653566,26.990392759665472,30.758805844232416,11.125703551735722,10.527649126906091,2.227734335277276,48.26896459215023,33.249239058245685,15.53341341888711,10.042492536556036,43.60480489051268,41.592475477228334,40.39171550424101,6.719208449669079,47.934016071449406,5.531620366409829,46.97880602656777,28.60407477527932,33.889063086578815,46.27865080228942,49.56742143204269,15.987046410809324,45.340886587606775,28.323493308709168,2.202406704664428,11.052992588041178,14.725646537202053,19.29680938326048,27.047303716520865,46.61961378619176,17.82843804123624,8.403624262473663,15.368155471212475,28.54606179453848,14.060603427088846,35.146315386122254,37.66672174854422,43.50318234867812,23.355875623592237,0.8270121542574338,27.198494955904806,14.4810376815532,25.14564746601371,40.431696425988385,16.155107794063838,31.714715498593794,37.740619655775134,49.553323121256156,30.548783339871566,13.767467233479813,26.354995694461834,15.574816118498024,36.34934068754768,28.347676990329273,2.584415672188811,8.418466380626533,11.417934704555876,11.579197694958744,2.8136663343490187,17.57244978354634,17.553873213900683,2.9989537399906396,43.653789844180466,18.793168383072533,20.210721410431397,26.02751453967126,13.314794224032035,22.322930324796708,45.531496910988835,47.449366646803256,35.00405282945211,5.46387425715672,3.376254362159725,19.682723998154817,42.977447965161375,27.00155861703808,5.2712149568358235,39.49728758028236,44.832604998555205,30.145535046149085,46.3734000431445,0.22284143856678984,15.41648638673333,26.579660990549204,10.135504101087845,44.055064267372124,15.570035843257813,35.169673549447744,20.601618315216907,6.027733506544164,26.424607622885222,11.480872645378392,22.708116676946123,19.069370628915326,33.8945849878373,31.2113715850059,33.71538203445764,33.314571349016475,16.47282599712746,20.12033669740907,3.4131993891446943,5.4886018709715545,27.7034127441972,6.3333895324726885,29.05914300414286,38.50945862534915,9.610003437078463,40.60650237473092,43.431203478975824,7.066871735025593,3.8945651474590615,20.8947394591806,23.1337435278973,39.950265841430785,20.87249797261218,29.56101478325567,5.56836416660782,19.162664772299543,14.831764645762558,5.320107887774094,45.81684234289397,0.19312161238788095,20.457541156498703,47.812142283826944,27.130625739339642,42.66981056228028,41.1122641233763,45.112362722392454,49.33139568672807,36.471432673916816,29.690513088546222,4.03111120716475,37.32600001820838,2.833375296536067,23.252502608691195,23.142319651629826,9.408008520281664,6.278029098576498,23.74442433684022,8.897364213946279,7.3026944066894135,23.22774301036976,8.604357398066897,41.381552944838084,36.72014216349502,10.36637277405733,40.640061389670265,25.51515083780408,2.2185038897101217,13.784494405965752,36.15830269272332,46.001457822643,39.890977341592105,9.199008560119514,3.313497940712773,0.30129524010151787,4.282998448948428,4.186389022346293,6.51474865325884,33.642555020259394,35.48182299037411,3.0509902095537944,36.81421451894995,7.636260633042802,9.468108022553224,4.791750950204232,38.47777286471895,30.468836918278065,2.1928313235257235,20.264773753119925,11.454388890052059,30.511779556588525,20.418444939794544,26.900018390205428,34.61091590891232,4.377414181252903,13.724794814652231,13.246719685157093,38.34639940269866,42.62733125859511,2.641051670020622,1.9957821461525027,49.1589918216028,12.885019343595205,43.77122979597904,21.67748573027245,21.184282449795077,22.15845523187534,14.536394381545058,28.40627559297806,30.717902974663502,2.7860676310754617,13.444614996969129,2.0553404615050064,12.370582278232334,12.649554602741508,28.68596300933115,1.4180659521586647,13.753669353683573,19.827880828140277,30.379075045704194,48.18358258297831,37.733254341894096,7.790989619652033,4.804356771567253,12.605983936406506,10.929242678951868,18.372905479652314,10.295079422176334,48.864333586160626,25.95896083921151,13.753039998858407,11.69162755838734,6.342829769473535,36.40812726014442,25.4550733124294,0.4102056602284132,31.45513229922208,26.105803268093887,6.479331305253011,35.10901762821006,26.458459794191246,40.659777008658715,0.3292130349234257,32.23885516770773,30.562553936354973,0.32901456680235475,6.942896640043649,17.6090705029484,31.72821422050446,23.87543220844075,23.66042108041616,5.098561991946338,36.75030530039191,26.019763846958266,48.635886450329714,44.75009111159902,2.8737089968784657,34.22750059170446,36.01356177921951,35.237228223710424,19.262770399504326,15.554329968893532,11.387084124913605,48.639346844353106,28.18618072963962,13.697966632974667,38.461040343152476,48.736031059079956,49.71011540966106,7.314027354684138,3.0142414273865548,28.569293906840322,3.0348000281787413,4.494409344508654,19.30667387572941,17.349278699331784,23.422126247351972,34.8913342152074,45.69252027201037,44.69761577967446,3.3717058404640676,45.53898124073571,29.25642142716346,44.10755953289718,42.64442688907095,28.44698601387623,45.88883347159032,42.60639378157165,28.541711741671307,35.71699865484216,16.5504541292399,16.044650008847704,34.43967053545505,16.158174264174928,37.14084837324737,7.028562120563087,28.337022698498327,32.952054006282985,6.381977675746764,4.391092284788978,5.007847084205164,36.02369424074603,38.61058867038219,42.12402571160905,18.08491151314374,25.985578734034,36.38588716145112,35.46105389452053,25.7291860300747,16.82673444821149,41.88878713393296,15.250250978946045,9.04554339752428,48.63995872692563,44.296259876201724,34.3410407666527,2.796728897378342,32.47036944194818,9.663946081937414,36.55299851736119,23.51679919614599,38.47648810163176,12.356055679418198,47.51908768781487,32.73630410799804,25.4559205860052,16.65583736392189,11.952634885567036,29.716885975992756,14.089668144938294,36.04340354417307,40.51658980345626,48.33892322650679,10.958068160334456,20.934077490978677,5.401896102534076,44.4884707502399,39.24413693838253,15.819524500099924,3.9237476790754733,4.218864998021932,6.30812875198945,18.39854815841333,14.127071174247718,38.4179304481678,39.185753862644525,5.496561013749646,31.598106894650524,46.74801973645828,8.590498141773006,21.464885585524907,30.799652604560467,9.25369579618791,9.387556560543509,44.81575702775453,5.764423010754738,10.70484121699633,32.717055643687345,36.73173105633521,24.38593139417383,39.75209879299815,2.5647348887492316,16.330290318762597,44.431360171063915,8.779064110040746,37.52171776895911,16.991565805668063,35.24060423634153,47.262488322151896,20.035551877662694,13.721346155682458,10.016830404253007,36.32577188724099,30.74117418773693,12.392092346177218,47.53197213043675,49.123428178311435,10.584005248671547,1.6890028821643255,41.19039634172539,7.747792577762347,8.09772405025696,1.173244627916481,49.01050657585024,16.094380475304938,42.68368795839993,4.605954250460497,9.791092292429548,3.8901860692383883,32.454653112784804,18.926070741431765,47.11848231182479,12.24477152099206,48.786136800310196,48.26249086865938,44.616910598093774,1.915398893785203,35.11379423848058,17.99384870976458,13.625123337686485,35.24389143547305,3.4997367445764427,37.18148149732626,8.78387387940709,17.528808690932042,45.64698149508645,13.714055495329857,30.25114918894739,1.5845766532035177,44.592969532507674,10.613913178270696,18.071388477472173,38.03790125054276,44.607246812573855,31.289812739244315,10.278202717341179,16.839616825913517,24.598830098727188,29.22037302183832,46.33980791973621,0.21312498768872867,46.60656882098538,43.171977981054575,39.59782205558502,15.99244764649187,26.910130783174157,29.340210914044253,32.734429825801826,37.30023403871273,26.32494760291133,23.642398598447013,16.034684139713285,12.214323374945124,23.9323528476151]}
},{}],10:[function(require,module,exports){
module.exports={"expected":[0.4527118513280455,1.4947254464195978,0.847136631062169,28.739903965653717,2.0075574350395953,0.019874566959554692,6.187613648245697,4.268834879000569,0.9294758987499052,0.8883034071776711,1.140574852197115,0.5877573645636528,1.873831012497152,0.17362698447021965,0.7769866282411425,1.5306915357119142,2.4976952402605304,0.09576952789308726,0.504398311234695,3.517514479629327,1.317989132496855,0.7811232036545911,5.890144092423007,2.526649579272981,0.9214147064325372,0.10075778956102509,1.289565668120647,2.3742112142852694,1.3855797780598715,2.5781121912568015,1.7024445865539763,2.256761643599445,0.9986980561654225,1.5405466147445057,1.2016670036731179,0.5117815538354752,5.722670759602187,0.5668889897427646,0.4236071906436909,1.0709054637852222,5.604458615426694,1.2275483848955135,1.4767999519788797,0.34797187611169217,3.4509983491435454,1.2388241443891428,0.999880888627547,0.6032849573747484,0.5783840731802703,2.9125211334827994,2.6287967524968567,1.5824468944632162,0.5776263378163594,0.1056258596474947,0.09090812801156196,0.49955831498959113,1.4543393095467811,1.8161548443411983,0.09013687240489529,12.59994010550948,0.11769890566275445,1.096130857116772,1.2124004231199923,0.4736938924663502,0.49139477253238434,0.5581254796069829,0.7332783386637833,0.16822472634550517,1.5781437825322022,0.6480010472904177,2.740688624985822,0.7211869942405253,9.544706204541104,3.1655421089692384,34.46370149499784,1.0500347525176146,0.8028044032813139,1.0458672887475335,1.5890905517357268,1.1725671336461665,1.8141778974214164,0.33596922797247264,0.5493011491145994,0.04501253662293342,0.11828139509040934,0.20670558190400057,2.166006637207735,1.5125737324699786,1.0966950134523377,1.4509259544443023,5.319945866680587,2.161245485000961,2.305980412818692,2.054023978786922,0.6849566735804655,0.6567623197490345,1.7335325856589705,3.710768702601137,1.8967753185748626,1.4364395822972547,0.2599049956909098,91.97414407193418,1.0248087565795518,0.46836683502169796,0.9408282735205971,1.045991696265496,4.18857234252565,6.908960009465134,3.0828530905662435,1.2048656496249388,2.8111344751619725,0.589881971943008,0.26574137626284355,0.534853560992789,0.8451213938767488,1.6524117490783339,1.7372361941741754,0.3892626880363318,0.7235249474693084,0.2669759586108546,4.071377279999832,0.07634155380379955,7.231143569602995,1.3381256496195513,0.24258316359374824,2.6403716230401084,0.8532031496845696,1.1527100547142002,0.4656501300410831,1.365124773394586,3.002660812604055,0.08072739679931379,2.693061019792594,1.0026145306477894,0.9977443192958629,1.0569145359221694,0.3020747753381271,0.037330560873864556,0.2978363049617093,3.8739750035515628,0.21639317386814763,0.0806263584823913,0.7838552685802043,1.7790784771433277,0.9544017924015284,0.7231974088489176,0.7772768263521402,0.559507874903213,1.1094760572454534,0.3594451520929484,0.13706604927756294,1.217849338084108,1.4152485892843918,0.6776300048257833,1.0648927866667623,0.09180954170518585,2.6176016761891194,0.23457379342876314,2.657846939248485,1.144600711089146,0.7363755993884898,2.2277062332443216,0.7076932127184988,3.3500716661327927,1.3966724617179076,3.098898514037699,1.0808658339099155,0.15960790345505996,0.8043535138405821,0.8115177590150839,4.265900056316384,0.7364549096913666,0.4610407745279948,0.9243957838488311,3.756650213259652,2.7998356761408205,0.03433496580853392,1.6978509699238338,2.0624036394903267,0.6927972109939428,1.6320303456123002,0.7036844170676259,2.2489283840271463,0.3670246774062397,0.2669405053452483,1.0218731845964242,2.160102379268475,1.304420584506021,0.7204180476535821,1.9569153188227657,1.766964124190541,0.5002407976277841,0.9894073961421168,1.521175804801211,0.2625514674975379,3.077073462617517,4.081193446780867,3.6434226220759403,0.5507295795361566,1.804880322187915,3.1102427448322123,1.1006470937214954,1.2709909680902283,0.6326866421375915,0.059986560744585075,2.480440040539932,13.751482177286995,0.1220385779287684,1.306273594053979,0.2440625812313412,0.254058955975157,1.7298832910378876,3.2515035470571947,0.47107007278608726,0.13523502179427577,0.8578643299887629,0.10925523424498176,0.4571064647018582,0.8699554810781581,0.3727098275035013,2.805921284381284,10.405546683992387,0.6015704094277131,1.1785572216775089,0.7855818083988556,0.566997174531685,0.4828990313311483,0.2911069756920757,1.6993724230975935,0.44040545617085064,29.74656515154301,0.37311447194070946,0.5041117547583426,1.0236995727169174,3.758623250636511,0.09547986261553962,0.476620808079396,0.008939106588012941,0.19166111075488396,1.3773088959401414,6.757804107550591,1.748962498504874,0.7526731180776893,4.931036240943215,0.2629056610663425,1.3527284318565571,0.8042678876001392,0.9558895634659921,2.2913472086732347,0.799167194137003,0.5015566027873839,1.381982235564596,0.9292812167597677,0.05703697864496879,2.1547379329356278,0.9221430353034629,0.48667845898904966,14.689979704721381,0.024952011420518245,0.5339993761848832,0.33195881087949347,0.7638205469346874,1.413371361384098,0.7813216292682044,1.0780538966959534,0.6259921674359341,0.23983092047909788,0.8690138887095348,0.18729166774567368,5.003469806806681,0.24705340754611596,0.6703689743547744,0.6024919532897668,10.985911309541082,1.588314911252679,0.5788404678299146,1.0615139276104433,0.6585197665700523,0.5450677448088036,1.131884216875153,1.5410488127619404,12.810505610274449,1.2728666612432893,0.148943504547173,1.4671921581305654,0.11051368001726478,0.7959646818025126,0.9257984386113962,2.365377593224322,0.5755658875998563,4.264967973177358,0.3727628350113504,0.5918294915434708,1.4129541184633434,1.6108263723542697,0.5393993455667161,1.3391299693590315,4.817566432895838,1.0444541280352055,12.595917402127528,0.9892974977819422,1.24055860960611,0.30166405420865205,6.218758487722467,0.7571837219273864,0.9464993525021227,0.32872911174566266,0.5225164790043102,0.29962838111077866,1.2008611080477973,1.1820577915975947,0.07788560633274193,2.9614635587704514,0.9370835619222362,0.05733900721659267,2.863556093596309,1.664258385670623,0.8145480102650523,1.0556786426064795,0.26409416102689726,1.320905670259184,1.0398968565282347,3.1228444162372018,5.123360067613435,5.913499720445585,5.576909305399553,0.9736730047649705,0.3586634527081774,6.200541419094251,2.824941335452201,1.112674459003646,0.7089791026162596,0.8736628009743854,0.5740704134149835,0.5067610296199573,3.5281305460199923,1.106941401792981,2.642034382238854,0.1024516377229705,1.50072707207122,9.74152668942066,1.1258029245168137,0.4534425955506517,1.056599345635571,17.282396192593794,1.2254604739608923,0.3724741607205898,0.07103855116368069,0.6274904342029327,0.8897558870100477,0.1803187597461453,0.4910721264744821,0.5110146539077652,1.4131347557357445,1.2447052902515041,0.31654586543641183,0.23042777646349114,0.2656918433079234,0.5169586647528176,2.1902832505940837,0.37824895100488676,2.8764670665467738,2.4118055939828764,0.2561921031843792,1.6080618330876648,0.3380334118807505,0.07911545083501141,0.5972009156622672,0.8874888781247958,1.6020243214877825,0.5547985663918729,1.0082849565524934,0.6464402567065572,0.03282483008297985,1.184104366187954,1.7891661956445035,0.04749303340332441,0.9392408504405965,0.7437311941710265,1.2352999858276832,1.6155737409933406,3.1598047993857934,0.33839238292115886,5.9608132606481306,1.2185157911988327,8.754817245413639,0.9249051237719875,0.36539121401491204,3.938414251338624,0.8870169942270256,0.3219062544638212,18.17072988279081,5.16685081440367,0.23059450115262992,0.27580576520880445,12.34634168505062,1.9371066098445862,0.8437275377895821,3.153997128342341,0.034724465283470105,0.9503185609307235,1.0025685327574683,4.234608368759665,8.291742136791264,1.0882547845802961,2.0176913663630884,0.3479825946920927,0.8495704024137666,1.4498271671101277,8.469443041298831,15.672333221352261,1.1779173147453639,1.0466618851391918,1.6182466614424258,0.24357015048196112,0.24328884881983842,0.9057835170907353,5.904339656607814,1.2852596829701495,0.26536826281982784,2.2133457401666234,290.13322088719656,0.47140091628442027,0.29085821774552406,1.207277425439213,0.4517216815094603,0.7128169147050315,1.0945639046729365,1.0410481327545904,0.5140842450153691,0.7763375737930001,1.850442461931737,0.8478203404197507,0.16758765382107313,0.44299387321512734,0.6264347797709285,1.303147772133556,2.0331973851551197,1.0391918745253335,1.8049099648600806,2.275360570528414,7.755794133320688,0.999182642054142,1.2500232802884992,0.18676926174886185,0.458541092347889,3.290028832411147,1.8870151403140283,0.8298406877346327,0.24280189869256072,0.9721625692281374,0.35150222951914484,0.09880185097229303,0.9296443861096995,0.913838707841719,1.1202262777043748,0.6043092641530884,0.032572526213875415,0.27276272020954717,1.3481826753577766,1.3755641016734115,0.03085798622286838,0.6767610574374924,1.2354248853672671,3.6459681339589953,0.3536906580965847,1.5481894144487491,0.24566515157838356,0.11836757812584427,0.32713761140896574,6.66838268492809,1.1737408437307137,0.8387244544461282,0.8967462637190878,0.6565130586824449,0.9254261218291211,0.35668180039028397,0.19651346333602432,0.9836065931704683,1.0856128783586922,6.501726048841148,1.9465418786256112,1.6383575846780867,72.22207993693662,0.503175943681437,0.5834883330013871,0.13841358555138206,6.562020868311099,0.08170283866050342,2.052980352378893,3.082290039583157,1.021854570154908,3.0996619245958774,0.9721039708004291,1.0324121123101329,1.0412483464999607,0.3266533772698523,0.28117105772842693,0.9524353675555169,213.1582748006309,0.18786983264667179,1.6807343974929871,17.723930018479173,5.560858682661531,0.6571873213149254,1.1759766934916347,1.413343840957277,0.3935648394904076,2.316786187159563,0.10292226669650184,1.3064499737100255,0.35711309950243075,1.6662345023788296,0.7853002411675131,0.1806373769065626,0.30944381116774405,1.1171339120295156,0.8245452197684111,0.5824803153470928,0.733118148024398,1.069444057442712,0.6635085782115632,1.0590417193135595,147.32114166897793,0.13135938831084987,5.538429637690935,2.707214435823886,1.1954261005870372,1.1276333178584363,3.792910588398216,2.4532490634610222,1.274325779524489,1.438991011210322,0.5712609205122239,1.1820369340072205,1.4391418079943092,2.3515929337526753,5.156026205314423,3.7941655431422023,1.7450837901339622,1.5990028856828287,1.7241213813962029,0.4774818860027427,5.127270506979032,0.232923490628434,0.27201706722040164,0.18878510846110577,0.4288021384297925,1.0544317650725488,54.43310274113882,2.021972350179249,1.2590958251907751,1.2617999472411139,0.6088101624243774,1.0665468341299078,0.025073412353341856,0.8953322740665026,1.1241401843581347,0.8454153767140328,0.6359206020971174,1.148863592873838,0.2522672654969933,1.2607616114379578,10.773214180375174,0.7320417556883245,1.7304207760210406,0.9590940148535216,0.9322458111060297,0.855707214479844,133.96711108673912,0.8038102540647464,0.5047508220939536,1.1786660686625403,5.342243108323976,0.3566399334624748,3.0127699562174124,1.416062666717484,3.257133588193323,0.8830213432469897,1.1215909631968823,0.9425488023967763,6.465954321676477,0.9268560258869224,41.66821490411238,3.802398192583725,2.515217288597715,0.781057752768751,7.611719430305627,3.008909964929827,0.6868297642290091,0.5280067266129443,10.397585447709977,2.066377497127009,5.092387919803936,3.254565305678211,165.87315038027288,2.4671984150840873,0.07753857071491059,0.6665890107426486,0.33891695587541404,0.29141565736120784,2.569829882251523,1.027856400562478,1.7684246628598785,1.5283721978867746,2.326232780018733,0.6499996115013629,1.8145915761409352,1.3330558592455715,0.5215183217106167,1.092205059047527,1.0169980643927048,0.8117717116378633,1.2204917148538472,3.0502536932817104,0.20670094772927994,2.113707229751361,3.7285632475984327,0.8598046104410559,0.8378528464578124,2.800196147356139,1.2049292681109163,1.3676420300867784,1.2934741377764905,1.5968166972711002,1.2399112968901926,3.511991560912786,0.6352581059282607,0.6808912685199084,15.70902513669325,1.0250221701829245,0.38724893160888085,0.7344217085789233,1.2730353695123422,1.1869466016406522,0.3911955095402031,73.86657153999018,1.9613303745428146,1.305521817860176,15.082973157252974,0.011338024470146297,0.9168564366924509,1.2941865605220733,0.42892197283012273,1.6142633347336601,1.336012244472332,0.9579309569568051,0.7724165572010264,3.10982566235449,0.1588568447068572,0.6726676293602233,0.44870537616501116,7.083099708025472,0.37651504113402784,3.7138189758501188,0.6780689251792487,10.127495651162269,2.134014402943146,2.055549795945598,1.047107620629848,0.7719286271700918,0.8063988673156937,0.320168416757512,3.204267643465479,0.5880019347022257,1.0996916461196462,0.43661143828080273,1.427823357418284,11.246739866194583,0.2160726754301617,0.3473349462219295,1.7253222136173088,0.8649300679678644,0.8906944492049631,2.053405134014641,0.5221503419766053,0.35041217281832643,2.4387007769963285,0.8860595635245437,0.4695523755428851,0.06863348315336516,0.32549313232769694,1.1745468890002597,1.1231398277367144,1.7861440141494769,3.7779932628921884,0.5557356061943822,10.121435893942888,1.071027108044035,1.6953739914536803,0.3205169273629829,14.215821607388456,14.245058963297915,0.13598210879424008,0.20116807221889163,0.7511583261352583,4.410125343024928,0.9477071186943126,3.590497466592289,1.4613766695773762,0.45587454525663756,0.987348150231277,1.0200345027788231,2.212847816166995,0.12514834765737262,0.4090948818480914,4.531968545090024,1.6047226922969184,0.3944292731082082,2.494525714761805,0.8231446586076194,2.508263132257764,1.951475772141136,1.5964126991550778,0.6407911688466799,0.7635782646778492,4.755809786154402,51.490822588141846,1.321345924478699,0.9157973592934108,0.4139736134736634,0.20068381345821895,1.1236406562673742,3.255993178801584,0.8259450381685197,9.410626897233339,0.3148974104599922,1.3087787036051914,2.2205524892854815,0.3841546219902919,0.02537181353491595,1.6768918439956553,1.3275732671942377,0.3609511597919932,0.43895602624902835,1.2340725760062239,0.693542936584288,0.018347625482031463,1.0701367867635907,2.0648546701024357,1.7747091376320103,1.458049503826543,0.5424916735317876,1.4350387939749991,0.07025044266683013,1.4163037908051002,2.0536651648064304,0.7125593203449895,0.30064897339775476,0.048853001109627224,22.414751725938512,0.21579940089219787,0.08349710716321566,1.3491853584693274,0.7614623827594933,1.0431912798397096,1.2394750503431822,0.8447273881450977,0.7893546590323475,5.425286149897818,0.5167312224699638,0.3379646826637265,2.6848359576543825,5.38924123635203,1.340711088206093,0.732681430737747,415.0355442231435,0.8730279412714742,0.9531400896454196,1.1321978030689643,1.5827124205745693,0.448963390261388,1.1302850802420716,1.9177390903404468,0.8272085479186926,0.6727295592675737,0.7228201503009063,0.448837182657953,0.02532198403075381,0.46924953588010815,0.7944160106470032,0.27584140470578034,0.7682990350704756,0.177620495864653,26.224742609502268,2.5151721967705973,15.161599779092933,0.19824033925102208,1.9754202964794394,0.20929772382632336,1.3204824632838414,22.121625338705694,9.28533857411637,0.1297050889438306,1.5309643297208118,8.382246275682194,0.19185149119464376,0.490663494751895,1.286833801353122,1.1528233769878802,3.7162175334491665,0.4745824844243048,1.0030737679329367,0.3300306336633989,0.8396606197754045,1.0716479717605512,4.66385333172438,2.0780220755760523,1.1457410546436912,0.11833309433725725,0.8798269661000462,21.139595829248965,0.12953334236673952,0.8112740526648407,0.5172668754230162,0.3130657734754869,14.287441235592755,0.19908661228736527,17.467491405024905,0.597292278637726,0.43686029335990456,1.9550582659283586,0.8053331804622129,0.20842363043452317,0.6554545260942971,2.969780529228147,4.351349665439921,0.9444180226218085,1.0423488428701941,7.790406376953824,0.923240463008396,0.6198458722064457,1.978467915417813,0.22056675858544705,1.267817483935162,0.7791444397344419,4.850389654677111,0.4641056953984644,0.5964696355337958,0.5366087070513735,1.5740306948152638,0.28574605969031114,3.3117839480329483,163.10190209817821,0.327021641739435,0.27253291943424696,1.7182557511118217,0.49842952718868927,0.2424954826810469,0.4028433637040664,1.6478208495079865,2.6347229811477266,1.0833468803724837,0.16343220811764542,0.7353713896829038,0.6380309789644711,0.07507393288254553,0.29683624151111443,2.159158486797326,0.27091774993514417,1.0218307026887021,0.9443462972305362,0.5069704697997786,0.3777488521672435,0.3537936505975693,0.5023007234332891,0.6465371921276614,1.4242296914594537,1.6828710046424729,1.4507713077148041,2.570961054122671,0.5792502464009044,1.4813802482098357,0.8956540671090782,2.0039834656932407,0.2449929084755996,1.136576271872574,0.8817253251183634,0.9761535797796926,0.7700033505713637,2.70275516942741,1.7699371870186722,0.7629788411325442,0.18371477740349998,0.5777686272982737,1.4586684500105467,0.6034589728932276,1.140321373376134,1.220543068259584,0.3683667835937274,5.571338039324365,2.9943253401246297,0.7012250821792972,1.3670223269190487,1.9946971658882846,1.8141625698303665,0.48855703869648615,0.052046139105931796,1.4247697335823755,0.5342349784678769,1.087171328026869,1.105144695848136,0.25492395029501497,1.052321594510951,0.5569585942875838,76.98893258831954,0.1882784116325909,0.9961190335015974,7.231935309911372,1.3712512985942027,0.44881894735100497,0.597345864353584,1.0143179685239818,0.676494331085166,4.0390291173436905,8.695376168089703,0.5578635162542909,3.0317063652390686,0.6050324689076314,2.8996788192131735,1.4131640611697027,1.2950526907548576,1.310777404373073,3.071914736394962,1.1883744158643694,0.13150370565319294,0.00016452252578114682,4.897433156592405,9.545785360742753,0.7960870996233083,0.03470295428086437,1.015095046039379,3.7583188112892896,6.530987652870221,9.075621905976105,0.029218594321991274,1.2450062341167516,0.5315617920739456,0.620592472359162,0.5364839007383428,0.5583416764295371,0.4343170795534089,0.8779503272082583,1.1870886458817074,1103.7406317892753,2.2938031071304525,1.6806432293479938,0.6859435115814005,0.02864432541250723,0.15281311639104575,0.44066683360793746,1.642059332124514,2.639976412038814,0.6088023599823533,0.8417880396881685,1.8567953385426128,2.1849230841612592,0.6191347148337997,0.026031613999970626,1.6636339910368405,0.6399436184101381,0.23214075800522238,0.5771262736552288,1.9882407531250605,0.6624503937861251,8.541358733003815,0.7316487467194167,1.9850460558255385,0.17844988690837077,0.10041761922117025,1.2140225294118183,33.027313207944026,0.8640876486105292,1.4380871122469299,0.9536756042164868,13.651678331672414,2.3808564202850326,1.0980344715030501,0.440907948150715,0.9820028248453994,5.958746350194982,1.397034628419498,1.0226890413498149,0.1493780863407151,3.9352966428701333,0.006632274917338107,5.7585267333720465,0.6994112433511924,2.061918316834875,2.522184217699744,2.2189539226019863,1.0168857871966677,1.8299520166762901,1.3204671017151168,0.8927695666849408,0.17239741334652525,2.492949661071073,3.1384488779663653,6.011122537865647,0.0014264511705751727],"x":[-10.470173417783766,5.510924926803774,-2.5656016150633825,17.32971218630494,1.7505890763871124,-11.76737533790769,14.741024464357935,10.646472010382944,-1.1781694384097001,-1.3541335500939908,1.4028058087968986,-6.515229149847546,5.432415939095057,-6.0317727860835735,-3.345354363083276,6.577717800388742,7.0581076815333965,-17.698855943783876,-7.813408682149002,13.081760477397669,4.45858539451207,-3.6425826285554166,13.503713097728749,10.634586279830216,-1.363039967146662,-14.820649939887165,3.3655480951990526,9.529241693104845,2.6117485368038675,10.853224833564,6.681818733317893,10.741490018004455,-0.016245840692880265,1.7038554322083055,0.40575543185995766,-6.875915917844556,16.463034634756617,-5.462398251340721,-6.9640614041093185,1.192515112423287,15.61326343182039,2.4974645761404446,6.107048968054118,-5.074727479679519,12.05413467371671,1.175000802850188,-0.0010870164074958666,-4.963814085505209,-7.35503661311944,6.15127173737334,12.173714406036131,6.074610696551861,-4.280273587559593,-13.101987968902003,-10.024148716431466,-5.680157482411383,1.4301662600491172,4.681279242486473,-12.798700535577634,2.857690901225949,-16.604476134386932,1.7232487145926,1.3688181324615645,-9.550047227605386,-7.064460167226768,-4.56395680423649,-1.7450935276200408,-6.865167159102681,6.431890727748748,-5.5456268732547365,4.239898880572963,-4.71712887818504,14.994752725781936,12.67417653750974,14.75891822497681,0.6519495974276257,-1.820253705620174,0.8290770856415328,7.047957825678218,2.3484610584968326,8.614560768727477,-3.9134082902089107,-4.176721634792665,-16.382577130081724,-12.0606964981706,-14.672107122869669,4.229021998883966,2.04602100004021,1.304236782566221,3.203442420885346,12.330486823268362,6.464988425548932,8.630161104518969,3.400062418175356,-4.972389509638042,-5.865407438061538,6.283554357675392,2.0487497827501855,6.949900266190752,5.443781908159117,-9.178866895344559,14.363383265885172,0.48054010958750837,-10.527361774713441,-0.8900451753204877,0.14113712272859846,8.920193548946026,8.666144786534947,12.675518476868191,1.6052793973112447,5.168043983598437,-3.0843844257322495,-11.612157542998599,-6.741584902924545,-1.6364120007898393,7.621806461057481,5.411620873363376,-7.716921204914363,-5.481081221366004,-12.996540483850257,12.045678706817036,-18.102125724811557,14.391240998498038,4.813511985295722,-1.1356774036035988,7.4545579247911,-2.401938975418757,0.899809595534875,-8.97623345781198,4.793670769170317,7.908020544039936,-15.351179236564901,1.6611547898597,0.04042720930921817,-0.03326948334472668,1.0267987960439484,-10.066855584232455,-7.540955777472007,-6.294342550967822,13.53215998060055,-15.231070101406786,-16.66736332412299,-4.006626727688861,8.046536664051876,-0.5807149873442867,-2.0894504422039084,-4.357321391290014,-7.626301933287854,0.7842226400927554,-2.5824297017385556,-15.529461974540052,2.8452695144954756,2.332364392131856,-4.160580194453239,0.7625892613314935,-10.778817381250452,5.98292129510944,-6.788863876416721,9.056979370137036,2.365051901916299,-2.144420147977825,5.781703163169789,-5.731637617703461,11.34561844847835,3.523846865579751,12.516441833724826,1.368397678466284,-6.696591073601801,-3.0613238044477313,-3.686200896205179,11.926471703082221,-4.13021316667875,-6.333259105481127,-1.1213353009326301,1.5510168434785854,12.200975795201492,-6.132618292321346,6.507923252871116,8.26712105150853,-4.627526216761506,7.324484524067756,-4.435613449172919,9.916573606285436,-9.001664518671838,-1.9909223892554184,0.20555223953761725,10.58199307281458,3.5903319842908346,-4.168399129893544,8.154147459785541,7.997668618137574,-6.547622800386446,-0.11874024627649327,4.1776320160773395,-11.163251351918246,8.135080316207976,14.423263939512513,12.239771420377881,-0.8921116028382192,2.314268900087373,11.697877843803255,1.7118101871355975,3.045032302395672,-5.622910541987967,-13.483843081303677,10.62639640087537,7.142472951799492,-7.106150991946646,3.9499690437409285,-10.557604578481314,-11.198597703057228,8.084354660963074,4.88418375204053,-5.3962667068016,-10.782471375918327,-2.0346063640473133,-8.965189837799421,-10.269957856645977,-2.314121403298193,-5.320916594042914,11.766553267892052,17.27654896476576,-3.8569913076128204,2.324063784161744,-3.895231985553078,-4.496069526160969,-10.341467233484522,-13.207598888942412,4.568588061679372,-9.355345287619507,7.372612978097983,-8.8328077808181,-9.044200112515801,0.39436898050529123,11.709444110485453,-13.25417968564523,-7.959394293571416,-14.678869745117922,-5.91299734757508,4.1774645650036355,10.568186871672967,7.651369054026485,-3.4923489186181413,14.733200216524304,-5.088309985064923,4.136321102252413,-3.778712491220194,-0.2906648708018489,3.857075715768654,-2.721562589721339,-7.113959569056827,3.3512506479818605,-0.5975154609318025,-18.6101410361241,1.244775421801485,-1.2852833646741537,-1.5924540827865163,0.4867421739993505,-16.316961410154118,-7.539768474312982,-5.1869685900666385,-4.11191599270801,3.3074811049996935,-0.48066959441461776,1.2426758991382236,-5.453916353487394,-12.86081917571374,-1.7836052583614137,-2.8279277257700386,14.956362613840337,-13.264130009346815,-5.957679155767824,-5.725718538757906,9.570231482353883,5.948907434706733,-1.693584452208321,0.6373581134833195,-3.5754654227591853,-5.168719404349868,1.1028685545661734,2.760656033816753,16.559356845965475,3.6326272981156293,-6.990157117052345,3.1308559031162506,-13.746373413732794,-2.643059480394882,-0.63379295986263,10.732340138389528,-8.372885549637596,12.07340329953957,-7.047837120669165,-1.8681181362161592,5.691410111895339,3.8483531075663038,-8.663699987153816,3.6727503854325274,12.231003415957066,0.5578810635477662,14.083550234717395,-0.15731885818800606,3.171319361404496,-1.216021009067214,9.570718173518966,-4.746801317391409,-0.9625196932305897,-6.604024418089068,-8.505332421883224,-6.1975900250563765,1.4781744865575117,1.566222341145508,-16.28767334177806,6.987316652003829,-0.36543993966933197,-17.811414186029978,8.16478482850925,2.823760071409369,-2.1908955721703904,0.9042778274985572,-13.99105863514077,4.055630326284861,0.5603679816586826,8.118165515768201,11.809078238201302,8.579200570220898,13.747068961481688,-0.3324704168433179,-8.28645921263191,9.542236434069821,8.910517085986086,1.1656102524561138,-4.695978448450237,-2.4685397481200013,-1.319529813391802,-0.6382040121874244,9.810405182025596,1.5401381413260697,8.690971986159312,-14.59119198264613,4.194902891886892,12.822574738861832,1.7085321556243684,-8.243287048941305,0.6106567667863718,14.250372789209576,0.7327377411784308,-10.427752034116798,-16.250477020407974,-0.692018258757634,-1.6505730374829977,-11.728557712081791,-9.11260811061062,-5.157936192882331,4.906113101383781,0.9460133687551098,-9.690556520014585,-10.29057186748867,-9.194254482204979,-8.513439824698311,2.0925747358649005,-10.945900708219703,3.265170177944987,3.848888425755841,-13.813143259299471,5.7946449351816245,-12.974348008999154,-10.46291150460342,-3.227658223328133,-1.218979470486845,5.910565060298829,-5.519601860987237,0.1590506183569218,-4.789877159029841,-14.756712283084013,0.27991202023844863,5.57428788696924,-17.338409791410225,-0.9765015482523633,-4.582319764288458,2.5049435053773994,7.601763105709555,8.190873124671457,-8.157016297775117,16.48182307269453,2.875784971821041,4.802062315832849,-1.1996786903796135,-1.091836073371657,14.114107061182644,-2.2489232075233936,-5.574113453893924,14.708393480846144,13.73974917243277,-13.416155361459548,-11.745465681182228,5.750728361695261,6.771838656062639,-2.679103674931813,8.903148101269593,-11.357707066430223,-0.3886415767016782,0.013352181287098475,10.726987277848155,16.978052064341426,0.8973329879418124,6.195060328668206,-9.663990690814881,-2.2390893936666814,3.6711240227565547,7.338047166793169,10.21450078366466,1.8150683998906167,0.21822671255824488,4.262168709859529,-13.244430054603413,-3.754458152775091,-1.6183305496243356,9.817541828014656,3.3268296898852068,-9.083595027520346,4.9301942724621695,16.27395325675168,-8.421201998223133,-13.975033107552278,2.13508240885799,-4.0591023850931895,-2.163880464331105,1.2974721376037763,0.7188300529581468,-9.559213599938303,-2.693030218439917,5.474451921272693,-2.815043753409242,-15.794092605347657,-5.394437617237133,-2.3143832937423925,3.9662492530506164,7.690036545092375,0.2569581417738487,2.3060499536030843,9.457238331858926,10.052518437559051,-0.008737101337397135,2.737350123800221,-14.021905661144956,-5.626331246740603,13.36405908848401,7.854405382325229,-1.0528882244439908,-9.949933460984706,-0.5060162146674152,-12.145461570318188,-10.367969943726845,-0.9812138018497052,-0.9330421497953569,2.0146455722123378,-7.869663237201788,-15.134160937176556,-12.194531227134426,1.1469211643700783,3.2039712439617976,-12.489299015180695,-4.412134273120991,2.1891789104047454,13.93771005256367,-11.194877193931461,4.880044022016143,-13.655726020196736,-12.550675744023723,-12.040990490539826,15.534301636461937,0.9649791714970268,-1.8672502742931414,-1.535680888633534,-3.5797903779178144,-1.3888367192644537,-3.0372296837167623,-8.879128639420436,-0.2300735710001689,0.5141766673765868,11.665831037252202,5.628656305070767,3.1887832685545305,14.00337440980731,-8.333932910966475,-7.313885832340112,-8.117739016463656,9.273902536964856,-10.124372908805528,8.452806272328722,2.7168337138745002,0.41704569863248153,6.6004509045519635,-0.39733370026897497,0.12544175935041313,0.5228865258503745,-11.470468564733284,-4.979528541663463,-0.6202838181756274,13.774690141304855,-12.74418011179467,1.9763028370434599,4.421860573141569,5.140889513227136,-2.8256811130180584,2.9911606732417617,3.2968945317048703,-4.433423743953977,6.233917122757803,-14.497355974446512,2.224641106498221,-11.385416649718799,3.585136891908527,-3.143375396585263,-8.894823230293294,-8.744914437542768,0.6941012312527128,-3.4133055905007836,-6.323610295776049,-3.863997233116523,0.45685374301531745,-6.073043003625047,0.761334314881843,12.878857554080145,-8.251631191432892,13.613816185603639,7.412120240338926,1.3117041546312578,1.5682960558417882,3.5269141965489403,4.260816337886029,3.108258438808406,2.3822766281559016,-2.9847193587468723,2.9982518272850385,3.6156559318590578,5.600555585167427,9.151732832587074,14.290560033343498,8.325167057096401,6.360814228823136,7.157364162534535,-8.233093851631821,8.051265925309174,-14.090668182978554,-9.810470472436185,-8.350822093054925,-8.84566821896875,0.6614217375102882,14.62728161922857,5.409631510434648,1.8847730807101062,1.7742402176334657,-7.467175788040294,0.7735037207047704,-13.68608234873884,-1.3890956684771503,0.9241920438779996,-3.0861817470834936,-6.151775468072053,0.21111353629650775,-12.772296795252341,0.5370317941479774,17.75787591229351,-4.380796523275219,4.6253316010987975,-0.6777337436806974,-1.0194593851553435,-1.4196002743757816,4.874676514720009,-3.7791552897486866,-2.403974201093746,2.835805698700984,13.854773627147097,-7.210219993476535,11.027769504618536,2.6270938148694842,9.527735276719923,-1.0774187429482627,1.892657632092277,-0.4438600008015614,14.853628244478948,-0.6858931179415713,6.742732659009754,5.4383737028282475,8.356353086722738,-3.814604579992645,16.118641443152846,11.802971182195442,-3.513521475172948,-2.5436656708738203,7.42498394018297,8.991219075176073,11.715906011299987,2.944696172952228,2.839438500550906,8.79632857547367,-10.825553097895746,-3.834233562471642,-12.353975273082828,-13.724959546039607,5.279046997873556,0.29255565852750465,5.9954528698477905,4.057940664420255,9.323077705060806,-5.517744665467735,6.492731553953832,3.900142220949217,-9.502577970449392,0.7311412054058533,0.24851323224166322,-2.219427602469736,3.5093554550092527,13.394148218459943,-9.648859492149352,5.722646132117505,11.45167303386175,-2.0882382682884,-3.032818916506134,5.618435850705207,1.3566883004509567,2.726488695749545,3.1941124255258835,6.814248469710172,3.554834101781017,13.813433370184862,-5.774974106525125,-2.8865405882805195,17.86272025158222,0.25266643244261644,-1.4745127850361905,-5.255921899930648,3.4083966695230252,2.196087914627867,-9.395609401315724,9.452761964566832,8.772517416213233,4.353125641915376,2.411725419865416,-17.339386759493227,-1.025320562161916,2.7216283345311645,-11.085174356028563,2.2586283093362436,4.916765712405679,-0.44072942828326944,-3.7396925530813494,9.60681166115648,-16.305137889406435,-5.999965815071757,-8.171918188301493,12.85154238649866,-11.941555468372247,7.022252050388623,-6.035028428585516,17.31205529573147,3.7737573873295593,6.266916331556619,0.4727624893124247,-2.9279233447995914,-2.3241686390260785,-11.161082489804599,12.326264084678233,-4.1204396803773635,1.7385122444267047,-5.304958091295634,5.951441792968133,8.444193273408139,-13.302771969715224,-9.545864488075164,5.283454887326786,-2.5694618100409343,-0.18893383515868667,7.343031904180228,-6.923399396477433,-8.817124113321967,9.469033615735789,-2.199742368716194,-9.272356936408265,-12.474591101814948,-4.092394900263678,2.6974733807598383,1.4780175679994336,6.202367822284232,11.60263286150493,-8.527313372201272,8.366925675763168,0.9229061388086013,6.593178484774647,-7.327644038775557,12.899238011764504,12.839511521187365,-8.916690580223367,-10.204378288481694,-1.5566638167723212,13.049315255561986,-0.960566548673043,11.075905718508388,2.16995240259942,-5.293983440206879,-0.24261597192034046,0.3164686523246196,10.613795825752652,-13.481168595673623,-2.302975969007659,14.79588736450667,6.707760964570486,-7.060721858020936,9.256716297409632,-3.106401283461725,9.392219317788863,7.97625016116816,5.587650064911944,-6.151395588379948,-3.5968432546987064,11.84085713170754,12.95206590652814,4.642839807223332,-0.9028997739792466,-7.216452599916217,-10.732214495246359,1.8978815985767454,8.534121250420563,-2.058732043509245,16.91091488459125,-10.507601508028994,4.662645196772122,6.869332248911406,-12.278775977149042,-6.6398017724471,2.327583156310804,2.50233196943996,-4.712542676727582,-7.233651224720359,2.980584817158551,-4.683675552436473,-17.86372336890019,0.9241970645592374,4.26429899765318,4.46876899954968,3.6067814280782606,-2.213859677321315,4.277579640250874,-15.460829969166944,5.848999595143283,3.295871434377875,-3.152381261164191,-13.51493180087568,-11.8376432862269,13.074882980230335,-6.415604102128767,-11.357354735596704,3.9907059320077085,-2.056875070900518,0.5717172015681804,3.5690490222615825,-2.489602369491248,-3.9852279175843712,1.8135466197835148,-6.088568141386772,-0.5258538565888671,11.626268331504853,8.232785656675444,2.992276950575693,-3.9992007267805683,10.783937831406703,-2.514958104354978,-0.48557518589017334,2.2426432449303277,5.546084439809768,-7.6799878651160105,1.43973413958269,4.767684073090641,-2.592180828341398,-4.5411553668385185,-3.587682215802115,-10.716801267223808,-17.946653505359787,-3.175742361884515,-4.059870534664348,-14.227233035970592,-1.6828498556808702,-9.869267164489894,16.713330545753408,5.973004070483837,12.567033495486328,-8.25665033569349,9.363390753016985,-9.802474121363582,4.707963484781624,8.61280805957922,12.89850124247054,-10.76099997234044,6.015010349273307,17.047451206475316,-6.621778826811452,-4.627793858181599,1.887901039689118,1.5640740119342489,5.10424746352844,-8.59452127823469,0.056527127004226685,-13.321735541525921,-2.7414533346528707,1.182689129547228,12.016633928115846,7.773028004941026,1.5097085374724362,-8.026185295790196,-2.0254457453294403,18.365721817731572,-12.643351936117359,-3.4352778595318405,-2.2062072401362576,-8.914028986717577,15.373093482347484,-11.737060647041883,15.443396805431533,-6.418747483362633,-3.2756733693873485,4.0112097230977595,-2.8877455289022382,-12.274950381081279,-2.5651378982368023,5.927687332265088,8.968068930850105,-0.9615522363499558,0.7314616729675585,9.067871480086215,-1.2563038730897027,-6.425836307011529,5.927087306986775,-11.66371537298,4.041672988863077,-4.165058866795791,14.004041541647144,-8.045977187426576,-2.909162610050635,-8.302792723336186,4.445520813959751,-9.815249651776558,10.563275895957535,16.62263969561113,-2.498695380146163,-11.784697523655968,5.672584397417904,-9.39361426909121,-13.189482046301244,-5.743747356913498,4.589567621220194,5.015221540888274,1.0707036655607727,-13.260928886251868,-2.6652236870067716,-7.141492487132027,-10.045835407131225,-8.732102344140253,4.90524294815168,-10.993887954745247,0.4065417748643263,-0.12987097683196946,-6.207416399899709,-9.332721164473039,-9.529391710071344,-3.112416564139311,-3.6069194466774936,3.4494350669272897,6.254433965356764,4.37214942186861,9.423074688588056,-4.175647231085348,2.9895508323779385,-1.3949557316054566,8.392170195093275,-11.175920385217136,1.8370037563419341,-2.3548293166422667,-0.4193878752005027,-4.065475755287059,9.878154495521443,6.703935624797678,-4.557055449071061,-13.207403489735107,-8.00080860140962,5.679098989124032,-1.3225594454338285,0.8648120223385547,3.032043889686779,-8.608694045646441,1.5536992663947213,7.584579249271126,-5.064505098230036,3.8954908965863186,9.963057493374635,8.245416364890778,-7.623493714890795,-14.001969885871148,3.912229682916191,-7.084680168088081,0.7608957334705924,0.7113302706958002,-8.972270500109612,0.921051748481041,-3.604106161703716,10.66631219019127,-15.042250097641158,-0.07666306814786239,13.05302484992651,3.6171002784965243,-8.752031338921578,-2.11009070242711,0.08978261074799043,-6.3537662290245045,8.383946945324361,11.153342103901537,-4.6583813747156055,12.136829306339097,-6.497507176122877,7.6629538817716405,5.686779891692012,3.187396764757228,4.419245529252027,8.282286891570575,2.0993072374502475,-16.421220845473485,-15.856031335557605,7.55303643246565,13.830634466249716,-1.3912639467272792,-6.681962544708799,0.26837336336399176,8.71680015721556,11.630217357946847,16.07528568137324,-18.845823940069785,1.6408776731949812,-8.100501008877472,-4.5446669393956585,-5.2918303953358015,-5.193865908936979,-10.2167308726651,-0.7831363862440543,1.983635431136804,6.289717845063776,10.501854604225333,7.513797215448932,-1.7654621853818764,-19.161063217562372,-10.752219409956792,-10.4841332853585,6.231912459885425,0.954493875439355,-7.1596792077272475,-2.6375473258791295,8.113454761388658,7.191282644158585,-2.2376657614156326,-5.090786687416391,7.318918061191088,-6.029555707740567,-12.799791788768623,-6.237426595538524,7.093075465601077,-5.318174078285955,12.276543403676264,-1.4151693904922835,9.47893383787643,-4.561950317952186,-9.733987323537056,2.280819604512917,13.387192005808135,-2.40009689194485,4.221155837429684,-0.3911303354623339,4.749792720444419,5.555440407622818,1.7799776471153805,-7.622005596888802,-0.3318483195018942,5.451935200756197,4.056271534179974,0.09469645905036739,-15.690881379933854,12.570113763125573,-19.00402153482849,16.01684467576097,-2.0428811904942545,9.67353282381377,6.512716654044678,5.0366699026300745,0.16380067358636374,7.868050822025342,2.8002206615018785,-1.5439748306999501,-12.55580804310885,6.776584963205284,10.358968761313259,11.733961029956891,-16.91915193146511],"lambda":[8.660833608753556,16.650285084416776,14.218024396128367,17.95443360595231,3.488047424176801,0.23861383574749873,17.582605480967167,13.90343432401258,15.527742689865992,10.769186560913816,11.381872383449068,9.289126318992693,11.649196828538209,1.2673193584205134,11.655335222026357,18.972333801876008,11.770753813937214,1.8745343474595177,7.952091838268083,18.278060472194042,18.479773349909156,12.99957720462794,16.26512724882748,17.600550456687753,15.981680721292797,1.6606159168971857,14.988293695678188,16.46357725524114,9.385310547616385,17.7305716367216,16.194054803208164,19.288448840872526,12.461896657790309,4.855952560804049,2.4177624754993188,7.207771357517916,19.9489932104807,7.149606805045323,5.118083430220737,18.01089621822213,19.004164455343545,13.472996559315087,18.915458328641964,2.7082611580143023,16.972185588736217,6.094942234465361,9.124963545432205,7.548476985328145,10.089837133939534,9.367587431711083,19.647768113089814,16.504077750625918,5.8535817419391645,1.5473487882386205,1.0024031924596022,5.670130977857948,4.577959616243095,10.417052637625982,1.2679212973197895,3.1040448371284857,2.215035981099729,19.649321219067776,7.813335108250601,8.595376302359625,6.825409196486332,5.764669522027273,4.797657889259668,1.3884650136112597,17.556961898760598,10.209041799950587,6.675658395349764,12.201482451784248,16.749611508148607,18.526834163060343,15.199960834300317,13.681885084729357,7.410447871438355,18.90464048344787,19.01209102202936,15.957431717487673,19.195246876776668,1.9800057729072496,5.09049000017705,0.7721790927371286,1.617926626048578,3.8230527927698033,7.855949894432923,6.037682824341841,14.79238612967913,10.307585327968841,15.18480194753241,12.032276745764516,15.238346816808885,6.625854702415883,10.810803126591452,11.223064415532512,14.849710082073852,2.8045316319298275,14.69977932980659,17.91694458397575,3.2234150304919984,14.521267502251582,19.850318197683468,9.274566449879359,14.151685534198407,3.2098894017021173,11.717744487332574,10.132755623747126,18.761170189069475,9.441045911854488,8.02152839045688,4.436339401857277,4.2026482592079795,7.751882825891139,8.929359746197573,19.30431596801356,12.752037575808748,4.918496762431688,14.34378605398264,4.733492571028357,15.96759308225244,1.4961638803552901,16.70080758731842,19.049379600520247,0.363731309030908,11.99899030833571,13.960394209915785,6.792084319808178,7.822186383671483,17.922527309369674,11.856777365099994,1.348088405172474,2.6423094974810457,15.502938365337151,14.715929409791046,19.06786298829342,4.3571188309487585,0.2924244784934471,2.6698670705857053,18.240676917553014,4.2060629013676865,1.4616786360208733,14.530150464937691,18.37481154279885,12.154763399392824,5.459071533385038,15.206522459908122,9.68683829960999,7.9476395535688305,1.4491215544518932,2.466656919077459,15.90599092645113,7.9491550383114795,8.745646367372895,12.514115131957858,1.0896373936305492,9.6815582235803,2.0805265600928413,14.520076810388446,18.720793752025532,5.989956423400131,10.491057084010551,13.876657047667083,16.173393963575027,12.407364643241173,18.479780103780897,18.29022501027467,1.2718216484277667,12.585897183478846,15.871084060419346,15.578289424820504,11.541538342112112,5.417646725910177,13.710315075423987,2.1136623456239434,18.979914537744165,0.21804997792008063,15.83358665860002,16.04864658870884,10.43589892899869,18.913302331497434,10.533607559312571,17.85663945242277,5.219528942370957,0.724985942568428,9.603005940505351,19.70359583988007,15.38431756551168,10.741000761300654,16.675431735824816,18.425364472332014,6.553932447234265,11.090991361700478,12.193414747339757,3.974417054630486,12.051687245438195,19.104328010507952,16.87004556502665,1.093578000134463,5.18956456366686,17.241258041389656,18.719854074348245,14.281688357227015,9.685300884655131,0.8604657532425986,17.804259813026672,7.702601794274111,0.9877706922000895,16.84683354798144,3.4086369599763566,3.8141138145091213,19.16058391600903,7.053482467303205,4.805966952439262,1.6862012087307,12.279931034527301,1.0996347701793807,8.64711738722482,15.480718567535208,3.1614681576050385,18.282093767722486,19.113395832387955,5.823492770070282,15.339856493790833,14.271286239723704,5.887395111276987,9.657465006201797,5.423701513310357,11.10099899296062,7.362732811576187,7.629082331540102,5.257177368723744,9.194183634831061,17.034710357790168,15.95411365997311,1.3990924061972398,7.248306769903126,0.13239951461652577,1.4020006393423312,15.249200773593788,12.40364126961162,17.867326554302707,10.628028500424978,18.481117893566427,1.8148904823624878,15.862966103567523,15.526819160636038,6.298815842628747,6.84393756815266,10.829821996210898,7.15839233456824,12.124566095566696,7.8516607487611445,1.125671095067915,2.3227476493500854,15.222981113446728,1.5098004605359616,0.5222968047948573,0.41755996855854516,8.639970541024358,2.577475690525426,13.29821829010324,11.308715379975109,1.7173968755617341,17.163417229694353,9.12844229953135,4.057547437960278,11.833145714619393,0.6517064966647279,18.692212597874587,4.352165943488919,12.11610241290023,8.678313244104888,10.528604853165815,16.06068145389643,2.3276576730307363,10.998558222824336,6.895024733716202,6.192795074718203,9.465268398136493,7.86307187634339,17.96144388545342,16.9454566542705,1.223348278183547,9.832286671227038,1.7079096987940057,10.310871749475051,7.907711396674673,18.592686017543176,11.354288362679545,15.77126600408247,4.188482271847542,2.708690078763234,19.473595244407935,10.1485937025063,10.14586943869405,14.502670231131107,15.434877829395672,13.10747067884629,15.298076843205779,14.541940715201331,16.354465733081668,0.5252913441000429,11.404625260048228,14.802140603099971,17.02828487168197,3.2340670791648307,9.307496812824546,2.6514122159048714,8.83736164291713,10.169107872171583,1.3757244466479746,10.549614111347832,5.4428980850874575,1.0834104883611673,12.546077592685062,7.074756569644847,9.622919827177281,17.145295660669,5.020964227273481,16.6937065653531,14.605784849579448,11.942357931224565,14.673023672158102,10.3252473919032,16.750639284639227,12.296027969518208,4.634150485385788,11.37709085884849,13.793149153596168,11.51054789638479,11.440245756295159,17.070754831455975,1.7784700789646335,0.6557002624397112,13.690903045345987,15.94183959187835,13.983779542545243,1.665527538995133,12.57252640350369,14.289432325006391,15.289553123034544,6.838911054744332,11.399770314463002,15.125573995509388,3.98269871351955,6.18949522711314,1.2426891823062869,1.165701172626381,13.321410433719967,2.5801236827119522,8.792892029290265,5.3903066820880285,16.78144683515926,4.8119427394802505,4.488239144455832,3.0812359404895773,3.326721076099326,9.11122126220806,3.850622439905491,6.6590566551988095,5.005232786106726,6.575105436199649,4.757704560999416,15.324341784854155,6.6253542144337585,0.8988943961369689,4.785414171399198,9.615322509355835,15.72838279512398,6.878385756109413,19.35657052678124,8.757697896918772,0.5008261050758911,1.8003106182417339,12.637803680897512,0.8645119713152205,15.095177455378996,13.298591451049111,13.150687900839628,19.95083292379946,11.98328673862434,4.172068324603222,19.804226518806345,16.03632113281773,5.42129835504098,14.775827903931816,0.6286507800790497,18.917414510005703,17.656045616215735,2.6461562220730617,15.564990351290625,17.037143243979127,4.020885810663608,4.473202069699216,6.257563826492882,13.9981655060949,14.464695283866522,13.036462850914234,0.408577955768763,7.434029907506958,5.211721268960257,14.04330444979732,19.306446533843694,11.064860926615768,12.282426826437977,5.157685252408104,12.645543880600556,11.832311899294442,8.320456046039029,10.910675047809626,12.016820840277607,4.894992597761507,11.156130255750455,4.264701906598454,1.2070891257600058,15.55839373101849,11.81934890407781,14.989289856866943,3.281232909790166,8.993499651343813,16.330238567747127,7.509968254720931,5.731933055297973,12.435685112378799,3.3442587331583384,5.3709660330124365,15.018057619889863,18.23071195159972,10.113360301767464,9.347571612229274,11.911632761041385,15.683116652349689,3.179788161616268,4.290263067070739,3.881009554454784,17.04979997531431,15.132986610183593,6.813371808789257,5.171028714307022,16.87258309819474,11.54050315692437,10.680706099983626,13.685731093130848,3.2203172426513538,4.764727367730539,19.199819276015422,16.709277216355648,5.134773270108761,3.190529310652397,17.671531088975367,6.583148030471095,1.1366807869839723,12.965275292533427,9.895975456873419,18.771760661196154,12.018755985851431,0.5095553591443425,4.573766501838126,4.440942508744996,11.735061488438765,0.397665782171277,9.237626606998756,11.488021328824477,19.205237606536723,6.126359662961174,13.782156856360892,4.447276974786485,1.685048161573759,5.854184949052681,18.274819082075968,6.519108821015007,9.71076217564406,13.337203560366536,6.8421207555487795,17.234798705489368,1.6839637871960278,2.1716211046711154,13.804444902957588,6.520009869507009,13.78622578858836,11.575203871717932,8.184076416301153,14.199990043922552,8.440482105730638,10.245972418556061,1.3041122109128755,10.941264590530984,0.9007868488892079,16.48031243921222,4.021567282315508,19.49981400184809,9.744028843091929,13.846044718444697,3.9956541709986615,13.199431653565345,5.564544573411201,1.9477503265574558,12.420578400188344,13.839616622038399,2.9481074353198577,4.8794951016356425,4.68626377073063,6.268065308603266,5.416957764448531,19.988642634589976,11.273049502514354,2.8772073550550825,10.96810797587191,1.663290351106399,9.484035126232286,6.32441169008239,8.96633056937132,11.497420725769892,1.9609602526188352,3.9186668596295737,6.619808135652971,16.04074169162765,8.822047569512378,10.614309195414124,7.035584304549682,11.97509317573755,13.656187712333526,12.9668753033075,1.2478454395144567,16.613491684049855,11.753765955607207,8.023725479782048,13.855809082661747,4.789723758444615,7.192740703100187,14.438795598663376,7.808985985114796,3.976902526323136,19.468820526086084,11.849114614312523,9.744225950191886,11.35377208365929,19.404988585516154,19.498631259826645,16.979818545592288,17.041569140343892,7.523477319937242,10.00201422535271,4.2786444094803855,3.66576644286849,1.9433948649365806,6.640503586108122,12.812814157519426,14.901031052984862,10.702956236378384,9.159197820368984,8.551324156460304,11.621192750155128,12.396952541647828,0.3519821805865986,11.882384686028104,8.368937262007993,16.878169696684257,10.745020954649526,1.6292812173320348,4.309069588608954,2.5965059291118653,19.57487036105446,11.968006382671938,10.957752245395419,15.890348928178476,14.026981311680565,8.418731346005064,4.911337283498689,15.48360113889709,2.450095847559224,18.707905644310557,17.04546868532747,3.996910147940138,16.506671587071597,8.94127200248693,13.748901151242311,8.132968629024502,17.45843310035344,7.282001588142162,17.571109469225654,8.691408652416278,6.908531248274312,7.378987894351914,13.871306717205844,13.608275783355515,18.556530953296164,17.67828236499787,7.705684802598127,2.8455333162649232,8.215078798218265,17.422772722359973,14.578759250262067,4.250799910792908,2.856660458729068,14.791651692674241,0.9099544845574137,7.665787990543507,6.333503377110219,5.6445900194043475,8.641861693630336,10.794833505636422,13.79771789285507,11.738020503310334,16.352822291021894,10.247222593959236,14.463267641145707,15.610316693734973,10.357279578165626,8.66065410804373,14.868603290749775,9.571720379494213,19.425397730499864,19.927070589164607,2.5140940176660065,10.861021801453067,15.64863384975672,12.806961030761407,15.671295526779808,8.739449001942493,7.97696422763897,10.142639387513439,14.077907671424224,18.231905684844758,18.372119272841818,19.31243009657731,10.058068931271006,6.159092775909025,19.077125698957637,10.350369013613566,0.931868633290458,14.534558232337908,15.891748828661338,13.943227982192056,6.03727512655583,9.582488967838545,17.897910359700774,18.601291852773713,2.5829765749259037,0.19884894558739763,11.306608950760705,11.972997022826352,8.325788469776466,5.935599050745655,19.549463756272758,10.035606528081246,12.692489450530635,14.16017918936998,3.0793602032208645,12.329922559074443,6.651223259106267,14.964205831673421,7.211361211594158,9.609842495027202,12.711308600065014,19.20874809706159,7.101543504979739,12.204027357135946,10.508558884702355,9.909826998305444,9.680764425161925,5.256340243883799,17.91826382264983,5.880674469028384,19.17740820106692,4.111204130932298,19.86242091501124,9.268279117654728,3.6666224534410397,5.080113159750761,12.567741495587788,16.45373433275132,1.5395587599974725,14.313789561488335,7.56525677441068,4.756289279561758,16.05068962589304,17.10633049497727,8.207892778911003,0.9192671442927969,1.9748448809803199,18.15162095228043,13.480775693985994,14.091975464968538,15.779256691551712,10.66691756572145,9.284207315742599,13.916623104399033,16.074664082174685,3.456501047190428,13.87528311852904,13.808892749067564,1.4033394457520076,2.5697459466701122,4.6989757334520865,16.875953265291763,17.408406907921922,15.351495971479515,6.87316464908581,4.435360030231927,18.933708151064312,16.1126506598529,19.36493152824812,1.9284937848848704,1.5943941810603501,18.985020754461466,17.80005343187049,4.598893682283411,15.450464726077486,14.458243691380748,15.619394879475749,16.359280391374604,14.956414467192145,10.9734495013956,11.616830944069898,14.993534664887802,13.208589077326511,19.09094527100087,9.820039155281567,5.097758442169518,2.6945303598515746,17.247861579858615,12.316987852417123,9.76932515087574,18.921575337280462,4.8296657399083065,19.762926214642583,12.497383733147656,7.659306560437984,0.17284931301888573,5.766216930609529,10.14133130193487,2.6617648569402297,5.659547104027989,15.714177397774659,10.599625475880895,0.3338828638275704,14.101263012482065,8.268882080566238,10.237087433496384,11.480998948121899,2.6250898001919287,14.110219164570399,1.1681964683542878,19.898834653891505,6.423877886962233,7.814685978405773,5.810029894736837,0.6080073861054869,13.685437944750118,1.7654711347786067,1.0347007880286663,15.419323527834688,6.565979029409639,13.808583617426233,18.47268519290616,13.544148462353501,14.933908386485882,2.2233611624714245,6.510152124600936,0.2684449411016576,18.526802640904844,10.108459654379395,11.77472358690498,10.961229211990918,10.809983754231132,17.292219392326512,9.876697857654197,19.206943655886448,15.0637886176977,6.257358092277028,12.4903789018812,9.962716215964722,12.409607727273272,9.334694088662205,9.355835214115324,8.727183214358249,0.46625128095895363,2.807751910043512,15.688119313384433,5.419337657829133,5.580174949557795,2.1315999715004175,17.37590739755674,9.915132947462016,13.454435603406317,2.041510996070688,18.96273042926941,2.594700411634072,19.39820093659479,9.020580090446376,14.45528750136475,1.6037741239267023,17.343474452381855,19.356701070250683,1.5719860006459196,4.458132264328185,8.469764930147822,11.798594690392289,6.983422235310011,7.762986843316511,18.44670108858228,6.562360972273358,14.356363376455633,17.689634134212483,15.29641421409696,14.983481465077663,11.8685503968468,1.077236012461098,14.828965594702632,19.27764288970556,1.8814455678947661,14.767189305362631,2.364034841489162,4.06251031285608,16.53005765699745,2.91753350397149,16.381207940448682,9.520225481072679,2.5411307571255115,8.211173082609324,11.946552045583454,3.2320188173795295,4.879852944797296,8.937000930561156,11.644026328948968,16.338160399048952,18.00375587022821,10.403266002402574,15.110442492604484,10.477403292957067,11.984605610441687,3.3006391775291988,19.132819875455283,14.693686920666833,17.64108682734603,6.968134958081604,4.3001154671986885,9.614662459095712,12.189916460590497,3.926711152136999,15.132593848418283,16.725184079609434,1.214195754428351,4.414932450652942,13.570306606585106,9.334789371657113,4.222271606314547,3.8747463645011004,11.67419236694415,8.083155128857488,13.917059291298814,2.5906602078173124,7.406339186762314,12.588075713763978,0.8153953055453211,3.6862031198753176,9.136970536761693,4.085189822511408,19.029019514654163,2.2036840315371675,6.38293776687576,5.66559775703968,5.217278171590296,3.1411922126500746,6.597603819544671,11.580490333380684,15.413460959966624,14.071412323124072,15.421361319474984,5.748653841860838,9.199923699764012,11.973612577268412,16.75104310670897,3.6264841361130484,15.287391083181996,17.555006148970854,17.167649144442162,13.6107632916148,15.67943155101451,15.411055813077525,14.66931012455861,2.972484525049759,10.948064264703934,18.060807364734885,2.012680428945468,7.027893251741939,16.780124541752418,5.020567085720731,1.8935777118365626,11.38765946726462,11.886399399279647,14.509261806075205,19.97922908312419,18.372897866046912,7.28235951155856,0.7687594328164815,13.122466132490093,8.1261661612116,9.489634307191288,7.476581384486627,3.069816349497496,18.524715342645077,4.530813318131961,10.806678843950937,3.4890422976925395,19.676939076941103,15.14756277447248,13.360097251687467,7.126655522426457,3.130363860493488,6.360407566907784,13.286588916335237,11.142705292678556,12.60269842648794,5.877689603301293,18.11054160748207,9.953230326660222,11.696769390092964,19.450755092226764,13.990202042020243,18.63921605177733,12.279694094717062,13.243640335007193,2.4864255686356573,0.002609103580502037,9.49098793259334,15.449050314813416,5.431570430877932,0.24022019100113035,18.047276631620115,11.876986036215227,13.732955257191936,18.065879826138396,0.5672219112849497,8.338167148747925,9.192070074812143,7.4336587613474725,6.124882861798633,6.566052633860147,7.844148293704767,5.633401801288422,12.586285430490687,6.295421559666963,18.618896947335458,18.553056685710022,3.8560175499093363,0.5650409468051576,1.9394541959341804,8.259853152967036,15.938044195818012,1.5365107071648376,11.14226966753764,14.033425719904479,17.582991296437317,13.26026951789216,3.6375500919776993,0.13606334241223372,18.347464157445508,10.716587441053278,3.8696589239906265,8.51266594261344,14.270552657440238,10.43706301986164,13.90443883185017,3.8584016220962347,19.101766985441706,0.9909067083645784,1.0865751191262607,12.937733205062901,13.805184983204928,15.259055255803124,13.856581576798185,8.052160264380447,5.125220596171682,9.578625096495887,19.936628260160198,6.010822077333748,18.107063156950844,6.551393575057158,14.272689055057285,4.268361515689687,2.7554825427087604,16.85251356542784,0.12688140773197354,19.382769797802037,4.753384954886064,18.78302144497857,10.791250472958133,9.16863076615375,9.864306292814447,17.348178183525754,11.538155527562388,12.85468777810924,2.615493068793171,11.315642869781733,15.203119523132962,14.07554436608394,0.024168819718957124]}
},{}],11:[function(require,module,exports){
module.exports={"expected":[3.2340341597593825,1.1870081170323539,2.2879268984064227,0.07755509809742832,1.0564729123336913,3.2244784341055905,6.4830743002477575,0.5580428483093093,0.8613935138522651,2.3773845162057285,2.8411296382124474,18.25929037031736,0.11091427030980926,0.7907994814527263,0.5253082632333242,1.0038573964310349,0.9059206944225305,2.3546115408504456,0.3326414339739724,1.3439578629097444,3.7374802383987182,0.2906924896452547,0.5652686738770035,0.12114579061125144,0.1208620684004023,0.4314838774325903,0.14852673786607204,3.0276791627442923,2.0970102939286073,0.08808345327058162,2.060169100131026,0.2933535250152384,0.927060124333884,0.04878761465979959,0.950671510341396,0.9843851404130273,1.8748459805713462,1.0614345714588265,2.7489689236318906,1.6081698771874697,6.800548383881355,2.204023331403398,2.3595915966766627,0.9747360147220256,1.104732360352609,2.2835603509512103,0.3781116041865407,0.7118881782232774,0.6171697022308805,3.984541396002521,4.080432534144606,0.8260334905374791,0.6132694486303543,0.11005524283154797,1.9162093516711658,0.1255439454306282,1.4491581784722898,1.6740171637260541,0.0948911896214898,1.3922748122643611,0.6027434909114217,0.2996597217464118,12.086388250526621,0.39904346815809494,0.39753024388442865,0.8271673281125382,0.6225816097821301,1.1827030058211234,0.2595983187626726,0.5459379328697559,1.2785217005633098,1.4128208400221671,0.7690329486434825,0.2800432230774274,0.3890806612455892,0.9874493613647668,0.63958530689832,0.10495998570828927,0.7985086265202319,0.19910709173865807,0.38545970348320574,1.1193548114019138,0.1599934123453383,0.41468101284165626,7.955686977594414,4.882715834178935,0.29927640485907064,1.0682689427832783,0.3635898866796005,1.4905629350794392,0.3525377103758027,0.9925860996887533,0.38336233986386015,0.5981349343972747,3.6129750905449747,3.545895788028059,0.7692045959175144,1.3868739427335706,19.058207620008005,0.7211863203511512,0.09883087948744274,1.8404094880010842,3.0834763914221126,0.6274552629357198,0.3525516295862375,0.05920839072141144,0.7442415529327671,0.6818817377635438,1.3291088676522584,1.6188370310301488,3.247179295637503,0.1095072998791128,1.1360990678152094,2.6854299113447317,0.15980300453043833,1.2374385995897688,0.9001414563166708,2.273134462703941,0.27279626833731263,1.3708739389050764,0.1574980327403461,0.3993430400365275,0.6915840372691292,0.7157672654651711,1.3674927132022583,5.621454088755439,0.241892679287485,0.2822748411905863,0.5872540727508172,1.1625491045331466,1.1048514503298401,0.23975668328476452,0.9589364286196077,0.8131981914845227,0.4017970329273602,0.821129860791279,0.7996764713212041,0.7923676702862748,0.6542446749672518,3.0761790579366646,0.6443883176483867,0.7179514598851802,0.072102012166591,0.6027159440332014,4.83660580337065,0.9803636174132424,0.4542665608826713,10.737198666724975,10.432520507435076,0.5213287340991458,1.274025814205486,1.181811256056155,0.34467678703329413,0.735683784088401,4.958759050154613,2.692929423506012,1.3378814226207696,0.5223663632687265,0.9437697781385365,1.4674637278582383,0.43068532654252556,0.42938351665444274,0.9965251172600221,1.492969851578027,1.3948760919210705,1.7971677457087119,3.0663509713417856,0.8603885911894723,14.81838872956108,0.7605997436701191,1.1020572736206997,0.5464368098378733,0.7845756443754565,0.9500426757251613,12.258800456281067,0.5597696930930496,0.28732635744338153,0.8337147388471875,1.10779241194658,0.5378677686643248,0.8157937642003392,1.2484288249177429,1.3258639285177112,14.194625546088208,0.09295075901781823,0.5245756146183523,0.03670051692979892,2.4812376297490806,0.5050450206966826,3.2384733517899247,0.9435886500504401,0.0775559021483158,0.17735391827650035,0.7526455486613953,1.8852145880333926,0.05099030776626958,2.3838449281830196,0.9315572319576642,0.8915693937242388,1.1074879958422414,1.009730941063045,1.1437454985071018,0.7879646529228616,79.0723914999924,1.086574268645881,1.1637627490729934,0.774505664644692,2.3807259693432004,128.43683039896536,1.7645509402056374,1.7562400264696192,0.6972663186279348,2.6873811507787444,15.634095465336749,5.269917832515355,2.771247966470126,0.8308990227572817,169.98071973300196,0.11431674780755245,0.39774741457184326,2.2526677625601677,1.882605799532587,1.383107592625513,0.31029406710330004,5.107376563522742,15.956362852350743,0.4302551755624295,0.3596317039429068,0.07485442964421753,0.8136841809786544,1.3708055162870758,1.5625069424853293,0.01677829037569023,0.25200195062433994,0.5375715010887607,0.2041623360144135,1.4415167559989102,1.2388359766599093,5.220482235974555,14.087108469983958,1.5685660625505793,1.2346009470787016,1.2314693361196496,1.9113075287930068,1.1876244239273446,0.5559858452004683,0.011515329012361065,1.0108821733400872,44.762876018602284,1.7914837529289869,0.9753695358456301,1.1890680702925662,2.0650590441841086,0.6927383315345202,1.7544364247286925,6.462408343613187,0.85024925145209,0.2500290756547978,0.7130977005934542,0.616790935142071,0.20377553853215347,1.0793345743841727,1.033805007357448,1.4963846816500699,0.792526239370814,6.972583183604585,3.722873457833192,0.524853459506774,0.24120238212837317,3.2614853645310293,1.3788397976052955,2.0841190250890977,0.7260953404863536,1.6520378484674922,5.107736119766285,1.04480743089939,1.3313093712271826,2.0348643041375287,2.661260859947306,0.6624745394118149,1.1347770915565634,8.071651141809246,0.39652070774319076,0.7944721954854361,1.8482038556192553,0.5135698096464307,0.2395174747360618,1.0041898844781025,234.71109005033657,0.12373557280300383,5.294767793463105,0.08984784274472223,1.0724023442094996,0.2627966977703398,0.3344060811258284,0.07742300343078544,1.7616396227476216,1.1657282968436073,2.214388298264348,0.7916744939005531,0.2097661815603275,1.0570960442233641,2.9995083251756096,0.7303694989946805,0.828359762083589,8.590335819827349,1.4575941187939823,2.1039097677923984,1.0198954687682036,4.044899996280014,0.07557052829357085,17.76584383132886,1.0988365268720521,0.19007622830548646,0.4706846055033106,1.6459682990221522,0.006743105739165359,28.430801269146613,0.705517950648612,0.12107877310509457,0.6408029003286198,2.4416133341263686,1.0544500250035482,4.45967969011898,0.26738302544103787,0.8911818316892441,0.03524529602057928,0.9654653027318383,0.22951633277140365,0.8400447779827793,1.6774920668410231,1.8171127392737256,0.14707996056354003,0.8821655952837967,1.2295206683141628,1.421186057117726,14.533959495429722,1.5865466219121973,1.1634584423999754,2.080760914491079,0.9909258522616515,0.16257340027972902,2.120024642602722,0.7288386857750586,2.3485269623160177,0.18895246599601093,1.0867026429749782,13.569860986569406,0.6764609913079453,15.78433827940184,0.6717975827290629,0.20373170484007333,0.3122724610561646,0.07244239986475409,0.4580944104171275,2.1868358340854535,0.4153145479562039,0.3510034690947963,1.7114946984772506,0.32864658588622603,2.255202858936952,1.961669568803432,1.36508517014426,85.81348443140347,1.0707499847559359,0.4671429773620331,0.1778840728853689,1.7701950600248035,0.24462382939525645,0.952540333404897,0.22922601468616463,0.7073296941842362,1.1185142580908687,3.3938767485976795,0.5024753436773031,4.455223912503985,7.631319661757083,1.1307113236827668,4.251926392668173,0.22769889563845025,2.3945849163285975,1.0879121466737107,9.913001540770486,0.9056165658892865,0.8066927204563018,0.1168337132664601,0.40980423889342804,0.920992657994363,0.19746075757870019,0.6533838180621828,0.694943334365243,0.13037568756866938,0.9692588241177441,0.7406395927200963,0.14895889249114164,0.25085694433241623,0.34964758418453695,0.8574609216297706,0.8452405444078039,0.963570377370892,0.25095661343722775,0.5317121967617554,4.219390541874131,0.29693358658200925,1.5855113430245726,59.00645496428857,0.634774321281973,0.28185871455532074,0.5457319146714474,0.5827585359326564,2.194067776445088,0.6684539759367852,3.898534677464493,8.01509422430375,0.3195336427980795,0.7335356754681065,0.8151344649239871,0.7084066402321421,0.6161597434034392,1.0172811085486833,2.0177615527537625,2.9630144003524617,0.9258970621738329,1.0426027859562932,1.7072820081014677,0.3316412354582663,1.0942534704168672,2.9543216935018926,0.8729615632299564,1.3286893013250523,0.48946643440842336,0.5450056967328235,0.035863105283259006,0.16887664774786323,0.8630165367330664,0.09475348244587901,0.8734174997969091,0.9781301857645402,0.18924519516683053,1.6077571130783181,1.4900926024316916,0.05857511265032839,0.656312824995824,0.4565626852345626,1.403975076853578,3.4392384111113845,2.9695561634471352,1.778342623890555,1.01519033925825,0.030302216791808688,0.8436461277081438,0.7640692113379379,5.1637768292178565,1.3431190088709704,6.407855897339077,3.6766609594036757,0.2348502902789972,4.678456477072514,1.3668448507075874,0.5477846371511246,0.3481456372942563,0.8655584292923002,0.634657740045684,3.1481949167822263,6.578948964729234,1.385913944640265,0.2156377222156574,0.5464609828432685,0.04595498824245284,0.3849819720721481,0.9586678947688694,2.931671986161146,2.8114744817519135,0.608096168451916,0.6550543635802369,2.871440848789385,1.1294087308771308,0.6158842858513657,2.417924821900648,2.564527346950395,0.5268457561680238,1.9647836026830856,0.6971051442552499,1.6227556111928563,4.042010483975359,6.77285587863962,0.8704695818086872,1.7567201163227197,0.4010178571346383,3.1490702808001605,0.873901227419963,0.8883292971414869,0.35912332524664375,0.04838219658620944,1.9933176705449032,3.3989772266058647,34.21289442969197,1.004586616659786,0.8254434692326758,0.19653647403803537,6.835182076299737,0.43881361896463134,0.1681790574789732,0.7943820311295121,0.8862870035474534,0.11557548869955463,2.7928709657095823,1.5162285769768156,0.1314339508272514,0.06902464409521238,10.962347895497427,0.10847516478281728,0.09978515740730418,9.479403471735779,1.5690110379461173,0.7926096204082178,17.89625727124717,1.5483850643852373,4.022587565078065,4.336862761300335,2.082703892843652,1.281233672160022,10.21429859192723,0.8324371655786896,0.20473235867667477,16.7690631398032,0.2810693584954673,0.14661668911324588,3.876722523989167,1.322964865061235,0.5847454243647215,2.1711911948569917,0.37756738204784673,1.038128109289738,0.8325151620160376,5.05161545843749,0.4753201918925894,1.66703010791554,2.494683887573565,12.783775395983184,0.004762810490142208,0.06958197400858948,1.4583265820925926,2.4495288777533344,2.1483542031341596,0.14026307660703552,0.8543941804429255,0.10213452043917003,1.5755795537728936,0.939634245908483,0.7470912974604943,0.8535992325409286,11.906134082733809,4.9556924251262995,18.778816770475068,0.47808106094290326,1.1095413587419316,0.09804047139921288,2.4208289305651918,5.613466256792279,0.6580676859225362,20.980925359703782,0.11089664366505463,0.4724117372466505,39.16385171172748,4.651731872767574,2.2603637492634294,7.232734537378142,1.002661326603109,0.5051619390761399,0.3490348265520254,0.20224761591887644,0.3308978974951889,2.444605430506043,3.5258370564699852,2.3029704780783344,0.9493119326529829,2.362654145754395,3.4942413461434696,1.2468137925095881,16.835543090512243,1.0511944811110914,1.0624685553495812,2.5359373092529944,1.3656680443802767,4.146529999021922,2.243940169641128,3.2760934140235665,3.9359274017050208,0.23180783172227265,2.3098413514608604,1.515822532304256,0.12944082083339076,0.19889279512963448,0.9349166873386772,0.42131374485773526,3.163567433515224,2.0438375789988106,0.6104588592030107,1.139031694437526,0.8452678106683981,0.032655035284668184,8.474205669012209,10.081327160632553,0.6709966532869801,3.286687619724003,0.610635306255275,0.4739251956364029,0.3692058410180094,1.1472262494564183,5.645503967352004,0.5765846226912851,0.19487535570541822,1.1473590281709103,1.7417756775149695,0.13924030492051365,1.1403851879210627,1.0168830171369092,0.3677889721998681,0.8305098020750098,0.057434872729154804,1.6621748898591533,0.5054807652618913,1.8119336188698687,0.04080894865443858,0.5161389652138715,1.6239253217229364,0.0521719079648475,4.002504849221183,0.2963899119635168,2.149674672253563,1.5866889191004023,2.7177179661324646,1.9666727784630333,0.588099376739657,0.9618892368367343,0.6952239908403016,1.204921961356507,2.0742147966944295,2.8908665858108504,2.06999280466562,1.1495156765054184,1.8138247981061626,0.17488831639564453,0.08318557010051598,0.4222469815511301,0.2914227115528183,6.984678686688596,0.5846031247778438,0.08406600744048694,2.374870256418146,0.21259783936834156,0.8995398594753212,1.561828522723306,0.2924133185250239,0.5335537077283068,1.5453048219758467,0.8166307677762759,2.553688219156026,0.2902031860387733,1.257335889103624,5.192275165011062,1.1540058223967553,0.15811515897207046,0.9583180457152868,5.87048713278638,0.37995508672729306,0.12892926650704037,0.11267918281322799,1.78904076761528,1.4842011207718862,0.7956550020646648,21.390421595091667,2.118797429944088,0.3390361147579166,2.99847620380364,3.5076237889997874,1.7891977689387986,1.3374568307827714,1.034628358285836,16.05364980774434,30.585864334651703,0.06215922001402288,5.310802644367093,0.46292620153507663,2.735029875338791,13.815052813418172,0.9673453970170968,0.25790591521409195,0.14724348023225056,0.8360786195657766,0.9017266989675536,0.6912453962555742,0.7835552550973292,0.4993359764726186,0.26555132137012566,0.5354639181920429,2.3754122526377826,1.629592517316345,1.250392544977709,4.385446899556419,0.9811604400820196,0.04383744870135435,0.39288796008804583,1.1571258718239688,0.6966812002176098,0.4901288527304028,0.8626214170330055,0.39370565461362356,0.40351904795704263,1.4775221596437924,3.2842210346350322,0.5391927732108407,0.6537906469720903,3.2299256955700075,1.3051696442501874,0.8050350029321697,0.6126200480869614,5.821912475144024,0.17187504854738037,0.32810362052443653,0.6643272611159704,1.822913125127832,1.1632591211327432,0.4501239210749287,1.6927944418107452,2.4605556945783116,0.4850911043009934,1.8810316025945437,0.023807289531975178,0.09266908419701841,1.279841649153044,2.7776641461393643,0.35609719913324134,0.7472356058507813,1.7626157055545169,2.5741912139587346,1.3619875069552987,0.48956182131467807,4.540034536413881,0.27670873902135773,0.8854675690087989,0.26137260964023373,0.9168766540160319,1.294568137035881,0.9051280543228395,1.7458242946748674,1.3682601732493325,0.6469873343070043,3.078103837341136,1.7737387225385766,0.9719825143818697,0.8195182636191932,4.067686449693593,0.4502418381493675,0.7740592086360714,1.4775458839053899,1.1185651587357623,3.721864876203319,0.3494224000157397,8.444080286755803,0.6363575905974436,1.420424855768576,1.493410360581728,1.596703183553703,5.777842822379655,0.32652872557159834,0.6118865314635965,0.42383273585796144,0.3132588375308811,1.1154863859216342,3.100278512041876,0.12358712083296665,1.1212884512033658,3.9263801564918492,1.0405754790759965,0.3621068357067084,1.0456591378392643,0.5295069882044955,0.8027434958423459,1.6978388302809049,0.26578008124722147,0.35029684918980775,0.5254754169249968,3.3971386331243014,0.6746413331447239,72.34329534301165,0.8564860722589103,1.0125353529135803,1.0429806999703588,0.2608132060706962,0.7140163588066428,1.0153662477605025,6.296148125038191,0.8935637626603109,0.3484867781968151,0.9523493606081956,0.3487557920040507,0.23266675064080009,0.34414774112264784,1.3709952464327602,1.2805141495118317,0.28279618475490687,3.7689704716817123,0.1567909283547786,0.8320220554977235,1.227580399446167,0.13147171630981047,0.6971537558256237,2.467337105830567,1.8402001028265074,3.21283429263846,0.025461368348965303,3.711577215523129,0.6234317938481119,28.079757989139885,25.547602688048826,7.931898151493612,7.278301346823091,3.4369917165919004,0.9699564056649084,0.01113240656786613,5.153059046708389,0.38736249385406263,0.8162973920379595,0.8937204908219689,1.1417533929026815,1.9878724156727472,10.69180959672767,8.833303655555081,0.7537545748842513,9.62491254110174,0.3293787698314149,0.8946787427769518,0.7807968974692795,2.989196031730236,2.062462060054924,1.7407405981184363,1.2272353425491294,0.6378616725203318,1.3151841891164961,0.8688734474700595,1.055295553304961,0.46508780031971897,0.741921051423443,0.8667951251987402,0.972556523094506,0.7562369051392872,0.8356102081981592,0.34123252582982433,0.5529530353231398,0.004122561624102574,0.7701992058849235,1.0508789639665723,0.8766317931612149,0.015179359535387066,3.4054297516732865,1.3600485174532966,1.1707464273093788,0.005380238459173129,1.9565698358275192,1.0431937539980956,1.0587931335176874,1.6163653060082375,0.577568487607366,0.6783454334886141,0.981368641876911,0.8268955926869921,0.3812054059103026,1.0456711075023366,1.1372373716162103,1.7110257070428472,0.14572676379764865,1.7811430178238354,23.10769899385219,5.2559859547783425,1.3894823081554895,0.7515455337767107,21.371975444002658,0.3046844109448275,14.685631811679958,0.43877765757991816,2.7437346734735613,23.446632890369045,0.1770201820202718,1.2879411952392643,5.955374775159466,2.480925311731213,0.32912610819920896,0.7660500624965989,10.586498763161758,0.6062016711353345,0.5387785615989583,0.8761816625104837,1.0256846725873632,1.16831080446263,1.5922432507207052,0.7709475598547365,0.4828421700911534,0.6643555262929441,2.1796331674255027,31.30975599471648,0.4122739164825669,0.5917529204003953,1.3361114557725364,2.8574580220474664,3.271663350164932,2.0241902403647485,1.6552844444544996,0.539257592292175,0.5733171856873244,4.777344861547501,2.6081177797462067,0.212259724987136,23.45119872013714,2.553240233521483,0.3750713328693375,4.46255208270632,1.1775282107047855,0.04811225569223822,2.0158582184053615,1.1509396819116888,1.587356046046637,2.71701746990793,2.527210722854367,3.9137694182673886,0.5366961394183521,5.379857821222289,0.706169684553478,0.1906973098494649,1.2747854310928937,0.7750246164824418,2.3185564652744257,0.5108754696009431,0.7008726007687711,0.15193024829497756,0.4885452731861129,3.3048971298516348,0.16701066500187203,0.9859038367784838,0.288076449809302,1.0387195737394006,0.3369879408407834,0.06308739672182061,2.532396054565134,0.6609627364271431,1.1494157071550546,0.9176083498505199,2.030403997962182,160.27108045482132,1.383762565134626,0.29242682702742717,0.34864717557611635,1.731918691730054,0.8705958689977428,0.505437133859528,0.8260863575205483,0.3570701477027871,1.2054244330093558,3.716390708102392,4.968778547984279,1.265649651902036,1.138981776292825,0.4347467550147608,2.4228348845896575,1.6795842850388938,1.0470087344518793,1.3728591294949521,0.7215341086737083,0.9567503898140949,0.6226533603951958,2.46395394533577,0.6605288009342994,1.9099322383189377,0.27411920362651965,0.8091320287352068,1.2797523275589557,0.4036142932249132,0.5915446757496813,0.40594467514542776,0.8924513407775341,2.6439662410948745,0.04019305600776136,1.425287199488034,4.403977184612105,0.2433323064677843,0.753244423673049,0.33569554631284304,1.091057570132225,1.5414591644088618,1.5768969471098417,2.3130171128804866,0.7998140100849828,1.106910083672638,0.9193422060772299,0.41928972264025244,1.0892331643239466,0.6428643403563498,1.1710408068082405,0.06402898620634616],"x":[3.1272136031404174,0.5258514078987986,1.960940186910407,-4.024616210977806,0.22880507561960517,2.722639409865347,3.866005223187332,-2.010405833439462,-0.6142782834082734,2.196786457164973,1.4039837307786394,3.8175539463631614,-4.2469918145877985,-0.6517771437647983,-0.5158258401711646,0.0143587845737434,-0.22424024552840205,0.5556982524868814,-2.3611401138944963,1.170017822384331,1.0063767012040825,-2.101383686739277,-0.5236566424652345,-0.4134502405906382,-3.339773577596986,-1.5309738688048669,-2.4220427735476564,2.5305453507028686,1.6259831746057385,-2.813450330797931,2.485449585569893,-1.9756044716507302,-0.3071220339262153,-0.4283356459615373,-0.18799061624297142,-0.07720134870625728,1.8510081539641288,0.2529375152155069,0.9354919981811127,1.0585319777967626,2.4908756978614903,1.3484707519401664,1.734381021785136,-0.09612587505271941,0.2726748092588216,2.1216759198619504,-2.1155557718254046,-0.9350568173064797,-1.8763169005405853,2.4230741351186325,2.027403231796602,-0.4811843763443102,-1.732278171460556,-1.9148913997299066,0.9739443840422071,-2.9889132596458277,1.0194480294283403,1.8939832913043562,-4.222541137604922,1.1343609306985796,-1.5341192814130533,-2.6324781774692765,3.145559149079545,-2.199137920278993,-2.536377666249724,-0.6551430423852,-1.4580369573614669,0.6575124102971053,-3.4687959626178557,-0.8988961572514464,0.16060209958268845,1.333293050989317,-1.0687402282457157,-1.030973485232769,-2.7258113177518806,-0.04976761238332461,-1.6352388812332261,-3.295253043492111,-0.8423026937311278,-3.7516104452127763,-0.012008977978588131,0.23302008594570656,-2.5229253925048734,-2.7092361671177976,3.667227011948592,2.871043429459597,-2.6495845840288226,0.28047497827942625,-3.1045884946065083,0.602570077086857,-1.4315802945633174,-0.03700855427769767,-2.411900250149027,-1.3937761543736227,2.0208641354817214,3.3916294153786994,-0.8449437482370223,0.8169006513899824,1.4609511689636556,-1.1399952827135862,-3.322488407171793,1.7915613848191416,3.1092983268639562,-0.7148934388029671,-2.0613985629700435,-2.132998435307165,-0.6914244193101835,-0.3478044386018053,0.5818914903362407,1.516711041054012,3.0695563578942866,-1.249052409887198,0.486685416761786,2.5127079215090227,-3.402753586658835,0.5762114342651623,-0.41280879149223315,2.776813373494699,-2.9045182592380057,0.9073356360982388,-1.6785721555267263,-2.6156316738242484,-1.0490849295458986,-1.3406095182050644,1.2628964956257134,0.7891708772827921,-2.6902448939014834,-1.2036998675652921,-1.1030237199462725,0.48220364910505165,0.1562561163441678,-1.4850872073154697,-0.1845585127404954,-0.3930823262251213,-2.6289158649282234,-0.6523756072482243,-0.9472647921306518,-0.7058500484252694,-0.914873297743731,3.0248564536920908,-0.7146535001490084,-0.9536526412231461,-3.5705770423375602,-1.0356151942283245,3.5442142610928515,-0.08963523981144839,-1.936619954678096,0.9595417902750192,3.9748464771672105,-1.6886977347391463,1.0695660723065257,0.5014559107931729,-0.937265472262161,-0.5677613847631691,1.1892433008436187,2.4997062663914154,1.036767360973906,-2.3230267065244625,-0.05317123917618849,1.4875485446727121,-1.1341195323327724,-2.6060644089405627,-0.004211917607994664,1.0923190513984848,0.26559216629320925,2.1276078294349645,1.5046587513572094,-0.6164353340592572,4.259833348749832,-0.7590801252932069,0.44710533916841655,-2.2614546306174326,-0.39834458840044995,-0.16821607183058562,4.541825274414973,-2.1573226147318687,-2.684405482449036,-0.3574398510089596,0.3001061493888857,-1.9366919982185817,-0.518134321159085,0.9535209156329052,0.741165217852179,2.9434180662352754,-1.5033183157204555,-1.9200352568997467,-3.1749099510989596,1.8575478098635998,-1.8266743422860823,2.241416826965655,-0.24375088004186907,-0.9117227289965613,-2.6775999133141823,-0.42909444896645055,2.0710506801995745,-4.164012378831641,1.235143000793336,-0.2692727438964826,-0.34787716667723423,0.308998849624583,0.035001795143423386,0.6019198965525918,-0.48762756317410005,3.3897534903008073,0.25629905306113,0.3501957155065285,-0.9756923167718137,0.8601643143755899,3.408101470028579,0.9845849114285243,1.6302039951384262,-0.8859636827273287,2.0798993996027137,2.1796738134811133,3.279682050018368,2.739945513314046,-0.3649219393133931,3.1095353598175035,-4.144546076250089,-2.1713234988762142,1.6018740151454547,1.9067846597901856,1.1496479184919552,-2.110588688546996,3.3167210782799117,3.857248468934374,-2.451654547031592,-1.6029562343770767,-3.1649313734633004,-0.522066538160316,0.4963650046489809,0.9978148605247783,-4.138152591660057,-3.4105482520224717,-0.5656216806064585,-1.8682374096812249,1.4437670893302919,0.8754928221904326,2.9538145721729867,3.6083776552042246,1.5202126373748097,0.2933917147213394,0.788485015865831,1.9640767413849325,0.1706950618331704,-2.2077200706053914,-3.8215219567555287,0.03140940308203133,3.1054217001136353,2.127046622626294,-0.0763979036657565,0.5585521075611024,2.5660081828196626,-0.89969430598111,1.6951166281493193,2.709373043696106,-0.5519853513586375,-2.5514081842817546,-1.184644488815013,-1.6198785627207668,-3.2998352350289357,0.2211134188960071,0.12013456744118578,1.2129086303897405,-0.582566210576263,1.6292775717424002,2.8395244515450857,-1.7186473389120116,-3.2845347954293054,3.272990706446283,0.707425141282936,1.9619824141056605,-1.3304366648480137,1.5846954271785219,3.3403058914290256,0.1638825560097752,0.6458901426348809,1.8529607022719,1.4206004291119136,-1.624657722477667,0.36329493565340787,4.075481853861611,-2.7160915910045755,-0.7956669164238064,1.003784404008733,-1.365035708997331,-3.4897960224892444,0.016062215353445097,4.055597695374067,-0.40465762598993593,1.9679769014122297,-1.9145963637433763,0.2799780994441665,-1.9353346701917573,-2.0842318303404985,-3.8795243177264402,1.9450478835579732,0.1476689258090791,1.9245172789467102,-0.8174220912968657,-3.6012055236542837,0.1470489406424047,3.0934384598543514,-0.7921529822959439,-0.8189615827272245,3.5725881880791768,0.6900824753627053,1.9269783585332634,0.08904791000072976,3.3152211853959948,-2.303398997910171,1.1329150280299027,0.3749492729362003,-3.4847330951096716,-1.9149363034790603,1.461562545489683,-4.2130462997224765,4.239493990097484,-1.0884517767117488,-4.154095164014198,-0.572176050387091,1.2889389995333345,0.17096287055549997,1.8835664324695214,-3.3440665008704173,-0.3473809186010124,-2.7543548327221234,-0.08598933467564684,-3.591065214604604,-0.1555927479806274,1.8400487747836172,0.5378203029928696,-2.3760728783421836,-0.22247867907370433,0.4304121717312228,0.1776908181335668,4.170827589946641,1.8298459617904506,0.6098774471171122,1.1888932908885317,-0.017437997269627026,-2.0180678268574654,2.340424523687077,-1.341734787838095,1.7584322480663117,-1.9182312432900794,0.24824925783308682,4.202193033740251,-1.384439126584975,2.175482395502162,-1.5372703161364143,-3.320696473763796,-1.1558091783072622,-1.4741763932608343,-2.0693558691704173,1.8233245930351225,-1.1398956509236946,-2.255092657759105,0.8129127365111688,-2.824443408525892,2.600601717951976,1.0575818808470894,0.8395818869607288,4.93316387645153,0.23602803676284756,-2.456666957398183,-3.4610690985466546,2.0556633735523473,-2.018977356077099,-0.22272316318863172,-3.8258439827401305,-1.455674874597384,0.47733905901360707,1.871072212505942,-2.3454817337821536,1.273079037062308,3.016898699400424,0.11874615883165629,1.2842340594628876,-3.511178917810744,2.426195470564312,0.38174496928652424,2.2375758476965144,-0.2037017501787297,-0.4157225989482669,-1.8366116067076477,-1.7341372219016782,-0.3483006902245682,-1.3967128071148371,-1.577873990843357,-1.4389719032157728,-2.1372059548644806,-0.11735077419313011,-1.0497001060527626,-2.324701677107023,-3.7114286771708453,-2.026728070795439,-0.5357187575673636,-0.2238884557250942,-0.17258083111041334,-2.286555816790392,-1.8128794553361418,2.157784347902728,-2.744150513893178,0.7587470389176776,2.839217004070834,-0.1682506224080249,-0.7164573757291282,-1.3147192777125005,-1.2176700393563233,1.5354384792219753,-1.0772224945796247,2.6841655698600975,1.7572545005849496,-3.0745482790040204,-1.3065205561571185,-0.6426339554098792,-0.8966545559788321,-0.8289841379615013,0.08428827506530112,2.2952077926782115,1.6365058887082518,-0.3235501735796733,0.12994489021046451,2.030183883845944,-3.341153890230609,0.3517842048797779,2.10463346417003,-0.26348729374172786,0.46454492077552034,-1.4317721276642028,-2.175906623340163,-3.111902995416529,-1.0157367740902912,-0.4303547463107269,-1.5911754095927821,-0.4567565719105273,-0.09222590017619048,-3.1351677429536142,0.6681522625925829,0.7087403985611072,-3.716983149078148,-0.9445039028665636,-1.3100183290806056,0.46050172365819875,1.0708510616625855,1.7466444715262908,1.8834374058504006,0.03231651591678153,-3.099287990938542,-0.5641059088871634,-1.1521068304367983,2.541999451216549,0.8415621151118344,4.204101553430671,3.0117707946488492,-1.8550710432911277,2.2444283575896566,0.48662867989031633,-1.488035652549913,-3.256376621500215,-0.26633476225501385,-1.6647089367898737,2.7779575328647232,2.2443974030333003,1.2205121937473828,-2.5465525050045623,-2.221603418684058,-3.936441319524325,-1.4606795093237201,-0.18774011594041795,0.7052335334161497,0.7869012818439547,-1.0009012141195204,-1.3341136724953095,2.140768991615467,0.2827010098213387,-1.0684373653070298,1.580751574547008,2.9516571424031595,-1.9994468417008768,1.385648770855301,-0.8157332799576744,1.424518547062903,2.9322142627188605,4.21533755505239,-0.6059802450627618,0.2700954333854855,-2.8479013340463366,3.0528226297313266,-0.6187049405984659,-0.49559923793647265,-2.385293458645308,-4.5298803313083535,0.5772068839896616,0.996542349181393,4.025366832190199,0.005217109288300215,-0.6316452685414506,-1.969492644795179,3.320843031995754,-2.7416000799460116,-3.420525547308337,-0.9569558877087143,-0.3366401422229437,-4.393317352104809,1.9543487587725596,1.336904173636769,-4.2999588936950275,-3.8673037760910125,3.0314348343077526,-3.0798674545883653,-2.679033064471218,3.7972401979387103,1.7152161972020723,-0.8837588745247968,1.7151940971960578,1.3768193900154326,1.3897434856345325,3.474409466165372,1.239392938958578,0.40405303926317804,1.9226418026923522,-0.5848008356672785,-2.0341239349635685,2.531270501850924,-3.0692404404466744,-2.4907592852256757,1.0542934397953108,1.0562635828653666,-1.9715550903087884,1.5757005975986846,-1.6812295512254902,0.17304296193046032,-0.8303390301912854,3.258505145242675,-0.9137976429984507,0.6474170816070857,2.950395361597442,2.993158166223303,-4.609690514513993,-3.718013494224894,1.530723113751832,1.343374385218633,2.036603674849826,-2.151077493952804,-0.6525769390996352,-1.631296920687041,1.224751858798487,-0.08647104433044617,-1.262028240161242,-0.6529283017577572,4.148912804355374,1.3387991856225345,2.554633954345813,-1.71222023618575,0.410916409859996,-2.2765441281276977,1.7083706582856364,2.4575957400851367,-1.5995985879761294,4.552081892130049,-3.049074516710083,-2.4112422623070415,4.249105982363278,1.4544620926905616,2.216730667033311,3.176740307945126,0.012148138994625413,-2.0696438119411975,-1.8169133769879466,-3.0148338775305437,-1.534934119285437,2.322734265755197,3.1758969127800394,2.7988973532686234,-0.0723738777634686,2.30124500233143,1.2504165832132508,0.805157872007086,4.678153621003543,0.2287986566141189,0.15836604056442694,1.1819865656954498,1.0789936521491352,2.90958928898441,0.6224119110740689,2.9053222231025053,1.8778497861301469,-3.4389354821324924,2.07689444229894,0.7982783408755312,-4.178113846360098,-3.5357039897576277,-0.26418714514016717,-2.482244364494722,1.9439604016916534,1.796432932758685,-1.7814092410964792,0.4070498224146468,-0.6466457741741864,-4.117889668347239,2.5008408311736354,3.7845185619927717,-0.5390201122051608,2.520016888883166,-1.428158327420058,-2.0521759804831676,-1.7469938437822574,0.4052427810155592,1.2007364992343639,-1.1864128624941117,-2.8037903095950627,0.5618734500710825,1.7077461093867443,-3.4403604979792366,0.15965114647564782,0.07755196444290036,-2.417375354353637,-0.7190657770452962,-3.967795914797927,1.27252209453135,-0.992239927075468,2.0789087142148275,-2.0703090133838655,-1.7366056999041593,1.2430414814162982,-4.646400536398143,0.7798869051988877,-3.3964091544497474,0.3271499769990782,1.4562925041229833,3.1417319291027916,1.4419715444242465,-1.863862390510639,-0.13988938217212077,-1.3964406818347852,0.11998494613020494,0.7616195011617977,1.2134627180471536,2.4453592787185765,0.4772827959318868,1.2038156118783683,-3.2658246804909665,-3.7521505355124627,-2.1485193652923265,-2.690522863205036,2.451101481806538,-1.0301827827162167,-3.8402720541601063,1.0590383277182136,-2.383399525027098,-0.23866348144356264,0.240757572381477,-1.3513510952635754,-1.9563958335214027,1.4658273536233786,-0.5852991066077706,0.985647716099789,-2.0735777135757214,0.29949047009540486,1.6910693874024096,0.40385268172501787,-1.0922693756769297,-0.12045732944004417,4.092522525863109,-2.94335205971539,-4.083837945874391,-3.1382642967519327,0.6283738681827922,0.6555663110751997,-0.40155514539754633,1.0050534510375397,1.9639320388447166,-2.9010970260048627,1.6981811165823546,2.7278879722027893,1.6821365043303915,0.7275522116266306,0.06598098896966498,1.9578732982099365,2.2539323147123644,-3.475316992189277,3.5875992810369404,-0.6103819199975979,2.753924445115321,3.784767423666732,-0.09702331982323065,-1.9467437778374175,-2.4908719270830373,-0.005652435583467508,-0.4252434096997071,-1.5237548166918407,-0.9909208160394254,-1.5738161322047195,-2.724307872608728,-1.78148844942291,2.8378377236094483,1.716682450418931,0.9704720555562911,0.411428391739308,-0.08396116162143752,-3.45871480258734,-2.146648322672644,0.6576806137448958,-0.41569059548409504,-1.3247011699704148,-0.5391349500106424,-1.4138988322540877,-0.7130544074845468,0.36308571373933285,3.050142857466554,-1.9180465490122316,-0.9568620648225648,3.300423322398962,0.48174489905059437,-0.8753036087089612,-1.1703948453375113,2.9253377094015662,-2.226070092514875,-2.2687432857708334,-1.580211599560803,1.923266732443258,0.3405563756392773,-2.5757786679476515,1.2767755371776144,0.4812623260161508,-1.9947999766584121,0.6314079829204455,-3.416591877359366,-3.7652096665550285,1.0562531997823585,2.2003443048038926,-1.3489826607349353,-0.7423608271746676,0.9240522716069866,3.0538276870955636,0.4704599153435285,-1.0523912805762947,3.2842527313859238,-3.4731986425170662,-0.4060073580618928,-2.8233379968243875,-0.3394562712555236,1.0782464130831904,-0.3837609917753113,0.8677087843700548,0.9742358502806323,-1.3339642711172353,1.7717974070108966,1.5036525510799605,-0.10169645945905526,-0.34688303947600585,3.193801395377646,-0.5458861849862218,-0.4054876121529505,0.6293677353450022,0.4344434354433431,2.5962164496090203,-1.430974694803444,3.524071798529641,-1.5374706164019445,0.6289582943688643,1.3356505379534074,0.9018459919129063,3.4062218512929086,-2.694072510816218,-0.43349378400279415,-2.2939859175438526,-2.637351778144643,0.32391481835074876,1.2330529283594671,-2.538576734271933,0.45949476862447414,0.9730503218792663,0.13230161004398777,-1.6077798233162413,0.1656534113331256,-2.033751022452339,-0.6918633904452496,1.8193783629330893,-1.7896294519027212,-2.6958659905830067,-2.303985858403742,2.324230766923839,-1.4991237813707476,4.38772608524096,-0.5709207290855214,0.05248173316962479,0.10835989501320897,-2.4218310664787555,-0.4244192493961174,0.024500442450265947,3.4815975969331765,-0.2048847649800556,-3.034817791481932,-0.18515727051133668,-3.2340218204240965,-3.2367372711223426,-0.4888235721104228,0.8620907488313403,0.8598420688446509,-1.9115567202802064,1.533381177669141,-4.0046873618398875,-0.6970526783247069,0.6493024800244669,-1.485111948924035,-0.8662738641761494,1.4405100306890628,1.5130211642140021,2.9201956513353213,-3.3454223850692433,2.7195721909072565,-1.538260612708521,4.542674229415098,2.4928127605635875,2.5371049202829186,2.227963335844924,3.420868969015321,-0.09608677305621649,-3.0097775157853355,1.5482582179183468,-2.6652328157580687,-0.8504795739672018,-0.40564432053750954,0.3888585112527285,0.5026162806556989,4.0781233245336415,4.2621744236302845,-1.097897828063001,4.385714887764898,-2.461453319991726,-0.24715219834698265,-0.8470524004709024,3.205583080364066,1.960309081331756,1.3495013831645044,0.42539984820009447,-1.5499519548108607,0.7675218769914074,-0.5482901788968384,0.17533828113873584,-1.5901599183554185,-0.2967147205859433,-0.540114246885719,-0.1348261490025644,-0.368317794189138,-0.7891716374478834,-2.0772646730549615,-1.6077109944410795,-1.5267627515969195,-0.6327358575843842,0.13523947268736647,-0.413280348887044,-2.894754168982818,3.229233845276956,0.3909846617168633,0.5423732434242035,-4.812372265093968,1.7900215724476043,0.16215753187289828,0.07478962860920313,0.9778780708377157,-1.742552225065504,-1.4066719259956577,-0.0636117371841678,-0.7985061200060941,-1.527052386265776,0.15132102728834163,0.422621539470168,1.4902772192154456,-3.3237407848826717,0.9742971955944701,4.651527145598953,0.5521354296544756,1.1912943554577358,-0.9886972190576828,0.8771073393787221,-3.117475896168866,1.2560295662738452,-2.4877734312162127,2.902150333550507,2.7105247130617798,-1.1207645215223283,0.8751919903937955,3.704746985866989,1.3694957359559046,-3.050770296555952,-1.0002156783685399,1.6369712596081165,-1.2978132769831285,-1.4204299100768158,-0.5692448794656624,0.09954181224045788,0.5818807850597962,1.4755382566458208,-0.47494753370949105,-2.104119335975432,-1.1884411659792926,1.5314378579316181,2.9633802661953057,-1.788213265455355,-1.1190917265016798,1.1236793773831666,1.777217926374006,3.1242833616971533,2.359237516764524,1.902304979979407,-2.1943604936500813,-0.7651213628865039,3.1936156876729127,1.1628430651406219,-3.9044644759559595,1.2010941768820393,2.775404176329224,-2.5536072631968523,1.8611476961298234,0.596525592897164,-2.2013646980415604,2.428085127082186,0.5795761919605482,1.3113396182004928,2.441538461776297,1.1475388376187157,2.895195350918718,-1.8961826086951983,1.8320571952039968,-1.2895539851326818,-3.25912813828808,0.5743703041673585,-1.0053906530122303,2.1760442003653626,-0.6678493975118915,-0.8108054387563124,-0.15069875797124932,-1.311436470728291,2.5812641419493554,-0.432059819548678,-0.011201043602915295,-2.9123357164441,0.1274168003613494,-2.3529419340869815,-0.33112694188352276,1.4400244480721804,-0.8969857193026198,0.4539309023168192,-0.3413954257617222,1.1650850168500413,3.8845799621623254,1.3303041038088317,-1.5473777693356716,-2.4590043209156267,0.7802841796273785,-0.2831323742252201,-2.266856276920549,-0.6206709822817391,-2.7557403922595323,0.10447889432205648,2.124586885868144,2.119059643816339,0.8488761867260974,0.4883866960303651,-2.38269678038475,2.0037131361356164,1.1673656884702845,0.17906493067997298,1.0492312231872214,-1.3371423535769678,-0.19671994174316332,-1.6241413356677423,0.6303924339807188,-1.3643886957168245,1.9647479074093477,-2.3180245855720383,-0.8880182578015012,0.6797135673073593,-1.2845454898518236,-1.4803966560058166,-2.6118639343001444,-0.44549409249288097,0.7217820839207723,-3.1843888461797887,1.2802274686414528,2.6911205630536106,-1.3681773391546415,-0.48116229987054115,-3.243203761267763,0.3526862055395399,1.4826190353836517,0.2815535518865553,1.725128652812432,-0.8070392367647043,0.4480235170621416,-0.2807389820291357,-1.7602723567126932,0.32479575679252726,-1.6944013004289982,0.45725000200498167,-3.819511445709601],"lambda":[4.527019237033336,3.337768966577933,3.4834956901278002,0.3383719769095228,4.2803948761884945,3.9465844785708812,4.571085076475595,2.5384646300177502,3.8175365650941284,3.7916834748956827,2.1665502017316394,4.038742295620476,0.5298161722727013,2.4637846545082507,0.5708285087852139,3.7367619211088465,2.159283358860363,0.965925270143918,1.1768981073792073,4.571649093396583,1.3740055472821677,0.8612011668855124,0.6808957120551729,0.056992110568147014,0.45914517855342174,1.161955685929682,0.42248902945650424,3.7785462165193273,3.1081781764254357,0.2717555917048997,4.829839348733823,0.8201421167594547,3.90349707011604,0.021969304397517764,3.6230041566363456,4.866893619055408,3.966818473804964,4.370122826502754,1.4703739995367915,2.7990522131823568,2.9202964238023634,2.468441367765694,3.01004426214687,3.708732067788292,2.87621404336746,3.7746374797057367,1.2862696779937033,2.3104081259235087,3.0248544839462568,3.234948997489141,2.6855586074862647,2.2847754502393003,2.7470115182872954,0.23680552786652043,2.0369594932699533,0.4291124307563343,3.289134029348819,4.703975963945171,0.44268926252684193,4.026111548462213,2.327665853166032,1.1263777090346194,3.4292907917026625,1.4602580655483566,1.6735891254495638,3.1354773028918173,2.405147760584565,4.256316969324704,1.2162230622187076,1.0807806806148734,0.737225390543037,4.563006577364885,3.558500852110905,0.40102009865934374,1.7360073624514238,3.9155774054879133,2.901864939814085,0.3864293292225962,3.3380385247761932,0.9326743156014328,0.007532422392803051,2.1853509824441963,0.480533663154441,1.9194128713677416,4.194454160576963,3.610485498381112,1.1316275835105605,4.388858188047329,1.7736942819016477,1.830893772168467,0.7794832955559483,4.954770768888581,1.4994733263797455,2.074492858468311,2.7942600024359066,4.723824327412278,2.8160639377524346,2.928442839054349,1.5418535043285986,2.9487398329713765,0.36437605760487823,3.9233333488415534,4.601659046507941,1.2040531135935495,1.122482433830787,0.13423951013197044,2.012003081281514,0.7455136128569428,2.3499735675140467,3.96761647334402,4.435516058507977,0.15360076146124224,4.062649782826294,4.003548866359848,0.6471937530803828,3.0029922325881975,3.721126836502997,4.957897504700428,1.0895732625382648,3.3538155337608986,0.3137937032575544,1.738986432962214,2.3524411142320254,3.3759813431504595,4.699417684361904,0.9599333390808962,0.8583884201430625,0.4734043174991265,1.5693799238584438,3.4487142951647565,1.6465179663483365,0.46834950782995155,4.309899873035016,1.7111924093835151,1.7657729106775888,2.994826827625361,3.7814098592105894,2.6936689445873596,1.731140317974491,4.481790739840914,1.2949922331494557,2.4275123200807536,0.2774505309031816,1.5711221733414216,4.468003266984226,4.475117937889243,1.612035516774033,1.0580857168310287,4.396244604426418,1.8391884264680347,4.972724157641074,3.2595684813278125,0.49296842410643804,1.580277027503817,1.489651404943102,3.976262956637008,4.105202887651411,2.5405895212234277,0.892427718394857,4.669717461795244,0.8579589880489558,1.9610388644543053,1.207891604487108,3.308111858812375,0.9381883850237593,4.796566578566795,2.232830669983482,3.7989297088925444,4.568106146115632,2.411677237001487,4.828031100815778,2.7245201567304402,1.450771252032711,3.1989793148788803,4.9452275100306835,2.7431183155829366,1.0822631890891754,1.7921183752037662,3.0842181658971777,2.2540825613075266,2.294660364698337,4.791726550380101,3.0156275102071173,3.1664951104419528,0.15405401622991866,2.1185359984607355,0.12096013592732602,3.1115989982460244,1.863912516456605,3.2427317745719675,4.077203684240295,0.07665448661998142,0.5772626245397972,1.3056406513898433,4.410653651271996,0.22373245971748057,2.12768737165364,3.6650033176725327,2.860415940091081,3.1837277642663286,3.6319607035010524,4.7893198694488115,1.8121190116113817,3.4331715722267484,3.216752049891891,2.4886290129986035,3.351211573006303,1.483144060881526,3.4348449276252477,2.2723799550965174,3.7858740708798044,2.0405811229643223,3.312519189531514,2.328618708547845,4.047772251905543,4.286846661646435,1.7930900678532113,3.1279370766804138,0.5349440981328546,1.4340134501259472,2.8806440633756325,4.067188161330721,4.1504966111873625,0.9495396761355035,4.124224609301495,4.115148635372774,1.85142016619949,0.900222396181114,0.2560776816264465,2.279985058438169,1.8349777891057728,2.771686052435982,0.07061594055761566,1.1490201250196774,0.6575332113134413,0.4792732626900953,4.713783616933732,4.541158415934259,3.653690654340862,3.8840976634459423,4.193978691147272,1.543990735632006,4.194919013059536,4.119306100662014,1.080465006812562,2.764463916641946,0.044518730488792846,2.917726510927271,3.176381883324483,4.81446328121832,3.025366772263113,3.512790264732708,4.975271966674351,2.028410297741007,3.941981403745103,3.2053764314442934,3.1340419754566238,0.8506012822977438,2.944442281369253,2.6072619495249985,0.8445177643070323,3.008213754561504,3.673885234344004,3.6563938450378206,2.2253368650202354,1.9020703519610083,3.882365588130523,1.8984416903545576,1.0440697205445204,4.720265474516697,2.574771565166273,3.7717305770847362,3.5268617367577804,4.015068803360729,4.153480300407145,3.821368663118988,2.5953977591640456,3.6434956495722473,2.2757342996329912,3.188779816860773,3.0588193119228,4.651794481865333,1.7846288576578928,3.075667759208487,2.187207937583562,1.4411957627892658,1.0991273341362773,3.8496321950008583,4.0729507345238165,0.05714090585776099,2.426203514829516,0.1890039502054197,4.146953713300487,0.6899040724161054,1.0471546971474666,0.32557111837615116,4.4988119282136285,1.0386991760531261,3.509279979392117,3.1063513659324125,0.9559336921349282,2.7225152911156147,4.6405380247349655,2.1457675398348797,3.952422986933298,4.0432640939787445,2.198149224956124,3.672572441269608,4.564836394212973,4.4039995326147,0.18829892865881326,1.2004878289832865,4.168579874925964,0.8178114367281231,1.7028241534974786,3.724154297596023,0.028601882199035256,4.394046310625793,2.6077048450895477,0.5722614614708665,1.0207545465207335,2.183033809161634,3.3107753967087747,2.4280001954704957,1.220483075507548,2.844925329460289,0.10062459506502197,2.403950971096842,1.0697282159966492,0.8171341565769263,4.556019728308293,1.1960162619383885,0.4097367737702218,1.665583467202928,2.305677588534926,0.599572822845561,4.479002562049601,4.949539935689712,4.3409630867610405,2.28894536988916,1.9042848765967424,0.39177660312788354,4.43004330051004,3.606370703069289,3.062397461373063,0.44689677062561883,3.111475213986811,4.536500074862678,2.8946094251854495,2.3226301646067915,3.1466388668583267,0.849627139456105,0.524811580434309,0.11513341676701372,1.7493090587246563,3.3596150728723204,0.8096921948814895,1.2196449569608991,1.9554549624068418,1.382645360441379,4.6724594256012875,2.1573170863220814,3.1392696190835547,4.99132872971188,3.5721140808385687,2.153701026936873,0.7488835181042852,4.7246799386367115,0.6538331384090246,4.470170385532856,1.1377952365860966,3.5180954248525795,4.505032154367717,2.652679792596273,2.3688207715812437,1.641529554105562,3.4718456561576017,1.027207304247415,1.6791489204998211,1.0352070681492076,4.165921350399256,4.724091092438146,2.4886221240223105,1.954534513398879,1.7348565201080868,0.2429646116062334,1.204103504616424,4.060159098230511,0.34365418466102526,2.9743485338581213,3.278092384566902,0.32041387511611674,3.7000300131457733,2.9975641509003736,0.4068957235306725,1.2428035607072463,1.0896254961459062,3.2226804385877683,1.2227983064399184,4.564795475733842,0.7660788607320845,2.0584138877745417,2.828030569924179,1.1589665480531608,2.0546178157299977,2.888163573996867,0.29242515208460884,0.28119780752007273,1.5794291781747771,1.7007121067665965,2.821327362173994,2.1718663690957065,3.6102078182861486,2.0077507083902493,1.4437475139673928,3.5966519734200597,2.833589750353566,2.178362504398239,1.3307271578570956,4.961769070226662,4.550360570328395,2.4701757224162546,4.042675823271727,3.1800949518467334,4.9005861570431595,1.6578886412479776,4.0841051828118955,3.1815459659182954,1.8105880840801425,1.8778702675476555,1.3726901529013236,2.6063656110936204,0.11575379530383012,0.206388403042439,2.711299991036026,0.16655066693714193,3.1516140257447587,4.124814957292806,0.7318062475350928,1.7675260884427824,2.1548760779093588,0.23126933396626526,1.8036460764135398,1.1005970141923271,1.6004277984172843,1.5098614744146033,2.6334658295267133,4.303242448051503,2.1597552364990014,0.09685006836970933,3.0437734523235473,3.7311338732046018,3.152502740773029,3.2942449841868715,4.981507910633955,4.136967762187028,0.5693839616876284,2.8545832884904234,1.813153173696579,1.8025107879238378,1.7391819078367887,1.7147099462605797,2.8918647730186664,4.071116506085746,2.646694935637137,4.3831659685030475,0.7001009574720296,2.676769895725469,0.18961276703558516,0.9143395031190715,4.354494422817485,1.0703232269399843,1.2212994970939572,1.5530447633050881,2.533491919917031,3.2846838489834185,2.4672600260885957,1.7131134173136364,2.695586120167064,4.838269829715134,2.226335485659815,2.821876301051481,1.8773903056244257,3.7119624840742627,3.89612095474544,4.945537241943887,4.072305006574009,0.6270245377656014,1.9066666743132776,4.473354408987365,4.2878054713547,3.9424424798128763,1.336629264729352,0.2303083863239419,1.1582968022562157,1.41194535431593,4.146565749096146,1.1426806636424525,2.9869261235733746,0.4817606867573143,3.889950043323428,2.1437645201140585,0.6915680204992236,3.697092068146107,2.6237966831616246,0.5741132154231499,3.0444153592984193,3.926656529978737,0.6506823359390945,0.2867307550728049,3.335724030600309,0.3747390049592081,0.29695992932943227,4.245059459116218,4.729597435557759,3.3775712617348885,1.8167073536327272,3.8874993472803254,1.8495294986821442,4.515629832330937,2.3841130671031188,1.8407694756693838,2.1313003113689435,2.9052382155753653,0.5236614309527243,2.6917918010181308,1.1999341686972087,0.42792831207162485,1.4207846223836529,4.326785231296371,2.776267585197192,2.921083490262154,1.0198331867088628,4.711504615391834,4.127357679470248,4.062753519420643,0.8278314970567757,1.618013571816883,4.924321344292716,3.247164888656556,0.02206015065579381,0.2780542843020217,4.870531829979838,2.270140595837884,3.810101493982112,0.35094078096732484,3.8292283972855525,0.18556424373254665,3.3526103811700745,1.3459809415977408,3.7280263822735336,3.8069410902540946,4.52933292140893,1.6772479429421305,2.6983237165682485,1.5684046042905542,4.1621608218274755,0.24745396262844555,2.9107466949321195,2.9902962310591166,3.0785161210470866,4.779903267275686,0.3803068875835114,2.1590683995021864,4.360444481801414,1.8527558731121385,3.9755329717876275,3.6864267527782877,4.576841168566228,2.1128230906191736,0.9741935072164432,0.7643260945240993,0.7590866490537274,3.930601865243278,4.433261042681021,4.946986968772832,1.3554548312695214,3.990041098906186,1.7517379910820652,4.067365643381159,4.973574724925544,4.6980041578404785,2.6934981510829537,1.951540478198761,4.029740015501124,3.834287063958377,1.122767093955278,4.18177344659013,2.517460215543217,1.0377249475650951,3.662502073316687,2.3458616488584205,0.6212311566525952,0.8778176566115026,3.7950276418349613,1.8072032289762596,2.842458119663509,3.5174218767299505,2.7916872935898707,3.3347982330301473,3.5324831903128286,0.13900918216679936,2.835437033354963,4.201254848997012,1.099322225617112,3.6220549928841517,2.2397611074026225,1.8487445035642003,1.0225210905374416,3.1577599612859064,1.4592093167527609,1.6155941643529326,0.6786398078579092,4.374829174910751,4.009986747834047,0.5565279688553293,1.2968875518250367,4.671041612294942,1.4063089030457288,3.5234555359779307,0.24177624101320627,3.1942532172593943,1.014233951743313,4.639350437404542,0.08808165391814726,1.8524530898199532,3.2353335685265083,0.25575479687701796,1.0396323325547108,1.4307091774205005,0.6117087177407587,3.9385151211036904,4.970746931010568,2.933656814301109,2.661166913299322,3.5307110089257385,3.1854182567507303,0.7055002580857872,1.4706206278502876,1.855212234989826,4.730757150606854,3.669475127112556,2.6830229482482437,0.6922148738937017,0.3404448830869522,1.5702312023128284,1.106554614540839,2.860664235318835,1.4498136837118714,0.3524668171517187,1.8293207036547277,0.6435156197257708,2.13703975963376,0.6692825807140412,0.5584518032967278,2.237861610338504,4.1539153633940025,2.606616459105359,1.6200399345303307,0.8477903072294446,1.463301981729549,2.094446866418138,3.0261735488192376,0.20514010653121195,2.7694582589041863,4.93279217739626,1.8036460959179756,0.6044586399819152,0.39852221379305774,1.424750803283279,2.0094795569390933,1.5635291456533063,1.0543439204057392,3.719327596861742,1.4880944121057271,2.547919088618378,3.815725782710584,3.813587669723688,2.883538237865857,1.971384312599166,2.087933006201995,2.3301150582421015,0.23034079786890427,4.419833919689406,0.5261135146004137,4.341173451174987,4.080105061269274,2.8741755605927533,0.6765674946126887,0.43009304866576503,0.028830165578713762,3.9019075583878218,3.4114098681824343,3.587249083557883,1.5696414725908991,0.9850158036091494,2.0534955683727008,4.901101096585084,4.443338824507263,4.846274570534071,0.5329569237015774,4.372680181752306,0.1585726532848497,1.3891872094046964,4.843373307827184,0.9547836243213492,1.2734085231634307,3.3853119205774074,0.918134845798847,0.4823809287861647,1.1234393568250833,4.385452711993788,2.2443155788061917,1.8069629342826077,4.7804830970163925,2.0603583297352177,3.61423872900838,1.8509149554346471,3.5320135303504294,0.4620147050873591,1.1078834606653654,3.1273842713888023,4.260411047822231,2.4265431999979405,2.1085106959085262,3.1197111326776703,0.8107686418674609,1.879283367639616,1.3480769208575372,0.08332349869514144,0.38455488017910766,4.83072066371836,3.438117091965338,0.7460271123535922,2.194606737712724,2.1357402356452893,4.993762086434433,1.7701177938725376,1.0093496403062696,4.211998689116871,1.3287377694031999,3.1389043717265386,0.9990737275082462,3.7443094534903687,4.738677659765687,3.6612808700329227,2.0311313097093797,3.619745522652998,2.4448357572005674,2.6244003304903374,3.4470121210218565,3.5280532206209703,1.575101125969417,4.234912163297441,0.4470707602069579,1.3891755370073144,1.9472887070388778,4.098617970996036,3.550053824971473,0.7685702862073751,3.9974777348948787,2.69050328501379,2.124964740560229,4.04262761962369,2.4132272225976603,4.119142300525352,1.306205768465657,0.6834315977354954,1.6874723504120515,1.2030351423979835,3.128702722706401,1.8201431267735346,0.35797669917905117,4.247940940255718,1.305560204342986,3.392931257723344,0.9126733078871108,3.7936985118841173,2.2888445771955688,2.815566660592709,4.426539621358226,0.6478275091434593,1.4535151340447716,2.551370303490983,3.2938162280260874,3.1084798698870744,4.449227675042009,3.4072348274644093,4.239179429791193,2.6294890317638506,0.8545140824990827,1.0596490267650427,1.6189327874266368,4.138980569375638,1.720068334650573,1.623288429421007,3.7005675146041894,1.7318907830461705,0.9814264456530508,0.25650217083534543,3.1858152631495784,3.9250780661766993,0.753734065473578,2.087154211130872,0.744653574478753,3.452615186644673,3.502371029005796,0.22480582440870478,1.9941673030498053,2.4222272004962564,3.3138078567222093,4.239858701139852,0.0874044690099296,3.722520650327242,2.546684923261837,4.710425884774681,2.594362911600423,2.903109276497565,2.5828305543438104,4.824595106336526,3.102158150121457,0.03388326931440089,1.9210576894658216,1.6851910303509865,3.7791747537652656,3.4111245342941974,3.1320627710597093,1.011402914113233,4.498903704485655,4.806283858301276,3.3606533411493,4.894208726614268,1.2089543695664318,2.099498467088643,3.0171830537339095,4.817079900803526,3.8053717475980866,3.1713286012113997,2.2974671218378697,2.730047805495871,3.202675363411125,3.6330916108184477,3.346267418455181,1.3825894773507608,0.8529905235747415,3.514649121884111,4.77804073979801,1.1426483936974918,4.011440546544474,1.075994639985065,1.9885800476045457,0.006320229062631855,2.1206743733112132,2.7933021010109185,2.936694166241555,0.04461778367766622,4.571710732423881,1.4769068159931398,3.7188569448457676,0.026031767456948796,3.66131366781153,3.9163468963825974,1.3468706376389938,2.5644016167049246,2.382500414108507,2.966565927432623,3.350618012676984,3.814352283779272,0.9407332098773313,3.464597966775748,3.5021146432294414,3.586231281711304,0.5669825153792818,2.2215684037641825,4.861930188760183,0.6818669267790312,4.249955379367828,2.9906927838136186,0.9201619435720987,1.3660650243001238,1.3478068099961182,1.9450034616076362,4.566480565494198,2.831278891485786,0.2410726669929497,3.9146736792384784,4.4523689426235835,2.2942525249089907,1.496686884058026,3.2751249737485377,1.8077292495740194,1.9978159368958903,1.6592836327306248,4.0281749454763425,3.975075436501332,4.039061011353535,3.9669778042476334,1.598584332653874,1.964501913259643,2.3523326559562996,2.829670139136388,3.0611501151743568,1.2543831337944888,1.622120109230858,4.466854262036955,2.7340190520408933,4.49961186777633,4.662752453525023,4.805326707533166,2.5683018029831652,1.0280639664054758,4.0390814327212885,1.8859512104433507,1.0520733573955199,1.254592174554865,4.562252158007415,1.5326307308475695,2.398655191085728,3.9566991142150556,0.11126587337361382,4.818266240046611,4.419362950618515,3.5439541065109967,3.863503295894856,1.8989340579678482,3.888820767112524,2.196558182013224,2.2503486717736,3.0992170753788892,0.7679536667679032,2.6646205109666674,3.4635011754742617,3.8263673057262473,0.6975480749211926,1.8997635055801787,0.026997425235701922,1.2526936506177355,3.701168413822656,0.08662607641138131,0.7834154365622792,1.1784626785015273,3.4181761774898134,1.1959255436340277,0.02229656925821777,2.37974524922031,1.7486990347859621,3.4919709515183217,3.802172825903849,2.29579202027221,3.908969700406515,4.796781099401545,0.6395024409965133,1.3162219907083328,1.8463645905306747,1.9048377626808521,2.3166990850315305,2.948174873816485,1.5304820975084676,0.6130790291331778,2.90672285752015,2.652992091342946,4.044348797543367,4.002420759038513,1.832576287967066,3.411967289753366,2.8851300838071694,3.988249176285943,3.8632463302021236,3.4646750151799646,4.351759013271171,2.679968374620678,1.0610019049884511,2.65477021812306,4.123972325085919,0.8753710754689348,3.7645080509187,3.109411197487449,0.8693382723830423,2.143981747490197,1.7848038927907783,3.6967620333726225,1.1608312966589052,0.13335006591286946,4.290493167168487,3.4817018205364727,0.43998409135103445,1.4687928218447277,1.6389007365519903,4.225908443156937,4.2208108194349965,0.7696018130137672,3.038994737183456,3.2244079045028142,4.638680765390598,3.1998791749458,1.2709678767406096,3.964650504220386,3.050017955042917,3.1305886662549676,0.261289550710635]}
},{}],12:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var factory = require( './../lib/factory.js' );


// FIXTURES //

var small = require( './fixtures/julia/small.json' );
var medium = require( './fixtures/julia/medium.json' );
var large = require( './fixtures/julia/large.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a function', function test( t ) {
	var mgf = factory( 1.0 );
	t.equal( typeof mgf, 'function', 'returns a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the created function returns `NaN`', function test( t ) {
	var mgf;
	var y;

	mgf = factory( 1.0 );
	y = mgf( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	mgf = factory( NaN );
	y = mgf( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided `+infinity` for `lambda`, the function returns a function which returns `NaN` for any `x`', function test( t ) {
	var mgf;
	var y;

	mgf = factory( PINF );

	y = mgf( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a non-positive `lambda`, the created function always returns `NaN`', function test( t ) {
	var mgf;
	var y;

	mgf = factory( -1.0 );

	y = mgf( 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	mgf = factory( 0.0 );

	y = mgf( 2.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the created function returns `NaN` for `x >= lambda`', function test( t ) {
	var mgf;
	var y;

	mgf = factory( 3.0 );
	y = mgf( 4.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	mgf = factory( 0.1 );
	y = mgf( 0.9 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the created function evaluates the mgf for `x` given small `lambda` values', function test( t ) {
	var expected;
	var lambda;
	var delta;
	var mgf;
	var tol;
	var x;
	var y;
	var i;

	expected = small.expected;
	x = small.x;
	lambda = small.lambda;
	for ( i = 0; i < x.length; i++ ) {
		mgf = factory( lambda[i] );
		y = mgf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 100.0 * EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the created function evaluates the mgf for `x` given medium `lambda` values', function test( t ) {
	var expected;
	var lambda;
	var delta;
	var mgf;
	var tol;
	var x;
	var y;
	var i;

	expected = medium.expected;
	x = medium.x;
	lambda = medium.lambda;
	for ( i = 0; i < x.length; i++ ) {
		mgf = factory( lambda[i] );
		y = mgf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 250.0 * EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the created function evaluates the mgf for `x` given large `lambda` values', function test( t ) {
	var expected;
	var lambda;
	var delta;
	var mgf;
	var tol;
	var x;
	var y;
	var i;

	expected = large.expected;
	x = large.x;
	lambda = large.lambda;
	for ( i = 0; i < x.length; i++ ) {
		mgf = factory( lambda[i] );
		y = mgf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 250.0 * EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dists/exponential/mgf/test/test.factory.js")
},{"./../lib/factory.js":6,"./fixtures/julia/large.json":9,"./fixtures/julia/medium.json":10,"./fixtures/julia/small.json":11,"@stdlib/constants/math/float64-eps":1,"@stdlib/constants/math/float64-ninf":2,"@stdlib/constants/math/float64-pinf":3,"@stdlib/math/base/assert/is-nan":4,"@stdlib/math/base/special/abs":16,"tape":75}],13:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var mgf = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof mgf, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a factory method for generating `mgf` functions', function test( t ) {
	t.equal( typeof mgf.factory, 'function', 'exports a factory method' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dists/exponential/mgf/test/test.js")
},{"./../lib":7,"tape":75}],14:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var mgf = require( './../lib' );


// FIXTURES //

var small = require( './fixtures/julia/small.json' );
var medium = require( './fixtures/julia/medium.json' );
var large = require( './fixtures/julia/large.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof mgf, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', function test( t ) {
	var y = mgf( NaN, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = mgf( 0.0, NaN );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided `+infinity` for `lambda`, the function returns `NaN`', function test( t ) {
	var y;

	y = mgf( 0.0, PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( NaN, PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( PINF, PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( NINF, PINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a non-positive `lambda`, the function always returns `NaN`', function test( t ) {
	var y;

	y = mgf( 2.0, -1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( 0.0, -1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( 2.0, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( 0.0, 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( -2.0, 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` for `x >= lambda`', function test( t ) {
	var y;

	y = mgf( 4.0, 3.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = mgf( 0.9, 0.1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the function evaluates the mgf for `x` given small `lambda` values', function test( t ) {
	var expected;
	var lambda;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = small.expected;
	x = small.x;
	lambda = small.lambda;
	for ( i = 0; i < x.length; i++ ) {
		y = mgf( x[i], lambda[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 100.0 * EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the mgf for `x` given medium `lambda` values', function test( t ) {
	var expected;
	var lambda;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = medium.expected;
	x = medium.x;
	lambda = medium.lambda;
	for ( i = 0; i < x.length; i++ ) {
		y = mgf( x[i], lambda[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 250.0 * EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the mgf for `x` given large `lambda` values', function test( t ) {
	var expected;
	var lambda;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = large.expected;
	x = large.x;
	lambda = large.lambda;
	for ( i = 0; i < x.length; i++ ) {
		y = mgf( x[i], lambda[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 250.0 * EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. λ: '+lambda[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dists/exponential/mgf/test/test.mgf.js")
},{"./../lib":7,"./fixtures/julia/large.json":9,"./fixtures/julia/medium.json":10,"./fixtures/julia/small.json":11,"@stdlib/constants/math/float64-eps":1,"@stdlib/constants/math/float64-ninf":2,"@stdlib/constants/math/float64-pinf":3,"@stdlib/math/base/assert/is-nan":4,"@stdlib/math/base/special/abs":16,"tape":75}],15:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
}


// EXPORTS //

module.exports = abs;

},{}],16:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":15}],17:[function(require,module,exports){
'use strict';

/**
* Creates a function which always returns the same value.
*
* @param {*} [value] - value to always return
* @returns {Function} constant function
*
* @example
* var fcn = wrap( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/
function wrap( value ) {
	return constantFunction;

	/**
	* Constant function.
	*
	* @returns {*} constant value
	*/
	function constantFunction() {
		return value;
	}
}


// EXPORTS //

module.exports = wrap;

},{}],18:[function(require,module,exports){
'use strict';

/**
* Create a constant function.
*
* @module @stdlib/utils/constant-function
*
* @example
* var constantFunction = require( '@stdlib/utils/constant-function' );
*
* var fcn = constantFunction( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/

// MODULES //

var constantFunction = require( './constant_function.js' );


// EXPORTS //

module.exports = constantFunction;

},{"./constant_function.js":17}],19:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
}


// EXPORTS //

module.exports = setReadOnly;

},{}],20:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":19}],21:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],22:[function(require,module,exports){

},{}],23:[function(require,module,exports){
arguments[4][22][0].apply(exports,arguments)
},{"dup":22}],24:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],25:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":21,"ieee754":44}],26:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":46}],27:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":28,"./lib/keys.js":29}],28:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],29:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],30:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":40,"object-keys":50}],31:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],32:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":33,"./helpers/isNaN":34,"./helpers/mod":35,"./helpers/sign":36,"es-to-primitive/es5":37,"has":43,"is-callable":47}],33:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],34:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],35:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],36:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],37:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":38,"is-callable":47}],38:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],39:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],40:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],41:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],42:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":41}],43:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":42}],44:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],45:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],46:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],47:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],48:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],49:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],50:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":51}],51:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],52:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":24}],53:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":24}],54:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":55}],55:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":57,"./_stream_writable":59,"core-util-is":26,"inherits":45,"process-nextick-args":53}],56:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":58,"core-util-is":26,"inherits":45}],57:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":55,"./internal/streams/BufferList":60,"./internal/streams/destroy":61,"./internal/streams/stream":62,"_process":24,"core-util-is":26,"events":39,"inherits":45,"isarray":48,"process-nextick-args":53,"safe-buffer":68,"string_decoder/":74,"util":22}],58:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":55,"core-util-is":26,"inherits":45}],59:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":55,"./internal/streams/destroy":61,"./internal/streams/stream":62,"_process":24,"core-util-is":26,"inherits":45,"process-nextick-args":53,"safe-buffer":68,"util-deprecate":81}],60:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":68}],61:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":53}],62:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":39}],63:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":64}],64:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":55,"./lib/_stream_passthrough.js":56,"./lib/_stream_readable.js":57,"./lib/_stream_transform.js":58,"./lib/_stream_writable.js":59}],65:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":64}],66:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":59}],67:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":24,"through":80}],68:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":25}],69:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":39,"inherits":45,"readable-stream/duplex.js":54,"readable-stream/passthrough.js":63,"readable-stream/readable.js":64,"readable-stream/transform.js":65,"readable-stream/writable.js":66}],70:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":32,"function-bind":42}],71:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":70,"./polyfill":72,"./shim":73,"define-properties":30,"function-bind":42}],72:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":70}],73:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":72,"define-properties":30}],74:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":68}],75:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":76,"./lib/results":78,"./lib/test":79,"_process":24,"defined":31,"through":80}],76:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":24,"fs":23,"through":80}],77:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":24}],78:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":24,"events":39,"function-bind":42,"has":43,"inherits":45,"object-inspect":49,"resumer":67,"through":80}],79:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":77,"deep-equal":27,"defined":31,"events":39,"has":43,"inherits":45,"path":52,"string.prototype.trim":71}],80:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":24,"stream":69}],81:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[12,13,14]);
