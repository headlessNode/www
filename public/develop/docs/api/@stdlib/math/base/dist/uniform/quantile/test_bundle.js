// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":2}],2:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],3:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a uniform distribution with minimum support `a` an maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0 );
* var y = quantile( 0.4 );
* // returns 2.8
*
* y = quantile( 0.8 );
* // returns 3.6
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a uniform distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + ( p * ( b - a ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":5,"@stdlib/math/base/assert/is-nan":1}],4:[function(require,module,exports){
'use strict';

/**
* Uniform distribution quantile function.
*
* @module @stdlib/math/base/dist/uniform/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/uniform/quantile' );
*
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns 5.0
*
* var myQuantile = quantile.factory( 0.0, 4.0 );
* y = myQuantile( 0.8 );
* // returns 3.2
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":3,"./quantile.js":6,"@stdlib/utils/define-read-only-property":19}],5:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid uniform distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],6:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns 0.8
* @example
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns 5.0
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, 2.0, 1.0 );
* // returns NaN
*/
function quantile( p, a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return a + ( p * ( b - a ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":1}],7:[function(require,module,exports){
module.exports={"expected":[6.661984746699971,27.530196839128724,24.893254686286582,39.68583412963703,16.313365212760395,26.499340956346224,8.693420614092217,13.114265941910897,77.61677692816744,15.511623455237405,5.132737033271137,19.045780441269372,5.43591016455392,30.367703577792305,4.759314118602827,53.2901194758246,24.93275766339209,34.48983454500835,69.79533310051124,58.96429703896888,14.703585483007629,7.349782969341113,29.95303931896672,23.307281214353118,23.198992794128348,66.18198722975352,31.813376340492198,34.920650778246554,33.81530435410743,19.448406500608137,74.16679191530964,43.235821165231854,10.32340895888235,36.567600912491216,27.055665463797126,12.84087928086893,27.49682321436037,23.204419667096506,61.54436014977186,25.10166398454014,21.22653639134257,23.339382786951788,10.84748563520255,81.48722136098564,29.962938113258495,25.153750817781436,54.196753992748214,36.46333068022972,18.537800016748513,17.906551474093554,13.513302589369799,21.270505825222745,17.94475718875312,69.55054142671435,20.505717438848915,1.4987867646182704,28.121732370498684,15.725197096811755,41.239243165550135,33.47633374946551,44.415236711816505,19.071994121560852,7.189508687383134,36.57251826458634,16.01519499618809,31.708675300529343,28.715719173066052,66.96368880882227,29.014289508594054,44.2375024624087,5.299176678786962,82.70125199580974,40.52849213155364,27.90730328454646,5.528268311743228,55.956745984705485,31.123663082738055,24.30008364841764,55.022341568667066,73.4603011121377,61.97302117215358,18.999074576919057,24.074574983073816,19.281537486972635,20.70350804422591,37.13259089664125,15.96643184396087,47.82869564991274,15.127242401039815,12.30327083740001,16.254978964834415,11.886138610653767,37.808266540486606,4.774048288686769,64.59277820519692,17.623669222548045,33.10009185331671,52.43348279158074,12.546945849542194,27.451662162085277,12.011133217628286,12.790758508100822,67.65141269903454,7.0372440018011435,47.78167481357055,5.527493952098881,62.789975720724684,18.996604415821515,46.71143835276047,23.429348450117878,51.99204862525468,33.623709880134086,13.321609547344156,57.79327524590844,29.058244546242804,17.28959776311695,6.80590211006372,43.51077462472625,23.053183233302036,60.5265499321248,7.548077233280906,14.67098597220931,42.170773810772644,48.388228642113376,23.3326661949215,21.455007053092906,26.65047048303881,42.38135638114228,21.170514513232405,48.330355762295895,45.642490987327776,80.78221793083667,29.80555571944123,60.488204924387205,23.19777674590261,16.517680878513147,23.668179186057838,28.440558535940742,4.654924448669029,18.272924227627517,26.79475957837374,44.25539572186005,3.778847148443236,25.16743148416024,40.470305533482374,10.484411660503119,64.57098271119911,29.744396629816606,21.197260867213767,36.539106394352174,19.119581857637385,36.55864728884104,17.21897839868558,57.76659268222984,53.68925055362449,7.827035586863662,20.545691706495703,31.895060557488648,38.73375818386761,17.851045567668756,13.794735130705435,17.158019875949694,42.550582917622634,21.58038989445048,17.948386675237973,26.51906449601308,24.213918683406536,35.94345977627751,44.71620815298459,49.3057076587174,62.2717119563254,5.86378391668086,25.186688697335146,39.39656596939139,12.08650403493454,35.39620333513169,17.653228977043618,36.0306209754773,36.27678567085782,23.53374226860801,11.516122619720507,8.524753095555335,9.705047647395787,22.6167358339778,3.1676964567400563,48.05333136487534,9.269392824011945,22.17578789417288,8.275282809458943,39.85615370254834,20.493168810587502,45.2725205753837,16.380820483976184,26.238346789054233,15.226924342641277,6.199697307662465,48.013961110319066,10.840397773823334,32.82568913834114,30.488992342352567,25.55924754541914,14.02997908065936,32.44926439124457,24.811070333333767,17.70948227318373,20.37315658556988,26.85729044638439,3.7964461620692735,16.341803383171563,42.5908510910303,23.232716310859683,6.193085109335571,8.875771388313456,38.68298250571456,32.13939841308655,61.23595388102635,15.757172110701035,51.38987843815147,46.40617492648394,38.042128184604174,12.15119934630934,32.63956674916064,61.109221726335825,28.49843419113889,18.0989870982343,17.998621021488873,19.770123893513663,38.978654786068056,42.49064725573932,17.151804326706642,25.376717703991403,13.207268399696606,55.48513225186669,13.111358039524283,20.21210233719603,24.969130070904527,67.0830976412874,2.2876600499065693,46.01731150214844,46.81285003772901,37.348116018391316,29.46755380513679,17.43995977931093,50.16479952784346,24.632067178603126,6.801181731453624,11.100343454092567,20.935583978795755,17.270880242527397,39.80299796596852,14.506889875277743,48.4656883736763,25.022548525927622,42.368824077132935,21.011926328904714,43.120898378227444,7.4297075136700315,41.59087316818828,25.7498001835387,9.710609610552385,27.500874354812954,13.271789374008192,8.01415374850004,9.05625582608135,28.618790977811976,20.895805387311597,7.646537297291515,32.494827527947045,17.622912666138983,23.810364864028625,23.126684669720124,8.913094754251293,21.68155838840879,28.81998976948598,27.280353327992792,51.3513379505815,25.510909378494606,75.22241129199985,51.09042091681578,21.83437960463312,18.54820363648122,43.69798139842901,19.63072538583397,30.074093855196622,52.207708905729966,31.017447447163498,66.58256679696925,52.77262267574706,28.35931782069669,46.89682964066671,28.020302099621638,34.70275656789228,11.373155594342862,81.58275522191117,64.11587360311832,4.129125308044016,29.87222518935096,25.310246059529707,29.628510833764704,20.931505848719073,43.09438448537862,5.279905809743273,42.31725069068144,15.910710125717365,10.163744783619673,23.692715369799433,21.828967337768752,34.29752178646427,50.98353718342175,13.911175604647793,21.824885664309836,31.176753621415916,13.569167982406636,26.259160765012787,48.20544014299987,7.349363596580907,22.27768898243299,57.71545894181602,32.46757289055364,31.24641729871616,18.248345586787387,38.55308021439572,4.782033494817437,35.64928357302916,27.75443312938744,15.970277728183373,24.129139842431947,26.25447994576452,13.108369773254465,52.99711179658468,19.22687712518543,24.49102464160595,30.64727779702782,3.148046305419312,49.19167837549244,20.050405440436702,18.481373276404668,29.74668465865218,36.6068179908272,27.132338123847113,17.212050111485517,32.92211515391507,63.78938228470639,27.445530867395334,69.1469150726596,22.161052053989582,5.907891891782208,26.323548998184116,19.723441566760926,7.278505978418254,15.178882853410705,21.619670925575655,52.8148569868792,13.967126056723554,23.845630781753712,50.38737078106843,25.630415112537246,9.92346349678228,37.783028857654074,5.634291477013172,9.949204096398908,22.075290212617205,8.34015040098385,37.777655661820276,30.565548698056663,37.582059990103545,27.51589328205943,66.24071717169645,29.599336253782006,12.366681866814632,17.928735799093534,16.20675598496799,22.82389087986243,30.68755687480114,61.6879838670963,43.244158411246005,17.16489211505996,9.182025615013645,51.02770556665833,19.08573984583158,14.678945811218776,15.622731538296915,13.873038193050407,19.607833383247325,2.267586799387911,19.00779274341442,20.42726018925265,17.11099306409638,17.90831753058247,10.285778810040224,33.70361951163499,38.01378764231171,25.68973190067235,12.051299752667598,67.05682724180281,55.46154439282053,18.45793100401239,20.79372419993684,17.64904931652974,20.825035699153258,40.5715031938372,27.412684311885215,43.26245288157183,27.754457842505794,63.5975477318631,18.87356668678941,23.910564807903533,76.63148286387423,10.55415951041596,17.93740777441114,39.396531614662884,25.036418962056104,23.71950608584808,13.010088798165928,18.347263944490805,41.41858748930618,38.444528789871214,42.62457436800516,53.30697628817377,19.709711382787116,14.711616044286597,17.152194765391258,36.67448796833551,29.067182221123936,45.00613258411166,35.04365227679913,8.676907473975536,16.368898183906236,23.404388130793443,19.26559619484116,8.164410866374874,19.470593741146377,12.392869048355623,7.703932154538324,11.918807126397065,17.371777889867435,23.778484365873602,7.794872801227871,32.21676468807295,28.617017521417935,6.097217085633396,57.7427993732379,27.675296691982012,24.104175387725885,15.47569540275228,32.38683610486585,9.407300768424152,24.420830583656354,41.7719318953437,23.25890812193435,39.23741410651823,26.176934937125907,2.7562931267793873,53.2707657670657,16.728156233847297,29.499922832381664,14.96554177881907,43.982951211778335,48.31956609376185,11.62235645429164,31.886882997701058,41.55575322723317,24.907412571045917,50.684061109425215,45.62820344300492,39.18473839427439,21.794764513184894,21.169589574087922,59.0254947069415,53.429893054572744,9.31884068429853,51.05522569896434,9.193882253602368,31.825696770259427,38.34481348772274,17.5769893233226,29.743975830906862,18.57510072432597,49.34925210985158,16.16272867439066,6.403862866514607,7.59156339530149,21.94729318920338,16.520368825396165,8.652069342060567,18.4797130101313,65.31109380704274,30.472838189187797,20.172456702551855,14.72264295200203,20.57222184723,34.5648205336183,10.181975832420965,23.715137719919724,14.989795453352148,18.342919085242713,22.64133462525838,19.895930554818893,31.114497035121683,28.273670320408833,20.478429206238754,41.938934171187945,77.10206902999093,49.12301185231278,17.000689590214108,32.63386149321339,25.862228020142908,53.88921712029097,23.33182933193224,35.30291647778926,23.474611448359912,21.763991532230797,50.292685672125074,33.49367863716211,35.2938978744137,40.4177614648328,65.03431058002582,29.120357015346944,21.07785434601331,25.557551423807134,13.633357011829567,11.9250840864448,33.61679818293848,25.130858159533865,75.67506471883105,30.076831870245613,25.153651039892406,59.39280261041955,48.84131671472653,8.955204981466679,20.00704120383115,21.986039977812236,21.123336485980953,46.407727445665614,23.284958214453287,57.94510271992141,21.231555731984134,71.46524535272502,43.28256677051887,13.465373763596547,23.958468910590007,37.13174065312942,38.28938649866063,5.238684819667074,70.88795280548504,16.957017023438933,17.178850417705945,22.967950391288845,10.959072104935018,14.126167329751173,58.10072363960124,33.575421348900775,64.27103019874474,62.56577927210486,33.012581465680405,19.574896074058394,21.07550776718602,28.45801963755831,21.913810312049623,7.934498342850167,24.850590443634093,68.60991148324896,34.05765798866876,8.845950236197874,40.48580852144846,44.16484199276195,33.33193821832833,24.183691986797115,26.99430146552586,20.05430833556221,22.044402550726794,20.83795045954345,56.360013748796206,0.8395685335739143,9.13883085081975,78.32848999295986,32.24884079189188,40.678800584362605,23.476577837273027,50.93486676301981,33.340783849947314,20.402740581616058,33.57553271424228,47.96617976855531,38.84700049623909,29.51167561008741,10.96842774779446,38.44351281885375,11.028017748915552,4.2517619015462405,28.91060472033737,3.333683141841203,42.92440860985762,32.09214309523211,55.653509629242464,17.33019356598669,32.90365286910312,56.25568731578263,43.65435647898108,13.255853400803504,16.67645500371609,33.21547147299306,38.47113513813299,28.294101109534544,12.309810196033919,27.663362891183354,38.07714306143524,14.10766023822325,19.802654356265823,38.10213642373091,20.70860789661927,57.16805463703477,66.295211606809,13.852228617851136,29.2916229111349,36.66542986212873,17.528370582790632,29.639492989659406,16.074819608466356,16.00788383800015,21.417062093723374,7.626688840172957,21.624852888814985,58.431255514019774,6.872834239790152,69.83196860641252,13.319399375390228,35.845916862742506,19.19741815844972,23.57838931876761,85.79209843888312,18.85984051102221,37.24280346136436,10.642946110954309,0.7633512711474738,17.882722486244532,61.00237727092551,59.172274099527925,14.994182757691515,75.26795769196487,7.927243514612005,36.31608034886763,55.17891178292789,20.514212557905573,30.57926356864311,19.442317666909986,42.28385478527831,39.21720849478153,7.184994815725242,14.047009747148678,14.270799769323546,44.58283881169099,26.575159993936076,22.137596979243092,4.844338784991681,19.704818875702028,17.536403276310853,37.079552292121306,45.81101106765422,60.76997715204635,59.16613349490825,5.882225404027893,20.96410487314739,2.4963577617679538,46.51773150313039,32.27753905968309,53.51406440648695,7.624909230092565,7.95206819280669,21.422757544009148,22.839373801105783,67.02132705791864,21.127511572074557,16.51568564922622,28.281646101507697,46.95197567256221,12.607951760175636,42.51401991579769,3.7650496370351165,25.413129845628394,20.291513330569927,29.197487339104338,29.770707487098008,17.749609249912645,31.67547905581874,22.535197981555363,17.136758560277535,43.51189609363668,7.784645311226248,49.3967077340146,40.68531058540616,7.619067539155508,28.06761197013043,12.2672291404526,26.22680018639306,60.76079772488895,26.947021670110807,10.082102079097025,14.257057042636726,21.782293886103826,19.73003390963997,19.27050805785641,44.509167967784414,2.9091959916658867,15.49812331749379,8.078595108091271,68.67031257046975,16.61491556019025,3.9233900634283088,14.773196753154267,41.22541117447063,19.754547711801052,63.46039717928485,32.41118393924519,41.63211715653955,32.037748628566646,27.789217478744423,9.75326844939989,47.01312420203934,70.39602685008424,27.470574625145346,21.571559665776693,40.65735891777711,41.579180739951475,52.98158112528454,69.69997096442827,20.00222959093625,44.90795679521481,19.5420648665306,13.031822952674837,86.96353743427136,25.520911340262447,16.63108934459227,22.291868274119494,39.34736917759317,9.776506696112635,17.294695206978982,34.63481792139626,12.826086554574694,15.407255335866044,49.64781928065305,21.20037583635991,42.52742906003985,47.43492730190767,13.283913557903244,65.77678886777707,34.845026666148904,78.45790361265578,28.88678848371659,14.980452692493127,16.40994435919998,18.463267407439012,20.341838381848,17.791924629113524,39.29007262610733,4.972320293503156,39.65540058624957,21.37374473186683,36.945103575897875,64.04446691153134,1.9605313616269004,60.313429541023325,34.67706814305619,5.072239412972213,52.52519731924271,35.33809324838835,21.154056308267855,7.227859856460014,13.013270342633259,13.601881686798585,14.713477200750383,26.289659086436032,18.431500940280724,20.538575459295057,6.374210517380918,35.114649354452666,35.847224828331754,12.866642498640044,18.106669978638283,15.490392275094655,51.10454338011023,39.00101281357532,32.48916365457953,39.004582663839734,17.65091131476899,6.948647165955011,23.745633413054012,75.81385966213634,53.986742478862524,81.21112157121624,20.880431675246687,6.622611577886003,30.88770640248712,24.885098617799976,4.263172613550454,41.419284940419324,68.23078124083622,8.133178884137124,47.83778358235006,26.13349907751636,22.51327924774337,20.25316439928416,21.903856556684296,52.356266141526035,53.380009490785014,67.55637036770338,43.26013190002506,11.23259258936834,5.161652083202082,19.751593634509188,13.438340221487305,68.4684438959084,4.755014169180618,5.6198673098682805,28.25151862335462,33.95001127097783,18.10683168428787,14.625672507401454,39.38091532114058,32.40654158732417,30.27232435494668,20.10583032964486,35.77701525410644,22.4367143804916,26.70979395244093,76.62932064641635,2.9221024753964278,77.06108250918648,28.661157120885036,20.332730925910337,29.802792866398892,22.17458952479295,22.458529489624734,19.053974993887408,25.34818586628021,36.393338335614736,14.118523339158552,47.044644387964254,44.79469429778548,22.524040275944156,62.39728354927832,29.427973979331494,12.589900810404949,21.478752757558993,68.27520901044021,39.99591469995491,18.76284272981329,26.14160480748656,29.45749889315678,30.90287821144215,22.574556927673044,28.306618228000545,16.947722882956338,5.602969491848784,27.893999503375422,24.93370228105338,5.881331038993147,20.289463254770308,19.042900635594705,44.58539964740455,59.42221353150118,68.67002445565163,46.45063081177635,54.01123016097021,26.415529495488165,4.009726723531057,18.588080493216637,12.080401469780782,27.855980477564806,17.23827874280189,29.49661233210309,66.43371693646935,32.07644706928625,25.437841533270777,12.142599695320868,42.967634007683955,38.744485077934186,20.383430280678816,28.764473737813795,9.058268951576762,50.29618972380408,19.20173597708098,22.704599206293594,30.80856716459641,18.121161811141658,14.769456964371626,8.301581477667495,54.85650210677424,36.839837237698504,27.387731194784536,24.77557347009084,15.178243959740652,21.13002521217938,3.880341741153708,21.749451335430415,62.59382045181806,33.03950731156401,12.503762348183095,73.98289112318858,47.04675082998588,43.08114170080158,31.335968401907692,45.44413170224213,17.256867271635414,25.223618722113095,25.02603727990095,50.662842184563615,55.66362797067348,31.417473879448785,6.6412341779609125,32.487380972067356,21.16783234384404,26.322345211767086,52.3915375391675,31.300830420688616,12.189125039495567,19.261228472311878,24.26894366297947,6.095292651456203,3.2031540411016546,13.846161251988933,63.84717865791347,34.18200082801364,34.20938376107442,21.877514549221132,13.71458449820733,6.951844110679277,40.329326232031484,54.40284885370218,17.234099144528578,30.635992093511508,13.1787796328795,13.058431731044736,63.15364565201752,21.422477490859322,63.30801858009961,19.870664956835707,11.118022117159473,48.59691406343747,33.77596881693968,36.280246532792205,17.49109623920916,37.21384076329568,26.381772720646893,16.224661199123013,35.993253644685396,35.40087785029831,25.68818641838209,56.78613100557715,21.380295891465412,19.967777686299513,17.127940787329294,16.660746676252856,11.600276941604836,15.403061989155333,21.243800102665432,12.03891673510897,8.924602344533845,25.460870601241687,24.504694897742194,33.01332578400552,10.601349798255853,12.67518319230636,20.852364359849414,49.23404765889246,55.85512093984349,70.53484110487645,13.862326864479286,29.951079121644433,17.8427033600848,12.998147818216882,18.987415454362296,17.147947401566967,49.40302648248182,3.6158727519847895,4.207758252700318,29.13337542925408,35.814324374537435,62.37070919529053,9.766718429281408,20.74906152513337,17.88409674724671,59.926850234225626,28.096789039882523,55.76084802655812,34.06008928882601,26.707869053528793,15.124112424677417,12.75828604930389,30.706774804197266,75.24138400896157,24.626612314675892,27.479448983033684,18.710042188947128,17.62136889814219,34.36798268796255,58.528138372411284,25.64895574596045,38.760986366545055,38.289540173147245],"b":[7.156665779428009,66.1668278141837,26.40681363411136,59.8486588437914,31.765486673382902,50.30797601584895,12.337443113914407,77.95173902933335,77.68954409340645,31.65822065276924,13.398635210470115,35.60118205486971,10.654578574597489,37.52252388352006,20.879876160282134,80.49121198768317,74.6537320846264,49.9266007067845,87.50064686647575,81.85025654362747,15.231988626189352,26.274444923927707,48.191318672103336,30.076836428219057,62.83995347784513,78.80688274052002,56.44410128260276,46.2405416545855,82.73475273368742,23.731768778505167,92.30726003479799,70.90981241858692,19.173976328452405,58.382253336717675,29.724661886214335,50.37076500478369,41.82934704816568,30.51105010624484,86.01517539016405,88.73420380047273,64.85951084421603,84.74394069751327,34.00012192480312,96.72524677161147,38.31690670139352,45.59378661332859,67.12963500681298,40.109646057617354,88.35932117608948,30.695327627101257,52.19420871165889,70.44255917343142,21.331321417514214,74.3767525433723,39.27398130423214,1.5866670814723571,78.37821951075232,17.96455041169012,55.64416370617235,55.447071313787916,54.13994022622507,68.13131017138822,28.122780735277097,80.98298755656751,21.261064446770067,52.64042313959082,70.39133951967699,90.25111058192313,50.0818971974349,64.1063179931344,16.92632665511683,96.82326576196661,61.69924699400373,49.83925231572971,17.708616655057988,77.68986741697424,58.89242233938838,29.773813547018165,76.74189172575916,76.50427146630811,90.09695949844426,68.90977346373495,45.4453864432939,32.43928706714207,27.305221141920672,52.196525290028376,59.87607208201676,65.33366321354842,32.99701412619829,45.373616136885786,21.582578150396195,19.471989986709588,38.853519778006934,9.447539559538779,71.0721318580021,61.99443030294502,75.5028294799305,66.77628536067414,24.025795189395783,86.52293760606094,49.20317252502124,15.846624246643994,95.8949137767244,12.151719579498774,54.15191187071084,8.588556845336788,82.41635327200326,47.08809958778403,62.11836570427894,52.54271513544037,78.36329875463478,55.251288855836606,51.44226590571752,69.83064327754333,34.18704703752319,64.47899638453619,33.87028679734508,78.23719650871816,35.81389479557036,73.89647785297346,44.190283164700205,47.60807020001849,73.67816773628351,58.597220296341334,78.4078156391456,74.38355800248236,94.01491869739206,59.02921378996386,46.40535477092487,79.07320743440171,46.541593341338654,86.75700170456294,62.599120258876944,73.71970700501865,51.1321750533134,23.04705386366649,40.55018223961113,70.15777403057363,4.917228453314402,23.63683991026403,41.95886518226848,56.75508718977143,71.50010556205127,45.87758109401616,54.630652956901756,20.525316217299178,70.65985267359486,70.84060760782798,36.92740398044993,39.99112042504319,41.349456536321306,36.72637425305196,19.70232100192161,72.30842270240022,98.94078084226328,34.254706536751115,59.54621138915816,78.47675660401215,57.44080774898133,19.29917398339496,15.412156115459474,57.88816112631631,82.10620500606467,21.9156148703177,18.36716473637238,28.876101407500848,32.61219363829076,45.772695902689065,73.78830060975523,62.03118979788949,63.07396519944041,57.701356280751995,47.09825292083177,76.65182625734447,14.683279180318202,38.75903764600895,21.224616773895505,45.52967438506739,94.58613030806947,66.03495080028046,13.873307236374316,43.1299287382018,15.333428510429364,44.56432675797605,3.378271295775912,61.11796441676126,13.219322253947073,28.768543579852373,19.28353906720663,40.13851623505205,25.47934683144095,77.3466366911375,18.80227606848112,33.142257339881596,39.97262952955475,29.07935669989252,58.190361196577236,55.73435953988655,38.65349024622952,42.89954172963877,60.180148546717255,31.5203618499342,44.768770986208544,25.901228759719128,22.003075714167252,22.315968982451185,41.34334057673839,4.386038674130965,21.792447536460923,95.22024167266356,50.91053820466799,7.423817096704579,9.771868401567927,54.8206859963071,72.16034507434927,70.04803126488035,81.46439701197788,60.49693706654185,79.92331491117454,45.20420777932755,83.76423904377904,56.86926256628007,82.41730524479075,29.269181746216844,90.42667245360121,23.88832639767174,25.906181988985413,44.19298502775079,66.17686803497847,23.98239332681853,32.53715837328016,45.59299392382458,75.73657573895025,43.909809119168514,24.063218432853397,38.23712072235517,78.78677400019927,3.812015566823077,53.92927529149652,73.66464041645948,69.5840626754674,55.27133342445545,53.32212298426621,56.3496308333029,66.55341766906231,81.88100856383724,45.7934547282063,55.91488793091871,61.11920247577872,42.434848024215,26.742605856591943,61.88935671993026,53.00929714821588,42.52962528431314,30.80393275125598,66.746356388949,18.412714931039854,46.67739138602092,70.50776329137452,10.21172530710238,49.43053100976229,25.877943921920735,77.72055841152942,11.543972691635132,32.602366522557915,22.15032807240492,33.907908124318624,55.52434604319089,24.77410913739666,59.8426931916364,80.16270534436242,27.006555653158657,84.63249994055833,49.58299389587267,38.80671709595564,65.34699150422662,29.46570083439882,80.83251479198695,79.4333759460446,60.412576814815246,24.66633672214694,86.48644584987392,27.54109694585535,81.78838309331778,89.15610449122113,65.61800445404829,76.69459300682232,54.565817459297094,47.06362995071971,47.55162375391073,72.19813834160456,64.84178793838231,12.484810752513962,87.36596985535081,70.9970588319326,9.74030641499834,46.25508600340291,34.699555863842726,36.81089989218994,34.560964693946715,54.71185539900004,5.859534648771931,65.64517820477202,53.639975209775,14.358674442410372,65.50978545581725,86.94472855140253,52.38752178392552,75.77661229026666,76.31712310111493,94.73007631835273,36.146012628844666,68.20203439870554,80.06536984126524,88.24430708981605,66.55644868722095,79.78635227231571,69.21759259715029,40.09026488759028,51.23816993660959,31.711056398351268,62.71726045344827,38.17846944928828,39.96652850527564,44.922342092680296,24.19371849948735,31.185845665058224,28.085661290199365,44.36535699956145,78.66290895750353,52.02451969793042,25.567533162472785,64.4261977837844,16.486328536705088,55.449747385599714,21.669661240792045,18.717643464050525,34.051576166180936,74.18154714342829,67.7802872788231,63.02430646503346,45.6815257327744,79.41436114507535,40.868611270352545,71.35550614984264,87.07680251370033,47.973283825911125,36.59115748714501,75.40688466505556,8.365851249883587,17.604550576621065,79.44513372762226,63.42654657680388,20.800665538408314,77.29559773626048,94.32186762557147,26.25348034452374,11.28971509160638,40.68701895072159,22.958570196880057,46.34826740208875,31.616041763064885,51.88790602509006,46.90195992675575,48.42679901711546,55.21672903769433,71.41022668569825,78.95529807893955,39.04890045095356,22.004870662669816,85.24568320845037,55.86925791950861,46.75918643487997,43.38989781446925,65.90333461138654,88.13841537288525,34.03929341165862,23.11485945668357,52.37088592620448,45.13830072356813,43.14020656098499,23.970676946680026,16.404690665284157,23.512179410554154,27.24911071526394,28.522987968390325,24.164030716155015,49.9761263806802,40.86648820483473,10.575002573853439,61.437305680648045,72.93980481626024,89.09219023529836,29.073439648111226,84.14268982794066,62.356149269865384,85.12644853630582,93.44118240904368,94.08281904883214,63.28920012802912,62.522804493402234,59.00867986208075,65.47655453382873,87.45801926147487,65.17831704533444,44.215421554604774,26.201862514158243,85.71354235727944,14.213050646840898,18.1847765741793,69.50323146777423,25.474848351136092,40.76833065125486,23.059879244944703,65.68296081357437,44.51285194777442,71.0361075599799,45.925151933687744,80.43089460383081,23.500148765334785,46.33301008230622,71.25564034682856,53.055632606259735,50.68223592860746,75.5618856807201,76.75297046562143,9.015746375439072,21.04136456972395,84.75056458497,26.35200944622675,9.289972887804737,31.861941235292214,29.308277977185266,10.18995489243951,32.92526162848304,18.151166102866444,52.40061088799975,20.32711079736631,47.57208550941776,79.7363225242581,7.558414878912472,62.499318904295755,39.74383974976173,24.454281688202965,43.885744459130635,65.65702536653959,28.673216126868777,78.45776598712203,46.70617502627162,42.12886382025978,87.47967041898238,46.185624228781336,13.81431643015544,61.97277322688204,69.36708092324514,60.35742588887305,16.861527381649314,57.81486817826303,73.51416972681488,12.52068274040139,53.79862337045991,44.23913250597584,70.21403142342056,58.65203130844753,55.47214760073496,49.74793784037374,40.49980624759867,26.69555972586059,83.67389863973509,65.11960385650744,9.491842042119174,71.31713792202902,62.63958611353606,33.973688601287314,58.415041839010236,45.547291394380444,43.990051559452546,65.94073069322747,50.75908953457789,17.874040689381413,45.02420130975307,9.062956062009388,64.05697304029849,21.6218452580552,13.115709685300171,88.58143379679362,87.38688775070239,44.49161542603575,83.94485194161543,19.726334709104364,26.883422339416377,54.600163407586926,10.884423207895457,28.792950652994868,36.01425906896118,35.09152738955986,27.516514951821847,63.5012424023438,71.51622493308648,32.048392076219265,49.19134185890525,64.18559425333191,78.02885837610025,59.2210269661946,63.074840604816245,54.286266927185515,66.70202122018495,55.23110823126421,33.93375302643235,67.55878257820011,25.466824851929832,81.54210635407637,84.8795262939138,46.18412432609921,40.67719278469572,61.06975961946732,84.52247322895205,30.357312287822843,26.8154078434176,70.78926005254667,34.588626097773854,11.949917925983264,43.53777231856277,33.55179465282298,88.09733352865777,90.53957283255829,32.59154345324346,91.36185031050391,84.74686258224685,9.12062763518251,22.28128207007296,29.705287104966484,49.89335894745474,49.18098637190057,70.95391612780779,66.92415897889538,67.9718580503025,78.82341581823799,53.755414255911184,15.41938612749413,66.40524094167992,92.84590682838851,72.44232298167306,36.61126994450253,80.9338537000301,35.25994064434811,51.11570458129732,45.24911135657595,57.342149666123234,20.052944986240945,69.18632717887651,45.56292728039297,84.75640822671859,69.37874921421627,49.988513187074226,78.34196966066192,72.83556326960658,70.92570986687004,30.14524427160857,24.80100923290701,65.06689087429932,70.2405935047631,56.39395959677906,43.29004689276377,92.5825435403097,60.22732255847531,78.29705422308211,83.06490194791994,60.86116293914549,83.91864185959967,30.86769552124248,21.85468340831821,82.94805413321566,1.327614639434982,20.971507403138983,85.40642868087578,44.441672419982595,62.92454319685905,86.42934579051965,79.45097734471923,57.43754400455414,55.96276548807436,53.48610619723675,90.85388526327174,69.75959240775305,33.87392402013799,42.67883899561184,54.55216897261253,13.311153552843322,9.657776800024864,82.03496407950233,4.419334652385172,44.42476993222791,51.0163607554399,77.18316485607637,28.991514745889777,43.8973993386378,72.7354711244795,68.66663274119331,58.85799647956502,24.358682165914086,57.81955637020653,48.12172218343226,47.78014139970305,31.690571455868227,31.373258491810038,74.038176911446,62.386261223195184,21.1316470206151,47.023291675876905,46.13198422935592,78.86798665129074,66.46845273591309,14.652198587725461,76.07624715495588,84.95358356014275,30.638202144824284,72.13131477189252,57.59361445229227,40.29442993904529,44.41344749542199,47.629602551592285,24.144997063696458,66.04880926068283,8.26982349286415,79.75539913897572,55.740260540757106,50.48988289514975,24.779553579036055,42.68469312407702,89.11268331959832,25.474485500498186,63.688238857120744,20.54029638865822,1.1155370375727358,20.26401693374716,72.5006803168235,77.07045317901007,40.5446725732526,76.4870052609266,10.431163330260894,41.98880211545662,67.7185312387609,61.55683249996407,80.2591622909074,40.686972854577746,76.65616747761308,51.48732832762131,10.915020206199877,26.816950558803786,34.988685080703526,49.60281615991977,27.70406828121188,26.989795929934427,5.420202508656495,64.3290073892846,27.04602375581045,39.82435003548688,64.8196729187463,62.62919937808764,64.2578786452288,15.658926541808786,29.567822368084848,2.750052031801502,60.61983082950477,66.52121085495634,88.59121800990103,22.266019415867753,9.45434091253711,68.160757443993,82.75492050787305,72.28149060666141,61.25112800090018,71.91524723208896,41.79649557945689,66.39013095058156,86.81121862087608,86.09398123858301,18.812401803559826,47.93310943063482,81.84837731658222,62.81418088129077,33.19085875010593,23.278271411653698,76.20115013065427,39.83513336527949,46.69807659759353,49.146878432605085,57.82478056784625,71.63809276261442,41.551522486366345,15.591130016993674,38.06613362823229,47.25449803720011,38.05548040129994,76.29626841538462,41.50334493461626,15.13322804842387,20.435281177344862,22.49755722123941,23.063321639467226,20.69458950768608,65.57217134716304,3.8434946765748546,22.48157211276236,22.262230039309316,83.0666774297859,45.47190642760864,19.12371629996684,32.37068934430857,41.92520817508303,73.37862732057755,68.88446909691419,33.82185202741036,43.392324379344906,43.64718084927567,41.30793308843457,9.803440150914673,71.20921410399407,87.2528042413686,40.16334538675427,28.520874600836823,60.569985557399036,54.79260367649223,66.14442000919973,75.19705659038735,60.86517711701781,93.69857918396545,22.765246019849315,60.26559905976539,91.28795874627514,49.06965619861582,33.2974562540619,74.27683368907454,49.051044713800096,16.58150404630061,57.53624733408785,51.690071810604294,62.43202139345186,54.58516385042469,68.32143043854954,31.897447662177484,64.68898651520364,56.73616390114546,46.71826653687742,71.82302331369627,59.474123447412225,80.1363689879839,30.40202638611794,31.36023441540221,66.43155488658248,95.12907276190379,56.60973829299226,27.551822064901685,54.277891137967835,5.793387267326748,73.08811982022574,24.696429493186372,66.78354304438744,77.65712605590387,1.9818115141052006,75.01564346857738,48.0793443414891,66.01834740784798,78.23079141169303,69.43313841701072,40.20243928155857,30.650429586248595,15.251732339233289,35.33964011963888,16.652529043059083,68.66372787658236,55.0590494487769,41.55315950418571,6.937051669225411,88.83568603456962,79.2269406574021,17.883537801905753,25.061651855448527,39.95694064398688,68.35507791765075,39.88887706733431,35.15087431357706,53.50722780324954,41.417696944218264,15.422864885190899,33.57971308688158,84.68936726656457,76.23269177320552,82.90897601544033,54.35989009606404,7.71793937500997,73.1261404323642,24.968884219638433,38.81905568400225,45.07507983159228,84.81513671690203,8.391494496645603,55.47398428552388,62.5489376883015,45.9018122059411,26.857346962622934,76.58565129135934,80.35028083585286,88.20739197177734,74.60088421697105,61.14714385469107,57.386450536898124,13.025717824084428,20.200710490953714,81.98448942701054,78.66425020901666,22.361392069150142,52.89022748057481,33.52230571239314,47.55051285682849,51.5655542195925,32.73241276097768,48.49167884978909,37.59504431917517,97.19557046185417,54.32511066051809,43.80783156394369,50.123306263222695,50.861460348519486,77.4948841887181,3.55874021623658,84.91021643179045,77.74573629849898,53.677016330310614,42.26903957578094,23.05094093477807,57.03333028343028,82.42145383632233,41.00075323246319,40.60855914472834,15.467462107497969,49.356603323671806,54.10748231326355,56.743563636603454,71.06967969267808,81.16243467666229,91.38397158635024,60.58235500803641,86.28380945732792,60.956558666035136,38.00467889809303,56.902108490466844,56.76265993506822,87.91636691791905,24.026645685948804,83.0574840888246,18.429983697040537,7.2094898643190986,78.38308939055156,47.525465723951804,6.458609463403628,53.074732517291935,48.24265334631579,48.31726841708362,77.5429718789609,75.51297778555319,63.38159788080374,70.41537034170035,28.74641878011099,46.50922285120872,42.80108458879155,16.5096188967661,75.42428799795624,18.64462903192367,78.69825714706468,77.46681915080147,32.50636985830839,60.61248706187491,49.988249540290866,77.73798148430332,83.42429352304616,40.85083830704251,57.51008387053693,25.050767696742653,58.77705937399383,26.462524374303026,26.240993280905005,88.36479973702363,27.350310757327794,29.24743981412088,37.12708126292455,55.84206074643092,40.629647246747226,48.436789997692195,26.667178600568125,67.8184057555461,41.09423970332014,19.66988185398012,42.04569170958623,81.06505008959476,95.18208725900033,18.67635194554404,80.52108844693535,78.42212681289271,59.64480307135193,72.856487835323,56.361899652048436,59.28108224195121,31.04736722835279,65.5254555255791,55.34843344184478,74.17171648204996,33.78889021561748,28.403305035368742,91.25180146481559,36.97901842953081,35.528249435534775,69.56429968166721,37.382468592055055,39.05546575641218,20.831752783506232,44.93741095941317,42.83688316416952,29.183072770216537,52.32157429971899,81.97927777624876,57.7365307021621,66.75201932494998,26.406302157861063,14.155499429968973,8.738052436725603,44.20665636970016,70.2383040726872,54.32630884112616,44.43014325789471,18.535787137738385,15.662203599568866,65.20642538129002,75.49514856788883,66.33589892050786,22.884961772077,17.60237673533714,76.20786078883856,60.122965105529666,38.45532990299792,25.84697288717034,41.857356056126235,37.52328806318457,33.86626677959308,47.907026775907624,37.397649616497056,55.31466241574661,72.85375492766883,22.460474363425476,36.241340108282714,17.815149056239214,58.92512579091665,11.714072267498814,37.509177832152574,48.884297213404075,15.17491407378047,28.70531044609429,34.73619913441389,58.757017061807005,37.39286267540467,56.960644621570204,18.745940229150563,47.25498811220456,57.77627844119544,69.49033122119275,79.44729454081359,64.18116667238193,42.120361971876164,22.80428284636095,64.40484721667198,19.438940571695284,31.179485169516397,62.48032962077539,18.69319198151868,17.808236169214116,29.240385719679413,38.81191143422823,91.996624877544,10.62562965102928,25.680026551825662,26.19387309784152,64.46468710509285,82.39988321234074,64.52947609909378,38.94127674887745,35.37739040824921,58.13893972053691,35.034113981273855,37.65322400002371,85.89218875979583,44.37958189848305,65.28716994066318,58.930072188593485,66.2766815938224,47.29285226869417,69.8843598476306,36.95301313352481,46.701466936430734,64.02279239244902],"a":[5.085542710469282,13.697227240975792,4.978660803185404,18.814733605897885,14.438352106080504,6.359172233209427,5.402812845600651,5.322719840708019,14.302807669213799,10.163324955709236,3.6557456698049196,9.912906051280522,1.9001999737261865,3.5868757064378,4.209792622435948,4.297384206045991,14.691508586092773,8.151414015448012,13.02965817250389,19.858589947478457,11.815251861820109,1.8230894429414057,15.273399286492255,19.56749091505001,1.7730026136447519,16.800928095235356,17.566396869399643,5.353210092910965,7.011600314879205,4.206469213047566,17.361409416855803,17.509639468258857,6.0677804058878415,14.946960556378087,14.461540184377363,2.548523448964368,0.3553672394846741,4.630030642284506,18.199270176778178,9.388170893361,0.4764793319564209,11.080457089324485,1.495939037435905,18.336280277281915,0.6730246370061721,18.82053152120185,18.41448639758335,8.896254748279905,18.08772459156865,12.440241906536711,2.378107493776991,16.338366966722866,17.577014526868723,19.523717230120205,2.8348359136443158,1.1236653495950621,15.335125347446867,2.915114554034224,8.476777998878458,16.026047390143003,16.706173214264695,7.626397756793026,4.386200377306531,4.669793908886124,7.424402692122549,19.462541878293965,14.810719341684631,17.159341997308402,19.155415492142165,14.493825692836747,0.8129868107741922,17.960605954039618,12.904066421495589,4.79584910692243,4.628155111660606,16.46550777140346,2.7964357495113656,17.753369836334095,5.451236001823312,7.249981240618171,11.944280128974807,13.600708791841898,2.5979816508617715,13.134633868619252,18.620827590658557,18.992482199839348,10.459282939279877,18.1017697421399,3.3462627509668863,9.398276964412826,13.242748525258348,4.565800922226844,19.82775587037151,0.6452537419929127,16.131122833730917,17.35933594851573,16.37886042187975,5.0592288724922385,12.112990717006312,14.245159635444079,6.567210391480738,10.26247842920558,18.0117328677795,6.673853766888129,0.6187012913064649,3.9283014280900996,17.897551892757704,6.8363150033166065,6.2924620451687785,9.022630369264917,18.940819968004266,16.494360935972576,8.077332740696445,4.521595845004218,4.1713237257722025,13.038892040084189,5.977666902422247,16.76224071003464,14.765486530072396,2.6346669855414984,4.729718511766214,12.289485216161523,14.777746635073733,13.792465191093196,14.174860084843957,17.962886439472175,19.172302426150992,11.392790081026053,10.702408212674367,15.268360383522035,11.252184616750935,15.92167103008023,18.68929821953821,19.095146415262988,8.09898667672555,6.3419581005619285,17.141870403670513,5.912532936364894,3.4003636166231965,11.194664459158199,5.832857096491093,12.90099453636278,2.591040236324109,17.7597088929166,19.462183822214,9.178925397725578,17.501734216220267,9.050151104908437,11.559215614768554,2.999259369405327,0.34086379645358544,3.751246440604632,11.046662171558644,11.39174344120816,19.514216842963663,6.9183910308573715,14.465661225926837,2.5615742141461384,18.036576909772496,17.66308943309408,1.5016273047110928,11.208489514609589,4.247045339089812,6.274337521291362,8.56721186724232,8.731184404330294,5.440893629895638,12.806369444796015,9.959667541011488,5.521277527372455,13.293855278917718,2.9699089639094867,7.587412604624304,17.64029419500863,11.221685093140085,6.546531979580257,12.243593584161822,5.683576300066533,18.439359961894336,3.149406964748409,8.084733336009936,3.1290718045227406,9.2077154466493,12.01176999954681,3.1551788284612403,6.464984000957448,7.026020218146978,9.145517075353503,5.707371295989749,4.236346624496559,5.471874248212858,4.67816125732146,9.899795305171901,14.937925459832698,13.701307954278384,3.6829978948084063,8.624848495206031,9.87665525813667,9.752307800730788,3.2261931997388293,19.615182798465113,0.1712807358395052,5.554923537368515,13.566924209705373,11.33591347396055,16.42478583333858,1.1978134393627249,3.7094773872602005,13.901039979260958,19.072871137486448,13.179449739220823,0.9872424580389749,0.5818142926763681,7.035060155503965,12.425766034021223,10.862255998484844,12.873233190985767,3.34869363584001,19.224391970061646,6.374578568282772,8.176344807928949,17.077115411236008,7.648520414282616,16.345678162908413,11.442026548121117,15.384249870987778,8.276800286825754,1.3055488183483943,1.8180653868662944,13.589245911997052,8.104667492346449,10.344987215462975,16.40169132548085,10.502007243912143,3.8373771724741257,6.628852834051737,19.50704060349498,1.2340777647913148,15.862737165596116,14.926626510649523,14.309516552159192,18.699531737452904,12.67680445773352,13.352213996810827,18.460593329237906,6.411784617895071,9.24333284311273,4.159389422599502,3.9623882369915187,17.87213987138948,5.41990428319771,5.378795364903848,11.494010754840872,2.392397738039991,0.3320080524537916,15.828034823360628,3.5312490964157783,5.603324892311359,18.697779593807176,2.9528858383856926,13.857041467622505,11.566348157664525,0.699248954790983,4.937110106805909,10.751942231818848,18.979015302810822,2.9726080584486203,0.6253069362743124,9.5327306769118,19.78149266211545,18.17938134701519,3.928257125100414,5.039211095255793,14.477935396966961,8.743668790087007,6.121231254132371,12.621658203480042,11.085446007545148,17.448891474276287,13.829488405970443,10.804281230824731,12.276351434291648,12.16386112737609,3.9890438082016155,14.50160441450354,17.796730876966368,11.651923852500538,9.296745446501586,8.991948817078942,14.946656821254543,5.382753852386357,0.062404506950599625,9.447660938325697,10.662903436471613,15.578088070055243,2.251923642126692,17.792688404238586,10.546072120995218,11.429219624925032,10.99460682007221,12.923485220331647,3.6131304233291894,6.990621849730738,8.47117827340076,2.627065505298778,9.283954760822937,12.18513061821914,10.671004651129806,13.504486775704102,8.840288087129814,19.303688909844958,13.812308474115937,0.41133455923227036,2.1896867020124677,10.746964158700862,6.944910761054519,3.608524786227081,8.301553224807087,0.14979445708719563,16.010294597744974,0.9944344324733745,3.8824216066602,3.809156376038181,19.10828466028656,18.322179879228393,6.121213198615876,4.615681594813226,19.981976018359862,8.63033879287804,16.634769724725878,16.94862483440925,12.069487557358647,2.8570511439695645,2.587643059755189,2.5142176956064377,7.691050475994143,13.61131032998674,14.341843760300211,4.603676008617006,15.424068889937065,10.267160107550488,14.39490205681691,9.825341153126876,13.175951704159935,2.2434399339659894,15.464550010330761,2.2550944636722914,3.3700588098785023,9.369283381150492,6.983308040902845,0.745648094050182,4.8507331323132075,6.030681839018066,8.003474648712885,16.351460942907607,16.603053177241502,9.918520801515971,6.77578292120061,4.707471587059691,3.959124021526428,8.832626921999204,5.32416348397041,5.295578229428468,12.51115451192311,9.635803819367496,5.607029589608756,14.563355206490382,18.60487899906503,11.016281424185435,11.611212492296389,14.225601844979714,14.542815194349163,15.3263920582659,17.24449566769878,7.397378808436339,10.976124676386995,9.911210505775848,6.015049354128261,14.854244419452623,17.704731013199225,2.9260936970260154,2.0398634685478667,9.17180037331423,16.611345706015136,0.7910081851596784,1.908267274667681,15.222218858196769,13.726779228413971,14.124804386418518,3.7097597021699213,14.179005100862208,11.876457042077742,14.484760937405913,7.945138706975019,13.899825354799763,9.68753299233521,16.86624805446983,17.62033804477526,15.768871769622494,10.598308332686441,6.64868114939023,15.667778009348488,19.164603189301328,17.50171335537575,6.491938779773729,5.49911283195931,13.800396301625204,11.640420139927539,2.4733645450983177,16.26075393934711,14.199204242559755,8.98855741161535,6.38636136739704,7.40630151219694,10.5076533684808,19.119550102371356,15.959133386438896,5.937391749163781,1.7279793722519132,13.108093630785671,5.00737246288486,12.742658250794534,5.9229368050448805,15.28477338488576,12.360577815380829,5.244913664768593,6.253832876723542,0.9364386495619081,16.297951636569373,10.145282390882112,2.5266313091250714,9.850988252747669,11.040696974557918,0.8203479283134252,2.574708328669395,17.017835560883604,15.5738069033432,6.855080127145237,3.658770209854638,11.479427017506193,5.85795386041974,4.7071039273200554,1.311204072755059,8.448986126138148,6.401224040235527,18.055190182236057,8.648547016710744,18.993895853722673,12.660531310046563,14.779388340491337,10.6890007382649,13.647564837419255,0.9559156554829684,4.978655964863652,6.692059963286896,12.835801653920784,11.280258180735881,12.377214021557386,8.004009505155128,11.533233018477876,11.58150779402542,12.131132176987705,5.210824892545558,10.085980578159791,13.500669792201183,19.879127610301982,18.798638157252356,16.465081237331457,10.77723467826527,16.70113834033323,9.12641142824862,13.567995794633298,5.128653553280222,10.869058855033632,12.650803224073082,8.224275210538208,14.988364155610574,13.224042997425599,7.715405021919444,14.785239192443335,5.641637300005806,0.8716771926778444,12.718857668590232,8.60991198461777,4.325464842981099,16.51336143856936,14.306852412599387,8.311928619612988,11.079486828160876,7.850142185182016,10.44143070286809,5.19750389816763,10.034323129763871,2.98695359238498,8.959636410307063,16.67768483907684,4.373385307301971,7.162361098209851,14.009780663889071,16.096725310387825,6.882691572767721,15.759533841786531,15.335068823827482,15.769516518660085,13.3613417350718,18.87681090235433,3.7093717702991658,4.950134764853651,4.059754445032313,6.0557408148645075,5.181699087813083,19.655918593060683,7.046974424877095,14.855192346281498,19.650763300398168,10.51246603327959,16.33879417001275,19.865125369892013,3.5715303848101465,1.6387294616822246,11.990418637847956,11.713952719138252,9.334125916462273,10.728941047420278,8.112508524345682,16.68615781944286,8.155366116498026,19.210676623554352,19.54828404020349,8.054134287560748,18.74412801841236,8.372645996589071,19.07914877756201,11.502627526991716,13.413656720644592,9.395970112639919,19.111131493056433,2.450313852936059,18.756356925059627,4.991350717544085,1.621274856703132,14.961837610317223,3.2653475336365823,0.9668360336325321,9.82370035690391,4.081700732939892,11.905762357980038,16.823614649519048,10.358820094514375,12.177128345846263,14.751519740910584,13.345995434236265,18.741738815808038,18.855340684899843,8.09082320974638,3.1428039499727456,18.67906074922059,19.670725741772827,18.182518483882994,4.482813483335093,0.6722700531789849,12.167510453584821,18.967764898423532,0.13980841998889382,18.185950654508105,5.19149429442503,9.300044139770872,16.427182759355226,11.945384592758778,17.077131175153685,10.299502693225024,5.928692140951801,4.884716720165212,0.48014026563076406,6.843214577825201,15.821458604006606,1.863806140630997,12.886437406452519,12.782617523310783,6.363577502792248,1.3988644034728281,0.09922456797411439,19.271873632657368,19.64947690142378,1.151014843016438,16.3486001966518,9.883418996725752,17.361272973269564,10.676319204440272,0.7949971423338642,18.653725646672555,2.8450380228044425,5.121769339644233,18.66214482099165,16.801530561898854,11.67502747871671,10.168627959761722,14.778067728116362,13.049663295371463,10.368141440148534,3.769761704507526,19.243235749766537,19.150381674313067,4.769379577539334,3.8743697778120234,11.932169815888955,13.69521899599273,11.015715852074983,4.766345874709645,0.033245320597448114,10.197617284473527,18.99750825011961,9.946204541650182,11.027530469213293,16.812945408148106,19.927615081447925,16.865173474586598,8.969298517189618,11.50523032483501,14.298446954286938,9.465278697036181,6.669533705134363,4.557273896210718,1.6714727669393792,5.624506363194639,10.074685409173929,7.235742540998422,13.929666111009858,9.771988592788276,0.05445875758986585,13.812831983830819,15.156040200775841,4.199954181758447,8.759885279782488,0.3107614070846765,14.18199366909294,6.769720170923206,3.2548891742967134,0.3331193859096171,13.48381594974207,7.648691314439762,14.620684056481593,3.3689229152853972,1.5603608875341113,14.15400503904678,13.768830897307552,19.832687564294424,3.3769924637896898,6.681506736613905,5.455183613497314,6.0845179807237,15.970537899234799,11.114163725835242,4.504446832817348,3.2053418673794143,1.579009255490793,15.214468567720196,5.402642689783965,15.069093650410537,16.648679552876096,5.249817069560798,4.8135111413874165,10.676370264720049,2.021152455467341,10.429709848362458,8.061326743493321,10.846915177543845,4.194978664694045,3.780368269295913,5.324603455287424,14.911006878111426,4.344905373015533,13.87592530426402,2.887502585129784,12.105343733499417,3.055701442750882,11.228522703189693,6.472857984648588,2.4215539996685997,4.938066851405574,19.501524317171533,19.38762204488566,18.186363392014396,2.5890741209018087,3.529168321112386,2.690156911560866,1.9017300130532488,8.432512944480216,3.056745096521283,7.1918409108797965,7.088089185363864,4.807593970821453,18.16242533355867,3.345368597595013,5.114910638264782,9.20249606024585,0.6798967222540275,9.073535832829531,11.98250330769313,1.396904305700608,13.508237618964273,11.756230173530202,9.363055588735598,1.4921628485387028,11.00127605826303,4.721610443017199,19.73738605139692,14.238809485675059,0.39073274231229416,8.651642147134453,9.627944475427626,11.027069291924398,18.707201724196416,11.05601212884892,16.156532651894004,6.006930025186237,17.63250748127069,9.724321567398677,3.1742864452450803,16.482450952421516,18.11065216903866,7.496137055672314,9.299601547177243,19.834021111279668,6.112070509110388,9.666202767023409,18.143800764408326,16.85562380742098,13.375961989770051,12.865538336422446,17.136621535219398,9.027655004150699,11.995403040699767,5.399833742309643,7.85161831833169,0.38668808396498555,5.268688439919971,17.125704171798684,0.5070699760714215,10.983035785492032,0.15443207098046585,16.714359045411115,13.312854533967098,2.756466364483252,5.6093313551965185,15.492086023376665,1.7281303076394439,12.681515091722094,12.33115798981132,10.995625723734594,1.6863101844319983,17.413189361669595,5.099697036267745,10.087583864331755,5.6876950713915075,3.3507257417832026,10.275245921240472,16.04430490700353,17.13143716593858,9.711299921913428,1.935092766615143,14.615834068556154,17.04473362636159,3.7270155720705,5.540298795329259,14.564188118467566,3.5207890676583276,1.1334627627128135,8.841740545622404,1.2012749832150904,6.6621797031846075,17.529120776123726,6.685887012537806,6.120283287762711,3.050073645263627,18.957522743464537,2.275323011299073,12.08463283059971,16.515472917851454,13.7121353179942,13.223694355538758,6.616410732181408,14.390282504545354,6.362628712504397,17.535613557624302,3.355936279640881,2.3326185101162977,13.122713970025357,15.722632750182246,3.1139014748717653,18.249593235499887,3.4304058223319034,13.718740688857745,16.43648143834312,2.508908010828721,8.527131361462871,17.296530507068034,3.957623320267607,18.882654804737513,13.862122802435458,17.201087605972884,13.752593134489137,11.725783930159391,11.707536769240816,12.910374588463727,17.888296866791563,4.224703837971537,2.0705752183675674,2.560175304788257,19.635876122862527,7.107238029459295,9.663248989917847,3.985909862169552,0.8233476373188653,17.01045296714664,12.457930074319394,11.782437555546604,13.390479596964537,17.310012813924885,6.0324479297169775,19.398457479947627,19.182131307359708,13.059791589266787,3.418234453754687,8.633966223788505,19.704178003504282,2.303892933424181,6.8186330781410565,17.805857591830474,6.643399184864216,17.83027434557651,18.762899755626968,13.690030849666357,12.742277200040263,18.43508413741011,3.1343099179143863,0.16879885481460022,12.840443052109434,15.872376438173724,16.91452813234999,9.332590705630706,17.330921935868272,11.690511218340394,6.994121195674685,18.499276885546088,16.56572603957265,13.850385207630453,5.571022012698106,6.448134064649689,10.511890288738591,18.122111966550982,11.369290766881077,16.570420380863187,1.7663862605592717,16.146496795764772,4.182610848534742,3.95043848079744,19.437327851129762,16.465166857637648,17.17842793959902,9.12097896277678,2.8243440755282423,9.562050157349805,0.73200691374395,12.486178405754185,1.2073797969496303,5.868557811444086,0.404378250987949,17.7878198582389,14.591668378046968,0.17439466139558935,14.707589661716312,6.874172657741435,5.121334466259162,8.147437087209028,18.032577743857235,3.946723240348251,5.518409524832251,17.7900224063888,5.039748092750509,16.014296599894784,13.419727511516037,17.196188897807872,8.669662255846147,14.659445952505337,12.209816173800556,4.685952499599879,18.08230925556016,11.557225155297637,7.392672214843126,18.918324189037932,13.65460573232371,16.73335181351675,0.5869515327678299,11.098980373973472,13.127197016381924,18.258131877485884,5.844412112259785,14.925985993805305,5.039956000444272,15.581614071905125,9.636660278633883,12.884365237480804,7.453369699052281,13.475960668252135,11.56121466354068,16.490208760879682,4.46375671077869,13.524019497075424,5.365896770188741,17.87253401194558,18.221324066754782,17.559377231290007,4.784803963691955,8.431397768684942,11.8897776859846,2.3518337651371546,17.395436251418808,4.245743214372357,0.6763501776412317,6.297559296009165,15.404390839329324,1.488460038793975,7.916815442198293,11.573370978997461,13.071451896477523,3.993509797046091,5.161068210126136,18.19248338502268,14.153087496400719,11.489275896337485,10.008858447078218,12.041329476857104,7.6930948575664715,14.323469573500534,4.08368872353869,12.914233588258938,10.829401371607151,13.147645479071496,17.0351662820487,0.44741028639043723,7.227766024728157,15.44437642363067,16.537828245090896,11.756351551322734,17.23850267769133,5.974959675079199,8.48264906795512,14.457720973368229,6.957928880930497,13.88535393805451,16.412885908898247,11.879435307088485,11.599355974803274,8.835438845925033,15.72735862188952,6.819284534320924,2.3229527291090024,18.987174949877243,18.245399157138547,19.557802789955872,3.321737555288289,4.55659262519434,16.907655611079324,8.665511901058496,19.48118457689853,8.17208684214374,8.301910119156325,17.3609237871717,8.543606244727084,9.885258192978718,16.1763222976202,15.491005592191724,10.74753570866167,3.187286865036354,1.3052704388409886,17.291238609179626,8.198897424067098,16.361213403324783,4.141274871719061,14.013949521526555,15.327601290235528,7.966830679744721,16.60445604420907,4.890451421869946,18.415823359114594,3.313727989887316,13.622309461943,8.228618204471005,17.23289139904821,9.90665886523784,17.457409255854152,0.2788234134913825,11.258532194950174,3.426377317429572,16.359370458853654,4.939655335699995,17.827945091905633,19.304203826125303,13.120312434361075],"p":[0.7611532408951716,0.26363779115971275,0.929365869295073,0.5086303687190363,0.10821253216433036,0.4582643209755002,0.47451812730770415,0.10727869091784648,0.9988520127499223,0.24881714128343924,0.15159684991824052,0.35552694889734116,0.4038790589289607,0.7891650612243319,0.03296453163652702,0.6430013650211432,0.1707950185928273,0.6304800197343585,0.7622521994608931,0.6308219997737521,0.845348594398003,0.22602810427819997,0.4459467762987219,0.35585377744188285,0.3508606517481172,0.7963922080872827,0.3664562938097289,0.7231442981485843,0.35396973294221556,0.7806250160957957,0.7579523353205431,0.4817621418736424,0.3247035660185511,0.49776665407673804,0.8251343025001245,0.21522110836003083,0.6544213046367606,0.7176838242665473,0.6391581714732903,0.19803753906102028,0.3222907740129477,0.16641794681923705,0.2877028667409183,0.8056100738140475,0.7780789830909012,0.2365502168035596,0.734520341551119,0.8831810570901713,0.006404798624982444,0.2994403669876493,0.2235260251879314,0.09116001288137388,0.09795221131247689,0.9120156051694011,0.48494226019276954,0.8101944100775487,0.20282327815207912,0.8512001821158519,0.6945999799519382,0.4426644623214808,0.7402157386056964,0.1891680511218603,0.11810076547674542,0.41804991811752745,0.6208717432280968,0.36910534840333264,0.25017712625105304,0.6813947421980606,0.3187842092870412,0.5995199069931325,0.2784146496846749,0.8209290201401833,0.5661302076546064,0.5130929843485956,0.06881356572138486,0.645024928670838,0.5049777899501027,0.5446316267231188,0.6953380504564535,0.9560464724387392,0.6401410859718091,0.09760363544568307,0.5012344023226658,0.31841564596579963,0.23981875548059106,0.5463222851364704,0.11144287195135205,0.6293824727938933,0.39732482664550983,0.08074958957468237,0.36118608832207144,0.4910938440911923,0.9450611684978996,0.46905935938410503,0.882067079438916,0.005922095110483028,0.2828164566390876,0.7676039107302552,0.036427621517810316,0.1827187124099201,0.12768382730748717,0.45276039730191475,0.6373607144948277,0.06633792198349409,0.8810040162322883,0.3431555528245265,0.6958037481832078,0.3021055970074278,0.7240183079597273,0.3310360758315918,0.556207504838836,0.4419686973017858,0.12093358444001567,0.8156860572178934,0.8291294719766926,0.08263408049426357,0.02969370431180729,0.4351126986131877,0.3937445814757703,0.8123829894567136,0.07142215896561277,0.06742911011684916,0.46507353705721255,0.7721449067125434,0.14257176913392478,0.061894346821461665,0.09991858154431421,0.6505225180097216,0.2932000663720846,0.5181737267140434,0.9745220340463105,0.9156524898403757,0.25316106929205917,0.7577737571199266,0.35086384808501747,0.609138847346548,0.2788030520153517,0.35065672127435743,0.8270748992919197,0.5688924574552772,0.5802440843203829,0.7149709249100193,0.017237309873591622,0.26345245964073905,0.5973567297118261,0.11505740314580493,0.8854573837620274,0.33491006048693595,0.37992643043772745,0.9066817961524296,0.4579215429386707,0.9949135310357278,0.7130960621362783,0.7612832774777583,0.4302720902160917,0.03323946695780511,0.13487037000555224,0.3863981540964889,0.5252527668551916,0.11488167560784812,0.8837268513110521,0.12745441764950272,0.4919592985894998,0.9785679284123117,0.9572673392691957,0.8829959482525145,0.6909137600229136,0.701840114367424,0.544528982385384,0.7748097346487766,0.9838840604330552,0.05287408052665987,0.4454290506570564,0.3686783076806224,0.24983256846831892,0.8956046963343822,0.6023406552457871,0.7616064341023698,0.23425058775141427,0.3241497816600243,0.5927866418867991,0.13488914249958617,0.08118764224969977,0.32577981241626786,0.05610959630098056,0.7609529626291329,0.3622256096824046,0.6640296192757011,0.18914848112833993,0.9921352237046785,0.7507842132427425,0.5586240673926646,0.728002154805574,0.620754521708444,0.05807155091118954,0.09909685999357665,0.7946878881780104,0.021015934634787348,0.7983542327765196,0.6871817013899657,0.14653197993172573,0.4420767005699864,0.6858378507480936,0.9116157362610162,0.5974943153297045,0.6702169415367858,0.6391615414393843,0.12854530180306556,0.3092937966033322,0.3088482213930088,0.2664451777171839,0.8087908466133849,0.9024927380582581,0.662289585902778,0.33002044537312725,0.8511115661796977,0.04204534168922569,0.8406414951417776,0.44781326651862874,0.8155511721269237,0.0525858615134589,0.39109353102480005,0.7150136441730623,0.9403607891536918,0.08428170404257407,0.3074256378453042,0.6519413897130573,0.878418233810405,0.6319661055730668,0.3427795519987613,0.7069295675097735,0.08120405808804598,0.6586924591280345,0.07810603060193455,0.8095942687337621,0.5802367058411184,0.8025686741775637,0.4086918948490106,0.7921543649916303,0.5428549827750564,0.41680305098909165,0.29443509947476265,0.11718828869475062,0.8561580727284448,0.12832421331210497,0.005159680903005892,0.05080723442777879,0.32414323192152494,0.23284173869341718,0.89285179623226,0.4261648347326905,0.7624573526721838,0.325868829204214,0.9959937141399509,0.6786548103167183,0.5360126319111014,0.26196736669474285,0.8761622928518258,0.1361131597897538,0.9309647638979144,0.38353934524832556,0.11916499350848597,0.0949724802824563,0.6234647181453243,0.8176888699395046,0.6044153395649166,0.1510872443096003,0.5805114462860896,0.5308038252709208,0.10056793477630088,0.07981668299874767,0.21599675656723094,0.2090923435203067,0.408546659250435,0.6165936451057501,0.763689761101499,0.7652112653381182,0.9195650283551626,0.5427411348054687,0.17184114390197402,0.5586417115776419,0.42341449922127583,0.48557909539793465,0.335286267038843,0.5050747704757022,0.2764609886202003,0.8445324224646897,0.9603880816676962,0.5087080062378548,0.9799173507951575,0.33880742317494605,0.5347434666093747,0.6339807957520163,0.9246025627990253,0.8758333990289866,0.25068185252467456,0.4244033463107493,0.6112647805063134,0.7170246814712082,0.421656120212909,0.7219927251541445,0.7419748269417452,0.6022827728355058,0.1647051140812117,0.6424250346838172,0.25626585558404713,0.12899797465696405,0.5663588132279702,0.6018591801391626,0.07515004988700191,0.03342592481342277,0.7774995597236563,0.1940949636798528,0.3090756073363836,0.4833517455894534,0.006784807934788306,0.24507346576161182,0.81118054007043,0.8091486676327406,0.432501891028386,0.5617125207804696,0.5892878996069226,0.028306562796463153,0.7930197305041267,0.3545938244462692,0.5449750527444894,0.7344124107035968,0.7740310385944722,0.12531212253696045,0.586223325761863,0.06495207890321142,0.9202470822547104,0.45136611711761465,0.040320593382267456,0.8817794202352096,0.8841618936530453,0.9537299699328812,0.7815854919347194,0.45996150011836656,0.22362709901896638,0.13163884863818032,0.5921768129724903,0.7754677553703617,0.5152838111892943,0.9680433360177028,0.09351056292139015,0.07989812105566374,0.6909310980739143,0.15679185773414805,0.21351805541979374,0.8561194760027784,0.22480156230810944,0.8151140393405623,0.46601253817450905,0.12296785602620086,0.4346993433139392,0.9618569467315761,0.6973256258076901,0.9192877535752313,0.08816927820031917,0.029762977790351197,0.6371217206633031,0.06534492513247803,0.7346876830921734,0.5395516349089249,0.6445318305940413,0.22784962019073518,0.7893207520163994,0.6629082645418096,0.072685609064157,0.052142068595524504,0.04026334426325606,0.2385247309470726,0.5141654020710051,0.9279500576234039,0.41818397877505453,0.3006323228239389,0.18520534683669543,0.9641977451711816,0.05034010692784108,0.29225690378777447,0.6193508545997581,0.6499805236857481,0.4342211108871168,0.055808182485806324,0.6424837467026223,0.5821014145386403,0.09335930441635099,0.1414837289175619,0.9578712990612244,0.4131467736087868,0.4280363188879206,0.15018572639096361,0.19434411963046205,0.7567601675374294,0.8690946266612614,0.023317876863929055,0.04185374327824132,0.024008208144635113,0.19408909240307737,0.6071293832314322,0.2709889688600542,0.5203376016916226,0.14655926087481075,0.9730641187922993,0.34544754642395126,0.815239773508466,0.8773906213004519,0.6883314336759114,0.8714314502907436,0.4556146927508933,0.973406426546253,0.5041347275762031,0.3579876359029217,0.14208548966965728,0.8781464310034814,0.40825400706624704,0.9174603040917513,0.6553632322786718,0.6352562285831129,0.23482380769948819,0.07535996896141106,0.65244626135936,0.38936149220342076,0.5165328989439195,0.4167186180854958,0.8773173375556045,0.7675959411950892,0.1038154160686442,0.5627486520143101,0.8335790070136315,0.4370372103392066,0.07402031356002903,0.7346716092340315,0.30787243663808406,0.31230282417394806,0.22279091788548322,0.06975879858705913,0.6503265418109396,0.2510748603006199,0.1407049162619065,0.9176961891328643,0.6859819045665911,0.978125596049167,0.2420858333282161,0.30107339070312955,0.03789095078372662,0.09126440505401123,0.855069765399195,0.3100432323726161,0.37176929810552206,0.3850681427864391,0.1400156600222533,0.8473174447143255,0.16012912507795174,0.3506639650208836,0.6602949016471116,0.6955847034096192,0.6154092197637018,0.09025617591967605,0.4809749535567527,0.9164264590990419,0.3030094779885195,0.835935389449874,0.7654611018788444,0.646346829192936,0.13806290718817826,0.4598522290068221,0.6618719898372618,0.7585691599823678,0.526582198496578,0.649139165074236,0.07068618990072695,0.9070319734781218,0.5614429747174532,0.25058837867539063,0.5087845913869671,0.10150595496018822,0.9672463581896271,0.4459624496144634,0.019354391611479338,0.8203708248516788,0.17975797229398904,0.6079386263782038,0.4922052316733887,0.02728464224473659,0.6979230532453011,0.6125235325597322,0.1247913855949645,0.5786787939801967,0.6161535274013006,0.5944480909950078,0.17368861202979313,0.8032312829785644,0.2228883070788712,0.09043382670404077,0.7893465403579125,0.22601743523925277,0.29743999283215183,0.7633650570048325,0.3213465223192358,0.5406056182749055,0.9852172064772609,0.7676026676661871,0.07320643161081564,0.38851346886582516,0.35167367055211085,0.973312149338762,0.6451119971231098,0.4755403118998278,0.9017894477591046,0.03406370654645596,0.5556249950536694,0.5949288760589617,0.7439748429802482,0.5915129808238657,0.714181415290303,0.8821070114218057,0.7531585034544392,0.345894988190949,0.07270215466846586,0.8947563504361185,0.7099439627286339,0.631030517091181,0.8446921799334184,0.1813142161188448,0.6956196416954927,0.5569157635772901,0.44928943743203553,0.8448910590162448,0.3570421776868564,0.6381485495425661,0.06633912396742958,0.9263965042200959,0.17155469223657716,0.8439190171648032,0.04339731290003179,0.903654948192939,0.7007677267878718,0.8126193202189229,0.34479509983361156,0.2846526030983003,0.5062961879756218,0.11984616719447505,0.8587276159274921,0.4129584071161092,0.13448344375754062,0.21615579158004317,0.012775850836747926,0.2474713509591353,0.7963508265936559,0.6279128630642015,0.6896844563370919,0.8651522108181171,0.5948241602202884,0.21851428760930935,0.04425040219433196,0.1714427200745683,0.3119098351309819,0.16988146497150458,0.3754711198256646,0.9719201747894621,0.4031906853439273,0.2017634693189938,0.29974299899957146,0.7081450198469084,0.34830341270643284,0.11639817991809265,0.30764954338866635,0.04454084190980612,0.5710224498431953,0.9361588907273781,0.6594042572925594,0.4241169751596343,0.16248362780827086,0.8982835132342939,0.7136345079367281,0.5554239661733664,0.14520618316080336,0.6098354758361373,0.5699977171813688,0.3634484259184605,0.4180616664303882,0.3976818783920113,0.5494354640664874,0.7510888555334647,0.033084154772390795,0.5668656072700329,0.13348032474544058,0.3900316709569376,0.16182831587512858,0.3103894843292001,0.96182578175333,0.41509268224736195,0.6434403361468808,0.3265769783454002,0.6740543452934686,0.7156569679977935,0.5502761744942353,0.05955290974385474,0.6268756695331283,0.362197210581644,0.6668919395613886,0.5469496594657566,0.3032563725217916,0.8091724356351706,0.4040558319929246,0.06018905121234153,0.9187920434521435,0.8101479793253346,0.29250523957380214,0.6375520524681244,0.9969349922439625,0.7792984229952915,0.21056331886974156,0.2574020068023255,0.04815187160955703,0.3272567232356318,0.0991483943328142,0.06575773205865953,0.3419859697266663,0.02336800601157596,0.8713406273239179,0.8816733626840343,0.47190102940567713,0.8575871284693939,0.12542453951242383,0.59945625818171,0.62804522747684,0.55181330599652,0.955901840152267,0.35894945436654413,0.5554513709703746,0.15984678410357556,0.5623801801606771,0.6084700199452437,0.8250702101357459,0.7575283841448492,0.36459828605667055,0.9806510181105177,0.10010961425250486,0.792725179189707,0.8051329327010308,0.31591610574720264,0.2484716656374646,0.21076814211800032,0.3951037010621665,0.7449587575616115,0.11892913125904792,0.40220577987061734,0.2832215078290756,0.8507393014139941,0.9319520927014653,0.7842061989016016,0.7400000194446665,0.2888575324187881,0.19624932408952778,0.9202596862555621,0.6179207934732465,0.9595650020245778,0.9137110249962841,0.09854064811560415,0.5445708753428737,0.6519489401963336,0.7190263930291603,0.4142364064563955,0.5488138381142578,0.18980260255213843,0.7352344090837453,0.25619254309573547,0.11686187454133479,0.9225724470746928,0.15306712911067777,0.19743051339425133,0.54481895656772,0.6930870708227346,0.018250593475631183,0.45265829541494385,0.08196620781553277,0.4762191584411699,0.012670872311804748,0.22589552469892982,0.7720582277921446,0.732775414916055,0.3873062222036543,0.5342590833169794,0.34009533608890474,0.8615971961883586,0.08632590477305624,0.6548847389950858,0.9748657687876097,0.2607190773319694,0.49765533587640354,0.20318919224142618,0.6409084511895529,0.7684513756617564,0.6434322943817989,0.16643852697204564,0.26908949578694075,0.9661023126630903,0.6511503485814667,0.8406775341434451,0.6252742443075945,0.602651283086105,0.39170133225513504,0.1913834711850031,0.772674467912507,0.07607654402420239,0.1885795346076906,0.2580860249204755,0.9783326226295801,0.13997209846570335,0.8919018072997236,0.9380357546898892,0.9353715419614095,0.6915686806932995,0.42899798998335403,0.3658670405210336,0.6443578212750078,0.7618101845209095,0.4244344381749967,0.6694695988412751,0.6116154184518701,0.6220263532741317,0.780737569101879,0.9161145429178097,0.04350114591788912,0.36506056866673453,0.656717046476279,0.003508109772747625,0.9416811419098856,0.4118989022554538,0.21761687746534575,0.24524927834931431,0.7644706156085161,0.5798039714675118,0.23008548747052537,0.5065654298254829,0.19893461838139936,0.10146797293438126,0.7260608270118494,0.29546141132279113,0.5686409894918214,0.8276900941706735,0.18668890762528667,0.8926658291737986,0.573492541350026,0.9751172039018954,0.9161502441846658,0.19567412411852358,0.22740873468779932,0.013511755896301825,0.2959062150545342,0.44114954665072914,0.6915464491782499,0.663863795602673,0.4677409715762699,0.6159689185907287,0.3990498702807139,0.7996542257426069,0.5445050729831968,0.7565850939995038,0.5681506585838982,0.021595682758047463,0.6463692407738122,0.37860948709405795,0.48071084964240596,0.20647098091690586,0.6507855128876763,0.3632454762853514,0.8059075036976571,0.171323078577712,0.24281261212195648,0.4069184811152735,0.8551982675552099,0.2312185359491954,0.43627285356661805,0.13485471341742072,0.18618812833261655,0.06775653067387322,0.6871013672619741,0.9733153459435333,0.8717902320183581,0.6923795001099757,0.004827793089836163,0.2977320081815775,0.6852801898215524,0.8759826372255775,0.6323594844639184,0.9787223152055471,0.0728556303457013,0.7445319590700796,0.28900382423329396,0.9901803039558643,0.04831334255403785,0.8999726374748276,0.7543735511286322,0.9417403884252009,0.7913111982666963,0.2520472186124323,0.18508911241134207,0.4960468048502631,0.15692404318133968,0.5921780943494774,0.5374666395655887,0.8757857086334226,0.6857651929641078,0.16563088477299281,0.2485754344428175,0.20486981349544608,0.08455307952496582,0.8522368352202088,0.04185491832801502,0.09212227978686327,0.6807876638461485,0.6124394243039459,0.15897181163930663,0.06386088194819473,0.7078166536012032,0.8356122966618822,0.13977211310563686,0.02628402711684541,0.7388185940810805,0.4072037401916917,0.42805826164489647,0.9850224439284803,0.4926571945764575,0.8994880935240102,0.18110312805566076,0.2910541985047277,0.4898986674672612,0.795628965914313,0.20230344146638313,0.09058226716417073,0.30635483041739775,0.8875168710225292,0.9118263637770565,0.9366866910837821,0.7564335758372949,0.14083976859030667,0.8595269669222783,0.18951535885710147,0.011285613498414282,0.2702949982005751,0.7343258149959635,0.5278159312203337,0.20337823101499097,0.40074317935384984,0.4573105764280889,0.2634342199662445,0.7540722388449914,0.23626383475805923,0.20289844331235773,0.7048521414583016,0.18875555710604042,0.478766142474111,0.7698408806999897,0.025332971199700127,0.08111824007463486,0.8801538942216731,0.7351617868006655,0.9058593760724682,0.6854123123437346,0.7645902928079826,0.8566509946372778,0.0618594462751767,0.34439892938963657,0.7249828472357289,0.17468385805527742,0.6530066760513469,0.3734179234504533,0.8241995272384446,0.9832272362116259,0.36612155481911524,0.09548482388079371,0.41763483205348506,0.43783122349880554,0.4207189052152296,0.27629492319216786,0.20081539763344036,0.8016762926429413,0.44331047446287086,0.6090137580841217,0.27779492712436893,0.27277225877631994,0.15023461279620953,0.1114520090976352,0.9738992286563393,0.8696424399340525,0.48716015984869476,0.7558858342127834,0.028130194461313485,0.18048083545029248,0.17258304426783955,0.3441551784276551,0.7281157881472751,0.19215568623282508,0.5189667596983183,0.9003249163545628,0.5724387049942061,0.6240929958392638,0.34323580056930836,0.7488871414440608,0.1891555133649505,0.668566743002597,0.24951379656731554,0.8794182880007786,0.7344910312666444,0.8829789555973389,0.05535941339806816,0.19916861352572912,0.1570826467317059,0.48767490140015646,0.7349043558896593,0.7899339126877072,0.011019317925424987,0.91501454580871,0.24956480007098225,0.04792678940010342,0.08863887650552082,0.16401441628617808,0.727643561219778,0.5812384390014558,0.4468849699454196,0.6946801981328348,0.5932697431250409,0.6235236013882717,0.9006973560797047,0.695740118807691,0.07669316885717903,0.5812450530528135,0.37175415683649415,0.280899644593527,0.9643077576871373,0.11605056513178313,0.9513610788945825,0.6976853887027703,0.042613582665296024,0.5621495012383098,0.3885276805035578,0.9427728906989343,0.5512227395240838,0.8241957038759196,0.4690840496651183,0.20209528628526696,0.6115309268529443,0.9364544610941525,0.36738837646488576,0.7248507675253111,0.9303225090886029,0.2720713683543541,0.5099291668521451,0.10163122955561543,0.008028212731794993,0.2290466250803509,0.16637366762767614,0.6246844927887574,0.25022970601200734,0.41105376279253636,0.15450619018309664,0.7544422659902412,0.13571514859488287,0.5721609473326612,0.12998535369208564,0.8260619537403955,0.7273456718161182,0.874957173416929,0.09950770801731412,0.5084992333247085,0.652079657587376,0.05709671846362152,0.8616065137252411,0.10561519369729755,0.7472144427283407,0.027640172162079146,0.1758767400526926,0.9910445248153901,0.9020812828591191,0.6083062800239853,0.8675409888909194,0.5773244927248806,0.23526886702960326,0.9196812559275913,0.1746676553418567,0.8529716386209716,0.762188568147004,0.7296153745133107,0.03373577366504499,0.16898280421855905,0.6598268337953219,0.8598311446190618,0.26629362919506483,0.41841743441625834,0.15630940378663172,0.22585398343161867,0.5821721699424094,0.8251401471365054,0.40894027864554827,0.7101724892038987,0.49445975440705436]}
},{}],8:[function(require,module,exports){
module.exports={"expected":[15.638888700866383,21.689872760261615,34.35823190286053,20.01203789625537,21.304559297923937,6.251504854382727,30.87848055090148,29.757500568959824,29.2380727471783,14.378118906260276,17.39964998375673,7.217492205612243,4.6770670557100935,20.23883688551905,26.135038189296605,28.123872742216456,27.572611726019712,20.18610295434045,22.154709836366585,3.0203965545482916,14.861424682322543,29.72261520797113,15.16812361099624,30.65340327152669,12.938994405187936,24.805941189473067,24.360311787222336,20.89205755561002,26.771387478074814,6.952406646923982,8.053970803161393,10.352921505590233,23.476483826806692,31.462469950668716,42.91983041789996,9.430552277644042,19.655183110126355,36.127478984248384,32.91921449818266,20.11527398677175,13.964407644532592,14.823042558846272,21.469724051057348,24.333243906419472,21.058950074274193,12.086460930390746,25.79702182577988,9.475267874122704,30.13790079960482,6.382684724058543,33.56762578477151,24.8114619662363,14.412377307849376,27.264392476934134,12.261838090996399,30.01549685575787,14.223927736144812,24.323976779526877,22.658643663363918,21.09973092175696,26.32974021198978,17.4170246283011,13.340062388103917,11.050042231772723,21.783412420146227,10.825718546763822,14.566948091603958,32.63416319699863,20.47216860335255,22.73715466925502,8.903376648053051,5.409835583031706,17.363377387161883,21.312380910845377,21.835660334611028,27.744095717675556,24.696879504951127,33.752497190540694,6.9377434698908615,31.558102133008557,20.848630691037197,14.551027443076922,5.0419878974386805,16.57154761087328,14.468499757252133,36.72924178998282,47.32614156266436,9.913869649476773,17.838437598146122,4.396305532140792,18.239904034529967,10.82504359889292,37.342517554733696,23.40424434325448,34.13447133360046,28.40564605843346,12.260023828952058,25.518158492763398,37.98574544815408,26.259982576242987,5.675684872562125,24.550693778245403,17.28593103989062,40.24395393185243,26.692735005377116,16.53992345613948,4.017773348697449,41.991234562944975,14.873253740479047,27.192980308180125,3.9835927220310543,20.75017794852816,11.731735981042824,17.042904160997818,22.404019222769794,40.15525085016456,8.732167213562047,9.543519158684338,22.96779809276262,3.5264486567595887,27.933441527643573,28.435752465933753,14.779681486860266,26.5251612453037,10.136982879152528,3.7643751862955566,17.728863031375298,25.361519808941097,17.57166640481791,10.84504134665631,34.31393050838162,23.597743830473753,21.91532718864249,18.95881911144771,16.37344851371068,27.72872827896905,20.037482489616508,8.875271009004365,9.083599136759581,8.322157490546743,19.642579477010145,8.732748117015195,30.868562192968902,10.242821929413818,13.403018260956765,30.23625294466151,5.762794503708767,34.52615033143067,24.83626476342809,49.878517159716964,15.18297945061934,20.10692743303098,10.890253054325328,19.196649720004793,35.645558274655386,11.835173888144036,13.702794684016565,18.821676803885097,14.294486899956127,19.919947944360892,6.978494792790036,18.221224090375962,16.242589751835844,27.397590476815026,10.19061526930058,20.198893881053742,18.015795748887243,9.112583947402488,36.5314258642874,6.669074429739857,22.03327661141102,30.187373956300455,37.89047223946459,16.907698459989646,19.865315344504126,5.58778995749352,22.98577946182774,20.262982374536055,11.891355837033117,25.319892444241784,14.530195840882914,15.090483459380934,20.079427832379153,27.048711965132302,13.505543630260904,14.915278384425687,7.3537012820207925,18.46786005138832,11.539794333513811,17.288521149601387,26.839942527135385,14.696810802828532,9.122674132648651,12.22191846473858,17.558845520324287,11.256438362321655,17.148185122036463,18.85292373601521,19.94251053548873,37.29348379249677,10.28955341394321,7.289536488923161,18.652132779502875,12.554159169332115,17.327911606148223,27.40015535294219,22.934652856491468,22.234750609533517,7.564081391228754,37.277716083329864,20.692601079570103,16.97505133717584,23.821181373462835,19.55545264507637,16.10460219342361,20.413876001801373,17.12418232055512,12.468821392632567,8.870591755046592,8.86158119998425,41.799057931606995,22.148462862065198,6.115892584282789,18.122105477042854,10.124547754766812,13.369186126215872,35.74503793145213,21.442236884237307,24.942265822351544,25.105743576398073,22.94909642188499,20.114528700759596,44.565507452151195,39.468102139768654,7.689973252650823,27.652625330095372,17.32276738380525,41.95460834619506,20.855748360116255,2.9740181038821607,21.11363501000963,20.748054317087572,24.372479935625577,11.338367375241965,15.822853608232599,11.680098792257985,13.260266585385162,22.683557504895532,12.699181055001496,7.587695578931358,19.609517280145212,45.731831247627866,29.01186128727398,11.500062583919009,21.18466340489381,32.95660659671917,11.965057250846158,11.39671783801389,34.12575846874215,18.817308635418,10.277189128103815,38.70017796784526,30.443773646892733,15.456309769190515,32.327324289343096,21.160398858637013,29.76382496347007,33.38453045686056,20.945072340805694,25.088122170544892,22.108286341597143,17.584651507608356,41.37537696441993,42.38518067854538,17.285544685608347,24.184926445356115,9.310392756694966,1.4173761761311066,18.420535994622746,15.56952112194969,16.099864572458475,25.73709765999854,27.40583344399589,12.43480959999477,13.540483525231458,18.417103858208364,6.209323823176357,19.514247120437215,23.229920828175604,7.5917972944829355,6.879773821915754,16.510867096300117,14.341726138169328,28.04852090717778,12.346377139996205,24.19250669213766,24.51593419209278,8.534820526405788,27.8055198692801,13.68500285343972,25.150299196344328,19.130698394867814,29.2304350570988,27.656329798379055,21.35441885696442,13.798471524610726,10.739365751625543,10.849931169554823,20.37912031821029,33.53657319822597,23.273682724176336,32.26552604989015,16.190897319272665,38.43079227952969,13.545896979069134,23.333624055961298,9.807687387811445,38.86268607170615,20.690448257729308,20.409764491765337,21.747710043194544,8.937513597673368,4.994041404118311,24.722011589287064,26.30005729847365,7.307375816033471,38.78383695888443,21.45795897284066,9.9985453751334,16.458511320075484,14.237141629466684,19.938618150126565,11.150577697780651,16.533581944291203,17.288474858609558,26.885233642302893,3.7833357145618374,5.719514947654842,8.80399858051026,18.728225129953003,5.921025109598323,12.77160575508097,2.4864758865542202,8.272076565378534,7.029126806546322,30.784239002777483,41.70737719736914,7.900845933177777,14.766782465369273,23.210545686405812,36.129306160831064,12.860954613127703,19.200843399557648,12.620897625886144,9.467775624862345,18.379100503979217,25.37817520587371,23.7846469685841,10.502703146971037,15.332772691033021,5.397962075029813,27.596093025695303,17.931186469606644,16.336819401123464,19.82689245696822,13.450469363258563,20.81269184918764,12.165829479986295,24.762494781090528,15.459619845710662,19.519935472070415,15.34333182494502,16.108162564133263,6.900572263422091,30.57111457604696,12.678331851220616,18.28714841148593,22.77107273900158,3.985425764693497,39.866974416089114,9.377669946236313,18.64516130626703,10.627086520997281,35.280365236688674,10.782541648194297,22.90827174934215,13.822038065644831,28.368837554312616,30.16374569902723,23.136172991735506,42.64151728577828,23.167741779187452,19.21870902213943,34.4644283205204,28.205653162639386,18.57102278202979,11.134705691117336,19.079145659726912,22.035486945983838,19.012963604001897,30.595622670762076,24.78863705443367,6.601523736202107,9.610459151405852,8.914863339355186,20.895516281123825,15.671174898657819,17.28135058258191,12.206360789910818,7.9912626831350675,16.112599552085154,39.748495046611396,23.42857704822731,16.134790633323448,29.570555143754483,40.05440348021051,24.67918493071632,4.476358278473463,35.364072840893215,23.201709614523665,11.344223958315922,25.066127482959164,23.73790347140244,18.054607540696598,25.5388183198875,24.808150485554172,35.494852566847726,16.26006095248116,29.76192482797483,13.407334773139212,27.905086397790335,26.70777409893083,10.17435692771949,12.004275646238442,23.66158279552625,13.799064469809798,15.338819367323326,22.1198540658018,12.44725218707532,8.26875316565557,8.088407392842829,25.74017193932663,34.246678946624186,6.515198816531192,15.046997609648077,13.9599236295373,6.982236214954468,16.633344828248802,19.465350336308614,19.252882280751002,30.48847213530332,20.40951293650655,25.340825918864063,33.5267018354611,20.646347998202742,19.37364282326892,31.495828456048258,18.684339420085024,21.493895176415858,5.04013782010837,14.676809075404066,22.075906371525512,26.90419882555319,30.006643262034217,18.44018074812717,5.0390105239078515,20.846028062846166,32.55164103790814,56.11953401755016,28.567917685779932,19.470895535074316,36.707566230443526,6.346763114706356,24.769244894494953,8.61775737475965,36.17300583346571,8.110048283035182,9.791434712678278,16.77860848022911,21.76187272926413,23.714628553667264,15.194283707697142,12.493478465298665,20.405673775582073,12.515516624260702,26.32546701848093,26.19352453416112,31.29772240655438,17.02592730765347,4.125462486019286,11.876011638178145,23.605320519831427,19.13851710179441,7.008391770456912,17.776165140325062,30.26395041386439,26.226590075418287,24.025169143802167,10.287679773088708,34.52969602984854,29.49797417019093,17.056701049457644,18.37083654561555,15.563027083767379,7.085589161099687,1.7088069802404355,23.470116647844687,39.587481437125454,10.994228088061632,37.68585275943759,30.354219877805615,34.267875875832196,22.271670742504888,17.16938823073704,22.769248873868392,15.544099192314091,16.023081427544376,24.690241834828967,14.79819206305244,5.508597409818147,16.38124359643417,14.752501804831219,16.302044294673355,15.315076097258114,57.47436031801804,41.73853827962773,10.782476287031596,5.956457529813239,18.499144807666543,8.012581514994787,51.41365055812368,34.5418145440743,34.606159794338325,11.07646709180306,51.63993864081996,17.520563674724993,14.5798071976951,13.489538971094188,32.61478904608185,9.360487507382585,11.952560103704545,14.177822383376338,11.484508666594756,8.155629980833615,34.850967034108166,14.907275730146269,29.292872606926277,20.14584426066835,9.736694954623458,16.25336790756963,28.880071604037713,22.41037965421876,9.956976912254403,27.528475477399127,9.996778271088719,44.88847548724448,19.497951039982333,12.686221476109417,19.836156590098327,26.811293018963845,24.33178363538056,36.22588555841605,10.358119868832077,21.864415163907942,19.83407581063055,9.742064447083768,23.702251095731434,25.781833005487563,18.111049004396435,19.033293972206355,35.983600331591276,4.7680984000174895,36.66882657880591,7.801576279275394,1.6892357579120048,27.096651500406,40.07873715325387,22.885695248793883,25.751308364537437,16.133187636091915,11.43092694037109,13.865299623767736,11.960984610003651,18.810600225950406,17.60080708352257,14.742640804329618,28.555739282225076,42.536964821083785,17.440105268821117,2.27599643955881,8.580747909875114,27.45322582083091,21.19271955703364,17.402073115098226,19.261871008363848,34.384742302389085,21.713920909697773,6.939275375992696,14.592089204950547,2.542221156734958,15.289757636778916,29.91372217286329,43.13276166584861,11.009598627368277,19.225218720599543,33.42760351508426,29.88230356890969,20.199923901068708,19.384637457051948,20.434009401048733,26.3254384936414,20.331358101382268,20.29073161137271,21.683322480722225,7.140959095150009,3.491573382385421,40.75677705203991,16.19559674254773,32.7279096565321,24.081407120671287,9.829693428742754,38.787067508063316,12.377358271955924,17.160414807643598,9.80318748981982,7.394032536332863,18.65558147520401,13.257575361497507,28.211660774209435,11.229819466941946,3.6144729676390055,25.42988882645536,21.88741091049494,13.310744877394,13.27514630552282,32.26510142309217,11.61237982870309,15.326998533620369,48.545352086536944,31.628430532452114,4.111376047084494,32.24665790464752,20.780953917357934,36.73766294091318,9.655931304810547,2.532166247931257,15.083116771787253,39.57251861803156,15.744348184115701,24.470442144637694,15.324895284976165,1.9016458189569334,14.73970685584232,9.836725288118377,21.84438511416392,17.417632618278848,49.856456824017805,41.21268181093176,38.19923882699979,35.5744167934051,39.769626903174085,14.373167124930347,17.819681150614542,35.955131353347625,27.979272354507312,12.511422030580192,4.444752840845911,3.701941037464751,16.077243654243254,41.10858939362208,31.816092507430547,6.408729302199637,18.51639765730333,15.901819332955663,10.237858763476947,21.38892284023268,19.347092749240414,18.52105454793903,30.00907696872172,21.596461626006167,27.862320462201126,37.336098399739626,44.810422737700094,6.9023615855342335,13.144547469326683,12.29530298169229,8.543495579279089,23.955794538414626,30.842869445093207,18.188020910717714,21.231676453866765,9.63693487097246,12.080814634004577,20.6589887171827,6.044700323929014,9.880936969723328,12.327503794213674,14.638718951311025,22.57075496785961,17.511213290881194,21.06032389263325,18.846752930830547,27.82589732845594,24.739127894578598,41.30249027607982,21.84639666371137,24.820002800056905,51.769718006442204,6.655127645922112,12.985142415763084,20.52773867389085,22.34550518082112,42.05729056069376,21.522669837642002,8.705828725969003,22.333449820176217,33.35891997364824,14.446877468250486,36.09341685707218,18.622143686816397,2.850667365111644,11.262230009387697,9.776849178903143,33.752612447710455,6.462064631963079,19.161977376472638,12.962207514809494,15.747994987615009,25.648943065732183,38.57145289424899,17.672093504838532,18.44671218574439,26.58801913595309,20.459686978920367,12.917616587168135,2.8002087801345796,8.980360086063744,2.48936108470382,17.855072760102797,14.172014536865284,7.476198139103794,9.90274311540062,15.259389986394503,14.527766313382868,21.921101774117744,15.826893625912653,12.542539613756011,17.477417505038215,30.35613102948791,27.560387591033898,13.140983930072096,37.53583104245823,46.27632016531254,48.20711820176936,35.90161140069442,48.87300703014307,7.574222454692595,28.42474075601235,20.734420747261243,10.226957093131972,18.24657040950267,15.182977599170002,10.798676975401001,26.11345489397443,5.04737473210714,23.983380093174084,19.320669042892227,40.28232961843927,12.92356531154482,1.7728427313146118,41.85963923740533,8.44498993658544,7.745335706490745,45.17391270769754,29.181711907922764,9.521702265004224,16.75876019696517,19.680408916528744,10.23322491571312,9.211135357431836,21.24494777133072,37.32925010257276,21.55567930632986,16.62975607183033,14.609122678446518,20.34568410331887,16.98715370131554,15.350849724123602,36.17223571417769,38.33377200346611,21.262544576574545,8.678524294971186,27.34778463442157,22.206972152078443,15.126440793295878,8.621853523822768,49.03159393965835,13.504176376024153,24.373939049595254,15.327914581980814,32.681464751659576,17.569706410068406,43.608687659815246,12.75526746617249,11.505234087891562,11.341075030771236,25.247781059284833,27.16632785555216,35.69402253207657,28.192939667603923,28.615843183490536,12.567967610896066,23.66422940028276,23.841082430200427,24.864550286660332,21.132605092847133,11.449565167707282,15.696246060266386,24.495466228175395,10.977780499419389,20.484002630079562,20.392812610118668,10.963148228295923,5.667712255630385,35.98759029595831,13.052281100130038,18.48013584104937,12.922240896162775,6.663639670754794,8.48686326031583,2.719481519886262,21.71369911911427,46.530380679267836,39.923148136681704,30.367541593855517,9.614390376619964,41.214510623831906,16.159780269558517,8.925216624173117,22.695276245200635,22.190902180095865,24.86760735775102,13.7125993169524,23.784227062331194,19.665463314271992,29.15438922118455,19.845745394568358,13.882037517126538,15.560128277332817,5.139911753961843,22.66904587846148,16.299226514604133,18.333138308446998,37.38663342981205,22.92518037248203,38.83547092826599,23.608862657467988,24.569076584173345,3.439327180794714,22.430755601825414,30.16386437799777,8.755038559496917,39.733922361279994,32.75549124400861,25.738271385168897,4.851009435309242,2.9035222188495915,14.490586360362252,9.493866840266616,38.09870032886082,19.6215001738501,7.990102863830883,15.826134160304697,0.4462625643717147,13.06126616543196,17.201581602372478,50.432663879234966,36.272447068823084,17.59482684068359,7.786056692780675,30.606933800183683,15.482838866300195,3.250330863597523,25.818037391511602,9.597719334535714,44.25956796151516,14.788814817635458,10.016791041414841,4.6774177941385595,34.47249757237014,14.596761258810442,19.55417369695082,11.663102913612667,6.636651458574468,14.768845985848618,2.363436851183735,3.1295890023107282,38.26440008538458,7.287064905570803,3.2474952728827695,29.200663726562922,25.551191276136855,17.956466900345625,38.210646478481245,10.33847617893868,18.195183552851766,4.618501123763277,17.23582873084135,28.651520542841325,12.984601012626946,11.309897231432071,35.733883920809895,22.16032436888212,20.69562455658314,24.131202725076637,11.781264329726001,35.3235112637649,30.400870705918777,38.83865711560077,24.03311465589134,29.826161998514873,43.933539726156624,13.01459261605212,19.777478420173434,27.053076609386125,4.069313854153219,46.718031504880116,29.062601595464212,35.82646730287799,17.007438524546046,11.75510827114647,19.494190655802008,10.026127223264638,13.513398996784549,30.387713165176308,18.89619049883263,34.914874961784676,40.10135814622231,14.603522673564875,14.979724127023772,17.84604088452076,45.353705301292734,20.667535968960586,41.54972390405667,34.10491892652827,34.06462352338973,32.90427459120269,27.32061434554165,8.527043736502671,29.82342257250079,34.44119076841004,30.889023438636514,15.192146312888486,5.984073660610122,25.34736643597165,7.51628877804348,38.55735096395935,9.046965181424195,12.102900002809843,42.365496175929664,10.595981661487986,41.13689408805082,24.916504678041115,1.202854233283231,6.307355437048029,13.580862293685856,5.347762153027585,28.963413096671033,35.4971674663025,33.7403652184067,17.249738919057755,31.559433476924355,18.54940330656292,31.305926105227716,33.820930001405195,37.99408064371141,14.678345353572563,6.432963839575344,19.624491003027547,17.264948499958773,18.441169785121154,31.332327442350614,29.836342774564876,5.538382283105735,14.351232091073202,16.83073984697941,7.78122535129571,19.18230235011525,6.080182785673349,24.364622993675102,30.24678791485617,5.5522116332136875,18.804251016394467,11.714774431013378,6.901733667867352,27.628392945846862,19.021097643709783,25.113859987397962,15.144356225737438,24.68347263851001],"b":[16.16525737133401,28.978886577386863,40.80793535772008,26.06005921938258,33.453369034192406,39.22355349121888,41.372067034429705,34.90272194208896,37.552827567966574,21.6290686389964,17.699196202219518,12.552216013305944,4.771688138168306,21.776772727589382,42.02246336756695,33.01199312766965,28.43125661409319,25.10312467011523,35.07941806489076,18.36586625822128,15.788962534954575,35.007111549581246,19.605562792040224,36.442681494035426,34.52056952280703,52.0560582651336,25.272668087669402,28.532257536905558,41.753099343762,9.988732420309812,9.517561621431483,41.93769200479993,37.89821764363172,32.32206512624498,57.45531961949544,11.183375905148383,35.77012325291564,42.464397307241946,54.44726731658115,20.16061835985139,16.817082975424142,43.4680246667614,41.84321826693825,36.251799762225524,26.36614126913407,21.769357879538518,29.357836269442636,23.39699873303421,39.272297902823595,8.549356662111794,35.20370027266115,28.452296927116194,23.857217127486628,45.49417752212307,21.906826299002606,31.644142498994565,36.45227002702327,41.908032344401704,22.950009447726924,32.47463043812125,31.58824151339534,41.677110131659944,20.766851656079975,28.293048990858054,35.32735058434201,28.716060679496103,18.94879606600575,42.9604524146783,23.518269394058716,35.43891760397181,11.147930095845844,26.899372717494447,28.782448007633718,30.266084221743597,35.382832390418756,37.77060694957739,31.489394644273382,38.328307899158325,29.896882480332287,34.08677989677943,26.086853129644435,25.040777927694478,5.051357588661833,36.687313604942176,24.674397403685518,37.11037626478519,49.93260707244313,26.581922877716064,40.831933862632695,14.779792740777111,19.598977174344615,19.23921811901936,38.89853194527678,29.72157513518275,49.328533506207506,43.343283714725885,12.952647229763311,30.57344949074397,40.82390287362693,27.955644873290176,11.38653652046914,28.010030832633852,40.54539686774871,54.438152863641015,54.90038339691046,25.55057109692609,10.705311370029587,42.94637626509126,17.689269879987254,39.998908619574564,10.553247776235795,43.4358465696143,23.682625200340585,21.336513828924865,46.47838107441248,45.58022920170245,25.867625358736387,27.97386460244208,28.523734251876277,15.254720586835479,30.06177945002895,47.183058010362906,25.635773539537006,33.82413650147227,27.744896174930822,6.946001016511554,23.665206814621882,32.43249390312792,38.86397207524372,39.222575884862444,38.95168473212371,49.265668473963174,23.44521541298625,21.495014195518053,27.664420931705962,37.593412844177294,23.70456778591944,11.041692530905497,12.965461303427443,8.8432216368418,33.25233834885705,13.799395811704986,39.46705160200031,12.048517558843574,39.00892674625784,31.895656383677164,17.184955693158678,45.20028851063268,45.25018741980121,51.09639317092941,42.68538945454735,38.87712734284197,13.992904665908856,20.888009252684082,37.32551529669556,13.902555070213559,26.870356224158535,23.552169664395027,15.502152161735644,25.818092631461074,29.043409792970316,38.47064745142161,32.85623391790145,31.872788523183672,21.511548498461345,26.99374052797104,20.462017834515848,9.499168496391093,39.86206631371827,7.466508227698991,30.33109645470296,36.32317398769176,40.019969974993245,49.89181040467108,19.915320333033975,12.042818907418429,46.70166783858565,22.440036653342545,23.52232237832824,36.30866835573101,17.2776399546834,38.176833420349624,26.669165469732697,38.026053447599296,17.564460957853896,15.28880572651694,9.501436009273597,20.38125953025165,13.71514540715023,35.150904990595194,44.115185925043264,16.15365457859386,14.121939392058156,27.09252527297446,25.74249282197759,11.760841996757728,25.458964903161323,19.4907317293043,47.122834222550516,42.902071981420136,31.492827604174668,28.39725805049496,19.79153805438525,12.78185958539184,18.169642879324446,37.17244355994245,49.929466647166365,24.810163963303317,12.523805061015905,37.760175845016235,27.13840618141685,27.151810482748402,41.6167687491124,24.643465805683668,17.31384560417461,21.898119701166276,24.233822156131765,26.78197802484891,25.921163309650208,30.2808892354576,47.131570891558624,54.86504399855744,10.85790731177822,42.55374488947818,42.41313356984853,19.111631744119553,38.27210214966516,25.491529323912687,51.777796748800995,40.805024287294515,48.173405843853345,21.088254880160573,52.84542344038961,45.816721004449676,21.16353510638873,29.08088520758241,37.673234989190796,42.06828394916215,40.223871982793476,3.3807495059779624,33.34350887910684,30.888632256139168,38.571058497676454,29.61086565982805,25.88421926233618,13.745737234540565,16.844051039420194,25.104022646758967,14.634617860201956,35.567050337724424,32.06403761900031,50.715895257429864,47.621231804942525,11.741634931253628,27.58267920247631,39.341963156884745,14.04378435688956,31.731400330662012,37.73238090227846,24.75710567794687,21.309763776517876,50.75086868116263,33.13126431067395,31.69651616764717,35.04417951045962,21.654576127891502,37.03454486756631,38.1853053553928,27.169832165049147,42.26742360123851,28.188709540552246,25.049354106843733,54.93080045336862,49.47326911811672,21.313138849828327,28.250723025698527,42.48066026745882,2.808799338185519,22.718648859631898,16.094157017370065,31.665992048250892,31.96447052055656,55.69640553108826,14.808833419102191,29.06436712373636,18.8692544917105,18.65291851859955,31.85382176127024,32.74691274256798,20.09955239583865,7.085992691769891,17.25189467120495,37.77140101098694,46.0889291749912,46.73083654411277,31.49583795582285,32.347746589033825,8.698499524254327,32.13871965331954,18.372460995464223,29.315967645856205,33.31524134434463,29.399368692080024,29.064779661370533,40.37089930903051,26.316221148731678,19.391119414345145,11.470202090410439,30.24745591356213,52.10343135198022,41.97705635021528,40.90709521909044,30.54702620015728,41.505687166441945,18.294475402629384,27.937012600018505,15.724839799224313,44.585097197408565,23.50642193870501,43.78146298173514,32.47924079215893,21.866633228571317,9.3787323718401,34.15300380471834,35.25097433539658,19.634127826519936,41.17738924012501,26.374825471213903,26.64144861414806,26.666047168866182,15.865807909976493,21.02534147371059,29.55592995358431,19.378254781774874,32.975580277654295,29.83618771220803,5.625477314541332,30.06128656552385,16.544494277865603,18.827329766196506,29.38583767160871,24.629621084726555,3.3737068271725024,8.314266040481382,9.767008186591255,35.05863842809764,42.004463448491855,11.529177789857211,18.925474073803883,53.29135406727946,48.134114002374844,15.349942691625271,42.80531884987767,14.563910417522564,17.812335206541093,41.199869967369814,49.99903496496294,31.33383974741738,21.8153353680243,43.82532414540254,36.92594161856824,42.32670051586046,22.54719121509134,36.78518937858301,22.41502493205565,34.32095102087709,24.296621028529795,18.928186052474473,29.6707301875861,28.214297901646418,30.3804523566429,26.692064173861887,16.442473958965053,18.841588236755207,37.530384004861446,33.001797675256114,20.462448615581053,24.55644118548181,5.108960303241563,45.896686919143974,22.64633609933049,18.76744341495058,11.022406102530113,49.8299748012452,14.722809389564215,31.56324698508613,32.64427444910025,31.20094148669754,31.083504932652225,30.874624772730705,46.04021436165563,25.075147016502452,26.903354696994317,51.10004090090281,32.91913280350141,22.37946895300044,31.441619682588207,27.69358304057692,35.79269346583306,20.378007935638074,31.253201555389484,45.29796761365985,36.66125484281179,19.453986382228486,13.514362496485358,23.83383145366412,16.14823018145693,19.64444819744439,22.43478490654426,12.697537767371117,18.97696349015044,45.18060471978107,48.39477963903814,16.96288292496265,53.24239987727155,42.175203535927935,30.856900566520306,26.368916417731757,46.802423029029505,35.81439685144544,31.34524905452232,25.35534673943272,34.99153610226733,26.21897974511475,46.778681806093545,38.894073134362245,46.92419515736135,27.002564958671424,34.32086187408579,14.96739511055222,30.60075860154855,41.0512492318478,10.2289706620215,19.681819275480066,29.559062665825536,14.79774905078948,15.661307640285074,22.942263971028204,22.048353877782354,12.181824859841544,13.127296048023851,39.6819033507541,47.46088278824432,12.390540686021003,16.020085263700274,17.509480322003448,8.610959613507024,27.151813459197882,28.183311938027195,50.260429684256685,33.20330623763847,28.16958728895632,39.113660085151196,41.34607487035458,28.75329835867405,29.57717850370389,32.63283382571034,44.183237759677105,33.38057409009079,33.99457220017065,37.76085076109399,24.30495198042243,27.80827138549314,41.77565879961814,18.54641604322245,21.158885297697722,25.948955413153943,45.70797021626429,56.49648210041333,47.98715924398178,21.680297481018854,54.17901692133625,6.684731044593182,33.7281639009971,15.871763999084099,38.84394352524758,9.981916092658714,10.88854441182427,45.89277492063305,30.5682392322051,27.874348998574305,50.268206214806796,16.14676342271862,22.813409055261715,43.689244833135184,39.55877796422502,47.10155130329211,41.298869605128395,19.651753987360742,4.128998097541365,37.77608995412285,43.08230203430361,25.73620228765187,21.155907021708828,18.22243556279109,37.46659679997403,39.733610986768326,34.59006252923175,39.9627808920733,46.14308341877082,52.0930222546134,36.05938572860623,26.18513942631165,31.947520231420956,7.704867743248673,1.8570379863987263,32.196850786961065,40.22767996167154,11.102161408620752,44.014691864982765,46.0004109167873,51.190198041966596,26.36478809616918,20.07163577850224,40.21563706571483,28.580980952783204,22.551116709042823,40.13197299642832,47.54394224370702,21.31284866885844,37.77043717664615,40.41138358716653,24.179358602929884,29.105732048761382,59.30026787289532,56.734516851960706,32.59548123280055,12.18614858391562,21.169930873564,24.19532418892854,52.156177297275775,39.299901261803385,52.30119463964583,15.02295257264576,52.382086537623024,25.7791442073122,25.605166731904944,18.74214135681903,46.63562673925735,44.71450023064389,31.751741611068717,41.01407683900769,12.987419777085076,42.651594438059306,35.271839521605266,20.587983700306008,48.856729940449206,23.706456855333265,40.067144236819544,16.36030008685497,45.84167344465068,48.389426906515126,15.949451689246414,32.18642508076688,10.003203200913383,54.258395119768196,42.78420633756527,19.708959137559937,22.95349758348768,30.985879929166046,57.52693994609991,37.36437973497007,13.440523783128636,29.675300272985353,24.640820402827686,12.663333962347286,26.002620528408563,26.083797142511607,46.172153683374425,19.723001845552346,57.43690861795886,17.312789709472977,36.77968284663593,22.305183980675693,7.249924795200098,55.401031831614006,53.67962516037815,49.15234976683651,30.395273393013813,26.456304739679553,14.01465844487991,23.26133369155344,17.768712721465036,27.588705872842798,17.81401531064062,32.475810407894954,55.386743210329435,43.00498347125946,32.23159974815457,39.07775784548069,14.950074728680391,52.08921456680423,46.43984141231248,44.52641908729693,22.506340308214178,46.96115667493112,38.51888967948862,20.38077523857571,38.67675634164995,27.897372228353237,36.3905173268508,41.25698453207028,44.24048152238376,21.308007943025476,31.70447485062913,56.81482059333864,38.9770199201542,20.406843102137543,30.785746547370895,50.89639182617775,29.852161262480376,30.08257346062614,24.897210919911448,40.64503397035526,7.7956792098389505,11.70371632442166,47.47586159456114,31.479769561392196,37.456864172188915,51.39332947343098,27.946218225671508,43.065454230206115,20.946072173141843,21.60216127457771,12.354132435367578,10.98691091744437,20.127417248884818,29.38519133466037,33.03025927062821,25.455334460777557,3.8576423993275144,40.805204917692166,26.44923613074306,20.940202829523038,28.437328581277416,39.066494595465656,18.56927933498418,24.649020087229555,51.791940040808306,39.36726616443786,4.290002842305651,54.29359351959345,21.678805307740035,41.48687924584315,42.35057911337239,24.12690721365162,31.098979984205474,45.24550031623541,25.112301207651754,28.020314915775806,15.868989469138542,2.821233918811612,20.820770987292285,17.539103884093752,35.66789556761421,37.81143498932266,54.28213777262557,46.79854802666966,50.97407174314921,37.45443831300497,41.114442830968535,15.932463286998683,28.417198212683346,51.67464018424207,41.0376806595965,21.224473108830963,7.671404212369501,5.257463540531742,16.599574706981933,55.957609242932875,43.2187056660953,12.940192173114502,21.8008500999944,37.95943657648972,14.374651243357347,32.784793505913335,30.293215696077958,39.051779768381095,36.14239616603854,36.196911339071505,29.97365028080982,50.27943053712122,46.15374114393887,7.132886829950862,15.113727006860778,12.54247205662747,11.229348103253383,51.03219696917314,48.52918649974403,28.236507329400773,26.380539695124217,24.913427766513635,14.109238044766958,24.026898881771253,8.55339508557519,12.198267990206451,18.211595775584794,18.83231603455964,35.44537277783665,21.372561023815923,21.643926403608756,31.912845515689,30.752122786417885,40.71651600088308,42.42851800572606,24.106456533369826,43.7626562354252,55.58345932828063,12.320456772052495,15.468915021988527,52.32433741443886,38.58699882554589,45.697096628671645,30.433029768118146,8.809329615287162,41.04541779936737,51.33516229425169,44.01990482766166,36.2417775571235,19.435448721807518,16.747116255765345,17.02969112031215,24.680619704096106,35.29029411672304,9.667813695989276,21.040038137429455,33.686542776550695,25.844450650227543,34.86063894639916,41.18792124739825,30.582183134915827,33.98675262216159,49.774236953682255,46.14839890180227,15.233209172628106,16.84258990183082,13.51844922911515,38.613744983434636,31.472694003669936,14.499981878278945,35.11770517030088,36.83356707298199,27.486766476206398,18.480727091495307,38.9330939924599,44.22952669621971,12.716291248339942,43.02966128861547,42.76756762558769,40.28525220775571,13.274115125384437,50.60887405383496,53.273557349916814,55.996091119835604,39.22291517010994,49.862209245418526,12.004808613318275,42.76677964212983,22.139763594099293,13.521447293499374,19.93856258333367,24.082222316777468,17.008934013145932,30.21437131585928,22.098348101539248,29.44132781341715,23.883079295129853,51.00582375008538,26.426942746939325,7.942093128666334,52.71071487649737,24.086312493934404,18.566941642760533,45.25452675212098,49.34804213798144,29.159469036434327,44.74892217727758,35.62364284785398,16.435257759497333,11.420853828466324,28.82894994072398,47.16799321862855,42.56111879984288,27.662423629542463,15.009942243866705,39.35731704449819,18.13283734740193,21.028966629502577,38.96979546537127,44.75491295039322,34.335065677161865,12.46962463781102,40.86623047030493,31.67747897984283,31.398860959238988,14.2393959422082,51.445079592979326,24.352745788490815,26.363682317692234,15.69669316335269,32.845006852561795,32.30708514700761,46.03994023292289,30.760980098066604,37.547922477171596,35.4607580418248,54.7840223125965,45.71627796761124,44.15211973937152,49.851219509963755,47.560527831477394,22.26481178569572,37.51266440025342,34.26311925644413,38.46344990650567,40.71315714064997,19.65434563070941,27.116938683658336,34.79466432894629,28.70846735011193,23.407614452743893,25.41946227511174,14.328467465951178,5.734296951220892,48.12106880812257,27.514987386568862,19.09641534977348,18.914919052035103,15.939446144631075,13.128994503036694,17.54544816464336,41.652629160042224,53.92830884178006,48.030506004532015,37.33356087039304,13.45675806296057,44.256451707324274,36.39828844446882,8.962075736475468,32.33525138731676,25.73517492220491,55.10789251261175,30.329960492120218,25.411494007620576,31.44138660022879,52.232118321461144,22.849210538539417,20.8572528482744,35.17572239031425,20.89923317164563,46.707623368497806,21.24749922838744,49.01136927961141,53.015340213346256,43.510488285249124,43.39759285707083,36.921200252370895,30.708501185211567,20.930830614379623,51.00126323107031,46.997291969843424,13.373159770502996,44.82342599393684,36.37201933406455,43.13947810038681,10.756787892922425,19.682363578803077,14.820132259204314,25.058840409127022,47.254233547759625,19.969954785126735,9.750073292303615,24.823010201077903,24.24297273139698,14.7614769064066,40.97246131312318,57.02347383887961,38.959911007459745,23.239654493578136,44.941932345290965,33.734441249402224,36.23965787661584,5.526138630954902,52.443131691385496,23.53688070758657,52.267978039212224,35.27569691414051,10.21994842320806,37.175983067843575,38.3148784627832,16.524074867168025,23.890899898820667,26.52282483052484,18.226336086782787,17.88481348134406,3.384853788831532,19.199086735985766,46.33203568946547,34.052902968666515,39.470673282632454,34.99695286807517,26.24422580390437,21.010126366856973,43.26947394427257,10.395761208532864,39.43924607641132,25.699676811766075,21.42695552055363,36.0072196324483,16.150353665539903,17.787270479995435,52.740448433758836,38.95110261106311,28.688520370213205,35.559360330237176,22.80158780533091,38.259048412444464,31.935251796811496,44.76256444579601,39.99337649675651,48.69598783440118,55.460640239444444,36.63882674542701,19.945952448698886,46.64450705295885,6.670193804070275,48.765674094063655,36.2966560806218,47.59180097458865,32.160105813717735,24.509608664221663,42.86076020067719,40.966414815076114,14.233534846628269,37.02378251188375,32.93458223367671,44.37471168198259,56.80235843390011,31.364582682260234,18.571655401540184,23.14807126341717,49.604963132186995,35.920418281811344,42.52207074937411,39.05182382230788,35.5556450660681,33.41566270720891,27.43101668081144,20.690239690562546,52.23366888128582,47.03914559128632,45.35786684448044,16.649562425171464,22.21951726297426,30.663163825890756,8.294597396893195,52.87213736022056,10.114514596014285,13.786762669900305,54.10707683705381,26.62393301528746,51.70519461864623,41.11184645527838,3.1318988192369,8.539599783082137,13.603832567416063,18.251460802870426,29.19150622506117,52.91550467241013,38.10040263762613,20.095297553781386,37.425871613691854,28.88909313229791,39.89147517139004,45.524449754930025,42.187985272334565,16.10989870970529,10.14358286887322,19.818940642920673,29.990662034853273,24.38522306875113,36.12381673415711,36.613730745741464,17.248020533782274,16.4779672943708,35.18208735166531,14.5584790077762,21.589054712579838,12.84357978265103,30.99845895654021,36.42919511424644,14.247904488662154,43.9013189678381,18.590781379297724,37.69478618810248,35.015294370740456,21.148429069353817,50.70388268984192,23.876917950998468,34.22366316644234],"a":[15.442299105778638,2.036084327745118,4.99798881697767,18.533056637600506,19.94453811306183,3.0659883035619773,12.084572325861496,13.438321241183129,4.6434878092773335,4.551726197480441,17.33218548850256,1.9606058137213944,2.3038331409450574,19.38916523091909,5.670047202744932,2.59105047635809,14.911535032482215,11.239304943134364,3.432523113744943,1.3325705724783266,0.3304594795265414,6.676568595153585,3.2285552760961567,3.0683617490807302,3.9040208693909317,14.596319815214951,2.3442988333969472,13.135677582591047,9.285164804527684,1.4140521537778783,7.481824098801484,9.441505601954038,2.824153006086094,10.717732529558223,18.84425812732344,4.542893617758965,15.212719952099913,13.090234753594068,18.464925845421696,15.864959339652657,12.217214616310663,8.580956903636391,6.934274909655329,18.958275042196902,19.693619590338116,4.142471785746533,2.611496158741362,9.056240939143546,16.732606333202547,0.7892740930746589,16.985425254405214,17.436021773873513,6.2484140807800514,19.130912899174067,11.087488606756635,9.273320264258853,7.589453169850038,17.05904192410351,17.691131096069896,9.846996902054087,7.60455408751155,10.558574880829298,9.811770716664615,2.452428975249621,10.03251526517397,10.269202480247674,10.43672029661543,10.635595833306727,1.9126828069468926,5.75452047285991,7.545085256374362,0.1164581947687715,15.158595258266487,11.715413152398613,8.437423823613393,5.0490172596461,11.706246197792435,15.887875965394294,5.320561963392798,10.752383693811218,9.283711949671222,8.46855516270053,4.947355770183606,13.740286491008327,11.581131863942309,13.74776360052062,10.019720951230955,4.515224610137647,1.8119406898713297,2.9664786491753947,9.353709647004568,10.147561120150268,17.513862972113863,6.72099688977656,19.490970567614387,12.04012906783898,8.8971763894687,8.67561584863514,4.801471443554277,12.887156308920646,3.9126941488953637,19.6807287445119,10.855401563016933,15.597334720535883,17.80869606967734,3.768818266416085,3.953708616418461,9.635025768053014,10.287202960614351,18.592209740728155,1.2123379277099122,17.55481924161711,8.442994464906967,16.407664359333396,16.51308300993382,17.15119819866849,5.8387578217066105,9.030890742753709,1.2411136324486005,0.9775382615677541,16.154244369930467,11.70960953811457,10.0371701434148,18.28156635237685,3.0531154181616227,3.215233591392339,14.869906643190603,12.480501225758921,6.45049424050546,7.0787481803834496,6.1492113847747465,18.501358747000886,18.718475590287106,16.992024376351264,11.765374149768268,18.005901259844737,19.824169377447326,4.504751354352776,6.495124777654415,7.801200196311813,11.935386459191024,8.300825095800981,19.62801597002221,7.063008814767828,3.3257716285394956,1.5048093214311375,4.487339651580924,8.795277198676018,18.94052785855823,18.353413527009153,5.345843219326438,13.748081297931162,1.0681549012937364,19.012307064722084,17.10835560774658,10.400034665320593,11.386881272582126,7.763081108688383,2.133317692533141,15.132637003564584,3.862316469759506,10.524052256881987,15.23048024896491,4.553229526960245,9.718872676690605,7.126196789655981,15.47427051506713,8.662653025799987,19.719642174607852,0.7023552908636521,17.20819711341123,11.330628477874217,19.37358515427986,10.541424707386744,13.811928408694953,3.601459830992546,18.841540848796,11.348441394215891,8.639992734253209,19.813068281483467,6.553000263450572,6.38742081563306,19.455860612113092,0.18461891339130343,12.417137177597454,12.291160853187089,1.8225863821814903,17.556878024123993,9.822934315421957,12.628100145077394,19.737771166375783,6.298849392078285,4.076804862308636,6.087938928318408,16.694750298233853,10.719923502439205,16.835520449860617,18.628604271407735,19.242807593746292,19.855454052409552,2.0106780472674446,3.0760561289189026,17.36370247518904,11.573907255375499,4.271384411804879,10.70251045412682,11.541151784949545,15.940497451455546,3.003215533147623,5.093032931272017,18.189970805902295,10.006933966019744,10.108645415051365,9.04353624492931,4.321936062916691,8.307338130786581,16.03105537118882,4.819024100039924,6.390761585829505,2.429246989234599,12.395363309556018,16.420242637356704,0.1918604969096238,5.927574720855788,3.4237103101024102,7.70560963996318,14.992189116404013,11.235597733568854,17.86311340905952,19.450012605399223,19.18305166320163,11.290237829987486,19.775356793450513,10.124526175894456,5.342621397550511,2.5625402709440115,10.761123223678588,8.450446360581335,1.3425190994579284,2.938755672921922,2.6695455241365718,4.328510465918161,6.044517603426618,4.670407650960455,10.466992770318342,10.769446924903487,12.793515623618852,19.301677110042505,11.702761009564199,4.959586662035154,13.92382102715695,16.050939375107724,15.68024969306975,11.201039883927582,12.555872217226662,16.979494476813933,8.95564563672259,0.4124063892993135,8.786565686835583,9.211798064164256,9.943715330431742,17.65330015649681,5.458483542496766,8.19499191152708,16.190176030209606,16.001120580664274,9.901579940590409,2.388919938184859,12.418575129329334,15.401620234376026,14.346900458270957,15.647732647936854,14.972753943647419,15.844254178625189,15.747463435596853,18.72169747811657,3.9163742944685964,0.04694724707548836,14.12249740584028,5.302503696569039,13.96657657452581,14.59656215971365,17.674590151999237,10.38484500944881,12.381215543710544,18.101054513379854,3.4251409193275517,1.5315825161731667,18.160315869516023,2.68377305286712,6.86818199924883,2.4952755696015716,3.8585268945839957,18.60885065804255,11.381950354616897,19.078070171238657,10.558300746338247,6.562125639511591,8.539846206281037,3.8004508234513246,2.9651982300045177,11.23350137637182,9.821556395542416,15.622759818546182,13.550315377250675,9.19298205485691,7.0740054557406795,7.506122082301103,15.88742549160239,16.39085149291194,10.860259024023176,10.885372124612083,9.191147085787602,8.376385787482793,11.996537505388742,11.894205227403503,8.69200198718314,18.896291171617612,8.722711105913397,17.272221492266972,18.382509286947716,6.96836719680249,2.336358596659478,19.67883154366607,7.669108461101497,3.1360752890724353,17.09099987368357,5.2341735990071925,4.880844697831934,16.066535038830693,9.40280322453697,0.11626211583972257,10.127784426585823,5.002232035696221,15.81582337065428,14.546877018414769,3.7619523732032967,2.839872200712903,8.117101905132756,18.294945106323492,3.130989739885943,9.261074603310778,2.126987306717507,8.1789972761411,6.622489655924655,4.182920877009684,18.41684642568396,4.801844598942728,4.081858808260934,15.169075730697447,17.206445124748516,11.93854232718114,8.453257965467365,5.968618009588993,1.17503012853438,15.983989069359726,19.832800391434077,6.388578853666931,3.303245068604106,7.680161404639998,4.055548190736227,6.48790199662066,11.947563792655584,10.966305742212668,16.558049174869026,1.8653591008532144,19.61982698429352,6.462610940021016,19.977908625011054,8.624443743876453,12.78466757739611,12.976291013647323,12.220068858310448,0.7249555323612489,2.453247329190593,4.7689300669470125,15.753842293051719,13.721069715903432,3.5588115460362957,8.077680431563149,0.6616519631756868,16.7052311262792,10.273982820806186,15.454834446548205,1.1703787912842056,12.534162019726045,9.475548856979174,10.826911635608557,7.1150245120729405,15.324961028720843,10.64180894568397,18.22530197394353,4.025399538953285,12.706604704094575,12.122780466242421,15.806865010321921,10.035597736656566,7.490954600851634,0.5161020528416271,13.563218302237301,13.878789556618205,13.123447454289824,0.7143310260964553,5.882786110518046,1.6565924928998355,17.985846534071218,14.081269246930326,11.73909206237337,10.52165397918715,5.150426375189365,14.447420556896727,16.90096162093344,15.792903745783441,0.05472698905581996,17.51054768393075,19.642834032806874,6.469365218909098,0.7789467287532803,11.138705726166101,10.736216453504266,8.325311726602065,12.948205748189366,10.16395642212958,4.824222867480281,13.62073700333546,11.929462134666089,13.115790828215669,12.013755733071436,17.816580791213987,10.051365197702333,9.822471648805733,2.192131167528042,6.068919963583186,6.009461115462136,3.2985049819776657,6.8342467096623105,15.307718096602896,18.617203620030335,10.416272551889127,5.1067100779405505,4.517885537061694,11.296996369047466,18.234461668826697,6.0047025305685064,2.0413558288675926,0.4131197275988008,6.810902405843069,15.415211879782253,17.19874133333599,12.123669972621421,14.708696898541934,5.748860530920994,2.6679373743121904,9.122134342574633,18.069602748819563,3.0342936693487,9.977479660650088,11.124015684366121,12.798025031913163,4.873880261632957,1.9961424559489638,18.51850581721449,3.851293076908573,15.695285495202675,17.647864563550208,2.0928656333967854,2.63733096638592,8.595795323603191,16.717377238966804,9.584099027631199,14.156556253355856,14.97768718870165,1.8851545397170355,10.525664356229964,1.7606380650268694,10.0723415883107,6.550871439845509,5.862870019522601,9.213991271223145,14.839291943922355,16.83225000416713,10.946647454224486,10.430706181234818,12.154295815885945,6.2285804022302305,12.084749724441775,17.82010890501926,4.132151575671856,9.553807493369938,4.118980425124126,11.667562978099912,6.07396585009786,12.456326746732023,3.2549541584744768,17.406542151528527,0.6794704263678097,9.01340625548466,4.54332735677256,3.0720592958644044,18.525852538698317,17.97841033570443,7.267090536286598,15.77287826148857,12.971469955557957,7.029224254237851,1.4293878881692024,19.968942855732582,7.5386776152151835,10.820169169657579,7.488946575086204,15.397678405304758,16.83923888403776,16.941775936871952,12.912988844901472,17.24315382599991,5.1883662815698095,2.9852776126711777,17.37200957857476,8.616204887918787,0.779709039686729,7.0762114094800355,6.648312847123337,6.212625540083407,8.200166916466118,19.94401796571415,18.849035873195437,5.217490619690044,4.998717417082537,4.5939631909670675,3.1142573062648227,12.657768614938188,11.488900598040317,13.289202462611009,9.948744613563694,13.299229040188996,6.801691804171535,4.84832222036534,5.479003284557078,13.66438863016899,8.674672803338478,7.761534778018588,7.286305930673587,6.970184407214504,7.9856279032468525,7.639407714240138,12.919779700244792,15.089430888365252,11.46223124984072,8.130809918725621,15.878750596450036,8.860631862262235,16.15700555125949,8.960562831426175,12.494308119639562,6.32291144398637,14.504423748646742,18.118538042569647,3.2791909498055327,17.260887324341432,19.359893133840337,18.07769298137883,15.960919728873812,5.02888805172685,11.90234456803411,12.631925641839121,9.090872164190507,19.070967154985212,0.9414712727684904,6.903559487227304,18.80614751561657,19.944272753688914,0.8082412468561673,17.85164221923297,1.7158865271443702,0.4693995219286151,17.73180268284207,19.466553869209573,19.88579038170199,14.749380023357892,12.947745618545676,10.305890484492405,13.79329494878296,8.501257475474508,12.9917633841987,17.4850507750808,1.2445579723188738,18.274208569083044,7.8506040028158,3.5435478856801916,1.5544395679969192,5.19984381262824,16.635962757759376,12.050987483431292,8.441982066779588,3.044568542468311,11.319982655589037,12.029145057578173,4.683002193499544,3.5214972735938233,0.7303330549467679,9.138338915175614,5.421943341280322,18.124191890867767,9.13981457947363,0.014298502154534987,19.03281717729431,11.939377568700378,16.449010191690398,10.215803816357102,19.857356404076025,16.828059261451504,4.324495731884768,11.754936337559636,15.777957808899853,1.9680755469005495,3.0709220320220743,15.74890814673731,13.915882717653055,19.478239728595156,12.789023152713455,9.447286052465751,13.953235305971411,4.403558394285447,14.31196146158728,3.694365106649502,3.413197436080817,17.539161675746577,10.50124153683531,6.754123895905995,4.509116366940731,0.6952847029953313,15.818400645869236,11.397569826555639,1.5857739618382016,6.099961183012401,0.801749313287643,9.260523186383862,7.5524322933526955,15.947340575823281,1.7872736526028676,4.040553524243546,18.975345266653726,10.654761627737681,15.420303167302961,7.559573728967637,0.6982707645027464,0.9291527324570881,6.93737132200313,0.0469016462958427,11.408014148396695,9.55884191797782,0.11791537295652521,13.711395926909935,5.279747007440871,6.329318357031926,7.419354280488877,15.32063403426517,15.400586188371426,17.503592913274527,1.3793958160692776,9.454017204997115,3.4240606811832164,10.187403395795629,18.277101998350354,16.16960016920865,12.28207721078169,4.231695266719018,3.2695472176683094,15.050624610444952,16.561655854229134,11.085645320426405,4.151961936514068,14.531548720811184,7.926998109923744,8.036771125060596,12.4057335780264,8.34212716722944,12.100559902068895,12.404577259060531,16.398336993498024,1.8231912622822222,11.868994433063428,19.605597735868464,5.595158734844099,5.455479787019328,10.298453157301836,3.301217525036284,14.932831150742647,17.613423168975523,17.835865164148103,18.836766020687676,2.2849069391572163,11.846825035715497,17.55637700648237,5.466334000207085,9.660173750084372,11.989167575635257,14.250853778869548,15.536654775715245,12.89280849925817,16.59995746524065,0.18143760068235704,6.320973721338241,2.6369671097274727,4.18092568538599,1.0876068239526937,15.617747656611623,16.7360072346928,2.859122306787736,1.6980236907715884,14.708249179142395,12.88388343133768,11.561181776710892,13.781651121885389,8.230523458696574,5.586591724230945,15.462042831537772,6.9023657183997855,1.3962746417592387,18.479076683636873,0.0384009890534065,8.509010097558164,3.142610473336771,19.755676641079045,3.23554500971019,18.95893533850331,12.016209621880257,13.379815365677224,19.663551289416166,11.857983262147261,1.93923229555931,6.7618906281796765,15.908595016247787,7.696375825457054,10.859222827866573,1.7778373914342538,2.594213384796129,2.1373796997640726,16.553443166294155,9.470388965141874,7.326664569250818,9.220693642560494,14.483576441815437,13.10704739451927,13.341892250076896,10.535173734410224,12.10835509804976,6.242475030752868,9.651456060414066,3.6304075570818517,2.0825327758360723,18.271060337520765,17.977612993708366,16.25939147288377,9.048229647537621,13.093821325993385,1.5831477792151771,18.63127042408194,14.429908479828573,7.308505618999486,16.015685854677706,6.781573079306065,2.401550447095331,18.517305010376916,3.497928012683089,15.004391374374112,7.764395830445983,13.398921668446405,5.54866540914706,1.4961377587467872,14.746035568836566,0.13681852738827605,6.007395892460297,15.635960627428167,12.683418560689855,5.650116103374376,8.88081703081097,16.065049406773312,2.260676215720361,4.561487553840902,10.603960991725971,19.79021144863703,19.350499561060516,13.18059678631501,13.41249856159238,7.95000456285937,16.0862047531148,15.27561006159213,7.525417102873706,6.85185589779822,4.624672398027219,5.835823502437072,4.337840568370228,8.073045316659847,5.204651405456424,7.914223502494426,12.931486019245625,11.182115271121758,16.911522052888035,12.93914753915693,6.199886024581147,1.767980946542309,16.436277901302503,9.690075604460269,4.824559393730095,4.039395133246528,16.455836064999623,9.73298141418416,14.413914167664451,14.77848974265017,13.513444542245887,4.078508886041954,19.821501221397448,12.549312995335985,2.5655824904711455,10.666300242376066,3.0251662903186904,9.190656111979134,9.53554904659975,2.678669793507469,18.52137642144585,15.690947491997434,8.540021748621456,0.9333239726923326,18.008542894788675,10.346271834737992,10.396795860577765,11.701777839130067,5.16104038971875,5.96066487366381,0.31072799999294354,17.80750695853002,16.378136910455893,15.321805230636091,13.650940136614441,7.778759475000503,15.620657688828818,8.873381507303009,8.652457260340674,17.132242818849832,16.373845787394163,16.494245069281284,9.928569815839374,14.385216074723445,17.043170724848203,17.19736490560985,9.064200711250269,7.0060637762216516,0.3058431572204334,0.24465710291240228,15.868062708731024,15.607070249123417,11.826565376167032,13.566195487223185,18.99462283735875,18.4343659417136,7.484398188084422,2.841843061485223,2.9560632231251383,16.584083613200754,12.457915369445466,4.458643240471956,9.74591146615241,11.255147747560024,12.733178362242569,4.758409819479845,0.87804970970355,14.25320314873533,3.50849744679814,18.937042251671873,19.329748297169424,5.106210804213354,3.8452193041176264,0.08236745914221633,3.882964784944263,13.004635974290899,18.008921501772917,9.048343396915044,7.359529682061119,6.624697495012275,19.815245476757685,9.106218439070094,2.0821914518835882,19.449103826440066,1.8627341248077567,19.878685679689045,9.395687909015384,9.918315021104856,3.0681734240087,4.270595508601498,6.535789068081503,12.571882514030545,9.291091446672887,3.1034492775632527,10.585883924041614,1.315062876584565,0.7604192794566433,8.208471572310483,3.8262489524163534,2.114464702690446,19.5608133349105,11.511125998499132,10.66380868131144,8.409093508305197,10.330439015566327,5.5276087840457855,2.4872010011401358,10.142494851768973,4.773149305409197,10.785187137038639,8.124266196991009,15.02499311222666,18.84956356207272,9.990623801750296,3.045904637285859,3.505207391246712,9.820684283056117,17.42802465216235,11.163130656244427,17.155258193546622,13.698485960990169,18.215549764386452,9.710830124219543,12.62231751777286,18.249854329970354,1.4112329594691442,15.13204919316578,14.066547831704703,15.18094673964109,8.31677503941739,10.579275075128995,6.649842984424961,1.7843487890228804,8.380121126529652,10.18928059673219,8.76464008757413,17.368715286280686,17.470729973803184,12.735771975983742,12.280419749161258,0.5864776454241571,15.625260764518085,18.03693621146771,17.611677609560523,8.61043974419609,13.099083845091526,2.4201361326972437,12.082549909130368,0.8952359130534449,18.932735432580287,8.985386176760661,19.333074395891344,1.6052427184071183,0.42103428256254904,17.148214515028197,7.067240028397945,15.9230054018469,6.118550872539967,1.3963776031903308,17.174644991205795,6.750152364264697,17.453929365319297,12.579264261251627,0.47674792318969317,4.480089959286904,12.99762906321738,3.3491909031492684,15.125740314462348,16.991046764314,15.99748852258327,5.384584864423365,14.974521445130101,18.488706220302046,1.746125153311855,5.799075310872963,6.719574151615149,12.163491271746562,0.7960745000910618,19.191962823411917,16.344380513688943,18.26686546357619,16.236944548940997,4.938124535515884,2.66971213614708,12.264975999818596,13.63356435765823,2.6697627152726966,12.419711828163184,2.4810051146323664,17.51560760611131,16.494618271503892,4.280991445469371,18.60673896045234,1.731959042991753,2.444769865717591,15.389039292520813,16.815496818490153,19.078279392300455,9.755925108508503,3.141508337218215],"p":[0.2719238501778891,0.7294634110591756,0.8198907265186373,0.19649006926535484,0.10067645326249175,0.08810096958376468,0.6417041953247618,0.7602904714263929,0.7473436148595816,0.5754052624073014,0.1838215962986849,0.49632551546289405,0.9616585729045357,0.35586739268698575,0.5629609568113247,0.8393172610894606,0.9364894548389684,0.6453342720400792,0.5915963241108992,0.09908980699975123,0.9399982100914785,0.8134699941998738,0.7290445658815352,0.826534944629578,0.2951009807824603,0.27254919005661904,0.9602084086168903,0.5037729155457955,0.5385689888100749,0.6458963274424359,0.28105131334453404,0.028046857324660612,0.5888205725267712,0.9602119078786959,0.623540803079387,0.7360397104238898,0.21610040397709973,0.7842689706840136,0.40170506036541176,0.9894441404994143,0.3798354413252516,0.1789226224912961,0.41638181346928516,0.310808175385872,0.20461986482184802,0.450674560576074,0.8668672263597639,0.029219302145781167,0.5947416993260859,0.7207926695653588,0.9101959715587677,0.6695039920269059,0.46362965190846706,0.3085156445564008,0.10854171647506661,0.9271977745767495,0.22986233807757817,0.29236338106875026,0.9445954508015573,0.4973005242358488,0.7807467547408722,0.22039757630586831,0.32206897337881246,0.3327169878791574,0.46455717171906663,0.030168609771111132,0.48521981087632593,0.6805464800227268,0.8590132798096197,0.5721064208036684,0.3770052423012318,0.19764008072278427,0.16183249844635905,0.5173380371293288,0.4972363465107452,0.6935811698969174,0.6566514598170283,0.7960907917403837,0.06580242576928486,0.8916330321223731,0.688259333031707,0.36702815105916864,0.9099083904468961,0.12338248025800969,0.22052312958486375,0.9836861364660063,0.9346961404428848,0.2446512375288652,0.41072526172204427,0.12103520416695646,0.8673462517022725,0.0745169421621299,0.9272369194727386,0.7253403490762236,0.49077402186374863,0.5228072753434783,0.8292125802189376,0.7691419580309804,0.9212113865500076,0.8874696496729806,0.2358881330401308,0.5846786420051142,0.21658910386721542,0.6345545843166467,0.2395156320962788,0.5863212795177222,0.009488818376454766,0.9713268394137546,0.6195635394570607,0.4017793970069363,0.2966793213145593,0.12346336435626815,0.21580191628194867,0.12888196435771326,0.19659194446055528,0.8091747006446004,0.1444619565487686,0.027061665170827753,0.7963562138470917,0.17853035263693307,0.8469651228540849,0.47151161356371696,0.30403435634657194,0.5303881413336666,0.286891720397642,0.14719266368786577,0.3250550103418983,0.6456006069906373,0.3431033294549355,0.11717002719461611,0.858615715509242,0.16565900970000702,0.6763333118110704,0.4367753013175524,0.28983337348107385,0.4963788777999396,0.05497196156545514,0.6685878817952586,0.4000525086747191,0.4999487284733459,0.36155230155374096,0.07855187166456279,0.566587329720216,0.6378111598790284,0.28240906946632216,0.9453979207747356,0.1004483714069968,0.706794812183007,0.2240902012109245,0.9628049730214892,0.2634508777724225,0.25304765344992575,0.7599449375741225,0.09827927720391605,0.916904399634412,0.40974471435443327,0.14957323331340744,0.7003948110228193,0.9096656283267184,0.44802122693749147,0.12375071578636243,0.27542431483739005,0.057422197194022306,0.8361906922806739,0.04000301540885909,0.6579926166809809,0.5095537265711008,0.5378632403350141,0.8346455011358942,0.8821088456447261,0.36768395249497043,0.7544947940984623,0.8968585660869672,0.16178427834424647,0.991807016631123,0.2353092800006793,0.14875160527985187,0.8037203641184874,0.21847138052571924,0.33383594037026953,0.74381944821452,0.2737723641504659,0.08644681357219652,0.709912120996796,0.21145094016394395,0.8753930642637024,0.7203051457505716,0.32254213012225863,0.441101465884141,0.20692009882825269,0.29134227033793225,0.8521691958194424,0.5023197305517655,0.29203048495076733,0.09550395801193634,0.5154244667673997,0.036257515644595006,0.260192924552912,0.02509692515930162,0.7566415946062355,0.28080976085870746,0.1664012779904407,0.5306909229579702,0.8114988394809872,0.9394362052523804,0.630815530665122,0.29679607225363847,0.7096380850024453,0.47905288267399304,0.9852310389384136,0.27967238613754897,0.4064256376741553,0.4352063692599517,0.6738438375127342,0.9069233504966416,0.8907904088018217,0.13326319984774537,0.3483045731818233,0.1269728193144386,0.23094990786842917,0.8464854590886748,0.14899856474455686,0.555410283697142,0.3329458335404696,0.17186295370474358,0.49654265391865904,0.8914487260067299,0.715957360344087,0.2087341445112838,0.26484326280157267,0.12990682125563113,0.9006200770610238,0.7496250589200191,0.8221286503904808,0.1483701825507704,0.9461406855933261,0.2438175129955944,0.9966185926543443,0.501866005517047,0.07978036869072724,0.6012946312946696,0.6182028825340256,0.5634771429211227,0.2673551432740615,0.34739457454862044,0.3059687640032467,0.11523191722889048,0.5828471216429534,0.33985971901068424,0.08586496890899342,0.31343045019345595,0.856221827406286,0.41738264488895416,0.5531362180813317,0.5742265270417857,0.7144610171838437,0.591456282863454,0.35072363656636174,0.8754009031463676,0.6179041811136248,0.029339466504465284,0.6359040482282967,0.9028832452258739,0.3089722087184408,0.8559003543219617,0.9125884576032683,0.732033711624799,0.8658866016057469,0.5780183472384524,0.36055135980473385,0.5607204836585582,0.20601966034662156,0.6607586037608006,0.7892269978075515,0.276351230630268,0.5733250414703599,0.13987082416109686,0.49619924740604837,0.4999956796813616,0.9513850306505738,0.12052872599660414,0.6414437057603297,0.2559384183783233,0.46337476519441734,0.06948734931527367,0.41141545657851974,0.18283580028000346,0.593051999191377,0.34755227711992487,0.2818147924914163,0.05321971356297439,0.9497833772219331,0.30912152144942584,0.34350958070637283,0.027283088361236496,0.4118644034597123,0.6405685370118541,0.9233846664118681,0.816381074555776,0.6783245354146632,0.8419147318329931,0.35763472579380196,0.9913711689323377,0.8952203701928516,0.2909744060593187,0.2689613480548354,0.29758272174824874,0.8435271438551379,0.31279145618933235,0.4801031393692585,0.398929991734861,0.7121561230178135,0.3277668971620633,0.9071850368427883,0.24601059885954468,0.7130559236212504,0.15863943267938008,0.7772410628988655,0.8095218641094077,0.11835657390442034,0.23872205801768986,0.1321728580139394,0.37738451441263776,0.3484261451821602,0.6754781899920435,0.25283593427120943,0.9006263560375962,0.7674212447139641,0.23518192312044284,0.03698059650632968,0.7480016865562509,0.9480262471157084,0.05264492536220167,0.8021237940612183,0.0858200670287197,0.8069923406616961,0.011474674088980619,0.10578593413075721,0.08150761765881276,0.8138476862441113,0.10626743590242937,0.2284231079377128,0.2883475985885873,0.6881063022301599,0.12931618836269498,0.8615611307414122,0.9874049908968996,0.46065822017264835,0.7198329696614854,0.21093886059773603,0.6118424609030819,0.2703910967356844,0.31286581233814026,0.7739445385426338,0.49844283418775315,0.09498424601174649,0.1838272125386755,0.6973696602738444,0.38890573468045475,0.21171882227446237,0.040839605015403846,0.5889759674209742,0.5645125473265027,0.20800719870573725,0.5581111170023643,0.3569526721605645,0.25506037974116413,0.45751748222732247,0.49362160699968327,0.34891408822067005,0.3827773514607977,0.17257800808224122,0.920824414791475,0.3408810473683128,0.8016009831942366,0.28014872219164233,0.5380161230114024,0.8352277583197891,0.27520856735474575,0.8405639633861106,0.39645864043717327,0.9407034332230015,0.4717967877452349,0.5767403590377347,0.709257486116919,0.5451712338507495,0.1876015662313233,0.8609944152882671,0.9616263018144742,0.5023396062840102,0.9039872831575664,0.7215403815029307,0.6641025991278802,0.56670685856023,0.7733506547483666,0.42055748312462526,0.051345736131493735,0.5735981876540839,0.6100188263999109,0.799693841619733,0.9621524524298197,0.36255986234954474,0.16377459000728467,0.27467526572857737,0.6121109487079455,0.4975508293983699,0.7691996617689478,0.7010763873901997,0.14141595698028775,0.3764137244467596,0.3676262748198036,0.8079144897910315,0.23420963037356035,0.9510240918774215,0.33751419866421895,0.9058776283859689,0.7466855281704758,0.14448674987343368,0.6792720710799849,0.49706529593521753,0.13114337318600344,0.9766892907336446,0.5467285665437667,0.6183937844625391,0.35943365571803154,0.47761446849847755,0.6619378282618154,0.2832983698369642,0.7237724549636857,0.6826584937298275,0.8702649448489603,0.6308852118265886,0.9868718584793901,0.4384623676921322,0.7754244239098296,0.8745922914065061,0.08795868338342627,0.8098500741066745,0.174601567706133,0.4469246344672613,0.4147231510490612,0.5088329364470854,0.547867876548155,0.07994193926239768,0.9303879756319324,0.7923793971900746,0.09518242441513824,0.10378923917831417,0.20634479803922567,0.18693807135257234,0.853209437811906,0.6538883669473985,0.6221001219934357,0.7573427424820227,0.2411848243791619,0.6155830180437565,0.949812950997005,0.2286903097264663,0.4224875218284856,0.0057092585171505394,0.3545580886963613,0.6147815868278712,0.9622626631666653,0.5487405260571403,0.8817704967398967,0.15452333221009962,0.7810994526803448,0.6454982976231392,0.9905239676916786,0.4943308827786108,0.7063426453555985,0.5543148456939213,0.9295838019159677,0.6138812980378807,0.4859370784285264,0.9071675710780311,0.4544321047851305,0.7816990092261953,0.2062395874768237,0.4401172347051312,0.6232853511806098,0.10802308930160409,0.36087327276806325,0.7741148606260002,0.16782767517715902,0.5183337940017894,0.28596322255066786,0.7309112095760624,0.7399642906337562,0.6470625735380124,0.007983930317848387,0.47371366771185786,0.5031817003459309,0.2096780903597253,0.4530285251655104,0.8042074199283653,0.5603212599167584,0.6483846472906196,0.1955944520739823,0.5794876235291917,0.33767242792820573,0.34000799338089704,0.2495095198825743,0.1365698915493394,0.08342403616492633,0.6533825041266945,0.2863264764343345,0.9804154768089615,0.617247194617949,0.8267293643068849,0.4887322224212811,0.5073697334524525,0.5656253770588835,0.594581549462535,0.24055279484609415,0.4426924076806127,0.6663554652910832,0.32153971963388916,0.1588067428279245,0.23030517765597924,0.30315252964965844,0.24003115771387074,0.5615611207278368,0.340335653964253,0.9536056519819966,0.6041761069171012,0.2032649417549528,0.13325207441989328,0.8388760091091689,0.23235656126864068,0.9812010973625851,0.8289135017019098,0.5464206297128287,0.22224601106876474,0.9810109100428037,0.5648214335017667,0.46883258059381894,0.6039698631570498,0.5747554991175559,0.019029355937606462,0.17469734024602857,0.20432765839855316,0.7502322880677599,0.004904005126066258,0.9847688943763206,0.25918664003795544,0.42062711905542405,0.7092006706354965,0.05028394993310181,0.7779414547912369,0.541343317688201,0.19400882217431148,0.142571172771375,0.7634612056914627,0.9982542335638005,0.7643022996356454,0.05592441205789478,0.5725601492853212,0.4523881222360586,0.64092622985942,0.15853510865732567,0.9468079377712881,0.6335547552553273,0.5605185069525926,0.599734639376468,0.18228110465148872,0.6681355358164658,0.9879898089544914,0.2854059267104796,0.24774541513666404,0.4277994120223396,0.23992520377824889,0.9941432782181625,0.2955753961914447,0.17990291117886215,0.24860739200630122,0.6024651545786515,0.1025028199459499,0.7031831344649828,0.23580916284125952,0.30334506442434295,0.0076050253849835325,0.37332008007548345,0.39863394997127344,0.3518808136712408,0.4321979357009338,0.2770366080498117,0.9866867611588539,0.484402267876489,0.019229559236366045,0.3467511822392608,0.30511342432943844,0.2658341593037139,0.24830901596785337,0.8332901372545725,0.6471380441700112,0.36560472705006886,0.14373205524212018,0.3149057132511941,0.06669435304388371,0.2257220919619385,0.6834589278462351,0.9575850983365417,0.15366159889399267,0.6062105810708032,0.38099584554261945,0.6636276109793471,0.9477190660265999,0.4457393858890417,0.018578315631615716,0.7292156673404147,0.6214307813675368,0.6494914727527776,0.237477242337635,0.8876519144819781,0.048727137021403744,0.788221565188381,0.12979553131813226,0.7369679459908922,0.29251617356216086,0.020671862175422717,0.8530381097614919,0.48201863297596814,0.39072363160480883,0.7054256946271349,0.5256120541195,0.43134063384002697,0.14596172168280463,0.8166169252935769,0.32085520497748954,0.9231050200391482,0.38466256332846815,0.6969222458128104,0.6058029919514918,0.3212189240826888,0.8222543199433954,0.252649935692306,0.4547437379903452,0.9094260222535668,0.7940703253320616,0.28391547987040133,0.37576361497173494,0.918555167555186,0.8178043679146703,0.060255734281901896,0.07827580949531243,0.46914302562040433,0.8519118044356073,0.626259577446397,0.7863105887109358,0.9137747287601392,0.6598299148782691,0.1446415360279334,0.37171430169848163,0.5288281925115232,0.32897643414338074,0.8864088773798953,0.8220946237050193,0.6183253612509716,0.9478858127538017,0.9575237571445887,0.875340104471583,0.41867052435217333,0.5293213307100906,0.47489279238352977,0.02564690966640515,0.061940582035670655,0.21751107671051928,0.6627838082669895,0.6230826119931254,0.645143878734175,0.2567942924716271,0.5481749522592896,0.26554025015018334,0.347290828689242,0.44080488962661035,0.5013403124655094,0.23822649504245486,0.7416224623942236,0.26255045145057765,0.9249983875140688,0.6630256396382277,0.9494006648378122,0.8500871219364541,0.7961141920773467,0.8898542810804935,0.6612249889836834,0.24994797507122168,0.4279191212125515,0.0338590387953277,0.3174684894504036,0.3249009507915832,0.1034247935071686,0.4794994546806648,0.18735175875308752,0.08697991435823771,0.05437366373808228,0.08465968959140846,0.35331758636567323,0.544639100993562,0.8842969657215376,0.5882284007108571,0.8802256312150087,0.5804207620218051,0.9705595133880514,0.9018169935427376,0.3269598519986805,0.9018277617628383,0.4012124667054724,0.8196360317944684,0.15470746076376507,0.36811186521052885,0.8933731208387752,0.4648875555723404,0.8211821209231387,0.47229025745124975,0.49889380712241294,0.2032600202196091,0.9957423286324301,0.14959346098531245,0.16831134717227458,0.3231220491034952,0.3080246941342999,0.9010158009089413,0.5016145592822481,0.09756463643895841,0.04365405396295685,0.18999189048660714,0.3938512372510896,0.9107918893498856,0.5492751531613029,0.42919672320644486,0.3153468680568685,0.33192820903394815,0.4705990364525898,0.06786513007729544,0.5845852096454538,0.009649573969403136,0.08724497013937138,0.9347924678840258,0.005380639465775383,0.0247004164401341,0.059663324347885904,0.2643847417372285,0.33524058816793834,0.1570506457714227,0.714194271057915,0.3054036912617659,0.625214555408365,0.6528463089124596,0.988104345645304,0.5957351005216078,0.8017552069442369,0.8039854092748306,0.8899307909296683,0.9730963941785207,0.5748675543031159,0.4057701970757308,0.8177212378171932,0.4697374652832882,0.5686858673199495,0.4856120949303666,0.5748549348578516,0.6494064139858071,0.08330170566160233,0.6219455738904085,0.7169489516787217,0.7148530312768915,0.35323316110224656,0.04292691411719751,0.7141797102734271,0.34690383942151093,0.13837600886074264,0.9972782597211471,0.4499785280067954,0.16468280401650026,0.2196364467535934,0.184847623150741,0.5624539021042865,0.6778538450106082,0.5838679413953654,0.6406303768978123,0.09500736376669927,0.2381715596280829,0.7490868880901453,0.3946749518191408,0.44021039766277736,0.01307752468378598,0.9110314817185219,0.8305904207669312,0.5600017482848993,0.42851763785558084,0.6299194716171335,0.598782713328301,0.37877796493411275,0.11187521416576018,0.9373341869877607,0.17630599399475422,0.7894932785359203,0.8662656464734175,0.9938622120740965,0.5174259650774347,0.917873250077212,0.14547035048458934,0.20415611552902968,0.23237947757929023,0.2293858868637817,0.48448441669271225,0.7155814533967046,0.3824752168978731,0.4435739329841881,0.4668050879662702,0.21721173107927938,0.5200271799002492,0.6211780643612519,0.34833276857894324,0.506603405071621,0.3629079214987436,0.5922581616320921,0.3188311660075209,0.40166406058452564,0.4833075986359414,0.4186143566000795,0.9861309997185375,0.5970620815043775,0.1576127962061482,0.9291601765468613,0.16919993952831214,0.13940830538423787,0.352411024222532,0.1397616843720988,0.16381514540263198,0.8029855049387695,0.7521345184605861,0.7058594420421609,0.32328836881217815,0.8937713729352983,0.2647201961078012,0.8809531241078035,0.36591661455018043,0.6213921451677815,0.21684981458326402,0.18547899803283663,0.8524191975576458,0.1821262170341278,0.3412903802589575,0.782120928341645,0.4964175786740499,0.4374630900824876,0.23700581579400448,0.22052788769468434,0.12271340850585966,0.17497935310282142,0.6038264735005792,0.16032709689477875,0.8172463061657202,0.5477654955239246,0.7796856525178033,0.026885686315178958,0.16987655739196716,0.5126308217256097,0.4819549444494666,0.8549069481925375,0.8560120006346998,0.42771047891143543,0.015437442371192933,0.10771318343470271,0.4187176266721433,0.27773893918677817,0.676679331535126,0.45571527650643207,0.6210115107873271,0.5711237620317366,0.015061506163812188,0.8437092571124432,0.15006335234274637,0.8310679076182521,0.9101530226155967,0.6445350575078195,0.0303090555022123,0.7753097592488032,0.23500966185681893,0.3391862159828283,0.19303292071951672,0.3568761141383896,0.7527451359911412,0.20838968439122452,0.32647584658508966,0.047181111508892704,0.8871357961751078,0.8070426049949586,0.6168637210772991,0.13765367732317735,0.23363278622552608,0.5730925376066995,0.506512019352261,0.12848920500571004,0.7883819157283203,0.11449550291917454,0.03033044875974622,0.6244987855247828,0.9529607118039574,0.7048554317274149,0.8548831824975767,0.12303878677911784,0.37354653977906893,0.0918170099566673,0.6285930792150418,0.7644975818845103,0.4099432634391509,0.32967294033430616,0.5490823491864434,0.16470185684492078,0.5725243326507965,0.6485099057730095,0.42889167610101087,0.8967754567272748,0.8942333310429582,0.8236902631365948,0.30115688039754285,0.4608236352371635,0.6905068462377022,0.12268875914930333,0.9769958456265992,0.31003098947178254,0.5054384265691712,0.9391191822107503,0.6745830292792216,0.6369940271730175,0.3644903292830184,0.08440811474451282,0.3547092605986857,0.2103456828632153,0.8769716469261315,0.7527038374816817,0.4191797543417879,0.6497134717198036,0.575379892937272,0.10026140299723174,0.42905790325018556,0.7649975232836388,0.8748883146504762,0.14709661950315733,0.9609662184028978,0.8374940875524588,0.9336041913093258,0.9835012283215494,0.9928069469796497,0.38554212513565744,0.32703849448231725,0.6689432261962673,0.4440361653440068,0.9031251568239618,0.2552030516548589,0.6066727837708896,0.36586634110981997,0.6125812532649471,0.732843066537676,0.8640992464701842,0.6820794062483555,0.19351271732111885,0.6914478792993239,0.4323913038397298,0.27347082652609744,0.450119732941751,0.9621079825980698,0.134111867744102,0.9837838102923169,0.5151398734904182,0.8027392498325789,0.8065655488749941,0.7387044390327058,0.005836041175628415,0.774925408677771,0.7053893155870383,0.8817566252305784,0.6372515056698767,0.6030365651567409,0.689862011314087,0.06745925509759565,0.028488743678130035,0.7590626998966441,0.7860376238359505,0.19677661280810832,0.4951959179104721,0.14837098070296295,0.4299423512398959,0.7375218275941151,0.34732465495750686,0.5079797447552457,0.6898651399444649,0.12754402313287327,0.007808473431243135,0.5921419176785165,0.12643863087573792,0.6236214501720578,0.5090319205383371,0.19084475759444897,0.38159010328333176,0.6930653431092739]}
},{}],9:[function(require,module,exports){
module.exports={"expected":[17.751761585725724,8.05172480363737,9.088989709681538,15.415285281986963,11.803918222311147,9.192710235870155,15.821896156267766,19.416735957951687,18.952037735103644,10.140388460239693,18.902605719253557,18.132159494339678,14.12508131245076,10.09677593703822,3.2651454740848798,12.909302199161942,15.262034938017475,14.065896443800058,23.602957438533906,7.942645019382549,20.813355040531412,12.034190336002371,14.174286740357536,7.311761456448531,14.315137069578139,24.44395475388862,11.378992442285291,13.908930818471328,9.631939263278086,24.822309859914007,29.489143068717063,21.808596664499426,6.430020637751808,15.868329634070882,22.856392344057475,22.52325557025091,20.421940793630665,5.784125947539475,19.029716604509623,0.2654719896323008,3.273116602276888,20.819855085127156,25.565103649590185,7.077695406629666,14.03673240824724,3.7207716780778983,6.276323228501582,8.782496642722126,15.245931825903208,12.526076122515592,11.392721345524642,5.931431042993111,19.340728542011888,19.498703509260665,10.861008702488709,13.3006530292107,6.328376303076333,25.607001772103164,15.33382946273072,10.990852247857173,7.28146030665097,21.415338951441434,18.09827714262216,21.094496889391998,20.546119546597208,23.180501567558036,28.091271170234677,19.602827975915385,6.615015041337856,12.588365750413676,6.00897960202494,6.115629734788294,12.505472150149508,18.0679747916389,11.50235655050777,7.971514531910594,16.450573957475104,3.5587646506208674,14.314897563125736,7.725244440380553,16.97887207769949,12.358952632220925,2.076766686792267,16.422857444768933,5.4307862100733955,12.650931045187068,10.890913364491206,13.131069161712494,4.780439121111098,5.093658541105184,22.048093584594675,2.294201388404612,6.072432100901921,14.871860102559982,23.092290539951122,12.893111996874238,21.02839676654758,13.0368445666739,4.777219077572045,9.240425992270179,16.996467090894726,12.620818715967811,0.7883402922044762,28.127825355942065,9.062716535640002,21.960524449118378,5.373342783237601,9.122463980729883,11.672597697374236,16.6056165931346,16.382856707504025,12.478954495559094,9.653187968563765,12.725586846446346,22.291481373556223,5.982798767659718,7.121113844495886,23.84370340225606,17.0875872139696,4.625117861565513,11.660053021134402,16.20994338059574,9.416081734651726,15.701419787733256,17.577064274221247,29.551231811418496,18.938734144372827,8.774313853707062,24.005072932011796,18.687794436630167,12.38759768468834,8.383078035462812,17.59889553273829,14.140643033410209,13.847777309589695,7.7011194954683155,8.40274278595707,5.413529252168763,3.0916191607847723,5.211985228098268,14.882662920496816,14.921161379510803,8.098501228118291,25.205051472916196,29.50934999187961,19.07471586517249,15.855781672593881,26.542161922308424,17.727409121484463,19.348638113648207,12.504266826147811,3.392444815743508,10.909835444494203,19.398302161537572,9.153679742496156,16.32240944198683,16.952430188015263,19.124573273342776,15.142066372355112,8.93918115439763,19.88730710488048,21.883726504841945,16.971332827113233,10.125590085646273,8.403291537878625,14.662064704552543,27.696477572822545,25.658754886624376,19.209899385436227,10.854685375465813,32.420056344695354,12.005740845616522,14.2689171860535,26.812725501201562,15.73384696118504,16.718186586198968,19.85470502182487,14.006020177270798,21.777668911182488,16.64454358871912,12.80594920902898,20.072354282820402,7.301339280365644,7.460481066174927,2.4276718075961323,8.093554130818973,2.124796151148515,0.5952064545293119,7.8084369430645015,21.456115130545157,25.09853766995935,16.203946071294126,16.118552199314063,5.862281358100065,16.811216149844135,28.09638511602852,5.397614307761911,23.35555174034407,6.3158335878843515,19.567085369630462,27.303922174811397,3.4805279904710393,3.3335085236962505,5.450633692316822,6.692130521006288,23.631388402558805,20.907308652866487,18.54435629544494,10.65761748670279,12.08643194179066,16.6931209195374,15.87768905147283,21.454533657722735,14.259328342978074,14.164740381256616,12.106884903893704,19.275844113756524,4.648560354565919,1.7601699152250971,24.781036394363646,9.251297798438829,30.76228772263444,12.842119718175336,5.559772582303719,4.974970458348701,21.815358852424453,21.2149630602665,18.233682058371947,20.54766632796788,29.596858801644473,26.216673579452795,19.429926073459953,5.551790714407512,11.66924545765626,16.332695483809314,19.364577876397185,13.415808278544755,5.527887318445815,10.686834517128764,5.83379761920051,4.0460463793738395,19.341168756045963,19.217264639926512,20.926707359029596,17.117979788170196,2.2408686745682704,12.937680980017989,20.01582717425654,7.4829515209065285,23.565007176952257,12.230090977287361,12.367840251790794,21.228526804735907,20.67521794457418,10.738622764222912,17.028086485978253,26.019617614608734,20.3065099104937,10.3500319798299,6.852167909655222,3.9845884454342846,21.15755707768639,14.450160524261694,27.490348593000896,13.014806240358476,15.209123990981702,27.76936575659672,19.643336272814235,18.50478801977858,4.272447908426344,16.870816237770356,11.539283746720233,17.218848085139378,14.548725215231915,32.214866467329855,5.527879313763424,20.584321532412147,14.93829989575308,21.495359265608247,17.78331083450477,24.610623922414675,8.949794893585668,13.563971563634443,17.736737185065905,5.914933166807022,3.0703392797699958,9.731560949001633,15.537276508582556,13.2042201940171,22.80577783422178,23.605371907344832,10.366754928586422,9.08181895397701,6.361306322560986,15.173796696988813,16.512075997712053,15.341286655687616,14.768476119561138,18.76717535134764,8.086332771400135,9.31607452134472,15.217239344214972,18.366200983727417,19.566712223738698,11.377492750728802,2.350363831145455,17.96256071335217,8.042540419095426,4.9593788033858806,10.214346626846075,19.301835752934828,11.405988914918199,7.963225421474451,6.114075242419148,14.772634616613365,13.95461826005138,10.461461700206943,14.553561991067935,9.495340077805007,2.087297625326697,20.588399548214962,2.9954264121953806,16.194474951123915,10.965450724104382,9.23779205723585,13.14884074363448,2.5468215370117484,3.42695334127785,2.160013980600388,14.953521130481679,14.486017233678961,12.650332098184663,10.29292016847193,6.671969088321692,17.718550408791884,23.940546182493463,15.576134514180378,16.83296292189184,18.931914412083497,15.913260419929783,6.789836384727758,13.668607717405079,14.228061228502185,16.513329608439598,1.30848961106266,16.90853912694379,22.164608258140625,12.861271530793124,4.077070983648211,23.69261889813262,25.197121610890104,4.925463837335015,1.424557146215408,19.603937096795736,19.73668788381171,15.08591746226523,5.867381303071673,17.07680109746084,19.601721632545278,20.744167425750934,33.69127086008888,10.766083207103158,22.881795946005926,17.045725234685943,5.742608018599949,23.17486742791202,13.176265854025303,16.010288399212648,21.631561062582392,14.83840788399977,20.085112678626235,11.011683401690153,7.438266764230534,14.626926543901861,10.974600641444539,5.684813581259965,16.045523313792295,6.995929333529553,8.814133285033375,25.75910713586922,16.231467685711582,19.690576541745614,9.75154476572116,9.39317259005817,6.622107002876233,6.939106615543666,2.334642069347972,19.985298185688578,17.266511036301818,24.809393485981683,15.632890180918583,14.205134280910727,16.254585402398018,4.378678247305882,10.383571825737013,19.984877414678653,1.2742228834388396,7.566639252573117,23.540042635180534,18.240713378127772,16.89020183837829,15.601739103621451,13.327809734056792,20.988215489119103,12.429704697726459,8.464449894670473,18.553565661309666,27.771621259374747,16.38615688049397,14.54638976497035,8.574888901454694,25.45691068409061,29.736538316340443,22.592705807281778,25.960535050965028,10.92711737330963,18.973593013343343,14.657641790132335,26.156580549898077,19.44559334752156,8.606259275469652,10.615995046412802,8.099133359394282,5.872209314801282,17.733549653849266,23.934509875766576,3.2883562350847386,12.462908365259496,10.16233141797644,14.963122341355437,20.689862294387833,12.108892598549339,7.437269047521672,12.797935197749801,18.264893302620692,18.084578700212425,4.321712177222369,13.26220973572644,25.374336131262663,6.807807999069,21.636610726702173,22.130927004268933,29.312516022634505,18.92653315352258,8.919989464115222,23.707380443826413,17.40234651933068,20.196809846750153,26.170349270898207,11.789984369328021,9.660570302255355,13.415722447007328,3.287113431254555,27.887535107576237,12.322380415922094,16.96358164184904,9.426159885691415,8.407060481942064,21.632100712014665,16.191442448567052,24.347661937832022,5.916962458704559,5.591421096552477,14.716758021744948,35.241974946899944,23.055884034651605,14.917938783743452,13.435756170270638,16.159702099457196,22.555293929265094,18.53108719603704,9.857277155176831,11.807994408663511,5.285661791957561,10.32494890657815,22.786573263069346,3.2119612946332037,8.50667256773637,8.371595625335948,10.573827753099266,3.4076531079525436,20.838920476985635,14.521042919163069,16.961076798765063,20.477841339800772,15.736787504520198,24.83852440706039,15.982534805911676,17.20691267991763,10.603949971470357,11.324368350696673,16.64343976133223,25.062391812815157,14.568930490400374,19.903725655928042,17.92325673159202,12.905618875916087,13.832579619547783,16.238068896538167,9.790633343722416,14.493612953167377,17.850896387631096,23.01987238222377,5.813996294259267,20.427714368946493,11.912429747693942,26.66626252632853,10.02985578706427,20.02910465763142,6.725249028262157,23.111881760565023,2.966779580430506,15.113841832865816,15.095763446567185,9.627897415479987,6.680633019270116,23.95043593771507,1.4563753333710927,8.136310895794772,15.562930040921968,21.54835757943922,15.033642120538873,15.048686167148045,9.056909380457876,8.427530901109886,18.782497486516878,11.599685076803464,12.41740285099555,18.164688610075938,16.810843410354096,8.89972924757195,21.60234478929664,22.60805988546374,19.253159381690196,14.618308324348593,13.89948242112462,9.421586054535114,8.73307588020671,29.37795038361981,9.847106487060643,34.74146284002248,20.067320366644907,7.250466347073376,15.231279175602396,25.138674594821843,19.72168566769096,7.494857183293263,21.523274226848407,7.2044598681160705,24.08397591132988,6.205417455978536,4.578200987844893,21.251884619605065,17.212686763671588,16.354515623919163,14.544084689524711,14.695802619176508,2.861399165970949,13.070167521625807,17.573505908243522,17.497570796779634,9.339188763422584,7.8252260296194445,19.040048749584408,20.593072016653267,16.635215624949858,22.919901288802592,22.77433737455903,9.556145106422798,2.633880438509424,17.6660833454386,15.162542487637092,11.395000108690466,15.538323314118626,19.711690321401175,15.336606772905704,2.5924903269598545,16.87361666214459,13.72441049604605,6.0672562268191,28.691341268011165,19.712441801976432,15.572960935816472,29.122807704489894,8.670216130445706,6.746906388410977,32.349817100735315,13.798493795163745,18.066111032501755,4.593876022918036,5.710687779979328,19.669466720119114,9.566915635160344,15.709717071711967,26.75822811282635,12.80651499771923,17.389621896819307,25.113453720472634,20.687941442035797,20.995526773615282,23.570684361059726,0.9316431012844355,12.205760875904897,6.235554000765627,20.682480250914722,27.919161988137105,8.119223354464129,25.701675096221265,30.301957869020715,7.246335032295523,13.726595441288978,15.828934901131381,20.012889533424442,23.23109818703054,8.71012611955999,13.296151458460216,11.71861562696543,4.1448126959484295,11.567532582983855,17.481206302428184,15.141598119439418,26.641921824493792,8.575336160407872,18.741326926721772,20.240490930579007,8.54761841053418,15.94500223307778,13.882248605783374,10.684821499077424,12.310746761155439,10.063822315847318,11.256494720788432,11.891422369435869,5.664034712390406,6.437493785378661,21.326255951048758,27.275985301609083,4.873282927515787,17.05626393836117,10.23576158634694,19.72681811394132,20.192399055341195,14.553958328670772,11.015381005088354,2.6159760926639772,17.212602989894517,25.851890777710253,14.500092368105275,19.501728324188498,4.91938517290411,21.572712109343186,14.097321593073016,14.32693480702004,22.721344597286596,17.449188977363168,10.087581281898569,13.790154069339993,9.902167034246546,14.680173856854626,23.00563320826771,16.949907887511884,6.100586121626504,12.148874126381612,4.699766982402581,2.952640138334118,11.282343928169045,1.8908337895007754,23.061295088279287,24.90712897211324,16.705212265464247,10.077604971147045,20.244766556243192,5.203283569047675,9.026957334589808,16.33067729058842,30.531959769739007,8.730981523498222,3.7734365481589975,9.734619082172678,19.520051695408334,19.05328135312314,18.569827781681308,16.223161164450595,5.984020319891856,10.72845703984937,13.290786872748702,13.827814738699308,18.608432962786395,4.6959852664279484,9.136305087758972,19.37970494426903,30.304863586201044,9.100642183731955,13.508088836316436,18.582606712439755,11.442103737297622,17.529178528081165,13.634982017852977,25.746659867388797,12.784185639843477,5.622892296588949,16.741793745033533,19.724550476252503,11.810103251710345,15.316122464693695,8.9746858234689,18.617608942338936,5.309877855507227,19.5390447391086,17.492057701810232,22.401900048304075,12.144860014928227,7.016530238108832,2.4961104732762984,8.756414135464217,21.982634356910694,16.503564111589995,20.57260985460855,17.695424057914845,14.006584757777565,14.23238251210904,18.70720312266675,17.58710413998191,12.641183105686437,20.390012258435817,4.353966517307825,11.065937376686746,27.009366742996495,6.118536171009545,22.36065814798304,17.81519538316225,25.743962013331178,14.449223657486314,21.357428774538285,24.489917716273677,25.755394421242848,3.934079670854857,11.69781946457561,25.499924931820033,12.647541556939165,22.935158678372634,27.233788273830818,13.233829691343159,13.304318887160662,27.537930266060258,10.46277185676468,7.517929176456453,17.962409718506343,13.560876518551764,17.448792365453883,18.69507375730196,18.032231223872216,9.00054781257494,30.178832968784178,12.266009742823083,10.311997528365568,21.51873594906391,15.574267185462475,12.383182992143919,33.015861648967075,17.279758657556858,7.349983046656467,17.21999774388255,8.23521185553583,16.93639173391947,22.023033239662198,11.275408358356334,22.543756936333445,12.251854078728801,14.85376320202906,6.683174592808022,7.566757469425105,11.957884739737548,20.742898670600255,31.751047146778063,8.490001539722158,15.978612243309472,14.777601497468071,18.851244973499444,6.255646742191644,12.519604071872122,15.534139140954025,15.724480127942696,28.635895470750576,20.06317428547164,13.813679925145689,20.215013118056742,9.991716940312841,15.913728938218672,22.955607877429088,26.559238736370034,27.333807264822674,5.574636645643092,5.1340748328259895,15.850954310576777,16.943806487472166,17.276930423168047,6.125352000406002,18.464684583979768,6.855346066277438,19.1363265043505,9.984086716867452,8.800610354960028,14.77440996183495,3.711430641201442,2.2126176446339536,14.040753584913702,14.882348354625487,18.00680567317233,17.29752852946879,19.522718316256118,16.25890037058641,21.715904493993378,17.110514513420267,5.064109008580366,12.352986658442534,12.013005065951353,22.038893827273633,13.137233919373761,8.900577662752255,2.552299332965682,0.6863257208849737,24.55035745441866,16.818869306731056,19.07301730459917,21.680230975883283,19.683925165251686,16.036724394545146,21.010445854132833,6.563173359182551,23.679798393592183,22.155968688409736,3.888760986410421,14.147330152399,14.936183699888673,10.718304346583437,16.68293479325746,22.879508604394463,9.34931555630299,20.284455597260827,19.786355526815758,13.639297363623712,21.953386705894673,9.091871243102954,7.212880090576576,16.257118345313064,27.934184956614317,15.730847016747147,16.678730245483194,10.080928249363371,12.007349432336577,17.56094763047796,11.023340954952968,20.055007220100226,8.465815629591997,7.107966725129692,6.7970311804150745,19.691631456623064,12.369216919650846,14.18546287301585,16.678572585977264,22.39275742814752,6.92437178824969,15.670627415456934,10.34184045583487,4.147460822322888,8.608224418303578,24.804541029261465,4.542624991208122,7.070795836965497,7.689880085806774,28.029124701267964,18.01574612235732,6.117867906806017,10.40898336819495,24.381984527215266,19.55935583418207,17.003026772080183,22.72341506484604,24.659345931736105,4.461248301829899,6.374791179503469,27.12617231219034,13.955552678676069,1.4257573084712072,10.54570399847483,18.585874448137844,14.280915104107654,25.940793354588394,25.487396714343426,24.88682047811217,15.469408847981386,19.060526290837974,17.75462471775647,20.55521177644173,23.177116476990374,20.143172690179256,4.402007179645119,18.180290253178676,13.052435552492863,25.188653480465273,30.899323149605294,13.512230768939817,16.03422688519641,18.648539037492235,8.655860635696177,5.728641704376209,13.951635856065277,14.119010766996063,13.950186119064693,20.832050052136054,2.387887830133799,6.674163563965384,12.14148989839791,3.8375519656769534,12.832346012204178,29.437832347638718,5.831650757748263,15.86053529670287,10.69548951906766,20.449174338586,18.11343109721168,21.305552643901763,11.38228755271537,9.60528864262262,4.7516433228579595,6.77750852286469,13.636160964067624,13.074838398267094,13.816906576679536,8.096151817928702,29.43687607366022,19.70833230786017,2.2274251018341387,13.002800893278167,11.529095103312022,14.58594678269425,14.850745059811526,0.277347338490155,19.284411811411456,17.000597926156658,3.1916343870395876,7.1927059399515105,28.556731414909095,15.95583461471802,28.56743292040392,14.936833855648885,5.45848764576917,21.63681484084273,24.51897478800136,20.836419083827753,27.385850882967546,6.296958723006186,12.12900597691206,15.732840472037081,17.116748578634034,22.50938189843493,15.649704656054935,14.563133414493867,16.804629818669248,4.0758406923990345,8.100977185714903,11.314611995776382,6.953689360318078,15.686734273275555,20.758175690816838,3.051231360279162,14.809198609037095,10.568161827713476,19.63204805537824,16.20825339462973,18.37124813373531,11.24676537340331,18.613051175075032,15.010938466871634,10.178876789109065,9.538810240094435,24.8115720520039,16.181969226202902,28.09386292855482,24.767027345860033,7.025749405869439,15.105572719392335,12.228292397808652,16.93730523483239,19.89520448792094,32.78577622692128,16.257281887946377,18.965795303916135,6.255575088901791,30.656493529624836,19.788869217846138,18.857799293366185,9.208479739485563,22.07382438665504,32.47854884636519,4.655615823163822,2.1630428918589346,17.921467013934,5.927630344784898],"b":[28.938933715647398,13.295208994002623,16.376754479258082,22.730508187408333,11.828455030295007,10.067430250995404,17.787601792518437,30.971930001201752,21.925183791477878,12.836062805898308,30.07763739407028,19.347442684327408,21.90246970856057,17.820131634821728,9.395793445410433,13.159858370659695,20.633219242066094,31.986555907544663,28.486685893212048,19.845337182094287,30.77409424403288,25.597900040619372,14.540807167532414,18.639638087002446,28.910313360069814,31.9802132197016,12.5221640414621,14.960632692487513,12.84034882536318,26.362115772590474,32.08135571896833,23.256101112669445,7.8959564459378395,15.99671779568491,32.7633497951201,28.58686025159114,31.12713293125843,7.208071703097794,34.137746469587924,1.0587015350931939,3.644352676632341,32.94757263468365,30.64091789779991,11.99806238952451,19.29176343234494,7.3714109498042335,7.4458768075478865,10.267644201081584,17.16609022276554,20.747905593565857,21.43987646989885,19.871872828526236,21.98076659968293,21.114273861827215,16.22191000281383,22.678801146333363,6.589094373449131,29.56211410092211,15.435610084724516,11.229480044937308,8.341040948194296,27.328218747873624,19.539785254410354,26.628911335809907,24.32778296388754,28.21425388877643,33.3582205734155,26.302867620207397,8.396163195159257,23.845744426523634,21.507646844655476,13.910300676062981,22.070910826655503,19.067036526913203,13.437087793339934,17.202612572087343,17.652317077906133,4.091039635043052,15.748229343355531,18.453062363452084,23.850863392866103,16.46662034096929,2.720338226921677,24.84612526735729,9.25720585658432,17.439477177333323,11.305686347877057,25.9315951875948,10.458146769713515,17.647384492335043,25.32232151416718,9.146640889639507,15.779202608607322,21.75880079702514,27.741366010642075,13.718039646385929,21.700222791291786,16.893045686674057,10.737587340144797,13.855164136269163,17.36565335868462,15.383934213305892,4.331505322346052,29.19101004930502,10.934837376364467,26.945384171150742,8.529948783607736,17.54377393910248,12.895451867213005,20.193597700965622,16.521789932161486,16.438355079432956,18.961644291977652,23.09039730336795,23.91628420970399,12.693135611059287,7.133963794399145,28.19275050212387,29.22975205563104,7.929634872016891,23.47696827334363,23.06214852321329,17.081529838484848,29.585205643769292,19.440732717011368,34.599782094296984,23.8742249572779,10.913553965189209,24.38656450020744,22.065403803309707,22.420014639193653,22.927101802809325,27.396315741885555,16.934451738057334,14.79386622127798,14.907875486002533,11.839555570013749,5.734463320199232,19.20300296379805,9.674996573632807,15.187278490016247,21.204521843769815,9.361915614759972,29.285661195977273,29.55904763705125,19.22811864756558,23.94307390285336,34.296805042885914,25.700699184259342,32.33503092066539,12.504288233803841,13.96263948886332,11.531140116500707,24.95810161026887,10.490096483525427,24.69593468962344,18.853875923356235,27.611836459339806,28.29255784781702,8.985166847493167,27.851875877792295,22.181960701922637,18.682211909317886,20.179146730456175,8.686735908374036,17.0956894852607,32.569046281970785,26.812631314526865,25.791119383968628,11.575238207156566,34.56489491915918,12.449115811195007,14.754749724493625,29.856644564302293,17.439256983154227,21.059254856128664,23.526855010542537,14.762504335911437,23.832710816293705,30.277092886176302,14.74823826851025,27.604621558186803,25.652282846935265,12.999360247774408,5.593359573395937,8.181250104897915,7.828221477468542,1.8710044149770244,7.833655512125226,26.40256355170061,26.254940819892575,20.39092140692678,33.09656779043225,5.90946169847987,26.987985758053078,29.643057498014326,22.162670300863052,25.040752998927395,21.41709332795619,25.999781981924844,27.90248978405367,22.908307101515742,9.025173645669605,6.9850405229763135,7.992195219839733,35.37469857134019,27.074464827416897,20.373402479329094,25.781433651440736,14.13061417460683,30.11436537286272,24.770881121480063,24.9970175009843,14.640487579680425,18.773252592874776,29.588619111037332,20.87375916565832,5.635796190966298,6.359903936142688,28.279401509120113,9.619738210450874,34.363633107933964,14.885805257315289,6.365346677725743,5.072109683079509,24.841715132349737,25.722466426233694,22.119647065026612,22.8300423103209,30.064681784277134,29.977001164139857,28.83549422142117,11.042770984762317,11.746594540887486,24.739409325135394,26.938681385828055,19.9744116002853,13.24894729129143,12.596461005628935,13.398252466626523,6.594921285154083,23.316177299322142,22.50812690180132,23.408890721676535,18.286317582673824,14.398183224807184,21.294380293661106,22.592292828850784,22.241533911638275,33.29269417213163,18.040183547650287,23.881803382485145,28.605109933149762,20.78955765413477,14.457237180453971,17.049800710332295,28.95133554798533,29.570147604374895,12.299035953084832,19.301724346345836,3.988433541976999,31.095537358877102,24.981642653414635,34.55404286743846,19.692337700943632,16.194762770182734,28.46608620815865,29.106256257219634,25.64081027574329,14.023654463139522,21.350554984219503,12.047340172803386,22.805615580074363,18.248253492881865,34.95033418962399,10.061986758266569,27.90500216897262,21.801231318111103,25.654206967938915,21.543832204939594,26.991018807366203,10.317804829285958,15.451130075102087,19.74572611585316,10.886321401031417,3.402514572020663,13.725174705701564,20.355903638882022,21.01139666364901,35.32047835387992,28.8572592912215,14.167829747553847,17.633650340874667,9.014779569039106,21.638361838592353,26.22586902000266,16.103170670581648,18.157318083129944,20.861922101759873,11.179175477171466,11.729425369843241,20.87103747408257,23.602510454870156,21.751890399805117,12.526933783420247,15.139646067063104,19.75666822514912,18.17185502372494,10.359087652304533,10.365302244920889,20.951495521698327,28.168898866925012,9.156268017545802,11.072829196118587,16.984588809302625,14.291878515181768,11.260147598536086,20.723436293224164,10.8533562136539,4.444185700961376,34.45001589700068,3.4323046884642716,27.50337454911673,25.63744255502006,10.854731666434688,25.451816818883536,7.95262531493703,4.681270796296082,14.635834234476555,16.595952887004685,17.57511402099209,14.332928669313063,14.31466941503971,14.48121029331142,28.75539914768778,24.30802479587768,31.865654770647193,17.47029032795669,20.181832089087237,16.583198427693567,7.397889436133167,18.40921448621514,20.526603646026878,20.325094867613394,11.888255863236573,19.89658202097609,32.62331697834403,14.269913225928645,11.784636594664466,29.818423658645784,37.77016535831926,13.619296927122814,2.98007814407383,24.750136049557906,20.17767176412313,30.698959385123793,14.159228882248934,24.8640973472168,26.471606388871294,23.924503854174432,34.66158662202807,16.14162286742818,33.32714432955094,17.107336383933188,5.821146832934545,28.069538095163992,14.430933819030376,16.881597038350037,28.07218462656931,15.367122126577692,22.35583201121286,18.08386276539772,19.613895472403158,21.679457092279847,18.609456860872676,9.58616420516245,18.64680195432621,21.449613530871083,23.3084483501062,29.976461827460618,16.499058742502726,24.993797095493882,18.533597366045736,10.567126670783246,10.477924889564868,7.243596656151321,2.587981817187015,25.851229154744026,17.684759433209145,25.261185012692806,23.908642075859504,17.13487208885994,17.451766749055004,4.753617233186138,20.77731596371933,23.54081382425482,14.863653865246018,25.485979270548007,24.225153209744107,24.226031604145962,18.379239036445348,18.929096577932583,15.593243941958928,34.344405474148765,20.916517700824137,8.80625898857911,22.00556603580158,34.57039283741195,19.48938003996426,26.581784654105597,14.953712307320135,25.87823896702733,31.640680225594473,25.08849034756102,29.34234784932937,12.129906455787465,19.764434165644424,15.783241359705166,30.351712313517986,21.085556519251867,13.22607972031539,10.66927829371835,9.403786444218966,14.247525006767756,32.76891666866813,28.69184402083899,8.621065758484526,17.437883585311937,23.561929270848037,31.05342718445679,29.486846716426594,12.185712980261743,7.63572693376366,14.58762404575284,23.3636611598222,26.459261155802018,8.065691231718715,24.77856565637589,27.025237971164263,7.273094491713792,37.18675745138711,30.977393532626337,32.91368948882658,19.972736105956773,19.632297503190085,26.09209141967003,17.828447322302615,20.282198612016813,28.26068319882748,11.831073962520477,15.950403029281057,15.343695187724592,4.518106066611631,30.983081778222644,13.19876887368871,19.664870829807676,14.76467635244977,9.948302163602051,31.3144635107976,27.427870484903753,26.995925686569322,9.0397357697301,6.771299918264191,15.965499034249655,38.33917393574796,27.51977141505926,23.38154009488484,17.831838053130138,23.664249117526374,27.984592949093045,26.60407583417954,10.281471218330314,11.931179170918849,18.905677272458156,13.405443992793789,26.557686466453365,3.3645336944387827,9.469199639605147,14.616284436831958,12.82853918982271,3.822704424956096,21.198120480317208,17.314838264142466,25.167759885052057,20.816637241820136,18.00988214748093,29.266024016464982,17.775985860283182,18.93302051067807,11.265853288406142,24.836336003137387,27.09328355856291,29.289365185205227,14.718241528832259,27.312568881417842,20.372934849370704,29.810678652198607,16.09168062433759,23.384740789865575,13.466742137151355,14.59953849141829,21.291464788517928,29.99415705117073,5.878519293893643,31.48394082254166,24.611510513961253,28.868602247511674,11.183734740575972,26.676404855133722,12.63711667345288,25.83184832805805,7.302870559195362,16.54949535087594,15.260110323615919,19.649333011017593,15.982580868891393,24.6692834874027,2.1758376242339406,24.914963810952795,17.773805386455756,26.42775592588299,25.164256170993006,20.91582879587483,12.964018749396278,17.398426039880306,20.745602335467076,19.198958601880225,20.803341304503434,30.220946519077234,18.3739134527611,9.258166782690463,22.790693617649612,36.019713819912475,20.99234440172969,15.58856827362948,27.066851830409416,16.98266360769303,15.655988844093198,37.165086511296536,17.429119138704475,35.47827427874258,21.19016234429068,11.09567239736814,16.24075189167209,26.178960152273135,22.266356700483055,9.542483125642992,23.81735248266309,7.442358758077745,24.862354804792062,6.393421820180811,6.837587680650974,26.700352561559306,17.395072478386087,29.647208835653373,14.969537919613849,30.16298381556607,3.2094739412249584,19.96031917201053,17.941183820851357,21.19687665190306,10.818513174091766,8.532687614694376,26.03336611262425,23.256304938359563,17.145097153444127,27.30706720558171,27.070955128880733,15.214110024985505,6.146714926612686,22.004681814192,22.0565328977181,13.007519892062469,18.712121449021204,21.015787377091563,20.297973174760223,6.049830505587912,21.303233291177797,15.342649669154204,20.83146889962665,35.36916428924867,22.908579878207874,24.94426651534406,31.045171975842543,10.149560748880756,7.580301601664177,34.730633171298834,20.46629681794228,23.686468335440104,5.894902154762898,11.505320962281562,20.97950089622284,12.093516875936242,20.744934795086923,26.969342373811827,16.847705905662835,20.937216176340954,28.796237679848286,33.78664043380568,25.332032554120527,24.96365993981144,1.4954736934304558,16.816949589379036,8.477936387666457,22.197415723559992,32.170475234645934,16.809894792163767,28.211956954470068,32.63187901136149,7.466225013229604,19.171793669143703,16.43427364411859,21.94529615261744,32.329649813191665,9.37274336012971,20.606791756664432,11.801587308418082,5.834326085325605,13.538551652056109,22.927276324243827,24.175098101375045,31.71447530143374,24.022330579710065,33.301342573221696,24.384168133850636,16.96433800439962,18.39732686958936,20.438344968138374,16.797016766576892,26.40002551712966,13.60317914527014,24.95997314859627,11.975938200495685,5.695559166946906,7.959817025806006,21.84518895192079,28.258818825082464,10.598663513680744,18.564669835050083,13.097214346543753,27.980313595380746,32.71914699922842,17.917840738670094,27.356172827758,18.32420924849772,23.688151501566715,26.84032641972623,19.56421895621288,22.605993189455262,5.281836081962905,28.717304657160177,14.264903083668155,27.76336163779518,33.2432253896918,17.945022147767798,20.544060873375557,28.316203491762284,10.594750058249582,15.554107631222745,31.566704066254804,19.639654281417936,8.210831370507767,14.203681025777923,4.776384551535928,4.816561846842045,11.283662787495793,9.281142632594358,26.503793302748928,29.665779296982095,25.917030247848743,10.806041380400702,29.266242133841676,15.796274203760921,26.048794938750675,26.051354211318703,33.17113097304029,21.32917776717254,5.382273741025334,12.273597199293551,20.17520027490039,31.821818046317777,19.81906148914295,18.661169748380075,8.945797191007895,23.843613264785706,14.500193566993413,18.773205302038882,20.451884759059748,12.925743255808895,9.74002975482415,26.45223505777833,33.802528001059514,15.82270179080763,15.747075075398797,23.136183896500675,12.847482730518038,32.87264130220754,24.116173554629945,32.392321934120645,21.9222714795223,7.564457851763384,25.409056460548534,21.769677813482,14.628180198038248,20.66425503749897,9.08342190787851,23.829909393144625,17.942418993691472,21.974288532729634,35.84432613241415,28.09697877012003,15.007733235506457,13.10334196513546,3.0336530236679504,10.582068777537396,36.48095461756552,25.192275168566567,22.335226290872278,20.568457565226023,21.729801584154238,15.451391702147376,19.87303976359806,19.118758068674993,13.257708516703651,32.227817724213025,14.47068541870065,13.014546348069302,32.58557443841539,14.719578226206389,22.65418143052041,19.02013265190389,26.413894456484478,18.418511722362986,22.670360372142678,32.19213459926933,37.73493434475597,16.462143277593725,13.309417044835662,26.288812015694432,21.66215932337001,27.15536502465632,32.20046660688415,20.48590158903206,13.33613504754899,28.87608964758071,18.023987827637704,10.548669147153529,18.60156600975326,14.337489553367913,18.956577669573427,20.058736573061555,33.61797384189704,18.599615603016993,34.98939710876647,16.703842770517227,10.413419440740611,22.21100418496489,26.371028834108742,12.914830930756978,33.02541173849259,30.737121790933323,13.420109495198393,34.900764376566485,9.79910434397718,23.80898019551148,22.849994958687823,19.54893248412498,27.44232518555792,19.232627813139693,21.552547896825104,14.311141145659583,15.4925790429871,18.718709859294663,25.037367410239217,38.080704936336126,9.124941230761419,22.25241610706895,16.461066074494273,20.018244642464957,14.756049637266738,12.66897457976691,24.283109344297273,17.8524875849389,37.48356838675306,22.678021591611092,17.608497763493997,21.682882983152595,10.210578336638253,28.506451230009453,23.218369384999846,29.571045348694078,27.703273429276027,9.851315975637192,14.278675488287028,19.385130126029075,17.911137910377757,23.864071414264355,6.714271243352261,22.307088453454412,17.6961719503076,26.066650458066846,17.44187097004355,15.832152554569717,28.225166451321662,8.888881977613202,2.295065065987636,15.243151262426064,18.66579931319583,23.75738523214902,17.40025565213781,26.24020153426137,16.866270300485485,22.759252446732717,17.91080260613638,18.957867932764803,15.890269171764992,19.75395428901964,33.774568455871176,13.853438885624904,23.29250001138182,3.0088049596273514,4.133218903253026,29.26636084824002,20.15780485756797,34.16688887617385,22.69866880232116,22.740358802030034,16.447299794678504,23.09143824557708,6.893517197977523,24.390780127175937,26.401391839774615,4.321009706857106,14.283048432950824,19.476095766849134,15.219366809321642,17.261004527090307,29.531364054869663,9.637114176193936,22.880460889658583,21.587863540601802,15.066598439848438,24.65484950191538,10.211070140171895,19.874351129633382,29.534000739917314,28.702183589551026,16.685389223902938,20.30312749452444,12.989838930885057,18.98419693185781,30.577252899175317,12.48306529436352,26.990005369152662,19.598518198839017,10.680203877073572,11.178667310404741,34.07931682821708,16.733621064489085,14.476367577845036,19.229619914481567,24.77077510533808,14.802976435833028,23.815203215985417,10.654274184977162,19.45291998652995,9.281992426456988,30.00741793348943,6.110649349588462,22.04804862613642,8.18518060184562,28.59900051421459,24.596327972945737,7.52190612446892,12.102195027210207,25.36861903047049,22.753662473253456,27.432282730851117,29.922401187933485,26.182106281200575,17.08678910020019,7.253460260058784,35.25781396257458,14.672928243820934,1.6550698700034605,23.24830553484815,20.39425207387434,14.782301357874957,33.04221056419442,31.211735827725647,29.351511595643146,17.70309319316782,30.058845676741562,19.245027613553756,23.1538594514381,28.596112607670598,20.762197260776176,4.789316931081231,22.62642789137115,17.07401978895159,26.78542766476558,36.73261605134958,26.588126011121936,18.61700265374399,18.913454525030488,20.927518953239137,20.110770998933422,14.873575634890557,21.587846936947493,20.27412230482069,30.35355655854728,3.604426170782382,15.745057767504278,16.484043440416407,4.312712192029076,14.242049796862108,29.476803193710282,15.551895883487532,19.66810301077568,15.389413761515632,22.839051661755033,26.915020059782915,23.491237154315474,22.834460984859653,23.823596304790424,5.655311313925613,21.917528720885855,14.65704549179243,22.978464150052517,15.497824061812512,10.256051057027381,29.709396601068928,19.80867127975059,6.294592255200522,30.802886034727344,16.814078599920524,20.190896574569965,22.463329129250535,8.01212577835075,36.51016991636425,18.185387732726905,3.191813432702819,23.571024035566186,28.595065707305963,16.568686779062226,28.93659188878156,15.920359296839498,6.1632519635649174,22.93326191183977,26.311740199362415,33.72246212948835,29.102193990634827,13.894383207636386,15.20941886758913,28.943105891841924,31.37823601496214,22.62909137750503,32.57835356876107,14.71360477381885,20.017119967560383,4.676529285794095,15.8639212511764,11.998260732897734,7.947227248107147,17.87820943842395,25.86830486587552,7.742355724718033,17.846162783848627,11.298148714823123,24.979931203275527,16.632595660868816,18.67558317084582,23.139685456374103,22.089984513935015,24.834242910521972,10.925985197146115,12.11221870041503,25.37730694604018,17.502939626538986,36.12336417883898,25.02616196780288,9.427923791966549,17.704889854853143,17.02521565995818,18.98529053495963,26.010955811817038,38.83916786768232,20.870494535357803,22.573395473108118,16.57335562744486,30.85751998442773,22.148429533255587,33.11749309780843,18.647260859784627,22.620356684395922,33.60875060270478,5.201430966323146,10.077300088389581,19.004834226538826,13.563726868229645],"a":[16.00245756921316,7.916947382538,8.22550606334227,6.165017467060112,5.216248614099972,7.726359454019538,13.638711563053425,11.253574953643582,16.11012220403257,4.3647271900139195,14.438855710102985,3.7299649958027947,9.134183081559982,7.542761448942903,3.144506476411646,10.4944204279732,6.351424208829886,13.700595934464364,19.953825196965504,2.9766860436340936,19.052866988372724,10.39250177718188,13.731133069266587,5.546995035425137,11.387720320993688,15.881418929401896,10.337005249824184,9.811730882893222,7.551835070439945,19.13070757768276,17.37929005963653,8.639487889855687,4.755040035596139,13.62846128591206,15.49167173772883,10.605150148923208,19.85733802703016,1.6663113924515383,17.91243685832207,0.07256715773986677,2.596379411957672,19.531701826635995,17.91603948996824,1.3495188379648404,12.227706943569977,1.5461631049545277,5.4999553644550225,5.041483627328418,0.1091211297801653,4.202542610693172,3.6229785166143635,2.776119770028962,7.976352119008547,11.034642548178626,10.312855202969411,8.024296733923553,5.877546186295044,18.41469941911033,14.926198045103867,4.222371978592978,4.859477500978819,8.453566061676664,14.863440623272055,13.993577817781325,18.855691361020128,14.582133135291983,13.887957541668579,19.54341619388064,3.075930009118504,8.577852602685274,3.0982730490011345,5.428951136655251,11.667471026567085,17.562548581864345,1.777419236931137,6.208608195580303,9.253539320792509,2.750750122765826,6.320084672410511,4.375158691545025,13.72215170966037,5.729605031271219,0.6825903687556645,16.04471435286579,0.9523482002595562,7.998546221262397,10.586795929196583,11.40979406597257,4.776791739690567,4.52584747502411,8.63361481472909,2.0636132759024495,4.843770119559201,9.066345600600565,13.206172833543736,10.245192954020986,19.39537978871111,11.180468736039963,0.6359772852358159,0.7878712615984051,5.21417360434441,0.35514773341732475,0.7621103627434556,17.463184026203812,4.579574577179306,19.267606952218443,5.057566033382916,4.094064678709746,8.630448826054593,6.718821848432448,15.951940825672075,8.16021262537026,7.654683319907973,10.15379450298422,15.817136902666578,2.6437848754565296,5.974659625445415,13.184856749818943,13.414246982023862,1.7285846038371755,4.156105097112319,8.038738763934163,1.026052059138558,15.127992010138097,8.601950587656045,18.118387359351797,15.877909609414171,7.8719462554909825,16.54673585339079,9.617203796833987,5.564549346885204,4.362124871598816,17.41454938666738,13.699591855252322,13.836599223563093,4.964063393871623,5.567595313419944,3.0114352327879823,2.3646794897725254,3.739100422697983,14.710139232845796,5.804791781065801,6.750667016404734,14.127457230740985,18.498690606916412,18.611872186006615,14.892026612038949,18.972153341880347,17.445202827760728,14.876089631605582,7.71561306832238,0.37941249937408106,9.237174300582875,8.342900233774895,4.65201280957003,11.167338709835231,9.647401226205275,14.38834824393426,8.623800846969885,6.874216645443378,19.271654679691444,13.164145398299837,16.570021181930837,8.238571630993112,7.803283017155396,10.787716477690111,16.40965362375495,19.34222141788151,18.04902882697519,3.3426637240530255,17.805085008731773,10.679200760923493,7.388855311761797,19.022811453192027,13.30193312236399,11.021596417402648,14.163223229491386,13.459285835204057,17.125950138505097,11.119903848021448,9.226802392610796,19.244884299544516,6.4702690406346575,3.2049991472655437,0.08162313710241342,1.378233923673502,1.9962327173579375,0.35141730270508376,7.7084508142915364,16.88874898429649,17.22860113598901,6.970164583003431,15.187175973545477,5.77250382912863,13.099223985359716,13.836343894849406,2.988330167319977,14.399447992046222,1.9240812019110232,9.732557480871726,17.912989633732685,3.2538038748172626,0.9430859295169025,1.6012568303620878,4.3149880150529984,19.460422625527038,15.857919353125688,15.163849246691662,7.1982470474103,11.11987669781644,11.391717520563663,10.605974983879754,18.80978587891984,10.988614050553887,11.45195426259329,11.728458676086873,15.378294366779354,0.7010117865428311,1.5020775680968423,10.089531569669719,8.142252412734159,16.62266480398156,6.592944017847477,2.3234930317133484,4.496339939256306,19.629020097166766,15.622559975384235,17.245112442787054,11.842911603470633,14.311945992496407,12.300878479583313,11.150142328301413,3.0609152331661926,2.005411489084583,6.8571690459118395,8.048181860997182,8.200191862855783,5.333303424147058,7.947690111343615,1.6758074572444315,2.5779385586084125,16.217162609643637,13.336675955413666,17.806147743632167,4.416727205057409,1.7081002884667829,12.851366729183429,12.548594945056259,4.911243228814826,18.559331624971684,7.287269369593052,8.665237520073866,17.21738970374744,18.949449370145143,5.73786360315677,14.667339393674892,9.963462880199119,17.75637355137542,10.146464960406876,6.070038512419451,3.548212033374747,18.521458230996267,13.308057451939487,14.79971490491694,11.115890423571436,7.076756589516946,17.10915200595305,14.579572112587375,15.211494067361393,3.7001186970243127,12.049595669379434,8.89182034107725,3.2057180270747,2.863394155609771,15.684323774356077,1.1660484668251225,11.860652665752603,10.239489144158348,11.881817256228274,4.42624469728544,11.284444385606669,5.402626040775109,10.525919259859752,1.2493812984226382,0.48304590222063126,2.8942341571798558,3.4632156799517766,8.931397914361426,5.019225271929479,16.275748155433412,10.018435088952891,9.944144808065655,3.7947491125642507,1.511104652488906,9.707900025608867,9.69387291664152,12.688928178728954,10.299569993792218,14.164375400292775,6.661944337334784,1.958829534173443,9.581428473362944,9.05320469031885,13.145278900133327,0.14133329594524735,1.5608628890999166,17.23603334558973,8.032120250426296,1.8267643269534783,9.367436716263722,13.966585969115242,10.741738614246724,6.364078566353744,5.935755793533328,14.646656914106448,10.081851468664627,8.102875836162422,12.530784479986279,8.751768658686313,2.0491887899133188,18.436935424582916,2.222558611599128,15.879617206211329,10.850242096463244,6.69204142252708,10.83816187247269,0.9291540188731728,3.250102906906207,0.3408330244025093,14.359893935488959,14.382215314513145,5.5668067745776595,8.500899227249906,4.378746536206695,15.86444488683204,12.342817664788047,13.389392448452053,13.311050232215784,11.852770481657888,14.24965241154197,3.3478076414095215,9.037235161498053,9.172196500338394,13.431061209509064,0.12527054689988493,10.339099646047547,15.151173491598108,4.84852356983561,0.6931368252596037,17.069061703596876,18.86209769406488,0.06085869762345819,0.11972410297450331,6.030844499944696,17.866971038771258,11.711231948749926,3.245034602994421,14.079674800944888,9.474710053352556,18.005126276705795,16.31695597841197,3.0922400181974607,15.332288432753591,15.268937770649442,4.03819747962364,10.992450958828869,5.8295505467730235,0.4160105472965503,17.671014886171164,11.908023417768945,19.977180295812605,10.251369546076825,2.410423754173756,13.099766979785631,10.855231510491974,4.6387018690795,13.317623950792337,4.126828491903032,8.450067578118308,18.144284447487458,15.89281966365515,11.625645954670363,5.79887897197588,6.26922445761164,1.5337773691784884,6.924959036273917,1.4123253618312104,17.873653606867666,16.549081616677285,11.451926051532748,12.800700506466377,10.815753632155833,14.395039484999561,1.5959490467547344,4.923740538115817,14.96185047413412,0.015539242525792751,7.446722057615607,19.037994757470692,13.92603206477036,2.4362389175810106,3.46368974453807,10.656495689733422,18.539661819767574,12.266568053864585,7.5850605167694685,17.878294289380364,19.757418724881294,11.399681627107011,8.954698428470586,4.773439788250018,17.637302086564546,18.149536341148757,17.3756697386686,14.039289035669027,8.598426907095629,9.573409614256501,10.25672490036834,13.78145813102483,2.6188377990117795,8.581790243258949,10.573732812298115,7.4381345158794465,3.752987421220637,16.815549415162877,13.878181721927874,2.2513695100710462,9.553587772366882,5.878113571789871,14.19270038050302,18.452792294036207,11.973556218252002,7.407745186617185,12.591416283400449,17.14371314739428,7.428570692150069,2.148633642132971,8.551062476561402,17.706935246212566,5.65555394286672,19.476194205339283,16.918778438910604,14.75586136026335,17.355411139934933,4.727681230364897,19.094103211764605,16.97868371756404,19.98270088674676,12.732235478880236,9.948558213722842,7.6764630161124625,9.317426028130313,1.2703676671440078,19.935565854799417,8.630321133630625,14.928725286822676,7.271332133129298,2.5694114408146973,14.870530527919964,9.747534047650902,17.50701009814336,3.7515284260874004,4.922793148567162,12.944094473827112,19.115215978929648,14.587440790323738,4.374828448477057,13.0377814258605,13.411197979805438,9.76967602696261,17.81437944523728,9.037259595419474,11.75073476417808,2.842156127502795,4.560457519187651,12.801145833827148,2.664023913840774,6.61696126913724,7.709691335111648,3.9136647902485633,1.1052979894035175,10.827047280244209,10.373677707005097,15.434922152891414,18.46884236867573,14.3588737297633,10.24952313693392,13.773862187615551,1.9235778917711333,9.23766099623422,5.515953133051101,9.654339382694745,14.235360942765464,14.497280472371763,14.228872880893224,12.672590489450695,11.519907867634519,0.7036550441604694,11.15712756395621,9.753121069305744,12.70787404524322,6.108252032625545,18.05539511756127,3.5779184715367363,13.852560487411484,9.586848178081478,13.333583621914066,9.753092652563677,8.72669899919217,4.086421992576086,7.372719994540091,1.0034611400721705,0.9606188935015725,13.568254924923039,9.175118590823832,3.197237496869594,5.572716749932587,1.36371222173703,5.698997936760537,0.431639551296108,13.267569241919732,11.993845754083443,11.867866259344083,8.491071764568483,6.479278156923365,17.929320804923506,10.756261329086163,9.247700088813225,15.932639038317484,12.611458978821183,8.470310501183643,4.196072257423986,19.465618914413916,14.66531536629919,4.838976665872177,12.625455088470886,6.669675407098068,8.684409023403191,18.88711622456254,9.64633100246154,19.729795603945842,1.4685878165024135,4.264138322939854,13.963766931983766,13.725528754133936,16.263315512799238,4.695218741090579,19.7272916628254,7.0747716489429235,11.449102904415266,5.433143573913455,2.7472815724566635,13.269386950312793,13.997032113397573,15.333040897549516,12.682495683355533,13.309873187078406,1.9377768152886032,10.432111836652066,7.623983152053957,12.541676538855269,7.398008802851033,4.465432654098698,18.081257073460336,19.818797623307027,10.396591020344331,19.549708955835563,18.466599925767134,9.155849246835675,2.4207655644934167,14.558700652844658,7.9729973673568155,10.207746547310826,13.677014536649189,18.005511864834567,13.279828113199997,1.5054972636965047,12.625546119272975,11.661579695458219,5.2291531857441065,17.970959297790653,19.043575637448654,10.264113504801347,16.45169120383382,6.810498600211163,5.331592309125983,18.602483442262738,13.457279832734388,17.23148951724163,3.7702666153227904,4.4041137847368494,9.030661187198813,2.5983163640310103,11.876228286633662,17.022697424252918,6.762413580978208,8.962050101086593,14.00330303063527,16.325312785204574,9.412644385859895,17.27013791228197,0.18410073508760672,10.77744874460761,2.243589355377118,12.109017148875383,16.79758458626816,3.02958194342537,18.03630018119929,13.06241824585781,2.613447605795862,0.8278056167552172,14.028387827111262,12.535386865602632,17.48146790827892,8.085741651168972,7.812446169298135,9.593448085705184,3.7633753606530185,11.489634963630287,10.450950839959244,13.903003321797677,18.82001138287241,6.464570096001099,17.078861694336204,9.066195953486563,5.301802685033752,12.82898003588917,11.990179619503184,8.350051419789377,9.267076339183685,3.4448243599724515,10.216632738210674,9.817411561107633,5.405300131374138,1.8073319212336791,17.697622902952578,13.173971239231449,1.388944260954017,16.697477841945503,2.1547729222657264,9.35219040522599,18.39436517282692,13.170526020181018,9.875003269123916,0.1479173560807423,17.126532930458897,10.82627975772077,11.344909186680724,16.607396859803245,3.459477026544433,17.064692121497576,13.270997979224749,10.976226981210534,13.258532929848514,15.187542443296692,9.925061050452166,12.888247361841195,7.829312927123184,9.288922322516413,14.277827565589227,9.235831693778547,6.08031656735903,7.3479108716630925,4.237994653964234,1.4426365802505625,0.5465879159586118,0.5346063936941636,10.639007425038436,14.549274005260454,14.546379242255751,9.514859863811491,15.135835654544621,1.8373116186372673,9.024266780745073,12.454599646328317,16.036611771395787,7.515828249357881,1.3325318556524035,6.382802249844581,17.632244411083025,13.18072816995867,2.5530442697913935,7.485111480222377,3.715216175525642,7.9275620790718815,12.120668141611727,7.075624946794612,11.962088769668672,3.235737837901125,8.41137520881652,18.669607382451552,14.09583871062797,4.016977818138896,2.6592974607607323,15.924023334813175,7.9414678314305664,14.673890015771685,12.560941121311986,18.351728263971463,5.200046177673827,4.927191423931618,15.448597706495528,7.232540069837277,7.963967095761273,3.5391898354707463,5.753644725648823,16.037029123576254,3.5884092490269603,7.088634302739969,17.168145707066053,15.807674892886627,11.726354642170215,1.6547358632841735,0.18589092135059548,8.467623782974329,19.211404119466607,10.156945980203291,11.152107381499462,9.213701920423162,10.51672042053982,13.142204579264835,16.323492033662475,0.9603640594006002,10.896669768345362,18.812474683581357,0.045475260456533384,7.9124404786557845,13.130572221251008,5.883158463518239,11.531795912372683,16.52020192854682,15.444930169931483,13.208284863454466,17.14873768106343,16.466854786205918,19.761313028605862,3.301240713961988,8.238886808279936,16.890766791555798,9.768501127467456,18.98253261573654,18.550579180802018,12.96605310152906,13.050101963344467,14.332197757291967,8.425746507974893,0.957306102758837,17.341295708466653,8.205566106718457,14.184270629008209,15.091766922274426,17.514857146781218,3.044709910370118,16.96330164486166,5.778357071194007,9.808476490856467,19.256847572352562,14.298910402255235,3.9327365796504443,14.855935331983021,16.930016178034,6.187325178765559,16.125970752430305,7.989260553280708,9.11029187285084,10.376196383380968,9.446041007521568,9.551267160886425,4.930988196920456,11.898389176063944,3.2462984032584297,5.350602804153439,9.38211714432632,8.461265078650818,19.053801935135187,5.716435587457567,10.156422728129733,13.811197893819323,11.505985484262196,5.353221359818643,7.099939457209348,14.962083276856868,15.146894123664536,19.257780186504366,19.195792580205534,8.989151826563901,16.453563352267775,9.733548988385653,11.500792142476577,19.07802609366596,17.204010287150673,19.46122741957804,0.2761991400848318,3.5377527972903744,9.667145407392862,15.873911054626312,7.642890090186323,5.5267523207851355,11.838373427108264,4.522740147432978,13.357465990051951,6.549632940205696,1.8663882507206209,8.288330222412545,2.4808995476368345,1.8884580521795469,13.25093383173106,14.565950662580974,15.425985937923334,16.2196025113248,18.248624182639578,4.308117611198554,19.50971112465804,2.6908738215424455,2.3299993930694107,8.899831788537739,10.390422758252003,17.311932860432684,13.075579190445964,4.635535495412282,2.4398867272066083,0.6129959043361621,15.299760901641273,10.392173496297442,15.735714873182758,4.5006619195100495,13.771835673426693,15.06292468537282,3.7935070726519493,3.5440857357487987,16.7704263146687,15.049508203915206,3.8027988205741226,11.073080082186308,12.833316775109731,7.809072105425772,11.515180479285302,13.732335011276628,6.607682524326717,2.9824039430762816,19.621232154406986,9.073126054529608,19.527662083453045,8.197129169965747,5.4722102814755935,11.416579421594317,13.35586245881473,14.333850847704586,15.805809618272914,9.038032720914604,4.963051391687996,17.04448173359986,8.462293775440228,7.610742640240984,2.699617933382523,2.3003968548949327,5.116983984439578,19.435595763288024,8.092897676383522,13.647500831637348,14.984389451928003,8.294840344345694,4.615300983952202,10.591852079530778,8.965397601557505,1.176276592041936,8.568246918130228,11.621082200645315,4.435979848250109,5.260464893293575,3.526783877221984,8.889836660328857,10.288187177248593,5.911291688647644,7.7756074914676,16.631211196558453,11.882155236427426,12.09400460560811,18.699287608060896,17.038454993236055,1.400604718043148,4.812656165026978,15.990099649336344,7.85749702070158,1.4044204632469537,10.230340883602045,11.154107249822118,13.99642176409936,16.78912567028016,19.955186057414206,15.966014112659055,4.2011407128170575,13.840520102884026,3.2457030210611792,19.448141073107724,16.807299373009066,19.852431001071874,4.321045217248467,10.889849613835327,7.527409633869424,18.113405157641026,19.70738954038259,11.199073312552397,2.185306424458191,17.770082471395703,7.352030755714942,0.2928090501381986,9.10877618414026,2.274696846762412,4.8905819791914285,15.698095812572376,1.3204719829925438,6.5708606432414385,10.319236451521384,2.5673332063706322,6.884448225967179,19.400648178174166,4.324964879636299,5.603115311174451,1.079201579893292,18.128745175392254,17.81738001979919,10.753106048423703,8.557873824093104,8.259362435003386,0.36628067249852236,5.727559223021701,12.874588430870094,12.13693849577333,13.115567109603985,8.068771103196347,17.78209804534011,4.234119723248702,0.5388475706544593,11.598478166590835,9.92714374249176,13.479572822581423,5.8299313580168866,0.24761601895021634,17.78256080633527,11.61346058423466,3.1802732067407113,3.6721708364255745,16.942682358014892,14.215317614814476,12.097428057135552,8.926117631450218,2.2549833701506827,17.185062252274015,15.965515024819886,18.887054665549265,17.67119410389741,1.771799192688741,7.244152018565555,9.616241669264426,14.204062137832253,15.84891193160451,13.834459498247353,12.801830417313003,1.1660491776708826,3.580282090317235,3.9596163832853426,8.371725641506785,5.877416649930689,2.4418917739811663,5.9146004745706415,0.5905637763449789,2.309830267222841,0.13131357493205265,13.277907720598634,10.852157471831966,17.72019998402866,11.061927473924005,13.018971801219706,12.631108910225981,8.923710056453462,7.714969969694039,17.703274388182457,4.916644014420473,16.435995840108582,19.233793285770012,4.1155804361071135,13.261737557809955,1.9615818664146945,12.257335247518624,19.069911061695166,19.435089585086782,9.766021051178008,15.591359769727923,3.097707092296429,10.905159714515644,16.584400073224728,14.873917823456635,2.6506482356056393,18.683847308876253,16.569200977210137,3.5572240963785307,0.15508815077458493,14.256508690311156,2.7819185217435116],"p":[0.13522260596404667,0.025059662551942585,0.1059326869063717,0.5584059036394426,0.9962891648506673,0.6263590079141605,0.5262092927187074,0.4139879307690524,0.48871632541377696,0.68178874407903,0.2854282449461367,0.9221844132435872,0.390882377306343,0.24850856220052786,0.01929826582454197,0.9059981223028526,0.623913920375629,0.01997710319138135,0.42765637123006006,0.2943898083484675,0.15019656335974152,0.10796748170470827,0.5473235120650419,0.13479069230492668,0.1670652706512208,0.5318743546928892,0.47684735610452855,0.7957424878337203,0.3933249092718556,0.7870669347969068,0.8236837795234628,0.9009685468100954,0.5332776754709776,0.9457878987836741,0.42640446295124024,0.6627904327942324,0.050098761459152374,0.743051724409159,0.0688603036216815,0.19561718597638666,0.6457580676252281,0.09601711859944628,0.6011109823190328,0.5379305198808932,0.2560887597022854,0.3733074765301212,0.3989718427752118,0.7158243537678177,0.8874267528776849,0.5030734907683028,0.43608841725885017,0.18456696596912026,0.8114852954892042,0.8397193010046959,0.09276500524817122,0.3600501352211538,0.6335904228558749,0.6451991388395963,0.8001998106099104,0.9659448955516639,0.695659534112248,0.6867290808081317,0.6917446797676867,0.5619890493178361,0.3089181081492285,0.6307432708200051,0.7294875064300423,0.00878943841557156,0.6652123898450948,0.2626762878596396,0.15811002510638894,0.08096336496243439,0.08055038907182421,0.33594566938064774,0.8340663601652101,0.16035161311172708,0.8569145231384205,0.6028656648086277,0.8479730816342972,0.23796765675565323,0.32153352468695884,0.6174292771066308,0.6841750869469059,0.042963917441978916,0.5392552401428792,0.49278877745981053,0.42303726324914903,0.1185304137774641,0.0006419914617652456,0.04327321298808018,0.8038057718587175,0.03255502097082785,0.11235604833857549,0.4573988572041454,0.6801504174009851,0.7624635572525282,0.7085154936835272,0.32496294521299696,0.4099585877722285,0.646848188966205,0.9696179991858169,0.8161451358008402,0.007348564604893415,0.9093451172221758,0.7054219628864917,0.3507418123906467,0.09093949963731385,0.37386676579158307,0.7132817589957376,0.7337261007457496,0.7561929586704714,0.5217042221916959,0.17674993781197923,0.19879966813125316,0.7993859384757749,0.332261653518944,0.988915808079206,0.7102160255365695,0.23226196159083057,0.46710365703560064,0.38838574941379966,0.5438981394762714,0.5225649333404498,0.039663782532840086,0.8280555489954322,0.6936818537466285,0.3827793679718219,0.29667454988980424,0.9513392976579216,0.7286668462169259,0.4047973888277445,0.21658810451329846,0.01846828902927955,0.1363432093310457,0.011677082834032682,0.27525219465507367,0.45203530579717777,0.8821407426848917,0.04317173690917686,0.24813183518521043,0.36157931894794615,0.5919824283494144,0.5161646472735395,0.7307986003869906,0.9955066870774394,0.7510691063361004,0.10647994973277997,0.49397589766633,0.03418404921244811,0.256175240410782,0.9999955295242859,0.2218200666675838,0.7291569614092459,0.665378750293276,0.7710864016918368,0.3810499433831347,0.7934664681227663,0.3581675993699416,0.33140200598871017,0.9782156428650552,0.07175251208270761,0.9669283316369452,0.18999782547045463,0.15803413478283934,0.6791630053930482,0.6141986058298898,0.6984683266130733,0.8455404129269204,0.14994277707232762,0.9124753947662898,0.8720248865633387,0.7494936463134383,0.9340429673278547,0.7190358175280414,0.5877987609015822,0.567521818317553,0.607828450051948,0.4195262281574248,0.6935865160781587,0.28838467531402423,0.6482275438606147,0.09898277394070609,0.04332549481629555,0.43448284939058346,0.4256460187474722,0.9871092509935557,0.022044527017939464,0.1604311788744628,0.7985812873074227,0.4800772722538873,0.8718857044572108,0.6880224125535825,0.052004905319587236,0.6555120154592422,0.26726588195807,0.9021509201206683,0.1256514760696874,0.8416358465908464,0.22529880746882536,0.6045609002397467,0.9400803243170239,0.011535479326986842,0.2957679597317282,0.7149947103624397,0.646453238441089,0.2620895723584018,0.4501733008005193,0.6489053663133093,0.18615593294113508,0.3210360423070233,0.28315457518594234,0.37216724321239747,0.4274525248693435,0.8956263863843288,0.3705334759332264,0.02118828826790886,0.7092302270359805,0.7999434715900788,0.05312918321370086,0.8076750891346851,0.750630149825178,0.797004012205061,0.753560866373413,0.8006919186159087,0.8312880699743135,0.419425794239072,0.5537084043399148,0.20280287087810334,0.7922682415227844,0.9703021120384208,0.7872651343400991,0.46817184046983407,0.31206721328473286,0.9920595801536745,0.5298847510122429,0.5990522379000627,0.4429691760472967,0.02458219414170726,0.5892190576980998,0.35470331988149395,0.3654752635762264,0.44006193577038566,0.6411841178553133,0.5569699748187731,0.9157626315778467,0.04198304997485924,0.010223156717136028,0.7434743971389897,0.14839383476934964,0.33975106062570104,0.4596727478566507,0.24332709266965957,0.352233548083837,0.937862510290598,0.573522755589543,0.9908858019216418,0.8456005059297458,0.21586127749504458,0.09456924771144126,0.0591103361319516,0.9912655413977323,0.2096454793930025,0.09783653030415063,0.6424229521834908,0.2214105392797172,0.8919019399996655,0.9386524180595657,0.34858362099777374,0.31577275888618783,0.05543926270692823,0.5183573441395948,0.8389943802681681,0.7149593522196773,0.759534474995992,0.8580158702641243,0.490317120469991,0.543722191099661,0.4064102693952647,0.6980300594606028,0.7803124202663898,0.8484459551120338,0.7216764649745824,0.6168370081484948,0.8913845437778587,0.5221324058184673,0.3464723751854497,0.6108331999105658,0.5782200782693669,0.5118126064060113,0.3428785606698186,0.7212200014455135,0.10005720752741021,0.3820440477309668,0.6463768385507231,0.45814627774354966,0.4124246726433909,0.7768512293101348,0.5687260618386116,0.6872367086364057,0.3153233452023112,0.7529986001787086,0.49920337103727763,0.6400990153151664,0.7461047037908299,0.907195373058107,0.05814224527325895,0.28823189493015233,0.001027656926152476,0.3671467145560279,0.848721482264293,0.7638251782153085,0.03811580837270312,0.5727214729065002,0.034712264145589034,0.053884248196351736,0.9198911903881004,0.7470328947139206,0.24690143767774964,0.353814152239859,0.01591185159261932,0.13435666718454975,0.6388677883535785,0.027087432714238524,0.007791104743864574,0.611563793014543,0.1581177932307276,0.2303230767163753,0.1235707115026432,0.12725993719509843,0.2654792238774948,0.032510244986846404,0.8080569046000945,0.3082373199039863,0.22699636516906585,0.14382996669144665,0.9692877349001854,0.1183541361123368,0.8467683058937918,0.8499329533246771,0.7129098791595192,0.8498664762283155,0.49417229759486614,0.44527773782390856,0.44709215994429474,0.10058833130731659,0.6873608784390104,0.40140666037128137,0.8504847218345841,0.30509256897096604,0.5195206801633496,0.3350434338037387,0.358788015062645,0.4561788591524898,0.725085805778344,0.8091557788193164,0.1777298270592711,0.2402693806781282,0.27791254317571545,0.5958153405942774,0.46272452013721055,0.9471062797180463,0.5880617710099665,0.41953698082105606,0.9664865123363011,0.9559500587110057,0.713377894709132,0.854131838415823,0.9470830486596509,0.38077891960828847,0.8471526004067105,0.04537544614658584,0.09707175407925206,0.29225746363329086,0.17799705398360444,0.015394075559940212,0.21144409823010424,0.5118799486883412,0.165625841062647,0.024502381013241425,0.6435690104908682,0.5586047384147246,0.6032943899359913,0.3103850176683851,0.7268541668706869,0.5689004594456792,0.044400216381205615,0.7845120939157593,0.2646975345013227,0.631719145325409,0.9672834343984835,0.2549698030691874,0.536369221747856,0.6083453827448599,0.8812608026735107,0.3443911635733332,0.585505117057513,0.08477060373625078,0.006647568330670595,0.8679217955519933,0.4189011171178141,0.9066024470322136,0.784851603959984,0.5411080143937117,0.1549252378207837,0.01885983740023467,0.7201035689128197,0.16361204529719564,0.5410258921410009,0.6163981645424228,0.3172215342299618,0.37341329577215543,0.9488737398370826,0.8588598620277585,0.6764109180237188,0.7790106644989463,0.6594093025617593,0.9223982683671019,0.7963274735803645,0.7468275551227115,0.9111935803769591,0.005268627705396822,0.44232582730737624,0.3362746140275268,0.20193570953513929,0.057542725877177237,0.6788549617860464,0.16280002759503298,0.3690019580589383,0.24226772768360982,0.045693282965225235,0.20274233882806914,0.6379074558609807,0.12950098538159716,0.10345562132570052,0.18025555084804723,0.559938065747799,0.3672566139822777,0.2903186773073796,0.8228323452638036,0.7123494103585646,0.12198463094306122,0.3707440975241001,0.8016737772439184,0.6002777774957191,0.28127582468486234,0.659229066269406,0.498565482687364,0.7148934430481337,0.8653868071279198,0.9781730414639553,0.23980199070636687,0.6800719168595739,0.620969276479022,0.7197970392526749,0.8081649374946176,0.4296439660813034,0.2875655634511245,0.7911282685213981,0.4111893542217202,0.3644675215194828,0.7209097579108512,0.4094835720124266,0.36171246919204036,0.586701817802886,0.83888858913419,0.6548273076262348,0.5547045975866642,0.08301419347997907,0.2680669473636019,0.7019311675678543,0.08153953436905992,0.6590659857676955,0.3173256822955546,0.1521151958157152,0.651724160866952,0.7258676215123361,0.7821980448647965,0.6625362445738099,0.09583658404017337,0.7470843294403398,0.8472619658313452,0.9653652041209155,0.5975031376984028,0.1568046943627459,0.8556961232453779,0.37740635383642274,0.7671759048916169,0.5518751540288926,0.8985206117899609,0.6736486380061255,0.300636651804594,0.4007754315945875,0.7192126889088073,0.3242653668313764,0.43373468588747954,0.6818742119470442,0.07576012102513441,0.8531909767748251,0.41553009885983605,0.010101266050398072,0.9440040550187991,0.7733965494521837,0.41582848307635056,0.9719538483132968,0.3729233761938733,0.15478428184431392,0.8582338538330254,0.193453790308324,0.6296708006888052,0.30860966671955636,0.8526492411586883,0.3116670642803858,0.9079052603992519,0.9028599742178276,0.04322795070752239,0.2724522463763661,0.9623572362734107,0.11409951141679153,0.12683791046421633,0.8725144617720446,0.6292303092941904,0.23080498406888061,0.3515509591205248,0.12650219593675271,0.1784253464711687,0.3029443868946935,0.09989979747765787,0.2742991672221975,0.156215113285046,0.7287492596295861,0.5450470554947136,0.9360917974433789,0.18982861877915402,0.725118217365482,0.9097398315503715,0.08822050632774991,0.26683930921963883,0.006980750139170544,0.5739605653408593,0.02579737249484282,0.95321380217511,0.9430652975469247,0.43713871461344356,0.5566625454531451,0.9164659502916817,0.5761030195806605,0.5775708152261634,0.4391090116098275,0.3528094863783173,0.941969412097575,0.8042188657995148,0.44762405721182064,0.5943353516301217,0.9463262071299394,0.07136109697654969,0.8139722899104846,0.0822358235609868,0.7262911363444966,0.2768679975281514,0.9643626285451814,0.5725915280056104,0.5675127846328172,0.8260591991579207,0.12057074059247053,0.2252429805620373,0.9244452744892055,0.43445103661124795,0.5006461666335069,0.06607438574299396,0.05719746923634794,0.4173234695683361,0.5104929159855531,0.4240534554717523,0.36966618780147886,0.5667848174094132,0.29306585168367216,0.239197480775184,0.4895394888888498,0.5603889128238009,0.05371658005415636,0.6161774720716238,0.17305703250571058,0.36163433904282316,0.868272394955981,0.5569580461314634,0.629389527575386,0.8523813264036575,0.04868214232458978,0.1292988774660393,0.38764738342477645,0.1839932229232939,0.8903630638618107,0.7339075422780166,0.4322489171813717,0.9787753295652883,0.5992985847269454,0.7037540642670133,0.7510443974298517,0.2498451861523101,0.7275959518877002,0.8189417572644522,0.5700455857664477,0.23649506275569432,0.6403180035877156,0.8498338996590815,0.7234538810072491,0.3693414994932225,0.753305175854323,0.8809409635625793,0.954687808141119,0.7031617000456054,0.7483925717887199,0.7946413126575387,0.3872278987132607,0.4851465728784554,0.4286038118727178,0.9624246149884008,0.18418465043668064,0.03801892960978148,0.563487660795992,0.12057859903164769,0.6066099754920322,0.12021841090526642,0.10247909951611422,0.7294891807818167,0.27831133082278336,0.559595565838344,0.2239621158203131,0.2764034163080815,0.17765011676388176,0.6515816877605636,0.07053096202304676,0.9608455927679551,0.8913919957933694,0.752567748714092,0.8748825227265216,0.9348463073372224,0.37833277768268125,0.19215276079837507,0.7384996044988554,0.5569335999559246,0.12551911116722092,0.2914136497211328,0.06523463616890535,0.13578450165695743,0.013117199438352767,0.9382769600415166,0.38387446998534824,0.4825014562287031,0.8011089483265608,0.3868677495324675,0.8313908542717601,0.19959974673195413,0.4735029916748734,0.8201861034187616,0.01530466467242686,0.05845924760893206,0.7495574872385771,0.8605095090876771,0.5048220248633557,0.74146556506051,0.009513923225277665,0.7002806609315779,0.8576912949538689,0.44755097957728074,0.9998771677256115,0.15505879799306088,0.7830101054621708,0.6852016896077913,0.18986010758281213,0.43583733201362973,0.3615558341639953,0.24113338866583045,0.00015803984813933525,0.2850737376874053,0.8459734310462597,0.08796948723936904,0.602730929919949,0.5689922771190037,0.7423673022352106,0.3150327165479807,0.9276478361169758,0.7818543420737398,0.43375757638600176,0.17597926320390078,0.49174458009806,0.5772296138899826,0.7828626508131706,0.15069624479550758,0.5456120111286544,0.09124136364234592,0.8225138498247528,0.4306101326239864,0.8289254062066154,0.3686250957514079,0.7135395994248164,0.15689474884123622,0.09294844588708906,0.5266822598206249,0.4535364956081114,0.2637962040222468,0.12983297963176565,0.8593170558541638,0.5771328282756976,0.6877014767703271,0.9673443361345881,0.3311458317715965,0.11992945783808939,0.8364033077756956,0.01734358885848808,0.5365824802846322,0.12753949623731486,0.4683359989088658,0.8112403595952664,0.13657974231179537,0.1604691585776452,0.4221136798453822,0.8423859702693102,0.7469753117385505,0.31123152381720787,0.4721046302576579,0.6715534683196194,0.9156503637980986,0.738875352449889,0.11759204144661073,0.2986778847300853,0.6180775112754477,0.7133792310494198,0.02663722568785043,0.9736096827377145,0.518011736291808,0.9389247311184541,0.23817365877458352,0.7622199720879932,0.5102016005720156,0.33349325031406063,0.048084768794020905,0.6821638950811648,0.9160583860728653,0.24206517305697917,0.4836298929025171,0.6361377806264519,0.03560930652513927,0.8887675512194309,0.9079916578303246,0.21222901997856303,0.6840136321950323,0.49284190019045515,0.8733491959622395,0.6840552606311416,0.725453765246282,0.03212881623393571,0.38289128972477604,0.7331333260930026,0.5938090854881586,0.8323446658987157,0.7656629872142036,0.10564482036906475,0.9408102478296096,0.9994743882921084,0.025330615215698238,0.16074831171853932,0.05827105284639744,0.13589642571333393,0.5324352547161169,0.9337040987127465,0.181073641647173,0.7262001921591543,0.5118899705391737,0.306124449726481,0.3106122942334528,0.21851309972370103,0.27587875727745725,0.740924093388639,0.6673311579315588,0.8137190436264565,0.48133206862670486,0.3646987464118292,0.8629036490458653,0.0959738235927794,0.973178386451585,0.06137262785858155,0.21347848911717526,0.514551973347207,0.24908807043566572,0.5597325056778164,0.7193000296966963,0.5411993053946871,0.2594981337111062,0.936536299267565,0.756464941084418,0.9551730038853679,0.5533548672623176,0.14862056840551485,0.6363262633378299,0.5251724567764027,0.59391730728522,0.5040759083879185,0.6329631803134734,0.177068963786297,0.4546995543925074,0.31531203846753275,0.4965157619284948,0.3253314450172069,0.19203097184040585,0.7972306956008488,0.39645258645644166,0.07717301759348172,0.3097702611658171,0.9129912765079502,0.15942961915496912,0.9516354080949174,0.6789245467808946,0.9474184075337997,0.16442934997855363,0.49398266239967215,0.17328742925334373,0.2871326975220607,0.07926201770052366,0.2286032201910062,0.197590091779549,0.02083101456111569,0.6623370461062115,0.6580932223103584,0.1810683590136375,0.9440357489149078,0.6592043536097427,0.703421856277612,0.892165000859581,0.9013731606333093,0.9066996426836738,0.6260159734236499,0.16588259357669388,0.9577197449565193,0.3165643366118236,0.392593325556698,0.8993930672044022,0.5789706169840405,0.9049991374740012,0.869534734001068,0.08396254304080086,0.7618574034442975,0.47311019170216184,0.44427422966901586,0.1208618793173124,0.2671759318652751,0.9499555218221956,0.5940775550093444,0.19409804937734387,0.2639035096957767,0.5024053149200294,0.03816409001224241,0.6369541684871847,0.6421433443540554,0.34121733400582976,0.5737089001585212,0.2771585227454938,0.01748433285500317,0.49490292087742493,0.6490332056869672,0.39907918992699054,0.8556672072518376,0.22665335337819315,0.3840762665618698,0.815004996688584,0.16256728142854837,0.05601086060362026,0.7170248069095195,0.06368130719093212,0.10783749302350354,0.8936757547031673,0.971085743810777,0.540081276487901,0.12825926153644418,0.6086496239756218,0.8870792662984264,0.7061762854509239,0.32005040763950143,0.358557135517364,0.8334625521569454,0.19511714953881443,0.640008355302327,0.5779654234961724,0.8947424540487801,0.08512625463734325,0.024225224397317557,0.8042912032039513,0.36200626948653114,0.5630726563013859,0.49146592604424266,0.6664531054444127,0.8345658267989693,0.32185851518285724,0.9068458867009528,0.2987465830667895,0.5403272557794654,0.3195784477673187,0.17289526572934522,0.6211725825829049,0.5787421743289869,0.8158706134597242,0.657373551066313,0.1503118808997539,0.8428174588607373,0.7683033386236044,0.09604294600757113,0.2742881769721264,0.8400742668150774,0.613277164259854,0.5889154218148209,0.3503099853734526,0.46735431596996424,0.011260159262410196,0.29558969975200267,0.7277610019047707,0.8084017228882832,0.9961323693401427,0.13420282689856355,0.7292875190939014,0.6719877956473581,0.49262806356907474,0.03254152462741522,0.828414035603483,0.19783535776561711,0.08647558362843144,0.8291429843515097,0.06485183928119831,0.4272599603624969,0.08650995555441687,0.2944012678503707,0.012518157396540275,0.977151529649787,0.9935575049126515,0.29337255624166936,0.07312502089779871,0.23260730556965803,0.16485182372330232,0.542331388082087,0.003829130294278116,0.08019448698723197,0.8197195769520866,0.9844850816769704,0.17692150740013401,0.9967101758286041,0.7395851982533719,0.978077357517962,0.8593806893951708,0.8196735201405208,0.7744603270974446,0.8267227533601087,0.13139945249342655,0.8498518830659221,0.37328341257422815,0.6132693418733757,0.3164816978238658,0.16959688784102056,0.9823442019454989,0.09684461248973708,0.9212923016709991,0.8295857999422447,0.4520500523298805,0.34788766319315845,0.8114870751576979,0.5199860853624025,0.8580312213840733,0.7439007276621028,0.34406308260882157,0.8045250272828799,0.9346290262223065,0.5429950080160042,0.9265899483115496,0.6814523833893344,0.015303991001300865,0.6166984383137084,0.19501789922063706,0.6268702573120892,0.41476850232698825,0.9262793205826312,0.8950469271463632,0.5921495899232021,0.9552627541222216,0.5478126647353192,0.41498356084021903,0.6815560356887083,0.6956006375443382,0.11890046180890623,0.6880350845527858,0.5845626851211152,0.4833025320329649,0.23433885117801334,0.9899246779787734,0.575925984511886,0.21837175060254732,0.40995126017915307,0.8611632170522312,0.9336718527672483,0.6680374269585005,0.20236966854862426,0.7718422622166055,0.29176105917952033]}
},{}],10:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var factory = require( './../lib/factory.js' );


// FIXTURES //

var smallRange = require( './fixtures/julia/small_range.json' );
var mediumRange = require( './fixtures/julia/medium_range.json' );
var largeRange = require( './fixtures/julia/large_range.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a function', function test( t ) {
	var quantile = factory( 0.0, 1.0 );
	t.equal( typeof quantile, 'function', 'returns a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the created function returns `NaN`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0.0, 1.0 );
	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, 1.0 );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( 1.0, NaN );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, NaN );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NaN, NaN );
	y = quantile( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided a finite `a` and `b`, the function returns a function which returns `NaN` when provided a number outside `[0,1]` for `p`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 0.0, 1.0 );
	y = quantile( -0.1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 1.1 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'if provided `a >= b`, the created function always returns `NaN`', function test( t ) {
	var quantile;
	var y;

	quantile = factory( 1.0, 0.5 );

	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( NINF, NINF );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	quantile = factory( PINF, NINF );
	y = quantile( 0.3 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the created function evaluates the quantile for `p` given a small range `b - a`', function test( t ) {
	var expected;
	var quantile;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = smallRange.expected;
	p = smallRange.p;
	a = smallRange.a;
	b = smallRange.b;
	for ( i = 0; i < p.length; i++ ) {
		quantile = factory( a[i], b[i] );
		y = quantile( p[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the created function evaluates the quantile for `p` given a medium range `b - a`', function test( t ) {
	var expected;
	var quantile;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = mediumRange.expected;
	p = mediumRange.p;
	a = mediumRange.a;
	b = mediumRange.b;
	for ( i = 0; i < p.length; i++ ) {
		quantile = factory( a[i], b[i] );
		y = quantile( p[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the created function evaluates the quantile for `p` given a large range `b - a`', function test( t ) {
	var expected;
	var quantile;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = largeRange.expected;
	p = largeRange.p;
	a = largeRange.a;
	b = largeRange.b;
	for ( i = 0; i < p.length; i++ ) {
		quantile = factory( a[i], b[i] );
		y = quantile( p[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dist/uniform/quantile/test/test.factory.js")
},{"./../lib/factory.js":3,"./fixtures/julia/large_range.json":7,"./fixtures/julia/medium_range.json":8,"./fixtures/julia/small_range.json":9,"@stdlib/math/base/assert/is-nan":1,"@stdlib/math/base/special/abs":14,"@stdlib/math/constants/float64-eps":15,"@stdlib/math/constants/float64-ninf":16,"@stdlib/math/constants/float64-pinf":17,"tape":74}],11:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var quantile = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof quantile, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a factory method for generating `quantile` functions', function test( t ) {
	t.equal( typeof quantile.factory, 'function', 'exports a factory method' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dist/uniform/quantile/test/test.js")
},{"./../lib":4,"tape":74}],12:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var quantile = require( './../lib' );


// FIXTURES //

var smallRange = require( './fixtures/julia/small_range.json' );
var mediumRange = require( './fixtures/julia/medium_range.json' );
var largeRange = require( './fixtures/julia/large_range.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof quantile, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', function test( t ) {
	var y = quantile( NaN, 0.0, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = quantile( 0.2, NaN, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = quantile( 0.2, 1.0, NaN );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided a number outside `[0,1]` for `p` and a valid `a` and `b`, the function returns `NaN`', function test( t ) {
	var y = quantile( 1.1, 0.0, 1.0 );
	t.equal( isnan( y ), true, 'returns true' );
	y = quantile( -0.1, 0.0, 1.0 );
	t.equal( isnan( y ), true, 'returns true' );
	t.end();
});

tape( 'if provided `a >= b`, the function returns `NaN`', function test( t ) {
	var y;

	y = quantile( 0.5, NINF, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.5, PINF, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.5, 2.0, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = quantile( 0.5, -2.0, -3.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the function evaluates the quantile for `p` given a small range `b - a`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = smallRange.expected;
	p = smallRange.p;
	a = smallRange.a;
	b = smallRange.b;
	for ( i = 0; i < p.length; i++ ) {
		y = quantile( p[i], a[i], b[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the quantile for `p` given a medium range `b - a`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = mediumRange.expected;
	p = mediumRange.p;
	a = mediumRange.a;
	b = mediumRange.b;
	for ( i = 0; i < p.length; i++ ) {
		y = quantile( p[i], a[i], b[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});


tape( 'the function evaluates the quantile for `p` given a large range `b - a`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var i;
	var p;
	var y;

	expected = largeRange.expected;
	p = largeRange.p;
	a = largeRange.a;
	b = largeRange.b;
	for ( i = 0; i < p.length; i++ ) {
		y = quantile( p[i], a[i], b[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'p: '+p[i]+', a: '+a[i]+', b: '+b[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = 1.0 * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. p: '+p[ i ]+'. a: '+a[i]+'. b: '+b[i]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dist/uniform/quantile/test/test.quantile.js")
},{"./../lib":4,"./fixtures/julia/large_range.json":7,"./fixtures/julia/medium_range.json":8,"./fixtures/julia/small_range.json":9,"@stdlib/math/base/assert/is-nan":1,"@stdlib/math/base/special/abs":14,"@stdlib/math/constants/float64-eps":15,"@stdlib/math/constants/float64-ninf":16,"@stdlib/math/constants/float64-pinf":17,"tape":74}],13:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],14:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":13}],15:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],16:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],17:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],18:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],19:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":18}],20:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],21:[function(require,module,exports){

},{}],22:[function(require,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"dup":21}],23:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],24:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":20,"ieee754":43}],25:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":45}],26:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":27,"./lib/keys.js":28}],27:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],28:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],29:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":39,"object-keys":48}],30:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],31:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":32,"./helpers/isNaN":33,"./helpers/mod":34,"./helpers/sign":35,"es-to-primitive/es5":36,"has":42,"is-callable":46}],32:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],33:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],34:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],35:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],36:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":37,"is-callable":46}],37:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],38:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],39:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],40:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],41:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":40}],42:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":41}],43:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],44:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],45:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],46:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],47:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],48:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":49}],49:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],50:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":23}],51:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":23}],52:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":53}],53:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":55,"./_stream_writable":57,"core-util-is":25,"inherits":44,"process-nextick-args":51}],54:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":56,"core-util-is":25,"inherits":44}],55:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":53,"./internal/streams/BufferList":58,"./internal/streams/destroy":59,"./internal/streams/stream":60,"_process":23,"core-util-is":25,"events":38,"inherits":44,"isarray":61,"process-nextick-args":51,"safe-buffer":68,"string_decoder/":62,"util":21}],56:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":53,"core-util-is":25,"inherits":44}],57:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":53,"./internal/streams/destroy":59,"./internal/streams/stream":60,"_process":23,"core-util-is":25,"inherits":44,"process-nextick-args":51,"safe-buffer":68,"util-deprecate":80}],58:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":68}],59:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":51}],60:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":38}],61:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],62:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":68}],63:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":64}],64:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":53,"./lib/_stream_passthrough.js":54,"./lib/_stream_readable.js":55,"./lib/_stream_transform.js":56,"./lib/_stream_writable.js":57}],65:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":64}],66:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":57}],67:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":23,"through":79}],68:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":24}],69:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":38,"inherits":44,"readable-stream/duplex.js":52,"readable-stream/passthrough.js":63,"readable-stream/readable.js":64,"readable-stream/transform.js":65,"readable-stream/writable.js":66}],70:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":31,"function-bind":41}],71:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":70,"./polyfill":72,"./shim":73,"define-properties":29,"function-bind":41}],72:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":70}],73:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":72,"define-properties":29}],74:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":75,"./lib/results":77,"./lib/test":78,"_process":23,"defined":30,"through":79}],75:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":23,"fs":22,"through":79}],76:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":23}],77:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":23,"events":38,"function-bind":41,"has":42,"inherits":44,"object-inspect":47,"resumer":67,"through":79}],78:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":76,"deep-equal":26,"defined":30,"events":38,"has":42,"inherits":44,"path":50,"string.prototype.trim":71}],79:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":23,"stream":69}],80:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[10,11,12]);
