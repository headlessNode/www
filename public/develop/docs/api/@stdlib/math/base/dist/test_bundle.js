// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
} // end FUNCTION hasOwnProp()


// EXPORTS //

module.exports = hasOwnProp;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var hasOwnProp = require( './has_own_property.js' );


// EXPORTS //

module.exports = hasOwnProp;

},{"./has_own_property.js":1}],3:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is an integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an integer
*
* @example
* var bool = isInteger( 5.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isInteger( -3.14 );
* // returns false
*
* @example
* var bool = isInteger( null );
* // returns false
*/
function isInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"./object.js":6,"./primitive.js":7}],4:[function(require,module,exports){
'use strict';

/**
* Test if a value is an integer.
*
* @module @stdlib/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/assert/is-integer' );
*
* var bool = isInteger( 5.0 );
* // returns true
*
* bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isInteger( -3.14 );
* // returns false
*
* bool = isInteger( null );
* // returns false
*
* @example
* // Use interface to check for integer primitives...
* var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
*
* var bool = isInteger( -3.0 );
* // returns true
*
* bool = isInteger( new Number( -3.0 ) );
* // returns false
*
* @example
* // Use interface to check for integer objects...
* var isInteger = require( '@stdlib/assert/is-integer' ).isObject;
*
* var bool = isInteger( 3.0 );
* // returns false
*
* bool = isInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isInteger, 'isPrimitive', isPrimitive );
setReadOnly( isInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isInteger;

},{"./generic.js":3,"./object.js":6,"./primitive.js":7,"@stdlib/utils/define-read-only-property":1425}],5:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isInt = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Tests if a number primitive is an integer value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a number primitive is an integer value
*/
function isInteger( value ) {
	return (
		value < PINF &&
		value > NINF &&
		isInt( value )
	);
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"@stdlib/math/base/assert/is-integer":41,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],6:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;
var isInt = require( './integer.js' );


// MAIN //

/**
* Tests if a value is a number object having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having an integer value
*
* @example
* var bool = isInteger( 3.0 );
* // returns false
*
* @example
* var bool = isInteger( new Number( 3.0 ) );
* // returns true
*/
function isInteger( value ) {
	return (
		isNumber( value ) &&
		isInt( value.valueOf() )
	);
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"./integer.js":5,"@stdlib/assert/is-number":20}],7:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isInt = require( './integer.js' );


// MAIN //

/**
* Tests if a value is a number primitive having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having an integer value
*
* @example
* var bool = isInteger( -3.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( -3.0 ) );
* // returns false
*/
function isInteger( value ) {
	return (
		isNumber( value ) &&
		isInt( value )
	);
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"./integer.js":5,"@stdlib/assert/is-number":20}],8:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],9:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":10}],10:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":8}],11:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( null );
* // returns false
*/
function isnan( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{"./object.js":13,"./primitive.js":14}],12:[function(require,module,exports){
'use strict';

/**
* Test if a value is `NaN`.
*
* @module @stdlib/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( new Number( NaN ) );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( null );
* // returns false
*
* @example
* // Use interface to check for `NaN` primitives...
* var isnan = require( '@stdlib/assert/is-nan' ).isPrimitive;
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns false
*
* @example
* // Use interface to check for `NaN` objects...
* var isnan = require( '@stdlib/assert/is-nan' ).isObject;
*
* var bool = isnan( NaN );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isnan = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isnan, 'isPrimitive', isPrimitive );
setReadOnly( isnan, 'isObject', isObject );


// EXPORTS //

module.exports = isnan;

},{"./generic.js":11,"./object.js":13,"./primitive.js":14,"@stdlib/utils/define-read-only-property":1425}],13:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;
var isNan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Tests if a value is a number object having a value of `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*/
function isnan( value ) {
	return (
		isNumber( value ) &&
		isNan( value.valueOf() )
	);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{"@stdlib/assert/is-number":20,"@stdlib/math/base/assert/is-nan":43}],14:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isNan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Tests if a value is a `NaN` number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `NaN` number primitive
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns false
*/
function isnan( value ) {
	return (
		isNumber( value ) &&
		isNan( value )
	);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{"@stdlib/assert/is-number":20,"@stdlib/math/base/assert/is-nan":43}],15:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a nonnegative integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( null );
* // returns false
*/
function isNonNegativeInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isNonNegativeInteger()


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"./object.js":17,"./primitive.js":18}],16:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a nonnegative integer.
*
* @module @stdlib/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* bool = isNonNegativeInteger( null );
* // returns false
*
* @example
* // Use interface to check for nonnegative integer primitives...
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for nonnegative integer objects...
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isObject;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNonNegativeInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isNonNegativeInteger, 'isPrimitive', isPrimitive );
setReadOnly( isNonNegativeInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"./generic.js":15,"./object.js":17,"./primitive.js":18,"@stdlib/utils/define-read-only-property":1425}],17:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/
function isNonNegativeInteger( value ) {
	return (
		isInteger( value ) &&
		value.valueOf() >= 0
	);
} // end FUNCTION isNonNegativeInteger()


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"@stdlib/assert/is-integer":4}],18:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*/
function isNonNegativeInteger( value ) {
	return (
		isInteger( value ) &&
		value >= 0
	);
} // end FUNCTION isNonNegativeInteger()


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"@stdlib/assert/is-integer":4}],19:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a number
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* @example
* bool = isNumber( NaN );
* // returns true
*
* @example
* bool = isNumber( null );
* // returns false
*/
function isNumber( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isNumber()


// EXPORTS //

module.exports = isNumber;

},{"./object.js":21,"./primitive.js":22}],20:[function(require,module,exports){
'use strict';

/**
* Test if a value is a number.
*
* @module @stdlib/assert/is-number
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' );
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( null );
* // returns false
*
* @example
* // Use interface to check for number primitives...
* var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns false
*
* @example
* // Use interface to check for number objects...
* var isNumber = require( '@stdlib/assert/is-number' ).isObject;
*
* var bool = isNumber( 3.14 );
* // returns false
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isNumber, 'isPrimitive', isPrimitive );
setReadOnly( isNumber, 'isObject', isObject );


// EXPORTS //

module.exports = isNumber;

},{"./generic.js":19,"./object.js":21,"./primitive.js":22,"@stdlib/utils/define-read-only-property":1425}],21:[function(require,module,exports){
'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();
var nativeClass = require( '@stdlib/utils/native-class' );
var test = require( './try2serialize.js' );


// MAIN //

/**
* Tests if a value is a number object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object
*
* @example
* var bool = isNumber( 3.14 );
* // returns false
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*/
function isNumber( value ) {
	if ( typeof value === 'object' ) {
		if ( hasToStringTag ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object Number]' );
	}
	return false;
} // end FUNCTION isNumber()


// EXPORTS //

module.exports = isNumber;

},{"./try2serialize.js":24,"@stdlib/utils/detect-tostringtag-support":1431,"@stdlib/utils/native-class":1433}],22:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns false
*/
function isNumber( value ) {
	return ( typeof value === 'number' );
} // end FUNCTION isNumber()


// EXPORTS //

module.exports = isNumber;

},{}],23:[function(require,module,exports){
'use strict';

// eslint-disable-next-line no-redeclare
var toString = Number.prototype.toString; // non-generic


// EXPORTS //

module.exports = toString;

},{}],24:[function(require,module,exports){
'use strict';

// MODULES //

var toString = require( './tostring.js' ); // eslint-disable-line no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		toString.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
} // end FUNCTION test()


// EXPORTS //

module.exports = test;

},{"./tostring.js":23}],25:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a positive integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive integer
*
* @example
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( 3.14 );
* // returns false
*
* @example
* var bool = isPositiveInteger( null );
* // returns false
*/
function isPositiveInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isPositiveInteger()


// EXPORTS //

module.exports = isPositiveInteger;

},{"./object.js":27,"./primitive.js":28}],26:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a positive integer.
*
* @module @stdlib/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveInteger( -5.0 );
* // returns false
*
* bool = isPositiveInteger( 3.14 );
* // returns false
*
* bool = isPositiveInteger( null );
* // returns false
*
* @example
* // Use interface to check for positive integer primitives...
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
*
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for positive integer objects...
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isObject;
*
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isPositiveInteger, 'isPrimitive', isPrimitive );
setReadOnly( isPositiveInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isPositiveInteger;

},{"./generic.js":25,"./object.js":27,"./primitive.js":28,"@stdlib/utils/define-read-only-property":1425}],27:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/
function isPositiveInteger( value ) {
	return (
		isInteger( value ) &&
		value.valueOf() > 0.0
	);
} // end FUNCTION isPositiveInteger()


// EXPORTS //

module.exports = isPositiveInteger;

},{"@stdlib/assert/is-integer":4}],28:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*/
function isPositiveInteger( value ) {
	return (
		isInteger( value ) &&
		value > 0.0
	);
} // end FUNCTION isPositiveInteger()


// EXPORTS //

module.exports = isPositiveInteger;

},{"@stdlib/assert/is-integer":4}],29:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a positive number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive number
*
* @example
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveNumber( 3.14 );
* // returns true
*
* @example
* var bool = isPositiveNumber( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( null );
* // returns false
*/
function isPositiveNumber( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isPositiveNumber()


// EXPORTS //

module.exports = isPositiveNumber;

},{"./object.js":31,"./primitive.js":32}],30:[function(require,module,exports){
'use strict';

/**
* Test if a value is a positive number.
*
* @module @stdlib/assert/is-positive-number
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' );
*
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveNumber( 3.14 );
* // returns true
*
* bool = isPositiveNumber( -5.0 );
* // returns false
*
* bool = isPositiveNumber( null );
* // returns false
*
* @example
* // Use interface to check for positive number primitives...
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
*
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for positive number objects...
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isObject;
*
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveNumber = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isPositiveNumber, 'isPrimitive', isPrimitive );
setReadOnly( isPositiveNumber, 'isObject', isObject );


// EXPORTS //

module.exports = isPositiveNumber;

},{"./generic.js":29,"./object.js":31,"./primitive.js":32,"@stdlib/utils/define-read-only-property":1425}],31:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/
function isPositiveNumber( value ) {
	return (
		isNumber( value ) &&
		value.valueOf() > 0.0
	);
} // end FUNCTION isPositiveNumber()


// EXPORTS //

module.exports = isPositiveNumber;

},{"@stdlib/assert/is-number":20}],32:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*/
function isPositiveNumber( value ) {
	return (
		isNumber( value ) &&
		value > 0.0
	);
} // end FUNCTION isPositiveNumber()


// EXPORTS //

module.exports = isPositiveNumber;

},{"@stdlib/assert/is-number":20}],33:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( -5.0 );
* // returns false
*
* @example
* var bool = isProbability( null );
* // returns false
*/
function isProbability( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isProbability()


// EXPORTS //

module.exports = isProbability;

},{"./object.js":35,"./primitive.js":36}],34:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a probability.
*
* @module @stdlib/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( -5.0 );
* // returns false
*
* bool = isProbability( null );
* // returns false
*
* @example
* // Use interface to check for probability primitives...
* var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
*
* var bool = isProbability( 0.3 );
* // returns true
*
* bool = isProbability( new Number( 0.3 ) );
* // returns false
*
* @example
* // Use interface to check for probability objects...
* var isProbability = require( '@stdlib/assert/is-probability' ).isObject;
*
* var bool = isProbability( 0.77 );
* // returns false
*
* bool = isProbability( new Number( 0.77 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isProbability = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isProbability, 'isPrimitive', isPrimitive );
setReadOnly( isProbability, 'isObject', isObject );


// EXPORTS //

module.exports = isProbability;

},{"./generic.js":33,"./object.js":35,"./primitive.js":36,"@stdlib/utils/define-read-only-property":1425}],35:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value which is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns false
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*/
function isProbability( value ) {
	return (
		isNumber( value ) &&
		value.valueOf() >= 0.0 &&
		value.valueOf() <= 1.0
	);
} // end FUNCTION isProbability()


// EXPORTS //

module.exports = isProbability;

},{"@stdlib/assert/is-number":20}],36:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a value which is a probability
*
* @example
* var bool = isProbability( 0.66 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.66 ) );
* // returns false
*/
function isProbability( value ) {
	return (
		isNumber( value ) &&
		value >= 0.0 &&
		value <= 1.0
	);
} // end FUNCTION isProbability()


// EXPORTS //

module.exports = isProbability;

},{"@stdlib/assert/is-number":20}],37:[function(require,module,exports){
'use strict';

/**
* Test if a finite numeric value is an even number.
*
* @module @stdlib/math/base/assert/is-even
*
* @example
* var isEven = require( '@stdlib/math/base/assert/is-even' );
*
* var bool = isEven( 5.0 );
* // returns false
*
* bool = isEven( -2.0 );
* // returns true
*
* bool = isEven( 0.0 );
* // returns true
*
* bool = isEven( NaN );
* // returns false
*/

// MODULES //

var isEven = require( './is_even.js' );


// EXPORTS //

module.exports = isEven;

},{"./is_even.js":38}],38:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Tests if a finite numeric value is an even number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an even number
*
* @example
* var bool = isEven( 5.0 );
* // returns false
*
* @example
* var bool = isEven( -2.0 );
* // returns true
*
* @example
* var bool = isEven( 0.0 );
* // returns true
*
* @example
* var bool = isEven( NaN );
* // returns false
*/
function isEven( x ) {
	return isInteger( x/2.0 );
} // end FUNCTION isEven()


// EXPORTS //

module.exports = isEven;

},{"@stdlib/math/base/assert/is-integer":41}],39:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":40}],40:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
} // end FUNCTION isInfinite()


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],41:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is an integer.
*
* @module @stdlib/math/base/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/math/base/assert/is-integer' );
*
* var bool = isInteger( 1.0 );
* // returns true
*
* bool = isInteger( 3.14 );
* // returns false
*/

// MODULES //

var isInteger = require( './is_integer.js' );


// EXPORTS //

module.exports = isInteger;

},{"./is_integer.js":42}],42:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is an integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an integer
*
* @example
* var bool = isInteger( 1.0 );
* // returns true
*
* @example
* var bool = isInteger( 3.14 );
* // returns false
*/
function isInteger( x ) {
	return (floor(x) === x);
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"@stdlib/math/base/special/floor":1266}],43:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":44}],44:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],45:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is a negative integer.
*
* @module @stdlib/math/base/assert/is-negative-integer
*
* @example
* var isNegativeInteger = require( '@stdlib/math/base/assert/is-negative-integer' );
*
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* bool = isNegativeInteger( 0.0 );
* // returns false
*
* bool = isNegativeInteger( 10.0 );
* // returns false
*/

// MODULES //

var isNegativeInteger = require( './is_negative_integer.js' );


// EXPORTS //

module.exports = isNegativeInteger;

},{"./is_negative_integer.js":46}],46:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a negative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a negative integer
*
* @example
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* @example
* var bool = isNegativeInteger( 0.0 );
* // returns false
*
* @example
* var bool = isNegativeInteger( 10.0 );
* // returns false
*/
function isNegativeInteger( x ) {
	return (floor(x) === x && x < 0.0);
} // end FUNCTION isNegativeInteger()


// EXPORTS //

module.exports = isNegativeInteger;

},{"@stdlib/math/base/special/floor":1266}],47:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is negative zero.
*
* @module @stdlib/math/base/assert/is-negative-zero
*
* @example
* var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
*
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* bool = isNegativeZero( 0.0 );
* // returns false
*/

// MODULES //

var isNegativeZero = require( './is_negative_zero.js' );


// EXPORTS //

module.exports = isNegativeZero;

},{"./is_negative_zero.js":48}],48:[function(require,module,exports){
'use strict';

// MODULES //

var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is negative zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is negative zero
*
* @example
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* @example
* var bool = isNegativeZero( 0.0 );
* // returns false
*/
function isNegativeZero( x ) {
	return (x === 0.0 && 1.0/x === NINF);
} // end FUNCTION isNegativeZero()


// EXPORTS //

module.exports = isNegativeZero;

},{"@stdlib/math/constants/float64-ninf":1411}],49:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is a nonnegative integer.
*
* @module @stdlib/math/base/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* bool = isNonNegativeInteger( -10.0 );
* // returns false
*/

// MODULES //

var isNonNegativeInteger = require( './is_nonnegative_integer.js' );


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"./is_nonnegative_integer.js":50}],50:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a nonnegative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -10.0 );
* // returns false
*/
function isNonNegativeInteger( x ) {
	return (floor(x) === x && x >= 0);
} // end FUNCTION isNonNegativeInteger()


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"@stdlib/math/base/special/floor":1266}],51:[function(require,module,exports){
'use strict';

/**
* Test if a finite numeric value is an odd number.
*
* @module @stdlib/math/base/assert/is-odd
*
* @example
* var isOdd = require( '@stdlib/math/base/assert/is-odd' );
*
* var bool = isOdd( 5.0 );
* // returns true
*
* bool = isOdd( -2.0 );
* // returns false
*
* bool = isOdd( 0.0 );
* // returns false
*
* bool = isOdd( NaN );
* // returns false
*/

// MODULES //

var isOdd = require( './is_odd.js' );


// EXPORTS //

module.exports = isOdd;

},{"./is_odd.js":52}],52:[function(require,module,exports){
'use strict';

// MODULES //

var isEven = require( '@stdlib/math/base/assert/is-even' );


// MAIN //

/**
* Tests if a finite numeric value is an odd number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an odd number
*
* @example
* var bool = isOdd( 5.0 );
* // returns true
*
* @example
* var bool = isOdd( -2.0 );
* // returns false
*
* @example
* var bool = isOdd( 0.0 );
* // returns false
*
* @example
* var bool = isOdd( NaN );
* // returns false
*/
function isOdd( x ) {
	// Check sign to prevent overflow...
	if ( x > 0.0 ) {
		return isEven( x-1.0 );
	}
	return isEven( x+1.0 );
} // end FUNCTION isOdd()


// EXPORTS //

module.exports = isOdd;

},{"@stdlib/math/base/assert/is-even":37}],53:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is a positive integer.
*
* @module @stdlib/math/base/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* bool = isPositiveInteger( 0.0 );
* // returns false
*
* bool = isPositiveInteger( -10.0 );
* // returns false
*/

// MODULES //

var isPositiveInteger = require( './is_positive_integer.js' );


// EXPORTS //

module.exports = isPositiveInteger;

},{"./is_positive_integer.js":54}],54:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a positive integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a positive integer
*
* @example
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -10.0 );
* // returns false
*/
function isPositiveInteger( x ) {
	return (floor(x) === x && x > 0);
} // end FUNCTION isPositiveInteger()


// EXPORTS //

module.exports = isPositiveInteger;

},{"@stdlib/math/base/special/floor":1266}],55:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is positive zero.
*
* @module @stdlib/math/base/assert/is-positive-zero
*
* @example
* var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
*
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* bool = isPositiveZero( -0.0 );
* // returns false
*/

// MODULES //

var isPositiveZero = require( './is_positive_zero.js' );


// EXPORTS //

module.exports = isPositiveZero;

},{"./is_positive_zero.js":56}],56:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Tests if a numeric value is positive zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is positive zero
*
* @example
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* @example
* var bool = isPositiveZero( -0.0 );
* // returns false
*/
function isPositiveZero( x ) {
	return (x === 0.0 && 1.0/x === PINF);
} // end FUNCTION isPositiveZero()


// EXPORTS //

module.exports = isPositiveZero;

},{"@stdlib/math/constants/float64-pinf":1414}],57:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is a probability.
*
* @module @stdlib/math/base/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/math/base/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( NaN );
* // returns false
*/

// MODULES //

var isProbability = require( './is_probability.js' );


// EXPORTS //

module.exports = isProbability;

},{"./is_probability.js":58}],58:[function(require,module,exports){
'use strict';

/**
* Tests if a numeric value is a probability.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( NaN );
* // returns false
*/
function isProbability( x ) {
	return ( x >= 0.0 && x <= 1.0 );
} // end FUNCTION isProbability()


// EXPORTS //

module.exports = isProbability;

},{}],59:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

var TWO_OVER_PI = 2.0 / PI;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns ~0.795
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns ~0.333
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function cdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	if ( x >= b ) {
		return 1.0;
	}
	return TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/asin":1187,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],60:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var nan = require( './nan.js' );


// VARIABLES //

var TWO_OVER_PI = 2.0 / PI;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns ~0.144
*
* y = cdf( 8.0 );
* // returns ~0.705
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		if ( x >= b ) {
			return 1.0;
		}
		return TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":62,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/asin":1187,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],61:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/arcsine/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/arcsine/cdf' );
*
* var y = cdf( 5.0, 0.0, 4.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 0.0, 10.0 );
* y = mycdf( 0.5 );
* // returns ~0.144
*
* y = mycdf( 8.0 );
* // returns ~0.705
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":59,"./factory.js":60,"@stdlib/utils/define-read-only-property":1425}],62:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid arcsine distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],63:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/arcsine/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/arcsine/kurtosis' );
var mean = require( '@stdlib/math/base/dist/arcsine/mean' );
var median = require( '@stdlib/math/base/dist/arcsine/median' );
var mode = require( '@stdlib/math/base/dist/arcsine/mode' );
var skewness = require( '@stdlib/math/base/dist/arcsine/skewness' );
var stdev = require( '@stdlib/math/base/dist/arcsine/stdev' );
var variance = require( '@stdlib/math/base/dist/arcsine/variance' );
var cdf = require( '@stdlib/math/base/dist/arcsine/cdf' );
var logpdf = require( '@stdlib/math/base/dist/arcsine/logpdf' );
var pdf = require( '@stdlib/math/base/dist/arcsine/pdf' );
var quantile = require( '@stdlib/math/base/dist/arcsine/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function arcsineCDF( x ) {
	return cdf( x, this.a, this.b );
} // end FUNCTION arcsineCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function arcsineLogPDF( x ) {
	return logpdf( x, this.a, this.b );
} // end FUNCTION arcsineLogPDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function arcsinePDF( x ) {
	return pdf( x, this.a, this.b );
} // end FUNCTION arcsinePDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function arcsineQuantile( p ) {
	return quantile( p, this.a, this.b );
} // end FUNCTION arcsineQuantile()


// MAIN //

/**
* Arcsine distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {RangeError} `a` must be smaller than `b`
* @returns {Arcsine} distribution instance
*
* @example
* var arcsine = new Arcsine( 0.0, 1.0 );
*
* var y = arcsine.cdf( 0.8 );
* // returns ~0.705
*
* var mu = arcsine.mean;
* // returns 0.5
*/
function Arcsine() {
	var a;
	var b;
	if ( !(this instanceof Arcsine) ) {
		if ( arguments.length === 0 ) {
			return new Arcsine();
		}
		return new Arcsine( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( a >= b ) {
			throw new RangeError( 'invalid input arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new Arcsine( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value >= b ) {
				throw new RangeError( 'invalid value. Must be smaller than `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new Arcsine( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a >= value ) {
				throw new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
} // end FUNCTION Arcsine()

/**
* Arcsine distribution differential entropy.
*
* @memberof Arcsine.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.entropy;
* // returns ~1.838
*/
Object.defineProperty( Arcsine.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.a, this.b );
	}
});

/**
* Arcsine distribution excess kurtosis.
*
* @memberof Arcsine.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.kurtosis;
* // returns -1.5
*/
Object.defineProperty( Arcsine.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b );
	}
});

/**
* Arcsine distribution expected value.
*
* @memberof Arcsine.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.mean;
* // returns 8.0
*/
Object.defineProperty( Arcsine.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b );
	}
});

/**
* Arcsine distribution median.
*
* @memberof Arcsine.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.median;
* // returns 8.0
*/
Object.defineProperty( Arcsine.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.a, this.b );
	}
});

/**
* Arcsine distribution mode.
*
* @memberof Arcsine.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.mode;
* // returns 4.0
*/
Object.defineProperty( Arcsine.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.a, this.b );
	}
});

/**
* Arcsine distribution skewness.
*
* @memberof Arcsine.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.skewness;
* // returns 0.0
*/
Object.defineProperty( Arcsine.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b );
	}
});

/**
* Arcsine distribution standard deviation.
*
* @memberof Arcsine.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.stdev;
* // returns ~2.828
*/
Object.defineProperty( Arcsine.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b );
	}
});

/**
* Arcsine distribution variance.
*
* @memberof Arcsine.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.variance;
* // returns 8.0
*/
Object.defineProperty( Arcsine.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Arcsine.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.cdf( 3.0 );
* // returns ~0.5
*/
setReadOnly( Arcsine.prototype, 'cdf', arcsineCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Arcsine.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.logpdf( 2.5 );
* // returns ~-0.922
*/
setReadOnly( Arcsine.prototype, 'logpdf', arcsineLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Arcsine.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.pdf( 2.4 );
* // returns ~0.398
*/
setReadOnly( Arcsine.prototype, 'pdf', arcsinePDF );

/**
* Evaluates the quantile function.
*
* @memberof Arcsine.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Arcsine.prototype, 'quantile', arcsineQuantile );


// EXPORTS //

module.exports = Arcsine;

},{"@stdlib/assert/is-number":20,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/arcsine/cdf":61,"@stdlib/math/base/dist/arcsine/entropy":66,"@stdlib/math/base/dist/arcsine/kurtosis":67,"@stdlib/math/base/dist/arcsine/logpdf":71,"@stdlib/math/base/dist/arcsine/mean":74,"@stdlib/math/base/dist/arcsine/median":76,"@stdlib/math/base/dist/arcsine/mode":78,"@stdlib/math/base/dist/arcsine/pdf":81,"@stdlib/math/base/dist/arcsine/quantile":85,"@stdlib/math/base/dist/arcsine/skewness":88,"@stdlib/math/base/dist/arcsine/stdev":90,"@stdlib/math/base/dist/arcsine/variance":92,"@stdlib/utils/define-read-only-property":1425}],64:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution constructor.
*
* @module @stdlib/math/base/dist/arcsine/ctor
*
* @example
* var Arcsine = require( '@stdlib/math/base/dist/arcsine/ctor' );
*
* var arcsine = new Arcsine( 0.0, 1.0 );
*
* var y = arcsine.cdf( 0.8 );
* // returns ~0.705
*
* var mu = arcsine.mean;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":63}],65:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var FOURTH_PI = require( '@stdlib/math/constants/float64-fourth-pi' );


// VARIABLES //

var LN_FOURTH_PI = ln( FOURTH_PI );


// MAIN //

/**
* Returns the differential entropy of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} entropy
*
* @example
* var v = entropy( 0.0, 1.0 );
* // returns ~-0.242
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.838
* @example
* var v = entropy( -4.0, 4.0 );
* // returns ~1.838
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return LN_FOURTH_PI + ln( b - a );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-fourth-pi":1395}],66:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution differential entropy.
*
* @module @stdlib/math/base/dist/arcsine/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/arcsine/entropy' );
*
* var v = entropy( 0.0, 1.0 );
* // returns ~-0.242
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.838
*
* v = entropy( 2.0, 8.0 );
* // returns ~1.55
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":65}],67:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/arcsine/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/arcsine/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.5
*
* v = kurtosis( 4.0, 12.0 );
* // returns -1.5
*
* v = kurtosis( 2.0, 8.0 );
* // returns -1.5
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":68}],68:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.5
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns -1.5
* @example
* var v = kurtosis( -4.0, 4.0 );
* // returns -1.5
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return -1.5;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],69:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace arcsine
*/
var arcsine = {};

/**
* @name Arcsine
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/ctor}
*/
setReadOnly( arcsine, 'Arcsine', require( '@stdlib/math/base/dist/arcsine/ctor' ) );

/**
* @name cdf
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/cdf}
*/
setReadOnly( arcsine, 'cdf', require( '@stdlib/math/base/dist/arcsine/cdf' ) );

/**
* @name entropy
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/entropy}
*/
setReadOnly( arcsine, 'entropy', require( '@stdlib/math/base/dist/arcsine/entropy' ) );

/**
* @name kurtosis
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/kurtosis}
*/
setReadOnly( arcsine, 'kurtosis', require( '@stdlib/math/base/dist/arcsine/kurtosis' ) );

/**
* @name logpdf
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/logpdf}
*/
setReadOnly( arcsine, 'logpdf', require( '@stdlib/math/base/dist/arcsine/logpdf' ) );

/**
* @name mean
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/mean}
*/
setReadOnly( arcsine, 'mean', require( '@stdlib/math/base/dist/arcsine/mean' ) );

/**
* @name median
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/median}
*/
setReadOnly( arcsine, 'median', require( '@stdlib/math/base/dist/arcsine/median' ) );

/**
* @name mode
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/mode}
*/
setReadOnly( arcsine, 'mode', require( '@stdlib/math/base/dist/arcsine/mode' ) );

/**
* @name pdf
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/pdf}
*/
setReadOnly( arcsine, 'pdf', require( '@stdlib/math/base/dist/arcsine/pdf' ) );

/**
* @name quantile
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/quantile}
*/
setReadOnly( arcsine, 'quantile', require( '@stdlib/math/base/dist/arcsine/quantile' ) );

/**
* @name skewness
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/skewness}
*/
setReadOnly( arcsine, 'skewness', require( '@stdlib/math/base/dist/arcsine/skewness' ) );

/**
* @name stdev
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/stdev}
*/
setReadOnly( arcsine, 'stdev', require( '@stdlib/math/base/dist/arcsine/stdev' ) );

/**
* @name variance
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/arcsine/variance}
*/
setReadOnly( arcsine, 'variance', require( '@stdlib/math/base/dist/arcsine/variance' ) );


// EXPORTS //

module.exports = arcsine;

},{"@stdlib/math/base/dist/arcsine/cdf":61,"@stdlib/math/base/dist/arcsine/ctor":64,"@stdlib/math/base/dist/arcsine/entropy":66,"@stdlib/math/base/dist/arcsine/kurtosis":67,"@stdlib/math/base/dist/arcsine/logpdf":71,"@stdlib/math/base/dist/arcsine/mean":74,"@stdlib/math/base/dist/arcsine/median":76,"@stdlib/math/base/dist/arcsine/mode":78,"@stdlib/math/base/dist/arcsine/pdf":81,"@stdlib/math/base/dist/arcsine/quantile":85,"@stdlib/math/base/dist/arcsine/skewness":88,"@stdlib/math/base/dist/arcsine/stdev":90,"@stdlib/math/base/dist/arcsine/variance":92,"@stdlib/utils/define-read-only-property":1425}],70:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_PI = require( '@stdlib/math/constants/float64-ln-pi' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 10.0 );
* var y = logpdf( 2.0 );
* // returns ~-2.531
*
* y = logpdf( 12.0 );
* // returns Number.NEGATIVE_INFINITY
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return NINF;
		}
		return -( LN_PI + ( ln( ( x-a ) * ( b-x ) ) / 2.0 ) );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":73,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ln-pi":1400,"@stdlib/math/constants/float64-ninf":1411}],71:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/arcsine/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/arcsine/logpdf' );
*
* var y = logpdf( 3.0, 2.0, 6.0 );
* // returns ~-1.694
*
* var mylogPDF = logpdf.factory( 6.0, 7.0 );
* y = mylogPDF( 7.0 );
* // returns Number.POSITIVE_INFINITY
*
* y = mylogPDF( 5.0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":70,"./logpdf.js":72,"@stdlib/utils/define-read-only-property":1425}],72:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_PI = require( '@stdlib/math/constants/float64-ln-pi' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 4.0 );
* // returns ~-1.838
* @example
* var y = logpdf( 5.0, 0.0, 4.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 0.25, 0.0, 1.0 );
* // returns ~-0.308
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = logpdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function logpdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return NINF;
	}
	return -( LN_PI + ( ln( ( x-a ) * ( b-x ) ) / 2.0 ) );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ln-pi":1400,"@stdlib/math/constants/float64-ninf":1411}],73:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid arcsine distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 1.0 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],74:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution expected value.
*
* @module @stdlib/math/base/dist/arcsine/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/arcsine/mean' );
*
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 8.0
*
* v = mean( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":75}],75:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0 );
* // returns 0.5
* @example
* var v = mean( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = mean( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{}],76:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution median.
*
* @module @stdlib/math/base/dist/arcsine/median
*
* @example
* var median = require( '@stdlib/math/base/dist/arcsine/median' );
*
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns 8.0
*
* v = median( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":77}],77:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the median of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0 );
* // returns 0.5
* @example
* var v = median( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = median( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{}],78:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution mode.
*
* @module @stdlib/math/base/dist/arcsine/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/arcsine/mode' );
*
* var v = mode( 0.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns 4.0
*
* v = mode( 2.0, 8.0 );
* // returns 2.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":79}],79:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} mode
*
* @example
* var v = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns 4.0
* @example
* var v = mode( -4.0, 4.0 );
* // returns -4.0
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return a;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],80:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0 );
* var y = pdf( 2.0 );
* // returns ~0.08
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return 0.0;
		}
		return 1.0 / ( PI * sqrt( ( x-a ) * ( b-x ) ) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":82,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],81:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/arcsine/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/arcsine/pdf' );
*
* var y = pdf( 3.0, 2.0, 6.0 );
* // returns ~0.184
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 7.0 );
* // returns Number.POSITIVE_INFINITY
*
* y = myPDF( 5.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":80,"./pdf.js":83,"@stdlib/utils/define-read-only-property":1425}],82:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid arcsine distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 1.0 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],83:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 4.0 );
* // returns ~0.159
* @example
* var y = pdf( 5.0, 0.0, 4.0 );
* // returns 0.0
* @example
* var y = pdf( 0.25, 0.0, 1.0 );
* // returns ~0.735
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = pdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function pdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	return 1.0 / ( PI * sqrt( ( x-a ) * ( b-x ) ) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],84:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var sin = require( '@stdlib/math/base/special/sin' );
var HALF_PI = require( '@stdlib/math/constants/float64-half-pi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for an arcsine distribution with minimum support `a` an maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0 );
* var y = quantile( 0.4 );
* // returns ~2.691
*
* y = quantile( 0.8 );
* // returns ~3.809
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for an arcsine distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + ( pow( sin( HALF_PI*p ), 2.0 ) * ( b-a ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":86,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sin":1330,"@stdlib/math/constants/float64-half-pi":1397}],85:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution quantile function.
*
* @module @stdlib/math/base/dist/arcsine/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/arcsine/quantile' );
*
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns ~5.0
*
* var myQuantile = quantile.factory( 0.0, 4.0 );
* y = myQuantile( 0.8 );
* // returns ~3.618
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":84,"./quantile.js":87,"@stdlib/utils/define-read-only-property":1425}],86:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid arcsine distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],87:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var sin = require( '@stdlib/math/base/special/sin' );
var HALF_PI = require( '@stdlib/math/constants/float64-half-pi' );


// MAIN //

/**
* Evaluates the quantile function for an arcsine distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.905
* @example
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns ~5.0
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, 2.0, 1.0 );
* // returns NaN
*/
function quantile( p, a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return a + ( pow( sin( HALF_PI*p ), 2.0 ) * ( b-a ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sin":1330,"@stdlib/math/constants/float64-half-pi":1397}],88:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution skewness.
*
* @module @stdlib/math/base/dist/arcsine/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/arcsine/skewness' );
*
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* v = skewness( 2.0, 8.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":89}],89:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 0.0
* @example
* var v = skewness( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43}],90:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution standard deviation.
*
* @module @stdlib/math/base/dist/arcsine/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/arcsine/stdev' );
*
* var v = stdev( 0.0, 1.0 );
* // returns ~0.354
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* v = stdev( 2.0, 8.0 );
* // returns ~2.121
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":91}],91:[function(require,module,exports){
'use strict';

// VARIABLES //

var SQRT1OVER8 = 0.35355339059327373; // sqrt( 1.0/8.0 )


// MAIN //

/**
* Returns the standard deviation of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0 );
* // returns ~0.354
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.828
* @example
* var v = stdev( -4.0, 4.0 );
* // returns ~2.828
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( a, b ) {
	if ( a >= b ) {
		return NaN;
	}
	return SQRT1OVER8 * ( b-a );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{}],92:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution variance.
*
* @module @stdlib/math/base/dist/arcsine/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/arcsine/variance' );
*
* var v = variance( 0.0, 1.0 );
* // returns ~0.125
*
* v = variance( 4.0, 12.0 );
* // returns 8.0
*
* v = variance( 2.0, 8.0 );
* // returns ~4.5
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":93}],93:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} variance
*
* @example
* var v = variance( 0.0, 1.0 );
* // returns ~0.125
* @example
* var v = variance( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = variance( -4.0, 4.0 );
* // returns 8.0
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( a, b ) {
	if ( a >= b ) {
		return NaN;
	}
	return (1.0/8.0) * pow( b-a, 2.0 );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/special/pow":1311}],94:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.813
*
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.104
*
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.967
*
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( 1.5, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x >= 1.0 ) {
		return 1.0;
	}
	return betainc( x, alpha, beta );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betainc":1203}],95:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.705
*
* y = cdf( 0.3 );
* // returns ~0.369
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x >= 1.0 ) {
			return 1.0;
		}
		return betainc( x, alpha, beta );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":97,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betainc":1203}],96:[function(require,module,exports){
'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a beta distribution.
*
* @module @stdlib/math/base/dist/beta/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/beta/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.813
*
* @example
* var factory = require( '@stdlib/math/base/dist/beta/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.705
*
* y = cdf( 0.3 );
* // returns ~0.369
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":94,"./factory.js":95,"@stdlib/utils/define-read-only-property":1425}],97:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid beta distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],98:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/beta/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/beta/kurtosis' );
var mean = require( '@stdlib/math/base/dist/beta/mean' );
var median = require( '@stdlib/math/base/dist/beta/median' );
var mode = require( '@stdlib/math/base/dist/beta/mode' );
var skewness = require( '@stdlib/math/base/dist/beta/skewness' );
var stdev = require( '@stdlib/math/base/dist/beta/stdev' );
var variance = require( '@stdlib/math/base/dist/beta/variance' );
var cdf = require( '@stdlib/math/base/dist/beta/cdf' );
var logpdf = require( '@stdlib/math/base/dist/beta/logpdf' );
var mgf = require( '@stdlib/math/base/dist/beta/mgf' );
var pdf = require( '@stdlib/math/base/dist/beta/pdf' );
var quantile = require( '@stdlib/math/base/dist/beta/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function betaCDF( x ) {
	return cdf( x, this.alpha, this.beta );
} // end FUNCTION betaCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function betaLogPDF( x ) {
	return logpdf( x, this.alpha, this.beta );
} // end FUNCTION betaLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function betaMGF( t ) {
	return mgf( t, this.alpha, this.beta );
} // end FUNCTION betaMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function betaPDF( x ) {
	return pdf( x, this.alpha, this.beta );
} // end FUNCTION betaPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function betaQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
} // end FUNCTION betaQuantile()


// MAIN //

/**
* Beta distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - first shape parameter
* @param {PositiveNumber} [beta=1.0] - second shape parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Beta} distribution instance
*
* @example
* var beta = new Beta( 1.0, 1.0 );
*
* var y = beta.cdf( 0.8 );
* // returns 0.8
*
* var mu = beta.mean;
* // returns 0.5
*/
function Beta() {
	var alpha;
	var beta;
	if ( !(this instanceof Beta) ) {
		if ( arguments.length === 0 ) {
			return new Beta();
		}
		return new Beta( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
} // end FUNCTION Beta()

/**
* Beta distribution differential entropy.
*
* @memberof Beta.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.entropy;
* // returns ~-0.869
*/
Object.defineProperty( Beta.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.beta );
	}
});

/**
* Beta distribution excess kurtosis.
*
* @memberof Beta.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.kurtosis;
* // returns ~0.082
*/
Object.defineProperty( Beta.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Beta distribution expected value.
*
* @memberof Beta.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.mean;
* // returns 0.25
*/
Object.defineProperty( Beta.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Beta distribution median.
*
* @memberof Beta.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.median;
* // returns ~0.239
*/
Object.defineProperty( Beta.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.alpha, this.beta );
	}
});

/**
* Beta distribution mode.
*
* @memberof Beta.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.mode;
* // returns 0.25
*/
Object.defineProperty( Beta.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Beta distribution skewness.
*
* @memberof Beta.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.skewness;
* // returns ~0.011
*/
Object.defineProperty( Beta.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Beta distribution standard deviation.
*
* @memberof Beta.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.stdev;
* // returns ~0.105
*/
Object.defineProperty( Beta.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.beta );
	}
});

/**
* Beta distribution variance.
*
* @memberof Beta.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.variance;
* // returns ~0.011
*/
Object.defineProperty( Beta.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Beta.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.cdf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Beta.prototype, 'cdf', betaCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Beta.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.logpdf( 0.8 );
* // returns ~-2.0557
*/
setReadOnly( Beta.prototype, 'logpdf', betaLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Beta.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.mgf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Beta.prototype, 'mgf', betaMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Beta.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.pdf( 0.8 );
* // returns ~0.013
*/
setReadOnly( Beta.prototype, 'pdf', betaPDF );

/**
* Evaluates the quantile function.
*
* @memberof Beta.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.quantile( 0.5 );
* // returns ~0.314
*/
setReadOnly( Beta.prototype, 'quantile', betaQuantile );


// EXPORTS //

module.exports = Beta;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/beta/cdf":96,"@stdlib/math/base/dist/beta/entropy":101,"@stdlib/math/base/dist/beta/kurtosis":102,"@stdlib/math/base/dist/beta/logpdf":106,"@stdlib/math/base/dist/beta/mean":109,"@stdlib/math/base/dist/beta/median":111,"@stdlib/math/base/dist/beta/mgf":115,"@stdlib/math/base/dist/beta/mode":118,"@stdlib/math/base/dist/beta/pdf":121,"@stdlib/math/base/dist/beta/quantile":125,"@stdlib/math/base/dist/beta/skewness":128,"@stdlib/math/base/dist/beta/stdev":130,"@stdlib/math/base/dist/beta/variance":132,"@stdlib/utils/define-read-only-property":1425}],99:[function(require,module,exports){
'use strict';

/**
* Beta distribution constructor.
*
* @module @stdlib/math/base/dist/beta/ctor
*
* @example
* var Beta = require( '@stdlib/math/base/dist/beta/ctor' );
*
* var beta = new Beta( 1.0, 1.0 );
*
* var y = beta.cdf( 0.8 );
* // returns 0.8
*
* var mu = beta.mean;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":98}],100:[function(require,module,exports){
'use strict';

// MODULES //

var digamma = require( '@stdlib/math/base/special/digamma' );
var betaln = require( '@stdlib/math/base/special/betaln' );


// MAIN //

/**
* Returns the differential entropy of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {NonPositiveNumber} differential entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 0.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~-0.869
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.795
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = betaln( alpha, beta );
	out -= ( alpha-1.0 ) * digamma( alpha );
	out -= ( beta-1.0 ) * digamma( beta );
	out += ( alpha+beta-2.0 ) * digamma( alpha+beta );
	return out;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/special/betaln":1226,"@stdlib/math/base/special/digamma":1245}],101:[function(require,module,exports){
'use strict';

/**
* Beta distribution differential entropy.
*
* @module @stdlib/math/base/dist/beta/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/beta/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 0.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~-0.869
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.795
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":100}],102:[function(require,module,exports){
'use strict';

/**
* Beta distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/beta/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/beta/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns -1.2
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~0.082
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~0.490
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":103}],103:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the excess kurtosis of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns 0.0
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~0.529
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~-0.829
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	var axb;
	var amb;
	var apb;
	var out;

	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	axb = alpha * beta;
	amb = alpha - beta;
	apb = alpha + beta;
	out = amb * amb * ( apb+1.0 );
	out -= axb * ( apb+2.0 );
	out *= 6.0;
	out /= axb * ( apb+2.0 ) * ( apb+3.0 );
	return out;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{}],104:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace beta
*/
var beta = {};

/**
* @name Beta
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/ctor}
*/
setReadOnly( beta, 'Beta', require( '@stdlib/math/base/dist/beta/ctor' ) );

/**
* @name cdf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/cdf}
*/
setReadOnly( beta, 'cdf', require( '@stdlib/math/base/dist/beta/cdf' ) );

/**
* @name entropy
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/entropy}
*/
setReadOnly( beta, 'entropy', require( '@stdlib/math/base/dist/beta/entropy' ) );

/**
* @name kurtosis
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/kurtosis}
*/
setReadOnly( beta, 'kurtosis', require( '@stdlib/math/base/dist/beta/kurtosis' ) );

/**
* @name logpdf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/logpdf}
*/
setReadOnly( beta, 'logpdf', require( '@stdlib/math/base/dist/beta/logpdf' ) );

/**
* @name mean
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/mean}
*/
setReadOnly( beta, 'mean', require( '@stdlib/math/base/dist/beta/mean' ) );

/**
* @name median
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/median}
*/
setReadOnly( beta, 'median', require( '@stdlib/math/base/dist/beta/median' ) );

/**
* @name mgf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/mgf}
*/
setReadOnly( beta, 'mgf', require( '@stdlib/math/base/dist/beta/mgf' ) );

/**
* @name mode
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/mode}
*/
setReadOnly( beta, 'mode', require( '@stdlib/math/base/dist/beta/mode' ) );

/**
* @name pdf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/pdf}
*/
setReadOnly( beta, 'pdf', require( '@stdlib/math/base/dist/beta/pdf' ) );

/**
* @name quantile
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/quantile}
*/
setReadOnly( beta, 'quantile', require( '@stdlib/math/base/dist/beta/quantile' ) );

/**
* @name skewness
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/skewness}
*/
setReadOnly( beta, 'skewness', require( '@stdlib/math/base/dist/beta/skewness' ) );

/**
* @name stdev
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/stdev}
*/
setReadOnly( beta, 'stdev', require( '@stdlib/math/base/dist/beta/stdev' ) );

/**
* @name variance
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/beta/variance}
*/
setReadOnly( beta, 'variance', require( '@stdlib/math/base/dist/beta/variance' ) );


// EXPORTS //

module.exports = beta;

},{"@stdlib/math/base/dist/beta/cdf":96,"@stdlib/math/base/dist/beta/ctor":99,"@stdlib/math/base/dist/beta/entropy":101,"@stdlib/math/base/dist/beta/kurtosis":102,"@stdlib/math/base/dist/beta/logpdf":106,"@stdlib/math/base/dist/beta/mean":109,"@stdlib/math/base/dist/beta/median":111,"@stdlib/math/base/dist/beta/mgf":115,"@stdlib/math/base/dist/beta/mode":118,"@stdlib/math/base/dist/beta/pdf":121,"@stdlib/math/base/dist/beta/quantile":125,"@stdlib/math/base/dist/beta/skewness":128,"@stdlib/math/base/dist/beta/stdev":130,"@stdlib/math/base/dist/beta/variance":132,"@stdlib/utils/define-read-only-property":1425}],105:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/
function factory( alpha, beta ) {
	var betalnAB;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	betalnAB = betaln( alpha, beta );
	return pdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated natural logarithm of the PDF
	*
	* @example
	* var y = logpdf( 0.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x > 1.0 ) {
			// Support of the Beta distribution: [0,1]
			return NINF;
		}
		if ( x === 0.0 ) {
			if ( alpha < 1.0 ) {
				return PINF;
			}
			if ( alpha > 1.0 ) {
				return NINF;
			}
			return ln( beta );
		}
		if ( x === 1.0 ) {
			if ( beta < 1.0 ) {
				return PINF;
			}
			if ( beta > 1.0 ) {
				return NINF;
			}
			return ln( alpha );
		}
		out = -betalnAB;
		out += ( ( alpha-1.0 )*ln(x) ) + ( ( beta-1.0 )*log1p(-x) );
		return out;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":108,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaln":1226,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],106:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the probability density function (logPDF) for a beta distribution.
*
* @module @stdlib/math/base/dist/beta/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/beta/logpdf' );
*
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.223
*
* @example
* var factory = require( '@stdlib/math/base/dist/beta/logpdf' );
*
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":105,"./logpdf.js":107,"@stdlib/utils/define-read-only-property":1425}],107:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
* @example
* var y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.223
* @example
* var y = logpdf( 0.2, 2.0, 2.0 );
* // returns ~-0.041
* @example
* var y = logpdf( 0.8, 4.0, 4.0 );
* // returns ~-0.557
* @example
* var y = logpdf( -0.5, 4.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 1.5, 4.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 0.5, -1.0, 0.5 );
* // returns NaN
* @example
* var y = logpdf( 0.5, 0.5, -1.0 );
* // returns NaN
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function logpdf( x, alpha, beta ) {
	var out;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x > 1.0 ) {
		// Support of the Beta distribution: [0,1]
		return NINF;
	}
	if ( x === 0.0 ) {
		if ( alpha < 1.0 ) {
			return PINF;
		}
		if ( alpha > 1.0 ) {
			return NINF;
		}
		return ln( beta );
	}
	if ( x === 1.0 ) {
		if ( beta < 1.0 ) {
			return PINF;
		}
		if ( beta > 1.0 ) {
			return NINF;
		}
		return ln( alpha );
	}
	out = ( alpha-1.0 ) * ln( x );
	out += ( beta-1.0 ) * log1p( -x );
	out -= betaln( alpha, beta );
	return out;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaln":1226,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],108:[function(require,module,exports){
'use strict';

/**
* Evaluates the natural logarithm of the probability density function for an invalid beta distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 0.3 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],109:[function(require,module,exports){
'use strict';

/**
* Beta distribution expected value.
*
* @module @stdlib/math/base/dist/beta/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/beta/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 0.25
*
* v = mean( 8.0, 2.0 );
* // returns 0.8
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":110}],110:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 0.5
* @example
* var v = mean( 4.0, 12.0 );
* // returns 0.25
* @example
* var v = mean( 8.0, 2.0 );
* // returns 0.8
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / ( alpha + beta );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{}],111:[function(require,module,exports){
'use strict';

/**
* Beta distribution median.
*
* @module @stdlib/math/base/dist/beta/median
*
* @example
* var median = require( '@stdlib/math/base/dist/beta/median' );
*
* var v = median( 1.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns ~0.239
*
* v = median( 8.0, 2.0 );
* // returns ~0.820
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":112}],112:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );


// MAIN //

/**
* Returns the median of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns 0.5
* @example
* var v = median( 4.0, 12.0 );
* // returns ~0.239
* @example
* var v = median( 8.0, 2.0 );
* // returns ~0.820
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return betaincinv( 0.5, alpha, beta );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/special/betaincinv":1212}],113:[function(require,module,exports){
'use strict';

// MODULES //

var betaFcn = require( '@stdlib/math/base/special/beta' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/math/constants/float64-eps' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.
*
* @private
* @param {number} t - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
* @example
* var y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
* @example
* var y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
* @example
* var y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
*/
function mgf( t, alpha, beta ) {
	var summand;
	var denom;
	var sum;
	var c;
	var k;

	denom = betaFcn( alpha, beta );
	sum = 1.0;
	c = 1.0;
	k = 1;
	do {
		c *= t / k;
		summand = ( betaFcn( alpha+k, beta ) / denom ) * c;
		sum += summand;
		k += 1;
	} while ( abs( summand / sum ) >= EPS );
	return sum;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/beta":1193,"@stdlib/math/constants/float64-eps":1392}],114:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );
var mgf0 = require( './_mgf.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.5, 0.5 );
*
* var y = mgf( 0.8 );
* // returns ~1.522
*
* y = mgf( 0.3 );
* // returns ~1.168
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a beta distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 2.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) ) {
			return NaN;
		}
		return mgf0( t, alpha, beta );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./_mgf.js":113,"./nan.js":117,"@stdlib/math/base/assert/is-nan":43}],115:[function(require,module,exports){
'use strict';

/**
* Moment-generating function (MGF) for a beta distribution.
*
* @module @stdlib/math/base/dist/beta/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/beta/mgf' );
*
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
*
* y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
*
* y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
*
* y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
*
* @example
* var factory = require( '@stdlib/math/base/dist/beta/mgf' ).factory;
*
* var mgf = factory( 0.5, 0.5 );
*
* var y = mgf( 0.8 );
* // returns ~1.522
*
* y = mgf( 0.3 );
* // returns ~1.168
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":114,"./mgf.js":116,"@stdlib/utils/define-read-only-property":1425}],116:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var mgf0 = require( './_mgf.js' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
* @example
* var y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
* @example
* var y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
* @example
* var y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* var y = mgf( 2.0, -1.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.5, -1.0 );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.5, 0.0 );
* // returns NaN
*/
function mgf( t, alpha, beta ) {
	if (
		isnan( t ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mgf0( t, alpha, beta );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"./_mgf.js":113,"@stdlib/math/base/assert/is-nan":43}],117:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid beta distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],118:[function(require,module,exports){
'use strict';

/**
* Beta distribution mode.
*
* @module @stdlib/math/base/dist/beta/mode.
*
* @example
* var mode = require( '@stdlib/math/base/dist/beta/mode' );
*
* var v = mode( 4.0, 12.0 );
* // returns ~0.214
*
* v = mode( 8.0, 2.0 );
* // returns ~0.875
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":119}],119:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.214
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~0.875
* @example
* var v = mode( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, 0.8 );
* // returns NaN
* @example
* var v = mode( -0.1, 2.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if ( alpha <= 1.0 || beta <= 1.0 ) {
		return NaN;
	}
	return ( alpha-1.0 ) / ( alpha+beta-2.0 );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{}],120:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.796
*
* y = pdf( 0.3 );
* // returns ~0.695
*/
function factory( alpha, beta ) {
	var betalnAB;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	betalnAB = betaln( alpha, beta );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 0.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x > 1.0 ) {
			// Support of the Beta distribution: [0,1]
			return 0.0;
		}
		if ( x === 0.0 ) {
			if ( alpha < 1.0 ) {
				return PINF;
			}
			if ( alpha > 1.0 ) {
				return 0.0;
			}
			return beta;
		}
		if ( x === 1.0 ) {
			if ( beta < 1.0 ) {
				return PINF;
			}
			if ( beta > 1.0 ) {
				return 0.0;
			}
			return alpha;
		}
		out = -betalnAB;
		out += ( alpha-1.0 ) * ln( x );
		out += ( beta-1.0 ) * log1p( -x );
		return exp( out );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":122,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaln":1226,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-pinf":1414}],121:[function(require,module,exports){
'use strict';

/**
* Evaluate the probability density function (PDF) for a beta distribution.
*
* @module @stdlib/math/base/dist/beta/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/beta/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns 1.25
*
* @example
* var factory = require( '@stdlib/math/base/dist/beta/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.796
*
* y = pdf( 0.3 );
* // returns ~0.695
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":120,"./pdf.js":123,"@stdlib/utils/define-read-only-property":1425}],122:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function for an invalid beta distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 0.3 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],123:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns 1.25
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.96
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~0.573
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	var out;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x > 1.0 ) {
		// Support of the Beta distribution: [0,1]
		return 0.0;
	}
	if ( x === 0.0 ) {
		if ( alpha < 1.0 ) {
			return PINF;
		}
		if ( alpha > 1.0 ) {
			return 0.0;
		}
		return beta;
	}
	if ( x === 1.0 ) {
		if ( beta < 1.0 ) {
			return PINF;
		}
		if ( beta > 1.0 ) {
			return 0.0;
		}
		return alpha;
	}
	out = ( alpha-1.0 ) * ln( x );
	out += ( beta-1.0 ) * log1p( -x );
	out -= betaln( alpha, beta );
	return exp( out );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaln":1226,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-pinf":1414}],124:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.904
*
* y = quantile( 0.8 );
* // returns ~0.986
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a beta distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if (
			isnan( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		return betaincinv( p, alpha, beta );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":126,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaincinv":1212}],125:[function(require,module,exports){
'use strict';

/**
* Evaluate the quantile function for a beta distribution.
*
* @module @stdlib/math/base/dist/beta/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/beta/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~0.894
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.686
*
* @example
* var factory = require( '@stdlib/math/base/dist/beta/quantile' ).factory;
*
* var quantile = factory( 2.0, 2.0 );
*
* var y = quantile( 0.8 );
* // returns ~0.713
*
* y = quantile( 0.4 );
* // returns ~0.5
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":124,"./quantile.js":127,"@stdlib/utils/define-read-only-property":1425}],126:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid beta distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],127:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~0.894
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.686
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if (
		isnan( p ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return betaincinv( p, alpha, beta );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaincinv":1212}],128:[function(require,module,exports){
'use strict';

/**
* Beta distribution skewness.
*
* @module @stdlib/math/base/dist/beta/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/beta/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~0.529
*
* v = skewness( 8.0, 2.0 );
* // returns ~0.829
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":129}],129:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 0.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~0.529
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~-0.829
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	var out;
	var ab;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	ab = alpha + beta;
	out = 2.0 * ( beta-alpha ) * sqrt( ab + 1.0 );
	out /= ( ab + 2.0 ) * sqrt( alpha * beta );
	return out;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/special/sqrt":1343}],130:[function(require,module,exports){
'use strict';

/**
* Beta distribution standard deviation.
*
* @module @stdlib/math/base/dist/beta/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/beta/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns ~0.289
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.105
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.121
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":131}],131:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns 0.289
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.105
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.121
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( alpha, beta ) {
	var apb;
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	apb = alpha + beta;
	out = sqrt( ( alpha * beta ) / ( apb + 1.0 ) );
	out /= apb;
	return out;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1343}],132:[function(require,module,exports){
'use strict';

/**
* Beta distribution variance.
*
* @module @stdlib/math/base/dist/beta/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/beta/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns ~0.083
*
* v = variance( 4.0, 12.0 );
* // returns ~0.011
*
* v = variance( 8.0, 2.0 );
* // returns ~0.015
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":133}],133:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the variance of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns 0.5
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.239
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.820
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	var apb;
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	apb = alpha + beta;
	out = alpha * beta;
	out /= apb * apb * ( apb+1.0 );
	return out;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{}],134:[function(require,module,exports){
'use strict';

// MODULES //

var betaCDF = require( '@stdlib/math/base/dist/beta/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.333
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.539
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.074
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.38
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	return betaCDF( x / ( 1.0 + x ), alpha, beta );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/beta/cdf":96,"@stdlib/math/constants/float64-pinf":1414}],135:[function(require,module,exports){
'use strict';

// MODULES //

var betaFactory = require( '@stdlib/math/base/dist/beta/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.465
*
* y = cdf( 0.3 );
* // returns ~0.319
*/
function factory( alpha, beta ) {
	var betaCDF;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	betaCDF = betaFactory( alpha, beta );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		return betaCDF( x / ( 1.0 + x ) );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":137,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/beta/cdf":96,"@stdlib/math/constants/float64-pinf":1414}],136:[function(require,module,exports){
'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a beta prime distribution.
*
* @module @stdlib/math/base/dist/betaprime/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/betaprime/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.333
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.539
*
* @example
* var factory = require( '@stdlib/math/base/dist/betaprime/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.465
*
* y = cdf( 0.3 );
* // returns ~0.319
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":134,"./factory.js":135,"@stdlib/utils/define-read-only-property":1425}],137:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid beta prime distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],138:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var kurtosis = require( '@stdlib/math/base/dist/betaprime/kurtosis' );
var mean = require( '@stdlib/math/base/dist/betaprime/mean' );
var mode = require( '@stdlib/math/base/dist/betaprime/mode' );
var skewness = require( '@stdlib/math/base/dist/betaprime/skewness' );
var stdev = require( '@stdlib/math/base/dist/betaprime/stdev' );
var variance = require( '@stdlib/math/base/dist/betaprime/variance' );
var cdf = require( '@stdlib/math/base/dist/betaprime/cdf' );
var logpdf = require( '@stdlib/math/base/dist/betaprime/logpdf' );
var pdf = require( '@stdlib/math/base/dist/betaprime/pdf' );
var quantile = require( '@stdlib/math/base/dist/betaprime/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function betaPrimeCDF( x ) {
	return cdf( x, this.alpha, this.beta );
} // end FUNCTION betaPrimeCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function betaPrimeLogPDF( x ) {
	return logpdf( x, this.alpha, this.beta );
} // end FUNCTION betaPrimeLogPDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function betaPrimePDF( x ) {
	return pdf( x, this.alpha, this.beta );
} // end FUNCTION betaPrimePDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function betaPrimeQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
} // end FUNCTION betaPrimeQuantile()


// MAIN //

/**
* Beta prime distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - first shape parameter
* @param {PositiveNumber} [beta=1.0] - second shape parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {BetaPrime} distribution instance
*
* @example
* var betaprime = new BetaPrime( 1.0, 1.0 );
*
* var y = betaprime.cdf( 0.8 );
* // returns ~0.444
*
* var mode = betaprime.mode;
* // returns 0.0
*/
function BetaPrime() {
	var alpha;
	var beta;
	if ( !(this instanceof BetaPrime) ) {
		if ( arguments.length === 0 ) {
			return new BetaPrime();
		}
		return new BetaPrime( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
} // end FUNCTION BetaPrime()

/**
* Beta prime distribution excess kurtosis.
*
* @memberof BetaPrime.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.kurtosis;
* // returns ~5.764
*/
Object.defineProperty( BetaPrime.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution expected value.
*
* @memberof BetaPrime.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.mean;
* // returns ~0.364
*/
Object.defineProperty( BetaPrime.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution mode.
*
* @memberof BetaPrime.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.mode;
* // returns ~0.231
*/
Object.defineProperty( BetaPrime.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution skewness.
*
* @memberof BetaPrime.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.skewness;
* // returns ~1.724
*/
Object.defineProperty( BetaPrime.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution standard deviation.
*
* @memberof BetaPrime.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.stdev;
* // returns ~0.224
*/
Object.defineProperty( BetaPrime.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution variance.
*
* @memberof BetaPrime.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.variance;
* // returns ~0.05
*/
Object.defineProperty( BetaPrime.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof BetaPrime.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.cdf( 0.5 );
* // returns ~0.539
*/
setReadOnly( BetaPrime.prototype, 'cdf', betaPrimeCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof BetaPrime.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.logpdf( 0.8 );
* // returns ~-1.469
*/
setReadOnly( BetaPrime.prototype, 'logpdf', betaPrimeLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof BetaPrime.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.pdf( 0.8 );
* // returns ~0.23
*/
setReadOnly( BetaPrime.prototype, 'pdf', betaPrimePDF );

/**
* Evaluates the quantile function.
*
* @memberof BetaPrime.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.quantile( 0.5 );
* // returns ~0.315
*/
setReadOnly( BetaPrime.prototype, 'quantile', betaPrimeQuantile );


// EXPORTS //

module.exports = BetaPrime;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/betaprime/cdf":136,"@stdlib/math/base/dist/betaprime/kurtosis":140,"@stdlib/math/base/dist/betaprime/logpdf":144,"@stdlib/math/base/dist/betaprime/mean":147,"@stdlib/math/base/dist/betaprime/mode":149,"@stdlib/math/base/dist/betaprime/pdf":152,"@stdlib/math/base/dist/betaprime/quantile":156,"@stdlib/math/base/dist/betaprime/skewness":159,"@stdlib/math/base/dist/betaprime/stdev":161,"@stdlib/math/base/dist/betaprime/variance":163,"@stdlib/utils/define-read-only-property":1425}],139:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution constructor.
*
* @module @stdlib/math/base/dist/betaprime/ctor
*
* @example
* var BetaPrime = require( '@stdlib/math/base/dist/betaprime/ctor' );
*
* var betaprime = new BetaPrime( 1.0, 1.0 );
*
* var y = betaprime.cdf( 0.8 );
* // returns ~0.444
*
* var mode = betaprime.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":138}],140:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/betaprime/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/betaprime/kurtosis' );
*
* var v = kurtosis( 2.0, 6.0 );
* // returns ~26.143
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~5.764
*
* v = kurtosis( 12.0, 6.0 );
* // returns ~19.49
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":141}],141:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 2.0, 6.0 );
* // returns ~26.143
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~5.764
* @example
* var v = kurtosis( 12.0, 6.0 );
* // returns ~19.49
* @example
* var v = kurtosis( 2.0, 4.0 );
* // returns NaN
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	var abm1;
	var bm1;
	var out;
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 4.0
	) {
		return NaN;
	}
	abm1 = alpha + beta - 1.0;
	bm1 = beta - 1.0;
	out = ( alpha * abm1 * ( (5.0*beta )-11.0 ) ) + ( ( bm1*bm1 )*( bm1-1.0 ) );
	out *= 6.0;
	out /= alpha * abm1 * ( beta-3.0 ) * ( beta-4.0 );
	return out;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],142:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace betaprime
*/
var betaprime = {};

/**
* @name BetaPrime
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/ctor}
*/
setReadOnly( betaprime, 'BetaPrime', require( '@stdlib/math/base/dist/betaprime/ctor' ) );

/**
* @name cdf
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/cdf}
*/
setReadOnly( betaprime, 'cdf', require( '@stdlib/math/base/dist/betaprime/cdf' ) );

/**
* @name kurtosis
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/kurtosis}
*/
setReadOnly( betaprime, 'kurtosis', require( '@stdlib/math/base/dist/betaprime/kurtosis' ) );

/**
* @name logpdf
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/logpdf}
*/
setReadOnly( betaprime, 'logpdf', require( '@stdlib/math/base/dist/betaprime/logpdf' ) );

/**
* @name mean
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/mean}
*/
setReadOnly( betaprime, 'mean', require( '@stdlib/math/base/dist/betaprime/mean' ) );

/**
* @name mode
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/mode}
*/
setReadOnly( betaprime, 'mode', require( '@stdlib/math/base/dist/betaprime/mode' ) );

/**
* @name pdf
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/pdf}
*/
setReadOnly( betaprime, 'pdf', require( '@stdlib/math/base/dist/betaprime/pdf' ) );

/**
* @name quantile
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/quantile}
*/
setReadOnly( betaprime, 'quantile', require( '@stdlib/math/base/dist/betaprime/quantile' ) );

/**
* @name skewness
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/skewness}
*/
setReadOnly( betaprime, 'skewness', require( '@stdlib/math/base/dist/betaprime/skewness' ) );

/**
* @name stdev
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/stdev}
*/
setReadOnly( betaprime, 'stdev', require( '@stdlib/math/base/dist/betaprime/stdev' ) );

/**
* @name variance
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/betaprime/variance}
*/
setReadOnly( betaprime, 'variance', require( '@stdlib/math/base/dist/betaprime/variance' ) );


// EXPORTS //

module.exports = betaprime;

},{"@stdlib/math/base/dist/betaprime/cdf":136,"@stdlib/math/base/dist/betaprime/ctor":139,"@stdlib/math/base/dist/betaprime/kurtosis":140,"@stdlib/math/base/dist/betaprime/logpdf":144,"@stdlib/math/base/dist/betaprime/mean":147,"@stdlib/math/base/dist/betaprime/mode":149,"@stdlib/math/base/dist/betaprime/pdf":152,"@stdlib/math/base/dist/betaprime/quantile":156,"@stdlib/math/base/dist/betaprime/skewness":159,"@stdlib/math/base/dist/betaprime/stdev":161,"@stdlib/math/base/dist/betaprime/variance":163,"@stdlib/utils/define-read-only-property":1425}],143:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-1.62
*
* y = logpdf( 0.3 );
* // returns ~-0.805
*/
function factory( alpha, beta ) {
	var betalnAB;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	betalnAB = betaln( alpha, beta );
	return pdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated natural logarithm of the PDF
	*
	* @example
	* var y = logpdf( 0.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			// Support of the BetaPrime distribution: (0,∞)
			return NINF;
		}
		out = ( alpha-1.0 ) * ln( x );
		out -= ( alpha+beta ) * log1p( x );
		out -= betalnAB;
		return out;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":146,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaln":1226,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-ninf":1411}],144:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the probability density function (logPDF) for a beta prime distribution.
*
* @module @stdlib/math/base/dist/betaprime/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/betaprime/logpdf' );
*
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns ~-0.811
*
* y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~-0.13
*
* @example
* var factory = require( '@stdlib/math/base/dist/betaprime/logpdf' );
*
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":143,"./logpdf.js":145,"@stdlib/utils/define-read-only-property":1425}],145:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns ~-0.811
* @example
* var y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~-0.13
* @example
* var y = logpdf( 0.2, 2.0, 2.0 );
* // returns ~-0.547
* @example
* var y = logpdf( 0.8, 4.0, 4.0 );
* // returns ~-0.43
* @example
* var y = logpdf( -0.5, 4.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 0.5, -1.0, 0.5 );
* // returns NaN
* @example
* var y = logpdf( 0.5, 0.5, -1.0 );
* // returns NaN
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function logpdf( x, alpha, beta ) {
	var out;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		// Support of the BetaPrime distribution: (0,∞)
		return NINF;
	}
	out = ( alpha-1.0 ) * ln( x );
	out -= ( alpha+beta ) * log1p( x );
	out -= betaln( alpha, beta );
	return out;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaln":1226,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-ninf":1411}],146:[function(require,module,exports){
'use strict';

/**
* Evaluates the natural logarithm of the probability density function for an invalid beta prime distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 0.3 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],147:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution expected value.
*
* @module @stdlib/math/base/dist/betaprime/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/betaprime/mean' );
*
* var v = mean( 1.0, 2.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~0.364
*
* v = mean( 8.0, 2.0 );
* // returns 8.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":148}],148:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 2.0 );
* // returns 1.0
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.364
* @example
* var v = mean( 8.0, 2.0 );
* // returns 8.0
* @example
* var v = mean( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 1.0 ) {
		return NaN;
	}
	return alpha / ( beta - 1.0 );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{}],149:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution mode.
*
* @module @stdlib/math/base/dist/betaprime/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/betaprime/mode' );
*
* var v = mode( 1.0, 2.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns ~0.231
*
* v = mode( 8.0, 2.0 );
* // returns ~2.333
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":150}],150:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 2.0 );
* // returns 0.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.231
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~2.333
* @example
* var v = mode( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( alpha < 1.0 ) {
		return 0.0;
	}
	return ( alpha - 1.0 ) / ( beta + 1.0 );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{}],151:[function(require,module,exports){
'use strict';

// MODULES //

var logpdfFactory = require( '@stdlib/math/base/dist/betaprime/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.198
*
* y = pdf( 0.3 );
* // returns ~0.447
*/
function factory( alpha, beta ) {
	var logpdf;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	logpdf = logpdfFactory( alpha, beta );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 0.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return exp( logpdf( x ) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":153,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/betaprime/logpdf":144,"@stdlib/math/base/special/exp":1257}],152:[function(require,module,exports){
'use strict';

/**
* Evaluate the probability density function (PDF) for a beta prime distribution.
*
* @module @stdlib/math/base/dist/betaprime/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/betaprime/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns ~0.444
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns ~0.878
*
* @example
* var factory = require( '@stdlib/math/base/dist/betaprime/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.198
*
* y = pdf( 0.3 );
* // returns ~0.447
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":151,"./pdf.js":154,"@stdlib/utils/define-read-only-property":1425}],153:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function for an invalid beta prime distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 0.3 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],154:[function(require,module,exports){
'use strict';

// MODULES //

var logpdf = require( '@stdlib/math/base/dist/betaprime/logpdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns ~0.444
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns ~0.878
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.579
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~0.65
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return exp( logpdf( x, alpha, beta ) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/betaprime/logpdf":144,"@stdlib/math/base/special/exp":1257}],155:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~9.468
*
* y = quantile( 0.8 );
* // returns ~70.042
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a beta prime distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var x;
		if (
			isnan( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		x = betaincinv( p, alpha, beta );
		return x / ( 1.0-x );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":157,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaincinv":1212}],156:[function(require,module,exports){
'use strict';

/**
* Evaluate the quantile function for a beta prime distribution.
*
* @module @stdlib/math/base/dist/betaprime/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/betaprime/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~8.472
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~2.187
*
* @example
* var factory = require( '@stdlib/math/base/dist/betaprime/quantile' ).factory;
*
* var quantile = factory( 2.0, 2.0 );
*
* var y = quantile( 0.8 );
* // returns ~2.482
*
* y = quantile( 0.4 );
* // returns ~0.763
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":155,"./quantile.js":158,"@stdlib/utils/define-read-only-property":1425}],157:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid beta prime distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],158:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~8.472
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~2.187
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	var x;
	if (
		isnan( p ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	x = betaincinv( p, alpha, beta );
	return x / ( 1.0-x );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaincinv":1212}],159:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution skewness.
*
* @module @stdlib/math/base/dist/betaprime/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/betaprime/skewness' );
*
* var v = skewness( 2.0, 4.0 );
* // returns ~6.261
*
* v = skewness( 4.0, 12.0 );
* // returns ~1.724
*
* v = skewness( 8.0, 4.0 );
* // returns ~5.729
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":160}],160:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 2.0, 4.0 );
* // returns ~6.261
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~1.724
* @example
* var v = skewness( 8.0, 4.0 );
* // returns ~5.729
* @example
* var v = skewness( 2.0, 2.0 );
* // returns NaN
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	var out;
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 3.0
	) {
		return NaN;
	}
	out = 2.0 * ( ( 2.0*alpha ) + beta - 1.0 ) / ( beta-3.0 );
	out *= sqrt( ( beta-2.0 ) / ( alpha * ( alpha+beta-1.0 ) ) );
	return out;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],161:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution standard deviation.
*
* @module @stdlib/math/base/dist/betaprime/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/betaprime/stdev' );
*
* var v = stdev( 1.0, 3.0 );
* // returns ~0.866
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.223
*
* v = stdev( 8.0, 2.5 );
* // returns ~8.219
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":162}],162:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 3.0 );
* // returns ~0.866
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.223
* @example
* var v = stdev( 8.0, 2.5 );
* // returns ~8.219
* @example
* var v = stdev( 8.0, 2.0 );
* // returns NaN
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( alpha, beta ) {
	var bm1;
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 2.0
	) {
		return NaN;
	}
	bm1 = beta - 1.0;
	return sqrt( ( alpha * ( alpha + bm1 ) ) / ( ( bm1-1.0 ) * bm1*bm1 ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],163:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution variance.
*
* @module @stdlib/math/base/dist/betaprime/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/betaprime/variance' );
*
* var v = variance( 1.0, 3.0 );
* // returns ~0.75
*
* v = variance( 4.0, 12.0 );
* // returns ~0.05
*
* v = variance( 8.0, 2.5 );
* // returns ~67.556
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":164}],164:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 3.0 );
* // returns ~0.75
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.05
* @example
* var v = variance( 8.0, 2.5 );
* // returns ~67.556
* @example
* var v = variance( 8.0, 2.0 );
* // returns NaN
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	var bm1;
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 2.0
	) {
		return NaN;
	}
	bm1 = beta - 1.0;
	return ( alpha * ( alpha + bm1 ) ) / ( ( bm1-1.0 ) * bm1*bm1 );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],165:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 3.0, 20, 0.2 );
* // returns ~0.411
* @example
* var y = cdf( 21.0, 20, 0.2 );
* // returns 1.0
* @example
* var y = cdf( 5.0, 10, 0.4 );
* // returns ~0.834
* @example
* var y = cdf( 0.0, 10, 0.4 );
* // returns ~0.06
* @example
* var y = cdf( NaN, 20, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, 20, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 1.5, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, -2.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, 20, -1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 20, 1.5 );
* // returns NaN
*/
function cdf( x, n, p ) {
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x >= n ) {
		return 1.0;
	}
	x = floor( x + 1.0e-7 );
	return betainc( p, x + 1.0, n - x, true, true );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/base/special/floor":1266,"@stdlib/math/constants/float64-pinf":1414}],166:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10, 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.172
*
* y = cdf( 1.0 );
* // returns ~0.011
*/
function factory( n, p ) {
	if ( isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x >= n ) {
			return 1.0;
		}
		// Ensure left-continuity:
		x = floor( x + 1.0e-7 );
		return betainc( p, x + 1.0, n - x, true, true );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":168,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/base/special/floor":1266,"@stdlib/math/constants/float64-pinf":1414}],167:[function(require,module,exports){
'use strict';

/**
* Binomial distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/binomial/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/binomial/cdf' );
*
* var y = cdf( 3.0, 20, 0.2 );
* // returns ~0.411
*
* y = cdf( 21.0, 20, 0.2 );
* // returns 1.0
*
* y = cdf( 5.0, 10, 0.4 );
* // returns ~0.834
*
* y = cdf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var factory = require( '@stdlib/math/base/dist/binomial/cdf' ).factory;
*
* var cdf = factory( 10, 0.5 );
*
* var y = cdf( 3.0 );
* // returns ~0.172
*
* y = cdf( 1.0 );
* // returns ~0.011
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":165,"./factory.js":166,"@stdlib/utils/define-read-only-property":1425}],168:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid binomial distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],169:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var kurtosis = require( '@stdlib/math/base/dist/binomial/kurtosis' );
var mean = require( '@stdlib/math/base/dist/binomial/mean' );
var median = require( '@stdlib/math/base/dist/binomial/median' );
var mode = require( '@stdlib/math/base/dist/binomial/mode' );
var skewness = require( '@stdlib/math/base/dist/binomial/skewness' );
var stdev = require( '@stdlib/math/base/dist/binomial/stdev' );
var variance = require( '@stdlib/math/base/dist/binomial/variance' );
var cdf = require( '@stdlib/math/base/dist/binomial/cdf' );
var mgf = require( '@stdlib/math/base/dist/binomial/mgf' );
var pmf = require( '@stdlib/math/base/dist/binomial/pmf' );
var quantile = require( '@stdlib/math/base/dist/binomial/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function binomialCDF( x ) {
	return cdf( x, this.n, this.p );
} // end FUNCTION binomialCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function binomialMGF( t ) {
	return mgf( t, this.n, this.p );
} // end FUNCTION binomialMGF()

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function binomialPMF( x ) {
	return pmf( x, this.n, this.p );
} // end FUNCTION binomialPMF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function binomialQuantile( p ) {
	return quantile( p, this.n, this.p );
} // end FUNCTION binomialQuantile()


// MAIN //

/**
* Binomial distribution constructor.
*
* @constructor
* @param {PositiveInteger} [n=1.0] - number of trials
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `n` must be a positive integer
* @throws {TypeError} `p` must be a number between 0 and 1
* @returns {Binomial} distribution instance
*
* @example
* var binomial = new Binomial( 5, 0.1 );
*
* var y = binomial.cdf( 0.8 );
* // returns ~0.59
*
* var mode = binomial.mode;
* // returns 0.0
*/
function Binomial() {
	var n;
	var p;
	if ( !(this instanceof Binomial) ) {
		if ( arguments.length === 0 ) {
			return new Binomial();
		}
		return new Binomial( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		n = arguments[ 0 ];
		p = arguments[ 1 ];
		if ( !isPositiveInteger( n ) ) {
			throw new TypeError( 'invalid input argument. Number of trials `n` must be a positive integer. Value: `' + n + '`' );
		}
		if ( !isProbability( p ) ) {
			throw new TypeError( 'invalid input argument. Success probability `p` must be a number between 0 and 1. Value: `' + p + '`' );
		}
	} else {
		n = 1;
		p = 0.5;
	}
	Object.defineProperty( this, 'n', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return n;
		},
		'set': function set( value ) {
			if ( !isPositiveInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );
			}
			n = value;
		}
	});
	Object.defineProperty( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !isProbability( value ) ) {
				throw new TypeError( 'invalid value. Must be a number between 0 and 1. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
} // end FUNCTION Binomial()

/**
* Binomial distribution excess kurtosis.
*
* @memberof Binomial.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.kurtosis;
* // returns ~-0.152
*/
Object.defineProperty( Binomial.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.n, this.p );
	}
});

/**
* Binomial distribution expected value.
*
* @memberof Binomial.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.mean;
* // returns ~4.8
*/
Object.defineProperty( Binomial.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.n, this.p );
	}
});

/**
* Binomial distribution median.
*
* @memberof Binomial.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.median;
* // returns 5.0
*/
Object.defineProperty( Binomial.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.n, this.p );
	}
});

/**
* Binomial distribution mode.
*
* @memberof Binomial.prototype
* @name mode
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.mode;
* // returns 5.0
*/
Object.defineProperty( Binomial.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.n, this.p );
	}
});

/**
* Binomial distribution skewness.
*
* @memberof Binomial.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.skewness;
* // returns ~0.118
*/
Object.defineProperty( Binomial.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.n, this.p );
	}
});

/**
* Binomial distribution standard deviation.
*
* @memberof Binomial.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.stdev;
* // returns ~1.697
*/
Object.defineProperty( Binomial.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.n, this.p );
	}
});

/**
* Binomial distribution variance.
*
* @memberof Binomial.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.variance;
* // returns ~2.88
*/
Object.defineProperty( Binomial.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.n, this.p );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Binomial.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.cdf( 0.5 );
* // returns ~0.41
*/
setReadOnly( Binomial.prototype, 'cdf', binomialCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Binomial.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.mgf( 0.5 );
* // returns ~1.629
*/
setReadOnly( Binomial.prototype, 'mgf', binomialMGF );

/**
* Evaluates the probability density function (PMF).
*
* @memberof Binomial.prototype
* @name pmf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.pmf( 2.0 );
* // returns ~0.154
*/
setReadOnly( Binomial.prototype, 'pmf', binomialPMF );

/**
* Evaluates the quantile function.
*
* @memberof Binomial.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.quantile( 0.5 );
* // returns 1.0
*/
setReadOnly( Binomial.prototype, 'quantile', binomialQuantile );


// EXPORTS //

module.exports = Binomial;

},{"@stdlib/assert/is-positive-integer":26,"@stdlib/assert/is-probability":34,"@stdlib/math/base/dist/binomial/cdf":167,"@stdlib/math/base/dist/binomial/kurtosis":173,"@stdlib/math/base/dist/binomial/mean":176,"@stdlib/math/base/dist/binomial/median":178,"@stdlib/math/base/dist/binomial/mgf":181,"@stdlib/math/base/dist/binomial/mode":184,"@stdlib/math/base/dist/binomial/pmf":187,"@stdlib/math/base/dist/binomial/quantile":191,"@stdlib/math/base/dist/binomial/skewness":196,"@stdlib/math/base/dist/binomial/stdev":198,"@stdlib/math/base/dist/binomial/variance":200,"@stdlib/utils/define-read-only-property":1425}],170:[function(require,module,exports){
'use strict';

/**
* Binomial distribution constructor.
*
* @module @stdlib/math/base/dist/binomial/ctor
*
* @example
* var Binomial = require( '@stdlib/math/base/dist/binomial/ctor' );
*
* var binomial = new Binomial( 8, 0.2 );
*
* var y = binomial.cdf( 2.8 );
* // returns ~0.797
*
* var mode = binomial.mode;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":169}],171:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the entropy of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} entropy
*
* @example
* var v = entropy( 100, 0.1 );
* // returns ~0.051
* @example
* var v = entropy( 20, 0.5 );
* // returns ~-0.1
* @example
* var v = entropy( 10.3, 0.5 );
* // returns NaN
* @example
* var v = entropy( 20, 1.1 );
* // returns NaN
* @example
* var v = entropy( 20, NaN );
* // returns NaN
*/
function entropy( n, p ) {
	var nlq;
	var out;
	var i;
	var q;

	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( p === 0 || p === 1 || n === 0 ) {
		return 0.0;
	}
	q = 1.0 - p;
	nlq = n * ln( q );
	out = exp( nlq ) * nlq;
	for ( i = 1; i <= n; i++ ) {
		nlq += ln( ( n - i + 1 ) / i ) + ln( p / q );
		out += exp( nlq ) * nlq;
	}
	return -out;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-pinf":1414}],172:[function(require,module,exports){
'use strict';

/**
* Binomial distribution entropy.
*
* @module @stdlib/math/base/dist/binomial/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/binomial/entropy' );
*
* var v = entropy( 100, 0.1 );
* // returns ~0.051
*
* v = entropy( 20, 0.5 );
* // returns ~-0.1
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":171}],173:[function(require,module,exports){
'use strict';

/**
* Binomial distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/binomial/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/binomial/kurtosis' );
*
* var v = kurtosis( 100, 0.1 );
* // returns ~0.051
*
* v = kurtosis( 20, 0.5 );
* // returns ~-0.1
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":174}],174:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the kurtosis of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 100, 0.1 );
* // returns ~0.051
* @example
* var v = kurtosis( 20, 0.5 );
* // returns ~-0.1
* @example
* var v = kurtosis( 10.3, 0.5 );
* // returns NaN
* @example
* var v = kurtosis( 20, 1.1 );
* // returns NaN
* @example
* var v = kurtosis( 20, NaN );
* // returns NaN
*/
function kurtosis( n, p ) {
	var pq;
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	pq = p * ( 1.0 - p );
	return ( 1.0 - ( 6.0 * pq ) ) / ( n * pq );
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/constants/float64-pinf":1414}],175:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace binomial
*/
var binomial = {};

/**
* @name Binomial
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/ctor}
*/
setReadOnly( binomial, 'Binomial', require( '@stdlib/math/base/dist/binomial/ctor' ) );

/**
* @name cdf
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/cdf}
*/
setReadOnly( binomial, 'cdf', require( '@stdlib/math/base/dist/binomial/cdf' ) );

/**
* @name entropy
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/entropy}
*/
setReadOnly( binomial, 'entropy', require( '@stdlib/math/base/dist/binomial/entropy' ) );

/**
* @name kurtosis
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/kurtosis}
*/
setReadOnly( binomial, 'kurtosis', require( '@stdlib/math/base/dist/binomial/kurtosis' ) );

/**
* @name mean
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/mean}
*/
setReadOnly( binomial, 'mean', require( '@stdlib/math/base/dist/binomial/mean' ) );

/**
* @name median
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/median}
*/
setReadOnly( binomial, 'median', require( '@stdlib/math/base/dist/binomial/median' ) );

/**
* @name mgf
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/mgf}
*/
setReadOnly( binomial, 'mgf', require( '@stdlib/math/base/dist/binomial/mgf' ) );

/**
* @name mode
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/mode}
*/
setReadOnly( binomial, 'mode', require( '@stdlib/math/base/dist/binomial/mode' ) );

/**
* @name pmf
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/pmf}
*/
setReadOnly( binomial, 'pmf', require( '@stdlib/math/base/dist/binomial/pmf' ) );

/**
* @name quantile
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/quantile}
*/
setReadOnly( binomial, 'quantile', require( '@stdlib/math/base/dist/binomial/quantile' ) );

/**
* @name skewness
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/skewness}
*/
setReadOnly( binomial, 'skewness', require( '@stdlib/math/base/dist/binomial/skewness' ) );

/**
* @name stdev
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/stdev}
*/
setReadOnly( binomial, 'stdev', require( '@stdlib/math/base/dist/binomial/stdev' ) );

/**
* @name variance
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/binomial/variance}
*/
setReadOnly( binomial, 'variance', require( '@stdlib/math/base/dist/binomial/variance' ) );


// EXPORTS //

module.exports = binomial;

},{"@stdlib/math/base/dist/binomial/cdf":167,"@stdlib/math/base/dist/binomial/ctor":170,"@stdlib/math/base/dist/binomial/entropy":172,"@stdlib/math/base/dist/binomial/kurtosis":173,"@stdlib/math/base/dist/binomial/mean":176,"@stdlib/math/base/dist/binomial/median":178,"@stdlib/math/base/dist/binomial/mgf":181,"@stdlib/math/base/dist/binomial/mode":184,"@stdlib/math/base/dist/binomial/pmf":187,"@stdlib/math/base/dist/binomial/quantile":191,"@stdlib/math/base/dist/binomial/skewness":196,"@stdlib/math/base/dist/binomial/stdev":198,"@stdlib/math/base/dist/binomial/variance":200,"@stdlib/utils/define-read-only-property":1425}],176:[function(require,module,exports){
'use strict';

/**
* Binomial distribution expected value.
*
* @module @stdlib/math/base/dist/binomial/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/binomial/mean' );
*
* var v = mean( 100, 0.1 );
* // returns 10.0
*
* v = mean( 20, 0.5 );
* // returns 10.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":177}],177:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the expected value of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 100, 0.1 );
* // returns 10.0
* @example
* var v = mean( 20, 0.5 );
* // returns 10.0
* @example
* var v = mean( 10.3, 0.5 );
* // returns NaN
* @example
* var v = mean( 20, 1.1 );
* // returns NaN
* @example
* var v = mean( 20, NaN );
* // returns NaN
*/
function mean( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return n * p;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/constants/float64-pinf":1414}],178:[function(require,module,exports){
'use strict';

/**
* Binomial distribution median.
*
* @module @stdlib/math/base/dist/binomial/median
*
* @example
* var median = require( '@stdlib/math/base/dist/binomial/median' );
*
* var v = median( 100, 0.1 );
* // returns 10
*
* v = median( 20, 0.5 );
* // returns 10
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":179}],179:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var mean = require( '@stdlib/math/base/dist/binomial/mean' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the median of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 100, 0.1 );
* // returns 10
* @example
* var v = median( 20, 0.5 );
* // returns 10
* @example
* var v = median( 10.3, 0.5 );
* // returns NaN
* @example
* var v = median( 20, 1.1 );
* // returns NaN
* @example
* var v = median( 20, NaN );
* // returns NaN
*/
function median( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return round( mean( n, p ) );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/binomial/mean":176,"@stdlib/math/base/special/round":1326,"@stdlib/math/constants/float64-pinf":1414}],180:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 10, 0.5 );
* var y = mgf( 0.3 );
* // returns ~5.013
*/
function factory( n, p ) {
	if ( isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a binomial distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var base;
		if ( isnan( t ) ) {
			return NaN;
		}
		base = 1.0 - p + (p * exp(t));
		return pow( base, n );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":183,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],181:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a binomial distribution.
*
* @module @stdlib/math/base/dist/binomial/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/binomial/mgf' );
*
* var y = mgf( 0.5, 20, 0.2 );
* // returns ~11.471
*
* y = mgf( 5.0, 20, 0.2 );
* // returns ~4.798e29
*
* y = mgf( 0.9, 10, 0.4 )
* // returns ~99.338
*
* @example
* var factory = require( '@stdlib/math/base/dist/binomial/mgf' ).factory;
*
* var mgf = factory( 10, 0.5 );
*
* var y = mgf( 0.3 );
* // returns ~5.013
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":180,"./mgf.js":182,"@stdlib/utils/define-read-only-property":1425}],182:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a binomial distribution with number of trials `n` and success probability `p` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 20, 0.2 );
* // returns ~11.471
* @example
* var y = mgf( 5.0, 20, 0.2 );
* // returns ~4.798e29
* @example
* var y = mgf( 0.9, 10, 0.4 )
* // returns ~99.338
* @example
* var y = mgf( 0.0, 10, 0.4 )
* // returns 1.0
* @example
* var y = mgf( NaN, 20, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.0, 20, NaN );
* // returns NaN
* @example
* var y = mgf( 0.2, 1.5, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.2, -2.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.2, 20, -1.0 );
* // returns NaN
* @example
* var y = mgf( 0.2, 20, 1.5 );
* // returns NaN
*/
function mgf( t, n, p ) {
	var base;
	if (
		isnan( t ) ||
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	base = 1.0 - p + (p * exp(t));
	return pow( base, n );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],183:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid binomial distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],184:[function(require,module,exports){
'use strict';

/**
* Binomial distribution mode.
*
* @module @stdlib/math/base/dist/binomial/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/binomial/mode' );
*
* var v = mode( 100, 0.1 );
* // returns 10
*
* v = mode( 20, 0.5 );
* // returns 10
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":185}],185:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the mode of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 100, 0.1 );
* // returns 10
* @example
* var v = mode( 20, 0.5 );
* // returns 10
* @example
* var v = mode( 10.3, 0.5 );
* // returns NaN
* @example
* var v = mode( 20, 1.1 );
* // returns NaN
* @example
* var v = mode( 20, NaN );
* // returns NaN
*/
function mode( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return floor( ( n+1 ) * p );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/floor":1266,"@stdlib/math/constants/float64-pinf":1414}],186:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
var degenerate = require( '@stdlib/math/base/dist/degenerate/pmf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 10, 0.5 );
* var y = pmf( 3.0 );
* // returns ~0.117
*
* y = pmf( 5.0 );
* // returns ~0.246
*/
function factory( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		!isNonNegativeInteger( n ) ||
		n === PINF ||
		p < 0.0 ||
		p > 1.0
	) {
		return nan;
	}
	if ( p === 0.0 || n === 0 ) {
		return degenerate( 0.0 );
	}
	if ( p === 1.0 ) {
		return degenerate( n );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var lnl;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) ) {
			if ( x > n ) {
				return 0.0;
			}
			lnl = binomcoefln( n, x );
			lnl += (x * ln( p )) + ((n - x) * log1p( -p ));
			return exp( lnl );
		}
		return 0.0;
	} // end FUNCTION pmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":188,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/degenerate/pmf":348,"@stdlib/math/base/special/binomcoefln":1230,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-pinf":1414}],187:[function(require,module,exports){
'use strict';

/**
* Binomial distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dist/binomial/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dist/binomial/pmf' );
*
* var y = pmf( 3.0, 20, 0.2 );
* // returns ~0.205
*
* y = pmf( 21.0, 20, 0.2 );
* // returns 0.0
*
* y = pmf( 5.0, 10, 0.4 );
* // returns ~0.201
*
* y = pmf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var factory = require( '@stdlib/math/base/dist/binomial/pmf' ).factory;
*
* var pmf = factory( 10, 0.5 );
*
* var y = pmf( 3.0 );
* // returns ~0.117
*
* y = pmf( 5.0 );
* // returns ~0.246
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":186,"./pmf.js":189,"@stdlib/utils/define-read-only-property":1425}],188:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability mass function (PMF) for an invalid binomial distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pmf( 2.0 );
* // returns NaN
*/
function pmf() {
	return NaN;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{}],189:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 3.0, 20, 0.2 );
* // returns ~0.205
* @example
* var y = pmf( 21.0, 20, 0.2 );
* // returns 0.0
* @example
* var y = pmf( 5.0, 10, 0.4 );
* // returns ~0.201
* @example
* var y = pmf( 0.0, 10, 0.4 );
* // returns ~0.06
* @example
* var y = pmf( NaN, 20, 0.5 );
* // returns NaN
* @example
* var y = pmf( 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = pmf( 0.0, 20, NaN );
* // returns NaN
* @example
* var y = pmf( 2.0, 1.5, 0.5 );
* // returns NaN
* @example
* var y = pmf( 2.0, -2.0, 0.5 );
* // returns NaN
* @example
* var y = pmf( 2.0, 20, -1.0 );
* // returns NaN
* @example
* var y = pmf( 2.0, 20, 1.5 );
* // returns NaN
*/
function pmf( x, n, p ) {
	var lnl;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( isNonNegativeInteger( x ) ) {
		if ( x > n ) {
			return 0.0;
		}
		if ( p === 0.0 ) {
			return ( x === 0 ) ? 1.0 : 0.0;
		}
		if ( p === 1.0 ) {
			return ( x === n ) ? 1.0 : 0.0;
		}
		lnl = binomcoefln( n, x );
		lnl += (x * ln( p )) + (( n - x ) * log1p( -p ));
		return exp( lnl );
	}
	return 0.0;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/binomcoefln":1230,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-pinf":1414}],190:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var degenerate = require( '@stdlib/math/base/dist/degenerate/quantile' ).factory;
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dist/binomial/cdf' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var searchLeft = require( './search_left.js' );
var searchRight = require( './search_right.js' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10, 0.5 );
* var y = quantile( 0.1 );
* // returns 3
*
* y = quantile( 0.9 );
* // returns 7
*/
function factory( n, p ) {
	var sigmaInv;
	var sigma;
	var mu;

	if (
		isnan( n ) ||
		isnan( p ) ||
		!isNonNegativeInteger( n ) ||
		n === PINF ||
		p < 0.0 ||
		p > 1.0
	) {
		return nan;
	}
	if ( p === 0.0 || n === 0.0 ) {
		return degenerate( 0.0 );
	}
	if ( p === 1.0 ) {
		return degenerate( n );
	}
	mu = n * p;
	sigma = sqrt( n * p * ( 1.0-p ) );
	sigmaInv = 1.0 / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a binomial distribution.
	*
	* @private
	* @param {Probability} r - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( r ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( isnan( r ) || r < 0.0 || r > 1.0 ) {
			return NaN;
		}
		if ( r === 0.0 ) {
			return 0;
		}
		if ( r === 1.0 ) {
			return n;
		}
		// Cornish-Fisher expansion:
		if ( r < 0.5 ) {
			x = -erfcinv( 2.0 * r ) * SQRT2;
		} else {
			x = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );
		guess = round( mu + (sigma * corr) );
		if ( cdf( guess, n, p ) >= r ) {
			return searchLeft( guess, r, n, p );
		}
		return searchRight( guess, r, n, p );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":192,"./search_left.js":194,"./search_right.js":195,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/binomial/cdf":167,"@stdlib/math/base/dist/degenerate/quantile":352,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-sqrt-two":1421}],191:[function(require,module,exports){
'use strict';

/**
* Binomial distribution quantile function.
*
* @module @stdlib/math/base/dist/binomial/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/binomial/quantile' );
*
* var y = quantile( 0.4, 20, 0.2 );
* // returns 2
*
* y = quantile( 0.8, 20, 0.2 );
* // returns 5
*
* y = quantile( 0.5, 10, 0.4 );
* // returns 4
*
* @example
* var factory = require( '@stdlib/math/base/dist/binomial/quantile' ).factory;
*
* var quantile = factory( 10, 0.5 );
*
* var y = quantile( 0.1 );
* // returns 3
*
* y = quantile( 0.9 );
* // returns 7
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":190,"./quantile.js":193,"@stdlib/utils/define-read-only-property":1425}],192:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid binomial distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],193:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dist/binomial/cdf' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var searchLeft = require( './search_left.js' );
var searchRight = require( './search_right.js' );


// MAIN //

/**
* Evaluates the quantile function for a binomial distribution with number of trials `n` and success probability `p` at a probability `r`.
*
* @param {Probability} r - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p  - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.4, 20, 0.2 );
* // returns 2
* @example
* var y = quantile( 0.8, 20, 0.2 );
* // returns 5
* @example
* var y = quantile( 0.5, 10, 0.4 );
* // returns 4
* @example
* var y = quantile( 0.0, 10, 0.4 );
* // returns 0
* @example
* var y = quantile( 1.0, 10, 0.4 );
* // returns 10
* @example
* var y = quantile( NaN, 20, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.2, NaN, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.2, 20, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.5, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.5, -2.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.5, 20, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 20, 1.5 );
* // returns NaN
*/
function quantile( r, n, p ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var mu;
	var x2;
	var x;

	if (
		isnan( r ) ||
		isnan( n ) ||
		isnan( p ) ||
		r < 0.0 ||
		r > 1.0 ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( r === 1.0 || p === 1.0 ) {
		return n;
	}
	if ( r === 0.0 || p === 0.0 || n === 0 ) {
		return 0.0;
	}
	// Cornish-Fisher expansion:
	mu = n * p;
	sigma = sqrt( n * p * ( 1.0-p ) );
	sigmaInv = 1.0 / sigma;
	if ( r < 0.5 ) {
		x = -erfcinv( 2.0 * r ) * SQRT2;
	} else {
		x = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );
	guess = round( mu + (sigma * corr) );
	if ( cdf( guess, n, p ) >= r ) {
		return searchLeft( guess, r, n, p );
	}
	return searchRight( guess, r, n, p );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"./search_left.js":194,"./search_right.js":195,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/binomial/cdf":167,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-sqrt-two":1421}],194:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dist/binomial/cdf' );


// MAIN //

/**
* Performs a search to the left.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} r - probability
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `r` quantile of the specified distribution
*/
function searchLeft( x, r, n, p ) {
	while ( x !== 0 && cdf( x-1, n, p) >= r ) {
		x -=1;
	}
	return x;
} // end FUNCTION searchLeft()


// EXPORTS //

module.exports = searchLeft;

},{"@stdlib/math/base/dist/binomial/cdf":167}],195:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dist/binomial/cdf' );


// MAIN //

/**
* Performs a search to the right.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} r - probability
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `r` quantile of the specified distribution
*/
function searchRight( x, r, n, p ) {
	x += 1;
	while ( cdf( x, n, p ) < r ) {
		x += 1;
	}
	return x;
} // end FUNCTION searchRight()


// EXPORTS //

module.exports = searchRight;

},{"@stdlib/math/base/dist/binomial/cdf":167}],196:[function(require,module,exports){
'use strict';

/**
* Binomial distribution skewness.
*
* @module @stdlib/math/base/dist/binomial/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/binomial/skewness' );
*
* var v = skewness( 100, 0.1 );
* // returns 9
*
* v = skewness( 20, 0.5 );
* // returns 5
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":197}],197:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the skewness of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} skewness
*
* @example
* var v = skewness( 100, 0.1 );
* // returns ~0.267
* @example
* var v = skewness( 20, 0.5 );
* // returns 0
* @example
* var v = skewness( 10.3, 0.5 );
* // returns NaN
* @example
* var v = skewness( 20, 1.1 );
* // returns NaN
* @example
* var v = skewness( 20, NaN );
* // returns NaN
*/
function skewness( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return ( 1.0 - ( 2.0*p ) ) / sqrt( n * p * ( 1.0-p ) );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414}],198:[function(require,module,exports){
'use strict';

/**
* Binomial distribution standard deviation.
*
* @module @stdlib/math/base/dist/binomial/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/binomial/stdev' );
*
* var v = stdev( 100, 0.1 );
* // returns 3.0
*
* v = stdev( 20, 0.5 );
* // returns ~2.236
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":199}],199:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 100, 0.1 );
* // returns 3.0
* @example
* var v = stdev( 20, 0.5 );
* // returns ~2.236
* @example
* var v = stdev( 10.3, 0.5 );
* // returns NaN
* @example
* var v = stdev( 20, 1.1 );
* // returns NaN
* @example
* var v = stdev( 20, NaN );
* // returns NaN
*/
function stdev( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return sqrt( n * p * ( 1.0 - p ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414}],200:[function(require,module,exports){
'use strict';

/**
* Binomial distribution variance.
*
* @module @stdlib/math/base/dist/binomial/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/binomial/variance' );
*
* var v = variance( 100, 0.1 );
* // returns 9
*
* v = variance( 20, 0.5 );
* // returns 5
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":201}],201:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the variance of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 100, 0.1 );
* // returns 9
* @example
* var v = variance( 20, 0.5 );
* // returns 5
* @example
* var v = variance( 10.3, 0.5 );
* // returns NaN
* @example
* var v = variance( 20, 1.1 );
* // returns NaN
* @example
* var v = variance( 20, NaN );
* // returns NaN
*/
function variance( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return n * p * ( 1.0 - p );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/constants/float64-pinf":1414}],202:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan2 = require( '@stdlib/math/base/special/atan2' );


// VARIABLES //

var ONE_OVER_PI = 0.3183098861837907;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 4.0, 0.0, 2.0 );
* // returns ~0.852
* @example
* var y = cdf( 1.0, 0.0, 2.0 );
* // returns ~0.648
* @example
* var y = cdf( 1.0, 3.0, 2.0 );
* // returns 0.25
* @example
* var y = cdf( NaN, 0.0, 2.0 );
* // returns NaN
* @example
* var y = cdf( 1.0, 2.0, NaN );
* // returns NaN
* @example
* var y = cdf( 1.0, NaN, 3.0 );
* // returns NaN
*/
function cdf( x, x0, gamma ) {
	if (
		isnan( x ) ||
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return (ONE_OVER_PI * atan2( x-x0, gamma )) + 0.5;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/atan2":1191}],203:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan2 = require( '@stdlib/math/base/special/atan2' );
var nan = require( './nan.js' );


// VARIABLES //

var ONE_OVER_PI = 0.3183098861837907;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
*
* var y = cdf( 10.0 );
* // returns 0.5
*
* y = cdf( 12.0 );
* // returns 0.75
*/
function factory( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return (ONE_OVER_PI * atan2( x-x0, gamma )) + 0.5;
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":205,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/atan2":1191}],204:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/cauchy/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/cauchy/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.852
*
* @example
* var factory = require( '@stdlib/math/base/dist/cauchy/cdf' ).factory;
*
* var cdf = factory( 1.5, 3.0 );
*
* var y = cdf( 1.0 );
* // returns ~0.447
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":202,"./factory.js":203,"@stdlib/utils/define-read-only-property":1425}],205:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Cauchy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],206:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/cauchy/entropy' );
var median = require( '@stdlib/math/base/dist/cauchy/median' );
var mode = require( '@stdlib/math/base/dist/cauchy/mode' );
var cdf = require( '@stdlib/math/base/dist/cauchy/cdf' );
var logcdf = require( '@stdlib/math/base/dist/cauchy/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/cauchy/logpdf' );
var pdf = require( '@stdlib/math/base/dist/cauchy/pdf' );
var quantile = require( '@stdlib/math/base/dist/cauchy/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function cauchyCDF( x ) {
	return cdf( x, this.x0, this.gamma );
} // end FUNCTION cauchyCDF()

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function cauchyLogCDF( x ) {
	return logcdf( x, this.x0, this.gamma );
} // end FUNCTION cauchyLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function cauchyLogPDF( x ) {
	return logpdf( x, this.x0, this.gamma );
} // end FUNCTION cauchyLogPDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function cauchyPDF( x ) {
	return pdf( x, this.x0, this.gamma );
} // end FUNCTION cauchyPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function cauchyQuantile( p ) {
	return quantile( p, this.x0, this.gamma );
} // end FUNCTION cauchyQuantile()


// MAIN //

/**
* Cauchy distribution constructor.
*
* @constructor
* @param {number} [x0=0.0] - location parameter
* @param {PositiveNumber} [gamma=1.0] - scale parameter
* @throws {TypeError} `gamma` must be a positive number
* @returns {Cauchy} distribution instance
*
* @example
* var cauchy = new Cauchy( 1.0, 1.0 );
*
* var y = cauchy.cdf( 0.8 );
* // returns ~0.437
*
* var median = cauchy.median;
* // returns 1.0
*/
function Cauchy() {
	var gamma;
	var x0;
	if ( !(this instanceof Cauchy) ) {
		if ( arguments.length === 0 ) {
			return new Cauchy();
		}
		return new Cauchy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		x0 = arguments[ 0 ];
		gamma = arguments[ 1 ];
		if ( !isNumber( x0 ) || isnan( x0 ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `x0` must be a number primitive. Value: `' + x0 + '`' );
		}
		if ( !isPositive( gamma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `gamma` must be a positive number. Value: `' + gamma + '`' );
		}
	} else {
		x0 = 0.0;
		gamma = 1.0;
	}
	Object.defineProperty( this, 'x0', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return x0;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			x0 = value;
		}
	});
	Object.defineProperty( this, 'gamma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return gamma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			gamma = value;
		}
	});
	return this;
} // end FUNCTION Cauchy()

/**
* Cauchy distribution differential entropy.
*
* @memberof Cauchy.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.entropy;
* // returns ~5.016
*/
Object.defineProperty( Cauchy.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.x0, this.gamma );
	}
});

/**
* Cauchy distribution median.
*
* @memberof Cauchy.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.median;
* // returns 4.0
*/
Object.defineProperty( Cauchy.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.x0, this.gamma );
	}
});

/**
* Cauchy distribution mode.
*
* @memberof Cauchy.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.mode;
* // returns 4.0
*/
Object.defineProperty( Cauchy.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.x0, this.gamma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Cauchy.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.cdf( 0.5 );
* // returns ~0.386
*/
setReadOnly( Cauchy.prototype, 'cdf', cauchyCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Cauchy.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.logcdf( 0.5 );
* // returns ~-0.952
*/
setReadOnly( Cauchy.prototype, 'logcdf', cauchyLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Cauchy.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.logpdf( 0.8 );
* // returns ~-2.617
*/
setReadOnly( Cauchy.prototype, 'logpdf', cauchyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Cauchy.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.pdf( 0.8 );
* // returns ~0.073
*/
setReadOnly( Cauchy.prototype, 'pdf', cauchyPDF );

/**
* Evaluates the quantile function.
*
* @memberof Cauchy.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Cauchy.prototype, 'quantile', cauchyQuantile );


// EXPORTS //

module.exports = Cauchy;

},{"@stdlib/assert/is-nan":12,"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/cauchy/cdf":204,"@stdlib/math/base/dist/cauchy/entropy":209,"@stdlib/math/base/dist/cauchy/logcdf":212,"@stdlib/math/base/dist/cauchy/logpdf":216,"@stdlib/math/base/dist/cauchy/median":219,"@stdlib/math/base/dist/cauchy/mode":221,"@stdlib/math/base/dist/cauchy/pdf":224,"@stdlib/math/base/dist/cauchy/quantile":228,"@stdlib/utils/define-read-only-property":1425}],207:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution constructor.
*
* @module @stdlib/math/base/dist/cauchy/ctor
*
* @example
* var Cauchy = require( '@stdlib/math/base/dist/cauchy/ctor' );
*
* var cauchy = new Cauchy( 1.0, 1.0 );
*
* var y = cauchy.cdf( 0.8 );
* // returns ~0.437
*
* var mode = cauchy.mode;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":206}],208:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Returns the differential entropy of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 10.0, 5.0 );
* // returns ~4.14
* @example
* var v = entropy( 7.0, 0.1 );
* // returns ~0.228
* @example
* var v = entropy( 10.0, -0.5 );
* // returns NaN
*/
function entropy( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return ln( gamma ) + ln( 4.0*PI );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-pi":1413}],209:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution differential entropy.
*
* @module @stdlib/math/base/dist/cauchy/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/cauchy/entropy' );
*
* var v = entropy( 10.0, 7.0 );
* // returns ~4.477
*
* v = entropy( 22.0, 0.5 );
* // returns ~1.838
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":208}],210:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace cauchy
*/
var cauchy = {};

/**
* @name Cauchy
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/ctor}
*/
setReadOnly( cauchy, 'Cauchy', require( '@stdlib/math/base/dist/cauchy/ctor' ) );

/**
* @name cdf
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/cdf}
*/
setReadOnly( cauchy, 'cdf', require( '@stdlib/math/base/dist/cauchy/cdf' ) );

/**
* @name entropy
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/entropy}
*/
setReadOnly( cauchy, 'entropy', require( '@stdlib/math/base/dist/cauchy/entropy' ) );

/**
* @name logcdf
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/logcdf}
*/
setReadOnly( cauchy, 'logcdf', require( '@stdlib/math/base/dist/cauchy/logcdf' ) );

/**
* @name logpdf
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/logpdf}
*/
setReadOnly( cauchy, 'logpdf', require( '@stdlib/math/base/dist/cauchy/logpdf' ) );

/**
* @name median
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/median}
*/
setReadOnly( cauchy, 'median', require( '@stdlib/math/base/dist/cauchy/median' ) );

/**
* @name mode
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/mode}
*/
setReadOnly( cauchy, 'mode', require( '@stdlib/math/base/dist/cauchy/mode' ) );

/**
* @name pdf
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/pdf}
*/
setReadOnly( cauchy, 'pdf', require( '@stdlib/math/base/dist/cauchy/pdf' ) );

/**
* @name quantile
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cauchy/quantile}
*/
setReadOnly( cauchy, 'quantile', require( '@stdlib/math/base/dist/cauchy/quantile' ) );


// EXPORTS //

module.exports = cauchy;

},{"@stdlib/math/base/dist/cauchy/cdf":204,"@stdlib/math/base/dist/cauchy/ctor":207,"@stdlib/math/base/dist/cauchy/entropy":209,"@stdlib/math/base/dist/cauchy/logcdf":212,"@stdlib/math/base/dist/cauchy/logpdf":216,"@stdlib/math/base/dist/cauchy/median":219,"@stdlib/math/base/dist/cauchy/mode":221,"@stdlib/math/base/dist/cauchy/pdf":224,"@stdlib/math/base/dist/cauchy/quantile":228,"@stdlib/utils/define-read-only-property":1425}],211:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan2 = require( '@stdlib/math/base/special/atan2' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// VARIABLES //

var ONE_OVER_PI = 0.3183098861837907;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 10.0, 2.0 );
*
* var y = logcdf( 10.0 );
* // returns -0.693
*
* y = logcdf( 12.0 );
* // returns -0.288
*/
function factory( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return nan;
	}
	return logcdf;

	/**
	* Evaluates the  natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ln( (ONE_OVER_PI * atan2( x-x0, gamma )) + 0.5 );
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":214,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/atan2":1191,"@stdlib/math/base/special/ln":1300}],212:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/cauchy/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/cauchy/logcdf' );
*
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.16
*
* @example
* var factory = require( '@stdlib/math/base/dist/cauchy/logcdf' );
*
* var logCDF = factory( 1.5, 3.0 );
*
* var y = logCDF( 1.0 );
* // returns ~-0.805
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":211,"./logcdf.js":213,"@stdlib/utils/define-read-only-property":1425}],213:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan2 = require( '@stdlib/math/base/special/atan2' );
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var ONE_OVER_PI = 0.3183098861837907;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Probability} evaluated logCDF
*
* @example
* var y = logcdf( 4.0, 0.0, 2.0 );
* // returns ~-0.16
* @example
* var y = logcdf( 1.0, 0.0, 2.0 );
* // returns ~-0.434
* @example
* var y = logcdf( 1.0, 3.0, 2.0 );
* // returns -1.386
* @example
* var y = logcdf( NaN, 0.0, 2.0 );
* // returns NaN
* @example
* var y = logcdf( 1.0, 2.0, NaN );
* // returns NaN
* @example
* var y = logcdf( 1.0, NaN, 3.0 );
* // returns NaN
*/
function logcdf( x, x0, gamma ) {
	if (
		isnan( x ) ||
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return ln( (ONE_OVER_PI * atan2( x-x0, gamma )) + 0.5 );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/atan2":1191,"@stdlib/math/base/special/ln":1300}],214:[function(require,module,exports){
'use strict';

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for an invalid Cauchy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 1.0 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],215:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNPI = require( '@stdlib/math/constants/float64-ln-pi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 4.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-4.141
*
* y = logpdf( 3.0 );
* // returns ~-2.064
*/
function factory( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return nan;
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (logPDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return -( LNPI + ln( gamma ) + log1p( pow( (x-x0)/gamma, 2.0 ) ) );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":218,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ln-pi":1400}],216:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution logarithm of probability density function (logPDF).
*
* @module @stdlib/math/base/dist/cauchy/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/cauchy/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.765
*
* @example
* var factory = require( '@stdlib/math/base/dist/cauchy/logpdf' ).factory;
*
* var logpdf = factory( 10.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-1.839
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":215,"./logpdf.js":217,"@stdlib/utils/define-read-only-property":1425}],217:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNPI = require( '@stdlib/math/constants/float64-ln-pi' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 1.0, 1.0 )
* // returns ~-1.839
* @example
* var y = logpdf( 4.0, 3.0, 0.1 )
* // returns ~-3.458
* @example
* var y = logpdf( 4.0, 3.0, 3.0 )
* // returns ~-2.354
* @example
* var y = logpdf( NaN, 1.0, 1.0 )
* // returns NaN
* @example
* var y = logpdf( 2.0, NaN, 1.0 )
* // returns NaN
* @example
* var y = logpdf( 2.0, 1.0, NaN )
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 1.0, -2.0 )
* // returns NaN
*/
function logpdf( x, x0, gamma ) {
	if (
		isnan( x ) ||
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return -( LNPI + ln( gamma ) + log1p( pow( (x-x0)/gamma, 2.0 ) ) );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ln-pi":1400}],218:[function(require,module,exports){
'use strict';

/**
* Evaluates the natural logarithm of the probability density function for an invalid Cauchy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 0.3 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],219:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution median.
*
* @module @stdlib/math/base/dist/cauchy/median
*
* @example
* var median = require( '@stdlib/math/base/dist/cauchy/median' );
*
* var v = median( 10.0, 7.0 );
* // returns 10.0
*
* v = median( 22.0, 0.5 );
* // returns 22.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":220}],220:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} median
*
* @example
* var v = median( 10.0, 5.0 );
* // returns 10.0
* @example
* var v = median( 7.0, 0.1 );
* // returns 7.0
* @example
* var v = median( 10.0, -0.5 );
* // returns NaN
*/
function median( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return x0;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43}],221:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution mode.
*
* @module @stdlib/math/base/dist/cauchy/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/cauchy/mode' );
*
* var v = mode( 10.0, 7.0 );
* // returns 10.0
*
* v = mode( 22.0, 0.5 );
* // returns 22.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":222}],222:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} mode
*
* @example
* var v = mode( 10.0, 5.0 );
* // returns 10.0
* @example
* var v = mode( 7.0, 0.1 );
* // returns 7.0
* @example
* var v = mode( 10.0, -0.5 );
* // returns NaN
*/
function mode( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return x0;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],223:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 4.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.0159
*
* y = pdf( 3.0 );
* // returns ~0.127
*/
function factory( x0, gamma ) {
	var gpi;
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return nan;
	}
	gpi = gamma * PI;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return 1.0 / ( gpi * (1.0 + pow( (x-x0)/gamma, 2.0 )) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":225,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pi":1413}],224:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/cauchy/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/cauchy/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.063
*
* @example
* var factory = require( '@stdlib/math/base/dist/cauchy/pdf' ).factory;
*
* var pdf = factory( 10.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.159
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":223,"./pdf.js":226,"@stdlib/utils/define-read-only-property":1425}],225:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function for an invalid Cauchy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 0.3 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],226:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 1.0, 1.0 )
* // returns ~0.159
* @example
* var y = pdf( 4.0, 3.0, 0.1 )
* // returns ~0.0315
* @example
* var y = pdf( 4.0, 3.0, 3.0 )
* // returns ~0.095
* @example
* var y = pdf( NaN, 1.0, 1.0 )
* // returns NaN
* @example
* var y = pdf( 2.0, NaN, 1.0 )
* // returns NaN
* @example
* var y = pdf( 2.0, 1.0, NaN )
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 1.0, -2.0 )
* // returns NaN
*/
function pdf( x, x0, gamma ) {
	var denom;
	if (
		isnan( x ) ||
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	denom = PI * gamma * ( 1.0 + pow( (x-x0)/gamma, 2.0 ) );
	return 1.0 / denom;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pi":1413}],227:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.2 );
* // returns ~7.247
*
* y = pdf( 0.8 );
* // returns ~12.753
*/
function factory( x0, gamma ) {
	if (
		isnan( x0 ) ||
		isnan( gamma ) ||
		gamma <= 0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Cauchy distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return x0 + ( gamma * tan( PI*( p-0.5 ) ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":229,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/tan":1344,"@stdlib/math/constants/float64-pi":1413}],228:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution quantile function.
*
* @module @stdlib/math/base/dist/cauchy/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/cauchy/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.376
*
* @example
* var factory = require( '@stdlib/math/base/dist/cauchy/quantile' ).factory;
*
* var quantile = factory( 10.0, 2.0 );
*
* var y = quantile( 0.5 );
* // returns 10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":227,"./quantile.js":230,"@stdlib/utils/define-read-only-property":1425}],229:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Cauchy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],230:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Evaluates the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.3, 2.0, 2.0 );
* // returns ~0.547
* @example
* var y = quantile( 0.8, 10, 2.0 );
* // returns ~12.753
* @example
* var y = quantile( 0.1, 10.0, 2.0 );
* // returns ~3.845
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, x0, gamma ) {
	if (
		isnan( x0 ) ||
		isnan( gamma ) ||
		gamma <= 0.0 ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return x0 + ( gamma * tan( PI*( p-0.5 ) ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/tan":1344,"@stdlib/math/constants/float64-pi":1413}],231:[function(require,module,exports){
'use strict';

// MODULES //

var gammaCDF = require( '@stdlib/math/base/dist/gamma/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.739
* @example
* var y = cdf( 1.0, 0.5 );
* // returns ~0.846
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, k ) {
	if (
		isnan( x ) ||
		isnan( k ) ||
		k < 0.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		return x <= 0 ? 0.0 : 1.0;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return gammaCDF( x*x, k/2.0, 0.5 );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/gamma/cdf":490}],232:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
var gammaFactory = require( '@stdlib/math/base/dist/gamma/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0 );
*
* var y = cdf( 6.0 );
* // returns ~1.0
*
* y = cdf( 1.5 );
* // returns ~0.478
*/
function factory( k ) {
	var gamma;
	if ( k === 0.0 ) {
		return degenerate( 0.0 );
	}
	gamma = gammaFactory( k/2.0, 0.5 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated CDF
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return gamma( x*x );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/cdf":328,"@stdlib/math/base/dist/gamma/cdf":490}],233:[function(require,module,exports){
'use strict';

/**
* Chi distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/chi/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/chi/cdf' );
*
* var y = cdf( 2.0, 8.0 );
* // returns ~0.143
*
* y = cdf( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/chi/cdf' ).factory;
*
* var cdf = factory( 1.0 );
*
* var y = cdf( 2.0 );
* // returns ~0.954
*
* y = cdf( 1.2 );
* // returns ~0.77
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":231,"./factory.js":232,"@stdlib/utils/define-read-only-property":1425}],234:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/chi/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/chi/kurtosis' );
var mean = require( '@stdlib/math/base/dist/chi/mean' );
var mode = require( '@stdlib/math/base/dist/chi/mode' );
var skewness = require( '@stdlib/math/base/dist/chi/skewness' );
var stdev = require( '@stdlib/math/base/dist/chi/stdev' );
var variance = require( '@stdlib/math/base/dist/chi/variance' );
var cdf = require( '@stdlib/math/base/dist/chi/cdf' );
var pdf = require( '@stdlib/math/base/dist/chi/pdf' );
var quantile = require( '@stdlib/math/base/dist/chi/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function chiCDF( x ) {
	return cdf( x, this.k );
} // end FUNCTION chiCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function chiPDF( x ) {
	return pdf( x, this.k );
} // end FUNCTION chiPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function chiQuantile( p ) {
	return quantile( p, this.k );
} // end FUNCTION chiQuantile()


// MAIN //

/**
* Chi distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - degrees of freedom
* @throws {TypeError} `k` must be a positive number
* @returns {Chi} distribution instance
*
* @example
* var chi = new Chi( 1.0 );
*
* var y = chi.cdf( 0.8 );
* // returns ~0.576
*
* var mode = chi.mode;
* // returns 0.0
*/
function Chi() {
	var k;
	if ( !(this instanceof Chi) ) {
		if ( arguments.length === 0 ) {
			return new Chi();
		}
		return new Chi( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `k` must be a positive number. Value: `' + k + '`' );
		}
	} else {
		k = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	return this;
} // end FUNCTION Chi()

/**
* Chi distribution differential entropy.
*
* @memberof Chi.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.entropy;
* // returns ~1.019
*/
Object.defineProperty( Chi.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k );
	}
});

/**
* Chi distribution excess kurtosis.
*
* @memberof Chi.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.kurtosis;
* // returns ~0.059
*/
Object.defineProperty( Chi.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k );
	}
});

/**
* Chi distribution expected value.
*
* @memberof Chi.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.mean;
* // returns ~1.88
*/
Object.defineProperty( Chi.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k );
	}
});

/**
* Chi distribution mode.
*
* @memberof Chi.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.mode;
* // returns ~1.732
*/
Object.defineProperty( Chi.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k );
	}
});

/**
* Chi distribution skewness.
*
* @memberof Chi.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.skewness;
* // returns ~0.406
*/
Object.defineProperty( Chi.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k );
	}
});

/**
* Chi distribution standard deviation.
*
* @memberof Chi.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.stdev;
* // returns ~0.683
*/
Object.defineProperty( Chi.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k );
	}
});

/**
* Chi distribution variance.
*
* @memberof Chi.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.variance;
* // returns ~0.466
*/
Object.defineProperty( Chi.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Chi.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.cdf( 0.5 );
* // returns ~0.118
*/
setReadOnly( Chi.prototype, 'cdf', chiCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Chi.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.pdf( 0.8 );
* // returns ~0.441
*/
setReadOnly( Chi.prototype, 'pdf', chiPDF );

/**
* Evaluates the quantile function.
*
* @memberof Chi.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.quantile( 0.5 );
* // returns ~1.177
*/
setReadOnly( Chi.prototype, 'quantile', chiQuantile );


// EXPORTS //

module.exports = Chi;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/chi/cdf":233,"@stdlib/math/base/dist/chi/entropy":237,"@stdlib/math/base/dist/chi/kurtosis":238,"@stdlib/math/base/dist/chi/mean":241,"@stdlib/math/base/dist/chi/mode":243,"@stdlib/math/base/dist/chi/pdf":246,"@stdlib/math/base/dist/chi/quantile":250,"@stdlib/math/base/dist/chi/skewness":252,"@stdlib/math/base/dist/chi/stdev":254,"@stdlib/math/base/dist/chi/variance":256,"@stdlib/utils/define-read-only-property":1425}],235:[function(require,module,exports){
'use strict';

/**
* Chi distribution constructor.
*
* @module @stdlib/math/base/dist/chi/ctor
*
* @example
* var Chi = require( '@stdlib/math/base/dist/chi/ctor' );
*
* var chi = new Chi( 1.0 );
*
* var y = chi.cdf( 0.8 );
* // returns ~0.576
*
* var mode = chi.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":234}],236:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var LN2 = require( '@stdlib/math/constants/float64-ln-two' );


// MAIN //

/**
* Returns the differential entropy of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~1.052
* @example
* var v = entropy( 1.0 );
* // returns ~0.726
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( k ) {
	var kh;
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	kh = k / 2.0;
	return gammaln( kh ) + ( 0.5 * ( k - LN2 - ( ( k-1.0 )*digamma( kh ) ) ) );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/digamma":1245,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/constants/float64-ln-two":1403}],237:[function(require,module,exports){
'use strict';

/**
* Chi distribution differential entropy.
*
* @module @stdlib/math/base/dist/chi/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/chi/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~1.056
*
* v = entropy( 1.5 );
* // returns ~0.878
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":236}],238:[function(require,module,exports){
'use strict';

/**
* Chi distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/chi/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/chi/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.007
*
* v = kurtosis( 1.5 );
* // returns ~0.424
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":239}],239:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var skewness = require( '@stdlib/math/base/dist/chi/skewness' );
var variance = require( '@stdlib/math/base/dist/chi/variance' );
var mean = require( '@stdlib/math/base/dist/chi/mean' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the excess kurtosis of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.011
* @example
* var v = kurtosis( 1.0 );
* // returns ~0.869
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( k ) {
	var sigma2;
	var sigma;
	var g1;
	var mu;
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	sigma2 = variance( k );
	sigma = sqrt( sigma2 );
	mu = mean( k );
	g1 = skewness( k );
	return ( 2.0/sigma2 ) * ( 1.0 - ( mu*sigma*g1 ) - sigma2 );
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/chi/mean":241,"@stdlib/math/base/dist/chi/skewness":252,"@stdlib/math/base/dist/chi/variance":256,"@stdlib/math/base/special/sqrt":1343}],240:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace chi
*/
var chi = {};

/**
* @name cdf
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/cdf}
*/
setReadOnly( chi, 'cdf', require( '@stdlib/math/base/dist/chi/cdf' ) );

/**
* @name Chi
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/ctor}
*/
setReadOnly( chi, 'Chi', require( '@stdlib/math/base/dist/chi/ctor' ) );

/**
* @name entropy
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/entropy}
*/
setReadOnly( chi, 'entropy', require( '@stdlib/math/base/dist/chi/entropy' ) );

/**
* @name kurtosis
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/kurtosis}
*/
setReadOnly( chi, 'kurtosis', require( '@stdlib/math/base/dist/chi/kurtosis' ) );

/**
* @name mean
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/mean}
*/
setReadOnly( chi, 'mean', require( '@stdlib/math/base/dist/chi/mean' ) );

/**
* @name mode
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/mode}
*/
setReadOnly( chi, 'mode', require( '@stdlib/math/base/dist/chi/mode' ) );

/**
* @name pdf
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/pdf}
*/
setReadOnly( chi, 'pdf', require( '@stdlib/math/base/dist/chi/pdf' ) );

/**
* @name quantile
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/quantile}
*/
setReadOnly( chi, 'quantile', require( '@stdlib/math/base/dist/chi/quantile' ) );

/**
* @name skewness
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/skewness}
*/
setReadOnly( chi, 'skewness', require( '@stdlib/math/base/dist/chi/skewness' ) );

/**
* @name stdev
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/stdev}
*/
setReadOnly( chi, 'stdev', require( '@stdlib/math/base/dist/chi/stdev' ) );

/**
* @name variance
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chi/variance}
*/
setReadOnly( chi, 'variance', require( '@stdlib/math/base/dist/chi/variance' ) );


// EXPORTS //

module.exports = chi;

},{"@stdlib/math/base/dist/chi/cdf":233,"@stdlib/math/base/dist/chi/ctor":235,"@stdlib/math/base/dist/chi/entropy":237,"@stdlib/math/base/dist/chi/kurtosis":238,"@stdlib/math/base/dist/chi/mean":241,"@stdlib/math/base/dist/chi/mode":243,"@stdlib/math/base/dist/chi/pdf":246,"@stdlib/math/base/dist/chi/quantile":250,"@stdlib/math/base/dist/chi/skewness":252,"@stdlib/math/base/dist/chi/stdev":254,"@stdlib/math/base/dist/chi/variance":256,"@stdlib/utils/define-read-only-property":1425}],241:[function(require,module,exports){
'use strict';

/**
* Chi distribution expected value.
*
* @module @stdlib/math/base/dist/chi/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/chi/mean' );
*
* var v = mean( 11.0 );
* // returns ~3.242
*
* v = mean( 4.5 );
* // returns ~2.008
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":242}],242:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var SQRT_TWO = require( '@stdlib/math/constants/float64-sqrt-two' );


// MAIN //

/**
* Returns the expected value of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~2.918
* @example
* var v = mean( 1.0 );
* // returns ~0.798
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return SQRT_TWO * gamma( ( k+1.0 ) / 2.0 ) / gamma( k / 2.0 );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/constants/float64-sqrt-two":1421}],243:[function(require,module,exports){
'use strict';

/**
* Chi distribution mode.
*
* @module @stdlib/math/base/dist/chi/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/chi/mode' );
*
* var v = mode( 11.0 );
* // returns ~3.162
*
* v = mode( 1.5 );
* // returns ~0.707
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":244}],244:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the mode of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns ~2.828
* @example
* var v = mode( 1.0 );
* // returns 0.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( k ) {
	if ( isnan( k ) || k < 1.0 ) {
		return NaN;
	}
	return sqrt( k - 1.0 );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],245:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
*
* var y = pdf( 2.0 );
* // returns ~0.04
*
* y = pdf( 1.0 );
* // returns ~0.281
*/
function factory( k ) {
	var km1;
	var kh;

	if ( isnan( k ) || k < 0.0 ) {
		return nan;
	}
	if ( k === 0.0 ) {
		return degenerate( 0.0 );
	}

	kh = k / 2.0;
	km1 = k - 1.0;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated CDF
	*/
	function pdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		out = pow( 2.0, 1.0-kh ) * pow( x, km1 ) * exp( -(x*x)/2.0 );
		out /= gamma( kh );
		return out;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":247,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/pdf":344,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/pow":1311}],246:[function(require,module,exports){
'use strict';

/**
* Chi distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/chi/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/chi/pdf' );
*
* var y = pdf( 2.0, 1.0 );
* // returns ~0.108
*
* @example
* var factory = require( '@stdlib/math/base/dist/chi/pdf' ).factory;
*
* var pdf = factory( 6.0 );
*
* var y = pdf( 3.0 );
* // returns ~0.337
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":245,"./pdf.js":248,"@stdlib/utils/define-read-only-property":1425}],247:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid chi distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],248:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a chi distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.013
* @example
* var y = pdf( 0.7, 0.7 );
* // returns ~0.537
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, k ) {
	var out;
	var kh;
	if (
		isnan( x ) ||
		isnan( k ) ||
		k < 0.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		// Point mass at 0...
		return x === 0.0 ? PINF : 0.0;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	kh = k / 2.0;
	out = pow( 2.0, 1.0-kh ) * pow( x, k-1.0 ) * exp( -(x*x)/2.0 );
	out /= gamma( kh );
	return out;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],249:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dist/gamma/quantile' ).factory;
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
*
* var y = quantile( 0.9 );
* // returns ~1.1
*
* y = quantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( k ) {
	var gamma = gammaFactory( k/2.0, 0.5 );
	return quantile;

	/**
	* Evaluates the quantile function for a chi distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		return sqrt( gamma( p ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dist/gamma/quantile":520,"@stdlib/math/base/special/sqrt":1343}],250:[function(require,module,exports){
'use strict';

/**
* Chi distribution quantile function.
*
* @module @stdlib/math/base/dist/chi/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/chi/quantile' );
*
* var y = quantile( 0.8, 3.0 );
* // returns ~2.154
*
* @example
* var factory = require( '@stdlib/math/base/dist/chi/quantile' ).factory;
*
* var quantile = factory( 2.0 );
*
* var y = myquantile( 0.3 );
* // returns ~0.844
*
* y = myquantile( 0.7 );
* // returns ~1.552
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":249,"./quantile.js":251,"@stdlib/utils/define-read-only-property":1425}],251:[function(require,module,exports){
'use strict';

// MODULES //

var gammaQuantile = require( '@stdlib/math/base/dist/gamma/quantile' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a chi distribution with degrees of freedom `k` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.282
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~1.832
* @example
* var y = quantile( 0.8, 0.1 );
* // returns ~0.116
* @example
* var y = quantile( -0.2, 0.5 );
* // returns NaN
* @example
* var y = quantile( 1.1, 0.5 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, k ) {
	return sqrt( gammaQuantile( p, k/2.0, 0.5 ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/dist/gamma/quantile":520,"@stdlib/math/base/special/sqrt":1343}],252:[function(require,module,exports){
'use strict';

/**
* Chi distribution skewness.
*
* @module @stdlib/math/base/dist/chi/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/chi/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.225
*
* v = skewness( 1.5 );
* // returns ~0.763
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":253}],253:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var variance = require( '@stdlib/math/base/dist/chi/variance' );
var mean = require( '@stdlib/math/base/dist/chi/mean' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.252
* @example
* var v = skewness( 1.0 );
* // returns ~0.995
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( k ) {
	var sigma3;
	var sigma2;
	var sigma;
	var mu;
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	mu = mean( k );
	sigma = sqrt( variance( k ) );
	sigma2 = sigma * sigma;
	sigma3 = sigma2 * sigma;
	return ( mu / sigma3 ) * ( 1.0 - ( 2.0*sigma2 ) );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/chi/mean":241,"@stdlib/math/base/dist/chi/variance":256,"@stdlib/math/base/special/sqrt":1343}],254:[function(require,module,exports){
'use strict';

/**
* Chi distribution standard deviation.
*
* @module @stdlib/math/base/dist/chi/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/chi/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~0.699
*
* v = stdev( 1.5 );
* // returns ~0.637
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":255}],255:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var mean = require( '@stdlib/math/base/dist/chi/mean' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~0.697
* @example
* var v = stdev( 1.0 );
* // returns ~0.603
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( k ) {
	var mu;
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	mu = mean( k );
	return sqrt( k - ( mu*mu ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/chi/mean":241,"@stdlib/math/base/special/sqrt":1343}],256:[function(require,module,exports){
'use strict';

/**
* Chi distribution variance.
*
* @module @stdlib/math/base/dist/chi/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/chi/variance' );
*
* var v = variance( 11.0 );
* // returns ~0.488
*
* v = variance( 1.5 );
* // returns ~0.406
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":257}],257:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var mean = require( '@stdlib/math/base/dist/chi/mean' );


// MAIN //

/**
* Returns the variance of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~0.485
* @example
* var v = variance( 1.0 );
* // returns ~0.363
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( k ) {
	var mu;
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	mu = mean( k );
	return k - ( mu*mu );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/chi/mean":241}],258:[function(require,module,exports){
'use strict';

// MODULES //

var gammaCDF = require( '@stdlib/math/base/dist/gamma/cdf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.428
* @example
* var y = cdf( 1.0, 0.5 );
* // returns ~0.846
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, k ) {
	return gammaCDF( x, k/2.0, 0.5 );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/dist/gamma/cdf":490}],259:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dist/gamma/cdf' ).factory;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0 );
*
* var y = cdf( 6.0 );
* // returns ~0.888
*
* y = cdf( 1.5 );
* // returns ~0.318
*/
function factory( k ) {
	return gammaFactory( k/2.0, 0.5 );
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dist/gamma/cdf":490}],260:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/chisquare/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/chisquare/cdf' );
*
* var y = cdf( 2.0, 8.0 );
* // returns ~0.019
*
* y = cdf( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/chisquare/cdf' ).factory;
*
* var cdf = factory( 1.0 );
*
* var y = cdf( 2.0 );
* // returns ~0.843
*
* y = cdf( 1.2 );
* // returns ~0.727
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":258,"./factory.js":259,"@stdlib/utils/define-read-only-property":1425}],261:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/chisquare/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/chisquare/kurtosis' );
var mean = require( '@stdlib/math/base/dist/chisquare/mean' );
var mode = require( '@stdlib/math/base/dist/chisquare/mode' );
var skewness = require( '@stdlib/math/base/dist/chisquare/skewness' );
var stdev = require( '@stdlib/math/base/dist/chisquare/stdev' );
var variance = require( '@stdlib/math/base/dist/chisquare/variance' );
var cdf = require( '@stdlib/math/base/dist/chisquare/cdf' );
var mgf = require( '@stdlib/math/base/dist/chisquare/mgf' );
var pdf = require( '@stdlib/math/base/dist/chisquare/pdf' );
var quantile = require( '@stdlib/math/base/dist/chisquare/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function chisquareCDF( x ) {
	return cdf( x, this.k );
} // end FUNCTION chisquareCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function chisquareMGF( t ) {
	return mgf( t, this.k );
} // end FUNCTION chisquareMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function chisquarePDF( x ) {
	return pdf( x, this.k );
} // end FUNCTION chisquarePDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function chisquareQuantile( p ) {
	return quantile( p, this.k );
} // end FUNCTION chisquareQuantile()


// MAIN //

/**
* Chi-squared distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - rate parameter
* @throws {TypeError} `k` must be a positive number
* @returns {ChiSquare} distribution instance
*
* @example
* var chisquare = new ChiSquare( 1.0 );
*
* var y = chisquare.cdf( 0.8 );
* // returns ~0.629
*
* var mode = chisquare.mode;
* // returns 0.0
*/
function ChiSquare() {
	var k;
	if ( !(this instanceof ChiSquare) ) {
		if ( arguments.length === 0 ) {
			return new ChiSquare();
		}
		return new ChiSquare( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `k` must be a positive number. Value: `' + k + '`' );
		}
	} else {
		k = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	return this;
} // end FUNCTION ChiSquare()

/**
* Chi-squared distribution differential entropy.
*
* @memberof ChiSquare.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.entropy;
* // returns ~2.27
*/
Object.defineProperty( ChiSquare.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k );
	}
});

/**
* Chi-squared distribution excess kurtosis.
*
* @memberof ChiSquare.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.kurtosis;
* // returns 3.0
*/
Object.defineProperty( ChiSquare.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k );
	}
});

/**
* Chi-squared distribution expected value.
*
* @memberof ChiSquare.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.mean;
* // returns 4.0
*/
Object.defineProperty( ChiSquare.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k );
	}
});

/**
* Chi-squared distribution mode.
*
* @memberof ChiSquare.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.mode;
* // returns 2.0
*/
Object.defineProperty( ChiSquare.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k );
	}
});

/**
* Chi-squared distribution skewness.
*
* @memberof ChiSquare.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.skewness;
* // returns ~1.414
*/
Object.defineProperty( ChiSquare.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k );
	}
});

/**
* Chi-squared distribution standard deviation.
*
* @memberof ChiSquare.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.stdev;
* // returns ~2.828
*/
Object.defineProperty( ChiSquare.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k );
	}
});

/**
* Chi-squared distribution variance.
*
* @memberof ChiSquare.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.variance;
* // returns 8.0
*/
Object.defineProperty( ChiSquare.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof ChiSquare.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.cdf( 0.5 );
* // returns ~0.221
*/
setReadOnly( ChiSquare.prototype, 'cdf', chisquareCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof ChiSquare.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.mgf( 0.2 );
* // returns ~1.667
*/
setReadOnly( ChiSquare.prototype, 'mgf', chisquareMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof ChiSquare.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.pdf( 0.8 );
* // returns ~0.335
*/
setReadOnly( ChiSquare.prototype, 'pdf', chisquarePDF );

/**
* Evaluates the quantile function.
*
* @memberof ChiSquare.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.quantile( 0.5 );
* // returns ~1.386
*/
setReadOnly( ChiSquare.prototype, 'quantile', chisquareQuantile );


// EXPORTS //

module.exports = ChiSquare;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/chisquare/cdf":260,"@stdlib/math/base/dist/chisquare/entropy":264,"@stdlib/math/base/dist/chisquare/kurtosis":265,"@stdlib/math/base/dist/chisquare/mean":268,"@stdlib/math/base/dist/chisquare/mgf":271,"@stdlib/math/base/dist/chisquare/mode":274,"@stdlib/math/base/dist/chisquare/pdf":277,"@stdlib/math/base/dist/chisquare/quantile":280,"@stdlib/math/base/dist/chisquare/skewness":282,"@stdlib/math/base/dist/chisquare/stdev":284,"@stdlib/math/base/dist/chisquare/variance":286,"@stdlib/utils/define-read-only-property":1425}],262:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution constructor.
*
* @module @stdlib/math/base/dist/chisquare/ctor
*
* @example
* var ChiSquare = require( '@stdlib/math/base/dist/chisquare/ctor' );
*
* var chisquare = new ChiSquare( 1.0 );
*
* var y = chisquare.cdf( 0.8 );
* // returns ~0.629
*
* var mode = chisquare.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":261}],263:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~2.786
* @example
* var v = entropy( 1.0 );
* // returns ~0.784
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( k ) {
	var kh;
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	kh = k / 2.0;
	return kh + ln( 2.0*gamma( kh ) ) + ( ( 1.0-kh ) * digamma( kh ) );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/digamma":1245,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/ln":1300}],264:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution differential entropy.
*
* @module @stdlib/math/base/dist/chisquare/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/chisquare/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~2.901
*
* v = entropy( 1.5 );
* // returns ~1.375
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":263}],265:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/chisquare/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/chisquare/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~1.091
*
* v = kurtosis( 1.5 );
* // returns 8.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":266}],266:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~1.333
* @example
* var v = kurtosis( 1.0 );
* // returns 12.0
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( k ) {
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	return 12.0 / k;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],267:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace chisquare
*/
var chisquare = {};

/**
* @name cdf
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/cdf}
*/
setReadOnly( chisquare, 'cdf', require( '@stdlib/math/base/dist/chisquare/cdf' ) );

/**
* @name ChiSquare
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/ctor}
*/
setReadOnly( chisquare, 'ChiSquare', require( '@stdlib/math/base/dist/chisquare/ctor' ) );

/**
* @name entropy
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/entropy}
*/
setReadOnly( chisquare, 'entropy', require( '@stdlib/math/base/dist/chisquare/entropy' ) );

/**
* @name kurtosis
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/kurtosis}
*/
setReadOnly( chisquare, 'kurtosis', require( '@stdlib/math/base/dist/chisquare/kurtosis' ) );

/**
* @name mean
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/mean}
*/
setReadOnly( chisquare, 'mean', require( '@stdlib/math/base/dist/chisquare/mean' ) );

/**
* @name mgf
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/mgf}
*/
setReadOnly( chisquare, 'mgf', require( '@stdlib/math/base/dist/chisquare/mgf' ) );

/**
* @name mode
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/mode}
*/
setReadOnly( chisquare, 'mode', require( '@stdlib/math/base/dist/chisquare/mode' ) );

/**
* @name pdf
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/pdf}
*/
setReadOnly( chisquare, 'pdf', require( '@stdlib/math/base/dist/chisquare/pdf' ) );

/**
* @name quantile
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/quantile}
*/
setReadOnly( chisquare, 'quantile', require( '@stdlib/math/base/dist/chisquare/quantile' ) );

/**
* @name skewness
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/skewness}
*/
setReadOnly( chisquare, 'skewness', require( '@stdlib/math/base/dist/chisquare/skewness' ) );

/**
* @name stdev
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/stdev}
*/
setReadOnly( chisquare, 'stdev', require( '@stdlib/math/base/dist/chisquare/stdev' ) );

/**
* @name variance
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/chisquare/variance}
*/
setReadOnly( chisquare, 'variance', require( '@stdlib/math/base/dist/chisquare/variance' ) );


// EXPORTS //

module.exports = chisquare;

},{"@stdlib/math/base/dist/chisquare/cdf":260,"@stdlib/math/base/dist/chisquare/ctor":262,"@stdlib/math/base/dist/chisquare/entropy":264,"@stdlib/math/base/dist/chisquare/kurtosis":265,"@stdlib/math/base/dist/chisquare/mean":268,"@stdlib/math/base/dist/chisquare/mgf":271,"@stdlib/math/base/dist/chisquare/mode":274,"@stdlib/math/base/dist/chisquare/pdf":277,"@stdlib/math/base/dist/chisquare/quantile":280,"@stdlib/math/base/dist/chisquare/skewness":282,"@stdlib/math/base/dist/chisquare/stdev":284,"@stdlib/math/base/dist/chisquare/variance":286,"@stdlib/utils/define-read-only-property":1425}],268:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution expected value.
*
* @module @stdlib/math/base/dist/chisquare/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/chisquare/mean' );
*
* var v = mean( 11.0 );
* // returns 11.0
*
* v = mean( 4.5 );
* // returns 4.5
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":269}],269:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 9.0
* @example
* var v = mean( 1.0 );
* // returns 1.0
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return k;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],270:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} MGF
*
* @example
* var mgf = factory( 1.0 );
*
* var y = mgf( 0.2 );
* // returns ~1.291
*
* y = mgf( 0.4 );
* // returns ~2.236
*/
function factory( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a chi-squared distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) || t >= 0.5 ) {
			return NaN;
		}
		return pow( 1-(2*t), -k/2 );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":273,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],271:[function(require,module,exports){
'use strict';

/**
* Moment-generating function (MGF) for a chi-squared distribution.
*
* @module @stdlib/math/base/dist/chisquare/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/chisquare/mgf' );
*
* var y = mgf( 0.4, 2 );
* // returns ~5.0
*
* y = mgf( -1.0, 5.0 );
* // returns ~0.0642
*
* y = mgf( 0.0, 10.0 );
* // returns 1.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/chisquare/mgf' ).factory;
*
* var mgf = factory( 1.0 );
*
* var y = mgf( 0.2 );
* // returns ~1.291
*
* y = mgf( 0.4 );
* // returns ~2.236
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":270,"./mgf.js":272,"@stdlib/utils/define-read-only-property":1425}],272:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a chi-squared distribution with degrees of freedom `k` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.4, 2 );
* // returns ~5.0
* @example
* var y = mgf( -1.0, 5.0 );
* // returns ~0.0642
* @example
* var y = mgf( 0.0, 10.0 );
* // returns 1.0
*/
function mgf( t, k ) {
	if (
		isnan( t ) ||
		isnan( k ) ||
		k < 0.0 ||
		t >= 0.5
	) {
		return NaN;
	}
	return pow( 1-(2*t), -k/2 );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],273:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid chi-squared distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],274:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution mode.
*
* @module @stdlib/math/base/dist/chisquare/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/chisquare/mode' );
*
* var v = mode( 11.0 );
* // returns 11.0
*
* v = mode( 1.5 );
* // returns 0.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":275}],275:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var max = require( '@stdlib/math/base/special/max' );


// MAIN //

/**
* Returns the mode of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 9.0
* @example
* var v = mode( 1.0 );
* // returns 0.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return max( k - 2.0, 0.0 );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/max":1307}],276:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dist/gamma/pdf' ).factory;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
*
* var y = pdf( 2.0 );
* // returns ~0.051
*
* y = pdf( 1.0 );
* // returns ~0.141
*/
function factory( k ) {
	return gammaFactory( k/2.0, 0.5 );
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dist/gamma/pdf":515}],277:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/chisquare/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/chisquare/pdf' );
*
* var y = pdf( 2.0, 1.0 );
* // returns ~0.104
*
* @example
* var factory = require( '@stdlib/math/base/dist/chisquare/pdf' ).factory;
*
* var pdf = factory( 6.0 );
*
* var y = pdf( 3.0 );
* // returns ~0.126
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":276,"./pdf.js":278,"@stdlib/utils/define-read-only-property":1425}],278:[function(require,module,exports){
'use strict';

// MODULES //

var gammaPDF = require( '@stdlib/math/base/dist/gamma/pdf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.065
* @example
* var y = pdf( 0.7, 0.7 );
* // returns ~0.274
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, k ) {
	return gammaPDF( x, k/2.0, 0.5 );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/dist/gamma/pdf":515}],279:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dist/gamma/quantile' ).factory;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
*
* var y = quantile( 0.9 );
* // returns ~1.21
*
* y = quantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( k ) {
	return gammaFactory( k/2.0, 0.5 );
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dist/gamma/quantile":520}],280:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution quantile function.
*
* @module @stdlib/math/base/dist/chisquare/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/chisquare/quantile' );
*
* var y = quantile( 0.8, 3.0 );
* // returns ~4.642
*
* @example
* var factory = require( '@stdlib/math/base/dist/chisquare/quantile' ).factory;
*
* var quantile = factory( 2.0 );
*
* var y = myquantile( 0.3 );
* // returns ~0.713
*
* y = myquantile( 0.7 );
* // returns ~2.408
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":279,"./quantile.js":281,"@stdlib/utils/define-read-only-property":1425}],281:[function(require,module,exports){
'use strict';

// MODULES //

var gammaQuantile = require( '@stdlib/math/base/dist/gamma/quantile' );


// MAIN //

/**
* Evaluates the quantile function for a chi-squared distribution with degrees of freedom `k` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.642
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~3.357
* @example
* var y = quantile( 0.8, 0.1 );
* // returns ~0.014
* @example
* var y = quantile( -0.2, 0.5 );
* // returns NaN
* @example
* var y = quantile( 1.1, 0.5 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, k ) {
	return gammaQuantile( p, k/2.0, 0.5 );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/dist/gamma/quantile":520}],282:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution skewness.
*
* @module @stdlib/math/base/dist/chisquare/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/chisquare/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.853
*
* v = skewness( 1.5 );
* // returns ~2.309
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":283}],283:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.943
* @example
* var v = skewness( 1.0 );
* // returns ~2.828
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( k ) {
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	return sqrt( 8.0 / k );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],284:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution standard deviation.
*
* @module @stdlib/math/base/dist/chisquare/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/chisquare/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~4.69
*
* v = stdev( 1.5 );
* // returns ~1.732
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":285}],285:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~4.243
* @example
* var v = stdev( 1.0 );
* // returns ~1.414
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return sqrt( 2.0 * k );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],286:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution variance.
*
* @module @stdlib/math/base/dist/chisquare/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/chisquare/variance' );
*
* var v = variance( 11.0 );
* // returns 22.0
*
* v = variance( 1.5 );
* // returns 3.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":287}],287:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns 18.0
* @example
* var v = variance( 1.0 );
* // returns 2.0
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return 2.0 * k;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],288:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 0.0, 1.0 );
* // returns ~0.909
* @example
* var y = cdf( 1.2, 0.0, 1.0 );
* // returns 1.0
* @example
* var y = cdf( -0.9, 0.0, 1.0);
* // returns 0.0
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function cdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s )
	) {
		return NaN;
	}
	if ( s < 0.0 ) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x < mu ? 0.0 : 1.0;
	}
	if ( x < mu - s ) {
		return 0.0;
	}
	if ( x > mu + s ) {
		return 1.0;
	}
	z = ( x - mu ) / s;
	return ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sinpi":1341,"@stdlib/math/constants/float64-pi":1413}],289:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.9 );
* // returns ~0.015
*
* y = cdf( 4.0 );
* // returns ~0.971
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < mu - s ) {
			return 0.0;
		}
		if ( x > mu + s ) {
			return 1.0;
		}
		z = ( x - mu ) / s;
		return ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":291,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/cdf":328,"@stdlib/math/base/special/sinpi":1341,"@stdlib/math/constants/float64-pi":1413}],290:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/cosine/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/cosine/cdf' );
*
* var y = cdf( 0.5, 0.0, 1.0 );
* // returns ~0.909
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 4.0 );
* // returns ~0.971
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":288,"./factory.js":289,"@stdlib/utils/define-read-only-property":1425}],291:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid raised cosine distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],292:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var kurtosis = require( '@stdlib/math/base/dist/cosine/kurtosis' );
var mean = require( '@stdlib/math/base/dist/cosine/mean' );
var median = require( '@stdlib/math/base/dist/cosine/median' );
var mode = require( '@stdlib/math/base/dist/cosine/mode' );
var skewness = require( '@stdlib/math/base/dist/cosine/skewness' );
var stdev = require( '@stdlib/math/base/dist/cosine/stdev' );
var variance = require( '@stdlib/math/base/dist/cosine/variance' );
var cdf = require( '@stdlib/math/base/dist/cosine/cdf' );
var logpdf = require( '@stdlib/math/base/dist/cosine/logpdf' );
var mgf = require( '@stdlib/math/base/dist/cosine/mgf' );
var pdf = require( '@stdlib/math/base/dist/cosine/pdf' );
var quantile = require( '@stdlib/math/base/dist/cosine/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function cosineCDF( x ) {
	return cdf( x, this.mu, this.s );
} // end FUNCTION cosineCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function cosineLogPDF( x ) {
	return logpdf( x, this.mu, this.s );
} // end FUNCTION cosineLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function cosineMGF( t ) {
	return mgf( t, this.mu, this.s );
} // end FUNCTION cosineMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function cosinePDF( x ) {
	return pdf( x, this.mu, this.s );
} // end FUNCTION cosinePDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function cosineQuantile( p ) {
	return quantile( p, this.mu, this.s );
} // end FUNCTION cosineQuantile()


// MAIN //

/**
* Cosine distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [s=1.0] - scale parameter
* @throws {TypeError} `s` must be a positive number
* @returns {Cosine} distribution instance
*
* @example
* var cosine = new Cosine( 1.0, 1.0 );
*
* var y = cosine.cdf( 1.5 );
* // returns ~0.909
*
* var mu = cosine.mean;
* // returns 1.0
*/
function Cosine() {
	var mu;
	var s;
	if ( !(this instanceof Cosine) ) {
		if ( arguments.length === 0 ) {
			return new Cosine();
		}
		return new Cosine( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		s = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( s ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `s` must be a positive number. Value: `' + s + '`' );
		}
	} else {
		mu = 0.0;
		s = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	return this;
} // end FUNCTION Cosine()

/**
* Cosine distribution excess kurtosis.
*
* @memberof Cosine.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.kurtosis;
* // returns ~-0.594
*/
Object.defineProperty( Cosine.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.s );
	}
});

/**
* Cosine distribution expected value.
*
* @memberof Cosine.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.mean;
* // returns 4.0
*/
Object.defineProperty( Cosine.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.s );
	}
});

/**
* Cosine distribution median.
*
* @memberof Cosine.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.median;
* // returns 4.0
*/
Object.defineProperty( Cosine.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.s );
	}
});

/**
* Cosine distribution mode.
*
* @memberof Cosine.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.mode;
* // returns 4.0
*/
Object.defineProperty( Cosine.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.s );
	}
});

/**
* Cosine distribution skewness.
*
* @memberof Cosine.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.skewness;
* // returns 0.0
*/
Object.defineProperty( Cosine.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.s );
	}
});

/**
* Cosine distribution standard deviation.
*
* @memberof Cosine.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.stdev;
* // returns ~4.338
*/
Object.defineProperty( Cosine.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.s );
	}
});

/**
* Cosine distribution variance.
*
* @memberof Cosine.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.variance;
* // returns ~18.819
*/
Object.defineProperty( Cosine.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.s );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Cosine.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.cdf( 0.5 );
* // returns ~0.165
*/
setReadOnly( Cosine.prototype, 'cdf', cosineCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Cosine.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.logpdf( 0.8 );
* // returns ~-1.617
*/
setReadOnly( Cosine.prototype, 'logpdf', cosineLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Cosine.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.mgf( 0.2 );
* // returns ~1.555
*/
setReadOnly( Cosine.prototype, 'mgf', cosineMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Cosine.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.pdf( 0.8 );
* // returns 0.198
*/
setReadOnly( Cosine.prototype, 'pdf', cosinePDF );

/**
* Evaluates the quantile function.
*
* @memberof Cosine.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.quantile( 0.5 );
* // returns ~2.0
*/
setReadOnly( Cosine.prototype, 'quantile', cosineQuantile );


// EXPORTS //

module.exports = Cosine;

},{"@stdlib/assert/is-nan":12,"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/cosine/cdf":290,"@stdlib/math/base/dist/cosine/kurtosis":294,"@stdlib/math/base/dist/cosine/logpdf":298,"@stdlib/math/base/dist/cosine/mean":301,"@stdlib/math/base/dist/cosine/median":303,"@stdlib/math/base/dist/cosine/mgf":306,"@stdlib/math/base/dist/cosine/mode":309,"@stdlib/math/base/dist/cosine/pdf":312,"@stdlib/math/base/dist/cosine/quantile":317,"@stdlib/math/base/dist/cosine/skewness":320,"@stdlib/math/base/dist/cosine/stdev":322,"@stdlib/math/base/dist/cosine/variance":324,"@stdlib/utils/define-read-only-property":1425}],293:[function(require,module,exports){
'use strict';

/**
* Cosine distribution constructor.
*
* @module @stdlib/math/base/dist/cosine/ctor
*
* @example
* var Cosine = require( '@stdlib/math/base/dist/cosine/ctor' );
*
* var cosine = new Cosine( 1.0, 1.0 );
*
* var y = cosine.cdf( 1.5 );
* // returns ~0.909
*
* var mean = cosine.mean;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":292}],294:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/cosine/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/cosine/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns ~-0.594
*
* y = kurtosis( 4.0, 2.0 );
* // returns ~-0.594
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":295}],295:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );


// MAIN //

/**
* Returns the excess kurtosis for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns ~-0.594
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns ~-0.594
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, s ) {
	var out;
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	out = 6.0 * ( 90.0 - ( PI_SQUARED*PI_SQUARED ) );
	out /= 5.0 * pow( PI_SQUARED-6.0, 2.0 );
	return out;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pi-squared":1412}],296:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace cosine
*/
var cosine = {};

/**
* @name cdf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/cdf}
*/
setReadOnly( cosine, 'cdf', require( '@stdlib/math/base/dist/cosine/cdf' ) );

/**
* @name Cosine
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/ctor}
*/
setReadOnly( cosine, 'Cosine', require( '@stdlib/math/base/dist/cosine/ctor' ) );

/**
* @name kurtosis
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/kurtosis}
*/
setReadOnly( cosine, 'kurtosis', require( '@stdlib/math/base/dist/cosine/kurtosis' ) );

/**
* @name logpdf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/logpdf}
*/
setReadOnly( cosine, 'logpdf', require( '@stdlib/math/base/dist/cosine/logpdf' ) );

/**
* @name mean
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/mean}
*/
setReadOnly( cosine, 'mean', require( '@stdlib/math/base/dist/cosine/mean' ) );

/**
* @name median
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/median}
*/
setReadOnly( cosine, 'median', require( '@stdlib/math/base/dist/cosine/median' ) );

/**
* @name mgf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/mgf}
*/
setReadOnly( cosine, 'mgf', require( '@stdlib/math/base/dist/cosine/mgf' ) );

/**
* @name mode
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/mode}
*/
setReadOnly( cosine, 'mode', require( '@stdlib/math/base/dist/cosine/mode' ) );

/**
* @name pdf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/pdf}
*/
setReadOnly( cosine, 'pdf', require( '@stdlib/math/base/dist/cosine/pdf' ) );

/**
* @name quantile
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/quantile}
*/
setReadOnly( cosine, 'quantile', require( '@stdlib/math/base/dist/cosine/quantile' ) );

/**
* @name skewness
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/skewness}
*/
setReadOnly( cosine, 'skewness', require( '@stdlib/math/base/dist/cosine/skewness' ) );

/**
* @name stdev
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/stdev}
*/
setReadOnly( cosine, 'stdev', require( '@stdlib/math/base/dist/cosine/stdev' ) );

/**
* @name variance
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/cosine/variance}
*/
setReadOnly( cosine, 'variance', require( '@stdlib/math/base/dist/cosine/variance' ) );


// EXPORTS //

module.exports = cosine;

},{"@stdlib/math/base/dist/cosine/cdf":290,"@stdlib/math/base/dist/cosine/ctor":293,"@stdlib/math/base/dist/cosine/kurtosis":294,"@stdlib/math/base/dist/cosine/logpdf":298,"@stdlib/math/base/dist/cosine/mean":301,"@stdlib/math/base/dist/cosine/median":303,"@stdlib/math/base/dist/cosine/mgf":306,"@stdlib/math/base/dist/cosine/mode":309,"@stdlib/math/base/dist/cosine/pdf":312,"@stdlib/math/base/dist/cosine/quantile":317,"@stdlib/math/base/dist/cosine/skewness":320,"@stdlib/math/base/dist/cosine/stdev":322,"@stdlib/math/base/dist/cosine/variance":324,"@stdlib/utils/define-read-only-property":1425}],297:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-0.693
*
* y = logpdf( 9.0 );
* // returns ~-1.386
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			x < mu - s ||
			x > mu + s
		) {
			return NINF;
		}
		z = ( x - mu ) / s;
		return ln( 1.0 + cospi( z ) ) - ln( 2.0 * s );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":300,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/logpdf":336,"@stdlib/math/base/special/cospi":1242,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],298:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/cosine/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/cosine/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-0.693
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = require( './logpdf.js' );

},{"./factory.js":297,"./logpdf.js":299,"@stdlib/utils/define-read-only-property":1425}],299:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 3.0 );
* // returns ~-2.254
* @example
* var y = logpdf( 1.5, 4.0, 4.0 );
* // returns ~-2.562
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
* @example
* var y = logpdf( 2.0, 8.0, 0.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 8.0, 8.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*/
function logpdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : NINF;
	}
	if (
		x < mu - s ||
		x > mu + s
	) {
		return NINF;
	}
	z = ( x - mu ) / s;
	return ln( 1.0 + cospi( z ) ) - ln( 2.0 * s );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/cospi":1242,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],300:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid raised cosine distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 9.0 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],301:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution expected value.
*
* @module @stdlib/math/base/dist/cosine/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/cosine/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":302}],302:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],303:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution median.
*
* @module @stdlib/math/base/dist/cosine/median
*
* @example
* var median = require( '@stdlib/math/base/dist/cosine/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":304}],304:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43}],305:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinh = require( '@stdlib/math/base/special/sinh' );
var exp = require( '@stdlib/math/base/special/exp' );
var PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 3.0, 1.5 );
*
* var y = mgf( 1.9 );
* // returns ~495.57
*
* y = mgf( -1.0 );
* // returns ~0.058
*/
function factory( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a raised cosine distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {Probability} evaluated MGF
	*
	* @example
	* var y = mgf( 2.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		var out;
		var st;
		if ( isnan( t ) ) {
			return NaN;
		}
		st = s * t;
		out = PI_SQUARED * sinh( st );
		out /= st * ( PI_SQUARED + ( st*st ) );
		out *= exp( mu * t );
		return out;
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":308,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/sinh":1339,"@stdlib/math/constants/float64-pi-squared":1412}],306:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution moment-generating function (MGF).
*
* @module @stdlib/math/base/dist/cosine/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/cosine/mgf' );
*
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.016
*
* var mymgf = mgf.factory( 3.0, 1.5 );
*
* y = mymgf( 1.0 );
* // returns ~23.219
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":305,"./mgf.js":307,"@stdlib/utils/define-read-only-property":1425}],307:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinh = require( '@stdlib/math/base/special/sinh' );
var exp = require( '@stdlib/math/base/special/exp' );
var PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {Probability} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.016
* @example
* var y = mgf( 1.2, 0.0, 1.0 );
* // returns ~1.098
* @example
* var y = mgf( -0.9, 0.0, 3.0);
* // returns 0.0
* @example
* var y = mgf( 2.0, 0.0, NaN );
* // returns NaN
* @example
* var y = mgf( 2.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function mgf( t, mu, s ) {
	var out;
	var st;
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	st = s * t;
	out = PI_SQUARED * sinh( st );
	out /= st * ( PI_SQUARED + ( st*st ) );
	out *= exp( mu * t );
	return out;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/sinh":1339,"@stdlib/math/constants/float64-pi-squared":1412}],308:[function(require,module,exports){
arguments[4][291][0].apply(exports,arguments)
},{"dup":291}],309:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution mode.
*
* @module @stdlib/math/base/dist/cosine/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/cosine/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":310}],310:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],311:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 3.0 );
* var y = pdf( 2.0 );
* // returns ~0.083
*
* y = pdf( 5.0 );
* // returns 0.0
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			x < mu - s ||
			x > mu + s
		) {
			return 0.0;
		}
		z = ( x - mu ) / s;
		return ( 1.0 + cospi( z ) ) / ( 2.0 * s );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":313,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/pdf":344,"@stdlib/math/base/special/cospi":1242}],312:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/cosine/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/cosine/pdf' );
*
* var y = pdf( 2.0, 0.0, 3.0 );
* // returns ~0.083
*
* var myPDF = pdf.factory( 0.0, 3.0 );
* y = myPDF( 2.0 );
* // returns ~0.083
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":311,"./pdf.js":314,"@stdlib/utils/define-read-only-property":1425}],313:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid raised cosine distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 9.0 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],314:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 3.0 );
* // returns ~0.083
* @example
* var y = pdf( 2.5, 4.0, 2.0 );
* // returns ~0.073
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*/
function pdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : 0.0;
	}
	if (
		x < mu - s ||
		x > mu + s
	) {
		return 0.0;
	}
	z = ( x - mu ) / s;
	return ( 1.0 + cospi( z ) ) / ( 2.0 * s );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/cospi":1242,"@stdlib/math/constants/float64-pinf":1414}],315:[function(require,module,exports){
'use strict';

// MODULES //

var cosineCDF = require( '@stdlib/math/base/dist/cosine/cdf' );


// VARIABLES //

var MAX_ITERATIONS = 1e4;
var TOLERANCE = 1e-12;


// MAIN //

/**
* Bisection method to find quantile as there is no closed-form expression for the inverse of the CDF.
*
* @private
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*/
function bisect( p, mu, s ) {
	var a;
	var b;
	var c;
	var m;
	var n;

	n = 1;
	a = mu - s;
	b = mu + s;
	while ( n < MAX_ITERATIONS ) {
		m = ( a + b ) / 2.0;
		if ( b - a < TOLERANCE ) {
			return m;
		}
		c = cosineCDF( m, mu, s);
		if ( p > c ) {
			a = m;
		} else {
			b = m;
		}
		n += 1;
	}
	return m;
} // end FUNCTION bisect()


// EXPORTS //

module.exports = bisect;

},{"@stdlib/math/base/dist/cosine/cdf":290}],316:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/quantile' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var bisect = require( './bisect.js' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~10.0
*
* y = quantile( 0.8 );
* // returns ~10.655
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a raised cosine distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return bisect( p, mu, s );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./bisect.js":315,"./nan.js":318,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/quantile":352}],317:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution quantile function.
*
* @module @stdlib/math/base/dist/cosine/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/cosine/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.327
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns ~10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":316,"./quantile.js":319,"@stdlib/utils/define-read-only-property":1425}],318:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid raised cosine distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],319:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var bisect = require( './bisect.js' );


// MAIN //

/**
* Evaluates the quantile function for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.327
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return mu;
	}
	return bisect( p, mu, s );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"./bisect.js":315,"@stdlib/math/base/assert/is-nan":43}],320:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution skewness.
*
* @module @stdlib/math/base/dist/cosine/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/cosine/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":321}],321:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43}],322:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution standard deviation.
*
* @module @stdlib/math/base/dist/cosine/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/cosine/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~0.362
*
* y = stdev( 4.0, 2.0 );
* // returns ~0.723
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":323}],323:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );


// MAIN //

/**
* Returns the standard deviation for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~0.362
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~0.723
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return s * sqrt( ( 1.0/3.0 ) - ( 2/PI_SQUARED ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi-squared":1412}],324:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution variance.
*
* @module @stdlib/math/base/dist/cosine/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/cosine/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~0.131
*
* y = variance( 4.0, 2.0 );
* // returns ~0.523
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":325}],325:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );


// MAIN //

/**
* Returns the variance for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~0.131
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~0.523
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return ( s*s ) * ( ( 1.0/3.0 ) - ( 2/PI_SQUARED ) );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pi-squared":1412}],326:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of distribution
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns 0.0
* @example
* var y = cdf( 4.0, 3.0 );
* // returns 1.0
* @example
* var y = cdf( 3.0, 3.0 );
* // returns 1.0
* @example
* var y = cdf( NaN, 0.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*/
function cdf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return (x < mu) ? 0.0 : 1.0;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43}],327:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - constant value of distribution
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*
* y = cdf( NaN )
* // returns NaN
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated cumulative distribution function
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return (x < mu) ? 0.0 : 1.0;
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":329,"@stdlib/math/base/assert/is-nan":43}],328:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/degenerate/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/degenerate/cdf' );
*
* var y = cdf( 2.0, 5.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
*
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":326,"./factory.js":327,"@stdlib/utils/define-read-only-property":1425}],329:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with an invalid constant value.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 3.14 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],330:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace degenerate
*/
var degenerate = {};

/**
* @name cdf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/degenerate/cdf}
*/
setReadOnly( degenerate, 'cdf', require( '@stdlib/math/base/dist/degenerate/cdf' ) );

/**
* @name logcdf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/degenerate/logcdf}
*/
setReadOnly( degenerate, 'logcdf', require( '@stdlib/math/base/dist/degenerate/logcdf' ) );

/**
* @name logpdf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/degenerate/logpdf}
*/
setReadOnly( degenerate, 'logpdf', require( '@stdlib/math/base/dist/degenerate/logpdf' ) );

/**
* @name mgf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/degenerate/mgf}
*/
setReadOnly( degenerate, 'mgf', require( '@stdlib/math/base/dist/degenerate/mgf' ) );

/**
* @name pdf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/degenerate/pdf}
*/
setReadOnly( degenerate, 'pdf', require( '@stdlib/math/base/dist/degenerate/pdf' ) );

/**
* @name pmf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/degenerate/pmf}
*/
setReadOnly( degenerate, 'pmf', require( '@stdlib/math/base/dist/degenerate/pmf' ) );

/**
* @name quantile
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/degenerate/quantile}
*/
setReadOnly( degenerate, 'quantile', require( '@stdlib/math/base/dist/degenerate/quantile' ) );


// EXPORTS //

module.exports = degenerate;

},{"@stdlib/math/base/dist/degenerate/cdf":328,"@stdlib/math/base/dist/degenerate/logcdf":332,"@stdlib/math/base/dist/degenerate/logpdf":336,"@stdlib/math/base/dist/degenerate/mgf":340,"@stdlib/math/base/dist/degenerate/pdf":344,"@stdlib/math/base/dist/degenerate/pmf":348,"@stdlib/math/base/dist/degenerate/quantile":352,"@stdlib/utils/define-read-only-property":1425}],331:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (logCDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 5.0 );
*
* var y = logcdf( 3.0 );
* // returns Number.NEGATIVE_INFINITY
*
* y = logcdf( 6.0 );
* // returns 0.0
*
* y = logcdf( NaN )
* // returns NaN
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return nan;
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (logCDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} natural logarithm of cumulative distribution function
	*
	* @example
	* var y = logcdf( 10.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x < mu ) ? NINF : 0.0;
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":334,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-ninf":1411}],332:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/degenerate/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/degenerate/logcdf' );
*
* var y = logcdf( 2.0, 5.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var factory = require( '@stdlib/math/base/dist/degenerate/logcdf' ).factory;
*
* var logcdf = factory( 5.0 );
*
* var y = logcdf( 3.0 );
* // returns Number.NEGATIVE_INFINITY
*
* y = logcdf( 6.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":331,"./logcdf.js":333,"@stdlib/utils/define-read-only-property":1425}],333:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for a degenerate distribution with mean `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of distribution
* @returns {number} natural logarithm of cumulative distribution function
*
* @example
* var y = logcdf( 2.0, 3.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logcdf( 4.0, 3.0 );
* // returns 0.0
* @example
* var y = logcdf( 3.0, 3.0 );
* // returns 0.0
* @example
* var y = logcdf( NaN, 0.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*/
function logcdf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x < mu ) ? NINF : 0.0;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-ninf":1411}],334:[function(require,module,exports){
'use strict';

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a degenerate distribution with an invalid constant value.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 3.14 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],335:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the natural logarithm of the probability density function
*
* @example
* var logpdf = factory( 5.0 );
*
* var y = logpdf( 0.0 );
* // returns Number.NEGATIVE_INFINITY
*
* y = logpdf( 5.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return nan;
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (logPDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} natural logarithm of the probability density function
	*
	* @example
	* var y = logpdf( 10.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? PINF : NINF;
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":338,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],336:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution logarithm of probability density function (logPDF).
*
* @module @stdlib/math/base/dist/degenerate/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/degenerate/logpdf' );
*
* var y = logpdf( 2.0, 0.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var factory = require( '@stdlib/math/base/dist/degenerate/logpdf' ).factory;
*
* var logPDF = factory( 10.0 );
*
* var y = logPDF( 10.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":335,"./logpdf.js":337,"@stdlib/utils/define-read-only-property":1425}],337:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} natural logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 3.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 3.0, 3.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = logpdf( NaN, 0.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*/
function logpdf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? PINF : NINF;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],338:[function(require,module,exports){
'use strict';

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for an invalid degenerate distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 3.14 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],339:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2.0 );
*
* var y = mgf( 0.0 );
* // returns 1.0
*
* y = mgf( 2.0 );
* // returns ~54.598
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a degenerate distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 10.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) ) {
			return NaN;
		}
		return exp( mu*t );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":342,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],340:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution moment-generating function (MGF).
*
* @module @stdlib/math/base/dist/degenerate/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/degenerate/mgf' );
*
* var y = mgf( 2.0, 0.0 );
* // returns 1.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/degenerate/mgf' ).factory;
*
* var mgf = factory( 10.0 );
*
* var y = mymgf( 0.1 );
* // returns ~2.718
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":339,"./mgf.js":341,"@stdlib/utils/define-read-only-property":1425}],341:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a degenerate distribution centered at `mu`.
*
* @param {number} t - input value
* @param {number} mu - value at which to center the distribution
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.0 );
* // returns ~2.718
* @example
* var y = mgf( 2.0, 3.0 );
* // returns ~403.429
* @example
* var y = mgf( NaN, 0.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*/
function mgf( t, mu ) {
	if ( isnan( t ) || isnan( mu ) ) {
		return NaN;
	}
	return exp( mu*t );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],342:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid degenerate distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 3.14 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],343:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 5.0 );
*
* var y = pdf( 0.0 );
* // returns 0.0
*
* y = pdf( 5.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated probability density function
	*
	* @example
	* var y = pdf( 10.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? PINF : 0.0;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":345,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],344:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/degenerate/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/degenerate/pdf' );
*
* var y = pdf( 2.0, 0.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
*
* var pdf = factory( 10.0 );
*
* var y = pdf( 10.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":343,"./pdf.js":346,"@stdlib/utils/define-read-only-property":1425}],345:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid degenerate distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],346:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 3.0 );
* // returns 0.0
* @example
* var y = pdf( 3.0, 3.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = pdf( NaN, 0.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*/
function pdf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? PINF : 0.0;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],347:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the probability mass function
*
* @example
* var pmf = factory( 5.0 );
*
* var y = pmf( 0.0 );
* // returns 0.0
*
* y = pmf( 5.0 );
* // returns 1.0
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return nan;
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PMF
	*
	* @example
	* var y = pmf( 10.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? 1.0 : 0.0;
	} // end FUNCTION pmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":349,"@stdlib/math/base/assert/is-nan":43}],348:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution probability mass function (PDF).
*
* @module @stdlib/math/base/dist/degenerate/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dist/degenerate/pmf' );
*
* var y = pmf( 2.0, 0.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/degenerate/pmf' ).factory;
*
* var pmf = factory( 10.0 );
*
* var y = pmf( 10.0 );
* // returns 1.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":347,"./pmf.js":350,"@stdlib/utils/define-read-only-property":1425}],349:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability mass function (PMF) for an invalid degenerate distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pmf( 3.14 );
* // returns NaN
*/
function pmf() {
	return NaN;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{}],350:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated probability mass function
*
* @example
* var y = pmf( 2.0, 3.0 );
* // returns 0.0
* @example
* var y = pmf( 3.0, 3.0 );
* // returns 1.0
* @example
* var y = pmf( NaN, 0.0 );
* // returns NaN
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*/
function pmf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? 1.0 : 0.0;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{"@stdlib/math/base/assert/is-nan":43}],351:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the quantile function
*
* @example
* var quantile = factory( 5.0 );
*
* var y = quantile( 0.3 );
* // returns 5.0
*
* y = quantile( 0.1 );
* // returns 5.0
*
* y = quantile( 1.1 );
* // returns NaN
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function of a degenerate distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.5 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu;
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":353,"@stdlib/math/base/assert/is-nan":43}],352:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution quantile function.
*
* @module @stdlib/math/base/dist/degenerate/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/degenerate/quantile' );
*
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/degenerate/quantile' ).factory;
*
* var quantile = factory( 10.0 );
*
* var y = quantile( 0.5 );
* // returns 10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":351,"./quantile.js":354,"@stdlib/utils/define-read-only-property":1425}],353:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid degenerate distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],354:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a degenerate distribution centered at `mu`.
*
* @param {Probability} p - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
* @example
* var y = quantile( 0.9, 4.0 );
* // returns 4.0
* @example
* var y = quantile( 1.1, 0.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*/
function quantile( p, mu ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return mu;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43}],355:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var gammaCDF = require( '@stdlib/math/base/dist/gamma/cdf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1, 1.0 );
* // returns ~0.865
* @example
* var y = cdf( 2.0, 3, 1.0 );
* // returns ~0.323
* @example
* var y = cdf( 2.0, 2.5, 1.0 );
* // returns NaN
* @example
* var y = cdf( -1.0, 2, 2.0 );
* // returns 0.0
* @example
* var y = cdf( +Infinity, 4, 2.0 );
* // returns 1.0
* @example
* var y = cdf( -Infinity, 4, 2.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, -1, 1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function cdf( x, k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return NaN;
	}
	return gammaCDF( x, k, lambda );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/gamma/cdf":490}],356:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var factoryGamma = require( '@stdlib/math/base/dist/gamma/cdf' ).factory;
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2, 0.1 );
* var y = cdf( 12.0 );
* // returns ~0.337
*
* y = cdf( 8.0 );
* // returns ~0.191
*/
function factory( k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return nan;
	}
	return factoryGamma( k, lambda );
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":358,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/gamma/cdf":490}],357:[function(require,module,exports){
'use strict';

/**
* Erlang distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/erlang/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/erlang/cdf' );
*
* var y = cdf( 2.0, 8, 3.0 );
* // returns ~0.256
*
* y = cdf( 0.0, 1, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2, 0.5 );
* y = mycdf( 6.0 );
* // returns ~0.801
*
* y = mycdf( 2.0 );
* // returns ~0.264
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":355,"./factory.js":356,"@stdlib/utils/define-read-only-property":1425}],358:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Erlang distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 2.1 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],359:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/erlang/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/erlang/kurtosis' );
var mean = require( '@stdlib/math/base/dist/erlang/mean' );
var mode = require( '@stdlib/math/base/dist/erlang/mode' );
var skewness = require( '@stdlib/math/base/dist/erlang/skewness' );
var stdev = require( '@stdlib/math/base/dist/erlang/stdev' );
var variance = require( '@stdlib/math/base/dist/erlang/variance' );
var cdf = require( '@stdlib/math/base/dist/erlang/cdf' );
var mgf = require( '@stdlib/math/base/dist/erlang/mgf' );
var pdf = require( '@stdlib/math/base/dist/erlang/pdf' );
var quantile = require( '@stdlib/math/base/dist/erlang/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function erlangCDF( x ) {
	return cdf( x, this.k, this.lambda );
} // end FUNCTION erlangCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function erlangMGF( t ) {
	return mgf( t, this.k, this.lambda );
} // end FUNCTION erlangMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function erlangPDF( x ) {
	return pdf( x, this.k, this.lambda );
} // end FUNCTION erlangPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function erlangQuantile( p ) {
	return quantile( p, this.k, this.lambda );
} // end FUNCTION erlangQuantile()


// MAIN //

/**
* Erlang distribution constructor.
*
* @constructor
* @param {PositiveInteger} [k=1.0] - shape parameter
* @param {PositiveNumber} [lambda=1.0] - rate parameter
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @returns {Erlang} distribution instance
*
* @example
* var erlang = new Erlang( 1.0, 1.0 );
*
* var y = erlang.cdf( 0.8 );
* // returns ~0.551
*
* var mode = erlang.mode;
* // returns 0.0
*/
function Erlang() {
	var k;
	var lambda;
	if ( !(this instanceof Erlang) ) {
		if ( arguments.length === 0 ) {
			return new Erlang();
		}
		return new Erlang( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		if ( !isPositiveInteger( k ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `k` must be a positive integer. Value: `' + k + '`' );
		}
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		k = 1.0;
		lambda = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositiveInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
} // end FUNCTION Erlang()

/**
* Erlang distribution differential entropy.
*
* @memberof Erlang.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.entropy;
* // returns ~2.531
*/
Object.defineProperty( Erlang.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k, this.lambda );
	}
});

/**
* Erlang distribution excess kurtosis.
*
* @memberof Erlang.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.kurtosis;
* // returns ~-0.252
*/
Object.defineProperty( Erlang.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k, this.lambda );
	}
});

/**
* Erlang distribution expected value.
*
* @memberof Erlang.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.mean;
* // returns ~10.877
*/
Object.defineProperty( Erlang.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k, this.lambda );
	}
});

/**
* Erlang distribution mode.
*
* @memberof Erlang.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.mode;
* // returns ~11.167
*/
Object.defineProperty( Erlang.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k, this.lambda );
	}
});

/**
* Erlang distribution skewness.
*
* @memberof Erlang.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.skewness;
* // returns ~-0.087
*/
Object.defineProperty( Erlang.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k, this.lambda );
	}
});

/**
* Erlang distribution standard deviation.
*
* @memberof Erlang.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.stdev;
* // returns ~3.051
*/
Object.defineProperty( Erlang.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k, this.lambda );
	}
});

/**
* Erlang distribution variance.
*
* @memberof Erlang.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.variance;
* // returns ~9.311
*/
Object.defineProperty( Erlang.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k, this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Erlang.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.cdf( 0.5 );
* // returns ~0.016
*/
setReadOnly( Erlang.prototype, 'cdf', erlangCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Erlang.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.mgf( 0.5 );
* // returns ~9.878
*/
setReadOnly( Erlang.prototype, 'mgf', erlangMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Erlang.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.pdf( 2.0 );
* // returns ~0.195
*/
setReadOnly( Erlang.prototype, 'pdf', erlangPDF );

/**
* Evaluates the quantile function.
*
* @memberof Erlang.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.quantile( 0.5 );
* // returns ~3.33
*/
setReadOnly( Erlang.prototype, 'quantile', erlangQuantile );


// EXPORTS //

module.exports = Erlang;

},{"@stdlib/assert/is-positive-integer":26,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/erlang/cdf":357,"@stdlib/math/base/dist/erlang/entropy":362,"@stdlib/math/base/dist/erlang/kurtosis":363,"@stdlib/math/base/dist/erlang/mean":366,"@stdlib/math/base/dist/erlang/mgf":369,"@stdlib/math/base/dist/erlang/mode":372,"@stdlib/math/base/dist/erlang/pdf":375,"@stdlib/math/base/dist/erlang/quantile":379,"@stdlib/math/base/dist/erlang/skewness":382,"@stdlib/math/base/dist/erlang/stdev":384,"@stdlib/math/base/dist/erlang/variance":386,"@stdlib/utils/define-read-only-property":1425}],360:[function(require,module,exports){
'use strict';

/**
* Erlang distribution constructor.
*
* @module @stdlib/math/base/dist/erlang/ctor
*
* @example
* var Erlang = require( '@stdlib/math/base/dist/erlang/ctor' );
*
* var erlang = new Erlang( 1, 1.0 );
*
* var y = erlang.cdf( 0.8 );
* // returns ~0.551
*
* var mode = erlang.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":359}],361:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} differential entropy
*
* @example
* var v = entropy( 1, 1.0 );
* // returns ~-0.154
* @example
* var v = entropy( 4, 12.0 );
* // returns ~9.587
* @example
* var v = entropy( 8, 2.0 );
* // returns ~33.973
* @example
* var v = entropy( 1.5, 2.0 );
* // returns NaN
* @example
* var v = entropy( 1, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( ( 1-k ) * digamma( k ) ) + ln( gamma( k ) / lambda ) + k;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-positive-integer":53,"@stdlib/math/base/special/digamma":1245,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/ln":1300}],362:[function(require,module,exports){
'use strict';

/**
* Erlang distribution differential entropy.
*
* @module @stdlib/math/base/dist/erlang/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/erlang/entropy' );
*
* var v = entropy( 1, 1.0 );
* // returns ~-0.154
*
* v = entropy( 4, 12.0 );
* // returns ~9.587
*
* v = entropy( 8, 2.0 );
* // returns ~33.973
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":361}],363:[function(require,module,exports){
'use strict';

/**
* Erlang distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/erlang/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/erlang/kurtosis' );
*
* var v = kurtosis( 1, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4, 12.0 );
* // returns 1.5
*
* v = kurtosis( 8, 2.0 );
* // returns 0.75
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":364}],364:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 1, 1.0 );
* // returns 6.0
* @example
* var v = kurtosis( 4, 12.0 );
* // returns 1.5
* @example
* var v = kurtosis( 8, 2.0 );
* // returns 0.75
* @example
* var v = kurtosis( 1.5, 2.0 );
* // returns NaN
* @example
* var v = kurtosis( 1, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return 6.0 / k;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-positive-integer":53}],365:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace erlang
*/
var erlang = {};

/**
* @name cdf
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/cdf}
*/
setReadOnly( erlang, 'cdf', require( '@stdlib/math/base/dist/erlang/cdf' ) );

/**
* @name entropy
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/entropy}
*/
setReadOnly( erlang, 'entropy', require( '@stdlib/math/base/dist/erlang/entropy' ) );

/**
* @name Erlang
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/ctor}
*/
setReadOnly( erlang, 'Erlang', require( '@stdlib/math/base/dist/erlang/ctor' ) );

/**
* @name kurtosis
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/kurtosis}
*/
setReadOnly( erlang, 'kurtosis', require( '@stdlib/math/base/dist/erlang/kurtosis' ) );

/**
* @name mean
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/mean}
*/
setReadOnly( erlang, 'mean', require( '@stdlib/math/base/dist/erlang/mean' ) );

/**
* @name mgf
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/mgf}
*/
setReadOnly( erlang, 'mgf', require( '@stdlib/math/base/dist/erlang/mgf' ) );

/**
* @name mode
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/mode}
*/
setReadOnly( erlang, 'mode', require( '@stdlib/math/base/dist/erlang/mode' ) );

/**
* @name pdf
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/pdf}
*/
setReadOnly( erlang, 'pdf', require( '@stdlib/math/base/dist/erlang/pdf' ) );

/**
* @name quantile
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/quantile}
*/
setReadOnly( erlang, 'quantile', require( '@stdlib/math/base/dist/erlang/quantile' ) );

/**
* @name skewness
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/skewness}
*/
setReadOnly( erlang, 'skewness', require( '@stdlib/math/base/dist/erlang/skewness' ) );

/**
* @name stdev
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/stdev}
*/
setReadOnly( erlang, 'stdev', require( '@stdlib/math/base/dist/erlang/stdev' ) );

/**
* @name variance
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/erlang/variance}
*/
setReadOnly( erlang, 'variance', require( '@stdlib/math/base/dist/erlang/variance' ) );


// EXPORTS //

module.exports = erlang;

},{"@stdlib/math/base/dist/erlang/cdf":357,"@stdlib/math/base/dist/erlang/ctor":360,"@stdlib/math/base/dist/erlang/entropy":362,"@stdlib/math/base/dist/erlang/kurtosis":363,"@stdlib/math/base/dist/erlang/mean":366,"@stdlib/math/base/dist/erlang/mgf":369,"@stdlib/math/base/dist/erlang/mode":372,"@stdlib/math/base/dist/erlang/pdf":375,"@stdlib/math/base/dist/erlang/quantile":379,"@stdlib/math/base/dist/erlang/skewness":382,"@stdlib/math/base/dist/erlang/stdev":384,"@stdlib/math/base/dist/erlang/variance":386,"@stdlib/utils/define-read-only-property":1425}],366:[function(require,module,exports){
'use strict';

/**
* Erlang distribution expected value.
*
* @module @stdlib/math/base/dist/erlang/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/erlang/mean' );
*
* var v = mean( 1, 1.0 );
* // returns 1.0
*
* v = mean( 4, 12.0 );
* // returns ~0.333
*
* v = mean( 8, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":367}],367:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 1, 1.0 );
* // returns 1.0
* @example
* var v = mean( 4, 12.0 );
* // returns ~0.333
* @example
* var v = mean( 8, 2.0 );
* // returns 4.0
* @example
* var v = mean( 1.5, 2.0 );
* // returns NaN
* @example
* var v = mean( 1, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return k / lambda;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-positive-integer":53}],368:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2, 0.5 );
*
* var y = mgf( 0.2 );
* // returns ~2.778
*
* y = mgf( -0.5 );
* // returns 0.25
*/
function factory( k, lambda ) {
	if (
		!isNonNegativeInteger( k ) ||
		isnan( lambda ) ||
		lambda < 0.0
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for an Erlang distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) || t >= lambda ) {
			return NaN;
		}
		return pow( 1.0 - (t/lambda), -k );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":371,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/pow":1311}],369:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for an Erlang distribution.
*
* @module @stdlib/math/base/dist/erlang/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/erlang/mgf' );
*

* var myMGF = mgf.factory( 2, 0.5 );
*
* y = myMGF( 0.2 );
* // returns ~2.778
*
* y = myMGF( -0.5 );
* // returns 0.25
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":368,"./mgf.js":370,"@stdlib/utils/define-read-only-property":1425}],370:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.3, 1, 1.0 );
* // returns ~1.429
* @example
* var y = mgf( 2.0, 2, 3.0 );
* // returns ~8.999
* @example
* var y = mgf( -1.0, 2, 2.0 );
* // returns ~0.444
* @example
* var y = mgf( NaN, 1, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 1, NaN );
* // returns NaN
* @example
* var y = mgf( 0.2, -2, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.2, 0.5, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.2, 1, 0.0 );
* // returns NaN
* @example
* var y = mgf( 0.2, 1, -5.0 );
* // returns NaN
*/
function mgf( t, k, lambda ) {
	if (
		isnan( t ) ||
		!isNonNegativeInteger( k ) ||
		isnan( lambda )||
		lambda < 0.0 ||
		t >= lambda
	) {
		return NaN;
	}
	return pow( 1.0 - (t/lambda), -k );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/pow":1311}],371:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid Erlang distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],372:[function(require,module,exports){
'use strict';

/**
* Erlang distribution mode.
*
* @module @stdlib/math/base/dist/erlang/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/erlang/mode' );
*
* var v = mode( 1, 1.0 );
* // returns 0.0
*
* v = mode( 4, 12.0 );
* // returns 0.25
*
* v = mode( 8, 2.0 );
* // returns 3.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":373}],373:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1, 1.0 );
* // returns 0.0
* @example
* var v = mode( 4, 12.0 );
* // returns 0.25
* @example
* var v = mode( 8, 2.0 );
* // returns 3.5
* @example
* var v = mode( 1.5, 2.0 );
* // returns NaN
* @example
* var v = mode( 1, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( k - 1 ) / lambda;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-positive-integer":53}],374:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var factoryGamma = require( '@stdlib/math/base/dist/gamma/pdf' ).factory;
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} PDF
*
* @example
* var myPDF = factory( 6.0, 7.0 );
* var y = myPDF( 7.0 );
* // returns ~0.155
*/
function factory( k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return nan;
	}
	return factoryGamma( k, lambda );
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":376,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/gamma/pdf":515}],375:[function(require,module,exports){
'use strict';

/**
* Erlang distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/erlang/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/erlang/pdf' );
*
* var y = pdf( 2.0, , 1.0 );
* // returns ~0.037
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 7.0 );
* // returns ~0.155
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":374,"./pdf.js":377,"@stdlib/utils/define-read-only-property":1425}],376:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Erlang distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],377:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var gammaPDF = require( '@stdlib/math/base/dist/gamma/pdf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.1, 1, 1.0 );
* // returns ~0.904
* @example
* var y = pdf( 0.5, 2, 2.5 );
* // returns 0.895
* @example
* var y = pdf( -1.0, 4, 2.0 );
* // returns 0.0
* @example
* var y = pdf( NaN, 1, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 1, NaN );
* // returns NaN
* @example
* var y = pdf( 2.0, -2, 0.5 );
* // returns NaN
* @example
* var y = pdf( 2.0, 0.5, 0.5 );
* // returns NaN
* @example
* var y = pdf( 2.0, 0.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( 0.0, 0.0, 2.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = pdf( 2.0, 1, 0.0 );
* // returns NaN
* @example
* var y = pdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function pdf( x, k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return NaN;
	}
	return gammaPDF( x, k, lambda );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/gamma/pdf":515}],378:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var factoryGamma = require( '@stdlib/math/base/dist/gamma/quantile' ).factory;
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2, 0.5 );
* var y = quantile( 0.5 );
* // returns ~3.357
*
* y = quantile( 0.8 );
* // returns ~5.989
*/
function factory( k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return nan;
	}
	return factoryGamma( k, lambda );
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":380,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/gamma/quantile":520}],379:[function(require,module,exports){
'use strict';

/**
* Erlang distribution quantile function.
*
* @module @stdlib/math/base/dist/erlang/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/erlang/quantile' );
*
* var y = quantile( 0.8, 1, 1.0 );
* // returns ~1.609
*
* var myQuantile = quantile.factory( 10, 2.0 );
* y = myQuantile( 0.4 );
* // returns ~4.452
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":378,"./quantile.js":381,"@stdlib/utils/define-read-only-property":1425}],380:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Erlang distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],381:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var quantileGamma = require( '@stdlib/math/base/dist/gamma/quantile' );


// MAIN //

/**
* Evaluates the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2, 1.0 );
* // returns ~2.994
* @example
* var y = quantile( 0.5, 4, 2.0 );
* // returns ~1.836
* @example
* var y = quantile( 1.1, 1, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 1, NaN );
* // returns NaN
* @example
* // Non-integer shape parameter:
* var y = quantile( 0.5, 0.5, 1.0 );
* // returns NaN
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1, 1.0 );
* // returns NaN
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1, -1.0 );
* // returns NaN
*/
function quantile( p, k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return NaN;
	}
	return quantileGamma( p, k, lambda );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/gamma/quantile":520}],382:[function(require,module,exports){
'use strict';

/**
* Erlang distribution skewness.
*
* @module @stdlib/math/base/dist/erlang/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/erlang/skewness' );
*
* var v = skewness( 1, 1.0 );
* // returns 2.0
*
* v = skewness( 4, 12.0 );
* // returns 1.0
*
* v = skewness( 8, 2.0 );
* // returns ~0.707
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":383}],383:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 1, 1.0 );
* // returns 2.0
* @example
* var v = skewness( 4, 12.0 );
* // returns 1.0
* @example
* var v = skewness( 8, 2.0 );
* // returns ~0.707
* @example
* var v = skewness( 1.5, 2.0 );
* // returns NaN
* @example
* var v = skewness( 1, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return 2.0 / sqrt( k );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-positive-integer":53,"@stdlib/math/base/special/sqrt":1343}],384:[function(require,module,exports){
'use strict';

/**
* Erlang distribution standard deviation.
*
* @module @stdlib/math/base/dist/erlang/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/erlang/stdev' );
*
* var v = stdev( 1, 1.0 );
* // returns 1.0
*
* v = stdev( 4, 12.0 );
* // returns ~0.167
*
* v = stdev( 8, 2.0 );
* // returns ~1.414
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":385}],385:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 1, 1.0 );
* // returns 1.0
* @example
* var v = stdev( 4, 12.0 );
* // returns ~0.167
* @example
* var v = stdev( 8, 2.0 );
* // returns ~1.414
* @example
* var v = stdev( 1.5, 2.0 );
* // returns NaN
* @example
* var v = stdev( 1, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return sqrt( k ) / lambda;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-positive-integer":53,"@stdlib/math/base/special/sqrt":1343}],386:[function(require,module,exports){
'use strict';

/**
* Erlang distribution variance.
*
* @module @stdlib/math/base/dist/erlang/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/erlang/variance' );
*
* var v = variance( 1, 1.0 );
* // returns 1.0
*
* v = variance( 4, 12.0 );
* // returns ~0.028
*
* v = variance( 8, 2.0 );
* // returns 2.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":387}],387:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 1, 1.0 );
* // returns 1.0
* @example
* var v = variance( 4, 12.0 );
* // returns ~0.028
* @example
* var v = variance( 8, 2.0 );
* // returns 2.0
* @example
* var v = variance( 1.5, 2.0 );
* // returns NaN
* @example
* var v = variance( 1, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return k / ( lambda*lambda );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-positive-integer":53}],388:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.181
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.865
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative rate parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, lambda ) {
	if (
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	return 1.0 - exp( -lambda * x );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/constants/float64-pinf":1414}],389:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.777
*
* y = cdf( 1.0 );
* // returns ~0.393
*/
function factory( lambda ) {
	if (
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( x < 0.0 ) {
			return 0.0;
		}
		return 1.0 - exp( -lambda * x );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":391,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/constants/float64-pinf":1414}],390:[function(require,module,exports){
'use strict';

/**
* Exponential distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/exponential/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/exponential/cdf' );
*
* var y = cdf( 2.0, 0.1 );
* // returns ~0.181
*
* var myCDF = cdf.factory( 0.5 );
* y = myCDF( 3.0 );
* // returns ~0.777
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":388,"./factory.js":389,"@stdlib/utils/define-read-only-property":1425}],391:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid exponential distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 2.1 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],392:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/exponential/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/exponential/kurtosis' );
var mean = require( '@stdlib/math/base/dist/exponential/mean' );
var median = require( '@stdlib/math/base/dist/exponential/median' );
var mode = require( '@stdlib/math/base/dist/exponential/mode' );
var skewness = require( '@stdlib/math/base/dist/exponential/skewness' );
var stdev = require( '@stdlib/math/base/dist/exponential/stdev' );
var variance = require( '@stdlib/math/base/dist/exponential/variance' );
var cdf = require( '@stdlib/math/base/dist/exponential/cdf' );
var mgf = require( '@stdlib/math/base/dist/exponential/mgf' );
var pdf = require( '@stdlib/math/base/dist/exponential/pdf' );
var quantile = require( '@stdlib/math/base/dist/exponential/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function exponentialCDF( x ) {
	return cdf( x, this.lambda );
} // end FUNCTION exponentialCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function exponentialMGF( t ) {
	return mgf( t, this.lambda );
} // end FUNCTION exponentialMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function exponentialPDF( x ) {
	return pdf( x, this.lambda );
} // end FUNCTION exponentialPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function exponentialQuantile( p ) {
	return quantile( p, this.lambda );
} // end FUNCTION exponentialQuantile()


// MAIN //

/**
* Exponential distribution constructor.
*
* @constructor
* @param {PositiveNumber} [lambda=1.0] - rate parameter
* @throws {TypeError} `lambda` must be a positive number
* @returns {Exponential} distribution instance
*
* @example
* var exponential = new Exponential( 1.0 );
*
* var y = exponential.cdf( 0.8 );
* // returns ~0.551
*
* var mode = exponential.mode;
* // returns 0.0
*/
function Exponential() {
	var lambda;
	if ( !(this instanceof Exponential) ) {
		if ( arguments.length === 0 ) {
			return new Exponential();
		}
		return new Exponential( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		lambda = arguments[ 0 ];
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		lambda = 1.0;
	}
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
} // end FUNCTION Exponential()

/**
* Exponential distribution differential entropy.
*
* @memberof Exponential.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.entropy;
* // returns ~-0.386
*/
Object.defineProperty( Exponential.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.lambda );
	}
});

/**
* Exponential distribution excess kurtosis.
*
* @memberof Exponential.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.kurtosis;
* // returns 6.0
*/
Object.defineProperty( Exponential.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.lambda );
	}
});

/**
* Exponential distribution expected value.
*
* @memberof Exponential.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.mean;
* // returns 0.25
*/
Object.defineProperty( Exponential.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.lambda );
	}
});

/**
* Exponential distribution median.
*
* @memberof Exponential.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.median;
* // returns ~0.173
*/
Object.defineProperty( Exponential.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.lambda );
	}
});

/**
* Exponential distribution mode.
*
* @memberof Exponential.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.mode;
* // returns 0.0
*/
Object.defineProperty( Exponential.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.lambda );
	}
});

/**
* Exponential distribution skewness.
*
* @memberof Exponential.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.skewness;
* // returns 2.0
*/
Object.defineProperty( Exponential.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.lambda );
	}
});

/**
* Exponential distribution standard deviation.
*
* @memberof Exponential.prototype
* @name stdev
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.stdev;
* // returns ~0.251
*/
Object.defineProperty( Exponential.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.lambda );
	}
});

/**
* Exponential distribution variance.
*
* @memberof Exponential.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.variance;
* // returns ~0.063
*/
Object.defineProperty( Exponential.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Exponential.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.cdf( 0.5 );
* // returns ~0.632
*/
setReadOnly( Exponential.prototype, 'cdf', exponentialCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Exponential.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.mgf( 0.5 );
* // returns ~1.333
*/
setReadOnly( Exponential.prototype, 'mgf', exponentialMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Exponential.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.pdf( 0.8 );
* // returns ~0.404
*/
setReadOnly( Exponential.prototype, 'pdf', exponentialPDF );

/**
* Evaluates the quantile function.
*
* @memberof Exponential.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.quantile( 0.5 );
* // returns ~3.347
*/
setReadOnly( Exponential.prototype, 'quantile', exponentialQuantile );


// EXPORTS //

module.exports = Exponential;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/exponential/cdf":390,"@stdlib/math/base/dist/exponential/entropy":395,"@stdlib/math/base/dist/exponential/kurtosis":396,"@stdlib/math/base/dist/exponential/mean":399,"@stdlib/math/base/dist/exponential/median":401,"@stdlib/math/base/dist/exponential/mgf":404,"@stdlib/math/base/dist/exponential/mode":407,"@stdlib/math/base/dist/exponential/pdf":410,"@stdlib/math/base/dist/exponential/quantile":414,"@stdlib/math/base/dist/exponential/skewness":417,"@stdlib/math/base/dist/exponential/stdev":419,"@stdlib/math/base/dist/exponential/variance":421,"@stdlib/utils/define-read-only-property":1425}],393:[function(require,module,exports){
'use strict';

/**
* Exponential distribution constructor.
*
* @module @stdlib/math/base/dist/exponential/ctor
*
* @example
* var Exponential = require( '@stdlib/math/base/dist/exponential/ctor' );
*
* var exponential = new Exponential( 1.0 );
*
* var y = exponential.cdf( 0.8 );
* // returns ~0.551
*
* var mode = exponential.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":392}],394:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the entropy of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~-1.197
* @example
* var v = entropy( 1.0 );
* // returns 1.0
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 - ln( lambda );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300}],395:[function(require,module,exports){
'use strict';

/**
* Exponential distribution differential entropy.
*
* @module @stdlib/math/base/dist/exponential/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/exponential/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~-1.398
*
* v = entropy( 4.5 );
* // returns ~-0.504
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":394}],396:[function(require,module,exports){
'use strict';

/**
* Exponential distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/exponential/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/exponential/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns 6.0
*
* v = kurtosis( 4.5 );
* // returns 6.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":397}],397:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns 6.0
* @example
* var v = kurtosis( 1.0 );
* // returns 6.0
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 6.0;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],398:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace exponential
*/
var exponential = {};

/**
* @name cdf
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/cdf}
*/
setReadOnly( exponential, 'cdf', require( '@stdlib/math/base/dist/exponential/cdf' ) );

/**
* @name entropy
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/entropy}
*/
setReadOnly( exponential, 'entropy', require( '@stdlib/math/base/dist/exponential/entropy' ) );

/**
* @name Exponential
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/ctor}
*/
setReadOnly( exponential, 'Exponential', require( '@stdlib/math/base/dist/exponential/ctor' ) );

/**
* @name kurtosis
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/kurtosis}
*/
setReadOnly( exponential, 'kurtosis', require( '@stdlib/math/base/dist/exponential/kurtosis' ) );

/**
* @name mean
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/mean}
*/
setReadOnly( exponential, 'mean', require( '@stdlib/math/base/dist/exponential/mean' ) );

/**
* @name median
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/median}
*/
setReadOnly( exponential, 'median', require( '@stdlib/math/base/dist/exponential/median' ) );

/**
* @name mgf
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/mgf}
*/
setReadOnly( exponential, 'mgf', require( '@stdlib/math/base/dist/exponential/mgf' ) );

/**
* @name mode
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/mode}
*/
setReadOnly( exponential, 'mode', require( '@stdlib/math/base/dist/exponential/mode' ) );

/**
* @name pdf
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/pdf}
*/
setReadOnly( exponential, 'pdf', require( '@stdlib/math/base/dist/exponential/pdf' ) );

/**
* @name quantile
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/quantile}
*/
setReadOnly( exponential, 'quantile', require( '@stdlib/math/base/dist/exponential/quantile' ) );

/**
* @name skewness
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/skewness}
*/
setReadOnly( exponential, 'skewness', require( '@stdlib/math/base/dist/exponential/skewness' ) );

/**
* @name stdev
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/stdev}
*/
setReadOnly( exponential, 'stdev', require( '@stdlib/math/base/dist/exponential/stdev' ) );

/**
* @name variance
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/exponential/variance}
*/
setReadOnly( exponential, 'variance', require( '@stdlib/math/base/dist/exponential/variance' ) );


// EXPORTS //

module.exports = exponential;

},{"@stdlib/math/base/dist/exponential/cdf":390,"@stdlib/math/base/dist/exponential/ctor":393,"@stdlib/math/base/dist/exponential/entropy":395,"@stdlib/math/base/dist/exponential/kurtosis":396,"@stdlib/math/base/dist/exponential/mean":399,"@stdlib/math/base/dist/exponential/median":401,"@stdlib/math/base/dist/exponential/mgf":404,"@stdlib/math/base/dist/exponential/mode":407,"@stdlib/math/base/dist/exponential/pdf":410,"@stdlib/math/base/dist/exponential/quantile":414,"@stdlib/math/base/dist/exponential/skewness":417,"@stdlib/math/base/dist/exponential/stdev":419,"@stdlib/math/base/dist/exponential/variance":421,"@stdlib/utils/define-read-only-property":1425}],399:[function(require,module,exports){
'use strict';

/**
* Exponential distribution expected value.
*
* @module @stdlib/math/base/dist/exponential/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/exponential/mean' );
*
* var v = mean( 11.0 );
* // returns ~0.091
*
* v = mean( 4.5 );
* // returns ~0.222
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":400}],400:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~0.111
* @example
* var v = mean( 1.0 );
* // returns 1.0
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],401:[function(require,module,exports){
'use strict';

/**
* Exponential distribution median.
*
* @module @stdlib/math/base/dist/exponential/median
*
* @example
* var median = require( '@stdlib/math/base/dist/exponential/median' );
*
* var v = median( 11.0 );
* // returns ~0.063
*
* v = median( 4.5 );
* // returns ~0.154
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":402}],402:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var LN2 = require( '@stdlib/math/constants/float64-ln-two' );


// MAIN //

/**
* Returns the median of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns ~0.077
* @example
* var v = median( 1.0 );
* // returns ~0.693
* @example
* var v = median( -0.2 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return ( 1.0 / lambda ) * LN2;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-ln-two":1403}],403:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0 );
* var y = mgf( 3.0 );
* // returns 4.0
*
* y = mgf( 0.5 );
* // returns ~1.143
*/
function factory( lambda ) {
	if (
		isnan( lambda ) ||
		lambda <= 0.0 ||
		lambda === PINF
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for an exponential distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) || t >= lambda ) {
			return NaN;
		}
		return lambda / ( lambda - t );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":406,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],404:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for an exponential distribution.
*
* @module @stdlib/math/base/dist/exponential/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/exponential/mgf' );
*
* var v = mgf( 2.0, 3.0 );
* // returns 3.0
*
* var mymgf = mgf.factory( 4.0 );
* v = mymgf( 3.0 );
* // returns 4.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":403,"./mgf.js":405,"@stdlib/utils/define-read-only-property":1425}],405:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for an exponential distribution with rate parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var v = mgf( 2.0, 3.0 )
* // returns 3.0
* @example
* var v = mgf( 0.4, 1.2 )
* // returns 1.5
* @example
* var v = mgf( 0.8, 1.6 )
* // returns 2.0
* @example
* var v = mgf( 4.0, 3.0 )
* // returns NaN
* @example
* var v = mgf( NaN, 3.0 )
* // returns NaN
* @example
* var v = mgf( 2.0, NaN )
* // returns NaN
*/
function mgf( t, lambda ) {
	if (
		isnan( t ) ||
		isnan( lambda ) ||
		lambda <= 0.0 ||
		lambda === PINF ||
		t >= lambda
	) {
		return NaN;
	}
	return lambda / ( lambda - t );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],406:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid exponential distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],407:[function(require,module,exports){
'use strict';

/**
* Exponential distribution mode.
*
* @module @stdlib/math/base/dist/exponential/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/exponential/mode' );
*
* var v = mode( 11.0 );
* // returns 0.0
*
* v = mode( 4.5 );
* // returns 0.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":408}],408:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 0.0
* @example
* var v = mode( 1.0 );
* // returns 0.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],409:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an exponential distribution with parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} probability density function (PDF)
*
* @example
* var pdf = factory( 0.5 );
* var y = pdf( 3.0 );
* // returns ~0.112
*
* y = pdf( 1.0 );
* // returns ~0.303
*/
function factory( lambda ) {
	var scale;
	if ( isnan( lambda ) || lambda < 0.0 || lambda === PINF ) {
		return nan;
	}
	scale = 1.0 / lambda;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return exp( -x / scale ) / scale;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":411,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/constants/float64-pinf":1414}],410:[function(require,module,exports){
'use strict';

/**
* Exponential distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/exponential/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/exponential/pdf' );
*
* var y = pdf( 0.3, 4.0 );
* // returns ~1.205
*
* var myPDF = pdf.factory( 0.5 );
*
* y = myPDF( 3.0 );
* // returns ~0.112
*
* y = myPDF( 1.0 );
* // returns ~0.303
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":409,"./pdf.js":412,"@stdlib/utils/define-read-only-property":1425}],411:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid exponential distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],412:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~1.205
* @example
* var y = pdf( 2.0, 0.7 );
* // returns ~0.173
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
* @example
* var y = pdf( 0, NaN );
* // returns NaN
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
* @example
* // Negative rate:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, lambda ) {
	var scale;
	if (
		isnan( x ) ||
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	scale = 1.0 / lambda;
	return exp( -x / scale ) / scale;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/constants/float64-pinf":1414}],413:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns ~1.277
*
* y = quantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( lambda ) {
	if ( lambda < 0.0 || lambda === PINF || isnan( lambda ) ) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for an exponential distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return -ln( 1.0 - p ) / lambda;
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":415,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-pinf":1414}],414:[function(require,module,exports){
'use strict';

/**
* Exponential distribution quantile function.
*
* @module @stdlib/math/base/dist/exponential/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/exponential/quantile' );
*
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
*
* var myQuantile = quantile.factory( 0.4 );
*
* y = myQuantile( 0.4 );
* // returns ~1.277
*
* y = myQuantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":413,"./quantile.js":416,"@stdlib/utils/define-read-only-property":1425}],415:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid exponential distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],416:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the quantile function for an exponential distribution with rate parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.609
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
* @example
* var y = quantile( 0.5, 0.1 );
* // returns ~6.931
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* // Negative rate parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, lambda ) {
	if (
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return -ln( 1.0 - p ) / lambda;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-pinf":1414}],417:[function(require,module,exports){
'use strict';

/**
* Exponential distribution skewness.
*
* @module @stdlib/math/base/dist/exponential/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/exponential/skewness' );
*
* var v = skewness( 11.0 );
* // returns 2.0
*
* v = skewness( 4.5 );
* // returns 2.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":418}],418:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns 2.0
* @example
* var v = skewness( 1.0 );
* // returns 2.0
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 2.0;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43}],419:[function(require,module,exports){
'use strict';

/**
* Exponential distribution standard deviation.
*
* @module @stdlib/math/base/dist/exponential/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/exponential/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~0.089
*
* v = stdev( 4.5 );
* // returns ~0.221
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":420}],420:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the standard deviation of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~0.11
* @example
* var v = stdev( 1.0 );
* // returns 1.0
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43}],421:[function(require,module,exports){
'use strict';

/**
* Exponential distribution variance.
*
* @module @stdlib/math/base/dist/exponential/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/exponential/variance' );
*
* var v = variance( 11.0 );
* // returns ~0.008
*
* v = variance( 4.5 );
* // returns ~0.049
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":422}],422:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~0.012
* @example
* var v = variance( 1.0 );
* // returns 1.0
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / ( lambda*lambda );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],423:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.608
* @example
* var y = cdf( 2.0, 8.0, 4.0 );
* // returns ~0.737
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*/
function cdf( x, d1, d2 ) {
	if (
		isnan( x ) ||
		isnan( d1 ) ||
		isnan( d2 )
	) {
		return NaN;
	}
	if ( d1 <= 0.0 || d2 <= 0.0 ) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	if ( d1 * x > d2 ) {
		return betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2 /2.0, true, false );
	}
	return betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/constants/float64-pinf":1414}],424:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.906
*
* y = cdf( 8.0 );
* // returns ~0.884
*/
function factory( d1, d2 ) {
	if ( isnan( d1 ) || isnan( d2 ) ) {
		return nan;
	}
	if ( d1 <= 0.0 || d2 <= 0.0 ) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		if ( d1 * x > d2 ) {
			return betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2/2.0, true, false );
		}
		return betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":426,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/constants/float64-pinf":1414}],425:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for a F distribution.
*
* @module @stdlib/math/base/dist/f/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/f/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.608
*
* y = cdf( 2.0, 8.0, 4.0 );
* // returns ~0.737
*
* y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 10.0, 2.0 );
*
* y = mycdf( 10.0 );
* // returns ~0.906
*
* y = mycdf( 8.0 );
* // returns ~0.884
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":423,"./factory.js":424,"@stdlib/utils/define-read-only-property":1425}],426:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid F distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],427:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/f/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/f/kurtosis' );
var mean = require( '@stdlib/math/base/dist/f/mean' );
var mode = require( '@stdlib/math/base/dist/f/mode' );
var skewness = require( '@stdlib/math/base/dist/f/skewness' );
var stdev = require( '@stdlib/math/base/dist/f/stdev' );
var variance = require( '@stdlib/math/base/dist/f/variance' );
var cdf = require( '@stdlib/math/base/dist/f/cdf' );
var pdf = require( '@stdlib/math/base/dist/f/pdf' );
var quantile = require( '@stdlib/math/base/dist/f/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function fCDF( x ) {
	return cdf( x, this.d1, this.d2 );
} // end FUNCTION fCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function fPDF( x ) {
	return pdf( x, this.d1, this.d2 );
} // end FUNCTION fPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function fQuantile( p ) {
	return quantile( p, this.d1, this.d2 );
} // end FUNCTION fQuantile()


// MAIN //

/**
* F distribution constructor.
*
* @constructor
* @param {PositiveNumber} [d1=1.0] - numerator degrees of freedom
* @param {PositiveNumber} [d2=1.0] - denominator degrees of freedom
* @throws {TypeError} `d1` must be a positive number
* @throws {TypeError} `d2` must be a positive number
* @returns {F} distribution instance
*
* @example
* var f = new F( 1.0, 1.0 );
*
* var y = f.cdf( 0.8 );
* // returns ~0.465
*
* var mode = f.mode;
* // returns NaN
*/
function F() {
	var d1;
	var d2;
	if ( !(this instanceof F) ) {
		if ( arguments.length === 0 ) {
			return new F();
		}
		return new F( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		d1 = arguments[ 0 ];
		d2 = arguments[ 1 ];
		if ( !isPositive( d1 ) ) {
			throw new TypeError( 'invalid input argument. Numerator degrees of freedom `d1` must be a positive number. Value: `' + d1 + '`' );
		}
		if ( !isPositive( d2 ) ) {
			throw new TypeError( 'invalid input argument. Denominator degrees of freedom `d2` must be a positive number. Value: `' + d2 + '`' );
		}
	} else {
		d1 = 1.0;
		d2 = 1.0;
	}
	Object.defineProperty( this, 'd1', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return d1;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			d1 = value;
		}
	});
	Object.defineProperty( this, 'd2', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return d2;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			d2 = value;
		}
	});
	return this;
} // end FUNCTION F()

/**
* F distribution differential entropy.
*
* @memberof F.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.entropy;
* // returns ~1.12
*/
Object.defineProperty( F.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.d1, this.d2 );
	}
});

/**
* F distribution excess kurtosis.
*
* @memberof F.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.kurtosis;
* // returns ~26.143
*/
Object.defineProperty( F.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.d1, this.d2 );
	}
});

/**
* F distribution expected value.
*
* @memberof F.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.mean;
* // returns 1.2
*/
Object.defineProperty( F.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.d1, this.d2 );
	}
});

/**
* F distribution mode.
*
* @memberof F.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.mode;
* // returns ~0.429
*/
Object.defineProperty( F.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.d1, this.d2 );
	}
});

/**
* F distribution skewness.
*
* @memberof F.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.skewness;
* // returns ~3.207
*/
Object.defineProperty( F.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.d1, this.d2 );
	}
});

/**
* F distribution standard deviation.
*
* @memberof F.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.stdev;
* // returns ~1.122
*/
Object.defineProperty( F.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.d1, this.d2 );
	}
});

/**
* F distribution variance.
*
* @memberof F.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.variance;
* // returns 1.26
*/
Object.defineProperty( F.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.d1, this.d2 );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof F.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.cdf( 0.5 );
* // returns ~0.36
*/
setReadOnly( F.prototype, 'cdf', fCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof F.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.pdf( 2.0 );
* // returns ~0.125
*/
setReadOnly( F.prototype, 'pdf', fPDF );

/**
* Evaluates the quantile function.
*
* @memberof F.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.quantile( 0.5 );
* // returns ~0.828
*/
setReadOnly( F.prototype, 'quantile', fQuantile );


// EXPORTS //

module.exports = F;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/f/cdf":425,"@stdlib/math/base/dist/f/entropy":430,"@stdlib/math/base/dist/f/kurtosis":431,"@stdlib/math/base/dist/f/mean":434,"@stdlib/math/base/dist/f/mode":436,"@stdlib/math/base/dist/f/pdf":440,"@stdlib/math/base/dist/f/quantile":444,"@stdlib/math/base/dist/f/skewness":447,"@stdlib/math/base/dist/f/stdev":449,"@stdlib/math/base/dist/f/variance":451,"@stdlib/utils/define-read-only-property":1425}],428:[function(require,module,exports){
'use strict';

/**
* F distribution constructor.
*
* @module @stdlib/math/base/dist/f/ctor
*
* @example
* var F = require( '@stdlib/math/base/dist/f/ctor' );
*
* var f = new F( 1.0, 1.0 );
*
* var y = f.cdf( 0.8 );
* // returns ~0.465
*
* var mode = f.mode;
* // returns NaN
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":427}],429:[function(require,module,exports){
'use strict';

// MODULES //

var digamma = require( '@stdlib/math/base/special/digamma' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 3.0, 7.0 );
* // returns ~1.298
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.12
* @example
* var v = entropy( 8.0, 7.0 );
* // returns ~1.193
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( d1, d2 ) {
	var half;
	var hd1;
	var hd2;
	var out;

	if (
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return NaN;
	}
	half = ( d1 + d2 ) / 2.0;
	hd1 = d1 / 2.0;
	hd2 = d2 / 2.0;
	out = ln( d2 / d1 ) + gammaln( hd1 ) + gammaln( hd2 ) - gammaln( half );
	out += ( 1.0-hd1 ) * digamma( hd1 );
	out += ( -1.0-hd2 ) * digamma( hd2 );
	out += half * digamma( half );
	return out;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/digamma":1245,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300}],430:[function(require,module,exports){
'use strict';

/**
* F distribution differential entropy.
*
* @module @stdlib/math/base/dist/f/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/f/entropy' );
*
* var v = entropy( 3.0, 7.0 );
* // returns ~1.298
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.12
*
* v = entropy( 8.0, 7.0 );
* // returns ~1.193
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":429}],431:[function(require,module,exports){
'use strict';

/**
* F distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/f/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/f/kurtosis' );
*
* var v = kurtosis( 3.0, 9.0 );
* // returns ~124.667
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~26.143
*
* v = kurtosis( 8.0, 9.0 );
* // returns ~100.167
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":432}],432:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the excess kurtosis of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 3.0, 9.0 );
* // returns ~124.667
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~26.143
* @example
* var v = kurtosis( 8.0, 9.0 );
* // returns ~100.167
* @example
* var v = kurtosis( 1.0, 8.0 );
* // returns NaN
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( d1, d2 ) {
	var denom;
	var num;

	if ( d1 <= 0.0 || d2 <= 8.0 ) {
		return NaN;
	}
	num = ( d1 * ( ( 5.0*d2 ) - 22.0 ) * ( d1+d2-2.0 ) ) +
		( ( d2-4.0 ) * pow( d2-2.0, 2.0 ) );
	denom = d1 * ( d2-6.0 ) * ( d2-8.0 ) * ( d1+d2-2.0 );
	return 12.0 * num / denom;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/special/pow":1311}],433:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace f
*/
var f = {};

/**
* @name cdf
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/cdf}
*/
setReadOnly( f, 'cdf', require( '@stdlib/math/base/dist/f/cdf' ) );

/**
* @name entropy
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/entropy}
*/
setReadOnly( f, 'entropy', require( '@stdlib/math/base/dist/f/entropy' ) );

/**
* @name F
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/ctor}
*/
setReadOnly( f, 'F', require( '@stdlib/math/base/dist/f/ctor' ) );

/**
* @name kurtosis
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/kurtosis}
*/
setReadOnly( f, 'kurtosis', require( '@stdlib/math/base/dist/f/kurtosis' ) );

/**
* @name mean
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/mean}
*/
setReadOnly( f, 'mean', require( '@stdlib/math/base/dist/f/mean' ) );

/**
* @name mode
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/mode}
*/
setReadOnly( f, 'mode', require( '@stdlib/math/base/dist/f/mode' ) );

/**
* @name pdf
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/pdf}
*/
setReadOnly( f, 'pdf', require( '@stdlib/math/base/dist/f/pdf' ) );

/**
* @name quantile
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/quantile}
*/
setReadOnly( f, 'quantile', require( '@stdlib/math/base/dist/f/quantile' ) );

/**
* @name skewness
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/skewness}
*/
setReadOnly( f, 'skewness', require( '@stdlib/math/base/dist/f/skewness' ) );

/**
* @name stdev
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/stdev}
*/
setReadOnly( f, 'stdev', require( '@stdlib/math/base/dist/f/stdev' ) );

/**
* @name variance
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/f/variance}
*/
setReadOnly( f, 'variance', require( '@stdlib/math/base/dist/f/variance' ) );


// EXPORTS //

module.exports = f;

},{"@stdlib/math/base/dist/f/cdf":425,"@stdlib/math/base/dist/f/ctor":428,"@stdlib/math/base/dist/f/entropy":430,"@stdlib/math/base/dist/f/kurtosis":431,"@stdlib/math/base/dist/f/mean":434,"@stdlib/math/base/dist/f/mode":436,"@stdlib/math/base/dist/f/pdf":440,"@stdlib/math/base/dist/f/quantile":444,"@stdlib/math/base/dist/f/skewness":447,"@stdlib/math/base/dist/f/stdev":449,"@stdlib/math/base/dist/f/variance":451,"@stdlib/utils/define-read-only-property":1425}],434:[function(require,module,exports){
'use strict';

/**
* F distribution expected value.
*
* @module @stdlib/math/base/dist/f/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/f/mean' );
*
* var v = mean( 3.0, 5.0 );
* // returns ~1.667
*
* v = mean( 4.0, 12.0 );
* // returns ~1.2
*
* v = mean( 8.0, 4.0 );
* // returns 2.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":435}],435:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 3.0, 5.0 );
* // returns ~1.667
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~1.2
* @example
* var v = mean( 8.0, 4.0 );
* // returns 2.0
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN~1.2
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( d1, d2 ) {
	if (
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 2.0
	) {
		return NaN;
	}
	return d2 / ( d2 - 2.0 );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],436:[function(require,module,exports){
'use strict';

/**
* F distribution mode.
*
* @module @stdlib/math/base/dist/f/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/f/mode' );
*
* var v = mode( 3.0, 5.0 );
* // returns ~0.238
*
* v = mode( 4.0, 12.0 );
* // returns ~0.429
*
* v = mode( 8.0, 4.0 );
* // returns 0.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":437}],437:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 3.0, 5.0 );
* // returns ~0.238
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.429
* @example
* var v = mode( 8.0, 4.0 );
* // returns 0.5
* @example
* var v = mode( 3.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 3.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( d1, d2 ) {
	if ( d1 <= 2.0 || d2 <= 0.0 ) {
		return NaN;
	}
	return ( ( d1-2.0 ) / d1 ) * ( d2 / ( d2+2.0 ) );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{}],438:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var ibetaDerivative = require( './ibeta_derivative.js' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 6.0, 7.0 );
* var y = pdf( 7.0 );
* // returns ~0.004
*
* y = pdf( 2.0 );
* // returns ~0.166
*/
function factory( d1, d2 ) {
	var d1d2;
	var d1by2;
	var d2by2;
	var zeroVal;
	if ( isnan( d1 ) || isnan( d2 ) ) {
		return nan;
	}
	if ( d1 <= 0.0 || d2 <= 0.0 ) {
		return nan;
	}
	d1d2 = d1 * d2;
	d1by2 = d1 / 2.0;
	d2by2 = d2 / 2.0;
	zeroVal = 0.0;
	if ( d1 < 2.0 ) {
		zeroVal = PINF;
	}
	else if ( d1 === 2.0 ) {
		zeroVal = 1.0;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var v1x;
		var y;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return 0.0;
		}
		if ( x === 0.0 ) {
			return zeroVal;
		}
		v1x = d1 * x;
		if ( v1x > d2 ) {
			y = d1d2 / ( ( d2 + v1x ) * ( d2 + v1x ) );
			return y * ibetaDerivative( d2 / ( d2 + v1x ), d2by2, d1by2 );
		}
		z = d2 + v1x;
		y = ((z * d1) - (x * d1 * d1)) / ( z * z );
		return y * ibetaDerivative( d1 * x / ( d2 + v1x ), d1by2, d2by2 );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./ibeta_derivative.js":439,"./nan.js":441,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],439:[function(require,module,exports){
'use strict';

// MODULES //

var ibetaPowerTerms = require( '@stdlib/math/base/special/betainc/lib/ibeta_power_terms.js' );


// MAIN //

/**
* Computes the partial derivative with respect to x of the incomplete beta function.
*
* @private
* @param {Probability} x - input value (not equal to 0.0 or 1.0)
* @param {PositiveNumber} a - first parameter
* @param {PositiveNumber} b - second parameter
* @returns {number} value of the partial derivative
*/
function ibetaDerivative( x, a, b ) {
	var f1;
	var y;

	f1 = ibetaPowerTerms( a, b, x, 1.0 - x, true );
	y = ( 1.0 - x ) * x;
	f1 /= y;
	return f1;
} // end FUNCTION ibetaDerivative()


// EXPORTS //

module.exports = ibetaDerivative;

},{"@stdlib/math/base/special/betainc/lib/ibeta_power_terms.js":1201}],440:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for a F distribution.
*
* @module @stdlib/math/base/dist/f/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/f/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.057
*
* y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.915
*
* var mypdf = pdf.factory( 6.0, 7.0 );
* y = mypdf( 7.0 );
* // returns ~0.004
*
* y = mypdf( 2.0 );
* // returns ~0.166
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":438,"./pdf.js":442,"@stdlib/utils/define-read-only-property":1425}],441:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function for an invalid F distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 0.3 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],442:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var ibetaDerivative = require( './ibeta_derivative.js' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.057
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.915
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
* @example
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
*/
function pdf( x, d1, d2 ) {
	var v1x;
	var y;
	var z;
	if (
		isnan( x ) ||
		isnan( d1 ) ||
		isnan( d2 )
	) {
		return NaN;
	}
	if ( d1 <= 0.0 || d2 <= 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 || x === PINF ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		if ( d1 < 2.0 ) {
			return PINF;
		}
		else if ( d1 === 2.0 ) {
			return 1.0;
		}
		return 0.0;
	}
	v1x = d1 * x;
	if ( v1x > d2 ) {
		y = ( d2 * d1 ) / ( ( d2 + v1x ) * ( d2 + v1x ) );
		return y * ibetaDerivative( d2 / ( d2+v1x ), d2/2.0, d1/2.0 );
	}
	z = d2 + v1x;
	y = ((z * d1) - (x * d1 * d1)) / ( z * z );
	return y * ibetaDerivative( v1x / ( d2+v1x ), d1/2.0, d2/2.0 );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"./ibeta_derivative.js":439,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],443:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.4 );
* // returns ~0.994
*
* y = quantile( 0.8 );
* // returns ~4.382
*/
function factory( d1, d2 ) {
	if ( isnan( d1 ) || isnan( d2 ) ) {
		return nan;
	}
	if ( d1 <= 0.0 || d2 <= 0.0 ) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a F distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var xs;
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		xs = betaincinv( d1/2.0, d2/2.0, p, 1.0 - p );
		return d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":445,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp":1210}],444:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for a F distribution.
*
* @module @stdlib/math/base/dist/f/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/f/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~9.472
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.207
*
* var myquantile = quantile.factory( 10.0, 2.0 );
*
* y = myquantile( 0.2 );
* // returns ~0.527
*
* y = myquantile( 0.8 );
* // returns ~4.382
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":443,"./quantile.js":446,"@stdlib/utils/define-read-only-property":1425}],445:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid F distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],446:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~9.472
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.207
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, d1, d2 ) {
	var xs;
	if (
		isnan( p ) ||
		isnan( d1 ) ||
		isnan( d2 )
	) {
		return NaN;
	}
	if ( d1 <= 0.0 || d2 <= 0.0 ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	xs = betaincinv( d1/2.0, d2/2.0, p, 1.0 - p );
	return d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp":1210}],447:[function(require,module,exports){
'use strict';

/**
* F distribution skewness.
*
* @module @stdlib/math/base/dist/f/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/f/skewness' );
*
* var v = skewness( 3.0, 7.0 );
* // returns 11.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~3.207
*
* v = skewness( 8.0, 7.0 );
* // returns ~10.088
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":448}],448:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 3.0, 7.0 );
* // returns 11.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~3.207
* @example
* var v = skewness( 8.0, 7.0 );
* // returns ~10.088
* @example
* var v = skewness( 1.0, 4.0 );
* // returns NaN
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 6.0 ) {
		return NaN;
	}
	out = ( ( 2.0*d1 ) + d2 - 2.0 ) * sqrt( 8.0 * ( d2-4.0 ) );
	out /= ( d2-6.0 ) * sqrt( d1 * ( d1+d2-2.0 ) );
	return out;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/special/sqrt":1343}],449:[function(require,module,exports){
'use strict';

/**
* F distribution standard deviation.
*
* @module @stdlib/math/base/dist/f/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/f/stdev' );
*
* var v = stdev( 3.0, 5.0 );
* // returns ~3.333
*
* v = stdev( 4.0, 12.0 );
* // returns ~1.122
*
* v = stdev( 8.0, 5.0 );
* // returns ~2.764
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":450}],450:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );


// MAIN //

/**
* Returns the standard deviation of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 3.0, 5.0 );
* // returns ~3.333
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~1.122
* @example
* var v = stdev( 8.0, 5.0 );
* // returns ~2.764
* @example
* var v = stdev( 1.0, 4.0 );
* // returns NaN
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 4.0 ) {
		return NaN;
	}
	out = SQRT2 * ( d2 / ( d2-2.0 ) );
	out *= sqrt( ( d1+d2-2.0 ) / ( d1*(d2-4.0) ) );
	return out;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-sqrt-two":1421}],451:[function(require,module,exports){
'use strict';

/**
* F distribution variance.
*
* @module @stdlib/math/base/dist/f/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/f/variance' );
*
* var v = variance( 3.0, 5.0 );
* // returns ~11.111
*
* v = variance( 4.0, 12.0 );
* // returns ~1.26
*
* v = variance( 8.0, 5.0 );
* // returns ~7.639
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":452}],452:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 3.0, 5.0 );
* // returns ~11.111
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~1.26
* @example
* var v = variance( 8.0, 5.0 );
* // returns ~7.639
* @example
* var v = variance( 1.0, 4.0 );
* // returns NaN
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 4.0 ) {
		return NaN;
	}
	out = 2.0 * d2 * d2 * ( d1 + d2 - 2.0 );
	out /= d1 * pow( d2 - 2.0, 2.0 ) * ( d2 - 4.0 );
	return out;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/special/pow":1311}],453:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~0.965
* @example
* var y = cdf( -2.0, 1.0, 3.0, -1.0 );
* // returns ~0.143
* @example
* var y = cdf( 0.0, 2.0, 1.0, 1.0 );
* // returns ~0.368
* @example
* var y = cdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
* @example
* var y = cdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function cdf( x, alpha, s, m ) {
	var z;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( x <= m ) {
		return 0.0;
	}
	z = ( x - m ) / s;
	return exp( -pow( z, -alpha ) );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],454:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 3.0, 5.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.806
*
* y = cdf( 7.0 );
* // returns ~0.034
*/
function factory( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( -2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= m ) {
			return 0.0;
		}
		z = ( x - m ) / s;
		return exp( -pow( z, -alpha ) );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":456,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],455:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/frechet/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/frechet/cdf' );
*
* var y = cdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~0.698
*
* y = cdf( 0.0, 2.0, 3.0, 2.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/frechet/cdf' ).factory;
* var cdf = factory( 3.0, 3.0, 5.0 );
* var y = cdf( 10.0 );
* // returns ~0.806
*
* y = cdf( 7.0 );
* // returns ~0.034
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":453,"./factory.js":454,"@stdlib/utils/define-read-only-property":1425}],456:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Fréchet distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 2.1 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],457:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/frechet/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/frechet/kurtosis' );
var mean = require( '@stdlib/math/base/dist/frechet/mean' );
var median = require( '@stdlib/math/base/dist/frechet/median' );
var mode = require( '@stdlib/math/base/dist/frechet/mode' );
var skewness = require( '@stdlib/math/base/dist/frechet/skewness' );
var stdev = require( '@stdlib/math/base/dist/frechet/stdev' );
var variance = require( '@stdlib/math/base/dist/frechet/variance' );
var cdf = require( '@stdlib/math/base/dist/frechet/cdf' );
var logpdf = require( '@stdlib/math/base/dist/frechet/logpdf' );
var pdf = require( '@stdlib/math/base/dist/frechet/pdf' );
var quantile = require( '@stdlib/math/base/dist/frechet/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function frechetCDF( x ) {
	return cdf( x, this.alpha, this.s, this.m );
} // end FUNCTION frechetCDF()

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function frechetLogPDF( x ) {
	return logpdf( x, this.alpha, this.s, this.m );
} // end FUNCTION frechetLogPDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function frechetPDF( x ) {
	return pdf( x, this.alpha, this.s, this.m );
} // end FUNCTION frechetPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function frechetQuantile( p ) {
	return quantile( p, this.alpha, this.s, this.m );
} // end FUNCTION frechetQuantile()


// MAIN //

/**
* Fréchet distribution constructor.
*
* @constructor
* @param {number} [alpha=0.0] - shape parameter
* @param {number} [s=1.0] - scale parameter
* @param {number} [m=0.0] - location parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `s` must be a positive number
* @returns {Frechet} distribution instance
*
* @example
* var frechet = new Frechet( 1.0, 1.0, 0.25 );
*
* var y = frechet.cdf( 0.8 );
* // returns ~0.162
*
* var mu = frechet.mean;
* // returns Number.POSITIVE_INFINITY
*/
function Frechet() {
	var alpha;
	var s;
	var m;
	if ( !(this instanceof Frechet) ) {
		if ( arguments.length === 0 ) {
			return new Frechet();
		}
		return new Frechet( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		s = arguments[ 1 ];
		m = arguments[ 2 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( s ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `s` must be a number primitive. Value: `' + s + '`' );
		}
		if ( !isNumber( m ) || isnan( m ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `m` must be a number primitive. Value: `' + m + '`' );
		}
	} else {
		alpha = 1.0;
		s = 1.0;
		m = 0.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	Object.defineProperty( this, 'm', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return m;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			m = value;
		}
	});
	return this;
} // end FUNCTION Frechet()

/**
* Fréchet distribution differential entropy.
*
* @memberof Frechet.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.entropy;
* // returns ~2.82
*/
Object.defineProperty( Frechet.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution excess kurtosis.
*
* @memberof Frechet.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.kurtosis;
* // returns Number.POSITIVE_INFINITY
*/
Object.defineProperty( Frechet.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution expected value.
*
* @memberof Frechet.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.mean;
* // returns ~16.705
*/
Object.defineProperty( Frechet.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution median.
*
* @memberof Frechet.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.median;
* // returns ~15.151
*/
Object.defineProperty( Frechet.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution mode.
*
* @memberof Frechet.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.mode;
* // returns ~13.349
*/
Object.defineProperty( Frechet.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution skewness.
*
* @memberof Frechet.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.skewness;
* // returns ~5.605
*/
Object.defineProperty( Frechet.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution standard deviation.
*
* @memberof Frechet.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.stdev;
* // returns ~6.245
*/
Object.defineProperty( Frechet.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution variance.
*
* @memberof Frechet.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.variance;
* // returns ~38.996
*/
Object.defineProperty( Frechet.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.s, this.m );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Frechet.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.cdf( 12.0 );
* // returns ~0.821
*/
setReadOnly( Frechet.prototype, 'cdf', frechetCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @memberof Frechet.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.logpdf( 2.0 );
* // returns Number.NEGATIVE_INFINITY
*/
setReadOnly( Frechet.prototype, 'logpdf', frechetLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Frechet.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.pdf( 5.5 );
* // returns ~0.158
*/
setReadOnly( Frechet.prototype, 'pdf', frechetPDF );

/**
* Evaluates the quantile function.
*
* @memberof Frechet.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.quantile( 0.5 );
* // returns ~7.804
*/
setReadOnly( Frechet.prototype, 'quantile', frechetQuantile );


// EXPORTS //

module.exports = Frechet;

},{"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/frechet/cdf":455,"@stdlib/math/base/dist/frechet/entropy":460,"@stdlib/math/base/dist/frechet/kurtosis":461,"@stdlib/math/base/dist/frechet/logpdf":465,"@stdlib/math/base/dist/frechet/mean":468,"@stdlib/math/base/dist/frechet/median":470,"@stdlib/math/base/dist/frechet/mode":472,"@stdlib/math/base/dist/frechet/pdf":475,"@stdlib/math/base/dist/frechet/quantile":479,"@stdlib/math/base/dist/frechet/skewness":482,"@stdlib/math/base/dist/frechet/stdev":484,"@stdlib/math/base/dist/frechet/variance":486,"@stdlib/utils/define-read-only-property":1425}],458:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution constructor.
*
* @module @stdlib/math/base/dist/frechet/ctor
*
* @example
* var Frechet = require( '@stdlib/math/base/dist/frechet/ctor' );
*
* var frechet = new Frechet( 1.0, 1.0, 0.5 );
*
* var y = frechet.cdf( 0.8 );
* // returns ~0.036
*
* var mu = frechet.mean;
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":457}],459:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/math/constants/float64-eulergamma' );


// MAIN //

/**
* Returns the differential entropy for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} entropy
*
* @example
* var y = entropy( 1.0, 1.0, 0.0 );
* // returns ~2.154
* @example
* var y = entropy( 5.0, 2.0, 0.0 );
* // returns ~0.776
* @example
* var y = entropy( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = entropy( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = entropy( 1.0, 1.0, NaN );
* // returns NaN
*/
function entropy( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return 1.0 + ( GAMMA / alpha ) + GAMMA + ln( s / alpha );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-eulergamma":1393}],460:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution differential entropy.
*
* @module @stdlib/math/base/dist/frechet/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/frechet/entropy' );
*
* var y = entropy( 1.0, 1.0, 0.0 );
* // returns ~2.154
*
* y = entropy( 4.0, 2.0, 0.0 );
* // returns ~1.028
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":459}],461:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/frechet/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/frechet/kurtosis' );
*
* var y = kurtosis( 8.0, 2.0, 0.0 );
* // returns ~11.166
*
* y = kurtosis( 8.0, 16.0, 3.0 );
* // returns ~11.166
*
* y = kurtosis( 1.0, 1.0, -3.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":462}],462:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the excess kurtosis for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 5.0, 2.0, 0.0 );
* // returns ~45.092
* @example
* var y = kurtosis( 5.0, 2.0, -5.0 );
* // returns ~45.092
* @example
* var y = kurtosis( 3.8, 1.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = kurtosis( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = kurtosis( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = kurtosis( 1.0, 1.0, NaN );
* // returns NaN
*/
function kurtosis( alpha, s, m ) {
	var out;
	var g1;
	var g2;
	var g3;
	var g4;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 4.0 ) {
		// Case: 0 < alpha <= 4
		return PINF;
	}
	g1 = gamma( 1.0 - ( 1.0/alpha ) );
	g2 = gamma( 1.0 - ( 2.0/alpha ) );
	g3 = gamma( 1.0 - ( 3.0/alpha ) );
	g4 = gamma( 1.0 - ( 4.0/alpha ) );
	out = ( g4 - ( 4.0*g3*g1 ) + ( 3.0*g2*g2 ) ) / pow( g2 - ( g1*g1 ), 2.0 );
	out -= 6.0;
	return out;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],463:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace frechet
*/
var frechet = {};

/**
* @name cdf
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/cdf}
*/
setReadOnly( frechet, 'cdf', require( '@stdlib/math/base/dist/frechet/cdf' ) );

/**
* @name entropy
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/entropy}
*/
setReadOnly( frechet, 'entropy', require( '@stdlib/math/base/dist/frechet/entropy' ) );

/**
* @name Frechet
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/ctor}
*/
setReadOnly( frechet, 'Frechet', require( '@stdlib/math/base/dist/frechet/ctor' ) );

/**
* @name kurtosis
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/kurtosis}
*/
setReadOnly( frechet, 'kurtosis', require( '@stdlib/math/base/dist/frechet/kurtosis' ) );

/**
* @name logpdf
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/logpdf}
*/
setReadOnly( frechet, 'logpdf', require( '@stdlib/math/base/dist/frechet/logpdf' ) );

/**
* @name mean
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/mean}
*/
setReadOnly( frechet, 'mean', require( '@stdlib/math/base/dist/frechet/mean' ) );

/**
* @name median
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/median}
*/
setReadOnly( frechet, 'median', require( '@stdlib/math/base/dist/frechet/median' ) );

/**
* @name mode
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/mode}
*/
setReadOnly( frechet, 'mode', require( '@stdlib/math/base/dist/frechet/mode' ) );

/**
* @name pdf
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/pdf}
*/
setReadOnly( frechet, 'pdf', require( '@stdlib/math/base/dist/frechet/pdf' ) );

/**
* @name quantile
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/quantile}
*/
setReadOnly( frechet, 'quantile', require( '@stdlib/math/base/dist/frechet/quantile' ) );

/**
* @name skewness
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/skewness}
*/
setReadOnly( frechet, 'skewness', require( '@stdlib/math/base/dist/frechet/skewness' ) );

/**
* @name stdev
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/stdev}
*/
setReadOnly( frechet, 'stdev', require( '@stdlib/math/base/dist/frechet/stdev' ) );

/**
* @name variance
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/frechet/variance}
*/
setReadOnly( frechet, 'variance', require( '@stdlib/math/base/dist/frechet/variance' ) );


// EXPORTS //

module.exports = frechet;

},{"@stdlib/math/base/dist/frechet/cdf":455,"@stdlib/math/base/dist/frechet/ctor":458,"@stdlib/math/base/dist/frechet/entropy":460,"@stdlib/math/base/dist/frechet/kurtosis":461,"@stdlib/math/base/dist/frechet/logpdf":465,"@stdlib/math/base/dist/frechet/mean":468,"@stdlib/math/base/dist/frechet/median":470,"@stdlib/math/base/dist/frechet/mode":472,"@stdlib/math/base/dist/frechet/pdf":475,"@stdlib/math/base/dist/frechet/quantile":479,"@stdlib/math/base/dist/frechet/skewness":482,"@stdlib/math/base/dist/frechet/stdev":484,"@stdlib/math/base/dist/frechet/variance":486,"@stdlib/utils/define-read-only-property":1425}],464:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 3.0, 3.0, 5.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-2.259
*
* y = logpdf( 7.0 );
* // returns ~-1.753
*/
function factory( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return nan;
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= m ) {
			return NINF;
		}
		z = ( x - m ) / s;
		return ln( alpha/s ) - ( ( 1.0+alpha ) * ln( z ) ) - pow( z, -alpha );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":467,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411}],465:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution logarithm of probability density function (logpdf).
*
* @module @stdlib/math/base/dist/frechet/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/frechet/logpdf' );
*
* var y = logpdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~-2.298
*
* y = logpdf( 0.0, 2.0, 3.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var factory = require( '@stdlib/math/base/dist/frechet/logpdf' ).factory;
* var logpdf = factory( 3.0, 3.0, 5.0 );
* var y = logpdf( 10.0 );
* // returns ~-2.259
*
* y = logpdf( 7.0 );
* // returns ~-1.753
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":464,"./logpdf.js":466,"@stdlib/utils/define-read-only-property":1425}],466:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~-3.489
* @example
* var y = logpdf( -2.0, 1.0, 3.0, -3.0 );
* // returns ~-1.901
* @example
* var y = logpdf( 0.0, 2.0, 1.0, 1.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
* @example
* var y = logpdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function logpdf( x, alpha, s, m ) {
	var z;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( x <= m ) {
		return NINF;
	}
	z = ( x - m ) / s;
	return ln( alpha/s ) - ( ( 1.0+alpha ) * ln( z ) ) - pow( z, -alpha );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411}],467:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid Fréchet distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 2.1 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],468:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution expected value.
*
* @module @stdlib/math/base/dist/frechet/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/frechet/mean' );
*
* var y = mean( 4.0, 2.0, 0.0 );
* // returns ~2.451
*
* y = mean( 1.0, 1.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":469}],469:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the expected value for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} mean
*
* @example
* var y = mean( 5.0, 2.0, 0.0 );
* // returns ~2.328
* @example
* var y = mean( 5.0, 2.0, -4.0 );
* // returns ~-1.672
* @example
* var y = mean( 1.0, 1.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = mean( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = mean( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = mean( 1.0, 1.0, NaN );
* // returns NaN
*/
function mean( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 1.0 ) {
		// Case: 0 < alpha <= 1
		return PINF;
	}
	return m + ( s * gamma( 1.0 - (1.0/alpha) ) );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/constants/float64-pinf":1414}],470:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution median.
*
* @module @stdlib/math/base/dist/frechet/median
*
* @example
* var median = require( '@stdlib/math/base/dist/frechet/median' );
*
* var y = median( 4.0, 2.0, 0.0 );
* // returns ~2.192
*
* y = median( 1.0, 1.0, -3.0 );
* // returns ~-1.557
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":471}],471:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var LN2 = require( '@stdlib/math/constants/float64-ln-two' );


// MAIN //

/**
* Returns the median for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} median
*
* @example
* var y = median( 5.0, 2.0, 0.0 );
* // returns ~2.152
* @example
* var y = median( 5.0, 2.0, -5.0 );
* // returns ~-2.848
* @example
* var y = median( 1.0, 1.0, 0.0 );
* // returns ~1.443
* @example
* var y = median( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = median( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = median( 1.0, 1.0, NaN );
* // returns NaN
*/
function median( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return m + ( s * pow( LN2, -1.0/alpha ) );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ln-two":1403}],472:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution mode.
*
* @module @stdlib/math/base/dist/frechet/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/frechet/mode' );
*
* var y = mode( 4.0, 2.0, 0.0 );
* // returns ~1.891
*
* y = mode( 1.0, 1.0, -3.0 );
* // returns ~-2.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":473}],473:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the mode for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} mode
*
* @example
* var y = mode( 5.0, 2.0, 0.0 );
* // returns ~1.928
* @example
* var y = mode( 5.0, 2.0, -5.0 );
* // returns ~-3.072
* @example
* var y = mode( 1.0, 1.0, 0.0 );
* // returns ~0.5
* @example
* var y = mode( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = mode( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = mode( 1.0, 1.0, NaN );
* // returns NaN
*/
function mode( alpha, s, m ) {
	var ainv;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	ainv = 1.0 / alpha;
	return m + ( s * pow( 1.0+ainv, -ainv ) );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],474:[function(require,module,exports){
'use strict';

// MODULES //

var ldfrechet = require( '@stdlib/math/base/dist/frechet/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 3.0, 5.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.806
*
* y = pdf( 7.0 );
* // returns ~0.034
*/
function factory( alpha, s, m ) {
	var logpdf;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return nan;
	}
	logpdf = ldfrechet( alpha, s, m );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PDF
	*
	* @example
	* var y = pdf( -2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return exp( logpdf( x, alpha, s, m ) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":476,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/frechet/logpdf":465,"@stdlib/math/base/special/exp":1257}],475:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/frechet/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/frechet/pdf' );
*
* var y = pdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~0.698
*
* y = pdf( 0.0, 2.0, 3.0, 2.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dist/frechet/pdf' ).factory;
* var pdf = factory( 3.0, 3.0, 5.0 );
* var y = pdf( 10.0 );
* // returns ~0.806
*
* y = pdf( 7.0 );
* // returns ~0.034
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":474,"./pdf.js":477,"@stdlib/utils/define-read-only-property":1425}],476:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Fréchet distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 2.1 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],477:[function(require,module,exports){
'use strict';

// MODULES //

var logpdf = require( '@stdlib/math/base/dist/frechet/logpdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~0.965
* @example
* var y = pdf( -2.0, 1.0, 3.0, -1.0 );
* // returns ~0.143
* @example
* var y = pdf( 0.0, 2.0, 1.0, 1.0 );
* // returns ~0.368
* @example
* var y = pdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
* @example
* var y = pdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function pdf( x, alpha, s, m ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return exp( logpdf( x, alpha, s, m ) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/frechet/logpdf":465,"@stdlib/math/base/special/exp":1257}],478:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 3.0, 3.0, 5.0 );
*
* var y = quantile( 0.8 );
* // returns ~9.946
*
* y = quantile( 0.2 );
* // returns ~7.56
*/
function factory( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Fréchet distribution.
	*
	* @private
	* @param {number} p - input probability
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( -2.0 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return m + ( s * ( pow( -ln( p ), -1.0/alpha ) ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":480,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311}],479:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution quantile function.
*
* @module @stdlib/math/base/dist/frechet/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/frechet/quantile' );
*
* var y = quantile( 0.3, 2.0, 3.0, 5.0 );
* // returns ~7.734
*
* y = quantile( 0.8, 2.0, 3.0, 2.0 );
* // returns ~8.351
*
* @example
* var factory = require( '@stdlib/math/base/dist/frechet/quantile' ).factory;
* var quantile = factory( 3.0, 3.0, 5.0 );
* var y = quantile( 0.1 );
* // returns ~7.272
*
* y = quantile( 0.8 );
* // returns ~9.946
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":478,"./quantile.js":481,"@stdlib/utils/define-read-only-property":1425}],480:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Fréchet distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 2.1 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],481:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the quantile function for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a probability `p`.
*
* @param {number} p - input probability
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0, 3.0, 2.0 );
* // returns ~5.603
* @example
* var y = quantile( 0.2, 1.0, 3.0, -1.0 );
* // returns ~0.864
* @example
* var y = quantile( 0.3, 2.0, 1.0, 1.0 );
* // returns ~1.911
* @example
* var y = quantile( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, NaN, 1.0, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, 2.0, NaN, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, 2.0, 1.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.1, -1.0, 1.0, 0.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function quantile( p, alpha, s, m ) {
	if (
		isnan( p ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		p < 0.0 ||
		p > 1.0 ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return m + ( s * ( pow( -ln( p ), -1.0/alpha ) ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311}],482:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution skewness.
*
* @module @stdlib/math/base/dist/frechet/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/frechet/skewness' );
*
* var y = skewness( 4.0, 2.0, 0.0 );
* // returns ~1.083
*
* y = skewness( 1.0, 1.0, -3.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":483}],483:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the skewness for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} skewness
*
* @example
* var y = skewness( 5.0, 2.0, 0.0 );
* // returns ~0.535
* @example
* var y = skewness( 5.0, 2.0, -5.0 );
* // returns ~0.535
* @example
* var y = skewness( 1.0, 1.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = skewness( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = skewness( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = skewness( 1.0, 1.0, NaN );
* // returns NaN
*/
function skewness( alpha, s, m ) {
	var g1s;
	var g1;
	var g2;
	var g3;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 3.0 ) {
		// Case: 0 < alpha <= 3
		return PINF;
	}
	g1 = gamma( 1.0 - ( 1.0/alpha ) );
	g1s = g1*g1;
	g2 = gamma( 1.0 - ( 2.0/alpha ) );
	g3 = gamma( 1.0 - ( 3.0/alpha ) );
	return ( g3 - ( 3.0*g2*g1 ) + ( 2.0*g1s*g1 ) ) / pow( g2 - g1s, 1.5 );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],484:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution standard deviation.
*
* @module @stdlib/math/base/dist/frechet/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/frechet/stdev' );
*
* var y = stdev( 4.0, 2.0, 0.0 );
* // returns ~1.041
*
* y = stdev( 1.0, 1.0, -3.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":485}],485:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 5.0, 2.0, 0.0 );
* // returns ~0.535
* @example
* var y = stdev( 5.0, 2.0, -5.0 );
* // returns ~0.535
* @example
* var y = stdev( 1.0, 1.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = stdev( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = stdev( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = stdev( 1.0, 1.0, NaN );
* // returns NaN
*/
function stdev( alpha, s, m ) {
	var g1;
	var g2;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 2.0 ) {
		// Case: 0 < alpha <= 2
		return PINF;
	}
	g1 = gamma( 1.0 - ( 1.0/alpha ) );
	g2 = gamma( 1.0 - ( 2.0/alpha ) );
	return s * sqrt( g2 - ( g1*g1 ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414}],486:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution variance.
*
* @module @stdlib/math/base/dist/frechet/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/frechet/variance' );
*
* var y = variance( 4.0, 2.0, 0.0 );
* // returns ~1.083
*
* y = variance( 1.0, 1.0, -3.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":487}],487:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the variance for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 5.0, 2.0, 0.0 );
* // returns ~0.535
* @example
* var y = variance( 5.0, 2.0, -5.0 );
* // returns ~0.535
* @example
* var y = variance( 1.0, 1.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = variance( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = variance( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = variance( 1.0, 1.0, NaN );
* // returns NaN
*/
function variance( alpha, s, m ) {
	var g1;
	var g2;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 2.0 ) {
		// Case: 0 < alpha <= 2
		return PINF;
	}
	g1 = gamma( 1.0 - ( 1.0/alpha ) );
	g2 = gamma( 1.0 - ( 2.0/alpha ) );
	return ( s*s ) * ( g2 - ( g1*g1 ) );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/constants/float64-pinf":1414}],488:[function(require,module,exports){
'use strict';

// MODULES //

var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
* @example
* var y = cdf( 2.0, 3.0, 1.0 );
* // returns ~0.323
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( alpha === 0.0 ) {
		return x <= 0 ? 0.0 : 1.0;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	return gammainc( x * beta, alpha );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gammainc":1277,"@stdlib/math/constants/float64-pinf":1414}],489:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.1 );
* var y = cdf( 12.0 );
* // returns ~0.879
* y = cdf( 8.0 );
* // returns ~0.794
*/
function factory( alpha, beta ) {
	if ( isnan( alpha ) || isnan( beta ) ) {
		return nan;
	}
	if ( alpha < 0.0 || beta <= 0.0 ) {
		return nan;
	}
	if ( alpha === 0.0 ) {
		return degenerate( 0.0 );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		return gammainc( x * beta, alpha );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":491,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/cdf":328,"@stdlib/math/base/special/gammainc":1277,"@stdlib/math/constants/float64-pinf":1414}],490:[function(require,module,exports){
'use strict';

/**
* Gamma distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/gamma/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/gamma/cdf' );
*
* var y = cdf( 2.0, 8.0, 3.0 );
* // returns ~0.256
*
* y = cdf( 0.0, 1.0, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2.0, 0.5 );
* y = mycdf( 6.0 );
* // returns ~0.801
*
* y = mycdf( 2.0 );
* // returns ~0.264
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":488,"./factory.js":489,"@stdlib/utils/define-read-only-property":1425}],491:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid gamma distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 2.1 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],492:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/gamma/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/gamma/kurtosis' );
var mean = require( '@stdlib/math/base/dist/gamma/mean' );
var mode = require( '@stdlib/math/base/dist/gamma/mode' );
var quantile = require( '@stdlib/math/base/dist/gamma/quantile' );
var skewness = require( '@stdlib/math/base/dist/gamma/skewness' );
var stdev = require( '@stdlib/math/base/dist/gamma/stdev' );
var variance = require( '@stdlib/math/base/dist/gamma/variance' );
var cdf = require( '@stdlib/math/base/dist/gamma/cdf' );
var logpdf = require( '@stdlib/math/base/dist/gamma/logpdf' );
var mgf = require( '@stdlib/math/base/dist/gamma/mgf' );
var pdf = require( '@stdlib/math/base/dist/gamma/pdf' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function gammaCDF( x ) {
	return cdf( x, this.alpha, this.beta );
} // end FUNCTION gammaCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function gammaLogPDF( x ) {
	return logpdf( x, this.alpha, this.beta );
} // end FUNCTION gammaLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function gammaMGF( t ) {
	return mgf( t, this.alpha, this.beta );
} // end FUNCTION gammaMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function gammaPDF( x ) {
	return pdf( x, this.alpha, this.beta );
} // end FUNCTION gammaPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function gammaQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
} // end FUNCTION gammaQuantile()


// MAIN //

/**
* Gamma distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - rate parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Gamma} distribution instance
*
* @example
* var gamma = new Gamma( 1.0, 1.0 );
*
* var y = gamma.cdf( 0.8 );
* // returns ~0.551
*
* var mode = gamma.mode;
* // returns 0.0
*/
function Gamma() {
	var alpha;
	var beta;
	if ( !(this instanceof Gamma) ) {
		if ( arguments.length === 0 ) {
			return new Gamma();
		}
		return new Gamma( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
} // end FUNCTION Gamma()

/**
* Gamma distribution differential entropy.
*
* @memberof Gamma.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.entropy;
* // returns ~-0.462
*/
Object.defineProperty( Gamma.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.beta );
	}
});

/**
* Gamma distribution excess kurtosis.
*
* @memberof Gamma.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.kurtosis;
* // returns 1.5
*/
Object.defineProperty( Gamma.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Gamma distribution expected value.
*
* @memberof Gamma.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.mean;
* // returns ~0.333
*/
Object.defineProperty( Gamma.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Gamma distribution mode.
*
* @memberof Gamma.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.mode;
* // returns 0.25
*/
Object.defineProperty( Gamma.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Gamma distribution skewness.
*
* @memberof Gamma.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.skewness;
* // returns 1.0
*/
Object.defineProperty( Gamma.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Gamma distribution standard deviation.
*
* @memberof Gamma.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.stdev;
* // returns ~0.028
*/
Object.defineProperty( Gamma.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.beta );
	}
});

/**
* Gamma distribution variance.
*
* @memberof Gamma.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.variance;
* // returns ~0.028
*/
Object.defineProperty( Gamma.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Gamma.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.cdf( 0.5 );
* // returns ~0.594
*/
setReadOnly( Gamma.prototype, 'cdf', gammaCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Gamma.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.logpdf( 0.8 );
* // returns ~-0.651
*/
setReadOnly( Gamma.prototype, 'logpdf', gammaLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Gamma.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.mgf( 0.5 );
* // returns ~1.306
*/
setReadOnly( Gamma.prototype, 'mgf', gammaMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Gamma.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.pdf( 0.8 );
* // returns ~0.522
*/
setReadOnly( Gamma.prototype, 'pdf', gammaPDF );

/**
* Evaluates the quantile function.
*
* @memberof Gamma.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.quantile( 0.5 );
* // returns ~0.42
*/
setReadOnly( Gamma.prototype, 'quantile', gammaQuantile );


// EXPORTS //

module.exports = Gamma;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/gamma/cdf":490,"@stdlib/math/base/dist/gamma/entropy":495,"@stdlib/math/base/dist/gamma/kurtosis":496,"@stdlib/math/base/dist/gamma/logpdf":501,"@stdlib/math/base/dist/gamma/mean":505,"@stdlib/math/base/dist/gamma/mgf":508,"@stdlib/math/base/dist/gamma/mode":511,"@stdlib/math/base/dist/gamma/pdf":515,"@stdlib/math/base/dist/gamma/quantile":520,"@stdlib/math/base/dist/gamma/skewness":523,"@stdlib/math/base/dist/gamma/stdev":525,"@stdlib/math/base/dist/gamma/variance":527,"@stdlib/utils/define-read-only-property":1425}],493:[function(require,module,exports){
'use strict';

/**
* Gamma distribution constructor.
*
* @module @stdlib/math/base/dist/gamma/ctor
*
* @example
* var Gamma = require( '@stdlib/math/base/dist/gamma/ctor' );
*
* var gamma = new Gamma( 1.0, 1.0 );
*
* var y = gamma.cdf( 0.8 );
* // returns ~0.551
*
* var mode = gamma.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":492}],494:[function(require,module,exports){
'use strict';

// MODULES //

var digamma = require( '@stdlib/math/base/special/digamma' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~-0.462
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~1.723
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = alpha - ln( beta );
	out += gammaln( alpha );
	out += ( 1.0-alpha ) * digamma( alpha );
	return out;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/special/digamma":1245,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300}],495:[function(require,module,exports){
'use strict';

/**
* Gamma distribution differential entropy.
*
* @module @stdlib/math/base/dist/gamma/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/gamma/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~-0.462
*
* v = entropy( 8.0, 2.0 );
* // returns ~1.723
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":494}],496:[function(require,module,exports){
'use strict';

/**
* Gamma distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/gamma/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/gamma/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4.0, 12.0 );
* // returns 1.5
*
* v = kurtosis( 8.0, 2.0 );
* // returns 0.75
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":497}],497:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns 1.5
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns 0.75
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 6.0 / alpha;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],498:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace gamma
*/
var gamma = {};

/**
* @name cdf
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/cdf}
*/
setReadOnly( gamma, 'cdf', require( '@stdlib/math/base/dist/gamma/cdf' ) );

/**
* @name entropy
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/entropy}
*/
setReadOnly( gamma, 'entropy', require( '@stdlib/math/base/dist/gamma/entropy' ) );

/**
* @name Gamma
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/ctor}
*/
setReadOnly( gamma, 'Gamma', require( '@stdlib/math/base/dist/gamma/ctor' ) );

/**
* @name kurtosis
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/kurtosis}
*/
setReadOnly( gamma, 'kurtosis', require( '@stdlib/math/base/dist/gamma/kurtosis' ) );

/**
* @name logpdf
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/logpdf}
*/
setReadOnly( gamma, 'logpdf', require( '@stdlib/math/base/dist/gamma/logpdf' ) );

/**
* @name mean
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/mean}
*/
setReadOnly( gamma, 'mean', require( '@stdlib/math/base/dist/gamma/mean' ) );

/**
* @name mgf
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/mgf}
*/
setReadOnly( gamma, 'mgf', require( '@stdlib/math/base/dist/gamma/mgf' ) );

/**
* @name mode
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/mode}
*/
setReadOnly( gamma, 'mode', require( '@stdlib/math/base/dist/gamma/mode' ) );

/**
* @name pdf
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/pdf}
*/
setReadOnly( gamma, 'pdf', require( '@stdlib/math/base/dist/gamma/pdf' ) );

/**
* @name quantile
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/quantile}
*/
setReadOnly( gamma, 'quantile', require( '@stdlib/math/base/dist/gamma/quantile' ) );

/**
* @name skewness
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/skewness}
*/
setReadOnly( gamma, 'skewness', require( '@stdlib/math/base/dist/gamma/skewness' ) );

/**
* @name stdev
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/stdev}
*/
setReadOnly( gamma, 'stdev', require( '@stdlib/math/base/dist/gamma/stdev' ) );

/**
* @name variance
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gamma/variance}
*/
setReadOnly( gamma, 'variance', require( '@stdlib/math/base/dist/gamma/variance' ) );


// EXPORTS //

module.exports = gamma;

},{"@stdlib/math/base/dist/gamma/cdf":490,"@stdlib/math/base/dist/gamma/ctor":493,"@stdlib/math/base/dist/gamma/entropy":495,"@stdlib/math/base/dist/gamma/kurtosis":496,"@stdlib/math/base/dist/gamma/logpdf":501,"@stdlib/math/base/dist/gamma/mean":505,"@stdlib/math/base/dist/gamma/mgf":508,"@stdlib/math/base/dist/gamma/mode":511,"@stdlib/math/base/dist/gamma/pdf":515,"@stdlib/math/base/dist/gamma/quantile":520,"@stdlib/math/base/dist/gamma/skewness":523,"@stdlib/math/base/dist/gamma/stdev":525,"@stdlib/math/base/dist/gamma/variance":527,"@stdlib/utils/define-read-only-property":1425}],499:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var gammaDeriv = require( './gamma_p_derivative.js' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 3.0, 1.5 );
*
* var y = logpdf( 1.0 );
* // returns ~-0.977
*
* y = logpdf( 4.0 );
* // returns ~-2.704
*/
function factory( alpha, beta ) {
	if ( isnan( alpha ) || isnan( beta ) ) {
		return nan;
	}
	if ( alpha < 0.0 || beta <= 0.0 ) {
		return nan;
	}
	if ( alpha === 0.0 ) {
		return degenerate( 0.0 );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return NINF;
		}
		return ln( gammaDeriv( alpha, x * beta ) ) + ln( beta );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./gamma_p_derivative.js":500,"./nan.js":503,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/logpdf":336,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],500:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_58_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14
* Copyright Christopher Kormanyos 2013-14
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var FLOAT64_MAX = require( '@stdlib/math/constants/float64-max' );
var regularisedGammaPrefix = require( './regularised_gamma_prefix.js' );


// MAIN //

/**
* Calculates the partial derivative with respect to x of the incomplete gamma function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {NonNegativeNumber} x - function parameter
* @returns {number} function value
*/
function gammaPDerivative( a, x ) {
	var f1;
	if ( a <= 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( a > 1.0 ) {
			return 0.0;
		}
		return a === 1.0 ? 1.0 : PINF;
	}
	f1 = regularisedGammaPrefix( a, x );
	if ( x < 1.0 && ( FLOAT64_MAX * x < f1 ) ) {
		return PINF;
	}
	if ( f1 === 0.0 ) {
		// Underflow in calculation, use logs instead:
		f1 = (a * ln( x )) - x - gammaln( a ) - ln( x );
		f1 = exp( f1 );
	} else {
		f1 /= x;
	}
	return f1;
} // end FUNCTION gammaPDerivative()


// EXPORTS //

module.exports = gammaPDerivative;

},{"./regularised_gamma_prefix.js":504,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-max":1408,"@stdlib/math/constants/float64-pinf":1414}],501:[function(require,module,exports){
'use strict';

/**
* Gamma distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/gamma/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/gamma/logpdf' );
*
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.919
*
* @example
* var factory = require( '@stdlib/math/base/dist/gamma/logpdf' ).factory;
*
* var logpdf = factory( 6.0, 7.0 );
* var y = logpdf( 2.0 );
* // returns ~-3.646
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":499,"./logpdf.js":502,"@stdlib/utils/define-read-only-property":1425}],502:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var gammaDeriv = require( './gamma_p_derivative.js' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.919
* @example
* var y = logpdf( 0.1, 1.0, 1.0 );
* // returns ~-0.1
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( NaN, 0.6, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* // Negative shape parameter:
* var y = logpdf( 2.0, -1.0, 1.0 );
* // returns NaN
* @example
* // Negative rate parameter:
* var y = logpdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function logpdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x === PINF ) {
		return NINF;
	}
	if ( alpha === 0.0 ) {
		// Point mass at 0...
		return x === 0.0 ? PINF : NINF;
	}
	return ln( gammaDeriv( alpha, x * beta ) ) + ln( beta );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"./gamma_p_derivative.js":500,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],503:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid gamma distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 3.14 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],504:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var E = require( '@stdlib/math/constants/float64-e' );


// VARIABLES //

var LOG_MAX_VALUE = 709.0;
var LOG_MIN_VALUE = -708.0;
var G = 10.90051099999999983936049829935654997826;
var NUM = [
	709811.662581657956893540610814842699825,
	679979.847415722640161734319823103390728,
	293136.785721159725251629480984140341656,
	74887.5403291467179935942448101441897121,
	12555.29058241386295096255111537516768137,
	1443.42992444170669746078056942194198252,
	115.2419459613734722083208906727972935065,
	6.30923920573262762719523981992008976989,
	0.2266840463022436475495508977579735223818,
	0.004826466289237661857584712046231435101741,
	0.4624429436045378766270459638520555557321e-4
];
var DENOM = [
	0,
	362880,
	1026576,
	1172700,
	723680,
	269325,
	63273,
	9450,
	870,
	45,
	1
];


// FUNCTIONS //

/**
* Calculate the Lanczos approximation scaled by exp(G).
*
* @private
* @param {number} z - input value
* @returns {number} Lanczos approximation
*/
var lanczosSumExpGScaled = evalrational( NUM, DENOM );


// MAIN //

/**
* Computes (z^a)(e^-z)/tgamma(a).
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} (z^a)(e^-z)/tgamma(a)
*/
function regularisedGammaPrefix( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + G - 0.5;
	d = ((z - a) - G + 0.5) / agh;
	if ( a < 1 ) {
		//
		// We have to treat a < 1 as a special case because our Lanczos
		// approximations are optimised against the factorials with a > 1,
		// and for high precision types especially (128-bit reals for example)
		// very small values of a can give rather eroneous results for gamma
		// unless we do this:
		//
		// TODO: is this still required?  Lanczos approx should be better now?
		//
		if ( z <= LOG_MIN_VALUE ) {
			// Oh dear, have to use logs, should be free of cancellation errors though:
			return exp( (a * ln(z)) - z - gammaln( a ) );
		}
		// Direct calculation, no danger of overflow as gamma(a) < 1/a for small a.
		return pow( z, a ) * exp( -z ) / gamma( a );
	}
	else if ( abs(d*d*a) <= 100 && a > 150 ) {
		// Special case for large a and a ~ z.
		prefix = (a * ( log1p( d ) - d )) + (z * (0.5 - G) / agh);
		prefix = exp( prefix );
	}
	else {
		//
		// general case.
		// direct computation is most accurate, but use various fallbacks
		// for different parts of the problem domain:
		//
		alz = a * ln(z / agh);
		amz = a - z;
		if (
			min(alz, amz) <= LOG_MIN_VALUE ||
			max(alz, amz) >= LOG_MAX_VALUE
		) {
			amza = amz / a;
			if (
				min(alz, amz)/2 > LOG_MIN_VALUE &&
				max(alz, amz)/2 < LOG_MAX_VALUE
			) {
				// Compute square root of the result and then square it:
				sq = pow( z / agh, a / 2 ) * exp( amz / 2 );
				prefix = sq * sq;
			}
			else if (
				min(alz, amz)/4 > LOG_MIN_VALUE &&
				max(alz, amz)/4 < LOG_MAX_VALUE &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = pow( z / agh, a / 4 ) * exp( amz / 4 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > LOG_MIN_VALUE &&
				amza < LOG_MAX_VALUE
			) {
				prefix = pow( (z * exp(amza)) / agh, a );
			}
			else {
				prefix = exp( alz + amz );
			}
		}
		else
		{
			prefix = pow( z / agh, a ) * exp( amz );
		}
	}
	prefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );
	return prefix;
} // end FUNCTION regularisedGammaPrefix()


// EXPORTS //

module.exports = regularisedGammaPrefix;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-e":1391}],505:[function(require,module,exports){
'use strict';

/**
* Gamma distribution expected value.
*
* @module @stdlib/math/base/dist/gamma/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/gamma/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~0.333
*
* v = mean( 8.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":506}],506:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.333
* @example
* var v = mean( 8.0, 2.0 );
* // returns 4.0
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / beta;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{}],507:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a gamma distribution with shape `alpha` and rate `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 3.0, 1.5 );
*
* var y = mgf( 1.0 );
* // returns ~26.999
*
* y = mgf( 0.5 );
* // returns ~3.375
*/
function factory( alpha, beta ) {
	if ( isnan( alpha ) || isnan( beta ) ) {
		return nan;
	}
	if ( alpha < 0.0 || beta <= 0.0 ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a gamma distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var base;
		if ( t >= beta ) {
			return NaN;
		}
		base = 1.0 - (t / beta);
		return pow( base, -alpha );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":510,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],508:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) of a gamma distribution.
*
* @module @stdlib/math/base/dist/gamma/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/gamma/mgf' );
*
* var y = mgf( 0.5, 0.5, 1.0 );
* // returns ~1.414
*
* y = mgf( 0.1, 1.0, 1.0 );
* // returns ~1.111
*
* y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.198
*
* var mymgf = mgf.factory( 3.0, 1.5 );
*
* y = mymgf( 1.0 );
* // returns ~26.999
*
* y = mymgf( 0.5 );
* // returns ~3.375
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":507,"./mgf.js":509,"@stdlib/utils/define-read-only-property":1425}],509:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a gamma distribution
*
* @param {number} t - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.5, 1.0 );
* // returns ~1.414
* @example
* var y = mgf( 0.1, 1.0, 1.0 );
* // returns ~1.111
* @example
* var y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.198
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* var y = mgf( 2.0, 4.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 2.0, -0.5, 1.0 );
* // returns NaN
* @example
* var y = mgf( 2.0, 1.0, 0.0 );
* // returns NaN
* @example
* var y = mgf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function mgf( t, alpha, beta ) {
	var base;
	if (
		isnan( t ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0 ||
		t >= beta
	) {
		return NaN;
	}
	base = 1.0 - (t / beta);
	return pow( base, -alpha );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],510:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid gamma distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],511:[function(require,module,exports){
'use strict';

/**
* Gamma distribution mode.
*
* @module @stdlib/math/base/dist/gamma/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/gamma/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns 0.25
*
* v = mode( 8.0, 2.0 );
* // returns 3.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":512}],512:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns 0.25
* @example
* var v = mode( 8.0, 2.0 );
* // returns 3.5
* @example
* var v = mode( 0.5, 2.0 );
* // returns NaN
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if ( alpha < 1.0 || beta <= 0.0 ) {
		return NaN;
	}
	return ( alpha-1.0 ) / beta;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{}],513:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var gammaDeriv = require( './gamma_p_derivative.js' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 1.5 );
*
* var y = pdf( 1.0 );
* // returns ~0.377
*
* y = pdf( 4.0 );
* // returns ~0.067
*/
function factory( alpha, beta ) {
	if ( isnan( alpha ) || isnan( beta ) ) {
		return nan;
	}
	if ( alpha < 0.0 || beta <= 0.0 ) {
		return nan;
	}
	if ( alpha === 0.0 ) {
		return degenerate( 0.0 );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return 0.0;
		}
		return gammaDeriv( alpha, x * beta ) * beta;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./gamma_p_derivative.js":514,"./nan.js":516,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/pdf":344,"@stdlib/math/constants/float64-pinf":1414}],514:[function(require,module,exports){
arguments[4][500][0].apply(exports,arguments)
},{"./regularised_gamma_prefix.js":518,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-max":1408,"@stdlib/math/constants/float64-pinf":1414,"dup":500}],515:[function(require,module,exports){
'use strict';

/**
* Gamma distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/gamma/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/gamma/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.054
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 2.0 );
* // returns ~0.026
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":513,"./pdf.js":517,"@stdlib/utils/define-read-only-property":1425}],516:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid gamma distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],517:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var gammaDeriv = require( './gamma_p_derivative.js' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.054
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.904
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( NaN, 0.6, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* // Negative shape parameter:
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
* @example
* // Negative rate parameter:
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x === PINF ) {
		return 0.0;
	}
	if ( alpha === 0.0 ) {
		// Point mass at 0...
		return x === 0.0 ? PINF : 0.0;
	}
	return gammaDeriv( alpha, x * beta ) * beta;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"./gamma_p_derivative.js":514,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],518:[function(require,module,exports){
arguments[4][504][0].apply(exports,arguments)
},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-e":1391,"dup":504}],519:[function(require,module,exports){
'use strict';

// MODULES //

var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var degenerate = require( '@stdlib/math/base/dist/degenerate/quantile' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~4.351
*
* y = quantile( 0.8 );
* // returns ~7.289
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	if ( alpha === 0.0 ) {
		return degenerate( 0.0 );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a gamma distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return ( 1.0 / beta ) * gammaincinv( p, alpha );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":521,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/quantile":352,"@stdlib/math/base/special/gammaincinv":1293}],520:[function(require,module,exports){
'use strict';

/**
* Gamma distribution quantile function.
*
* @module @stdlib/math/base/dist/gamma/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/gamma/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
*
* var myquantile = quantile.factory( 2.0, 2.0 );
* y = myquantile( 0.8 );
* // returns ~1.497
*
* y = myquantile( 0.4 );
* // returns ~0.688
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":519,"./quantile.js":522,"@stdlib/utils/define-read-only-property":1425}],521:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid gamma distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],522:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );


// MAIN //

/**
* Evaluates the quantile function for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.994
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.836
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 1.0, NaN );
* // returns NaN
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( alpha === 0.0 ) {
		return 0.0;
	}
	return ( 1.0 / beta ) * gammaincinv( p, alpha );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gammaincinv":1293}],523:[function(require,module,exports){
'use strict';

/**
* Gamma distribution skewness.
*
* @module @stdlib/math/base/dist/gamma/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/gamma/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
*
* v = skewness( 4.0, 12.0 );
* // returns 1.0
*
* v = skewness( 8.0, 2.0 );
* // returns ~0.707
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":524}],524:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 1.0
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~0.707
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 2.0 / sqrt( alpha );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],525:[function(require,module,exports){
'use strict';

/**
* Gamma distribution standard deviation.
*
* @module @stdlib/math/base/dist/gamma/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/gamma/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.167
*
* v = stdev( 8.0, 2.0 );
* // returns ~1.414
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":526}],526:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.167
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~1.414
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return sqrt( alpha ) / beta;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1343}],527:[function(require,module,exports){
'use strict';

/**
* Gamma distribution variance.
*
* @module @stdlib/math/base/dist/gamma/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/gamma/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns 1.0
*
* v = variance( 4.0, 12.0 );
* // returns ~0.028
*
* v = variance( 8.0, 2.0 );
* // returns 2.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":528}],528:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the variance of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.028
* @example
* var v = variance( 8.0, 2.0 );
* // returns 2.0
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / ( beta*beta );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{}],529:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.5 );
* // returns 0.875
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.271
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Invalid probability
* var y = cdf( 2.0, 1.4 );
* // returns NaN
*/
function cdf( x, p ) {
	if (
		isnan( x ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	x = floor( x );
	return 1.0 - pow( 1.0 - p, x + 1.0 );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],530:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns 0.9375
*
* y = cdf( 1.0 );
* // returns 0.75
*/
function factory( p ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		x = floor( x );
		return 1.0 - pow( 1.0 - p, x + 1.0 );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":532,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],531:[function(require,module,exports){
'use strict';

/**
* Geometric distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/geometric/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/geometric/cdf' );
*
* var y = cdf( 2.0, 0.5 );
* // returns 0.875
*
* y = cdf( 2.0, 0.1 );
* // returns ~0.271
*
* var mycdf = cdf.factory( 0.5 );
* y = mycdf( 3.0 );
* // returns 0.9375
*
* y = mycdf( 1.0 );
* // returns 0.75
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":529,"./factory.js":530,"@stdlib/utils/define-read-only-property":1425}],532:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid geometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 3.14 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],533:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/geometric/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/geometric/kurtosis' );
var mean = require( '@stdlib/math/base/dist/geometric/mean' );
var median = require( '@stdlib/math/base/dist/geometric/median' );
var mode = require( '@stdlib/math/base/dist/geometric/mode' );
var skewness = require( '@stdlib/math/base/dist/geometric/skewness' );
var stdev = require( '@stdlib/math/base/dist/geometric/stdev' );
var variance = require( '@stdlib/math/base/dist/geometric/variance' );
var cdf = require( '@stdlib/math/base/dist/geometric/cdf' );
var logcdf = require( '@stdlib/math/base/dist/geometric/logcdf' );
var logpmf = require( '@stdlib/math/base/dist/geometric/logpmf' );
var mgf = require( '@stdlib/math/base/dist/geometric/mgf' );
var pmf = require( '@stdlib/math/base/dist/geometric/pmf' );
var quantile = require( '@stdlib/math/base/dist/geometric/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function geometricCDF( x ) {
	return cdf( x, this.p );
} // end FUNCTION geometricCDF()

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function geometricLogCDF( x ) {
	return logcdf( x, this.p );
} // end FUNCTION geometricLogCDF()

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function geometricLogPMF( x ) {
	return logpmf( x, this.p );
} // end FUNCTION geometricLogPMF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function geometricMGF( t ) {
	return mgf( t, this.p );
} // end FUNCTION geometricMGF()

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function geometricPMF( x ) {
	return pmf( x, this.p );
} // end FUNCTION geometricPMF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function geometricQuantile( p ) {
	return quantile( p, this.p );
} // end FUNCTION geometricQuantile()


// MAIN //

/**
* Geometric distribution constructor.
*
* @constructor
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `p` must be a probability
* @returns {Geometric} distribution instance
*
* @example
* var geometric = new Geometric();
*
* var y = geometric.cdf( 1.8 );
* // returns 0.75
*
* var mode = geometric.mode;
* // returns 0.0
*/
function Geometric() {
	var p;
	if ( !(this instanceof Geometric) ) {
		if ( arguments.length === 0 ) {
			return new Geometric();
		}
		return new Geometric( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		p = arguments[ 0 ];
		if ( !isProbability( p ) ) {
			throw new TypeError( 'invalid input argument. Mean parameter `p` must be a probability. Value: `' + p + '`' );
		}
	} else {
		p = 0.5;
	}
	Object.defineProperty( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !isProbability( value ) ) {
				throw new TypeError( 'invalid value. Must be a probability. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
} // end FUNCTION Geometric()

/**
* Geometric distribution differential entropy.
*
* @memberof Geometric.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.entropy;
* // returns ~1.683
*/
Object.defineProperty( Geometric.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.p );
	}
});

/**
* Geometric distribution excess kurtosis.
*
* @memberof Geometric.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.kurtosis;
* // returns ~6.267
*/
Object.defineProperty( Geometric.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.p );
	}
});

/**
* Geometric distribution expected value.
*
* @memberof Geometric.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.mean;
* // returns ~1.5
*/
Object.defineProperty( Geometric.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.p );
	}
});

/**
* Geometric distribution median.
*
* @memberof Geometric.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.median;
* // returns 1.0
*/
Object.defineProperty( Geometric.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.p );
	}
});

/**
* Geometric distribution mode.
*
* @memberof Geometric.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.mode;
* // returns 0.0
*/
Object.defineProperty( Geometric.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.p );
	}
});

/**
* Geometric distribution skewness.
*
* @memberof Geometric.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.skewness;
* // returns ~2.066
*/
Object.defineProperty( Geometric.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.p );
	}
});

/**
* Geometric distribution standard deviation.
*
* @memberof Geometric.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.stdev;
* // returns ~1.936
*/
Object.defineProperty( Geometric.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.p );
	}
});

/**
* Geometric distribution variance.
*
* @memberof Geometric.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.variance;
* // returns ~3.75
*/
Object.defineProperty( Geometric.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.p );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Geometric.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.cdf( 1.5 );
* // returns ~0.36
*/
setReadOnly( Geometric.prototype, 'cdf', geometricCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Geometric.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.logcdf( 1.5 );
* // returns ~-1.022
*/
setReadOnly( Geometric.prototype, 'logcdf', geometricLogCDF );

/**
* Evaluates the natural logarithm of the probability mass function (logPMF).
*
* @memberof Geometric.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.logpmf( 2.0 );
* // returns ~-2.056
*/
setReadOnly( Geometric.prototype, 'logpmf', geometricLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Geometric.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.mgf( 0.1 );
* // returns ~1.908
*/
setReadOnly( Geometric.prototype, 'mgf', geometricMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @memberof Geometric.prototype
* @name pmf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.pmf( 2.0 );
* // returns ~0.128
*
* v = geometric.pmf( 0.8 );
* // returns 0.0
*/
setReadOnly( Geometric.prototype, 'pmf', geometricPMF );

/**
* Evaluates the quantile function.
*
* @memberof Geometric.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Geometric.prototype, 'quantile', geometricQuantile );


// EXPORTS //

module.exports = Geometric;

},{"@stdlib/assert/is-probability":34,"@stdlib/math/base/dist/geometric/cdf":531,"@stdlib/math/base/dist/geometric/entropy":536,"@stdlib/math/base/dist/geometric/kurtosis":537,"@stdlib/math/base/dist/geometric/logcdf":541,"@stdlib/math/base/dist/geometric/logpmf":545,"@stdlib/math/base/dist/geometric/mean":548,"@stdlib/math/base/dist/geometric/median":550,"@stdlib/math/base/dist/geometric/mgf":553,"@stdlib/math/base/dist/geometric/mode":556,"@stdlib/math/base/dist/geometric/pmf":559,"@stdlib/math/base/dist/geometric/quantile":563,"@stdlib/math/base/dist/geometric/skewness":566,"@stdlib/math/base/dist/geometric/stdev":568,"@stdlib/math/base/dist/geometric/variance":570,"@stdlib/utils/define-read-only-property":1425}],534:[function(require,module,exports){
'use strict';

/**
* Geometric distribution constructor.
*
* @module @stdlib/math/base/dist/geometric/ctor
*
* @example
* var Geometric = require( '@stdlib/math/base/dist/geometric/ctor' );
*
* var geometric = new Geometric( 0.3 );
*
* var y = geometric.cdf( 3.0 );
* // returns ~0.76
*
* var mode = geometric.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":533}],535:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the entropy of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 0.1 );
* // returns ~3.251
* @example
* var v = entropy( 0.5 );
* // returns ~1.386
* @example
* var v = entropy( 0.9 );
* // returns ~0.361
* @example
* var v = entropy( 1.1 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( p ) {
	var q;
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	q = 1.0 - p;
	return ( -( p*ln(p) ) - ( q*ln(q) ) ) / p;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300}],536:[function(require,module,exports){
'use strict';

/**
* Geometric distribution entropy.
*
* @module @stdlib/math/base/dist/geometric/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/geometric/entropy' );
*
* var v = entropy( 0.1 );
* // returns ~3.251
*
* v = entropy( 0.5 );
* // returns ~1.386
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":535}],537:[function(require,module,exports){
'use strict';

/**
* Geometric distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/geometric/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/geometric/kurtosis' );
*
* var v = kurtosis( 0.1 );
* // returns ~6.011
*
* v = kurtosis( 0.5 );
* // returns 6.5
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":538}],538:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 0.1 );
* // returns ~6.011
* @example
* var v = kurtosis( 0.5 );
* // returns 6.5
* @example
* var v = kurtosis( 1.1 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( p ) {
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return 6.0 + ( ( p*p ) / ( 1.0-p ) );
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],539:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace geometric
*/
var geometric = {};

/**
* @name cdf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/cdf}
*/
setReadOnly( geometric, 'cdf', require( '@stdlib/math/base/dist/geometric/cdf' ) );

/**
* @name entropy
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/entropy}
*/
setReadOnly( geometric, 'entropy', require( '@stdlib/math/base/dist/geometric/entropy' ) );

/**
* @name Geometric
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/ctor}
*/
setReadOnly( geometric, 'Geometric', require( '@stdlib/math/base/dist/geometric/ctor' ) );

/**
* @name kurtosis
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/kurtosis}
*/
setReadOnly( geometric, 'kurtosis', require( '@stdlib/math/base/dist/geometric/kurtosis' ) );

/**
* @name logcdf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/logcdf}
*/
setReadOnly( geometric, 'logcdf', require( '@stdlib/math/base/dist/geometric/logcdf' ) );

/**
* @name logpmf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/logpmf}
*/
setReadOnly( geometric, 'logpmf', require( '@stdlib/math/base/dist/geometric/logpmf' ) );

/**
* @name mean
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/mean}
*/
setReadOnly( geometric, 'mean', require( '@stdlib/math/base/dist/geometric/mean' ) );

/**
* @name median
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/median}
*/
setReadOnly( geometric, 'median', require( '@stdlib/math/base/dist/geometric/median' ) );

/**
* @name mgf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/mgf}
*/
setReadOnly( geometric, 'mgf', require( '@stdlib/math/base/dist/geometric/mgf' ) );

/**
* @name mode
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/mode}
*/
setReadOnly( geometric, 'mode', require( '@stdlib/math/base/dist/geometric/mode' ) );

/**
* @name pmf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/pmf}
*/
setReadOnly( geometric, 'pmf', require( '@stdlib/math/base/dist/geometric/pmf' ) );

/**
* @name quantile
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/quantile}
*/
setReadOnly( geometric, 'quantile', require( '@stdlib/math/base/dist/geometric/quantile' ) );

/**
* @name skewness
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/skewness}
*/
setReadOnly( geometric, 'skewness', require( '@stdlib/math/base/dist/geometric/skewness' ) );

/**
* @name stdev
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/stdev}
*/
setReadOnly( geometric, 'stdev', require( '@stdlib/math/base/dist/geometric/stdev' ) );

/**
* @name variance
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/geometric/variance}
*/
setReadOnly( geometric, 'variance', require( '@stdlib/math/base/dist/geometric/variance' ) );


// EXPORTS //

module.exports = geometric;

},{"@stdlib/math/base/dist/geometric/cdf":531,"@stdlib/math/base/dist/geometric/ctor":534,"@stdlib/math/base/dist/geometric/entropy":536,"@stdlib/math/base/dist/geometric/kurtosis":537,"@stdlib/math/base/dist/geometric/logcdf":541,"@stdlib/math/base/dist/geometric/logpmf":545,"@stdlib/math/base/dist/geometric/mean":548,"@stdlib/math/base/dist/geometric/median":550,"@stdlib/math/base/dist/geometric/mgf":553,"@stdlib/math/base/dist/geometric/mode":556,"@stdlib/math/base/dist/geometric/pmf":559,"@stdlib/math/base/dist/geometric/quantile":563,"@stdlib/math/base/dist/geometric/skewness":566,"@stdlib/math/base/dist/geometric/stdev":568,"@stdlib/math/base/dist/geometric/variance":570,"@stdlib/utils/define-read-only-property":1425}],540:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5 );
* var y = logcdf( 3.0 );
* // returns ~-0.065
*
* y = logcdf( 1.0 );
* // returns ~-0.288
*/
function factory( p ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return nan;
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return NINF;
		}
		if ( x === PINF ) {
			return 0.0;
		}
		x = floor( x );
		return log1p( -pow( 1.0 - p, x + 1.0 ) );
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":543,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],541:[function(require,module,exports){
'use strict';

/**
* Geometric distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/geometric/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/geometric/logcdf' );
*
* var y = logcdf( 2.0, 0.5 );
* // returns ~-0.134
*
* y = logcdf( 2.0, 0.1 );
* // returns ~-1.306
*
* var mylogcdf = logcdf.factory( 0.5 );
* y = mylogcdf( 3.0 );
* // returns ~-0.065
*
* y = mylogcdf( 1.0 );
* // returns ~-0.288
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":540,"./logcdf.js":542,"@stdlib/utils/define-read-only-property":1425}],542:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.5 );
* // returns ~-0.134
* @example
* var y = logcdf( 2.0, 0.1 );
* // returns ~-1.306
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logcdf( NaN, 0.5 );
* // returns NaN
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
* @example
* // Invalid probability
* var y = logcdf( 2.0, 1.4 );
* // returns NaN
*/
function logcdf( x, p ) {
	if (
		isnan( x ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	if ( x === PINF ) {
		return 0.0;
	}
	x = floor( x );
	return log1p( -pow( 1.0 - p, x + 1.0 ) );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],543:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an invalid geometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 3.14 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],544:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 0.5 );
* var y = logpmf( 3.0 );
* // returns ~-2.773
*
* y = logpmf( 1.0 );
* // returns ~-1.386
*/
function factory( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return nan;
	}
	return logpmf;

	/**
	* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {NonPositiveNumber} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		var q;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) ) {
			q = 1.0 - p;
			return ln( p ) + (x * ln( q ));
		}
		return NINF;
	} // end FUNCTION logpmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":547,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],545:[function(require,module,exports){
'use strict';

/**
* Geometric distribution logarithm of probability mass function (PMF).
*
* @module @stdlib/math/base/dist/geometric/logpmf
*
* @example
* var logpmf = require( '@stdlib/math/base/dist/geometric/logpmf' );
*
* var y = logpmf( 4.0, 0.3 );
* // returns ~-2.631
*
* y = logpmf( 2.0, 0.7 );
* // returns ~-2.765
*
* var mylogpmf = logpmf.factory( 0.5 );
* y = mylogpmf( 3.0 );
* // returns ~-2.773
*
* y = mylogpmf( 1.0 );
* // returns ~-1.386
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpmf = require( './logpmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpmf, 'factory', factory );


// EXPORTS //

module.exports = logpmf;

},{"./factory.js":544,"./logpmf.js":546,"@stdlib/utils/define-read-only-property":1425}],546:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {NonPositiveNumber} logarithm of PMF
*
* @example
* var y = logpmf( 4.0, 0.3 );
* // returns ~-2.631
* @example
* var y = logpmf( 2.0, 0.7 );
* // returns ~-2.765
* @example
* var y = logpmf( -1.0, 0.5 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpmf( 0.0, NaN );
* // returns NaN
* @example
* var y = logpmf( NaN, 0.5 );
* // returns NaN
* @example
* // Invalid success probability:
* var y = logpmf( 2.0, 1.5 );
* // returns NaN
*/
function logpmf( x, p ) {
	var q;
	if ( isnan( x ) || isnan( p ) ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( isNonNegativeInteger( x ) ) {
		q = 1.0 - p;
		return ln( p ) + (x * ln( q ));
	}
	return NINF;
} // end FUNCTION logpmf()


// EXPORTS //

module.exports = logpmf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],547:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability mass function (PMF) for an invalid geometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpmf( 2.0 );
* // returns NaN
*/
function logpmf() {
	return NaN;
} // end FUNCTION logpmf()


// EXPORTS //

module.exports = logpmf;

},{}],548:[function(require,module,exports){
'use strict';

/**
* Geometric distribution expected value.
*
* @module @stdlib/math/base/dist/geometric/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/geometric/mean' );
*
* var v = mean( 0.1 );
* // returns 9.0
*
* v = mean( 0.5 );
* // returns 1.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":549}],549:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 0.1 );
* // returns 9
* @example
* var v = mean( 0.5 );
* // returns 1
* @example
* var v = mean( 1.1 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 1.0 - p ) / p;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],550:[function(require,module,exports){
'use strict';

/**
* Geometric distribution median.
*
* @module @stdlib/math/base/dist/geometric/median
*
* @example
* var median = require( '@stdlib/math/base/dist/geometric/median' );
*
* var v = median( 0.1 );
* // returns 6
*
* v = median( 0.5 );
* // returns 0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":551}],551:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var log2 = require( '@stdlib/math/base/special/log2' );


// MAIN //

/**
* Returns the median of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 0.1 );
* // returns 6
* @example
* var v = median( 0.5 );
* // returns 0
* @example
* var v = median( 1.1 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ceil( -1.0 / ( log2( 1.0-p ) ) ) - 1.0;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ceil":1232,"@stdlib/math/base/special/log2":1304}],552:[function(require,module,exports){
'use strict';

// MODULES //

var isProbability = require( '@stdlib/math/base/assert/is-probability' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = mfactory( 0.8 );
* var y = mgf( -0.2 );
* // returns ~0.783
*/
function factory( p ) {
	if ( !isProbability( p ) ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a geometric distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var et;
		var q;
		if ( isnan( t ) ) {
			return NaN;
		}
		q = 1.0 - p;
		if ( t >= -ln( q ) ) {
			return NaN;
		}
		et = exp( t );
		return ( p * et ) / ( 1.0 - (q * et ));
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":555,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-probability":57,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300}],553:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a geometric distribution.
*
* @module @stdlib/math/base/dist/geometric/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/geometric/mgf' );
*
* var y = mgf( 0.2, 0.5 );
* // returns ~1.569
*
* y = mgf( 0.4, 0.5 );
* // returns ~2.936
*
* var mymgf = mgf.factory( 0.8 );
* y = mymgf( -0.2 );
* // returns ~0.783
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":552,"./mgf.js":554,"@stdlib/utils/define-read-only-property":1425}],554:[function(require,module,exports){
'use strict';

// MODULES //

var isProbability = require( '@stdlib/math/base/assert/is-probability' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a geometric distribution with success probability `p` at a value `t`.
*
* @param {number} t - input value
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.2, 0.5 );
* // returns ~1.569
* @example
* var y = mgf( 0.4, 0.5 );
* // returns ~2.936
* @example
* // Case: t >= -ln(1-p)
* var y = mgf( 0.8, 0.5 )
* // returns NaN
* @example
* var y = mgf( NaN, 0.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
* @example
* var y = mgf( -2.0, -1.0 );
* // returns NaN
* @example
* var y = mgf( 0.2, 2.0 );
* // returns NaN
*/
function mgf( t, p ) {
	var et;
	var q;
	if ( isnan( t ) ) {
		return NaN;
	}
	if ( !isProbability( p ) ) {
		return NaN;
	}
	q = 1.0 - p;
	if ( t >= -ln( q ) ) {
		return NaN;
	}
	et = exp( t );
	return ( p * et ) / ( 1.0 - (q * et) );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-probability":57,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300}],555:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid geometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],556:[function(require,module,exports){
'use strict';

/**
* Geometric distribution mode.
*
* @module @stdlib/math/base/dist/geometric/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/geometric/mode' );
*
* var v = mode( 0.1 );
* // returns 0
*
* v = mode( 0.5 );
* // returns 0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":557}],557:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 0.1 );
* // returns 0
* @example
* var v = mode( 0.5 );
* // returns 0
* @example
* var v = mode( 1.1 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return 0;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],558:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 0.5 );
* var y = pmf( 3.0 );
* // returns 0.0625
*
* y = pmf( 1.0 );
* // returns 0.25
*/
function factory( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return nan;
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var q;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) ) {
			q = 1.0 - p;
			return p * pow( q, x );
		}
		return 0.0;
	} // end FUNCTION pmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":560,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/pow":1311}],559:[function(require,module,exports){
'use strict';

/**
* Geometric distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dist/geometric/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dist/geometric/pmf' );
*
* var y = pmf( 4.0, 0.3 );
* // returns ~0.072
*
* y = pmf( 2.0, 0.7 );
* // returns ~0.063
*
* y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* var mypmf = pmf.factory( 0.5 );
* y = mypmf( 3.0 );
* // returns 0.0625
*
* y = mypmf( 1.0 );
* // returns 0.25
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":558,"./pmf.js":561,"@stdlib/utils/define-read-only-property":1425}],560:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability mass function (PMF) for an invalid geometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pmf( 2.0 );
* // returns NaN
*/
function pmf() {
	return NaN;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{}],561:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 4.0, 0.3 );
* // returns ~0.072
* @example
* var y = pmf( 2.0, 0.7 );
* // returns ~0.063
* @example
* var y = pmf( -1.0, 0.5 );
* // returns 0.0
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
* @example
* // Invalid success probability:
* var y = pmf( 2.0, 1.5 );
* // returns NaN
*/
function pmf( x, p ) {
	var q;
	if ( isnan( x ) || isnan( p ) ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( isNonNegativeInteger( x ) ) {
		q = 1.0 - p;
		return p * pow( q, x );
	}
	return 0.0;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/pow":1311}],562:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var max = require( '@stdlib/math/base/special/max' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns 0
*
* y = quantile( 0.8 );
* // returns 3
*
* y = quantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( p ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a geometric distribution.
	*
	* @private
	* @param {Probability} r - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( r ) {
		if ( isnan( r ) || r < 0.0 || r > 1.0 ) {
			return NaN;
		}
		if ( r === 1.0 ) {
			return PINF;
		}
		return max( 0.0, ceil( (ln(1.0-r) / log1p(-p)) - (1.0 + 1e-12) ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":564,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ceil":1232,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/constants/float64-pinf":1414}],563:[function(require,module,exports){
'use strict';

/**
* Geometric distribution quantile function.
*
* @module @stdlib/math/base/dist/geometric/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/geometric/quantile' );
*
*
* var myquantile = quantile.factory( 0.4 );
* y = myquantile( 0.4 );
* // returns 0
*
* y = myquantile( 0.8 );
* // returns 3
*
* y = myquantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":562,"./quantile.js":565,"@stdlib/utils/define-read-only-property":1425}],564:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid geometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],565:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var max = require( '@stdlib/math/base/special/max' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the quantile function for a geometric distribution with success probability `p` at a probability `r`.
*
* @param {Probability} r - input value
* @param {Probability} p - success probability
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.4 );
* // returns 3
* @example
* var y = quantile( 0.5, 0.4 );
* // returns 1
* @example
* var y = quantile( 0.9, 0.1 );
* // returns 21
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.8 );
* // returns NaN
* @example
* var y = quantile( 0.4, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.5 );
* // returns NaN
*/
function quantile( r, p ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( isnan( r ) || r < 0.0 || r > 1.0 ) {
		return NaN;
	}
	if ( r === 1.0 ) {
		return PINF;
	}
	return max( 0.0, ceil( (ln(1.0-r) / log1p(-p))- ( 1 + 1e-12 ) ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ceil":1232,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/constants/float64-pinf":1414}],566:[function(require,module,exports){
'use strict';

/**
* Geometric distribution skewness.
*
* @module @stdlib/math/base/dist/geometric/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/geometric/skewness' );
*
* var v = skewness( 0.1 );
* // returns ~2.003
*
* v = skewness( 0.5 );
* // returns ~2.121
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":567}],567:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 0.1 );
* // returns 9
* @example
* var v = skewness( 0.5 );
* // returns 1
* @example
* var v = skewness( 1.1 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( p ) {
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return ( 2.0-p ) / sqrt( 1.0-p );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],568:[function(require,module,exports){
'use strict';

/**
* Geometric distribution standard deviation.
*
* @module @stdlib/math/base/dist/geometric/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/geometric/stdev' );
*
* var v = stdev( 0.1 );
* // returns ~9.487
*
* v = stdev( 0.5 );
* // returns ~1.414
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":569}],569:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.1 );
* // returns ~9.487
* @example
* var v = stdev( 0.5 );
* // returns ~1.414
* @example
* var v = stdev( 1.1 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( p ) {
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return sqrt( 1.0-p ) / p;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],570:[function(require,module,exports){
'use strict';

/**
* Geometric distribution variance.
*
* @module @stdlib/math/base/dist/geometric/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/geometric/variance' );
*
* var v = variance( 0.1 );
* // returns ~90.0
*
* v = variance( 0.5 );
* // returns 2.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":571}],571:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.1 );
* // returns ~90.0
* @example
* var v = variance( 0.5 );
* // returns 2.0
* @example
* var v = variance( 1.1 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( p ) {
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return ( 1.0-p ) / ( p*p );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],572:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.965
* @example
* var y = cdf( -2.0, 0.0, 3.0 );
* // returns ~0.143
* @example
* var y = cdf( 0.0, 0.0, 1.0 );
* // returns ~0.368
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = cdf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, mu, beta ) {
	var z;
	if ( isnan( x ) || isnan( mu ) || isnan( beta ) ) {
		return NaN;
	}
	if ( beta <= 0.0 ) {
		return NaN;
	}
	z = ( x - mu ) / beta;
	return exp( -exp( -z ) );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],573:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 3.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.965
*
* y = cdf( -2.0 );
* // returns ~0.143
*/
function factory( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( -2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / beta;
		return exp( -exp( -z ) );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":575,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],574:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/gumbel/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/gumbel/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.965
*
* y = cdf( 0.0, 0.0, 3.0 );
* // returns ~0.368
*
* var myCDF = cdf.factory( 2.0, 3.0 );
* y = myCDF( 10.0 );
* // returns ~0.933
*
* y = myCDF( 2.0 );
* // returns ~0.368
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":572,"./factory.js":573,"@stdlib/utils/define-read-only-property":1425}],575:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Gumbel distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 2.1 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],576:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/gumbel/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/gumbel/kurtosis' );
var mean = require( '@stdlib/math/base/dist/gumbel/mean' );
var median = require( '@stdlib/math/base/dist/gumbel/median' );
var mode = require( '@stdlib/math/base/dist/gumbel/mode' );
var skewness = require( '@stdlib/math/base/dist/gumbel/skewness' );
var stdev = require( '@stdlib/math/base/dist/gumbel/stdev' );
var variance = require( '@stdlib/math/base/dist/gumbel/variance' );
var cdf = require( '@stdlib/math/base/dist/gumbel/cdf' );
var logcdf = require( '@stdlib/math/base/dist/gumbel/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/gumbel/logpdf' );
var mgf = require( '@stdlib/math/base/dist/gumbel/mgf' );
var pdf = require( '@stdlib/math/base/dist/gumbel/pdf' );
var quantile = require( '@stdlib/math/base/dist/gumbel/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function gumbelCDF( x ) {
	return cdf( x, this.mu, this.beta );
} // end FUNCTION gumbelCDF()

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function gumbelLogCDF( x ) {
	return logcdf( x, this.mu, this.beta );
} // end FUNCTION gumbelLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function gumbelLogPDF( x ) {
	return logpdf( x, this.mu, this.beta );
} // end FUNCTION gumbelLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function gumbelMGF( t ) {
	return mgf( t, this.mu, this.beta );
} // end FUNCTION gumbelMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function gumbelPDF( x ) {
	return pdf( x, this.mu, this.beta );
} // end FUNCTION gumbelPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function gumbelQuantile( p ) {
	return quantile( p, this.mu, this.beta );
} // end FUNCTION gumbelQuantile()


// MAIN //

/**
* Gumbel distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `beta` must be a positive number
* @returns {Gumbel} distribution instance
*
* @example
* var gumbel = new Gumbel( 1.0, 1.0 );
*
* var y = gumbel.cdf( 0.8 );
* // returns 0.8
*
* var mu = gumbel.mean;
* // returns 0.5
*/
function Gumbel() {
	var beta;
	var mu;
	if ( !(this instanceof Gumbel) ) {
		if ( arguments.length === 0 ) {
			return new Gumbel();
		}
		return new Gumbel( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		mu = 0.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
} // end FUNCTION Gumbel()

/**
* Gumbel distribution differential entropy.
*
* @memberof Gumbel.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.entropy;
* // returns ~-0.869
*/
Object.defineProperty( Gumbel.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.beta );
	}
});

/**
* Gumbel distribution excess kurtosis.
*
* @memberof Gumbel.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.kurtosis;
* // returns ~0.082
*/
Object.defineProperty( Gumbel.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.beta );
	}
});

/**
* Gumbel distribution expected value.
*
* @memberof Gumbel.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.mean;
* // returns 0.25
*/
Object.defineProperty( Gumbel.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.beta );
	}
});

/**
* Gumbel distribution median.
*
* @memberof Gumbel.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.median;
* // returns ~0.239
*/
Object.defineProperty( Gumbel.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.beta );
	}
});

/**
* Gumbel distribution mode.
*
* @memberof Gumbel.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.mode;
* // returns 0.25
*/
Object.defineProperty( Gumbel.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.beta );
	}
});

/**
* Gumbel distribution skewness.
*
* @memberof Gumbel.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.skewness;
* // returns ~0.011
*/
Object.defineProperty( Gumbel.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.beta );
	}
});

/**
* Gumbel distribution standard deviation.
*
* @memberof Gumbel.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.stdev;
* // returns ~0.105
*/
Object.defineProperty( Gumbel.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.beta );
	}
});

/**
* Gumbel distribution variance.
*
* @memberof Gumbel.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.variance;
* // returns ~0.011
*/
Object.defineProperty( Gumbel.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Gumbel.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.cdf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Gumbel.prototype, 'cdf', gumbelCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Gumbel.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.logcdf( 0.8 );
* // returns ~-2.0557
*/
setReadOnly( Gumbel.prototype, 'logcdf', gumbelLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Gumbel.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.logpdf( 0.8 );
* // returns ~-2.0557
*/
setReadOnly( Gumbel.prototype, 'logpdf', gumbelLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Gumbel.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.mgf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Gumbel.prototype, 'mgf', gumbelMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Gumbel.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.pdf( 0.8 );
* // returns ~0.013
*/
setReadOnly( Gumbel.prototype, 'pdf', gumbelPDF );

/**
* Evaluates the quantile function.
*
* @memberof Gumbel.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.quantile( 0.5 );
* // returns ~0.314
*/
setReadOnly( Gumbel.prototype, 'quantile', gumbelQuantile );


// EXPORTS //

module.exports = Gumbel;

},{"@stdlib/assert/is-nan":12,"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/gumbel/cdf":574,"@stdlib/math/base/dist/gumbel/entropy":579,"@stdlib/math/base/dist/gumbel/kurtosis":580,"@stdlib/math/base/dist/gumbel/logcdf":584,"@stdlib/math/base/dist/gumbel/logpdf":588,"@stdlib/math/base/dist/gumbel/mean":591,"@stdlib/math/base/dist/gumbel/median":593,"@stdlib/math/base/dist/gumbel/mgf":596,"@stdlib/math/base/dist/gumbel/mode":599,"@stdlib/math/base/dist/gumbel/pdf":602,"@stdlib/math/base/dist/gumbel/quantile":606,"@stdlib/math/base/dist/gumbel/skewness":609,"@stdlib/math/base/dist/gumbel/stdev":611,"@stdlib/math/base/dist/gumbel/variance":613,"@stdlib/utils/define-read-only-property":1425}],577:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution constructor.
*
* @module @stdlib/math/base/dist/gumbel/ctor
*
* @example
* var Gumbel = require( '@stdlib/math/base/dist/gumbel/ctor' );
*
* var gumbel = new Gumbel( 1.0, 1.0 );
*
* var y = gumbel.cdf( 0.8 );
* // returns ~0.295
*
* var mean = gumbel.mean;
* // returns ~1.578
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":576}],578:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/math/constants/float64-eulergamma' );


// MAIN //

/**
* Returns the differential entropy for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.577
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.27
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ln( beta ) + GAMMA + 1.0;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-eulergamma":1393}],579:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution differential entropy.
*
* @module @stdlib/math/base/dist/gumbel/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/gumbel/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.577
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.27
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":578}],580:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/gumbel/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/gumbel/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 2.4
*
* y = kurtosis( 4.0, 2.0 );
* // returns 2.4
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":581}],581:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 2.4
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 2.4
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 12.0 / 5.0;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],582:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace gumbel
*/
var gumbel = {};

/**
* @name cdf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/cdf}
*/
setReadOnly( gumbel, 'cdf', require( '@stdlib/math/base/dist/gumbel/cdf' ) );

/**
* @name entropy
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/entropy}
*/
setReadOnly( gumbel, 'entropy', require( '@stdlib/math/base/dist/gumbel/entropy' ) );

/**
* @name Gumbel
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/ctor}
*/
setReadOnly( gumbel, 'Gumbel', require( '@stdlib/math/base/dist/gumbel/ctor' ) );

/**
* @name kurtosis
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/kurtosis}
*/
setReadOnly( gumbel, 'kurtosis', require( '@stdlib/math/base/dist/gumbel/kurtosis' ) );

/**
* @name logcdf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/logcdf}
*/
setReadOnly( gumbel, 'logcdf', require( '@stdlib/math/base/dist/gumbel/logcdf' ) );

/**
* @name logpdf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/logpdf}
*/
setReadOnly( gumbel, 'logpdf', require( '@stdlib/math/base/dist/gumbel/logpdf' ) );

/**
* @name mean
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/mean}
*/
setReadOnly( gumbel, 'mean', require( '@stdlib/math/base/dist/gumbel/mean' ) );

/**
* @name median
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/median}
*/
setReadOnly( gumbel, 'median', require( '@stdlib/math/base/dist/gumbel/median' ) );

/**
* @name mgf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/mgf}
*/
setReadOnly( gumbel, 'mgf', require( '@stdlib/math/base/dist/gumbel/mgf' ) );

/**
* @name mode
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/mode}
*/
setReadOnly( gumbel, 'mode', require( '@stdlib/math/base/dist/gumbel/mode' ) );

/**
* @name pdf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/pdf}
*/
setReadOnly( gumbel, 'pdf', require( '@stdlib/math/base/dist/gumbel/pdf' ) );

/**
* @name quantile
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/quantile}
*/
setReadOnly( gumbel, 'quantile', require( '@stdlib/math/base/dist/gumbel/quantile' ) );

/**
* @name skewness
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/skewness}
*/
setReadOnly( gumbel, 'skewness', require( '@stdlib/math/base/dist/gumbel/skewness' ) );

/**
* @name stdev
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/stdev}
*/
setReadOnly( gumbel, 'stdev', require( '@stdlib/math/base/dist/gumbel/stdev' ) );

/**
* @name variance
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/gumbel/variance}
*/
setReadOnly( gumbel, 'variance', require( '@stdlib/math/base/dist/gumbel/variance' ) );


// EXPORTS //

module.exports = gumbel;

},{"@stdlib/math/base/dist/gumbel/cdf":574,"@stdlib/math/base/dist/gumbel/ctor":577,"@stdlib/math/base/dist/gumbel/entropy":579,"@stdlib/math/base/dist/gumbel/kurtosis":580,"@stdlib/math/base/dist/gumbel/logcdf":584,"@stdlib/math/base/dist/gumbel/logpdf":588,"@stdlib/math/base/dist/gumbel/mean":591,"@stdlib/math/base/dist/gumbel/median":593,"@stdlib/math/base/dist/gumbel/mgf":596,"@stdlib/math/base/dist/gumbel/mode":599,"@stdlib/math/base/dist/gumbel/pdf":602,"@stdlib/math/base/dist/gumbel/quantile":606,"@stdlib/math/base/dist/gumbel/skewness":609,"@stdlib/math/base/dist/gumbel/stdev":611,"@stdlib/math/base/dist/gumbel/variance":613,"@stdlib/utils/define-read-only-property":1425}],583:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} log CDF
*
* @example
* var logcdf = factory( 0.0, 3.0 );
*
* var y = logcdf( 10.0 );
* // returns ~-0.036
*
* y = logcdf( -2.0 );
* // returns ~-1.945
*/
function factory( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return nan;
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logarithm of CDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / beta;
		return -exp( -z );
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":586,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],584:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution logarithm of the cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/gumbel/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/gumbel/logcdf' );
*
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.036
*
* y = logcdf( 0.0, 0.0, 3.0 );
* // returns ~-1
*
* var myLCDF = logcdf.factory( 2.0, 3.0 );
* y = myLCDF( 10.0 );
* // returns ~-0.069
*
* y = myLCDF( 2.0 );
* // returns ~-1
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":583,"./logcdf.js":585,"@stdlib/utils/define-read-only-property":1425}],585:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logarithm of CDF
*
* @example
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.036
* @example
* var y = logcdf( -2.0, 0.0, 3.0 );
* // returns ~-1.945
* @example
* var y = logcdf( 0.0, 0.0, 1.0 );
* // returns ~-1
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logcdf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function logcdf( x, mu, beta ) {
	var z;
	if ( isnan( x ) || isnan( mu ) || isnan( beta ) ) {
		return NaN;
	}
	if ( beta <= 0.0 ) {
		return NaN;
	}
	z = ( x - mu ) / beta;
	return -exp( -z );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],586:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an invalid Gumbel distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 2.1 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],587:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logPDF
*/
function factory( mu, beta ) {
	var lbeta;
	if ( isnan( mu ) || isnan( beta ) ) {
		return nan;
	}
	if ( beta <= 0.0 ) {
		return nan;
	}
	lbeta = ln( beta );
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === NINF ) {
			return 0.0;
		}
		z = ( x - mu ) / beta;
		return -z - exp( -z ) - lbeta;
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":590,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],588:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/gumbel/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/gumbel/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.137
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-1.693
*
* y = mylogpdf( 12.0 );
* // returns ~-2.064
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":587,"./logpdf.js":589,"@stdlib/utils/define-read-only-property":1425}],589:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logarithm of PDF
*
* @example
* var y = logpdf( 0.0, 0.0, 2.0 );
* // returns ~-1.693
* @example
* var y = logpdf( 0.0, 0.0, 1.0 );
* // returns ~-1
* @example
* var y = logpdf( 1.0, 3.0, 2.0 );
* // returns ~-2.408
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, mu, beta ) {
	var z;
	if ( isnan( x ) || isnan( mu ) || isnan( beta ) ) {
		return NaN;
	}
	if ( beta <= 0.0 ) {
		return NaN;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	z = ( x - mu ) / beta;
	return -z - exp( -z ) - ln( beta );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],590:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (logpdf) for an invalid Gumbel distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 2.1 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],591:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution mean.
*
* @module @stdlib/math/base/dist/gumbel/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/gumbel/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns ~0.577
*
* y = mean( 4.0, 2.0 );
* // returns ~5.154
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":592}],592:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var GAMMA = require( '@stdlib/math/constants/float64-eulergamma' );


// MAIN //

/**
* Returns the mean for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} mean
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns ~0.577
* @example
* var y = mean( 5.0, 2.0 );
* // returns ~6.154
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu + ( beta * GAMMA );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-eulergamma":1393}],593:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution median.
*
* @module @stdlib/math/base/dist/gumbel/median
*
* @example
* var median = require( '@stdlib/math/base/dist/gumbel/median' );
*
* var y = median( 0.0, 1.0 );
* // returns ~0.367
*
* y = median( 4.0, 2.0 );
* // returns ~4.733
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":594}],594:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN2 = require( '@stdlib/math/constants/float64-ln-two' );


// VARIABLES //

var LLN2 = ln( LN2 );


// MAIN //

/**
* Returns the median for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns ~0.367
* @example
* var y = median( 5.0, 2.0 );
* // returns ~5.733
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu - ( beta * LLN2 );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ln-two":1403}],595:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Gumbel distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.0, 3.0 );
*
* var y = mgf( 1.5 );
* // returns ~0.27
*
* y = mgf( -1.0 );
* // returns 6.0
*/
function factory( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Gumbel distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( t >= 1.0/beta ) {
			return NaN;
		}
		return gamma( 1.0 - (beta * t) ) * exp( mu * t );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":598,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268}],596:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Gumbel distribution.
*
* @module @stdlib/math/base/dist/gumbel/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/gumbel/mgf' );
*
* var y = mgf( -1.0, 0.0, 3.0 );
* // returns 6.0
*
* y = mgf( 0.1, 0.0, 3.0 );
* // returns ~1.298
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* var myMGF = mgf.factory( 0.0, 3.0 );
*
* y = myMGF( -1.5 );
* // returns ~52.343
*
* y = myMGF( -1.0 );
* // returns 6.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":595,"./mgf.js":597,"@stdlib/utils/define-read-only-property":1425}],597:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Gumbel distribution with location parameter `mu` and scale parameter `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( -1.0, 0.0, 3.0 );
* // returns 6.0
* @example
* var y = mgf( 0.1, 0.0, 3.0 );
* // returns ~1.298
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Non-positive scale parameter:
* var y = mgf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function mgf( t, mu, beta ) {
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0 ||
		t >= 1.0/beta
	) {
		return NaN;
	}
	return gamma( 1.0 - (beta * t) ) * exp( mu * t );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268}],598:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid Gumbel distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],599:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution mode.
*
* @module @stdlib/math/base/dist/gumbel/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/gumbel/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":600}],600:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],601:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*/
function factory( mu, beta ) {
	if ( isnan( mu ) || isnan( beta ) ) {
		return nan;
	}
	if ( beta <= 0.0 ) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*/
	function pdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === NINF ) {
			return 0.0;
		}
		z = ( x - mu ) / beta;
		return ( 1.0 / beta ) * exp( -z - exp( -z ) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":603,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/constants/float64-ninf":1411}],602:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/gumbel/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/gumbel/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.118
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns ~0.184
*
* y = myPDF( 12.0 );
* // returns ~0.127
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":601,"./pdf.js":604,"@stdlib/utils/define-read-only-property":1425}],603:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Gumbel distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 2.1 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],604:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.0, 0.0, 2.0 );
* // returns ~0.184
* @example
* var y = pdf( 0.0, 0.0, 1.0 );
* // returns ~0.368
* @example
* var y = pdf( 1.0, 3.0, 2.0 );
* // returns ~0.09
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, mu, beta ) {
	var z;
	if ( isnan( x ) || isnan( mu ) || isnan( beta ) ) {
		return NaN;
	}
	if ( beta <= 0.0 ) {
		return NaN;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	z = ( x - mu ) / beta;
	return ( 1.0 / beta ) * exp( -z - exp( -z ) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/constants/float64-ninf":1411}],605:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*/
function factory( mu, beta ) {
	if ( isnan( mu ) || isnan( beta ) ) {
		return nan;
	}
	if ( beta <= 0.0 ) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Gumbel distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu - (beta * ln( -ln( p ) ));
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":607,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300}],606:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution quantile function.
*
* @module @stdlib/math/base/dist/gumbel/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/gumbel/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.4999
*
* var myQuantile = quantile.factory( 8.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns ~8.733
*
* y = myQuantile( 0.7 );
* // returns ~10.062
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// EXPORTS //

module.exports = require( './quantile.js' );
setReadOnly( module.exports, 'factory', require( './factory.js' ) );

},{"./factory.js":605,"./quantile.js":608,"@stdlib/utils/define-read-only-property":1425}],607:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Gumbel distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],608:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the quantile function for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.5
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~4.733
* @example
* var y = quantile( 0.5, 4.0, 4.0 );
* // returns ~5.466
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, beta ) {
	if ( isnan( mu ) || isnan( beta ) ) {
		return NaN;
	}
	if ( beta <= 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return mu - ( beta * ln( -ln( p ) ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300}],609:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution skewness.
*
* @module @stdlib/math/base/dist/gumbel/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/gumbel/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns ~1.14
*
* y = skewness( 4.0, 2.0 );
* // returns ~1.14
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":610}],610:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

var SKEWNESS = 12.0 * sqrt( 6.0 ) * zeta( 3.0 ) / ( PI*PI*PI );


// MAIN //

/**
* Returns the skewness for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns ~1.14
* @example
* var y = skewness( 5.0, 2.0 );
* // returns ~1.14
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return SKEWNESS;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/riemann-zeta":1323,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],611:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution standard deviation.
*
* @module @stdlib/math/base/dist/gumbel/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/gumbel/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.283
*
* y = stdev( 4.0, 2.0 );
* // returns ~2.565
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":612}],612:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

var SQRT6 = sqrt( 6.0 );


// MAIN //

/**
* Returns the standard deviation for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.283
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~2.565
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( PI / SQRT6 ) * beta;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],613:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution variance.
*
* @module @stdlib/math/base/dist/gumbel/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/gumbel/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~1.645
*
* y = variance( 4.0, 2.0 );
* // returns ~6.58
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":614}],614:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );


// MAIN //

/**
* Returns the variance for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~1.645
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~6.58
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( PI_SQUARED / 6.0 ) * beta * beta;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pi-squared":1412}],615:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var pmf = require( '@stdlib/math/base/dist/hypergeometric/pmf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var sum = require( './sum.js' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 1.0, 8, 4, 2 );
* // returns ~0.786
* @example
* var y = cdf( 1.5, 8, 4, 2 );
* // returns ~0.786
* @example
* var y = cdf( 2.0, 8, 4, 2 );
* // returns 1.0
* @example
* var y = cdf( 0, 8, 4, 2 );
* // returns ~0.214
* @example
* var y = cdf( NaN, 10, 5, 2 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 5, 2 );
* // returns NaN
* @example
* var y = cdf( 0.0, 10, NaN, 2 );
* // returns NaN
* @example
* var y = cdf( 0.0, 10, 5, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 10.5, 5, 2 );
* // returns NaN
* @example
* var y = cdf( 2.0, 10, 1.5, 2 );
* // returns NaN
* @example
* var y = cdf( 2.0, 10, 5, -2.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 10, 5, 12 );
* // returns NaN
* @example
* var y = cdf( 2.0, 8, 3, 9 );
* // returns NaN
*/
function cdf( x, N, K, n ) {
	var denom;
	var probs;
	var num;
	var ret;
	var i;

	if (
		isnan( x ) ||
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return NaN;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	x = trunc( x );
	if ( x < max( 0, n + K - N ) ) {
		return 0.0;
	}
	if ( x >= min( n, K ) ) {
		return 1.0;
	}

	probs = new Array( x + 1 );
	probs[ x ] = pmf( x, N, K, n );

	// Use recurrence relation:
	// (x+1)( N - K - (n-x-1))P(X=x+1)=(K-x)(n-x)P(X=x)
	for ( i = x - 1; i >= 0; i-- ) {
		num = ( i + 1 ) * ( N - K - (n-i-1) );
		denom = ( K - i ) * ( n - i );
		probs[ i ] = ( num / denom ) * probs[ i + 1 ];
	}
	ret = sum( probs );
	return min( ret, 1.0 );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"./sum.js":619,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/hypergeometric/pmf":630,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/trunc":1349,"@stdlib/math/constants/float64-pinf":1414}],616:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var pmf = require( '@stdlib/math/base/dist/hypergeometric/pmf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );
var sum = require( './sum.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} CDF
*
* @example
* var mycdf = factory( 30, 20, 5 );
* var y = mycdf( 4.0 );
* // returns ~0.891
*
* y = mycdf( 1.0 );
* // returns ~0.031
*/
function factory( N, K, n ) {
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return nan;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var denom;
		var probs;
		var num;
		var ret;
		var i;

		if ( isnan( x ) ) {
			return NaN;
		}
		x = trunc( x );
		if ( x < max( 0, n + K - N ) ) {
			return 0.0;
		}
		if ( x >= min( n, K ) ) {
			return 1.0;
		}

		probs = new Array( x + 1 );
		probs[ x ] = pmf( x, N, K, n );

		// Use recurrence relation:
		// (x+1)( N - K - (n-x-1) )P(X=x+1)=(K-x)(n-x)P(X=x)
		for ( i = x - 1; i >= 0; i-- ) {
			num = ( i + 1 ) * ( N - K - (n-i-1) );
			denom = ( K - i ) * ( n - i );
			probs[ i ] = ( num / denom ) * probs[ i + 1 ];
		}
		ret = sum( probs );
		return min( ret, 1.0 );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":618,"./sum.js":619,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/hypergeometric/pmf":630,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/trunc":1349,"@stdlib/math/constants/float64-pinf":1414}],617:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/hypergeometric/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/hypergeometric/cdf' );
*
* var y = cdf( 1.0, 8, 4, 2 );
* // returns ~0.786
*
* y = cdf( 1.5, 8, 4, 2 );
* // returns ~0.786
*
* y = cdf( 2.0, 8, 4, 2 );
* // returns 1.0
*
* y = cdf( 0.0, 8, 4, 2 );
* // returns ~0.214
*
* var mycdf = factory( 30, 20, 5 );
* y = mycdf( 4.0 );
* // returns ~0.891
*
* y = mycdf( 1.0 );
* // returns ~0.031
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":615,"./factory.js":616,"@stdlib/utils/define-read-only-property":1425}],618:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid hypergeometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],619:[function(require,module,exports){
'use strict';

/**
* Computes the sum of elements in an array.
*
* @private
* @param {Array} arr - input array
* @returns {number} sum
*/
function sum( arr ) {
	var len;
	var s;
	var i;
	len = arr.length;
	s = 0;
	for ( i = 0; i < len; i++ ) {
		s += arr[ i ];
	}
	return s;
} // end FUNCTION sum()


// EXPORTS //

module.exports = sum;

},{}],620:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var kurtosis = require( '@stdlib/math/base/dist/hypergeometric/kurtosis' );
var mean = require( '@stdlib/math/base/dist/hypergeometric/mean' );
var mode = require( '@stdlib/math/base/dist/hypergeometric/mode' );
var skewness = require( '@stdlib/math/base/dist/hypergeometric/skewness' );
var stdev = require( '@stdlib/math/base/dist/hypergeometric/stdev' );
var variance = require( '@stdlib/math/base/dist/hypergeometric/variance' );
var cdf = require( '@stdlib/math/base/dist/hypergeometric/cdf' );
var pmf = require( '@stdlib/math/base/dist/hypergeometric/pmf' );
var quantile = require( '@stdlib/math/base/dist/hypergeometric/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function hypergeometricCDF( x ) {
	return cdf( x, this.N, this.K, this.n );
} // end FUNCTION hypergeometricCDF()

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated PMF
*/
function hypergeometricPMF( x ) {
	return pmf( x, this.N, this.K, this.n );
} // end FUNCTION hypergeometricPMF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {NonNegativeInteger} evaluated quantile function
*/
function hypergeometricQuantile( p ) {
	return quantile( p, this.N, this.K, this.n );
} // end FUNCTION hypergeometricQuantile()


// MAIN //

/**
* Hypergeometric distribution constructor.
*
* @constructor
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @throws {TypeError} `N` must be a non-negative integer
* @throws {TypeError} `K` must be a non-negative integer
* @throws {TypeError} `n` must be a non-negative integer
* @throws {RangeError} `K` must not exceed `N`
* @throws {RangeError} `n` must not exceed `N`
* @returns {Hypergeometric} distribution instance
*
* @example
* var hypergeometric = new Hypergeometric( 10, 5, 7 );
*
* var y = hypergeometric.cdf( 0.8 );
* // returns 0.0
*
* var mode = hypergeometric.mode;
* // returns 4.0
*/
function Hypergeometric( N, K, n ) {
	if ( !(this instanceof Hypergeometric) ) {
		return new Hypergeometric( N, K, n );
	}
	if ( !isNonNegativeInteger( N ) ) {
		throw new TypeError( 'invalid input argument. Population size `N` must be a non-negative integer. Value: `' + N + '`' );
	}
	if ( !isNonNegativeInteger( K ) ) {
		throw new TypeError( 'invalid input argument. Subpopulation size `K` must be a non-negative integer. Value: `' + K + '`' );
	}
	if ( !isNonNegativeInteger( n ) ) {
		throw new TypeError( 'invalid input argument. Number of draws `n` must be a non-negative integer. Value: `' + n + '`' );
	}
	if ( K > N ) {
		throw new RangeError( 'invalid input arguments. Subpopulation size `K` must be smaller than or equal to `N`.' );
	}
	if ( n > N ) {
		throw new RangeError( 'invalid input arguments. Number of draws `n` must be smaller than or equal to `N`.' );
	}
	Object.defineProperty( this, 'N', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return N;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( K > value ) {
				throw new RangeError( 'invalid value. Must be larger than or equal to `K`. Value: `' + value + '`' );
			}
			if ( n > value ) {
				throw new RangeError( 'invalid value. Must be larger than or equal to `n`. Value: `' + value + '`' );
			}
			N = value;
		}
	});
	Object.defineProperty( this, 'K', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return K;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( value > N ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );
			}
			K = value;
		}
	});
	Object.defineProperty( this, 'n', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return n;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( value > N ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );
			}
			n = value;
		}
	});
	return this;
} // end FUNCTION Hypergeometric()

/**
* Hypergeometric distribution excess kurtosis.
*
* @memberof Hypergeometric.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.kurtosis;
* // returns ~-0.276
*/
Object.defineProperty( Hypergeometric.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution expected value.
*
* @memberof Hypergeometric.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.mean;
* // returns 3.75
*/
Object.defineProperty( Hypergeometric.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution mode.
*
* @memberof Hypergeometric.prototype
* @name mode
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.mode;
* // returns 4.0
*/
Object.defineProperty( Hypergeometric.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution skewness.
*
* @memberof Hypergeometric.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.skewness;
* // returns ~-0.323
*/
Object.defineProperty( Hypergeometric.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution standard deviation.
*
* @memberof Hypergeometric.prototype
* @name stdev
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.stdev;
* // returns ~0.86
*/
Object.defineProperty( Hypergeometric.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution variance.
*
* @memberof Hypergeometric.prototype
* @name variance
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.variance;
* // returns ~0.74
*/
Object.defineProperty( Hypergeometric.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.N, this.K, this.n );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Hypergeometric.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {Probability} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.cdf( 0.5 );
* // returns ~0.214
*/
setReadOnly( Hypergeometric.prototype, 'cdf', hypergeometricCDF );

/**
* Evaluates the probability density function (PMF).
*
* @memberof Hypergeometric.prototype
* @name pmf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.pmf( 2.0 );
* // returns ~0.214
*/
setReadOnly( Hypergeometric.prototype, 'pmf', hypergeometricPMF );

/**
* Evaluates the quantile function.
*
* @memberof Hypergeometric.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {NonNegativeInteger} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.quantile( 0.8 );
* // returns 2.0
*/
setReadOnly( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );


// EXPORTS //

module.exports = Hypergeometric;

},{"@stdlib/assert/is-nonnegative-integer":16,"@stdlib/math/base/dist/hypergeometric/cdf":617,"@stdlib/math/base/dist/hypergeometric/kurtosis":622,"@stdlib/math/base/dist/hypergeometric/mean":625,"@stdlib/math/base/dist/hypergeometric/mode":627,"@stdlib/math/base/dist/hypergeometric/pmf":630,"@stdlib/math/base/dist/hypergeometric/quantile":634,"@stdlib/math/base/dist/hypergeometric/skewness":637,"@stdlib/math/base/dist/hypergeometric/stdev":639,"@stdlib/math/base/dist/hypergeometric/variance":641,"@stdlib/utils/define-read-only-property":1425}],621:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution constructor.
*
* @module @stdlib/math/base/dist/hypergeometric/ctor
*
* @example
* var Hypergeometric = require( '@stdlib/math/base/dist/hypergeometric/ctor' );
*
* var hypergeometric = new Hypergeometric( 40, 10, 8 );
*
* var y = hypergeometric.cdf( 2.8 );
* // returns ~0.688
*
* var mode = hypergeometric.mode;
* // returns 2.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":620}],622:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/hypergeometric/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/hypergeometric/kurtosis' );
*
* var v = kurtosis( 16, 11, 4 );
* // returns ~-0.326
*
* v = kurtosis( 4, 2, 2 );
* // returns 0.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":623}],623:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the excess kurtosis of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 16, 11, 4 );
* // returns ~-0.326
* @example
* var v = kurtosis( 4, 2, 2 );
* // returns 0.0
* @example
* var v = kurtosis( 10, 5, 12 );
* // returns NaN
* @example
* var v = kurtosis( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = kurtosis( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = kurtosis( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = kurtosis( NaN, 10, 4 );
* // returns NaN
* @example
* var v = kurtosis( 20, NaN, 4 );
* // returns NaN
* @example
* var v = kurtosis( 20, 10, NaN );
* // returns NaN
*/
function kurtosis( N, K, n ) {
	var p;
	var q;
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	p = ( N-1 ) * ( N*N ) * ( ( N*(N+1) ) - ( 6*K*(N-K) ) - ( 6*n*(N-n) ) );
	p += 6 * n * K * ( N-K ) * ( N-n ) * ( (5*N) - 6 );
	q = n * K * ( N-K ) * ( N-n ) * ( N-2 ) * ( N-3 );
	return p / q;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/constants/float64-pinf":1414}],624:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace hypergeometric
*/
var hypergeometric = {};

/**
* @name cdf
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/cdf}
*/
setReadOnly( hypergeometric, 'cdf', require( '@stdlib/math/base/dist/hypergeometric/cdf' ) );

/**
* @name Hypergeometric
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/ctor}
*/
setReadOnly( hypergeometric, 'Hypergeometric', require( '@stdlib/math/base/dist/hypergeometric/ctor' ) );

/**
* @name kurtosis
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/kurtosis}
*/
setReadOnly( hypergeometric, 'kurtosis', require( '@stdlib/math/base/dist/hypergeometric/kurtosis' ) );

/**
* @name mean
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/mean}
*/
setReadOnly( hypergeometric, 'mean', require( '@stdlib/math/base/dist/hypergeometric/mean' ) );

/**
* @name mode
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/mode}
*/
setReadOnly( hypergeometric, 'mode', require( '@stdlib/math/base/dist/hypergeometric/mode' ) );

/**
* @name pmf
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/pmf}
*/
setReadOnly( hypergeometric, 'pmf', require( '@stdlib/math/base/dist/hypergeometric/pmf' ) );

/**
* @name quantile
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/quantile}
*/
setReadOnly( hypergeometric, 'quantile', require( '@stdlib/math/base/dist/hypergeometric/quantile' ) );

/**
* @name skewness
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/skewness}
*/
setReadOnly( hypergeometric, 'skewness', require( '@stdlib/math/base/dist/hypergeometric/skewness' ) );

/**
* @name stdev
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/stdev}
*/
setReadOnly( hypergeometric, 'stdev', require( '@stdlib/math/base/dist/hypergeometric/stdev' ) );

/**
* @name variance
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/hypergeometric/variance}
*/
setReadOnly( hypergeometric, 'variance', require( '@stdlib/math/base/dist/hypergeometric/variance' ) );


// EXPORTS //

module.exports = hypergeometric;

},{"@stdlib/math/base/dist/hypergeometric/cdf":617,"@stdlib/math/base/dist/hypergeometric/ctor":621,"@stdlib/math/base/dist/hypergeometric/kurtosis":622,"@stdlib/math/base/dist/hypergeometric/mean":625,"@stdlib/math/base/dist/hypergeometric/mode":627,"@stdlib/math/base/dist/hypergeometric/pmf":630,"@stdlib/math/base/dist/hypergeometric/quantile":634,"@stdlib/math/base/dist/hypergeometric/skewness":637,"@stdlib/math/base/dist/hypergeometric/stdev":639,"@stdlib/math/base/dist/hypergeometric/variance":641,"@stdlib/utils/define-read-only-property":1425}],625:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution expected value.
*
* @module @stdlib/math/base/dist/hypergeometric/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/hypergeometric/mean' );
*
* var v = mean( 16, 11, 4 );
* // returns 2.75
*
* v = mean( 2, 1, 1 );
* // returns 0.5
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":626}],626:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the expected value of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 16, 11, 4 );
* // returns 2.75
* @example
* var v = mean( 2, 1, 1 );
* // returns 0.5
* @example
* var v = mean( 10, 5, 12 );
* // returns NaN
* @example
* var v = mean( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = mean( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = mean( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = mean( NaN, 10, 4 );
* // returns NaN
* @example
* var v = mean( 20, NaN, 4 );
* // returns NaN
* @example
* var v = mean( 20, 10, NaN );
* // returns NaN
*/
function mean( N, K, n ) {
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return NaN;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return n * ( K / N );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/constants/float64-pinf":1414}],627:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution mode.
*
* @module @stdlib/math/base/dist/hypergeometric/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/hypergeometric/mode' );
*
* var v = mode( 16, 11, 4 );
* // returns 3
*
* v = mode( 2, 1, 1 );
* // returns 1
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":628}],628:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the mode of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 16, 11, 4 );
* // returns 3
* @example
* var v = mode( 2, 1, 1 );
* // returns 1
* @example
* var v = mode( 10, 5, 12 );
* // returns NaN
* @example
* var v = mode( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = mode( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = mode( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = mode( NaN, 10, 4 );
* // returns NaN
* @example
* var v = mode( 20, NaN, 4 );
* // returns NaN
* @example
* var v = mode( 20, 10, NaN );
* // returns NaN
*/
function mode( N, K, n ) {
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return floor( ( n+1 ) * ( K+1 ) / ( N+2 ) );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/floor":1266,"@stdlib/math/constants/float64-pinf":1414}],629:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var fln = require( '@stdlib/math/base/special/factorialln' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} PMF
*
* @example
* var mypmf = factory( 30, 20, 5 );
* var y = mypmf( 4.0 );
* // returns ~0.34
*
* y = mypmf( 1.0 );
* // returns ~0.029
*/
function factory( N, K, n ) {
	var maxs;
	var mins;
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return nan;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return nan;
	}

	mins = max( 0, n + K - N );
	maxs = min( K, n );
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*/
	function pmf( x ) {
		var ldenom;
		var lnum;
		var lpmf;
		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			isNonNegativeInteger( x ) &&
			mins <= x &&
			x <= maxs
		) {
			lnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );
			ldenom = fln( N ) + fln( x ) + fln( n - x );
			ldenom += fln( K - x ) + fln( N - K + x - n );
			lpmf = lnum - ldenom;
			return exp( lpmf );
		}
		return 0.0;
	} // end FUNCTION pmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":631,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/factorialln":1264,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/constants/float64-pinf":1414}],630:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dist/hypergeometric/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dist/hypergeometric/pmf' );
*
* var y = pmf( 1.0, 8, 4, 2 );
* // returns ~0.571
*
* y = pmf( 2.0, 8, 4, 2 );
* // returns ~0.214
*
* y = pmf( 0.0, 8, 4, 2 );
* // returns ~0.214
*
* y = pmf( 1.5, 8, 4, 2 );
* // returns 0.0
*
* var mypmf = pmf.factory( 30, 20, 5 );
* y = mypmf( 4.0 );
* // returns ~0.34
*
* y = mypmf( 1.0 );
* // returns ~0.029
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":629,"./pmf.js":632,"@stdlib/utils/define-read-only-property":1425}],631:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability mass function (PMF) for an invalid hypergeometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pmf( 2.0 );
* // returns NaN
*/
function pmf() {
	return NaN;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{}],632:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var fln = require( '@stdlib/math/base/special/factorialln' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 1.0, 8, 4, 2 );
* // returns ~0.571
* @example
* var y = pmf( 2.0, 8, 4, 2 );
* // returns ~0.214
* @example
* var y = pmf( 0.0, 8, 4, 2 );
* // returns ~0.214
* @example
* var y = pmf( 1.5, 8, 4, 2 );
* // returns 0.0
* @example
* var y = pmf( NaN, 10, 5, 2 );
* // returns NaN
* @example
* var y = pmf( 0.0, NaN, 5, 2 );
* // returns NaN
* @example
* var y = pmf( 0.0, 10, NaN, 2 );
* // returns NaN
* @example
* var y = pmf( 0.0, 10, 5, NaN );
* // returns NaN
* @example
* var y = pmf( 2.0, 10.5, 5, 2 );
* // returns NaN
* @example
* var y = pmf( 2.0, 5, 1.5, 2 );
* // returns NaN
* @example
* var y = pmf( 2.0, 10, 5, -2.0 );
* // returns NaN
* @example
* var y = pmf( 2.0, 10, 5, 12 );
* // returns NaN
* @example
* var y = pmf( 2.0, 8, 3, 9 );
* // returns NaN
*/
function pmf( x, N, K, n ) {
	var ldenom;
	var lnum;
	var lpmf;
	var maxs;
	var mins;

	if (
		isnan( x ) ||
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return NaN;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	mins = max( 0, n + K - N );
	maxs = min( K, n );
	if (
		isNonNegativeInteger( x ) &&
		mins <= x &&
		x <= maxs
	) {
		lnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );
		ldenom = fln( N ) + fln( x ) + fln( n - x );
		ldenom += fln( K - x ) + fln( N - K + x - n );
		lpmf = lnum - ldenom;
		return exp( lpmf );
	}
	return 0.0;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/factorialln":1264,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/constants/float64-pinf":1414}],633:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var cdf = require( '@stdlib/math/base/dist/hypergeometric/cdf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 100, 20, 10 );
* var y = quantile( 0.2 );
* // returns 1
*
* y = quantile( 0.9 );
* // returns 4
*/
function factory( N, K, n ) {
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return nan;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a hypergeometric distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*/
	function quantile( p ) {
		var prob;
		var x;

		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p === 0.0 ) {
			return max( 0, n + K - N );
		}
		if ( p === 1.0 ) {
			return min( n, K );
		}
		x = max( 0, n + K - N );
		while ( true ) {
			prob = cdf( x, N, K, n );
			if ( prob > p ) {
				break;
			}
			x += 1;
		}
		return x;
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":635,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/hypergeometric/cdf":617,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/constants/float64-pinf":1414}],634:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution quantile function.
*
* @module @stdlib/math/base/dist/hypergeometric/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/hypergeometric/quantile' );
*
* var y = quantile( 0.4, 40, 20, 10 );
* // returns 5
*
* y = quantile( 0.8, 60, 40, 20 );
* // returns 15
*
* y = quantile( 0.5, 100, 10, 10 );
* // returns 1
*
* y = quantile( 0.0, 100, 40, 20 );
* // returns 0
*
* y = quantile( 1.0, 100, 40, 20 );
* // returns 20
*
* var myquantile = factory( 100, 20, 10 );
* y = myquantile( 0.2 );
* // returns 1
*
* y = myquantile( 0.9 );
* // returns 4
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":633,"./quantile.js":636,"@stdlib/utils/define-read-only-property":1425}],635:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid hypergeometric distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],636:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var cdf = require( '@stdlib/math/base/dist/hypergeometric/cdf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.4, 40, 20, 10 );
* // returns 5
* @example
* var y = quantile( 0.8, 60, 40, 20 );
* // returns 15
* @example
* var y = quantile( 0.5, 100, 10, 10 );
* // returns 1
* @example
* var y = quantile( 0.0, 100, 40, 20 );
* // returns 0
* @example
* var y = quantile( 1.0, 100, 40, 20 );
* // returns 20
* @example
* var y = quantile( NaN, 40, 20, 10 );
* // returns NaN
* @example
* var y = quantile( 0.2, NaN, 20, 10 );
* // returns NaN
* @example
* var y = quantile( 0.2, 40, NaN, 10 );
* // returns NaN
* @example
* var y = quantile( 0.2, 40, 20, NaN );
* // returns NaN
*/
function quantile( p, N, K, n ) {
	var prob;
	var x;

	if (
		isnan( p ) ||
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return NaN;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return max( 0, n + K - N );
	}
	if ( p === 1.0 ) {
		return min( n, K );
	}
	x = max( 0, n + K - N );
	while ( true ) {
		prob = cdf( x, N, K, n );
		if ( prob > p ) {
			break;
		}
		x += 1;
	}
	return x;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/hypergeometric/cdf":617,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/constants/float64-pinf":1414}],637:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution skewness.
*
* @module @stdlib/math/base/dist/hypergeometric/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/hypergeometric/skewness' );
*
* var v = skewness( 16, 11, 4 );
* // returns ~-0.258
*
* v = skewness( 4, 2, 2 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":638}],638:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the skewness of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {number} skewness
*
* @example
* var v = skewness( 16, 11, 4 );
* // returns ~-0.258
* @example
* var v = skewness( 4, 2, 2 );
* // returns 0.0
* @example
* var v = skewness( 10, 5, 12 );
* // returns NaN
* @example
* var v = skewness( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = skewness( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = skewness( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = skewness( NaN, 10, 4 );
* // returns NaN
* @example
* var v = skewness( 20, NaN, 4 );
* // returns NaN
* @example
* var v = skewness( 20, 10, NaN );
* // returns NaN
*/
function skewness( N, K, n ) {
	var p;
	var q;
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	p = ( N - (2*K) ) * sqrt( N - 1 ) * ( N - (2*n) );
	q = sqrt( n * K * ( N-K ) * ( N-n ) ) * ( N - 2 );
	return p / q;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414}],639:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution standard deviation.
*
* @module @stdlib/math/base/dist/hypergeometric/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/hypergeometric/stdev' );
*
* var v = stdev( 16, 11, 4 );
* // returns ~0.829
*
* v = stdev( 2, 1, 1 );
* // returns 0.5
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":640}],640:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 16, 11, 4 );
* // returns ~0.829
* @example
* var v = stdev( 2, 1, 1 );
* // returns 0.5
* @example
* var v = stdev( 10, 5, 12 );
* // returns NaN
* @example
* var v = stdev( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = stdev( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = stdev( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = stdev( NaN, 10, 4 );
* // returns NaN
* @example
* var v = stdev( 20, NaN, 4 );
* // returns NaN
* @example
* var v = stdev( 20, 10, NaN );
* // returns NaN
*/
function stdev( N, K, n ) {
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return sqrt( n * ( K/N ) * ( (N-K)/N ) * ( (N-n)/(N-1) ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414}],641:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution variance.
*
* @module @stdlib/math/base/dist/hypergeometric/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/hypergeometric/variance' );
*
* var v = variance( 16, 11, 4 );
* // returns ~0.688
*
* v = variance( 2, 1, 1 );
* // returns 0.25
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":642}],642:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the variance of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 16, 11, 4 );
* // returns ~0.688
* @example
* var v = variance( 2, 1, 1 );
* // returns 0.25
* @example
* var v = variance( 10, 5, 12 );
* // returns NaN
* @example
* var v = variance( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = variance( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = variance( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = variance( NaN, 10, 4 );
* // returns NaN
* @example
* var v = variance( 20, NaN, 4 );
* // returns NaN
* @example
* var v = variance( 20, 10, NaN );
* // returns NaN
*/
function variance( N, K, n ) {
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return n * ( K/N ) * ( (N-K)/N ) * ( (N-n)/(N-1) );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/constants/float64-pinf":1414}],643:[function(require,module,exports){
'use strict';

// MODULES //

var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.607
* @example
* var y = cdf( 2.0, 3.0, 1.0 );
* // returns ~0.986
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return gammainc( beta / x, alpha, true, true );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gammainc":1277}],644:[function(require,module,exports){
'use strict';

// MODULES //

var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.809
*
* y = cdf( 2.0 );
* // returns ~0.96
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0 ) {
			return 0;
		}
		return gammainc( beta / x, alpha, true, true );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":646,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gammainc":1277}],645:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/invgamma/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/invgamma/cdf' );
*
* var y = cdf( 1.0, 8.0, 3.0 );
* // returns ~0.988
*
* y = cdf( 0.0, 1.0, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2.0, 0.5 );
* y = mycdf( 0.5 );
* // returns ~0.736
*
* y = mycdf( 2.0 );
* // returns ~0.973
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":643,"./factory.js":644,"@stdlib/utils/define-read-only-property":1425}],646:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid inverse gamma distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 2.1 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],647:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/invgamma/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/invgamma/kurtosis' );
var mean = require( '@stdlib/math/base/dist/invgamma/mean' );
var mode = require( '@stdlib/math/base/dist/invgamma/mode' );
var quantile = require( '@stdlib/math/base/dist/invgamma/quantile' );
var skewness = require( '@stdlib/math/base/dist/invgamma/skewness' );
var stdev = require( '@stdlib/math/base/dist/invgamma/stdev' );
var variance = require( '@stdlib/math/base/dist/invgamma/variance' );
var cdf = require( '@stdlib/math/base/dist/invgamma/cdf' );
var pdf = require( '@stdlib/math/base/dist/invgamma/pdf' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function invgammaCDF( x ) {
	return cdf( x, this.alpha, this.beta );
} // end FUNCTION invgammaCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function invgammaPDF( x ) {
	return pdf( x, this.alpha, this.beta );
} // end FUNCTION invgammaPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function invgammaQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
} // end FUNCTION invgammaQuantile()


// MAIN //

/**
* Inverse gamma distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {InvGamma} distribution instance
*
* @example
* var invgamma = new InvGamma( 1.0, 1.0 );
*
* var y = invgamma.cdf( 0.8 );
* // returns ~0.287
*
* var mode = invgamma.mode;
* // returns 0.5
*/
function InvGamma() {
	var alpha;
	var beta;
	if ( !(this instanceof InvGamma) ) {
		if ( arguments.length === 0 ) {
			return new InvGamma();
		}
		return new InvGamma( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
} // end FUNCTION InvGamma()

/**
* Inverse gamma distribution differential entropy.
*
* @memberof InvGamma.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.entropy;
* // returns ~1.966
*/
Object.defineProperty( InvGamma.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution excess kurtosis.
*
* @memberof InvGamma.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var invgamma = new InvGamma( 6.0, 12.0 );
*
* var v = invgamma.kurtosis;
* // returns 19.0
*/
Object.defineProperty( InvGamma.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution expected value.
*
* @memberof InvGamma.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.mean;
* // returns 4.0
*/
Object.defineProperty( InvGamma.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution mode.
*
* @memberof InvGamma.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.mode;
* // returns 2.4
*/
Object.defineProperty( InvGamma.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution skewness.
*
* @memberof InvGamma.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.skewness;
* // returns ~5.657
*/
Object.defineProperty( InvGamma.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution standard deviation.
*
* @memberof InvGamma.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.stdev;
* // returns ~2.828
*/
Object.defineProperty( InvGamma.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution variance.
*
* @memberof InvGamma.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.variance;
* // returns 8.0
*/
Object.defineProperty( InvGamma.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof InvGamma.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.cdf( 0.5 );
* // returns ~0.003
*/
setReadOnly( InvGamma.prototype, 'cdf', invgammaCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof InvGamma.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.pdf( 0.8 );
* // returns ~0.211
*/
setReadOnly( InvGamma.prototype, 'pdf', invgammaPDF );

/**
* Evaluates the quantile function.
*
* @memberof InvGamma.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.quantile( 0.5 );
* // returns ~2.383
*/
setReadOnly( InvGamma.prototype, 'quantile', invgammaQuantile );


// EXPORTS //

module.exports = InvGamma;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/invgamma/cdf":645,"@stdlib/math/base/dist/invgamma/entropy":650,"@stdlib/math/base/dist/invgamma/kurtosis":651,"@stdlib/math/base/dist/invgamma/mean":654,"@stdlib/math/base/dist/invgamma/mode":656,"@stdlib/math/base/dist/invgamma/pdf":659,"@stdlib/math/base/dist/invgamma/quantile":663,"@stdlib/math/base/dist/invgamma/skewness":666,"@stdlib/math/base/dist/invgamma/stdev":668,"@stdlib/math/base/dist/invgamma/variance":670,"@stdlib/utils/define-read-only-property":1425}],648:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution constructor.
*
* @module @stdlib/math/base/dist/invgamma/ctor
*
* @example
* var InvGamma = require( '@stdlib/math/base/dist/invgamma/ctor' );
*
* var invgamma = new InvGamma( 1.0, 1.0 );
*
* var y = invgamma.cdf( 0.8 );
* // returns ~0.287
*
* var mode = invgamma.mode;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":647}],649:[function(require,module,exports){
'use strict';

// MODULES //

var digamma = require( '@stdlib/math/base/special/digamma' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns ~2.154
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.996
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.922
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = alpha + ln( beta*gamma( alpha ) );
	out -= ( 1.0+alpha ) * digamma( alpha );
	return out;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/special/digamma":1245,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/ln":1300}],650:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution differential entropy.
*
* @module @stdlib/math/base/dist/invgamma/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/invgamma/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns ~2.154
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.996
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.922
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":649}],651:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/invgamma/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/invgamma/kurtosis' );
*
* var v = kurtosis( 7.0, 5.0 );
* // returns 12.0
*
* v = kurtosis( 6.0, 12.0 );
* // returns 19.0
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~8.7
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":652}],652:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 6.0, 1.0 );
* // returns 19.0
* @example
* var v = kurtosis( 5.0, 12.0 );
* // returns 42.0
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~8.7
* @example
* var v = kurtosis( 5.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( 6.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 4.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( ( 30.0*alpha ) - 66.0 ) / ( ( alpha-3.0 ) * ( alpha-4.0 ) );
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],653:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace invgamma
*/
var invgamma = {};

/**
* @name cdf
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/cdf}
*/
setReadOnly( invgamma, 'cdf', require( '@stdlib/math/base/dist/invgamma/cdf' ) );

/**
* @name entropy
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/entropy}
*/
setReadOnly( invgamma, 'entropy', require( '@stdlib/math/base/dist/invgamma/entropy' ) );

/**
* @name InvGamma
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/ctor}
*/
setReadOnly( invgamma, 'InvGamma', require( '@stdlib/math/base/dist/invgamma/ctor' ) );

/**
* @name kurtosis
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/kurtosis}
*/
setReadOnly( invgamma, 'kurtosis', require( '@stdlib/math/base/dist/invgamma/kurtosis' ) );

/**
* @name mean
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/mean}
*/
setReadOnly( invgamma, 'mean', require( '@stdlib/math/base/dist/invgamma/mean' ) );

/**
* @name mode
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/mode}
*/
setReadOnly( invgamma, 'mode', require( '@stdlib/math/base/dist/invgamma/mode' ) );

/**
* @name pdf
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/pdf}
*/
setReadOnly( invgamma, 'pdf', require( '@stdlib/math/base/dist/invgamma/pdf' ) );

/**
* @name quantile
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/quantile}
*/
setReadOnly( invgamma, 'quantile', require( '@stdlib/math/base/dist/invgamma/quantile' ) );

/**
* @name skewness
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/skewness}
*/
setReadOnly( invgamma, 'skewness', require( '@stdlib/math/base/dist/invgamma/skewness' ) );

/**
* @name stdev
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/stdev}
*/
setReadOnly( invgamma, 'stdev', require( '@stdlib/math/base/dist/invgamma/stdev' ) );

/**
* @name variance
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/invgamma/variance}
*/
setReadOnly( invgamma, 'variance', require( '@stdlib/math/base/dist/invgamma/variance' ) );


// EXPORTS //

module.exports = invgamma;

},{"@stdlib/math/base/dist/invgamma/cdf":645,"@stdlib/math/base/dist/invgamma/ctor":648,"@stdlib/math/base/dist/invgamma/entropy":650,"@stdlib/math/base/dist/invgamma/kurtosis":651,"@stdlib/math/base/dist/invgamma/mean":654,"@stdlib/math/base/dist/invgamma/mode":656,"@stdlib/math/base/dist/invgamma/pdf":659,"@stdlib/math/base/dist/invgamma/quantile":663,"@stdlib/math/base/dist/invgamma/skewness":666,"@stdlib/math/base/dist/invgamma/stdev":668,"@stdlib/math/base/dist/invgamma/variance":670,"@stdlib/utils/define-read-only-property":1425}],654:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution expected value.
*
* @module @stdlib/math/base/dist/invgamma/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/invgamma/mean' );
*
* var v = mean( 4.0, 12.0 );
* // returns 4.0
*
* v = mean( 8.0, 2.0 );
* // returns ~0.286
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":655}],655:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 4.0
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~0.286
* @example
* var v = mean( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 1.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( alpha - 1.0 );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{}],656:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution mode.
*
* @module @stdlib/math/base/dist/invgamma/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/invgamma/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.5
*
* v = mode( 4.0, 12.0 );
* // returns 2.4
*
* v = mode( 8.0, 2.0 );
* // returns ~0.222
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":657}],657:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.5
* @example
* var v = mode( 4.0, 12.0 );
* // returns 2.4
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~0.222
* @example
* var v = mode( 0.5, 2.0 );
* // returns NaN
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( alpha + 1.0 );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{}],658:[function(require,module,exports){
'use strict';

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 1.5 );
*
* var y = pdf( 1.0 );
* // returns ~0.377
*
* y = pdf( 2.0 );
* // returns ~0.05
*/
function factory( alpha, beta ) {
	var firstTerm;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	firstTerm = ( alpha * ln( beta ) ) - gammaln( alpha );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an inverse gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var lnl;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		lnl = firstTerm - (( alpha + 1.0 ) * ln( x )) - (beta / x);
		return exp( lnl );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":660,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300}],659:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/invgamma/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/invgamma/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.121
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 2.0 );
* // returns ~0.231
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":658,"./pdf.js":661,"@stdlib/utils/define-read-only-property":1425}],660:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid inverse gamma distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],661:[function(require,module,exports){
'use strict';

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.121
* @example
* var y = pdf( 0.2, 1.0, 1.0 );
* // returns ~0.168
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* // Negative shape parameter:
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	var lnl;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	lnl = (alpha * ln( beta )) - gammaln( alpha );
	lnl -= (alpha + 1.0) * ln( x );
	lnl -= beta / x;
	return exp( lnl );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300}],662:[function(require,module,exports){
'use strict';

// MODULES //

var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.229
*
* y = quantile( 0.8 );
* // returns ~0.427
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for an iverse gamma distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return beta / gammaincinv( p, alpha, true );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":664,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gammaincinv":1293}],663:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution quantile function.
*
* @module @stdlib/math/base/dist/invgamma/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/invgamma/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~4.481
*
* var myquantile = quantile.factory( 2.0, 2.0 );
* y = myquantile( 0.8 );
* // returns ~2.426
*
* y = myquantile( 0.4 );
* // returns ~0.989
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":662,"./quantile.js":665,"@stdlib/utils/define-read-only-property":1425}],664:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid inverse gamma distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],665:[function(require,module,exports){
'use strict';

// MODULES //

var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a Inverse Gamma distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~1.213
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.545
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 1.0, NaN );
* // returns NaN
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1.0, 1.0 );
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return beta / gammaincinv( p, alpha, true );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gammaincinv":1293}],666:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution skewness.
*
* @module @stdlib/math/base/dist/invgamma/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/invgamma/skewness' );
*
* var v = skewness( 4.0, 12.0 );
* // returns ~5.657
*
* v = skewness( 8.0, 2.0 );
* // returns ~1.96
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":667}],667:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~5.657
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~1.96
* @example
* var v = skewness( 2.0, 1.0 );
* // returns NaN
* @example
* var v = skewness( 4.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 4.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 3.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 4.0 * sqrt( alpha - 2.0 ) / ( alpha - 3.0 );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],668:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution standard deviation.
*
* @module @stdlib/math/base/dist/invgamma/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/invgamma/stdev' );
*
* var v = stdev( 5.0, 7.0 );
* // returns ~1.01
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.118
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":669}],669:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 3.0, 5.0 );
* // returns ~2.5
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.828
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.118
* @example
* var v = stdev( 3.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( 1.5, 1.0 );
* // returns NaN
* @example
* var v = stdev( 3.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( alpha, beta ) {
	if ( alpha <= 2.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( ( alpha-1.0 ) * sqrt( alpha-2.0 ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1343}],670:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution variance.
*
* @module @stdlib/math/base/dist/invgamma/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/invgamma/variance' );
*
* var v = variance( 5.0, 7.0 );
* // returns ~1.021
*
* v = variance( 4.0, 12.0 );
* // returns 8.0
*
* v = variance( 8.0, 2.0 );
* // returns ~0.014
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":671}],671:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 3.0, 5.0 );
* // returns ~6.25
* @example
* var v = variance( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.014
* @example
* var v = variance( 3.0, -0.1 );
* // returns NaN
* @example
* var v = variance( 1.5, 1.0 );
* // returns NaN
* @example
* var v = variance( 3.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	if ( alpha <= 2.0 || beta <= 0.0 ) {
		return NaN;
	}
	return ( beta*beta ) / ( pow( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/special/pow":1311}],672:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.5
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.684
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.078
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.878
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( 1.5, 4.0, 2.0 );
* // returns 1.0
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function cdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x >= 1.0 ) {
		return 1.0;
	}
	return 1.0 - pow( 1.0 - pow( x, a ), b );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],673:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.675
*
* y = cdf( 0.3 );
* // returns ~0.327
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x >= 1.0 ) {
			return 1.0;
		}
		return 1.0 - pow( 1.0 - pow( x, a ), b );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":675,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],674:[function(require,module,exports){
'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/math/base/dist/kumaraswamy/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/kumaraswamy/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.684
*
* @example
* var factory = require( '@stdlib/math/base/dist/kumaraswamy/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.675
*
* y = cdf( 0.3 );
* // returns ~0.327
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":672,"./factory.js":673,"@stdlib/utils/define-read-only-property":1425}],675:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Kumaraswamy's double bounded distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],676:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var kurtosis = require( '@stdlib/math/base/dist/kumaraswamy/kurtosis' );
var mean = require( '@stdlib/math/base/dist/kumaraswamy/mean' );
var mode = require( '@stdlib/math/base/dist/kumaraswamy/mode' );
var skewness = require( '@stdlib/math/base/dist/kumaraswamy/skewness' );
var stdev = require( '@stdlib/math/base/dist/kumaraswamy/stdev' );
var variance = require( '@stdlib/math/base/dist/kumaraswamy/variance' );
var cdf = require( '@stdlib/math/base/dist/kumaraswamy/cdf' );
var pdf = require( '@stdlib/math/base/dist/kumaraswamy/pdf' );
var quantile = require( '@stdlib/math/base/dist/kumaraswamy/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function kumaraswamyCDF( x ) {
	return cdf( x, this.a, this.b );
} // end FUNCTION kumaraswamyCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function kumaraswamyPDF( x ) {
	return pdf( x, this.a, this.b );
} // end FUNCTION kumaraswamyPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function kumaraswamyQuantile( p ) {
	return quantile( p, this.a, this.b );
} // end FUNCTION kumaraswamyQuantile()


// MAIN //

/**
* Kumaraswamy's double bounded distribution constructor.
*
* @constructor
* @param {PositiveNumber} [a=1.0] - first shape parameter
* @param {PositiveNumber} [b=1.0] - second shape parameter
* @throws {TypeError} `a` must be a positive number
* @throws {TypeError} `b` must be a positive number
* @returns {Kumaraswamy} distribution instance
*
* @example
* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );
*
* var y = kumaraswamy.cdf( 0.8 );
* // returns 0.8
*
* var mode = kumaraswamy.mode;
* // returns NaN
*/
function Kumaraswamy() {
	var a;
	var b;
	if ( !(this instanceof Kumaraswamy) ) {
		if ( arguments.length === 0 ) {
			return new Kumaraswamy();
		}
		return new Kumaraswamy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isPositive( a ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `a` must be a positive number. Value: `' + a + '`' );
		}
		if ( !isPositive( b ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `b` must be a positive number. Value: `' + b + '`' );
		}
	} else {
		a = 1.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			b = value;
		}
	});
	return this;
} // end FUNCTION Kumaraswamy()

/**
* Kumaraswamy's double bounded distribution excess kurtosis.
*
* @memberof Kumaraswamy.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.kurtosis;
* // returns ~2.704
*/
Object.defineProperty( Kumaraswamy.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution expected value.
*
* @memberof Kumaraswamy.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.mean;
* // returns ~0.481
*/
Object.defineProperty( Kumaraswamy.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution mode.
*
* @memberof Kumaraswamy.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.mode;
* // returns ~0.503
*/
Object.defineProperty( Kumaraswamy.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution skewness.
*
* @memberof Kumaraswamy.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.skewness;
* // returns ~-0.201
*/
Object.defineProperty( Kumaraswamy.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution standard deviation.
*
* @memberof Kumaraswamy.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.stdev;
* // returns ~0.13
*/
Object.defineProperty( Kumaraswamy.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution variance.
*
* @memberof Kumaraswamy.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.variance;
* // returns ~0.017
*/
Object.defineProperty( Kumaraswamy.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Kumaraswamy.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.cdf( 0.5 );
* // returns ~0.684
*/
setReadOnly( Kumaraswamy.prototype, 'cdf', kumaraswamyCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Kumaraswamy.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.pdf( 0.9 );
* // returns ~0.049
*/
setReadOnly( Kumaraswamy.prototype, 'pdf', kumaraswamyPDF );

/**
* Evaluates the quantile function.
*
* @memberof Kumaraswamy.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.quantile( 0.5 );
* // returns ~0.399
*/
setReadOnly( Kumaraswamy.prototype, 'quantile', kumaraswamyQuantile );


// EXPORTS //

module.exports = Kumaraswamy;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/kumaraswamy/cdf":674,"@stdlib/math/base/dist/kumaraswamy/kurtosis":678,"@stdlib/math/base/dist/kumaraswamy/mean":681,"@stdlib/math/base/dist/kumaraswamy/mode":685,"@stdlib/math/base/dist/kumaraswamy/pdf":688,"@stdlib/math/base/dist/kumaraswamy/quantile":692,"@stdlib/math/base/dist/kumaraswamy/skewness":695,"@stdlib/math/base/dist/kumaraswamy/stdev":697,"@stdlib/math/base/dist/kumaraswamy/variance":699,"@stdlib/utils/define-read-only-property":1425}],677:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution constructor.
*
* @module @stdlib/math/base/dist/kumaraswamy/ctor
*
* @example
* var Kumaraswamy = require( '@stdlib/math/base/dist/kumaraswamy/ctor' );
*
* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );
*
* var y = kumaraswamy.cdf( 0.8 );
* // returns 0.8
*
* var mode = kumaraswamy.mode;
* // returns NaN
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":676}],678:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/kumaraswamy/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/kumaraswamy/kurtosis' );
*
* var v = kurtosis( 2.0, 1.0 );
* // returns ~2.4
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~2.704
*
* v = kurtosis( 16.0, 8.0 );
* // returns ~4.311
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":679}],679:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );


// MAIN //

/**
* Returns the excess kurtosis of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.5, 1.0 );
* // returns ~2.143
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~2.704
* @example
* var v = kurtosis( 12.0, 2.0 );
* // returns ~4.817
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( a, b ) {
	var sigma2;
	var out;
	var mu2;
	var m1;
	var m2;
	var m3;
	var m4;
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * beta( 1.0 + ( 1.0/a ), b );
	m2 = b * beta( 1.0 + ( 2.0/a ), b );
	m3 = b * beta( 1.0 + ( 3.0/a ), b );
	m4 = b * beta( 1.0 + ( 4.0/a ), b );
	sigma2 = m2 - ( m1*m1 );
	mu2 = m1 * m1;
	out = ( m4 - ( 4.0*m3*m1 ) + ( 6.0*m2*mu2 ) - ( 3.0*mu2*mu2 ) );
	out /= sigma2*sigma2;
	return out;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/beta":1193}],680:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace kumaraswamy
*/
var kumaraswamy = {};

/**
* @name cdf
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/cdf}
*/
setReadOnly( kumaraswamy, 'cdf', require( '@stdlib/math/base/dist/kumaraswamy/cdf' ) );

/**
* @name Kumaraswamy
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/ctor}
*/
setReadOnly( kumaraswamy, 'Kumaraswamy', require( '@stdlib/math/base/dist/kumaraswamy/ctor' ) );

/**
* @name kurtosis
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/kurtosis}
*/
setReadOnly( kumaraswamy, 'kurtosis', require( '@stdlib/math/base/dist/kumaraswamy/kurtosis' ) );

/**
* @name mean
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/mean}
*/
setReadOnly( kumaraswamy, 'mean', require( '@stdlib/math/base/dist/kumaraswamy/mean' ) );

/**
* @name median
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/median}
*/
setReadOnly( kumaraswamy, 'median', require( '@stdlib/math/base/dist/kumaraswamy/median' ) );

/**
* @name mode
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/mode}
*/
setReadOnly( kumaraswamy, 'mode', require( '@stdlib/math/base/dist/kumaraswamy/mode' ) );

/**
* @name pdf
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/pdf}
*/
setReadOnly( kumaraswamy, 'pdf', require( '@stdlib/math/base/dist/kumaraswamy/pdf' ) );

/**
* @name quantile
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/quantile}
*/
setReadOnly( kumaraswamy, 'quantile', require( '@stdlib/math/base/dist/kumaraswamy/quantile' ) );

/**
* @name skewness
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/skewness}
*/
setReadOnly( kumaraswamy, 'skewness', require( '@stdlib/math/base/dist/kumaraswamy/skewness' ) );

/**
* @name stdev
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/stdev}
*/
setReadOnly( kumaraswamy, 'stdev', require( '@stdlib/math/base/dist/kumaraswamy/stdev' ) );

/**
* @name variance
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy/variance}
*/
setReadOnly( kumaraswamy, 'variance', require( '@stdlib/math/base/dist/kumaraswamy/variance' ) );


// EXPORTS //

module.exports = kumaraswamy;

},{"@stdlib/math/base/dist/kumaraswamy/cdf":674,"@stdlib/math/base/dist/kumaraswamy/ctor":677,"@stdlib/math/base/dist/kumaraswamy/kurtosis":678,"@stdlib/math/base/dist/kumaraswamy/mean":681,"@stdlib/math/base/dist/kumaraswamy/median":683,"@stdlib/math/base/dist/kumaraswamy/mode":685,"@stdlib/math/base/dist/kumaraswamy/pdf":688,"@stdlib/math/base/dist/kumaraswamy/quantile":692,"@stdlib/math/base/dist/kumaraswamy/skewness":695,"@stdlib/math/base/dist/kumaraswamy/stdev":697,"@stdlib/math/base/dist/kumaraswamy/variance":699,"@stdlib/utils/define-read-only-property":1425}],681:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution mean.
*
* @module @stdlib/math/base/dist/kumaraswamy/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/kumaraswamy/mean' );
*
* var v = mean( 2.0, 1.5 );
* // returns ~0.589
*
* v = mean( 4.0, 12.0 );
* // returns ~0.481
*
* v = mean( 16.0, 8.0 );
* // returns ~0.846
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":682}],682:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );


// MAIN //

/**
* Returns the expected value of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.5, 1.5 );
* // returns ~0.512
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.481
* @example
* var v = mean( 12.0, 2.0 );
* // returns ~0.886
* @example
* var v = mean( 1.5, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.5 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( a, b ) {
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return b * beta( 1.0 + ( 1.0/a ), b );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/beta":1193}],683:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution median.
*
* @module @stdlib/math/base/dist/kumaraswamy/median
*
* @example
* var median = require( '@stdlib/math/base/dist/kumaraswamy/median' );
*
* var v = median( 2.0, 1.0 );
* // returns ~0.707
*
* v = median( 4.0, 12.0 );
* // returns ~0.487
*
* v = median( 16.0, 8.0 );
* // returns ~0.856
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":684}],684:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the median of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 0.5, 1.0 );
* // returns 0.25
* @example
* var v = median( 4.0, 12.0 );
* // returns ~0.487
* @example
* var v = median( 12.0, 2.0 );
* // returns ~0.903
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( a, b ) {
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return pow( 1.0 - pow( 2.0, -1.0/b ), 1.0/a );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],685:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution mode.
*
* @module @stdlib/math/base/dist/kumaraswamy/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/kumaraswamy/mode' );
*
* var v = mode( 2.0, 1.5 );
* // returns ~0.707
*
* v = mode( 4.0, 12.0 );
* // returns ~0.503
*
* v = mode( 16.0, 8.0 );
* // returns ~0.875
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":686}],686:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the mode of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.5, 1.5 );
* // returns ~0.543
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.503
* @example
* var v = mode( 12.0, 2.0 );
* // returns ~0.94
* @example
* var v = mode( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mode( 1.5, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.5 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( a, b ) {
	if (
		isnan( a ) ||
		a < 1.0 ||
		isnan( b ) ||
		b < 1.0 ||
		( a === 1.0 && b === 1.0 )
	) {
		return NaN;
	}
	return pow( ( a-1.0 ) / ( (a*b) - 1.0 ), 1.0/a );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],687:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.86
*
* y = pdf( 0.3 );
* // returns ~0.679
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 || x >= 1.0 ) {
			return 0.0;
		}
		return ( a*b ) * pow( x, a - 1.0 ) * pow( 1.0 - pow( x, a ), b - 1.0 );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":689,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],688:[function(require,module,exports){
'use strict';

/**
* Evaluate the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/math/base/dist/kumaraswamy/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/kumaraswamy/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns ~1.688
*
* @example
* var factory = require( '@stdlib/math/base/dist/kumaraswamy/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.86
*
* y = pdf( 0.3 );
* // returns ~0.679
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":687,"./pdf.js":690,"@stdlib/utils/define-read-only-property":1425}],689:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Kumaraswamy's double bounded distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 1.0 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],690:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Kumaraswamy's double bounded distribution distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns ~1.688
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.768
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~1.686
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( 2.0, -1.0, 0.5 );
* // returns NaN
* @example
* var y = pdf( 2.0, 0.5, -1.0 );
* // returns NaN
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function pdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 || x >= 1.0 ) {
		return 0.0;
	}
	return ( a*b ) * pow( x, a - 1.0 ) * pow( 1.0 - pow( x, a ), b - 1.0 );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],691:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.5, 0.5 );
*
* var y = quantile( 0.8 );
* // returns ~0.64
*
* y = quantile( 0.3 );
* // returns ~0.09
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {Probability} p - input probability
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 2.0 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return pow( 1.0 - pow( 1.0-p, 1.0/b ), 1.0/a );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":693,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],692:[function(require,module,exports){
'use strict';

/**
* Evaluate the quantile function for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/math/base/dist/kumaraswamy/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/kumaraswamy/quantile' );
*
* var y = quantile( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = quantile( 0.5, 2.0, 4.0 );
* // returns ~0.399
*
* @example
* var factory = require( '@stdlib/math/base/dist/kumaraswamy/quantile' ).factory;
*
* var quantile = factory( 0.5, 0.5 );
*
* var y = quantile( 0.8 );
* // returns ~0.922
*
* y = quantile( 0.3 );
* // returns ~0.26
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":691,"./quantile.js":694,"@stdlib/utils/define-read-only-property":1425}],693:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Kumaraswamy's double bounded distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 1.0 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],694:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the quantile function for a Kumaraswamy's double bounded distribution distribution with first shape parameter `a` and second shape parameter `b` at a probability `p`.
*
* @param {Probability} p - input probability
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 1.0, 1.0 );
* // returns 0.5
* @example
* var y = quantile( 0.5, 2.0, 4.0 );
* // returns ~0.399
* @example
* var y = quantile( 0.2, 2.0, 2.0 );
* // returns ~0.325
* @example
* var y = quantile( 0.8, 4.0, 4.0 );
* // returns ~0.759
* @example
* var y = quantile( -0.5, 4.0, 2.0 );
* // returns NaN
* @example
* var y = quantile( 0.5 4.0, 2.0 );
* // returns NaN
* @example
* var y = quantile( 0.8, -1.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.8, 0.5, -1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, 1.0, NaN );
* // returns NaN
*/
function quantile( p, a, b ) {
	if (
		isnan( p ) ||
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return pow( 1.0 - pow( 1.0-p, 1.0/b ), 1.0/a );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],695:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution skewness.
*
* @module @stdlib/math/base/dist/kumaraswamy/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/kumaraswamy/skewness' );
*
* var v = skewness( 2.0, 1.0 );
* // returns ~-0.566
*
* v = skewness( 4.0, 12.0 );
* // returns ~-0.201
*
* v = skewness( 16.0, 8.0 );
* // returns ~-0.94
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":696}],696:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the skewness of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 0.5, 1.0 );
* // returns ~0.639
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~-0.201
* @example
* var v = skewness( 12.0, 2.0 );
* // returns ~-1.2
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( a, b ) {
	var sigma2;
	var m1;
	var m2;
	var m3;
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * beta( 1.0 + ( 1.0/a ), b );
	m2 = b * beta( 1.0 + ( 2.0/a ), b );
	m3 = b * beta( 1.0 + ( 3.0/a ), b );
	sigma2 = m2 - ( m1*m1 );
	return ( m3 - ( 3.0*m1*sigma2 ) - ( m1*m1*m1 ) ) / pow( sigma2, 1.5 );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/beta":1193,"@stdlib/math/base/special/pow":1311}],697:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution standard deviation.
*
* @module @stdlib/math/base/dist/kumaraswamy/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/kumaraswamy/stdev' );
*
* var v = stdev( 2.0, 1.0 );
* // returns ~0.237
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.13
*
* v = stdev( 16.0, 8.0 );
* // returns ~0.063
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":698}],698:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.5, 1.0 );
* // returns ~0.298
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.13
* @example
* var v = stdev( 12.0, 2.0 );
* // returns ~0.077
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( a, b ) {
	var m1;
	var m2;
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * beta( 1.0 + ( 1.0/a ), b );
	m2 = b * beta( 1.0 + ( 2.0/a ), b );
	return sqrt( m2 - ( m1*m1 ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/beta":1193,"@stdlib/math/base/special/sqrt":1343}],699:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution variance.
*
* @module @stdlib/math/base/dist/kumaraswamy/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/kumaraswamy/variance' );
*
* var v = variance( 2.0, 1.0 );
* // returns ~0.056
*
* v = variance( 4.0, 12.0 );
* // returns ~0.017
*
* v = variance( 16.0, 8.0 );
* // returns ~0.004
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":700}],700:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );


// MAIN //

/**
* Returns the variance of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.5, 1.0 );
* // returns ~0.089
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.017
* @example
* var v = variance( 12.0, 2.0 );
* // returns ~0.006
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( a, b ) {
	var m1;
	var m2;
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * beta( 1.0 + ( 1.0/a ), b );
	m2 = b * beta( 1.0 + ( 2.0/a ), b );
	return m2 - ( m1*m1 );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/beta":1193}],701:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.932
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.094
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 2, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, mu, b ) {
	var z;
	if ( isnan( x ) || isnan( mu ) || isnan( b ) ) {
		return NaN;
	}
	if ( b <= 0.0 ) {
		return NaN;
	}
	z = ( x - mu ) / b;
	if ( x < mu ) {
		return 0.5 * exp( z );
	}
	return 1.0 - (0.5 * exp( -z ));
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],702:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.132
*
* y = cdf( 4.0 );
* // returns ~0.743
*/
function factory( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		if ( x < mu ) {
			return 0.5 * exp( z );
		}
		return 1.0 - (0.5 * exp( -z ));
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":704,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],703:[function(require,module,exports){
'use strict';

/**
* Laplace distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/laplace/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/laplace/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.982
*
* y = cdf( 0.0, 0.0, 3.0 );
* // returns 0.5
*
* var myCDF = cdf.factory( 2.0, 3.0 );
* y = myCDF( 10.0 );
* // returns ~0.965
*
* y = myCDF( 2.0 );
* // returns 0.5
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":701,"./factory.js":702,"@stdlib/utils/define-read-only-property":1425}],704:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Laplace distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 9.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],705:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/laplace/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/laplace/kurtosis' );
var mean = require( '@stdlib/math/base/dist/laplace/mean' );
var median = require( '@stdlib/math/base/dist/laplace/median' );
var mode = require( '@stdlib/math/base/dist/laplace/mode' );
var skewness = require( '@stdlib/math/base/dist/laplace/skewness' );
var stdev = require( '@stdlib/math/base/dist/laplace/stdev' );
var variance = require( '@stdlib/math/base/dist/laplace/variance' );
var cdf = require( '@stdlib/math/base/dist/laplace/cdf' );
var logcdf = require( '@stdlib/math/base/dist/laplace/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/laplace/logpdf' );
var mgf = require( '@stdlib/math/base/dist/laplace/mgf' );
var pdf = require( '@stdlib/math/base/dist/laplace/pdf' );
var quantile = require( '@stdlib/math/base/dist/laplace/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function laplaceCDF( x ) {
	return cdf( x, this.mu, this.b );
} // end FUNCTION laplaceCDF()

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function laplaceLogCDF( x ) {
	return logcdf( x, this.mu, this.b );
} // end FUNCTION laplaceLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function laplaceLogPDF( x ) {
	return logpdf( x, this.mu, this.b );
} // end FUNCTION laplaceLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function laplaceMGF( t ) {
	return mgf( t, this.mu, this.b );
} // end FUNCTION laplaceMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function laplacePDF( x ) {
	return pdf( x, this.mu, this.b );
} // end FUNCTION laplacePDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function laplaceQuantile( p ) {
	return quantile( p, this.mu, this.b );
} // end FUNCTION laplaceQuantile()


// MAIN //

/**
* Laplace distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [b=1.0] - scale parameter
* @throws {TypeError} `b` must be a positive number
* @returns {Laplace} distribution instance
*
* @example
* var laplace = new Laplace( 1.0, 1.0 );
*
* var y = laplace.cdf( 1.5 );
* // returns ~0.697
*
* var mu = laplace.mean;
* // returns 1.0
*/
function Laplace() {
	var mu;
	var b;
	if ( !(this instanceof Laplace) ) {
		if ( arguments.length === 0 ) {
			return new Laplace();
		}
		return new Laplace( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( b ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `b` must be a positive number. Value: `' + b + '`' );
		}
	} else {
		mu = 0.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			b = value;
		}
	});
	return this;
} // end FUNCTION Laplace()

/**
* Laplace distribution differential entropy.
*
* @memberof Laplace.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.entropy;
* // returns ~4.178
*/
Object.defineProperty( Laplace.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.b );
	}
});

/**
* Laplace distribution excess kurtosis.
*
* @memberof Laplace.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.kurtosis;
* // returns 3.0
*/
Object.defineProperty( Laplace.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.b );
	}
});

/**
* Laplace distribution expected value.
*
* @memberof Laplace.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.mean;
* // returns 4.0
*/
Object.defineProperty( Laplace.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.b );
	}
});

/**
* Laplace distribution median.
*
* @memberof Laplace.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.median;
* // returns 4.0
*/
Object.defineProperty( Laplace.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.b );
	}
});

/**
* Laplace distribution mode.
*
* @memberof Laplace.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.mode;
* // returns 4.0
*/
Object.defineProperty( Laplace.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.b );
	}
});

/**
* Laplace distribution skewness.
*
* @memberof Laplace.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.skewness;
* // returns 0.0
*/
Object.defineProperty( Laplace.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.b );
	}
});

/**
* Laplace distribution standard deviation.
*
* @memberof Laplace.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.stdev;
* // returns ~16.971
*/
Object.defineProperty( Laplace.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.b );
	}
});

/**
* Laplace distribution variance.
*
* @memberof Laplace.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.variance;
* // returns 288.0
*/
Object.defineProperty( Laplace.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Laplace.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.cdf( 0.5 );
* // returns ~0.374
*/
setReadOnly( Laplace.prototype, 'cdf', laplaceCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Laplace.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.logcdf( 0.9 );
* // returns ~-0.951
*/
setReadOnly( Laplace.prototype, 'logcdf', laplaceLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Laplace.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.logpdf( 0.8 );
* // returns ~-3.444
*/
setReadOnly( Laplace.prototype, 'logpdf', laplaceLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Laplace.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.mgf( 0.01 );
* // returns ~1.056
*/
setReadOnly( Laplace.prototype, 'mgf', laplaceMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Laplace.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.pdf( 0.8 );
* // returns ~0.032
*/
setReadOnly( Laplace.prototype, 'pdf', laplacePDF );

/**
* Evaluates the quantile function.
*
* @memberof Laplace.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Laplace.prototype, 'quantile', laplaceQuantile );


// EXPORTS //

module.exports = Laplace;

},{"@stdlib/assert/is-nan":12,"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/laplace/cdf":703,"@stdlib/math/base/dist/laplace/entropy":708,"@stdlib/math/base/dist/laplace/kurtosis":709,"@stdlib/math/base/dist/laplace/logcdf":713,"@stdlib/math/base/dist/laplace/logpdf":717,"@stdlib/math/base/dist/laplace/mean":720,"@stdlib/math/base/dist/laplace/median":722,"@stdlib/math/base/dist/laplace/mgf":725,"@stdlib/math/base/dist/laplace/mode":728,"@stdlib/math/base/dist/laplace/pdf":731,"@stdlib/math/base/dist/laplace/quantile":735,"@stdlib/math/base/dist/laplace/skewness":738,"@stdlib/math/base/dist/laplace/stdev":740,"@stdlib/math/base/dist/laplace/variance":742,"@stdlib/utils/define-read-only-property":1425}],706:[function(require,module,exports){
'use strict';

/**
* Laplace distribution constructor.
*
* @module @stdlib/math/base/dist/laplace/ctor
*
* @example
* var Laplace = require( '@stdlib/math/base/dist/laplace/ctor' );
*
* var laplace = new Laplace( 1.0, 1.0 );
*
* var y = laplace.cdf( 1.5 );
* // returns ~0.697
*
* var mu = laplace.mean;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":705}],707:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var E = require( '@stdlib/math/constants/float64-e' );


// MAIN //

/**
* Returns the differential entropy for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.693
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.386
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return ln( 2.0 * b * E );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-e":1391}],708:[function(require,module,exports){
'use strict';

/**
* Laplace distribution differential entropy.
*
* @module @stdlib/math/base/dist/laplace/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/laplace/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.693
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.386
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":707}],709:[function(require,module,exports){
'use strict';

/**
* Laplace distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/laplace/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/laplace/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 3.0
*
* y = kurtosis( 4.0, 2.0 );
* // returns 3.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":710}],710:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 3.0
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 3.0
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 3.0;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],711:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace laplace
*/
var laplace = {};

/**
* @name cdf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/cdf}
*/
setReadOnly( laplace, 'cdf', require( '@stdlib/math/base/dist/laplace/cdf' ) );

/**
* @name entropy
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/entropy}
*/
setReadOnly( laplace, 'entropy', require( '@stdlib/math/base/dist/laplace/entropy' ) );

/**
* @name kurtosis
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/kurtosis}
*/
setReadOnly( laplace, 'kurtosis', require( '@stdlib/math/base/dist/laplace/kurtosis' ) );

/**
* @name Laplace
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/ctor}
*/
setReadOnly( laplace, 'Laplace', require( '@stdlib/math/base/dist/laplace/ctor' ) );

/**
* @name logcdf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/logcdf}
*/
setReadOnly( laplace, 'logcdf', require( '@stdlib/math/base/dist/laplace/logcdf' ) );

/**
* @name logpdf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/logpdf}
*/
setReadOnly( laplace, 'logpdf', require( '@stdlib/math/base/dist/laplace/logpdf' ) );

/**
* @name mean
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/mean}
*/
setReadOnly( laplace, 'mean', require( '@stdlib/math/base/dist/laplace/mean' ) );

/**
* @name median
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/median}
*/
setReadOnly( laplace, 'median', require( '@stdlib/math/base/dist/laplace/median' ) );

/**
* @name mgf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/mgf}
*/
setReadOnly( laplace, 'mgf', require( '@stdlib/math/base/dist/laplace/mgf' ) );

/**
* @name mode
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/mode}
*/
setReadOnly( laplace, 'mode', require( '@stdlib/math/base/dist/laplace/mode' ) );

/**
* @name pdf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/pdf}
*/
setReadOnly( laplace, 'pdf', require( '@stdlib/math/base/dist/laplace/pdf' ) );

/**
* @name quantile
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/quantile}
*/
setReadOnly( laplace, 'quantile', require( '@stdlib/math/base/dist/laplace/quantile' ) );

/**
* @name skewness
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/skewness}
*/
setReadOnly( laplace, 'skewness', require( '@stdlib/math/base/dist/laplace/skewness' ) );

/**
* @name stdev
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/stdev}
*/
setReadOnly( laplace, 'stdev', require( '@stdlib/math/base/dist/laplace/stdev' ) );

/**
* @name variance
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/laplace/variance}
*/
setReadOnly( laplace, 'variance', require( '@stdlib/math/base/dist/laplace/variance' ) );


// EXPORTS //

module.exports = laplace;

},{"@stdlib/math/base/dist/laplace/cdf":703,"@stdlib/math/base/dist/laplace/ctor":706,"@stdlib/math/base/dist/laplace/entropy":708,"@stdlib/math/base/dist/laplace/kurtosis":709,"@stdlib/math/base/dist/laplace/logcdf":713,"@stdlib/math/base/dist/laplace/logpdf":717,"@stdlib/math/base/dist/laplace/mean":720,"@stdlib/math/base/dist/laplace/median":722,"@stdlib/math/base/dist/laplace/mgf":725,"@stdlib/math/base/dist/laplace/mode":728,"@stdlib/math/base/dist/laplace/pdf":731,"@stdlib/math/base/dist/laplace/quantile":735,"@stdlib/math/base/dist/laplace/skewness":738,"@stdlib/math/base/dist/laplace/stdev":740,"@stdlib/math/base/dist/laplace/variance":742,"@stdlib/utils/define-read-only-property":1425}],712:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var LNHALF = require( '@stdlib/math/constants/float64-ln-half' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.0 );
* // returns ~-2.025
*
* y = logcdf( 4.0 );
* // returns ~-0.297
*/
function factory( mu, b ) {
	if ( isnan( mu ) || isnan( b ) || b <= 0.0 ) {
		return nan;
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		if ( x < mu ) {
			return LNHALF + z;
		}
		return LNHALF + log1p( -expm1( -z ) );
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":715,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-ln-half":1399}],713:[function(require,module,exports){
'use strict';

/**
* Laplace distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/laplace/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/laplace/logcdf' );
*
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.018
*
* y = logcdf( 0.0, 0.0, 3.0 );
* // returns ~-0.693
*
* var mylogcdf = logcdf.factory( 2.0, 3.0 );
* y = mylogcdf( 10.0 );
* // returns ~-0.036
*
* y = mylogcdf( 2.0 );
* // returns ~-0.693
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":712,"./logcdf.js":714,"@stdlib/utils/define-read-only-property":1425}],714:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var LNHALF = require( '@stdlib/math/constants/float64-ln-half' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated logarithm of CDF
*
* @example
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.07
* @example
* var y = logcdf( 5.0, 10.0, 3.0 );
* // returns ~-2.364
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 2, NaN, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logcdf( x, mu, b ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( b )
	) {
		return NaN;
	}
	if ( b <= 0.0 ) {
		return NaN;
	}
	z = ( x - mu ) / b;
	if ( x < mu ) {
		return LNHALF + z;
	}
	return LNHALF + log1p( -expm1( -z ) );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-ln-half":1399}],715:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an invalid Laplace distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 9.0 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],716:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns -1.386
*
* y = logpdf( 5.0 );
* // returns ~-3.863
*
* y = logpdf( 12.0 );
* // returns ~-2.386
*/
function factory( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return nan;
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logarithm of PDF
	*
	* @example
	* var y = logpdf( -3.14 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		return -( abs( z ) + ln( 2.0 * b ) );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":719,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/ln":1300}],717:[function(require,module,exports){
'use strict';

/**
* Laplace distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/laplace/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/laplace/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.688
*
* var mylogPDF = logpdf.factory( 10.0, 2.0 );
* y = mylogPDF( 10.0 );
* // returns -1.386
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":716,"./logpdf.js":718,"@stdlib/utils/define-read-only-property":1425}],718:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.688
* @example
* var y = logpdf( -1.0, 2.0, 3.0 );
* // returns ~-2.797
* @example
* var y = logpdf( 2.5, 2.0, 3.0 );
* // returns ~-1.959
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, mu, b ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( b )
	) {
		return NaN;
	}
	if ( b <= 0.0 ) {
		return NaN;
	}
	z = ( x - mu ) / b;
	return -( abs( z ) + ln( 2.0 * b ) );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/ln":1300}],719:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid Laplace distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 9.0 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],720:[function(require,module,exports){
'use strict';

/**
* Laplace distribution expected value.
*
* @module @stdlib/math/base/dist/laplace/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/laplace/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":721}],721:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],722:[function(require,module,exports){
'use strict';

/**
* Laplace distribution median.
*
* @module @stdlib/math/base/dist/laplace/median
*
* @example
* var median = require( '@stdlib/math/base/dist/laplace/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":723}],723:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43}],724:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Laplace (double exponential) distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} b - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0, 2.0 );
*
* var y = mgf( 0.2 );
* // returns ~2.649
*
* y = mgf( 0.4 );
* // returns ~13.758
*/
function factory( mu, b ) {
	if ( isnan( mu ) || isnan( b ) ) {
		return nan;
	}
	if ( b <= 0.0 ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Laplace (double exponential) distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var bt;
		if ( abs( t ) >= 1.0/b ) {
			return NaN;
		}
		bt = b * t;
		return exp( mu * t ) / ( 1.0 - pow( bt, 2.0 ) );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":727,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],725:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Laplace (double exponential) distribution.
*
* @module @stdlib/math/base/dist/laplace/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/laplace/mgf' );
*
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.333
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* y = mgf( -1.0, 4.0, 0.2 );
* // returns ~0.019
*
* var mymgf = mgf.factory( 4.0, 2.0 );
*
* y = mymgf( 0.2 );
* // returns ~2.649
*
* y = mymgf( 0.4 );
* // returns ~13.758
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":724,"./mgf.js":726,"@stdlib/utils/define-read-only-property":1425}],726:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Laplace (double exponential) distribution with location parameter `mu` and scale parameter `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} b - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.333
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
* @example
* var y = mgf( -1.0, 4.0, 0.2 );
* // returns ~0.019
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = mgf( 1.0, 0.0, 2.0 );
* // returns NaN
* @example
* var y = mgf( -0.5, 0.0, 4.0 );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.0, 0.0 );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function mgf( t, mu, b ) {
	var bt;
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( b )
	) {
		return NaN;
	}
	if ( b <= 0.0 ) {
		return NaN;
	}
	if ( abs( t ) >= 1.0/b ) {
		return NaN;
	}
	bt = b * t;
	return exp( mu * t ) / ( 1.0 - pow( bt, 2.0 ) );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],727:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid Laplace (double exponential) distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],728:[function(require,module,exports){
'use strict';

/**
* Laplace distribution mode.
*
* @module @stdlib/math/base/dist/laplace/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/laplace/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":729}],729:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],730:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns 0.25
*
* y = pdf( 5.0 );
* // returns ~0.021
*
* y = pdf( 12.0 );
* // returns ~0.092
*/
function factory( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* var y = pdf( -3.14 );
	* // returns <number>
	*/
	function pdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		return 0.5 * exp( -abs( z ) ) / b;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":732,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257}],731:[function(require,module,exports){
'use strict';

/**
* Laplace distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/laplace/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/laplace/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.068
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns 0.25
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":730,"./pdf.js":733,"@stdlib/utils/define-read-only-property":1425}],732:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Laplace distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 9.0 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],733:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.068
* @example
* var y = pdf( -1.0, 2.0, 3.0 );
* // returns ~0.061
* @example
* var y = pdf( 2.5, 2.0, 3.0 );
* // returns ~0.141
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, mu, b ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( b )
	) {
		return NaN;
	}
	if ( b <= 0.0 ) {
		return NaN;
	}
	z = ( x - mu ) / b;
	return 0.5 * exp( -abs( z ) ) / b;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257}],734:[function(require,module,exports){
'use strict';

// MODULES //

var signum = require( '@stdlib/math/base/special/signum' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~11.833
*/
function factory( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Laplace distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu - ( b * signum( p-0.5 ) * ln( 1.0 - (2.0 * abs( p-0.5 )) ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":736,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/signum":1328}],735:[function(require,module,exports){
'use strict';

/**
* Laplace distribution quantile function.
*
* @module @stdlib/math/base/dist/laplace/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/laplace/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.916
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*
* y = myQuantile( 0.8 );
* // returns ~11.833
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":734,"./quantile.js":737,"@stdlib/utils/define-read-only-property":1425}],736:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Laplace distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],737:[function(require,module,exports){
'use strict';

// MODULES //

var signum = require( '@stdlib/math/base/special/signum' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.916
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return mu - ( b * signum( p-0.5 ) * ln( 1.0 - (2.0 * abs( p-0.5 )) ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/signum":1328}],738:[function(require,module,exports){
'use strict';

/**
* Laplace distribution skewness.
*
* @module @stdlib/math/base/dist/laplace/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/laplace/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":739}],739:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43}],740:[function(require,module,exports){
'use strict';

/**
* Laplace distribution standard deviation.
*
* @module @stdlib/math/base/dist/laplace/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/laplace/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.414
*
* y = stdev( 4.0, 2.0 );
* // returns ~2.828
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":741}],741:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );


// MAIN //

/**
* Returns the standard deviation for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.414
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~2.828
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return SQRT2 * b;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-sqrt-two":1421}],742:[function(require,module,exports){
'use strict';

/**
* Laplace distribution variance.
*
* @module @stdlib/math/base/dist/laplace/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/laplace/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns 2.0
*
* y = variance( 4.0, 2.0 );
* // returns 8.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":743}],743:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns 2.0
* @example
* var y = variance( 5.0, 2.0 );
* // returns 8.0
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 2.0 * b * b;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],744:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.48
* @example
* var y = cdf( 12.0, 10.0, 3.0 );
* // returns ~0.221
* @example
* var y = cdf( 9.0, 10.0, 3.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 2, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, mu, c ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x < mu ) {
		return 0.0;
	}
	z = sqrt( c / ( 2.0 * ( x-mu ) ) );
	return erfc( z );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erfc":1250,"@stdlib/math/base/special/sqrt":1343}],745:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 4.0 );
* // returns ~0.22
*
* y = cdf( 2.0 );
* // returns 0.0
*/
function factory( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < mu ) {
			return 0.0;
		}
		z = sqrt( c / ( 2.0 * ( x-mu ) ) );
		return erfc( z );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":747,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erfc":1250,"@stdlib/math/base/special/sqrt":1343}],746:[function(require,module,exports){
'use strict';

/**
* Lévy distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/levy/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/levy/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.584
*
* y = cdf( 0.3, 0.0, 3.0 );
* // returns ~0.002
*
* @example
* var factory = require( '@stdlib/math/base/dist/levy/cdf' ).factory;

* var myCDF = factory( 2.0, 3.0 );
* var y = myCDF( 100.0 );
* // returns ~0.861
*
* y = myCDF( 10.0 );
* // returns ~0.54
*
* y = myCDF( 2.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":744,"./factory.js":745,"@stdlib/utils/define-read-only-property":1425}],747:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Lévy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 9.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],748:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/levy/entropy' );
var mean = require( '@stdlib/math/base/dist/levy/mean' );
var median = require( '@stdlib/math/base/dist/levy/median' );
var mode = require( '@stdlib/math/base/dist/levy/mode' );
var stdev = require( '@stdlib/math/base/dist/levy/stdev' );
var variance = require( '@stdlib/math/base/dist/levy/variance' );
var cdf = require( '@stdlib/math/base/dist/levy/cdf' );
var logpdf = require( '@stdlib/math/base/dist/levy/logpdf' );
var pdf = require( '@stdlib/math/base/dist/levy/pdf' );
var quantile = require( '@stdlib/math/base/dist/levy/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function levyCDF( x ) {
	return cdf( x, this.mu, this.c );
} // end FUNCTION levyCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function levyLogPDF( x ) {
	return logpdf( x, this.mu, this.c );
} // end FUNCTION levyLogPDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function levyPDF( x ) {
	return pdf( x, this.mu, this.c );
} // end FUNCTION levyPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function levyQuantile( p ) {
	return quantile( p, this.mu, this.c );
} // end FUNCTION levyQuantile()


// MAIN //

/**
* Lévy distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [c=1.0] - scale parameter
* @throws {TypeError} `c` must be a positive number
* @returns {Levy} distribution instance
*
* @example
* var levy = new Levy( 1.0, 1.0 );
*
* var y = levy.cdf( 3.0 );
* // returns ~0.48
*
* var mode = levy.mode;
* // returns ~1.333
*/
function Levy() {
	var mu;
	var c;
	if ( !(this instanceof Levy) ) {
		if ( arguments.length === 0 ) {
			return new Levy();
		}
		return new Levy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		c = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( c ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `c` must be a positive number. Value: `' + c + '`' );
		}
	} else {
		mu = 0.0;
		c = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'c', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return c;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			c = value;
		}
	});
	return this;
} // end FUNCTION Levy()

/**
* Lévy distribution differential entropy.
*
* @memberof Levy.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.entropy;
* // returns ~5.809
*/
Object.defineProperty( Levy.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.c );
	}
});

/**
* Lévy distribution expected value.
*
* @memberof Levy.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.mean;
* // returns Number.POSITIVE_INFINITY
*/
Object.defineProperty( Levy.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.c );
	}
});

/**
* Lévy distribution median.
*
* @memberof Levy.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.median;
* // returns ~30.377
*/
Object.defineProperty( Levy.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.c );
	}
});

/**
* Lévy distribution mode.
*
* @memberof Levy.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.mode;
* // returns 8.0
*/
Object.defineProperty( Levy.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.c );
	}
});

/**
* Lévy distribution standard deviation.
*
* @memberof Levy.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.stdev;
* // returns Number.POSITIVE_INFINITY
*/
Object.defineProperty( Levy.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.c );
	}
});

/**
* Lévy distribution variance.
*
* @memberof Levy.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.variance;
* // returns Number.POSITIVE_INFINITY
*/
Object.defineProperty( Levy.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.c );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Levy.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.cdf( 2.5 );
* // returns ~0.005
*/
setReadOnly( Levy.prototype, 'cdf', levyCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Levy.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.logpdf( 2.5 );
* // returns ~-3.186
*/
setReadOnly( Levy.prototype, 'logpdf', levyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Levy.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.pdf( 2.5 );
* // returns ~0.041
*/
setReadOnly( Levy.prototype, 'pdf', levyPDF );

/**
* Evaluates the quantile function.
*
* @memberof Levy.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.quantile( 0.5 );
* // returns ~10.792
*/
setReadOnly( Levy.prototype, 'quantile', levyQuantile );


// EXPORTS //

module.exports = Levy;

},{"@stdlib/assert/is-nan":12,"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/levy/cdf":746,"@stdlib/math/base/dist/levy/entropy":751,"@stdlib/math/base/dist/levy/logpdf":754,"@stdlib/math/base/dist/levy/mean":757,"@stdlib/math/base/dist/levy/median":759,"@stdlib/math/base/dist/levy/mode":761,"@stdlib/math/base/dist/levy/pdf":764,"@stdlib/math/base/dist/levy/quantile":768,"@stdlib/math/base/dist/levy/stdev":771,"@stdlib/math/base/dist/levy/variance":773,"@stdlib/utils/define-read-only-property":1425}],749:[function(require,module,exports){
'use strict';

/**
* Lévy distribution constructor.
*
* @module @stdlib/math/base/dist/levy/ctor
*
* @example
* var Levy = require( '@stdlib/math/base/dist/levy/ctor' );
*
* var levy = new Levy( 1.0, 1.0 );
*
* var y = levy.cdf( 1.0 );
* // returns 0.0
*
* var mean = levy.mean;
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":748}],750:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/math/constants/float64-eulergamma' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

var THREE_GAMMA = 3.0 * GAMMA;


// MAIN //

/**
* Returns the differential entropy for a Lévy distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~3.324
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~4.018
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return ( 1.0 + THREE_GAMMA + ln( 16.0*c*c*PI ) ) / 2.0;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-eulergamma":1393,"@stdlib/math/constants/float64-pi":1413}],751:[function(require,module,exports){
'use strict';

/**
* Lévy distribution differential entropy.
*
* @module @stdlib/math/base/dist/levy/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/levy/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~3.324
*
* y = entropy( 4.0, 2.0 );
* // returns ~4.018
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":750}],752:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace levy
*/
var levy = {};

/**
* @name cdf
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/cdf}
*/
setReadOnly( levy, 'cdf', require( '@stdlib/math/base/dist/levy/cdf' ) );

/**
* @name entropy
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/entropy}
*/
setReadOnly( levy, 'entropy', require( '@stdlib/math/base/dist/levy/entropy' ) );

/**
* @name Levy
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/ctor}
*/
setReadOnly( levy, 'Levy', require( '@stdlib/math/base/dist/levy/ctor' ) );

/**
* @name logpdf
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/logpdf}
*/
setReadOnly( levy, 'logpdf', require( '@stdlib/math/base/dist/levy/logpdf' ) );

/**
* @name mean
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/mean}
*/
setReadOnly( levy, 'mean', require( '@stdlib/math/base/dist/levy/mean' ) );

/**
* @name median
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/median}
*/
setReadOnly( levy, 'median', require( '@stdlib/math/base/dist/levy/median' ) );

/**
* @name mode
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/mode}
*/
setReadOnly( levy, 'mode', require( '@stdlib/math/base/dist/levy/mode' ) );

/**
* @name pdf
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/pdf}
*/
setReadOnly( levy, 'pdf', require( '@stdlib/math/base/dist/levy/pdf' ) );

/**
* @name quantile
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/quantile}
*/
setReadOnly( levy, 'quantile', require( '@stdlib/math/base/dist/levy/quantile' ) );

/**
* @name stdev
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/stdev}
*/
setReadOnly( levy, 'stdev', require( '@stdlib/math/base/dist/levy/stdev' ) );

/**
* @name variance
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/levy/variance}
*/
setReadOnly( levy, 'variance', require( '@stdlib/math/base/dist/levy/variance' ) );


// EXPORTS //

module.exports = levy;

},{"@stdlib/math/base/dist/levy/cdf":746,"@stdlib/math/base/dist/levy/ctor":749,"@stdlib/math/base/dist/levy/entropy":751,"@stdlib/math/base/dist/levy/logpdf":754,"@stdlib/math/base/dist/levy/mean":757,"@stdlib/math/base/dist/levy/median":759,"@stdlib/math/base/dist/levy/mode":761,"@stdlib/math/base/dist/levy/pdf":764,"@stdlib/math/base/dist/levy/quantile":768,"@stdlib/math/base/dist/levy/stdev":771,"@stdlib/math/base/dist/levy/variance":773,"@stdlib/utils/define-read-only-property":1425}],753:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_TWO_PI = require( '@stdlib/math/constants/float64-ln-two-pi' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 11.0 );
* // returns ~-1.572
*
* y = logpdf( 10.0 );
* // returns Number.NEGATIVE_INFINITY
*/
function factory( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return nan;
	}
	return logpdf;

	/**
	* Evaluates the probability density function (PDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= mu ) {
			return NINF;
		}
		z = x - mu;
		return 0.5 * ( ln( c ) - LN_TWO_PI - ( c/z ) - ( 3.0*ln( z ) ) );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":756,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ln-two-pi":1402,"@stdlib/math/constants/float64-ninf":1411}],754:[function(require,module,exports){
'use strict';

/**
* Lévy distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/levy/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/levy/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.209
*
* @example
* var factory = require( '@stdlib/math/base/dist/levy/logpdf' ).factory;
*
* var logpdf = factory( 10.0, 2.0 );
* y = logpdf( 11.0 );
* // returns ~-1.572
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":753,"./logpdf.js":755,"@stdlib/utils/define-read-only-property":1425}],755:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_TWO_PI = require( '@stdlib/math/constants/float64-ln-two-pi' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.209
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, mu, c ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x <= mu ) {
		return NINF;
	}
	z = x - mu;
	return 0.5 * ( ln( c ) - LN_TWO_PI - ( c/z ) - ( 3.0*ln( z ) ) );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ln-two-pi":1402,"@stdlib/math/constants/float64-ninf":1411}],756:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid Lévy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 9.0 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],757:[function(require,module,exports){
'use strict';

/**
* Lévy distribution expected value.
*
* @module @stdlib/math/base/dist/levy/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/levy/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns Number.POSITIVE_INFINITY
*
* y = mean( 4.0, 2.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":758}],758:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the expected value for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = mean( 5.0, 2.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return PINF;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],759:[function(require,module,exports){
'use strict';

/**
* Lévy distribution median.
*
* @module @stdlib/math/base/dist/levy/median
*
* @example
* var median = require( '@stdlib/math/base/dist/levy/median' );
*
* var y = median( 0.0, 1.0 );
* // returns ~2.198
*
* y = median( 4.0, 2.0 );
* // returns ~8.396
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":760}],760:[function(require,module,exports){
'use strict';

// MODULES //

var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// VARIABLES //

var DENOM = 2.0 * pow( erfcinv( 0.5 ), 2.0 );


// MAIN //

/**
* Returns the median for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns ~2.198
* @example
* var y = median( 5.0, 2.0 );
* // returns ~9.396
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return mu + ( c / DENOM );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/pow":1311}],761:[function(require,module,exports){
'use strict';

/**
* Lévy distribution mode.
*
* @module @stdlib/math/base/dist/levy/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/levy/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns ~0.333
*
* y = mode( 4.0, 2.0 );
* // returns ~4.667
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":762}],762:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns ~0.333
* @example
* var y = mode( 5.0, 2.0 );
* // returns ~5.667
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return mu + ( c / 3.0 );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],763:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 11.0 );
* // returns ~0.208
*
* y = pdf( 10.0 );
* // returns 0.0
*/
function factory( mu, c ) {
	if ( isnan( mu ) || isnan( c ) ) {
		return nan;
	}
	if ( c <= 0.0 ) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= mu ) {
			return 0.0;
		}
		return sqrt( c/TWO_PI ) * exp( -c / ( 2.0*(x-mu) ) ) / pow( x-mu, 1.5 );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":765,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-two-pi":1422}],764:[function(require,module,exports){
'use strict';

/**
* Lévy distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/levy/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/levy/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.11
*
* @example
* var factory = require( '@stdlib/math/base/dist/levy/pdf' ).factory;
*
* var pdf = factory( 10.0, 2.0 );
* y = pdf( 11.0 );
* // returns ~0.208
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":763,"./pdf.js":766,"@stdlib/utils/define-read-only-property":1425}],765:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Lévy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 9.0 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],766:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.11
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, mu, c ) {
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x <= mu ) {
		return 0.0;
	}
	return sqrt( c/TWO_PI ) * exp( -c / ( 2.0*(x-mu) ) ) / pow( x-mu, 1.5 );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-two-pi":1422}],767:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} c - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~14.396
*
* y = quantile( 0.8 );
* // returns ~41.16
*/
function factory( mu, c ) {
	if ( isnan( mu ) || isnan( c ) ) {
		return nan;
	}
	if ( c <= 0.0 ) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Lévy distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var fval;
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		fval = erfcinv( p );
		return mu + ( c / ( 2.0*fval*fval ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":769,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erfcinv":1252}],768:[function(require,module,exports){
'use strict';

/**
* Lévy distribution quantile function.
*
* @module @stdlib/math/base/dist/levy/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/levy/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
*
* @example
* var factory = require( '@stdlib/math/base/dist/levy/quantile' ).factory;
* var quantile = factory( 10.0, 2.0 );
*
* var y = quantile( 0.5 );
* // returns ~14.396
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":767,"./quantile.js":770,"@stdlib/utils/define-read-only-property":1425}],769:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Lévy distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],770:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );


// MAIN //

/**
* Evaluates the quantile function for a Lévy distribution with location parameter `mu` and scale parameter `c` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} c - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~15.58
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~8.396
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, c ) {
	var fval;
	if (
		isnan( mu ) ||
		isnan( c ) ||
		isnan( p ) ||
		c <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	fval = erfcinv( p );
	return mu + ( c / ( 2.0*fval*fval ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erfcinv":1252}],771:[function(require,module,exports){
'use strict';

/**
* Lévy distribution standard deviation.
*
* @module @stdlib/math/base/dist/levy/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/levy/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns Number.POSITIVE_INFINITY
*
* y = stdev( 4.0, 2.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":772}],772:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = stdev( 5.0, 2.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return PINF;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],773:[function(require,module,exports){
'use strict';

/**
* Lévy distribution variance.
*
* @module @stdlib/math/base/dist/levy/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/levy/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns Number.POSITIVE_INFINITY
*
* y = variance( 4.0, 2.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":774}],774:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the variance for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = variance( 5.0, 2.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return PINF;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],775:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace dist
*/
var dist = {};

/**
* @name arcsine
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/arcsine}
*/
setReadOnly( dist, 'arcsine', require( '@stdlib/math/base/dist/arcsine' ) );

/**
* @name beta
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/beta}
*/
setReadOnly( dist, 'beta', require( '@stdlib/math/base/dist/beta' ) );

/**
* @name betaprime
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/betaprime}
*/
setReadOnly( dist, 'betaprime', require( '@stdlib/math/base/dist/betaprime' ) );

/**
* @name binomial
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/binomial}
*/
setReadOnly( dist, 'binomial', require( '@stdlib/math/base/dist/binomial' ) );

/**
* @name cauchy
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/cauchy}
*/
setReadOnly( dist, 'cauchy', require( '@stdlib/math/base/dist/cauchy' ) );

/**
* @name chi
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/chi}
*/
setReadOnly( dist, 'chi', require( '@stdlib/math/base/dist/chi' ) );

/**
* @name chisquare
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/chisquare}
*/
setReadOnly( dist, 'chisquare', require( '@stdlib/math/base/dist/chisquare' ) );

/**
* @name cosine
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/cosine}
*/
setReadOnly( dist, 'cosine', require( '@stdlib/math/base/dist/cosine' ) );

/**
* @name degenerate
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/degenerate}
*/
setReadOnly( dist, 'degenerate', require( '@stdlib/math/base/dist/degenerate' ) );

/**
* @name erlang
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/erlang}
*/
setReadOnly( dist, 'erlang', require( '@stdlib/math/base/dist/erlang' ) );

/**
* @name exponential
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/exponential}
*/
setReadOnly( dist, 'exponential', require( '@stdlib/math/base/dist/exponential' ) );

/**
* @name f
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/f}
*/
setReadOnly( dist, 'f', require( '@stdlib/math/base/dist/f' ) );

/**
* @name frechet
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/frechet}
*/
setReadOnly( dist, 'frechet', require( '@stdlib/math/base/dist/frechet' ) );

/**
* @name gamma
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/gamma}
*/
setReadOnly( dist, 'gamma', require( '@stdlib/math/base/dist/gamma' ) );

/**
* @name geometric
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/geometric}
*/
setReadOnly( dist, 'geometric', require( '@stdlib/math/base/dist/geometric' ) );

/**
* @name gumbel
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/gumbel}
*/
setReadOnly( dist, 'gumbel', require( '@stdlib/math/base/dist/gumbel' ) );

/**
* @name hypergeometric
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/hypergeometric}
*/

setReadOnly( dist, 'hypergeometric', require( '@stdlib/math/base/dist/hypergeometric' ) );

/**
* @name invgamma
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/invgamma}
*/
setReadOnly( dist, 'invgamma', require( '@stdlib/math/base/dist/invgamma' ) );

/**
* @name kumaraswamy
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/kumaraswamy}
*/
setReadOnly( dist, 'kumaraswamy', require( '@stdlib/math/base/dist/kumaraswamy' ) );

/**
* @name laplace
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/laplace}
*/
setReadOnly( dist, 'laplace', require( '@stdlib/math/base/dist/laplace' ) );

/**
* @name levy
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/levy}
*/
setReadOnly( dist, 'levy', require( '@stdlib/math/base/dist/levy' ) );

/**
* @name logistic
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/logistic}
*/
setReadOnly( dist, 'logistic', require( '@stdlib/math/base/dist/logistic' ) );

/**
* @name lognormal
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/lognormal}
*/
setReadOnly( dist, 'lognormal', require( '@stdlib/math/base/dist/lognormal' ) );

/**
* @name negativeBinomial
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/negative-binomial}
*/
setReadOnly( dist, 'negativeBinomial', require( '@stdlib/math/base/dist/negative-binomial' ) );

/**
* @name normal
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/normal}
*/
setReadOnly( dist, 'normal', require( '@stdlib/math/base/dist/normal' ) );

/**
* @name pareto1
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/pareto-type1}
*/
setReadOnly( dist, 'pareto1', require( '@stdlib/math/base/dist/pareto-type1' ) );

/**
* @name poisson
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/poisson}
*/
setReadOnly( dist, 'poisson', require( '@stdlib/math/base/dist/poisson' ) );

/**
* @name rayleigh
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/rayleigh}
*/
setReadOnly( dist, 'rayleigh', require( '@stdlib/math/base/dist/rayleigh' ) );

/**
* @name t
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/t}
*/
setReadOnly( dist, 't', require( '@stdlib/math/base/dist/t' ) );

/**
* @name triangular
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/triangular}
*/
setReadOnly( dist, 'triangular', require( '@stdlib/math/base/dist/triangular' ) );

/**
* @name truncatedNormal
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/truncated-normal}
*/
setReadOnly( dist, 'truncatedNormal', require( '@stdlib/math/base/dist/truncated-normal' ) );

/**
* @name uniform
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/uniform}
*/
setReadOnly( dist, 'uniform', require( '@stdlib/math/base/dist/uniform' ) );

/**
* @name weibull
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dist/weibull}
*/
setReadOnly( dist, 'weibull', require( '@stdlib/math/base/dist/weibull' ) );


// EXPORTS //

module.exports = dist;

},{"@stdlib/math/base/dist/arcsine":69,"@stdlib/math/base/dist/beta":104,"@stdlib/math/base/dist/betaprime":142,"@stdlib/math/base/dist/binomial":175,"@stdlib/math/base/dist/cauchy":210,"@stdlib/math/base/dist/chi":240,"@stdlib/math/base/dist/chisquare":267,"@stdlib/math/base/dist/cosine":296,"@stdlib/math/base/dist/degenerate":330,"@stdlib/math/base/dist/erlang":365,"@stdlib/math/base/dist/exponential":398,"@stdlib/math/base/dist/f":433,"@stdlib/math/base/dist/frechet":463,"@stdlib/math/base/dist/gamma":498,"@stdlib/math/base/dist/geometric":539,"@stdlib/math/base/dist/gumbel":582,"@stdlib/math/base/dist/hypergeometric":624,"@stdlib/math/base/dist/invgamma":653,"@stdlib/math/base/dist/kumaraswamy":680,"@stdlib/math/base/dist/laplace":711,"@stdlib/math/base/dist/levy":752,"@stdlib/math/base/dist/logistic":786,"@stdlib/math/base/dist/lognormal":830,"@stdlib/math/base/dist/negative-binomial":859,"@stdlib/math/base/dist/normal":894,"@stdlib/math/base/dist/pareto-type1":929,"@stdlib/math/base/dist/poisson":958,"@stdlib/math/base/dist/rayleigh":994,"@stdlib/math/base/dist/t":1037,"@stdlib/math/base/dist/triangular":1069,"@stdlib/math/base/dist/truncated-normal":1094,"@stdlib/math/base/dist/uniform":1108,"@stdlib/math/base/dist/weibull":1149,"@stdlib/utils/define-read-only-property":1425}],776:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.881
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.159
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function cdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s )
	) {
		return NaN;
	}
	if ( s < 0.0 ) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x < mu ? 0.0 : 1.0;
	}
	z = ( x - mu ) / s;
	return 1.0 / ( 1.0 + exp( -z ) );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],777:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.209
*
* y = cdf( 4.0 );
* // returns ~0.661
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / s;
		return 1.0 / ( 1.0 + exp( -z ) );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":779,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/cdf":328,"@stdlib/math/base/special/exp":1257}],778:[function(require,module,exports){
'use strict';

/**
* Logistic distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/logistic/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/logistic/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.881
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 1.0 );
* // returns ~0.209
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":776,"./factory.js":777,"@stdlib/utils/define-read-only-property":1425}],779:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid logistic distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],780:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/logistic/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/logistic/kurtosis' );
var mean = require( '@stdlib/math/base/dist/logistic/mean' );
var median = require( '@stdlib/math/base/dist/logistic/median' );
var mode = require( '@stdlib/math/base/dist/logistic/mode' );
var skewness = require( '@stdlib/math/base/dist/logistic/skewness' );
var stdev = require( '@stdlib/math/base/dist/logistic/stdev' );
var variance = require( '@stdlib/math/base/dist/logistic/variance' );
var cdf = require( '@stdlib/math/base/dist/logistic/cdf' );
var logcdf = require( '@stdlib/math/base/dist/logistic/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/logistic/logpdf' );
var mgf = require( '@stdlib/math/base/dist/logistic/mgf' );
var pdf = require( '@stdlib/math/base/dist/logistic/pdf' );
var quantile = require( '@stdlib/math/base/dist/logistic/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function logisticCDF( x ) {
	return cdf( x, this.mu, this.s );
} // end FUNCTION logisticCDF()

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function logisticLogCDF( x ) {
	return logcdf( x, this.mu, this.s );
} // end FUNCTION logisticLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function logisticLogPDF( x ) {
	return logpdf( x, this.mu, this.s );
} // end FUNCTION logisticLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function logisticMGF( t ) {
	return mgf( t, this.mu, this.s );
} // end FUNCTION logisticMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function logisticPDF( x ) {
	return pdf( x, this.mu, this.s );
} // end FUNCTION logisticPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function logisticQuantile( p ) {
	return quantile( p, this.mu, this.s );
} // end FUNCTION logisticQuantile()


// MAIN //

/**
* Logistic distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [s=1.0] - scale parameter
* @throws {TypeError} `s` must be a positive number
* @returns {Logistic} distribution instance
*
* @example
* var logistic = new Logistic( 1.0, 1.0 );
*
* var y = logistic.cdf( 1.5 );
* // returns ~0.622
*
* var mu = logistic.mean;
* // returns 1.0
*/
function Logistic() {
	var mu;
	var s;
	if ( !(this instanceof Logistic) ) {
		if ( arguments.length === 0 ) {
			return new Logistic();
		}
		return new Logistic( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		s = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( s ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `s` must be a positive number. Value: `' + s + '`' );
		}
	} else {
		mu = 0.0;
		s = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	return this;
} // end FUNCTION Logistic()

/**
* Logistic distribution differential entropy.
*
* @memberof Logistic.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.entropy;
* // returns ~4.485
*/
Object.defineProperty( Logistic.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.s );
	}
});

/**
* Logistic distribution excess kurtosis.
*
* @memberof Logistic.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.kurtosis;
* // returns 1.2
*/
Object.defineProperty( Logistic.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.s );
	}
});

/**
* Logistic distribution expected value.
*
* @memberof Logistic.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.mean;
* // returns 4.0
*/
Object.defineProperty( Logistic.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.s );
	}
});

/**
* Logistic distribution median.
*
* @memberof Logistic.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.median;
* // returns 4.0
*/
Object.defineProperty( Logistic.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.s );
	}
});

/**
* Logistic distribution mode.
*
* @memberof Logistic.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.mode;
* // returns 4.0
*/
Object.defineProperty( Logistic.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.s );
	}
});

/**
* Logistic distribution skewness.
*
* @memberof Logistic.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.skewness;
* // returns 0.0
*/
Object.defineProperty( Logistic.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.s );
	}
});

/**
* Logistic distribution standard deviation.
*
* @memberof Logistic.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.stdev;
* // returns ~21.766
*/
Object.defineProperty( Logistic.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.s );
	}
});

/**
* Logistic distribution variance.
*
* @memberof Logistic.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.variance;
* // returns ~473.741
*/
Object.defineProperty( Logistic.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.s );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Logistic.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.cdf( 0.5 );
* // returns ~0.407
*/
setReadOnly( Logistic.prototype, 'cdf', logisticCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Logistic.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.logcdf( 0.5 );
* // returns ~-0.898
*/
setReadOnly( Logistic.prototype, 'logcdf', logisticLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Logistic.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.logpdf( 0.8 );
* // returns ~-2.795
*/
setReadOnly( Logistic.prototype, 'logpdf', logisticLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Logistic.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.mgf( 0.2 );
* // returns ~6.379
*/
setReadOnly( Logistic.prototype, 'mgf', logisticMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Logistic.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.pdf( 0.8 );
* // returns 0.0625
*/
setReadOnly( Logistic.prototype, 'pdf', logisticPDF );

/**
* Evaluates the quantile function.
*
* @memberof Logistic.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Logistic.prototype, 'quantile', logisticQuantile );


// EXPORTS //

module.exports = Logistic;

},{"@stdlib/assert/is-nan":12,"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/logistic/cdf":778,"@stdlib/math/base/dist/logistic/entropy":783,"@stdlib/math/base/dist/logistic/kurtosis":784,"@stdlib/math/base/dist/logistic/logcdf":788,"@stdlib/math/base/dist/logistic/logpdf":793,"@stdlib/math/base/dist/logistic/mean":796,"@stdlib/math/base/dist/logistic/median":798,"@stdlib/math/base/dist/logistic/mgf":801,"@stdlib/math/base/dist/logistic/mode":804,"@stdlib/math/base/dist/logistic/pdf":807,"@stdlib/math/base/dist/logistic/quantile":811,"@stdlib/math/base/dist/logistic/skewness":814,"@stdlib/math/base/dist/logistic/stdev":816,"@stdlib/math/base/dist/logistic/variance":818,"@stdlib/utils/define-read-only-property":1425}],781:[function(require,module,exports){
'use strict';

/**
* Logistic distribution constructor.
*
* @module @stdlib/math/base/dist/logistic/ctor
*
* @example
* var Logistic = require( '@stdlib/math/base/dist/logistic/ctor' );
*
* var logistic = new Logistic( 1.0, 1.0 );
*
* var y = logistic.cdf( 1.5 );
* // returns ~0.622
*
* var mu = logistic.mean;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":780}],782:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns 2.0
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.693
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return ln( s ) + 2.0;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300}],783:[function(require,module,exports){
'use strict';

/**
* Logistic distribution differential entropy.
*
* @module @stdlib/math/base/dist/logistic/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/logistic/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns 2.0
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.693
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":782}],784:[function(require,module,exports){
'use strict';

/**
* Logistic distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/logistic/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/logistic/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 1.2
*
* y = kurtosis( 4.0, 2.0 );
* // returns 1.2
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":785}],785:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 1.2
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 1.2
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 1.2;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],786:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace logistic
*/
var logistic = {};

/**
* @name cdf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/cdf}
*/
setReadOnly( logistic, 'cdf', require( '@stdlib/math/base/dist/logistic/cdf' ) );

/**
* @name entropy
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/entropy}
*/
setReadOnly( logistic, 'entropy', require( '@stdlib/math/base/dist/logistic/entropy' ) );

/**
* @name kurtosis
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/kurtosis}
*/
setReadOnly( logistic, 'kurtosis', require( '@stdlib/math/base/dist/logistic/kurtosis' ) );

/**
* @name logcdf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/logcdf}
*/
setReadOnly( logistic, 'logcdf', require( '@stdlib/math/base/dist/logistic/logcdf' ) );

/**
* @name Logistic
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/ctor}
*/
setReadOnly( logistic, 'Logistic', require( '@stdlib/math/base/dist/logistic/ctor' ) );

/**
* @name logpdf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/logpdf}
*/
setReadOnly( logistic, 'logpdf', require( '@stdlib/math/base/dist/logistic/logpdf' ) );

/**
* @name mean
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/mean}
*/
setReadOnly( logistic, 'mean', require( '@stdlib/math/base/dist/logistic/mean' ) );

/**
* @name median
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/median}
*/
setReadOnly( logistic, 'median', require( '@stdlib/math/base/dist/logistic/median' ) );

/**
* @name mgf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/mgf}
*/
setReadOnly( logistic, 'mgf', require( '@stdlib/math/base/dist/logistic/mgf' ) );

/**
* @name mode
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/mode}
*/
setReadOnly( logistic, 'mode', require( '@stdlib/math/base/dist/logistic/mode' ) );

/**
* @name pdf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/pdf}
*/
setReadOnly( logistic, 'pdf', require( '@stdlib/math/base/dist/logistic/pdf' ) );

/**
* @name quantile
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/quantile}
*/
setReadOnly( logistic, 'quantile', require( '@stdlib/math/base/dist/logistic/quantile' ) );

/**
* @name skewness
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/skewness}
*/
setReadOnly( logistic, 'skewness', require( '@stdlib/math/base/dist/logistic/skewness' ) );

/**
* @name stdev
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/stdev}
*/
setReadOnly( logistic, 'stdev', require( '@stdlib/math/base/dist/logistic/stdev' ) );

/**
* @name variance
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/logistic/variance}
*/
setReadOnly( logistic, 'variance', require( '@stdlib/math/base/dist/logistic/variance' ) );


// EXPORTS //

module.exports = logistic;

},{"@stdlib/math/base/dist/logistic/cdf":778,"@stdlib/math/base/dist/logistic/ctor":781,"@stdlib/math/base/dist/logistic/entropy":783,"@stdlib/math/base/dist/logistic/kurtosis":784,"@stdlib/math/base/dist/logistic/logcdf":788,"@stdlib/math/base/dist/logistic/logpdf":793,"@stdlib/math/base/dist/logistic/mean":796,"@stdlib/math/base/dist/logistic/median":798,"@stdlib/math/base/dist/logistic/mgf":801,"@stdlib/math/base/dist/logistic/mode":804,"@stdlib/math/base/dist/logistic/pdf":807,"@stdlib/math/base/dist/logistic/quantile":811,"@stdlib/math/base/dist/logistic/skewness":814,"@stdlib/math/base/dist/logistic/stdev":816,"@stdlib/math/base/dist/logistic/variance":818,"@stdlib/utils/define-read-only-property":1425}],787:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/logcdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1pexp = require( './log1pexp.js' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.0 );
* // returns ~-1.565
*
* y = logcdf( 4.0 );
* // returns ~-0.414
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / s;
		return -log1pexp( -z );
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./log1pexp.js":789,"./nan.js":791,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/logcdf":332}],788:[function(require,module,exports){
'use strict';

/**
* Logistic distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/logistic/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/logistic/logcdf' );
*
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.127
*
* var mylogcdf = logcdf.factory( 3.0, 1.5 );
*
* var y = mylogcdf( 1.0 );
* // returns ~-1.565
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":787,"./logcdf.js":790,"@stdlib/utils/define-read-only-property":1425}],789:[function(require,module,exports){
'use strict';

/*
* This function has been adapted from [StatsFuns.jl]{@link https://github.com/JuliaStats/StatsFuns.jl/blob/master/src/basicfuns.jl} Julia package.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
The StatsFuns.jl package is licensed under the MIT "Expat" License:
Copyright (c) 2015: Dahua Lin.
*/

// MODULES //

var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Compute ln( 1 + exp(x) ) without overflow.
*
* @param {number} x - input value
* @returns {number} function value
*/
function log1pexp( x ) {
	if ( x <= 18.0 ) {
		return log1p( exp(x) );
	}
	if ( x > 33.3 ) {
		return x;
	}
	// Case: 18.0 < x <= 33.3
	return x + exp( -x );
} // end FUNCTION log1pexp()


// EXPORTS //

module.exports = log1pexp;

},{"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/log1p":1302}],790:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var log1pexp = require( './log1pexp.js' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.127
* @example
* var y = logcdf( 5.0, 10.0, 3.0 );
* // returns ~-1.839
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
* @example
* var y = logcdf( 2, NaN, 1.0 );
* // returns NaN
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function logcdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s )
	) {
		return NaN;
	}
	if ( s < 0.0 ) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x < mu ? NINF : 0.0;
	}
	z = ( x - mu ) / s;
	return -log1pexp( -z );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"./log1pexp.js":789,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-ninf":1411}],791:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an invalid logistic distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 1.0 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],792:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns -2.079
*
* y = logpdf( 5.0 );
* // returns ~-3.352
*/
function factory( mu, s ) {
	var ls;
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	ls = ln( s );
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var az;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === NINF ) {
			return NINF;
		}
		z = ( x - mu ) / s;
		az = -abs( z );
		return az - (2.0 * log1p( exp( az ) )) - ls;
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":795,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/logpdf":336,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-ninf":1411}],793:[function(require,module,exports){
'use strict';

/**
* Logistic distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/logistic/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/logistic/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns -2.079
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = require( './logpdf.js' );

},{"./factory.js":792,"./logpdf.js":794,"@stdlib/utils/define-read-only-property":1425}],794:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns ~-3.352
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
* @example
* var y = logpdf( 2.0, 8.0, 0.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 8.0, 8.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*/
function logpdf( x, mu, s ) {
	var az;
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s )
	) {
		return NaN;
	}
	if ( x === NINF ) {
		return NINF;
	}
	if ( s < 0.0 ) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : NINF;
	}
	z = ( x - mu ) / s;
	az = -abs( z );
	return az - (2.0 * log1p( exp( az ) )) - ln( s );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],795:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid logistic distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 9.0 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],796:[function(require,module,exports){
'use strict';

/**
* Logistic distribution expected value.
*
* @module @stdlib/math/base/dist/logistic/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/logistic/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":797}],797:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],798:[function(require,module,exports){
'use strict';

/**
* Logistic distribution median.
*
* @module @stdlib/math/base/dist/logistic/median
*
* @example
* var median = require( '@stdlib/math/base/dist/logistic/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":799}],799:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43}],800:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/mgf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinc = require( '@stdlib/math/base/special/sinc' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a logistic distribution with mean `mu` and scale parameter `s`.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 10.0, 0.5 );
*
* var y = mgf( 0.5 );
* // returns ~164.846
*
* y = mgf( 2.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a logistic distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var st = s * t;
		return exp( mu * t ) / sinc( st );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":803,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/mgf":340,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/sinc":1337}],801:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a logistic distribution.
*
* @module @stdlib/math/base/dist/logistic/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/logistic/mgf' );
*
* var y = mgf( 0.9, 0.0, 1.0 );
* // returns ~9.15
*
* y = mgf( 0.1, 4.0, 4.0 );
* // returns ~1.971
*
* y = mgf( -0.2, 4.0, 4.0 );
* // returns ~1.921
*
* var mymgf = mgf.factory( 10.0, 0.5 );
*
* y = mymgf( 0.5 );
* // returns ~164.846
*
* y = mymgf( 2.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":800,"./mgf.js":802,"@stdlib/utils/define-read-only-property":1425}],802:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinc = require( '@stdlib/math/base/special/sinc' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a logistic distribution with mean `mu` and scale parameter `s` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.9, 0.0, 1.0 );
* // returns ~9.15
* @example
* var y = mgf( 0.1, 4.0, 4.0 );
* // returns ~1.971
* @example
* var y = mgf( -0.2, 4.0, 4.0 );
* // returns ~1.921
* @example
* var y = mgf( 0.5, 0.0, -1.0 );
* // returns NaN
* @example
* var y = mgf( 0.5, 0.0, 4.0 );
* // returns NaN
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*/
function mgf( t, mu, s ) {
	var st;
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( s )
	) {
		return NaN;
	}
	if ( s < 0.0 ) {
		return NaN;
	}
	st = s * t;
	return exp( mu * t ) / sinc( st );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/sinc":1337}],803:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid logistic distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],804:[function(require,module,exports){
'use strict';

/**
* Logistic distribution mode.
*
* @module @stdlib/math/base/dist/logistic/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/logistic/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":805}],805:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],806:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 10.0 );
* // returns 0.125
*
* y = pdf( 5.0 );
* // returns ~0.035
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var ez;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === NINF ) {
			return 0.0;
		}
		z = abs( ( x - mu ) / s );
		ez = exp( -z );
		return ez / ( s * pow( 1.0 + ez, 2.0 ) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":808,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/pdf":344,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411}],807:[function(require,module,exports){
'use strict';

/**
* Logistic distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/logistic/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/logistic/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.105
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns 0.125
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":806,"./pdf.js":809,"@stdlib/utils/define-read-only-property":1425}],808:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid logistic distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 9.0 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],809:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.105
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns ~0.035
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*/
function pdf( x, mu, s ) {
	var ez;
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : 0.0;
	}
	z = abs( ( x - mu ) / s );
	ez = exp( -z );
	return ez / ( s * pow( 1.0 + ez, 2.0 ) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],810:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/quantile' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~12.773
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) ) {
		return nan;
	}
	if ( s < 0.0 ) {
		return nan;
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a logistic distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu + (s * ln( p / ( 1.0 - p ) ));
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":812,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/quantile":352,"@stdlib/math/base/special/ln":1300}],811:[function(require,module,exports){
'use strict';

/**
* Logistic distribution quantile function.
*
* @module @stdlib/math/base/dist/logistic/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/logistic/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":810,"./quantile.js":813,"@stdlib/utils/define-read-only-property":1425}],812:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid logistic distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],813:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the quantile function for a logistic distribution with location parameter `mu` and scale parameter `s` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return mu;
	}
	return mu + (s * ln( p / ( 1.0 - p ) ));
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300}],814:[function(require,module,exports){
'use strict';

/**
* Logistic distribution skewness.
*
* @module @stdlib/math/base/dist/logistic/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/logistic/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":815}],815:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43}],816:[function(require,module,exports){
'use strict';

/**
* Logistic distribution standard deviation.
*
* @module @stdlib/math/base/dist/logistic/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/logistic/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.814
*
* y = stdev( 4.0, 2.0 );
* // returns ~3.628
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":817}],817:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var SQRT3 = require( '@stdlib/math/constants/float64-sqrt-three' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Returns the standard deviation for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.814
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~3.628
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return s * PI / SQRT3;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-sqrt-three":1419}],818:[function(require,module,exports){
'use strict';

/**
* Logistic distribution variance.
*
* @module @stdlib/math/base/dist/logistic/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/logistic/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~3.29
*
* y = variance( 4.0, 2.0 );
* // returns ~13.159
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":819}],819:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );


// MAIN //

/**
* Returns the variance for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~3.29
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~13.159
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return ( s*s ) * PI_SQUARED / 3.0;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pi-squared":1412}],820:[function(require,module,exports){
'use strict';

// MODULES //

var normalCDF = require( '@stdlib/math/base/dist/normal/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.756
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.003
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function cdf( x, mu, sigma ) {
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma )
	) {
		return NaN;
	}
	if ( sigma <= 0.0 ) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return normalCDF( ln(x), mu, sigma );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/normal/cdf":886,"@stdlib/math/base/special/ln":1300}],821:[function(require,module,exports){
'use strict';

// MODULES //

var normalCDF = require( '@stdlib/math/base/dist/normal/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.023
*
* y = cdf( 4.0 );
* // returns ~0.141
*/
function factory( mu, sigma ) {
	if ( isnan( mu ) || isnan( sigma ) ) {
		return nan;
	}
	if ( sigma <= 0.0 ) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		return normalCDF( ln(x), mu, sigma );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":823,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/normal/cdf":886,"@stdlib/math/base/special/ln":1300}],822:[function(require,module,exports){
'use strict';

/**
* Evaluates the lognormal distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/lognormal/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/lognormal/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.756
*
* y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.003
*
* var mycdf = factory( 3.0, 1.5 );
*
* y = mycdf( 1.0 );
* // returns ~0.023
*
* y = mycdf( 4.0 );
* // returns ~0.141
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":820,"./factory.js":821,"@stdlib/utils/define-read-only-property":1425}],823:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid lognormal distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 3.14 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],824:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/lognormal/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/lognormal/kurtosis' );
var mean = require( '@stdlib/math/base/dist/lognormal/mean' );
var median = require( '@stdlib/math/base/dist/lognormal/median' );
var mode = require( '@stdlib/math/base/dist/lognormal/mode' );
var skewness = require( '@stdlib/math/base/dist/lognormal/skewness' );
var stdev = require( '@stdlib/math/base/dist/lognormal/stdev' );
var variance = require( '@stdlib/math/base/dist/lognormal/variance' );
var cdf = require( '@stdlib/math/base/dist/lognormal/cdf' );
var pdf = require( '@stdlib/math/base/dist/lognormal/pdf' );
var quantile = require( '@stdlib/math/base/dist/lognormal/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function lognormalCDF( x ) {
	return cdf( x, this.mu, this.sigma );
} // end FUNCTION lognormalCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function lognormalPDF( x ) {
	return pdf( x, this.mu, this.sigma );
} // end FUNCTION lognormalPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function lognormalQuantile( p ) {
	return quantile( p, this.mu, this.sigma );
} // end FUNCTION lognormalQuantile()


// MAIN //

/**
* Lognormal distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {LogNormal} distribution instance
*
* @example
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var mean = lognormal.mean;
* // returns ~4.482
*/
function LogNormal() {
	var sigma;
	var mu;
	if ( !(this instanceof LogNormal) ) {
		if ( arguments.length === 0 ) {
			return new LogNormal();
		}
		return new LogNormal( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		mu = 0.0;
		sigma = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
} // end FUNCTION LogNormal()

/**
* Lognormal distribution differential entropy.
*
* @memberof LogNormal.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.entropy;
* // returns ~7.904
*/
Object.defineProperty( LogNormal.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution excess kurtosis.
*
* @memberof LogNormal.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.kurtosis;
* // returns 1.4243659274306933e+250
*/
Object.defineProperty( LogNormal.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution expected value.
*
* @memberof LogNormal.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mean;
* // returns 1.0148003881138887e+33
*/
Object.defineProperty( LogNormal.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution median.
*
* @memberof LogNormal.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.median;
* // returns ~54.598
*/
Object.defineProperty( LogNormal.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution mode.
*
* @memberof LogNormal.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mode;
* // returns 1.580420060273613e-61
*/
Object.defineProperty( LogNormal.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution skewness.
*
* @memberof LogNormal.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.skewness;
* // returns 6.421080152185613e+93
*/
Object.defineProperty( LogNormal.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution standard deviation.
*
* @memberof LogNormal.prototype
* @name stdev
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.stdev;
* // returns 1.886180808490652e+64
*/
Object.defineProperty( LogNormal.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution variance.
*
* @memberof LogNormal.prototype
* @name variance
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.variance;
* // returns 3.55767804231845e+128
*/
Object.defineProperty( LogNormal.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.sigma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof LogNormal.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.cdf( 0.5 );
* // returns ~0.25
*/
setReadOnly( LogNormal.prototype, 'cdf', lognormalCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof LogNormal.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.pdf( 0.8 );
* // returns ~0.107
*/
setReadOnly( LogNormal.prototype, 'pdf', lognormalPDF );

/**
* Evaluates the quantile function.
*
* @memberof LogNormal.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.quantile( 0.5 );
* // returns ~7.389
*/
setReadOnly( LogNormal.prototype, 'quantile', lognormalQuantile );


// EXPORTS //

module.exports = LogNormal;

},{"@stdlib/assert/is-nan":12,"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/lognormal/cdf":822,"@stdlib/math/base/dist/lognormal/entropy":827,"@stdlib/math/base/dist/lognormal/kurtosis":828,"@stdlib/math/base/dist/lognormal/mean":831,"@stdlib/math/base/dist/lognormal/median":833,"@stdlib/math/base/dist/lognormal/mode":835,"@stdlib/math/base/dist/lognormal/pdf":838,"@stdlib/math/base/dist/lognormal/quantile":842,"@stdlib/math/base/dist/lognormal/skewness":845,"@stdlib/math/base/dist/lognormal/stdev":847,"@stdlib/math/base/dist/lognormal/variance":849,"@stdlib/utils/define-read-only-property":1425}],825:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution constructor.
*
* @module @stdlib/math/base/dist/lognormal/ctor
*
* @example
* var LogNormal = require( '@stdlib/math/base/dist/lognormal/ctor' );
*
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var mean = lognormal.mean;
* // returns ~4.482
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":824}],826:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var SQRT_TWO_PI = require( '@stdlib/math/constants/float64-sqrt-two-pi' );


// MAIN //

/**
* Returns the differential entropy for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~7.112
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return ln( sigma * exp( mu + 0.5 ) * SQRT_TWO_PI );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-sqrt-two-pi":1420}],827:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution entropy.
*
* @module @stdlib/math/base/dist/lognormal/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/lognormal/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* y = entropy( 4.0, 2.0 );
* // returns ~6.112
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":826}],828:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/lognormal/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/lognormal/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns ~110.936
*
* y = kurtosis( 4.0, 2.0 );
* // returns ~9220556.977
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":829}],829:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the excess kurtosis for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns ~110.936
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns ~9220556.977
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, sigma ) {
	var out;
	var s2;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma * sigma;
	out = exp( 4.0*s2 );
	out += 2.0 * exp( 3.0*s2 );
	out += 3.0 * exp( 2.0*s2 );
	out -= 6.0;
	return out;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],830:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace lognormal
*/
var lognormal = {};

/**
* @name cdf
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/cdf}
*/
setReadOnly( lognormal, 'cdf', require( '@stdlib/math/base/dist/lognormal/cdf' ) );

/**
* @name entropy
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/entropy}
*/
setReadOnly( lognormal, 'entropy', require( '@stdlib/math/base/dist/lognormal/entropy' ) );

/**
* @name kurtosis
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/kurtosis}
*/
setReadOnly( lognormal, 'kurtosis', require( '@stdlib/math/base/dist/lognormal/kurtosis' ) );

/**
* @name LogNormal
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/ctor}
*/
setReadOnly( lognormal, 'LogNormal', require( '@stdlib/math/base/dist/lognormal/ctor' ) );

/**
* @name mean
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/mean}
*/
setReadOnly( lognormal, 'mean', require( '@stdlib/math/base/dist/lognormal/mean' ) );

/**
* @name median
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/median}
*/
setReadOnly( lognormal, 'median', require( '@stdlib/math/base/dist/lognormal/median' ) );

/**
* @name mode
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/mode}
*/
setReadOnly( lognormal, 'mode', require( '@stdlib/math/base/dist/lognormal/mode' ) );

/**
* @name pdf
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/pdf}
*/
setReadOnly( lognormal, 'pdf', require( '@stdlib/math/base/dist/lognormal/pdf' ) );

/**
* @name quantile
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/quantile}
*/
setReadOnly( lognormal, 'quantile', require( '@stdlib/math/base/dist/lognormal/quantile' ) );

/**
* @name skewness
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/skewness}
*/
setReadOnly( lognormal, 'skewness', require( '@stdlib/math/base/dist/lognormal/skewness' ) );

/**
* @name stdev
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/stdev}
*/
setReadOnly( lognormal, 'stdev', require( '@stdlib/math/base/dist/lognormal/stdev' ) );

/**
* @name variance
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/lognormal/variance}
*/
setReadOnly( lognormal, 'variance', require( '@stdlib/math/base/dist/lognormal/variance' ) );


// EXPORTS //

module.exports = lognormal;

},{"@stdlib/math/base/dist/lognormal/cdf":822,"@stdlib/math/base/dist/lognormal/ctor":825,"@stdlib/math/base/dist/lognormal/entropy":827,"@stdlib/math/base/dist/lognormal/kurtosis":828,"@stdlib/math/base/dist/lognormal/mean":831,"@stdlib/math/base/dist/lognormal/median":833,"@stdlib/math/base/dist/lognormal/mode":835,"@stdlib/math/base/dist/lognormal/pdf":838,"@stdlib/math/base/dist/lognormal/quantile":842,"@stdlib/math/base/dist/lognormal/skewness":845,"@stdlib/math/base/dist/lognormal/stdev":847,"@stdlib/math/base/dist/lognormal/variance":849,"@stdlib/utils/define-read-only-property":1425}],831:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution expected value.
*
* @module @stdlib/math/base/dist/lognormal/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/lognormal/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns ~1.649
*
* y = mean( 4.0, 2.0 );
* // returns ~403.429
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":832}],832:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the expected value for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns ~1.649
* @example
* var y = mean( 5.0, 2.0 );
* // returns ~1096.633
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return exp( mu + ( ( sigma*sigma ) / 2.0 ) );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],833:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution median.
*
* @module @stdlib/math/base/dist/lognormal/median
*
* @example
* var median = require( '@stdlib/math/base/dist/lognormal/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 1.0
*
* y = median( 4.0, 2.0 );
* // returns ~54.598
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":834}],834:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the median for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 1.0
* @example
* var y = median( 5.0, 2.0 );
* // returns ~148.413
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return exp( mu );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],835:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution mode.
*
* @module @stdlib/math/base/dist/lognormal/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/lognormal/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns ~0.368
*
* y = mode( 4.0, 2.0 );
* // returns 1.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":836}],836:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the mode for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns ~0.368
* @example
* var y = mode( 5.0, 2.0 );
* // returns ~2.718
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return exp( mu - ( sigma*sigma ) );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],837:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 4.0, 2.0 );
* var y = pdf( 10.0 );
* // returns ~0.014
*
* y = pdf( 2.0 );
* // returns ~0.025
*/
function factory( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return nan;
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / ( sqrt( 2.0 * s2 * PI ) );
	B = -1.0 / ( 2.0 * s2 );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.5 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return x <= 0.0 ? 0.0 : (1.0/x) * A * exp( B * pow( ln(x) - mu, 2.0 ) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":839,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],838:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for a lognormal distribution.
*
* @module @stdlib/math/base/dist/lognormal/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/lognormal/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.157
*
* y = pdf( 1.0, 0.0, 1.0 );
* // returns ~0.399
*
* y = pdf( 1.0, 3.0, 1.0 );
* // returns ~0.004
*
* var mypdf = factory( 4.0, 2.0 );
* y = mypdf( 10.0 );
* // returns ~0.014
*
* y = mypdf( 2.0 );
* // returns ~0.025
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":837,"./pdf.js":840,"@stdlib/utils/define-read-only-property":1425}],839:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid lognormal distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],840:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.157
* @example
* var y = pdf( 1.0, 0.0, 1.0 );
* // returns ~0.399
* @example
* var y = pdf( 1.0, 3.0, 1.0 );
* // returns ~0.004
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / ( sqrt( 2.0 * s2 * PI ) );
	B = -1.0 / ( 2.0 * s2 );
	return (1.0/x) * A * exp( B * pow( ln(x) - mu, 2.0 ) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],841:[function(require,module,exports){
'use strict';

// MODULES //

var qnormal = require( '@stdlib/math/base/dist/normal/quantile' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 4.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~54.598
*
* y = quantile( 0.8 );
* // returns ~293.901
*/
function factory( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a lognormal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return exp( mu + (sigma * qnormal( p, 0.0, 1.0 )) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":843,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/normal/quantile":910,"@stdlib/math/base/special/exp":1257}],842:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for a lognormal distribution.
*
* @module @stdlib/math/base/dist/lognormal/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/lognormal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~2.32
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~54.598
*
* var myquantile = quantile.factory( 4.0, 2.0 );
*
* y = myquantile( 0.2 );
* // returns ~10.143
*
* y = myquantile( 0.8 );
* // returns ~293.901
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":841,"./quantile.js":844,"@stdlib/utils/define-read-only-property":1425}],843:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid lognormal distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],844:[function(require,module,exports){
'use strict';

// MODULES //

var qnormal = require( '@stdlib/math/base/dist/normal/quantile' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~2.32
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~54.598
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return exp( mu + (sigma * qnormal( p, 0.0, 1.0 )) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/normal/quantile":910,"@stdlib/math/base/special/exp":1257}],845:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution skewness.
*
* @module @stdlib/math/base/dist/lognormal/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/lognormal/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns ~6.185
*
* y = skewness( 4.0, 2.0 );
* // returns ~414.359
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":846}],846:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the skewness for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns ~6.185
* @example
* var y = skewness( 5.0, 2.0 );
* // returns ~414.359
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, sigma ) {
	var es2;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	es2 = exp( sigma*sigma );
	return ( es2 + 2.0 ) * sqrt( es2 - 1.0 );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/sqrt":1343}],847:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution standard deviation.
*
* @module @stdlib/math/base/dist/lognormal/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/lognormal/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~2.161
*
* y = stdev( 4.0, 2.0 );
* // returns ~2953.533
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":848}],848:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the standard deviation for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~2.161
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~8028.534
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, sigma ) {
	var s2;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma*sigma;
	return sqrt( ( exp( s2 ) - 1.0 ) * exp( ( 2.0*mu ) + s2 ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/sqrt":1343}],849:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution variance.
*
* @module @stdlib/math/base/dist/lognormal/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/lognormal/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~4.671
*
* y = variance( 4.0, 2.0 );
* // returns ~8723355.729
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":850}],850:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the variance for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~4.671
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~64457364.853
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, sigma ) {
	var s2;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma*sigma;
	return ( exp( s2 ) - 1.0 ) * exp( ( 2.0*mu ) + s2 );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],851:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 5.0, 20.0, 0.8 );
* // returns ~0.617
* @example
* var y = cdf( 21.0, 20.0, 0.5 );
* // returns ~0.622
* @example
* var y = cdf( 5.0, 10.0, 0.4 );
* // returns ~0.034
* @example
* var y = cdf( 0.0, 10.0, 0.9 );
* // returns ~0.349
* @example
* var y = cdf( 21.0, 15.5, 0.5 );
* // returns ~0.859
* @example
* var y = cdf( 5.0, 7.4, 0.4 );
* // returns ~0.131
* @example
* var y = cdf( 2.0, 0.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, -2.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( NaN, 20.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, 20.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 20, -1.0 );
* // returns NaN
* @example
* var y = cdf( 2.0, 20, 1.5 );
* // returns NaN
*/
function cdf( x, r, p ) {
	var xint;
	if (
		isnan( x ) ||
		isnan( r ) ||
		isnan( p )
	) {
		return NaN;
	}
	if (
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	// Ensure left-continuity:
	xint = floor( x + 1e-7 );
	return betainc( p, r, xint + 1.0 );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/base/special/floor":1266,"@stdlib/math/constants/float64-pinf":1414}],852:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} CDF
*/
function factory( r, p ) {
	if ( isnan( r ) || isnan( p ) ) {
		return nan;
	}
	if ( r <= 0.0 || p < 0.0 || p > 1.0 ) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	function cdf( x ) {
		var xint;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		// Ensure left-continuity:
		xint = floor( x + 1e-7 );
		return betainc( p, r, xint + 1.0 );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":854,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/base/special/floor":1266,"@stdlib/math/constants/float64-pinf":1414}],853:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/negative-binomial/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/negative-binomial/cdf' );
*
* var y = cdf( 5.0, 20.0, 0.8 );
* // returns ~0.617
*
* y = cdf( 21.0, 20.0, 0.5 );
* // returns ~0.622
*
* y = cdf( 5.0, 10.0, 0.4 );
* // returns ~0.034
*
* y = cdf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* var y = cdf( 21.0, 15.5, 0.5 );
* // returns ~0.859
*
* y = cdf( 5.0, 7.4, 0.4 );
* // returns ~0.131
*
* var mycdf = cdf.factory( 10, 0.5 );
* y = mycdf( 3.0 );
* // returns ~0.046
*
* y = mycdf( 11.0 );
* // returns ~0.668
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":851,"./factory.js":852,"@stdlib/utils/define-read-only-property":1425}],854:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid negative binomial distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],855:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var kurtosis = require( '@stdlib/math/base/dist/negative-binomial/kurtosis' );
var mean = require( '@stdlib/math/base/dist/negative-binomial/mean' );
var mode = require( '@stdlib/math/base/dist/negative-binomial/mode' );
var skewness = require( '@stdlib/math/base/dist/negative-binomial/skewness' );
var stdev = require( '@stdlib/math/base/dist/negative-binomial/stdev' );
var variance = require( '@stdlib/math/base/dist/negative-binomial/variance' );
var cdf = require( '@stdlib/math/base/dist/negative-binomial/cdf' );
var mgf = require( '@stdlib/math/base/dist/negative-binomial/mgf' );
var pmf = require( '@stdlib/math/base/dist/negative-binomial/pmf' );
var quantile = require( '@stdlib/math/base/dist/negative-binomial/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function negativeBinomialCDF( x ) {
	return cdf( x, this.r, this.p );
} // end FUNCTION negative-binomialCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function negativeBinomialMGF( t ) {
	return mgf( t, this.r, this.p );
} // end FUNCTION negativeBinomialMGF()

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function negativeBinomialPMF( x ) {
	return pmf( x, this.r, this.p );
} // end FUNCTION negativeBinomialPMF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function negativeBinomialQuantile( p ) {
	return quantile( p, this.r, this.p );
} // end FUNCTION negativeBinomialQuantile()


// MAIN //

/**
* Negative binomial distribution constructor.
*
* @constructor
* @param {PositiveNumber} [r=1.0] - number of successes until experiment is stopped
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `r` must be a positive number
* @throws {TypeError} `p` must be a number between 0 and 1
* @returns {NegativeBinomial} distribution instance
*
* @example
* var nbinomial = new NegativeBinomial( 5.0, 0.1 );
*
* var y = nbinomial.cdf( 10.0 );
* // returns ~0.013
*
* var mode = nbinomial.mode;
* // returns 36.0
*/
function NegativeBinomial() {
	var r;
	var p;
	if ( !(this instanceof NegativeBinomial) ) {
		if ( arguments.length === 0 ) {
			return new NegativeBinomial();
		}
		return new NegativeBinomial( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		r = arguments[ 0 ];
		p = arguments[ 1 ];
		if ( !isPositive( r ) ) {
			throw new TypeError( 'invalid input argument. Number of trials until experiment is stopped `r` must be a positive number. Value: `' + r + '`' );
		}
		if ( !isProbability( p ) ) {
			throw new TypeError( 'invalid input argument. Success probability `p` must be a number between 0 and 1. Value: `' + p + '`' );
		}
	} else {
		r = 1.0;
		p = 0.5;
	}
	Object.defineProperty( this, 'r', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return r;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			r = value;
		}
	});
	Object.defineProperty( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !isProbability( value ) ) {
				throw new TypeError( 'invalid value. Must be a number between 0 and 1. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
} // end FUNCTION NegativeBinomial()

/**
* Negative binomial distribution excess kurtosis.
*
* @memberof NegativeBinomial.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.kurtosis;
* // returns ~0.522
*/
Object.defineProperty( NegativeBinomial.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.r, this.p );
	}
});

/**
* Negative binomial distribution expected value.
*
* @memberof NegativeBinomial.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.mean;
* // returns ~18.0
*/
Object.defineProperty( NegativeBinomial.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.r, this.p );
	}
});

/**
* Negative binomial distribution mode.
*
* @memberof NegativeBinomial.prototype
* @name mode
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.mode;
* // returns 16.0
*/
Object.defineProperty( NegativeBinomial.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.r, this.p );
	}
});

/**
* Negative binomial distribution skewness.
*
* @memberof NegativeBinomial.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.skewness;
* // returns ~0.596
*/
Object.defineProperty( NegativeBinomial.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.r, this.p );
	}
});

/**
* Negative binomial distribution standard deviation.
*
* @memberof NegativeBinomial.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.stdev;
* // returns ~6.708
*/
Object.defineProperty( NegativeBinomial.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.r, this.p );
	}
});

/**
* Negative binomial distribution variance.
*
* @memberof NegativeBinomial.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.variance;
* // returns ~45.0
*/
Object.defineProperty( NegativeBinomial.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.r, this.p );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof NegativeBinomial.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.cdf( 3.0 );
* // returns ~0.033
*/
setReadOnly( NegativeBinomial.prototype, 'cdf', negativeBinomialCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof NegativeBinomial.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.mgf( 0.1 );
* // returns ~1.66
*/
setReadOnly( NegativeBinomial.prototype, 'mgf', negativeBinomialMGF );

/**
* Evaluates the probability density function (PMF).
*
* @memberof NegativeBinomial.prototype
* @name pmf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.pmf( 9.0 );
* // returns ~0.047
*/
setReadOnly( NegativeBinomial.prototype, 'pmf', negativeBinomialPMF );

/**
* Evaluates the quantile function.
*
* @memberof NegativeBinomial.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.quantile( 0.5 );
* // returns 15.0
*/
setReadOnly( NegativeBinomial.prototype, 'quantile', negativeBinomialQuantile );


// EXPORTS //

module.exports = NegativeBinomial;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/assert/is-probability":34,"@stdlib/math/base/dist/negative-binomial/cdf":853,"@stdlib/math/base/dist/negative-binomial/kurtosis":857,"@stdlib/math/base/dist/negative-binomial/mean":860,"@stdlib/math/base/dist/negative-binomial/mgf":863,"@stdlib/math/base/dist/negative-binomial/mode":866,"@stdlib/math/base/dist/negative-binomial/pmf":870,"@stdlib/math/base/dist/negative-binomial/quantile":874,"@stdlib/math/base/dist/negative-binomial/skewness":878,"@stdlib/math/base/dist/negative-binomial/stdev":880,"@stdlib/math/base/dist/negative-binomial/variance":882,"@stdlib/utils/define-read-only-property":1425}],856:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution constructor.
*
* @module @stdlib/math/base/dist/negative-binomial/ctor
*
* @example
* var NegativeBinomial = require( '@stdlib/math/base/dist/negative-binomial/ctor' );
*
* var nbinomial = new NegativeBinomial( 7.5, 0.2 );
*
* var y = nbinomial.cdf( 12.0 );
* // returns ~0.047
*
* var mode = nbinomial.mode;
* // returns 26.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":855}],857:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/negative-binomial/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/negative-binomial/kurtosis' );
*
* var v = kurtosis( 100, 0.2 );
* // returns ~0.061
*
* v = kurtosis( 20, 0.5 );
* // returns ~0.325
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":858}],858:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 100, 0.2 );
* // returns ~0.061
* @example
* var v = kurtosis( 20, 0.5 );
* // returns ~0.325
* @example
* var v = kurtosis( 10.3, 0.8 );
* // returns ~0.893
* @example
* var v = kurtosis( -2, 0.5 );
* // returns NaN
* @example
* var v = kurtosis( 20, 1.1 );
* // returns NaN
* @example
* var v = kurtosis( 20, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 0.5 );
* // returns NaN
*/
function kurtosis( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 6.0/r ) + ( ( p*p ) / ( ( 1.0-p ) * r ) );
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],859:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace negativeBinomial
*/
var negativeBinomial = {};

/**
* @name cdf
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/cdf}
*/
setReadOnly( negativeBinomial, 'cdf', require( '@stdlib/math/base/dist/negative-binomial/cdf' ) );

/**
* @name kurtosis
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/kurtosis}
*/
setReadOnly( negativeBinomial, 'kurtosis', require( '@stdlib/math/base/dist/negative-binomial/kurtosis' ) );

/**
* @name mean
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/mean}
*/
setReadOnly( negativeBinomial, 'mean', require( '@stdlib/math/base/dist/negative-binomial/mean' ) );

/**
* @name mgf
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/mgf}
*/
setReadOnly( negativeBinomial, 'mgf', require( '@stdlib/math/base/dist/negative-binomial/mgf' ) );

/**
* @name mode
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/mode}
*/
setReadOnly( negativeBinomial, 'mode', require( '@stdlib/math/base/dist/negative-binomial/mode' ) );

/**
* @name NegativeBinomial
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/ctor}
*/
setReadOnly( negativeBinomial, 'NegativeBinomial', require( '@stdlib/math/base/dist/negative-binomial/ctor' ) );

/**
* @name pmf
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/pmf}
*/
setReadOnly( negativeBinomial, 'pmf', require( '@stdlib/math/base/dist/negative-binomial/pmf' ) );

/**
* @name quantile
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/quantile}
*/
setReadOnly( negativeBinomial, 'quantile', require( '@stdlib/math/base/dist/negative-binomial/quantile' ) );

/**
* @name skewness
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/skewness}
*/
setReadOnly( negativeBinomial, 'skewness', require( '@stdlib/math/base/dist/negative-binomial/skewness' ) );

/**
* @name stdev
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/stdev}
*/
setReadOnly( negativeBinomial, 'stdev', require( '@stdlib/math/base/dist/negative-binomial/stdev' ) );

/**
* @name variance
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/negative-binomial/variance}
*/
setReadOnly( negativeBinomial, 'variance', require( '@stdlib/math/base/dist/negative-binomial/variance' ) );


// EXPORTS //

module.exports = negativeBinomial;

},{"@stdlib/math/base/dist/negative-binomial/cdf":853,"@stdlib/math/base/dist/negative-binomial/ctor":856,"@stdlib/math/base/dist/negative-binomial/kurtosis":857,"@stdlib/math/base/dist/negative-binomial/mean":860,"@stdlib/math/base/dist/negative-binomial/mgf":863,"@stdlib/math/base/dist/negative-binomial/mode":866,"@stdlib/math/base/dist/negative-binomial/pmf":870,"@stdlib/math/base/dist/negative-binomial/quantile":874,"@stdlib/math/base/dist/negative-binomial/skewness":878,"@stdlib/math/base/dist/negative-binomial/stdev":880,"@stdlib/math/base/dist/negative-binomial/variance":882,"@stdlib/utils/define-read-only-property":1425}],860:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution expected value.
*
* @module @stdlib/math/base/dist/negative-binomial/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/negative-binomial/mean' );
*
* var v = mean( 100, 0.2 );
* // returns 400
*
* v = mean( 20, 0.5 );
* // returns 20
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":861}],861:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 100, 0.2 );
* // returns 400
* @example
* var v = mean( 20, 0.5 );
* // returns 20
* @example
* var v = mean( 10.3, 0.8 );
* // returns ~2.575
* @example
* var v = mean( -2, 0.5 );
* // returns NaN
* @example
* var v = mean( 20, 1.1 );
* // returns NaN
* @example
* var v = mean( 20, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 0.5 );
* // returns NaN
*/
function mean( r, p ) {
	if (
		isnan( r ) ||
		isnan( p )
	) {
		return NaN;
	}
	if (
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( (1.0-p) * r ) / p;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],862:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.3, 0.4 );
* var y = mgf( 0.2 );
* // returns ~4.696
*/
function factory( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a negative binomial distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( t >= -ln( p ) ) {
			return NaN;
		}
		return pow( ( (1.0 - p) * exp( t ) ) / ( 1.0 - (p * exp( t )) ), r );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":865,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311}],863:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a negative binomial distribution.
*
* @module @stdlib/math/base/dist/negative-binomial/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/negative-binomial/mgf' );
*
* var y = mgf( 0.05, 20.0, 0.8 );
* // returns ~267.839
*
* y = mgf( 0.1, 20.0, 0.1 );
* // returns ~9.347
*
* y = mgf( 0.5, 10.0, 0.4 );
* // returns ~42822.023
*
* var myMGF = mgf.factory( 4.3, 0.4 );
* y = myMGF( 0.2 );
* // returns ~4.696
*
* y = myMGF( 0.4 );
* // returns ~30.83
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":862,"./mgf.js":864,"@stdlib/utils/define-read-only-property":1425}],864:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a negative binomial distribution.
*
* @param {number} t - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.05, 20.0, 0.8 );
* // returns ~267.839
* @example
* var y = mgf( 0.1, 20.0, 0.1 );
* // returns ~9.347
* @example
* var y = mgf( 0.5, 10.0, 0.4 );
* // returns ~42822.023
* @example
* var y = mgf( 0.1, 0.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.1, -2.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( NaN, 20.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.0, 20.0, NaN );
* // returns NaN
* @example
* var y = mgf( 0.2, 20, -1.0 );
* // returns NaN
* @example
* var y = mgf( 0.2, 20, 1.5 );
* // returns NaN
*/
function mgf( t, r, p ) {
	if (
		isnan( t ) ||
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0 ||
		t >= -ln( p )
	) {
		return NaN;
	}
	return pow( ( (1.0 - p) * exp( t ) ) / ( 1.0 - (p * exp( t )) ), r );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311}],865:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid negative binomial distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],866:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution mode.
*
* @module @stdlib/math/base/dist/negative-binomial/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/negative-binomial/mode' );
*
* var v = mode( 100, 0.2 );
* // returns 396
*
* v = mode( 20, 0.5 );
* // returns 19
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":867}],867:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns the mode of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 100, 0.2 );
* // returns 396
* @example
* var v = mode( 20, 0.5 );
* // returns 19
* @example
* var v = mode( 10.3, 0.8 );
* // returns 2
* @example
* var v = mode( -2, 0.5 );
* // returns NaN
* @example
* var v = mode( 20, 1.1 );
* // returns NaN
* @example
* var v = mode( 20, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 0.5 );
* // returns NaN
*/
function mode( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return floor( ( 1.0-p ) * ( r-1.0 ) / p );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266}],868:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var ibetaDerivative = require( './ibeta_derivative.js' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 10, 0.5 );
* var y = pmf( 3.0 );
* // returns ~0.027
*
* y = pmf( 5.0 );
* // returns ~0.061
*/
function factory( r, p ) {
	if ( isnan( r ) || isnan( p ) ) {
		return nan;
	}
	if ( r <= 0.0 || p <= 0.0 || p > 1.0 ) {
		return nan;
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( !isNonNegativeInteger( x ) ) {
			return 0.0;
		}
		return ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );
	} // end FUNCTION pmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./ibeta_derivative.js":869,"./nan.js":871,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49}],869:[function(require,module,exports){
'use strict';

// MODULES //

var ibetaPowerTerms = require( '@stdlib/math/base/special/betainc/lib/ibeta_power_terms.js' );


// MAIN //

/**
* Computes the partial derivative with respect to x of the incomplete beta function.
*
* @private
* @param {Probability} x - input value (0 < x <= 1)
* @param {PositiveNumber} a - first parameter
* @param {PositiveNumber} b - second parameter (must be greater than 1)
* @returns {number} value of the partial derivative
*/
function ibetaDerivative( x, a, b ) {
	var f1;
	var y;
	if ( x === 1.0 ) {
		return 0.0;
	}
	// Regular cases:
	f1 = ibetaPowerTerms( a, b, x, 1.0 - x, true );
	y = ( 1.0 - x ) * x;
	f1 /= y;
	return f1;
} // end FUNCTION ibetaDerivative()


// EXPORTS //

module.exports = ibetaDerivative;

},{"@stdlib/math/base/special/betainc/lib/ibeta_power_terms.js":1201}],870:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dist/negative-binomial/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dist/negative-binomial/pmf' );
*
* var y = pmf( 5.0, 20.0, 0.8 );
* // returns ~0.157
*
* y = pmf( 21.0, 20.0, 0.5 );
* // returns ~0.06
*
* y = pmf( 5.0, 10.0, 0.4 );
* // returns ~0.016
*
* y = pmf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* y = pmf( 21.0, 15.5, 0.5 );
* // returns ~0.037
*
* y = pmf( 5.0, 7.4, 0.4 );
* // returns ~0.051
*
* var mypmf = pmf.factory( 10, 0.5 );
* y = mypmf( 3.0 );
* // returns ~0.027
*
* y = mypmf( 5.0 );
* // returns ~0.061
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":868,"./pmf.js":872,"@stdlib/utils/define-read-only-property":1425}],871:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability mass function (PMF) for an invalid negative binomial distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pmf( 2.0 );
* // returns NaN
*/
function pmf() {
	return NaN;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{}],872:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var ibetaDerivative = require( './ibeta_derivative.js' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 5.0, 20.0, 0.8 );
* // returns ~0.157
* @example
* var y = pmf( 21.0, 20.0, 0.5 );
* // returns ~0.06
* @example
* var y = pmf( 5.0, 10.0, 0.4 );
* // returns ~0.016
* @example
* var y = pmf( 0.0, 10.0, 0.9 );
* // returns ~0.349
* @example
* var y = pmf( 21.0, 15.5, 0.5 );
* // returns ~0.037
* @example
* var y = pmf( 5.0, 7.4, 0.4 );
* // returns ~0.051
* @example
* var y = pmf( 2.0, 0.0, 0.5 );
* // returns NaN
* @example
* var y = pmf( 2.0, -2.0, 0.5 );
* // returns NaN
* @example
* var y = pmf( 2.0, 20, -1.0 );
* // returns NaN
* @example
* var y = pmf( 2.0, 20, 1.5 );
* // returns NaN
* @example
* var y = pmf( NaN, 20.0, 0.5 );
* // returns NaN
* @example
* var y = pmf( 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = pmf( 0.0, 20.0, NaN );
* // returns NaN
*/
function pmf( x, r, p ) {
	if (
		isnan( x ) ||
		isnan( r ) ||
		isnan( p )
	) {
		return NaN;
	}
	if (
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( !isNonNegativeInteger( x ) ) {
		return 0.0;
	}
	if ( p === 0.0 ) {
		return 0.0;
	}
	return ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{"./ibeta_derivative.js":869,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49}],873:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dist/negative-binomial/cdf' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var search = require( './search.js' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 0.5 );
* var y = quantile( 0.1 );
* // returns 5
*
* y = quantile( 0.9 );
* // returns 16
*/
function factory( r, p ) {
	var sigmaInv;
	var sigma;
	var mu;
	var q;
	if ( isnan( r ) || isnan( p ) ) {
		return nan;
	}
	if ( r <= 0.0 || p < 0.0 || p > 1.0 ) {
		return nan;
	}
	q = 1.0 - p;
	mu = ( r * q ) / p;
	sigma = sqrt( r * q ) / p;
	sigmaInv = ( (2.0/p) - 1.0 ) / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a negative binomial distribution.
	*
	* @private
	* @param {Probability} k - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( k ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( isnan( k ) || k < 0.0 || k > 1.0 ) {
			return NaN;
		}
		if ( k === 0.0 ) {
			return 0.0;
		}
		if ( k === 1.0 ) {
			return PINF;
		}

		// Cornish-Fisher expansion:
		if ( k < 0.5 ) {
			x = -erfcinv( 2.0 * k ) * SQRT2;
		} else {
			x = erfcinv( 2.0 * (1.0-k) ) * SQRT2;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
		guess = round( mu + (sigma * corr) );
		return cdf( guess, r, p ) >= k ?
			search.left( guess, k, r, p ) :
			search.right( guess, k, r, p );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":875,"./search.js":877,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/negative-binomial/cdf":853,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-sqrt-two":1421}],874:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution quantile function.
*
* @module @stdlib/math/base/dist/negative-binomial/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/negative-binomial/quantile' );
*
* var y = quantile( 0.9, 20.0, 0.2 );
* // returns 106
*
* y = quantile( 0.9, 20.0, 0.8 );
* // returns 8
*
* var myquantile = quantile.factory( 10.0, 0.5 );
* y = myquantile( 0.1 );
* // returns 5
*
* y = myquantile( 0.9 );
* // returns 16
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":873,"./quantile.js":876,"@stdlib/utils/define-read-only-property":1425}],875:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid negative binomial distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],876:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dist/negative-binomial/cdf' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var search = require( './search.js' );


// MAIN //

/**
* Evaluates the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a probability `k`.
*
* @param {Probability} k - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.9, 20.0, 0.2 );
* // returns 106
* @example
* var y = quantile( 0.9, 20.0, 0.8 );
* // returns 8
* @example
* var y = quantile( 0.5, 10.0, 0.4 );
* // returns 14
* @example
* var y = quantile( 0.0, 10.0, 0.9 );
* // returns 0
* @example
* var y = quantile( 1.1, 20.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( -0.1, 20.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 21.0, 15.5, 0.5 );
* // returns 12
* @example
* var y = quantile( 5.0, 7.4, 0.4 );
* // returns 10
* @example
* var y = quantile( 0.5, 0.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.5, -2.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.3, 20.0, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.3, 20.0, 1.5 );
* // returns NaN
* @example
* var y = quantile( NaN, 20.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.3, NaN, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.3, 20.0, NaN );
* // returns NaN
*/
function quantile( k, r, p ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var mu;
	var x2;
	var x;
	var q;

	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( isnan( k ) || k < 0.0 || k > 1.0 ) {
		return NaN;
	}
	if ( k === 0.0 ) {
		return 0.0;
	}
	if ( k === 1.0 ) {
		return PINF;
	}
	q = 1.0 - p;
	mu = ( r * q ) / p;
	sigma = sqrt( r * q ) / p;
	sigmaInv = 1.0 / sigma;

	// Cornish-Fisher expansion:
	if ( k < 0.5 ) {
		x = -erfcinv( 2.0 * k ) * SQRT2;
	} else {
		x = erfcinv( 2.0 * (1.0-k) ) * SQRT2;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
	guess = round( mu + (sigma * corr) );
	return cdf( guess, r, p ) >= k ?
		search.left( guess, k, r, p ) :
		search.right( guess, k, r, p );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"./search.js":877,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/negative-binomial/cdf":853,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-sqrt-two":1421}],877:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dist/negative-binomial/cdf' );


// MAIN //

/**
* Performs a search to the left.
*
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} k - probability
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `k` quantile of the specified distribution
*/
function searchLeft( x, k, r, p ) {
	while ( true ) {
		if ( x === 0 || cdf( x - 1.0, r, p ) < k ) {
			return x;
		}
		x -= 1;
	}
} // end FUNCTION searchLeft()

/**
* Performs a search to the right.
*
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} k - probability
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `k` quantile of the specified distribution
*/
function searchRight( x, k, r, p ) {
	while ( true ) {
		x += 1;
		if ( cdf( x, r, p ) >= k ) {
			return x;
		}
	}
} // end FUNCTION searchRight()


// EXPORTS //

module.exports = {
	'left': searchLeft,
	'right': searchRight
};

},{"@stdlib/math/base/dist/negative-binomial/cdf":853}],878:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution skewness.
*
* @module @stdlib/math/base/dist/negative-binomial/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/negative-binomial/skewness' );
*
* var v = skewness( 100, 0.2 );
* // returns ~0.201
*
* v = skewness( 20, 0.5 );
* // returns ~0.474
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":879}],879:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 100, 0.2 );
* // returns ~0.201
* @example
* var v = skewness( 20, 0.5 );
* // returns ~0.474
* @example
* var v = skewness( 10.3, 0.8 );
* // returns ~0.836
* @example
* var v = skewness( -2, 0.5 );
* // returns NaN
* @example
* var v = skewness( 20, 1.1 );
* // returns NaN
* @example
* var v = skewness( 20, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 0.5 );
* // returns NaN
*/
function skewness( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 2.0-p ) / sqrt( ( 1.0-p ) * r );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],880:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution standard deviation.
*
* @module @stdlib/math/base/dist/negative-binomial/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/negative-binomial/stdev' );
*
* var v = stdev( 100, 0.2 );
* // returns ~44.721
*
* v = stdev( 20, 0.5 );
* // returns ~6.325
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":881}],881:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 100, 0.2 );
* // returns ~44.721
* @example
* var v = stdev( 20, 0.5 );
* // returns ~6.325
* @example
* var v = stdev( 10.3, 0.8 );
* // returns ~1.794
* @example
* var v = stdev( -2, 0.5 );
* // returns NaN
* @example
* var v = stdev( 20, 1.1 );
* // returns NaN
* @example
* var v = stdev( 20, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 0.5 );
* // returns NaN
*/
function stdev( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return sqrt( ( 1.0-p ) * r ) / p;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],882:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution variance.
*
* @module @stdlib/math/base/dist/negative-binomial/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/negative-binomial/variance' );
*
* var v = variance( 100, 0.2 );
* // returns 2000.0
*
* v = variance( 20, 0.5 );
* // returns 40.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":883}],883:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 100, 0.2 );
* // returns 2000.0
* @example
* var v = variance( 20, 0.5 );
* // returns 40.0
* @example
* var v = variance( 10.3, 0.8 );
* // returns ~3.219
* @example
* var v = variance( -2, 0.5 );
* // returns NaN
* @example
* var v = variance( 20, 1.1 );
* // returns NaN
* @example
* var v = variance( 20, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 0.5 );
* // returns NaN
*/
function variance( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( ( 1.0-p ) * r ) / ( p*p );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],884:[function(require,module,exports){
'use strict';

// MODULES //

var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.977
* @example
* var y = cdf( -1.0, -1.0, 2.0 );
* // returns 0.5
* @example
* var y = cdf( -1.0, 4.0, 2.0 );
* // returns ~0.006
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative standard deviation:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, mu, sigma ) {
	var denom;
	var xc;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma )
	) {
		return NaN;
	}
	if ( sigma < 0.0 ) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return (x < mu) ? 0.0 : 1.0;
	}
	denom = sigma * sqrt( 2.0 );
	xc = x - mu;
	return 0.5 * erfc( -xc/denom );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erfc":1250,"@stdlib/math/base/special/sqrt":1343}],885:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 10.0, 2.0 );
* var y = cdf( 10.0 );
* // returns 0.5
*
* y = cdf( 12.0 );
* // returns ~0.841
*/
function factory( mu, sigma ) {
	var denom;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		return degenerate( mu );
	}
	denom = sigma * sqrt( 2.0 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var xc;
		if ( isnan( x ) ) {
			return NaN;
		}
		xc = x - mu;
		return 0.5 * erfc( -xc / denom );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":887,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/cdf":328,"@stdlib/math/base/special/erfc":1250,"@stdlib/math/base/special/sqrt":1343}],886:[function(require,module,exports){
'use strict';

/**
* Normal distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/normal/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/normal/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.977
*
* var myCDF = cdf.factory( 10.0, 2.0 );
* y = myCDF( 10.0 );
* // returns 0.5
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":884,"./factory.js":885,"@stdlib/utils/define-read-only-property":1425}],887:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for a normal distribution having a negative standard deviation.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 3.14 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],888:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/normal/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/normal/kurtosis' );
var mean = require( '@stdlib/math/base/dist/normal/mean' );
var median = require( '@stdlib/math/base/dist/normal/median' );
var mode = require( '@stdlib/math/base/dist/normal/mode' );
var skewness = require( '@stdlib/math/base/dist/normal/skewness' );
var stdev = require( '@stdlib/math/base/dist/normal/stdev' );
var variance = require( '@stdlib/math/base/dist/normal/variance' );
var cdf = require( '@stdlib/math/base/dist/normal/cdf' );
var mgf = require( '@stdlib/math/base/dist/normal/mgf' );
var pdf = require( '@stdlib/math/base/dist/normal/pdf' );
var quantile = require( '@stdlib/math/base/dist/normal/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function normalCDF( x ) {
	return cdf( x, this.mu, this.sigma );
} // end FUNCTION normalCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function normalMGF( t ) {
	return mgf( t, this.mu, this.sigma );
} // end FUNCTION normalMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function normalPDF( x ) {
	return pdf( x, this.mu, this.sigma );
} // end FUNCTION normalPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function normalQuantile( p ) {
	return quantile( p, this.mu, this.sigma );
} // end FUNCTION normalQuantile()


// MAIN //

/**
* Normal distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {Normal} distribution instance
*
* @example
* var normal = new Normal( 1.0, 1.0 );
*
* var y = normal.cdf( 1.5 );
* // returns ~0.691
*
* var mu = normal.mean;
* // returns 1.0
*/
function Normal() {
	var sigma;
	var mu;
	if ( !(this instanceof Normal) ) {
		if ( arguments.length === 0 ) {
			return new Normal();
		}
		return new Normal( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		mu = 0.0;
		sigma = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
} // end FUNCTION Normal()

/**
* Normal distribution differential entropy.
*
* @memberof Normal.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.entropy;
* // returns ~3.904
*/
Object.defineProperty( Normal.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.sigma );
	}
});

/**
* Normal distribution excess kurtosis.
*
* @memberof Normal.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.kurtosis;
* // returns 0.0
*/
Object.defineProperty( Normal.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.sigma );
	}
});

/**
* Normal distribution expected value.
*
* @memberof Normal.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.mean;
* // returns 4.0
*/
Object.defineProperty( Normal.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.sigma );
	}
});

/**
* Normal distribution median.
*
* @memberof Normal.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.median;
* // returns 4.0
*/
Object.defineProperty( Normal.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.sigma );
	}
});

/**
* Normal distribution mode.
*
* @memberof Normal.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.mode;
* // returns 4.0
*/
Object.defineProperty( Normal.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.sigma );
	}
});

/**
* Normal distribution skewness.
*
* @memberof Normal.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.skewness;
* // returns 0.0
*/
Object.defineProperty( Normal.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.sigma );
	}
});

/**
* Normal distribution standard deviation.
*
* @memberof Normal.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.stdev;
* // returns 12.0
*/
Object.defineProperty( Normal.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.sigma );
	}
});

/**
* Normal distribution variance.
*
* @memberof Normal.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.variance;
* // returns 144.0
*/
Object.defineProperty( Normal.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.sigma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Normal.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.cdf( 0.5 );
* // returns ~0.354
*/
setReadOnly( Normal.prototype, 'cdf', normalCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Normal.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.mgf( 0.01 );
* // returns ~1.021
*/
setReadOnly( Normal.prototype, 'mgf', normalMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Normal.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.pdf( 0.8 );
* // returns ~0.095
*/
setReadOnly( Normal.prototype, 'pdf', normalPDF );

/**
* Evaluates the quantile function.
*
* @memberof Normal.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Normal.prototype, 'quantile', normalQuantile );


// EXPORTS //

module.exports = Normal;

},{"@stdlib/assert/is-nan":12,"@stdlib/assert/is-number":20,"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/normal/cdf":886,"@stdlib/math/base/dist/normal/entropy":891,"@stdlib/math/base/dist/normal/kurtosis":892,"@stdlib/math/base/dist/normal/mean":895,"@stdlib/math/base/dist/normal/median":897,"@stdlib/math/base/dist/normal/mgf":900,"@stdlib/math/base/dist/normal/mode":903,"@stdlib/math/base/dist/normal/pdf":906,"@stdlib/math/base/dist/normal/quantile":910,"@stdlib/math/base/dist/normal/skewness":913,"@stdlib/math/base/dist/normal/stdev":915,"@stdlib/math/base/dist/normal/variance":917,"@stdlib/utils/define-read-only-property":1425}],889:[function(require,module,exports){
'use strict';

/**
* Normal distribution constructor.
*
* @module @stdlib/math/base/dist/normal/ctor
*
* @example
* var Normal = require( '@stdlib/math/base/dist/normal/ctor' );
*
* var normal = new Normal( 1.0, 1.0 );
*
* var y = normal.cdf( 1.5 );
* // returns ~0.691
*
* var mu = normal.mean;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":888}],890:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );
var E = require( '@stdlib/math/constants/float64-e' );


// MAIN //

/**
* Returns the differential entropy for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
* @example
* var y = entropy( 5.0, 3.0 );
* // returns ~2.518
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.5 * ln( TWO_PI * E * sigma*sigma );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-e":1391,"@stdlib/math/constants/float64-two-pi":1422}],891:[function(require,module,exports){
'use strict';

/**
* Normal distribution differential entropy.
*
* @module @stdlib/math/base/dist/normal/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/normal/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* y = entropy( 4.0, 3.0 );
* // returns ~2.518
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":890}],892:[function(require,module,exports){
'use strict';

/**
* Normal distribution kurtosis.
*
* @module @stdlib/math/base/dist/normal/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/normal/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 0.0
*
* y = kurtosis( 4.0, 3.0 );
* // returns 0.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":893}],893:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = kurtosis( 5.0, 3.0 );
* // returns 0.0
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],894:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace normal
*/
var normal = {};

/**
* @name cdf
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/cdf}
*/
setReadOnly( normal, 'cdf', require( '@stdlib/math/base/dist/normal/cdf' ) );

/**
* @name entropy
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/entropy}
*/
setReadOnly( normal, 'entropy', require( '@stdlib/math/base/dist/normal/entropy' ) );

/**
* @name kurtosis
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/kurtosis}
*/
setReadOnly( normal, 'kurtosis', require( '@stdlib/math/base/dist/normal/kurtosis' ) );

/**
* @name mean
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/mean}
*/
setReadOnly( normal, 'mean', require( '@stdlib/math/base/dist/normal/mean' ) );

/**
* @name median
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/median}
*/
setReadOnly( normal, 'median', require( '@stdlib/math/base/dist/normal/median' ) );

/**
* @name mgf
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/mgf}
*/
setReadOnly( normal, 'mgf', require( '@stdlib/math/base/dist/normal/mgf' ) );

/**
* @name mode
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/mode}
*/
setReadOnly( normal, 'mode', require( '@stdlib/math/base/dist/normal/mode' ) );

/**
* @name Normal
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/ctor}
*/
setReadOnly( normal, 'Normal', require( '@stdlib/math/base/dist/normal/ctor' ) );

/**
* @name pdf
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/pdf}
*/
setReadOnly( normal, 'pdf', require( '@stdlib/math/base/dist/normal/pdf' ) );

/**
* @name quantile
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/quantile}
*/
setReadOnly( normal, 'quantile', require( '@stdlib/math/base/dist/normal/quantile' ) );

/**
* @name skewness
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/skewness}
*/
setReadOnly( normal, 'skewness', require( '@stdlib/math/base/dist/normal/skewness' ) );

/**
* @name stdev
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/stdev}
*/
setReadOnly( normal, 'stdev', require( '@stdlib/math/base/dist/normal/stdev' ) );

/**
* @name variance
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/normal/variance}
*/
setReadOnly( normal, 'variance', require( '@stdlib/math/base/dist/normal/variance' ) );


// EXPORTS //

module.exports = normal;

},{"@stdlib/math/base/dist/normal/cdf":886,"@stdlib/math/base/dist/normal/ctor":889,"@stdlib/math/base/dist/normal/entropy":891,"@stdlib/math/base/dist/normal/kurtosis":892,"@stdlib/math/base/dist/normal/mean":895,"@stdlib/math/base/dist/normal/median":897,"@stdlib/math/base/dist/normal/mgf":900,"@stdlib/math/base/dist/normal/mode":903,"@stdlib/math/base/dist/normal/pdf":906,"@stdlib/math/base/dist/normal/quantile":910,"@stdlib/math/base/dist/normal/skewness":913,"@stdlib/math/base/dist/normal/stdev":915,"@stdlib/math/base/dist/normal/variance":917,"@stdlib/utils/define-read-only-property":1425}],895:[function(require,module,exports){
'use strict';

/**
* Normal distribution expected value.
*
* @module @stdlib/math/base/dist/normal/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/normal/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":896}],896:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],897:[function(require,module,exports){
'use strict';

/**
* Normal distribution median.
*
* @module @stdlib/math/base/dist/normal/median
*
* @example
* var median = require( '@stdlib/math/base/dist/normal/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":898}],898:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43}],899:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0, 2.0 );
*
* var y = mgf( 1.0 );
* // returns ~403.429
*
* y = mgf( 0.5 );
* // returns ~12.182
*/
function factory( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a normal distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) ) {
			return NaN;
		}
		return exp( (mu * t) + (0.5 * pow( sigma * t, 2.0 )) );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":902,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],900:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a normal distribution.
*
* @module @stdlib/math/base/dist/normal/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/normal/mgf' );
*
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~7.389
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.1353
*
* var mymgf = mgf.factory( 4.0, 2.0 );
*
* y = mymgf( 1.0 );
* // returns ~403.429
*
* y = mymgf( 0.5 );
* // returns ~12.182
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":899,"./mgf.js":901,"@stdlib/utils/define-read-only-property":1425}],901:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~7.389
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
* @example
* var y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.1353
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = mgf( 2.0, 0.0, 0.0 );
* // returns NaN
*/
function mgf( t, mu, sigma ) {
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( sigma )
	) {
		return NaN;
	}
	if ( sigma <= 0.0 ) {
		return NaN;
	}
	return exp( (mu * t) + (0.5 * pow( sigma * t, 2.0 )) );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],902:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid normal distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],903:[function(require,module,exports){
'use strict';

/**
* Normal distribution mode.
*
* @module @stdlib/math/base/dist/normal/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/normal/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":904}],904:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],905:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
var TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 10.0 );
* // returns ~0.199
* y = pdf( 5.0 );
* // returns ~0.009
*/
function factory( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		return degenerate( mu );
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / sqrt( s2*TWO_PI );
	B = -1.0 / ( 2.0*s2 );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated probability density function
	*
	* @example
	* var y = pdf( -3.14 );
	* // returns <number>
	*/
	function pdf( x ) {
		return A * exp( B * pow(x-mu, 2.0) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":907,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/pdf":344,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-two-pi":1422}],906:[function(require,module,exports){
'use strict';

/**
* Normal distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/normal/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/normal/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.054
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns ~0.199
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":905,"./pdf.js":908,"@stdlib/utils/define-read-only-property":1425}],907:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for a normal distribution having a negative standard deviation.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],908:[function(require,module,exports){
'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.054
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns ~0.009
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative standard deviation:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*/
function pdf( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x === mu ? PINF : 0.0;
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / sqrt( s2*TWO_PI );
	B = -1.0 / ( 2.0*s2 );
	return A * exp( B * pow(x-mu, 2.0) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-two-pi":1422}],909:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/quantile' ).factory;
var erfinv = require( '@stdlib/math/base/special/erfinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function of a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
* y = quantile( 0.8 );
* // returns ~11.683
*/
function factory( mu, sigma ) {
	var A = mu;
	var B = sigma * sqrt( 2.0 );

	if ( isnan( mu ) || isnan( sigma ) ) {
		return nan;
	}
	if ( sigma < 0.0 ) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		degenerate( mu );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a normal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return A + (B * erfinv( (2.0*p) - 1.0 ));
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":911,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/quantile":352,"@stdlib/math/base/special/erfinv":1254,"@stdlib/math/base/special/sqrt":1343}],910:[function(require,module,exports){
'use strict';

/**
* Normal distribution quantile function.
*
* @module @stdlib/math/base/dist/normal/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/normal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":909,"./quantile.js":912,"@stdlib/utils/define-read-only-property":1425}],911:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for a normal distribution having a negative standard deviation.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],912:[function(require,module,exports){
'use strict';

// MODULES //

var erfinv = require( '@stdlib/math/base/special/erfinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a normal distribution with mean `mu` and standard deviation `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* // Negative standard deviation:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, sigma ) {
	var A;
	var B;

	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return mu;
	}
	A = mu;
	B = sigma * sqrt( 2.0 );
	return A + (B * erfinv( (2.0*p) - 1.0 ));
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erfinv":1254,"@stdlib/math/base/special/sqrt":1343}],913:[function(require,module,exports){
'use strict';

/**
* Normal distribution skewness.
*
* @module @stdlib/math/base/dist/normal/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/normal/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 3.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":914}],914:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = skewness( 5.0, 3.0 );
* // returns 0.0
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43}],915:[function(require,module,exports){
'use strict';

/**
* Normal distribution standard deviation.
*
* @module @stdlib/math/base/dist/normal/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/normal/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns 1.0
*
* y = stdev( 4.0, 3.0 );
* // returns 3.0
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":916}],916:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the standard deviation for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns 1.0
* @example
* var y = stdev( 5.0, 3.0 );
* // returns 3.0
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return sigma;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43}],917:[function(require,module,exports){
'use strict';

/**
* Normal distribution variance.
*
* @module @stdlib/math/base/dist/normal/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/normal/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns 1.0
*
* y = variance( 4.0, 3.0 );
* // returns 9.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":918}],918:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns 1.0
* @example
* var y = variance( 5.0, 3.0 );
* // returns 9.0
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return sigma*sigma;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],919:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns 0.5
* @example
* var y = cdf( 5.0, 2.0, 4.0 );
* // returns ~0.36
* @example
* var y = cdf( 4.0, 2.0, 2.0 );
* // returns 0.75
* @example
* var y = cdf( 1.9, 2.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta )
	) {
		return NaN;
	}
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( x < beta ) {
		return 0.0;
	}
	return 1.0 - pow( beta / x, alpha );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],920:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
*var cdf = factory( 10.0, 2.0 );
* var y = cdf( 3.0 );
* // returns ~0.983
*
* y = cdf( 2.5 );
* // returns ~0.893
*/
function factory( alpha, beta ) {
	if ( isnan( alpha ) || isnan( beta ) ) {
		return nan;
	}
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Pareto distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < beta ) {
			return 0.0;
		}
		return 1.0 - pow( beta / x, alpha );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":922,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],921:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/pareto-type1/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/pareto-type1/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 5.0, 2.0, 4.0 );
* // returns ~0.36
*
* y = cdf( 4.0, 2.0, 2.0 );
* // returns 0.75
*
* y = cdf( 1.9, 2.0, 2.0 );
* // returns 0.0
*
* y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 10.0, 2.0 );
* y = mycdf( 3.0 );
* // returns ~0.983
*
* y = mycdf( 2.5 );
* // returns ~0.893
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":919,"./factory.js":920,"@stdlib/utils/define-read-only-property":1425}],922:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Pareto (Type I) distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],923:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/pareto-type1/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/pareto-type1/kurtosis' );
var mean = require( '@stdlib/math/base/dist/pareto-type1/mean' );
var median = require( '@stdlib/math/base/dist/pareto-type1/median' );
var mode = require( '@stdlib/math/base/dist/pareto-type1/mode' );
var skewness = require( '@stdlib/math/base/dist/pareto-type1/skewness' );
var variance = require( '@stdlib/math/base/dist/pareto-type1/variance' );
var cdf = require( '@stdlib/math/base/dist/pareto-type1/cdf' );
var pdf = require( '@stdlib/math/base/dist/pareto-type1/pdf' );
var quantile = require( '@stdlib/math/base/dist/pareto-type1/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function paretoCDF( x ) {
	return cdf( x, this.alpha, this.beta );
} // end FUNCTION paretoCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function paretoPDF( x ) {
	return pdf( x, this.alpha, this.beta );
} // end FUNCTION paretoPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function paretoQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
} // end FUNCTION paretoQuantile()


// MAIN //

/**
* Pareto (Type I) distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Pareto1} distribution instance
*
* @example
* var pareto1 = new Pareto1( 1.0, 1.0 );
*
* var y = pareto1.cdf( 0.8 );
* // returns 0.0
*
* var mu = pareto1.mean;
* // returns Number.POSITIVE_INFINITY
*/
function Pareto1() {
	var alpha;
	var beta;
	if ( !(this instanceof Pareto1) ) {
		if ( arguments.length === 0 ) {
			return new Pareto1();
		}
		return new Pareto1( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
} // end FUNCTION Pareto1()

/**
* Pareto (Type I) distribution differential entropy.
*
* @memberof Pareto1.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.entropy;
* // returns ~2.349
*/
Object.defineProperty( Pareto1.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution excess kurtosis.
*
* @memberof Pareto1.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.kurtosis;
* // returns NaN
*/
Object.defineProperty( Pareto1.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution expected value.
*
* @memberof Pareto1.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.mean;
* // returns 16.0
*/
Object.defineProperty( Pareto1.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution median.
*
* @memberof Pareto1.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.median;
* // returns ~14.27
*/
Object.defineProperty( Pareto1.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution mode.
*
* @memberof Pareto1.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.mode;
* // returns 12.0
*/
Object.defineProperty( Pareto1.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution skewness.
*
* @memberof Pareto1.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.skewness;
* // returns ~7.071
*/
Object.defineProperty( Pareto1.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution variance.
*
* @memberof Pareto1.prototype
* @name variance
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.variance;
* // returns 32.0
*/
Object.defineProperty( Pareto1.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Pareto1.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.cdf( 4.0 );
* // returns 0.0
*/
setReadOnly( Pareto1.prototype, 'cdf', paretoCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Pareto1.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.pdf( 5.0 );
* // returns ~0.256
*/
setReadOnly( Pareto1.prototype, 'pdf', paretoPDF );

/**
* Evaluates the quantile function.
*
* @memberof Pareto1.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.quantile( 0.5 );
* // returns ~5.657
*/
setReadOnly( Pareto1.prototype, 'quantile', paretoQuantile );


// EXPORTS //

module.exports = Pareto1;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/pareto-type1/cdf":921,"@stdlib/math/base/dist/pareto-type1/entropy":926,"@stdlib/math/base/dist/pareto-type1/kurtosis":927,"@stdlib/math/base/dist/pareto-type1/mean":930,"@stdlib/math/base/dist/pareto-type1/median":932,"@stdlib/math/base/dist/pareto-type1/mode":934,"@stdlib/math/base/dist/pareto-type1/pdf":937,"@stdlib/math/base/dist/pareto-type1/quantile":941,"@stdlib/math/base/dist/pareto-type1/skewness":944,"@stdlib/math/base/dist/pareto-type1/variance":946,"@stdlib/utils/define-read-only-property":1425}],924:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution constructor.
*
* @module @stdlib/math/base/dist/pareto-type1/ctor
*
* @example
* var Pareto1 = require( '@stdlib/math/base/dist/pareto-type1/ctor' );
*
* var pareto1 = new Pareto1( 1.0, 1.0 );
*
* var y = pareto1.cdf( 10.0 );
* // returns 0.9
*
* var mu = pareto1.mean;
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":923}],925:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} differential entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 2.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.349
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.261
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ln( ( beta/alpha ) * exp( 1.0 + ( 1.0/alpha ) ) );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300}],926:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution differential entropy.
*
* @module @stdlib/math/base/dist/pareto-type1/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/pareto-type1/entropy' );
*
* var v = entropy( 0.8, 1.0 );
* // returns ~2.473
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.349
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.261
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":925}],927:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/pareto-type1/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/pareto-type1/kurtosis' );
*
* var v = kurtosis( 5.0, 1.0 );
* // returns ~70.8
*
* v = kurtosis( 4.2, 12.0 );
* // returns ~384.095
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~19.725
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":928}],928:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the excess kurtosis of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 5.0, 1.0 );
* // returns ~70.8
* @example
* var v = kurtosis( 7.0, 12.0 );
* // returns ~24.857
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~19.725
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	var out;
	if (
		isnan( alpha ) ||
		alpha <= 4.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	out = 6.0 * ( pow( alpha, 3.0 ) + pow( alpha, 2.0 ) - ( 6.0*alpha ) - 2.0 );
	out /= alpha * ( alpha-3.0 ) * ( alpha-4.0 );
	return out;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],929:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace pareto1
*/
var pareto = {};

/**
* @name cdf
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/cdf}
*/
setReadOnly( pareto, 'cdf', require( '@stdlib/math/base/dist/pareto-type1/cdf' ) );

/**
* @name entropy
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/entropy}
*/
setReadOnly( pareto, 'entropy', require( '@stdlib/math/base/dist/pareto-type1/entropy' ) );

/**
* @name kurtosis
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/kurtosis}
*/
setReadOnly( pareto, 'kurtosis', require( '@stdlib/math/base/dist/pareto-type1/kurtosis' ) );

/**
* @name mean
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/mean}
*/
setReadOnly( pareto, 'mean', require( '@stdlib/math/base/dist/pareto-type1/mean' ) );

/**
* @name median
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/median}
*/
setReadOnly( pareto, 'median', require( '@stdlib/math/base/dist/pareto-type1/median' ) );

/**
* @name mode
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/mode}
*/
setReadOnly( pareto, 'mode', require( '@stdlib/math/base/dist/pareto-type1/mode' ) );

/**
* @name Pareto1
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/ctor}
*/
setReadOnly( pareto, 'Pareto1', require( '@stdlib/math/base/dist/pareto-type1/ctor' ) );

/**
* @name pdf
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/pdf}
*/
setReadOnly( pareto, 'pdf', require( '@stdlib/math/base/dist/pareto-type1/pdf' ) );

/**
* @name quantile
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/quantile}
*/
setReadOnly( pareto, 'quantile', require( '@stdlib/math/base/dist/pareto-type1/quantile' ) );

/**
* @name skewness
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/skewness}
*/
setReadOnly( pareto, 'skewness', require( '@stdlib/math/base/dist/pareto-type1/skewness' ) );

/**
* @name variance
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/pareto-type1/variance}
*/
setReadOnly( pareto, 'variance', require( '@stdlib/math/base/dist/pareto-type1/variance' ) );


// EXPORTS //

module.exports = pareto;

},{"@stdlib/math/base/dist/pareto-type1/cdf":921,"@stdlib/math/base/dist/pareto-type1/ctor":924,"@stdlib/math/base/dist/pareto-type1/entropy":926,"@stdlib/math/base/dist/pareto-type1/kurtosis":927,"@stdlib/math/base/dist/pareto-type1/mean":930,"@stdlib/math/base/dist/pareto-type1/median":932,"@stdlib/math/base/dist/pareto-type1/mode":934,"@stdlib/math/base/dist/pareto-type1/pdf":937,"@stdlib/math/base/dist/pareto-type1/quantile":941,"@stdlib/math/base/dist/pareto-type1/skewness":944,"@stdlib/math/base/dist/pareto-type1/variance":946,"@stdlib/utils/define-read-only-property":1425}],930:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution expected value.
*
* @module @stdlib/math/base/dist/pareto-type1/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/pareto-type1/mean' );
*
* var v = mean( 0.8, 1.0 );
* // returns Infinity
*
* v = mean( 4.0, 12.0 );
* // returns 16.0
*
* v = mean( 8.0, 2.0 );
* // returns ~2.286
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":931}],931:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the expected value of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns Infinity
* @example
* var v = mean( 4.0, 12.0 );
* // returns 16.0
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~2.286
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( alpha <= 1.0 ) {
		return PINF;
	}
	return ( alpha*beta ) / ( alpha-1.0 );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/constants/float64-pinf":1414}],932:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution median.
*
* @module @stdlib/math/base/dist/pareto-type1/median
*
* @example
* var median = require( '@stdlib/math/base/dist/pareto-type1/median' );
*
* var v = median( 0.8, 1.0 );
* // returns ~2.378
*
* v = median( 4.0, 12.0 );
* // returns ~14.27
*
* v = median( 8.0, 2.0 );
* // returns ~2.181
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":933}],933:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the median of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns 2.0
* @example
* var v = median( 4.0, 12.0 );
* // returns ~14.27
* @example
* var v = median( 8.0, 2.0 );
* // returns ~2.181
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta * pow( 2.0, 1.0/alpha );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/special/pow":1311}],934:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution mode.
*
* @module @stdlib/math/base/dist/pareto-type1/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/pareto-type1/mode' );
*
* var v = mode( 0.8, 1.0 );
* // returns 1.0
*
* v = mode( 4.0, 12.0 );
* // returns 12.0
*
* v = mode( 8.0, 2.0 );
* // returns 2.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":935}],935:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns 12.0
* @example
* var v = mode( 8.0, 2.0 );
* // returns 2.0
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return beta;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],936:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*
* @example
* var mypdf = factory( 0.5, 0.5 );
*
* var y = mypdf( 0.8 );
* // returns ~0.494
*
* y = mypdf( 2.0 );
* // returns ~0.125
*/
function factory( alpha, beta ) {
	if ( isnan( alpha ) || isnan( beta ) ) {
		return nan;
	}
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Pareto distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 4.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		var denom;
		var num;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x >= beta ) {
			num = alpha * pow( beta, alpha );
			denom = pow( x, alpha + 1.0 );
			return num / denom;
		}
		return 0.0;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":938,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],937:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for a Pareto (Type I) distribution.
*
* @module @stdlib/math/base/dist/pareto-type1/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/pareto-type1/pdf' );
*
* var y = pdf( 4.0, 1.0, 1.0 );
* // returns ~0.044
*
* y = pdf( 20.0, 1.0, 10.0 );
* // returns 0.025
*
* y = pdf( 7.0, 2.0, 6.0 );
* // returns ~0.21
*
* var mypdf = pdf.factory( 0.5, 0.5 );
*
* y = mypdf( 0.8 );
* // returns ~0.494
*
* y = mypdf( 2.0 );
* // returns ~0.125
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":936,"./pdf.js":939,"@stdlib/utils/define-read-only-property":1425}],938:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Pareto (Type I) distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],939:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 4.0, 1.0, 1.0 );
* // returns ~0.044
* @example
* var y = pdf( 20.0, 1.0, 10.0 );
* // returns 0.025
* @example
* var y = pdf( 7.0, 2.0, 6.0 );
* // returns ~0.21
* @example
* var y = pdf( 7.0, 6.0, 3.0 );
* // returns ~0.005
* @example
* var y = pdf( 1.0, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	var denom;
	var num;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta )
	) {
		return NaN;
	}
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( x >= beta ) {
		num = alpha * pow( beta, alpha );
		denom = pow( x, alpha + 1.0 );
		return num / denom;
	}
	return 0.0;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],940:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.66
*
* y = quantile( 0.8 );
* // returns ~0.952
*/
function factory( alpha, beta ) {
	var alphaInv;
	if ( isnan( alpha ) || isnan( beta ) ) {
		return nan;
	}
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return nan;
	}
	alphaInv = 1.0 / alpha;
	return quantile;

	/**
	* Evaluates the quantile function for a Pareto (Type I) distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return beta / pow( 1.0 - p, alphaInv );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":942,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],941:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution quantile function.
*
* @module @stdlib/math/base/dist/pareto-type1/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/pareto-type1/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.236
*
* y = quantile( 0.8, 1.0, 10.0 );
* // returns ~50.0
*
* y = quantile( 0.1, 1.0, 10.0 );
* // returns ~10.541
*
* var myquantile = quantile.factory( 2.5, 0.5 );
* y = myquantile( 0.5 );
* // returns ~0.66
*
* y = myquantile( 0.8 );
* // returns ~0.952
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":940,"./quantile.js":943,"@stdlib/utils/define-read-only-property":1425}],942:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Pareto (Type I) distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],943:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the quantile function for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.236
* @example
* var y = quantile( 0.8, 1.0, 10.0 );
* // returns ~50.0
* @example
* var y = quantile( 0.1, 1.0, 10.0 );
* // returns ~10.541
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if ( isnan( alpha ) || isnan( beta ) ) {
		return NaN;
	}
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return beta / pow( 1.0 - p, 1.0/alpha );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],944:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution skewness.
*
* @module @stdlib/math/base/dist/pareto-type1/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/pareto-type1/skewness' );
*
* var v = skewness( 3.5, 1.0 );
* // returns ~11.784
*
* v = skewness( 4.0, 12.0 );
* // returns ~7.071
*
* v = skewness( 8.0, 2.0 );
* // returns ~3.118
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":945}],945:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 3.5, 1.0 );
* // returns ~11.784
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~7.071
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~3.118
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 3.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 2.0 * ( 1.0+alpha ) / ( alpha-3.0 ) * sqrt( ( alpha-2.0 ) / alpha );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],946:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution variance.
*
* @module @stdlib/math/base/dist/pareto-type1/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/pareto-type1/variance' );
*
* var v = variance( 4.0, 12.0 );
* // returns 32.0
*
* v = variance( 8.0, 2.0 );
* // returns ~0.109
*
* v = variance( 0.8, 1.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":947}],947:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the variance of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns 32.0
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.109
* @example
* var v = variance( 1.0, 1.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( alpha < 2.0 ) {
		return PINF;
	}
	return ( beta*beta * alpha ) / ( pow( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],948:[function(require,module,exports){
'use strict';

// MODULES //

var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.5 );
* // returns ~0.986
* @example
* var y = cdf( 2.0, 10.0 );
* // returns ~0.003
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative mean parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, lambda ) {
	if ( isnan( x ) || isnan( lambda ) ) {
		return NaN;
	}
	if ( lambda < 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( lambda === 0.0 ) {
		return 1.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	return gammainc( lambda, floor( x ) + 1.0, true, true );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/gammainc":1277,"@stdlib/math/constants/float64-pinf":1414}],949:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 5.0 );
* var y = cdf( 3.0 );
* // returns ~0.265
*
* y = cdf( 8.0 );
* // returns ~0.932
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return nan;
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Poisson distribution.
	*
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		return gammainc( lambda, floor( x ) + 1.0, true, true );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":951,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/cdf":328,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/gammainc":1277,"@stdlib/math/constants/float64-pinf":1414}],950:[function(require,module,exports){
'use strict';

/**
* Poisson distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/poisson/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/poisson/cdf' );
*
* var y = cdf( 2.0, 0.5 );
* // returns ~0.986
*
* y = cdf( 2.0, 10.0 );
* // returns ~0.003
*
* y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 5.0 );
* y = mycdf( 3.0 );
* // returns ~0.265
*
* y = mycdf( 8.0 );
* // returns ~0.932
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":948,"./factory.js":949,"@stdlib/utils/define-read-only-property":1425}],951:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Poisson distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],952:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/poisson/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/poisson/kurtosis' );
var mean = require( '@stdlib/math/base/dist/poisson/mean' );
var median = require( '@stdlib/math/base/dist/poisson/median' );
var mode = require( '@stdlib/math/base/dist/poisson/mode' );
var skewness = require( '@stdlib/math/base/dist/poisson/skewness' );
var stdev = require( '@stdlib/math/base/dist/poisson/stdev' );
var variance = require( '@stdlib/math/base/dist/poisson/variance' );
var cdf = require( '@stdlib/math/base/dist/poisson/cdf' );
var mgf = require( '@stdlib/math/base/dist/poisson/mgf' );
var pmf = require( '@stdlib/math/base/dist/poisson/pmf' );
var quantile = require( '@stdlib/math/base/dist/poisson/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function poissonCDF( x ) {
	return cdf( x, this.lambda );
} // end FUNCTION poissonCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function poissonMGF( t ) {
	return mgf( t, this.lambda );
} // end FUNCTION poissonMGF()

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function poissonPMF( x ) {
	return pmf( x, this.lambda );
} // end FUNCTION poissonPMF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function poissonQuantile( p ) {
	return quantile( p, this.lambda );
} // end FUNCTION poissonQuantile()


// MAIN //

/**
* Poisson distribution constructor.
*
* @constructor
* @param {PositiveNumber} [lambda=1.0] - mean parameter
* @throws {TypeError} `lambda` must be a positive number
* @returns {Poisson} distribution instance
*
* @example
* var poisson = new Poisson( 1.0 );
*
* var y = poisson.cdf( 0.8 );
* // returns ~0.551
*
* var mode = poisson.mode;
* // returns 0.0
*/
function Poisson() {
	var lambda;
	if ( !(this instanceof Poisson) ) {
		if ( arguments.length === 0 ) {
			return new Poisson();
		}
		return new Poisson( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		lambda = arguments[ 0 ];
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Mean parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		lambda = 1.0;
	}
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
} // end FUNCTION Poisson()

/**
* Poisson distribution differential entropy.
*
* @memberof Poisson.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.entropy;
* // returns ~2.087
*/
Object.defineProperty( Poisson.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.lambda );
	}
});

/**
* Poisson distribution excess kurtosis.
*
* @memberof Poisson.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.kurtosis;
* // returns 0.25
*/
Object.defineProperty( Poisson.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.lambda );
	}
});

/**
* Poisson distribution expected value.
*
* @memberof Poisson.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.mean;
* // returns 4.0
*/
Object.defineProperty( Poisson.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.lambda );
	}
});

/**
* Poisson distribution median.
*
* @memberof Poisson.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.median;
* // returns 4.0
*/
Object.defineProperty( Poisson.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.lambda );
	}
});

/**
* Poisson distribution mode.
*
* @memberof Poisson.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.mode;
* // returns 4.0
*/
Object.defineProperty( Poisson.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.lambda );
	}
});

/**
* Poisson distribution skewness.
*
* @memberof Poisson.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.skewness;
* // returns 0.5
*/
Object.defineProperty( Poisson.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.lambda );
	}
});

/**
* Poisson distribution standard deviation.
*
* @memberof Poisson.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.stdev;
* // returns 2.0
*/
Object.defineProperty( Poisson.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.lambda );
	}
});

/**
* Poisson distribution variance.
*
* @memberof Poisson.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.variance;
* // returns 4.0
*/
Object.defineProperty( Poisson.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Poisson.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.cdf( 1.5 );
* // returns ~0.406
*/
setReadOnly( Poisson.prototype, 'cdf', poissonCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Poisson.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.mgf( 0.5 );
* // returns ~3.66
*/
setReadOnly( Poisson.prototype, 'mgf', poissonMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @memberof Poisson.prototype
* @name pmf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.pmf( 2.0 );
* // returns ~0.271
*
* v = poisson.pmf( 0.8 );
* // returns 0.0
*/
setReadOnly( Poisson.prototype, 'pmf', poissonPMF );

/**
* Evaluates the quantile function.
*
* @memberof Poisson.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Poisson.prototype, 'quantile', poissonQuantile );


// EXPORTS //

module.exports = Poisson;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/poisson/cdf":950,"@stdlib/math/base/dist/poisson/entropy":955,"@stdlib/math/base/dist/poisson/kurtosis":956,"@stdlib/math/base/dist/poisson/mean":959,"@stdlib/math/base/dist/poisson/median":961,"@stdlib/math/base/dist/poisson/mgf":964,"@stdlib/math/base/dist/poisson/mode":967,"@stdlib/math/base/dist/poisson/pmf":970,"@stdlib/math/base/dist/poisson/quantile":974,"@stdlib/math/base/dist/poisson/skewness":978,"@stdlib/math/base/dist/poisson/stdev":980,"@stdlib/math/base/dist/poisson/variance":982,"@stdlib/utils/define-read-only-property":1425}],953:[function(require,module,exports){
'use strict';

/**
* Poisson distribution constructor.
*
* @module @stdlib/math/base/dist/poisson/ctor
*
* @example
* var Poisson = require( '@stdlib/math/base/dist/poisson/ctor' );
*
* var poisson = new Poisson( 1.0 );
*
* var y = poisson.cdf( 1.5 );
* // returns ~0.736
*
* var mode = poisson.mode;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":952}],954:[function(require,module,exports){
'use strict';

// MODULES //

var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var factorial = require( '@stdlib/math/base/special/factorial' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// FUNCTIONS //

/**
* Returns a function to retrieve elements of the series \\( \sum_{k=0}^{\infty} \frac{ \lambda^k \log(k!) }{ k! } \\).
*
* @private
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} function to retrieve series elements
*/
function seriesClosure( lambda ) { // eslint-disable-line 
	var lk;
	var k;
	k = 1;
	lk = lambda;
	return function seriesElement() { // eslint-disable-line 
		k += 1;
		lk *= lambda;
		return lk * factorialln( k ) / factorial( k );
	}; // end FUNCTION seriesElement()
} // end FUNCTION seriesClosure()


// MAIN //

/**
* Returns the entropy of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~2.508
* @example
* var v = entropy( 1.0 );
* // returns ~1.305
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( lambda ) {
	var gen;
	var out;
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return 0.0;
	}
	gen = seriesClosure( lambda );
	out = lambda * ( 1.0-ln(lambda) );
	out += exp( -lambda ) * sumSeries( gen );
	return out;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/factorial":1262,"@stdlib/math/base/special/factorialln":1264,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/tools/sum-series":1362}],955:[function(require,module,exports){
'use strict';

/**
* Poisson distribution entropy.
*
* @module @stdlib/math/base/dist/poisson/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/poisson/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~2.61
*
* v = entropy( 4.5 );
* // returns ~2.149
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":954}],956:[function(require,module,exports){
'use strict';

/**
* Poisson distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/poisson/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/poisson/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.091
*
* v = kurtosis( 4.5 );
* // returns ~0.222
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":957}],957:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.111
* @example
* var v = kurtosis( 1.0 );
* // returns 1.0
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],958:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace poisson
*/
var poisson = {};

/**
* @name cdf
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/cdf}
*/
setReadOnly( poisson, 'cdf', require( '@stdlib/math/base/dist/poisson/cdf' ) );

/**
* @name kurtosis
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/kurtosis}
*/
setReadOnly( poisson, 'kurtosis', require( '@stdlib/math/base/dist/poisson/kurtosis' ) );

/**
* @name mean
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/mean}
*/
setReadOnly( poisson, 'mean', require( '@stdlib/math/base/dist/poisson/mean' ) );

/**
* @name median
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/median}
*/
setReadOnly( poisson, 'median', require( '@stdlib/math/base/dist/poisson/median' ) );

/**
* @name mgf
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/mgf}
*/
setReadOnly( poisson, 'mgf', require( '@stdlib/math/base/dist/poisson/mgf' ) );

/**
* @name mode
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/mode}
*/
setReadOnly( poisson, 'mode', require( '@stdlib/math/base/dist/poisson/mode' ) );

/**
* @name pmf
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/pmf}
*/
setReadOnly( poisson, 'pmf', require( '@stdlib/math/base/dist/poisson/pmf' ) );

/**
* @name Poisson
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/ctor}
*/
setReadOnly( poisson, 'Poisson', require( '@stdlib/math/base/dist/poisson/ctor' ) );

/**
* @name quantile
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/quantile}
*/
setReadOnly( poisson, 'quantile', require( '@stdlib/math/base/dist/poisson/quantile' ) );

/**
* @name skewness
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/skewness}
*/
setReadOnly( poisson, 'skewness', require( '@stdlib/math/base/dist/poisson/skewness' ) );

/**
* @name stdev
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/stdev}
*/
setReadOnly( poisson, 'stdev', require( '@stdlib/math/base/dist/poisson/stdev' ) );

/**
* @name variance
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/poisson/variance}
*/
setReadOnly( poisson, 'variance', require( '@stdlib/math/base/dist/poisson/variance' ) );


// EXPORTS //

module.exports = poisson;

},{"@stdlib/math/base/dist/poisson/cdf":950,"@stdlib/math/base/dist/poisson/ctor":953,"@stdlib/math/base/dist/poisson/kurtosis":956,"@stdlib/math/base/dist/poisson/mean":959,"@stdlib/math/base/dist/poisson/median":961,"@stdlib/math/base/dist/poisson/mgf":964,"@stdlib/math/base/dist/poisson/mode":967,"@stdlib/math/base/dist/poisson/pmf":970,"@stdlib/math/base/dist/poisson/quantile":974,"@stdlib/math/base/dist/poisson/skewness":978,"@stdlib/math/base/dist/poisson/stdev":980,"@stdlib/math/base/dist/poisson/variance":982,"@stdlib/utils/define-read-only-property":1425}],959:[function(require,module,exports){
'use strict';

/**
* Poisson distribution expected value.
*
* @module @stdlib/math/base/dist/poisson/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/poisson/mean' );
*
* var v = mean( 11.0 );
* // returns 11.0
*
* v = mean( 4.5 );
* // returns 4.5
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":960}],960:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 9.0
* @example
* var v = mean( 1.0 );
* // returns 1.0
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return lambda;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],961:[function(require,module,exports){
'use strict';

/**
* Poisson distribution median.
*
* @module @stdlib/math/base/dist/poisson/median
*
* @example
* var median = require( '@stdlib/math/base/dist/poisson/median' );
*
* var v = median( 11.0 );
* // returns 11
*
* v = median( 4.5 );
* // returns 4
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":962}],962:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns the median of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 9.0 );
* // returns 9
* @example
* var v = median( 1.0 );
* // returns 1
* @example
* var v = median( -0.2 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return floor( lambda + ( 1.0/3.0 ) - ( 0.02/lambda ) );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266}],963:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Poisson distribution with mean parameter `lambda`.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2.0 );
* var y = mgf( 0.1 );
* // returns ~1.234
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Poisson distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		return exp( lambda * ( exp(t) - 1.0 ) );
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":966,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],964:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Poisson distribution.
*
* @module @stdlib/math/base/dist/poisson/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/poisson/mgf' );
*
* var v = mgf( 0.5, 0.5 );
* // returns ~1.383
*
* var mymgf = mgf.factory( 2.0 );
* y = mymgf( 0.1 );
* // returns ~1.234
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":963,"./mgf.js":965,"@stdlib/utils/define-read-only-property":1425}],965:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Poisson distribution with mean parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} lambda - mean parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.5 );
* // returns ~13.163
* @example
* var y = mgf( 0.5, 0.5 );
* // returns ~1.383
* @example
* var y = mgf( NaN, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
* @example
* var y = mgf( -2.0, -1.0 );
* // returns NaN
*/
function mgf( t, lambda ) {
	if ( isnan( t ) || isnan( lambda ) ) {
		return NaN;
	}
	if ( lambda <= 0.0 ) {
		return NaN;
	}
	return exp( lambda * ( exp(t) - 1.0 ) );
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],966:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid Poisson distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],967:[function(require,module,exports){
'use strict';

/**
* Poisson distribution mode.
*
* @module @stdlib/math/base/dist/poisson/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/poisson/mode' );
*
* var v = mode( 11.0 );
* // returns 11
*
* v = mode( 4.5 );
* // returns 4
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":968}],968:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns the mode of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 9.0 );
* // returns 9
* @example
* var v = mode( 1.0 );
* // returns 1
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return floor( lambda );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266}],969:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var degenerate = require( '@stdlib/math/base/dist/degenerate/pmf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} PMF
*
* @example
* var pmf = factory( 1.0 );
* var y = pmf( 3.0 );
* // returns ~0.061
*
* y = pmf( 1.0 );
* // returns ~0.368
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return nan;
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a Poisson distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var lnl;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) && x !== PINF ) {
			lnl = (x * ln( lambda )) - lambda - factorialln( x );
			return exp( lnl );
		}
		return 0.0;
	} // end FUNCTION pmf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":971,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/dist/degenerate/pmf":348,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/factorialln":1264,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-pinf":1414}],970:[function(require,module,exports){
'use strict';

/**
* Poisson distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dist/poisson/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dist/poisson/pmf' );
*
* var y = pmf( 4.0, 3.0 );
* // returns ~0.168
*
* y = pmf( 1.0, 3.0 );
* // returns ~0.149
*
* y = pmf( -1.0, 2.0 );
* // returns 0.0
*
* var mypmf = pmf.factory( 1.0 );
* y = mypmf( 3.0 );
* // returns ~0.061
*
* y = mypmf( 1.0 );
* // returns ~0.368
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":969,"./pmf.js":972,"@stdlib/utils/define-read-only-property":1425}],971:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability mass function (PMF) for an invalid Poisson distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pmf( 2.0 );
* // returns NaN
*/
function pmf() {
	return NaN;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{}],972:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 4.0, 3.0 );
* // returns ~0.168
* @example
* var y = pmf( 1.0, 3.0 );
* // returns ~0.149
* @example
* var y = pmf( -1.0, 2.0 );
* // returns 0.0
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
* @example
* // Invalid mean parameter:
* var y = pmf( 2.0, -0.5 );
* // returns NaN
*/
function pmf( x, lambda ) {
	var lnl;
	if ( isnan( x ) || isnan( lambda ) ) {
		return NaN;
	}
	if ( lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return x === 0.0 ? 1.0 : 0.0;
	}
	if ( isNonNegativeInteger( x ) && x !== PINF ) {
		lnl = (x * ln( lambda )) - lambda - factorialln( x );
		return exp( lnl );
	}
	return 0.0;
} // end FUNCTION pmf()


// EXPORTS //

module.exports = pmf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-nonnegative-integer":49,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/factorialln":1264,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-pinf":1414}],973:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/quantile' ).factory;
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dist/poisson/cdf' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var search = require( './search.js' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 5.0 );
* var y = quantile( 0.4 );
* // returns 4
*
* y = quantile( 0.8 );
* // returns 7
*
* y = quantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( lambda ) {
	var sigmaInv;
	var sigma;

	if ( isnan( lambda ) || lambda < 0.0 ) {
		return nan;
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	sigma = sqrt( lambda );
	sigmaInv = 1.0 / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a Poisson distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p === 0.0 ) {
			return 0.0;
		}
		if ( p === 1.0 ) {
			return PINF;
		}
		// Cornish-Fisher expansion:
		if ( p < 0.5 ) {
			x = -erfcinv( 2.0 * p ) * SQRT2;
		} else {
			x = erfcinv( 2.0 * ( 1.0 - p ) ) * SQRT2;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
		guess = round( lambda + (sigma * corr) );
		return ( cdf( guess, lambda ) >= p ) ?
			search.left( guess, p, lambda ) :
			search.right( guess, p, lambda );
	} // end FUNCTION quantile()
} // end FUNCTION factory()

// EXPORTS //

module.exports = factory;

},{"./nan.js":975,"./search.js":977,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/quantile":352,"@stdlib/math/base/dist/poisson/cdf":950,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-sqrt-two":1421}],974:[function(require,module,exports){
'use strict';

/**
* Poisson distribution quantile function.
*
* @module @stdlib/math/base/dist/poisson/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/poisson/quantile' );
*
* var y = quantile( 0.5, 2.0 );
* // returns 2
*
* y = quantile( 0.9, 4.0 );
* // returns 7
*
* y = quantile( 0.1, 200.0 );
* // returns 182
*
* var myquantile = quantile.factory( 5.0 );
* y = myquantile( 0.4 );
* // returns 4
*
* y = myquantile( 0.8 );
* // returns 7
*
* y = myquantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":973,"./quantile.js":976,"@stdlib/utils/define-read-only-property":1425}],975:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Poisson distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],976:[function(require,module,exports){
'use strict';

// MODULES //

var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dist/poisson/cdf' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var search = require( './search.js' );


// MAIN //

/**
* Evaluates the quantile function for a Poisson distribution with mean parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0 );
* // returns 2
* @example
* var y = quantile( 0.9, 4.0 );
* // returns 7
* @example
* var y = quantile( 0.1, 200.0 );
* // returns 182
* @example
* var y = quantile( 1.1, 0.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*/
function quantile( p, lambda ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var x2;
	var x;
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return 0.0;
	}
	if ( p === 0.0 ) {
		return 0.0;
	}
	if ( p === 1.0 ) {
		return PINF;
	}
	// Cornish-Fisher expansion:
	sigma = sqrt( lambda );
	sigmaInv = 1.0 / sigma;
	if ( p < 0.5 ) {
		x = -erfcinv( 2.0 * p ) * SQRT2;
	} else {
		x = erfcinv( 2.0 * ( 1.0 - p ) ) * SQRT2;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
	guess = round( lambda + (sigma * corr) );
	return ( cdf( guess, lambda ) >= p ) ?
		search.left( guess, p, lambda ) :
		search.right( guess, p, lambda );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"./search.js":977,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/poisson/cdf":950,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-sqrt-two":1421}],977:[function(require,module,exports){
'use strict';

// MODULES

var cdf = require( '@stdlib/math/base/dist/poisson/cdf' );


// MAIN //

/**
* Performs a search to the left.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} p - probability
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} `p` quantile of the specified distribution
*/
function searchLeft( x, p, lambda ) {
	while ( true ) {
		if ( x === 0 || cdf( x - 1.0, lambda ) < p ) {
			return x;
		}
		x -= 1;
	}
} // end FUNCTION searchLeft()

/**
* Performs a search to the right.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} p - probability
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} `p` quantile of the specified distribution
*/
function searchRight( x, p, lambda ) {
	while ( true ) {
		x += 1;
		if ( cdf( x, lambda ) >= p ) {
			return x;
		}
	}
} // end FUNCTION searchRight()


// EXPORTS //

module.exports = {
	'left': searchLeft,
	'right': searchRight
};

},{"@stdlib/math/base/dist/poisson/cdf":950}],978:[function(require,module,exports){
'use strict';

/**
* Poisson distribution skewness.
*
* @module @stdlib/math/base/dist/poisson/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/poisson/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.302
*
* v = skewness( 4.5 );
* // returns ~0.471
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":979}],979:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.33
* @example
* var v = skewness( 1.0 );
* // returns 1.0
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return 1.0 / sqrt( lambda );
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],980:[function(require,module,exports){
'use strict';

/**
* Poisson distribution standard deviation.
*
* @module @stdlib/math/base/dist/poisson/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/poisson/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~3.317
*
* v = stdev( 4.5 );
* // returns ~2.121
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":981}],981:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns 3.0
* @example
* var v = stdev( 1.0 );
* // returns 1.0
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return sqrt( lambda );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],982:[function(require,module,exports){
'use strict';

/**
* Poisson distribution variance.
*
* @module @stdlib/math/base/dist/poisson/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/poisson/variance' );
*
* var v = variance( 11.0 );
* // returns 11.0
*
* v = variance( 4.5 );
* // returns 4.5
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":983}],983:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns 9.0
* @example
* var v = variance( 1.0 );
* // returns 1.0
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return lambda;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],984:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.199
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.118
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, sigma ) {
	var s2;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x < 0.0 ? 0.0 : 1.0;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	s2 = pow( sigma, 2.0 );
	return 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],985:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2.0 );
* var y = cdf( 3.0 );
* // returns ~0.675
*
* y = cdf( 1.0 );
* // returns ~0.118
*/
function factory( sigma ) {
	var s2;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":987,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/cdf":328,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],986:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/rayleigh/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/rayleigh/cdf' );
*
* var y = cdf( 2.0, 5.0 );
* // returns ~0.077
*
* var myCDF = cdf.factory( 0.5 );
* y = myCDF( 1.0 );
* // returns ~0.865
*
* y = myCDF( 0.5 );
* // returns ~0.393
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":984,"./factory.js":985,"@stdlib/utils/define-read-only-property":1425}],987:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Rayleigh distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 2.1 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],988:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/rayleigh/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/rayleigh/kurtosis' );
var mean = require( '@stdlib/math/base/dist/rayleigh/mean' );
var median = require( '@stdlib/math/base/dist/rayleigh/median' );
var mode = require( '@stdlib/math/base/dist/rayleigh/mode' );
var skewness = require( '@stdlib/math/base/dist/rayleigh/skewness' );
var stdev = require( '@stdlib/math/base/dist/rayleigh/stdev' );
var variance = require( '@stdlib/math/base/dist/rayleigh/variance' );
var cdf = require( '@stdlib/math/base/dist/rayleigh/cdf' );
var logcdf = require( '@stdlib/math/base/dist/rayleigh/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/rayleigh/logpdf' );
var mgf = require( '@stdlib/math/base/dist/rayleigh/mgf' );
var pdf = require( '@stdlib/math/base/dist/rayleigh/pdf' );
var quantile = require( '@stdlib/math/base/dist/rayleigh/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function rayleighCDF( x ) {
	return cdf( x, this.sigma );
} // end FUNCTION rayleighCDF()

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function rayleighLogCDF( x ) {
	return logcdf( x, this.sigma );
} // end FUNCTION rayleighLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function rayleighLogPDF( x ) {
	return logpdf( x, this.sigma );
} // end FUNCTION rayleighLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function rayleighMGF( t ) {
	return mgf( t, this.sigma );
} // end FUNCTION rayleighMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function rayleighPDF( x ) {
	return pdf( x, this.sigma );
} // end FUNCTION rayleighPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function rayleighQuantile( p ) {
	return quantile( p, this.sigma );
} // end FUNCTION rayleighQuantile()


// MAIN //

/**
* Rayleigh distribution constructor.
*
* @constructor
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {Rayleigh} distribution instance
*
* @example
* var rayleigh = new Rayleigh( 1.0 );
*
* var y = rayleigh.cdf( 0.8 );
* // returns ~0.274
*
* var mode = rayleigh.mode;
* // returns 1.0
*/
function Rayleigh() {
	var sigma;
	if ( !(this instanceof Rayleigh) ) {
		if ( arguments.length === 0 ) {
			return new Rayleigh();
		}
		return new Rayleigh( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		sigma = arguments[ 0 ];
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		sigma = 1.0;
	}
	Object.defineProperty( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
} // end FUNCTION Rayleigh()

/**
* Rayleigh distribution differential entropy.
*
* @memberof Rayleigh.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.entropy;
* // returns ~2.328
*/
Object.defineProperty( Rayleigh.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.sigma );
	}
});

/**
* Rayleigh distribution excess kurtosis.
*
* @memberof Rayleigh.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.kurtosis;
* // returns ~0.245
*/
Object.defineProperty( Rayleigh.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.sigma );
	}
});

/**
* Rayleigh distribution expected value.
*
* @memberof Rayleigh.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.mean;
* // returns ~5.013
*/
Object.defineProperty( Rayleigh.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.sigma );
	}
});

/**
* Rayleigh distribution median.
*
* @memberof Rayleigh.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.median;
* // returns ~4.71
*/
Object.defineProperty( Rayleigh.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.sigma );
	}
});

/**
* Rayleigh distribution mode.
*
* @memberof Rayleigh.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.mode;
* // returns 4.0
*/
Object.defineProperty( Rayleigh.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.sigma );
	}
});

/**
* Rayleigh distribution skewness.
*
* @memberof Rayleigh.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.skewness;
* // returns ~0.631
*/
Object.defineProperty( Rayleigh.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k, this.sigma );
	}
});

/**
* Rayleigh distribution standard deviation.
*
* @memberof Rayleigh.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.stdev;
* // returns ~2.62
*/
Object.defineProperty( Rayleigh.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.sigma );
	}
});

/**
* Rayleigh distribution variance.
*
* @memberof Rayleigh.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.variance;
* // returns ~6.867
*/
Object.defineProperty( Rayleigh.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.sigma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Rayleigh.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.cdf( 0.5 );
* // returns ~0.031
*/
setReadOnly( Rayleigh.prototype, 'cdf', rayleighCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @memberof Rayleigh.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.logcdf( 0.5 );
* // returns ~-3.481
*/
setReadOnly( Rayleigh.prototype, 'logcdf', rayleighLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @memberof Rayleigh.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.logpdf( 0.8 );
* // returns ~-1.689
*/
setReadOnly( Rayleigh.prototype, 'logpdf', rayleighLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Rayleigh.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.mgf( 0.5 );
* // returns ~5.586
*/
setReadOnly( Rayleigh.prototype, 'mgf', rayleighMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Rayleigh.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.pdf( 4.0 );
* // returns ~0.135
*/
setReadOnly( Rayleigh.prototype, 'pdf', rayleighPDF );

/**
* Evaluates the quantile function.
*
* @memberof Rayleigh.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.quantile( 0.5 );
* // returns ~2.355
*/
setReadOnly( Rayleigh.prototype, 'quantile', rayleighQuantile );


// EXPORTS //

module.exports = Rayleigh;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/rayleigh/cdf":986,"@stdlib/math/base/dist/rayleigh/entropy":991,"@stdlib/math/base/dist/rayleigh/kurtosis":992,"@stdlib/math/base/dist/rayleigh/logcdf":996,"@stdlib/math/base/dist/rayleigh/logpdf":1000,"@stdlib/math/base/dist/rayleigh/mean":1003,"@stdlib/math/base/dist/rayleigh/median":1005,"@stdlib/math/base/dist/rayleigh/mgf":1008,"@stdlib/math/base/dist/rayleigh/mode":1011,"@stdlib/math/base/dist/rayleigh/pdf":1014,"@stdlib/math/base/dist/rayleigh/quantile":1018,"@stdlib/math/base/dist/rayleigh/skewness":1021,"@stdlib/math/base/dist/rayleigh/stdev":1023,"@stdlib/math/base/dist/rayleigh/variance":1025,"@stdlib/utils/define-read-only-property":1425}],989:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution constructor.
*
* @module @stdlib/math/base/dist/rayleigh/ctor
*
* @example
* var Rayleigh = require( '@stdlib/math/base/dist/rayleigh/ctor' );
*
* var rayleigh = new Rayleigh( 1.0 );
*
* var y = rayleigh.cdf( 0.8 );
* // returns ~0.274
*
* var mode = rayleigh.mode;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":988}],990:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/math/constants/float64-eulergamma' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );


// MAIN //

/**
* Returns the differential entropy of a Rayleigh distribution.
*
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~3.139
* @example
* var v = entropy( 2.0 );
* // returns ~1.635
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( sigma ) {
	if ( isnan( sigma ) || sigma <= 0.0 ) {
		return NaN;
	}
	return 1.0 + ln( sigma / SQRT2 ) + ( 0.5 * GAMMA );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-eulergamma":1393,"@stdlib/math/constants/float64-sqrt-two":1421}],991:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution differential entropy.
*
* @module @stdlib/math/base/dist/rayleigh/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/rayleigh/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~3.34
*
* v = entropy( 4.5 );
* // returns ~2.446
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":990}],992:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/rayleigh/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/rayleigh/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.245
*
* v = kurtosis( 4.5 );
* // returns ~0.245
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":993}],993:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

var KURTOSIS = -( ( 6.0*PI*PI ) - ( 24.0*PI ) + 16.0 ) / ( (4.0-PI)*(4.0-PI) );


// MAIN //

/**
* Returns the excess kurtosis of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.245
* @example
* var v = kurtosis( 5.0 );
* // returns ~0.245
* @example
* var v = kurtosis( 3.0 );
* // returns ~0.245
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return KURTOSIS;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pi":1413}],994:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace rayleigh
*/
var rayleigh = {};

/**
* @name cdf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/cdf}
*/
setReadOnly( rayleigh, 'cdf', require( '@stdlib/math/base/dist/rayleigh/cdf' ) );

/**
* @name entropy
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/entropy}
*/
setReadOnly( rayleigh, 'entropy', require( '@stdlib/math/base/dist/rayleigh/entropy' ) );

/**
* @name kurtosis
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/kurtosis}
*/
setReadOnly( rayleigh, 'kurtosis', require( '@stdlib/math/base/dist/rayleigh/kurtosis' ) );

/**
* @name logcdf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/logcdf}
*/
setReadOnly( rayleigh, 'logcdf', require( '@stdlib/math/base/dist/rayleigh/logcdf' ) );

/**
* @name logpdf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/logpdf}
*/
setReadOnly( rayleigh, 'logpdf', require( '@stdlib/math/base/dist/rayleigh/logpdf' ) );

/**
* @name mean
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/mean}
*/
setReadOnly( rayleigh, 'mean', require( '@stdlib/math/base/dist/rayleigh/mean' ) );

/**
* @name median
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/median}
*/
setReadOnly( rayleigh, 'median', require( '@stdlib/math/base/dist/rayleigh/median' ) );

/**
* @name mgf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/mgf}
*/
setReadOnly( rayleigh, 'mgf', require( '@stdlib/math/base/dist/rayleigh/mgf' ) );

/**
* @name mode
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/mode}
*/
setReadOnly( rayleigh, 'mode', require( '@stdlib/math/base/dist/rayleigh/mode' ) );

/**
* @name pdf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/pdf}
*/
setReadOnly( rayleigh, 'pdf', require( '@stdlib/math/base/dist/rayleigh/pdf' ) );

/**
* @name Rayleigh
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/ctor}
*/
setReadOnly( rayleigh, 'Rayleigh', require( '@stdlib/math/base/dist/rayleigh/ctor' ) );

/**
* @name quantile
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/quantile}
*/
setReadOnly( rayleigh, 'quantile', require( '@stdlib/math/base/dist/rayleigh/quantile' ) );

/**
* @name skewness
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/skewness}
*/
setReadOnly( rayleigh, 'skewness', require( '@stdlib/math/base/dist/rayleigh/skewness' ) );

/**
* @name variance
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/rayleigh/variance}
*/
setReadOnly( rayleigh, 'variance', require( '@stdlib/math/base/dist/rayleigh/variance' ) );


// EXPORTS //

module.exports = rayleigh;

},{"@stdlib/math/base/dist/rayleigh/cdf":986,"@stdlib/math/base/dist/rayleigh/ctor":989,"@stdlib/math/base/dist/rayleigh/entropy":991,"@stdlib/math/base/dist/rayleigh/kurtosis":992,"@stdlib/math/base/dist/rayleigh/logcdf":996,"@stdlib/math/base/dist/rayleigh/logpdf":1000,"@stdlib/math/base/dist/rayleigh/mean":1003,"@stdlib/math/base/dist/rayleigh/median":1005,"@stdlib/math/base/dist/rayleigh/mgf":1008,"@stdlib/math/base/dist/rayleigh/mode":1011,"@stdlib/math/base/dist/rayleigh/pdf":1014,"@stdlib/math/base/dist/rayleigh/quantile":1018,"@stdlib/math/base/dist/rayleigh/skewness":1021,"@stdlib/math/base/dist/rayleigh/variance":1025,"@stdlib/utils/define-read-only-property":1425}],995:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/logcdf' ).factory;
var expm1 = require( '@stdlib/math/base/special/expm1' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/math/constants/float64-ln-half' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 2.0 );
* var y = logcdf( 3.0 );
* // returns ~-0.393
*
* y = logcdf( 1.0 );
* // returns ~-2.137
*/
function factory( sigma ) {
	var s2;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var p;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return NINF;
		}
		p = -pow( x, 2.0 ) / ( 2.0 * s2 );
		return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":998,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/logcdf":332,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ln-half":1399,"@stdlib/math/constants/float64-ninf":1411}],996:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/rayleigh/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/rayleigh/logcdf' );
*
* var y = logcdf( 2.0, 5.0 );
* // returns ~-2.564
*
* var mylogcdf = logcdf.factory( 0.5 );
* y = mylogcdf( 1.0 );
* // returns ~-0.145
*
* y = mylogcdf( 0.5 );
* // returns ~-0.934
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":995,"./logcdf.js":997,"@stdlib/utils/define-read-only-property":1425}],997:[function(require,module,exports){
'use strict';

// MODULES //

var expm1 = require( '@stdlib/math/base/special/expm1' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/math/constants/float64-ln-half' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 3.0 );
* // returns ~-1.614
* @example
* var y = logcdf( 1.0, 2.0 );
* // returns ~-2.137
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logcdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, -1.0 );
* // returns NaN
*/
function logcdf( x, sigma ) {
	var s2;
	var p;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x < 0.0 ? NINF : 0.0;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	s2 = pow( sigma, 2.0 );
	p = -pow( x, 2.0 ) / ( 2.0 * s2 );
	return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ln-half":1399,"@stdlib/math/constants/float64-ninf":1411}],998:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an invalid Rayleigh distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 2.1 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],999:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5 );
* var y = logpdf( 1.0 );
* // returns ~-0.614
* y = logpdf( 0.1 );
* // returns ~-0.936
*/
function factory( sigma ) {
	var s2;
	var s2i;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return NINF;
		}
		return ln( s2i * x ) - (pow( x, 2.0 ) / ( 2.0 * s2 ));
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1002,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/logpdf":336,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1000:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/rayleigh/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/rayleigh/logpdf' );
*
* var y = logpdf( 2.0, 4.0 );
* // returns ~-2.207
*
* var mylogpdf = logpdf.factory( 4.0 );
*
* y = mylogpdf( 6.0 );
* // returns ~-2.104
*
* y = mylogpdf( 4.0 );
* // returns ~-1.884
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":999,"./logpdf.js":1001,"@stdlib/utils/define-read-only-property":1425}],1001:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 1.0 );
* // returns ~-1.248
* @example
* var y = logpdf( 2.0, 0.8 );
* // returns ~-1.988
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function logpdf( x, sigma ) {
	var s2;
	var s2i;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x === 0.0 ? PINF : NINF;
	}
	if ( x < 0.0 || x === PINF ) {
		return NINF;
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	return ln( s2i * x ) - (pow( x, 2.0 ) / ( 2.0 * s2 ));
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1002:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid Rayleigh distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 3.14 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],1003:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution expected value.
*
* @module @stdlib/math/base/dist/rayleigh/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/rayleigh/mean' );
*
* var v = mean( 11.0 );
* // returns ~13.786
*
* v = mean( 4.5 );
* // returns ~5.64
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1004}],1004:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var SQRT_HALF_PI = require( '@stdlib/math/constants/float64-sqrt-half-pi' );


// MAIN //

/**
* Returns the expected value of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~11.28
* @example
* var v = mean( 2.0 );
* // returns ~2.507
* @example
* var v = mean( 0.5 );
* // returns NaN
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma * SQRT_HALF_PI;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-sqrt-half-pi":1417}],1005:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution median.
*
* @module @stdlib/math/base/dist/rayleigh/median
*
* @example
* var median = require( '@stdlib/math/base/dist/rayleigh/median' );
*
* var v = median( 11.0 );
* // returns ~12.952
*
* v = median( 4.5 );
* // returns ~5.298
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1006}],1006:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var LN2 = require( '@stdlib/math/constants/float64-ln-two' );


// VARIABLES //

var SQRT2LN2 = sqrt( 2.0 * LN2 );


// MAIN //

/**
* Returns the median of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns ~10.597
* @example
* var v = median( 2.0 );
* // returns ~2.355
* @example
* var v = median( -0.2 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma * SQRT2LN2;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-ln-two":1403}],1007:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var erf = require( '@stdlib/math/base/special/erf' );
var SQRT_HALF_PI = require( '@stdlib/math/constants/float64-sqrt-half-pi' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.5 );
* var y = mgf( 1.0 );
* // returns ~2.715
* y = mgf( 0.5 );
* // returns ~1.888
*/
function factory( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var sigmat;
		var ret;

		if ( isnan( t ) ) {
			return NaN;
		}
		sigmat = t * sigma;
		ret = 1.0 + (sigmat * exp( sigmat*sigmat / 2.0 ));
		ret *= SQRT_HALF_PI * ( erf( sigmat / SQRT2 ) + 1.0 );
		return ret;
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1010,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erf":1248,"@stdlib/math/base/special/exp":1257,"@stdlib/math/constants/float64-sqrt-half-pi":1417,"@stdlib/math/constants/float64-sqrt-two":1421}],1008:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Rayleigh distribution.
*
* @module @stdlib/math/base/dist/rayleigh/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/rayleigh/mgf' );
*
* var y = mgf( 1.0, 3.0 );
* // returns ~678.508
*
* y = mgf( 1.0, 2.0 );
* // returns ~38.65
*
* y = mgf( -1.0, 4.0 );
* // returns ~-0.947
*
* var myMGF = mgf.factory( 0.5 );
*
* y = myMGF( 1.0 );
* // returns ~2.715
*
* y = myMGF( 0.5 );
* // returns ~1.888
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1007,"./mgf.js":1009,"@stdlib/utils/define-read-only-property":1425}],1009:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var erf = require( '@stdlib/math/base/special/erf' );
var SQRT_HALF_PI = require( '@stdlib/math/constants/float64-sqrt-half-pi' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Rayleigh distribution with scale parameter `sigma` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 3.0 );
* // returns ~678.508
* @example
* var y = mgf( 1.0, 2.0 );
* // returns ~38.65
* @example
* var y = mgf( -1.0, 4.0 );
* // returns ~-0.947
* @example
* var y = mgf( NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
* @example
* var y = mgf( 0.5, -1.0 );
* // returns NaN
*/
function mgf( t, sigma ) {
	var sigmat;
	var out;
	if (
		isnan( t ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	sigmat = t * sigma;
	out = 1.0 + (sigmat * exp( sigmat*sigmat / 2.0 ));
	out *= SQRT_HALF_PI * ( erf( sigmat / SQRT2 ) + 1.0 );
	return out;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/erf":1248,"@stdlib/math/base/special/exp":1257,"@stdlib/math/constants/float64-sqrt-half-pi":1417,"@stdlib/math/constants/float64-sqrt-two":1421}],1010:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid Rayleigh distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],1011:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution mode.
*
* @module @stdlib/math/base/dist/rayleigh/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/rayleigh/mode' );
*
* var v = mode( 11.0 );
* // returns 11.0
*
* v = mode( 4.5 );
* // returns 4.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1012}],1012:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 9.0
* @example
* var v = mode( 2.0 );
* // returns 2.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],1013:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
* var y = pdf( 1.0 );
* // returns ~0.541
*
* y = pdf( 0.1 );
* // returns ~0.392
*/
function factory( sigma ) {
	var s2;
	var s2i;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return 0.0;
		}
		return s2i * x * exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1015,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/pdf":344,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],1014:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/rayleigh/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/rayleigh/pdf' );
*
* var y = pdf( 2.0, 4.0 );
* // returns ~0.11
*
* var myPDF = pdf.factory( 4.0 );
*
* y = myPDF( 6.0 );
* // returns ~0.122
*
* y = myPDF( 4.0 );
* // returns ~0.152
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1013,"./pdf.js":1016,"@stdlib/utils/define-read-only-property":1425}],1015:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Rayleigh distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],1016:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 1.0 );
* // returns ~0.287
* @example
* var y = pdf( 2.0, 0.8 );
* // returns ~0.137
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, sigma ) {
	var s2;
	var s2i;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x === 0.0 ? PINF : 0.0;
	}
	if ( x < 0.0 || x === PINF ) {
		return 0.0;
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	return s2i * x * exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pinf":1414}],1017:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dist/degenerate/quantile' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0 );
* var y = quantile( 0.5 );
* // returns ~11.774
*
* y = quantile( 0.8 );
* // returns ~17.941
*/
function factory( sigma ) {
	var s2;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return nan;
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = sigma * sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a Rayleigh distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return sqrt( -2.0 * s2 * log1p( -p ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1019,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/degenerate/quantile":352,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/sqrt":1343}],1018:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution quantile function.
*
* @module @stdlib/math/base/dist/rayleigh/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/rayleigh/quantile' );
*
* var y = quantile( 0.5, 4.0 );
* // returns ~4.71
*
* var myQuantile = quantile.factory( 0.4 );
*
* y = myQuantile( 0.4 );
* // returns ~0.404
*
* y = myQuantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1017,"./quantile.js":1020,"@stdlib/utils/define-read-only-property":1425}],1019:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Rayleigh distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],1020:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a Rayleigh distribution with scale parameter `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.794
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~4.71
* @example
* var y = quantile( 1.1, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, sigma ) {
	var s2;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return 0.0;
	}
	s2 = sigma * sigma;
	return sqrt( -2.0 * s2 * log1p( -p ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/sqrt":1343}],1021:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution skewness.
*
* @module @stdlib/math/base/dist/rayleigh/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/rayleigh/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.631
*
* v = skewness( 4.5 );
* // returns ~0.631
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1022}],1022:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var SQRT_PI = require( '@stdlib/math/constants/float64-sqrt-pi' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

var SKEWNESS = 2.0 * SQRT_PI * ( PI-3.0 ) / pow( 4.0-PI, 1.5 );


// MAIN //

/**
* Returns the skewness of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.631
* @example
* var v = skewness( 2.0 );
* // returns ~0.631
* @example
* var v = skewness( 0.5 );
* // returns NaN
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return SKEWNESS;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-sqrt-pi":1418}],1023:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution standard deviation.
*
* @module @stdlib/math/base/dist/rayleigh/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/rayleigh/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~7.207
*
* v = stdev( 4.5 );
* // returns ~2.948
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1024}],1024:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

var SQRT4MPI = sqrt( 4.0-PI );


// MAIN //

/**
* Returns the standard deviation of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~5.896
* @example
* var v = stdev( 2.0 );
* // returns ~1.31
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( sigma ) {
	if ( isnan( sigma ) || sigma < 0 ) {
		return NaN;
	}
	return SQRT4MPI * sigma / SQRT2;
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-sqrt-two":1421}],1025:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution variance.
*
* @module @stdlib/math/base/dist/rayleigh/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/rayleigh/variance' );
*
* var v = variance( 11.0 );
* // returns ~51.934
*
* v = variance( 4.5 );
* // returns ~8.691
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1026}],1026:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Returns the variance of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~34.765
* @example
* var v = variance( 2.0 );
* // returns ~1.717
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( sigma ) {
	if ( isnan( sigma ) || sigma < 0 ) {
		return NaN;
	}
	return ( 4.0-PI ) * sigma*sigma / 2.0;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pi":1413}],1027:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.611
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.789
* @example
* var y = cdf( -1.0, 4.0 );
* // returns ~0.187
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, v ) {
	var x2;
	var p;
	var z;
	if (
		isnan( x ) ||
		isnan( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return 0.5;
	}
	x2 = pow( x, 2.0 );
	if ( v > 2.0 * x2 ) {
		z = x2 / ( v + x2 );
		p = betainc( z, 0.5, v/2.0, true, true ) / 2.0;
	} else {
		z = v / ( v + x2 );
		p = betainc( z, v/2.0, 0.5, true, false ) / 2.0;
	}
	return x > 0.0 ? 1.0 - p : p;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/base/special/pow":1311}],1028:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.816
*
* y = cdf( 1.0 );
* // returns ~0.699
*/
function factory( v ) {
	if ( isnan( v ) || v <= 0.0 ) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var x2;
		var p;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === 0.0 ) {
			return 0.5;
		}
		x2 = pow( x, 2.0 );
		if ( v > 2.0 * x2 ) {
			z = x2 / ( v + x2 );
			p = betainc( z, 0.5, v/2.0, true, true ) / 2.0;
		} else {
			z = v / ( v + x2 );
			p = betainc( z, v/2.0, 0.5, true, false ) / 2.0;
		}
		return x > 0.0 ? 1.0 - p : p;
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1030,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/base/special/pow":1311}],1029:[function(require,module,exports){
'use strict';

/**
* Student's t distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/t/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/t/cdf' );
*
* var y = cdf( 2.0, 0.1 );
* // returns ~0.611
*
* y = cdf( 1.0, 2.0 );
* // returns ~0.789
*
* y = cdf( -1.0, 4.0 );
* // returns ~0.187
*
* var mycdf = cdf.factory( 0.5 );
* y = mycdf( 3.0 );
* // returns ~0.816
*
* y = mycdf( 1.0 );
* // returns ~0.699
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1027,"./factory.js":1028,"@stdlib/utils/define-read-only-property":1425}],1030:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Student's t distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 3.14 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],1031:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/t/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/t/kurtosis' );
var mean = require( '@stdlib/math/base/dist/t/mean' );
var median = require( '@stdlib/math/base/dist/t/median' );
var mode = require( '@stdlib/math/base/dist/t/mode' );
var skewness = require( '@stdlib/math/base/dist/t/skewness' );
var stdev = require( '@stdlib/math/base/dist/t/stdev' );
var variance = require( '@stdlib/math/base/dist/t/variance' );
var cdf = require( '@stdlib/math/base/dist/t/cdf' );
var pdf = require( '@stdlib/math/base/dist/t/pdf' );
var quantile = require( '@stdlib/math/base/dist/t/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function tCDF( x ) {
	return cdf( x, this.v );
} // end FUNCTION tCDF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function tPDF( x ) {
	return pdf( x, this.v );
} // end FUNCTION tPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function tQuantile( p ) {
	return quantile( p, this.v );
} // end FUNCTION tQuantile()


// MAIN //

/**
* Student's t distribution constructor.
*
* @constructor
* @param {PositiveNumber} [v=1.0] - degrees of freedom
* @throws {TypeError} `v` must be a positive number
* @returns {T} distribution instance
*
* @example
* var t = new T( 1.0 );
*
* var y = t.cdf( 0.8 );
* // returns ~0.715
*
* var mode = t.mode;
* // returns 0.0
*/
function T() {
	var v;
	if ( !(this instanceof T) ) {
		if ( arguments.length === 0 ) {
			return new T();
		}
		return new T( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		v = arguments[ 0 ];
		if ( !isPositive( v ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `v` must be a positive number. Value: `' + v + '`' );
		}
	} else {
		v = 1.0;
	}
	Object.defineProperty( this, 'v', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return v;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			v = value;
		}
	});
	return this;
} // end FUNCTION T()

/**
* Student's t distribution differential entropy.
*
* @memberof T.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.entropy;
* // returns ~1.682
*/
Object.defineProperty( T.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.v );
	}
});

/**
* Student's t distribution excess kurtosis.
*
* @memberof T.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.kurtosis;
* // returns Number.POSITIVE_INFINITY
*/
Object.defineProperty( T.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.v );
	}
});

/**
* Student's t distribution expected value.
*
* @memberof T.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.mean;
* // returns 0.0
*/
Object.defineProperty( T.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.v );
	}
});

/**
* Student's t distribution median.
*
* @memberof T.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.median;
* // returns 0.0
*/
Object.defineProperty( T.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.v );
	}
});

/**
* Student's t distribution mode.
*
* @memberof T.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.mode;
* // returns 0.0
*/
Object.defineProperty( T.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.v );
	}
});

/**
* Student's t distribution skewness.
*
* @memberof T.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.skewness;
* // returns 0.0
*/
Object.defineProperty( T.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.v );
	}
});

/**
* Student's t distribution standard deviation.
*
* @memberof T.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.stdev;
* // returns ~1.414
*/
Object.defineProperty( T.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.v );
	}
});

/**
* Student's t distribution variance.
*
* @memberof T.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.variance;
* // returns 2.0
*/
Object.defineProperty( T.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.v );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof T.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.cdf( 0.5 );
* // returns ~0.667
*/
setReadOnly( T.prototype, 'cdf', tCDF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof T.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.pdf( 0.8 );
* // returns ~0.233
*/
setReadOnly( T.prototype, 'pdf', tPDF );

/**
* Evaluates the quantile function.
*
* @memberof T.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.quantile( 0.5 );
* // returns 0.0
*/
setReadOnly( T.prototype, 'quantile', tQuantile );


// EXPORTS //

module.exports = T;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/t/cdf":1029,"@stdlib/math/base/dist/t/entropy":1034,"@stdlib/math/base/dist/t/kurtosis":1035,"@stdlib/math/base/dist/t/mean":1038,"@stdlib/math/base/dist/t/median":1040,"@stdlib/math/base/dist/t/mode":1042,"@stdlib/math/base/dist/t/pdf":1045,"@stdlib/math/base/dist/t/quantile":1049,"@stdlib/math/base/dist/t/skewness":1052,"@stdlib/math/base/dist/t/stdev":1054,"@stdlib/math/base/dist/t/variance":1056,"@stdlib/utils/define-read-only-property":1425}],1032:[function(require,module,exports){
'use strict';

/**
* Student's t distribution constructor.
*
* @module @stdlib/math/base/dist/t/ctor
*
* @example
* var T = require( '@stdlib/math/base/dist/t/ctor' );
*
* var t = new T( 1.0 );
*
* var y = t.cdf( 0.8 );
* // returns ~0.715
*
* var mode = t.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1031}],1033:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var beta = require( '@stdlib/math/base/special/beta' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~1.533
* @example
* var v = entropy( 2.0 );
* // returns ~1.96
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( v ) {
	var out;
	var vh;
	if ( isnan( v ) || v <= 0.0 ) {
		return NaN;
	}
	vh = v / 2.0;
	out = ( v + 1.0 ) / 2.0;
	out *= digamma( ( 1.0+v ) / 2.0 ) - digamma( vh );
	out += ln( sqrt( v ) * beta( vh, 0.5 ) );
	return out;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/beta":1193,"@stdlib/math/base/special/digamma":1245,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/sqrt":1343}],1034:[function(require,module,exports){
'use strict';

/**
* Student's t distribution differential entropy.
*
* @module @stdlib/math/base/dist/t/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/t/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~1.512
*
* v = entropy( 4.5 );
* // returns ~1.652
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1033}],1035:[function(require,module,exports){
'use strict';

/**
* Student's t distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/t/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/t/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.857
*
* v = kurtosis( 4.5 );
* // returns 12.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1036}],1036:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the excess kurtosis of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns 1.2
* @example
* var v = kurtosis( 5.0 );
* // returns 6.0
* @example
* var v = kurtosis( 3.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = kurtosis( 0.5 );
* // returns NaN
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( v ) {
	if ( isnan( v ) || v <= 2.0 ) {
		return NaN;
	}
	if ( v <= 4.0 ) {
		return PINF;
	}
	return 6.0 / ( v - 4.0 );
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],1037:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace t
*/
var t = {};

/**
* @name cdf
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/cdf}
*/
setReadOnly( t, 'cdf', require( '@stdlib/math/base/dist/t/cdf' ) );

/**
* @name entropy
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/entropy}
*/
setReadOnly( t, 'entropy', require( '@stdlib/math/base/dist/t/entropy' ) );

/**
* @name kurtosis
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/kurtosis}
*/
setReadOnly( t, 'kurtosis', require( '@stdlib/math/base/dist/t/kurtosis' ) );

/**
* @name mean
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/mean}
*/
setReadOnly( t, 'mean', require( '@stdlib/math/base/dist/t/mean' ) );

/**
* @name median
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/median}
*/
setReadOnly( t, 'median', require( '@stdlib/math/base/dist/t/median' ) );

/**
* @name mode
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/mode}
*/
setReadOnly( t, 'mode', require( '@stdlib/math/base/dist/t/mode' ) );

/**
* @name pdf
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/pdf}
*/
setReadOnly( t, 'pdf', require( '@stdlib/math/base/dist/t/pdf' ) );

/**
* @name T
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/ctor}
*/
setReadOnly( t, 'T', require( '@stdlib/math/base/dist/t/ctor' ) );

/**
* @name quantile
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/quantile}
*/
setReadOnly( t, 'quantile', require( '@stdlib/math/base/dist/t/quantile' ) );

/**
* @name skewness
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/skewness}
*/
setReadOnly( t, 'skewness', require( '@stdlib/math/base/dist/t/skewness' ) );

/**
* @name stdev
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/stdev}
*/
setReadOnly( t, 'stdev', require( '@stdlib/math/base/dist/t/stdev' ) );

/**
* @name variance
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/t/variance}
*/
setReadOnly( t, 'variance', require( '@stdlib/math/base/dist/t/variance' ) );


// EXPORTS //

module.exports = t;

},{"@stdlib/math/base/dist/t/cdf":1029,"@stdlib/math/base/dist/t/ctor":1032,"@stdlib/math/base/dist/t/entropy":1034,"@stdlib/math/base/dist/t/kurtosis":1035,"@stdlib/math/base/dist/t/mean":1038,"@stdlib/math/base/dist/t/median":1040,"@stdlib/math/base/dist/t/mode":1042,"@stdlib/math/base/dist/t/pdf":1045,"@stdlib/math/base/dist/t/quantile":1049,"@stdlib/math/base/dist/t/skewness":1052,"@stdlib/math/base/dist/t/stdev":1054,"@stdlib/math/base/dist/t/variance":1056,"@stdlib/utils/define-read-only-property":1425}],1038:[function(require,module,exports){
'use strict';

/**
* Student's t distribution expected value.
*
* @module @stdlib/math/base/dist/t/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/t/mean' );
*
* var v = mean( 11.0 );
* // returns 0.0
*
* v = mean( 4.5 );
* // returns 0.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1039}],1039:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 0.0
* @example
* var v = mean( 2.0 );
* // returns 0.0
* @example
* var v = mean( 0.5 );
* // returns NaN
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( v ) {
	if ( isnan( v ) || v <= 1.0 ) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],1040:[function(require,module,exports){
'use strict';

/**
* Student's t distribution median.
*
* @module @stdlib/math/base/dist/t/median
*
* @example
* var median = require( '@stdlib/math/base/dist/t/median' );
*
* var v = median( 11.0 );
* // returns 0.0
*
* v = median( 4.5 );
* // returns 0.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1041}],1041:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns 0.0
* @example
* var v = median( 2.0 );
* // returns 0.0
* @example
* var v = median( -0.2 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( v ) {
	if ( isnan( v ) || v < 0.0 ) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43}],1042:[function(require,module,exports){
'use strict';

/**
* Student's t distribution mode.
*
* @module @stdlib/math/base/dist/t/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/t/mode' );
*
* var v = mode( 11.0 );
* // returns 0.0
*
* v = mode( 4.5 );
* // returns 0.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1043}],1043:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 0.0
* @example
* var v = mode( 2.0 );
* // returns 0.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( v ) {
	if ( isnan( v ) || v < 0.0 ) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],1044:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Student's t distribution with `v` degrees of freedom.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 1.0 );
* var y = pdf( 3.0 );
* // returns ~0.032
*
* y = pdf( 1.0 );
* // returns ~0.159
*/
function factory( v ) {
	var exponent;
	var betaTerm;

	if ( isnan( v ) || v <= 0 ) {
		return nan;
	}
	betaTerm = sqrt( v ) * beta( v/2.0, 0.5 );
	exponent = ( 1.0 + v ) / 2.0;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return pow( v / ( v + pow( x, 2.0 ) ), exponent ) / betaTerm;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1046,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/beta":1193,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343}],1045:[function(require,module,exports){
'use strict';

/**
* Student's t distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/t/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/t/pdf' );
*
* var y = pdf( 3.0, 1.0 );
* // returns ~0.032
*
* var myPDF = pdf.factory( 3.0 );
* y = myPDF( 1.0 );
* // returns ~0.207
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1044,"./pdf.js":1047,"@stdlib/utils/define-read-only-property":1425}],1046:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function for an invalid Student's t distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 0.3 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],1047:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.355
* @example
* var y = pdf( 2.0, 0.7 );
* // returns ~0.058
* @example
* var y = pdf( -1.0, 0.5 );
* // returns ~0.139
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
* @example
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, v ) {
	var betaTerm;
	if (
		isnan( x ) ||
		isnan( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	betaTerm = sqrt( v ) * beta( v/2.0, 0.5 );
	return pow( v / ( v + pow( x, 2.0 ) ), (1.0+v) / 2.0 ) / betaTerm;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/beta":1193,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343}],1048:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sign = require( '@stdlib/math/base/special/signum' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.5 );
* var y = quantile( 0.5 );
* // returns 0.0
*
* y = quantile( 0.8 );
* // returns ~2.513
*
* y = quantile( 1.0 );
* // returns Number.POSITIVE_INFINITY
*/
function factory( v ) {
	if ( isnan( v ) || v <= 0.0 ) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Student's t distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var prob;
		var xs;

		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		prob = ( p > 0.5 ) ? 1.0 - p : p;
		xs = betaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );
		return sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1050,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp":1210,"@stdlib/math/base/special/signum":1328,"@stdlib/math/base/special/sqrt":1343}],1049:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for a Student's t distribution.
*
* @module @stdlib/math/base/dist/t/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/t/quantile' );
*
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
*
* y = quantile( 0.1, 1.0 );
* // returns ~-3.078
*
* y = quantile( 0.5, 0.1 );
* // returns 0.0
*
* var myquantile = quantile.factory( 4.0 );
*
* y = myquantile( 0.2 );
* // returns ~-0.941
*
* y = myquantile( 0.9 );
* // returns ~1.533
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1048,"./quantile.js":1051,"@stdlib/utils/define-read-only-property":1425}],1050:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Student's t distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],1051:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp.js' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sign = require( '@stdlib/math/base/special/signum' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a Student's t distribution with degrees of freedom `v` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
* @example
* var y = quantile( 0.1, 1.0 );
* // returns ~-3.078
* @example
* var y = quantile( 0.5, 0.1 );
* // returns 0.0
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, v ) {
	var prob;
	var xs;
	if ( isnan( v ) || v <= 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	prob = ( p > 0.5 ) ? 1.0 - p : p;
	xs = betaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );
	return sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/betaincinv/lib/ibeta_inv_imp.js":1210,"@stdlib/math/base/special/signum":1328,"@stdlib/math/base/special/sqrt":1343}],1052:[function(require,module,exports){
'use strict';

/**
* Student's t distribution skewness.
*
* @module @stdlib/math/base/dist/t/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/t/skewness' );
*
* var v = skewness( 11.0 );
* // returns 0.0
*
* v = skewness( 4.5 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1053}],1053:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns 0.0
* @example
* var v = skewness( 2.0 );
* // returns 0.0
* @example
* var v = skewness( 0.5 );
* // returns NaN
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( v ) {
	if ( isnan( v ) || v <= 3.0 ) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43}],1054:[function(require,module,exports){
'use strict';

/**
* Student's t distribution standard deviation.
*
* @module @stdlib/math/base/dist/t/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/t/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~1.105
*
* v = stdev( 4.5 );
* // returns ~1.342
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1055}],1055:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~1.134
* @example
* var v = stdev( 2.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = stdev( 0.5 );
* // returns NaN
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( v ) {
	if ( isnan( v ) || v <= 1.0 ) {
		return NaN;
	}
	if ( v <= 2.0 ) {
		return PINF;
	}
	return sqrt( v / ( v - 2.0 ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pinf":1414}],1056:[function(require,module,exports){
'use strict';

/**
* Student's t distribution variance.
*
* @module @stdlib/math/base/dist/t/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/t/variance' );
*
* var v = variance( 11.0 );
* // returns ~1.222
*
* v = variance( 4.5 );
* // returns ~1.8
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1057}],1057:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the variance of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~1.286
* @example
* var v = variance( 2.0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = variance( 0.5 );
* // returns NaN
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( v ) {
	if ( isnan( v ) || v <= 1.0 ) {
		return NaN;
	}
	if ( v <= 2.0 ) {
		return PINF;
	}
	return v / ( v - 2.0 );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float64-pinf":1414}],1058:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var getKeys = require( 'object-keys' ).shim();
var dist = require( './../lib' );


// TESTS //

tape( 'main export is an object', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof dist, 'object', 'main export is an object' );
	t.end();
});

tape( 'the exported object contains distribution namespaces', function test( t ) {
	var keys = getKeys( dist );
	t.equal( keys.length > 0, true, 'has keys' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/dist/test/test.js")
},{"./../lib":775,"object-keys":1469,"tape":1495}],1059:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.875
* @example
* var y = cdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.75
* @example
* var y = cdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.278
* @example
* var y = cdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function cdf( x, a, b, c ) {
	var denom1;
	var denom2;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return NaN;
	}
	if ( !( a <= c && c <= b ) ) {
		return NaN;
	}

	if ( x <= a ) {
		return 0.0;
	}
	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );
	// Case: x > a
	if ( x <= c ) {
		return pow( x - a, 2.0 ) / denom1;
	}
	// Case: x > c
	if ( x < b ) {
		return 1.0 - ( pow( b - x, 2.0 ) / denom2 );
	}
	// Case: x >= b
	return 1.0;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],1060:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0, 2.0 );
* var y = cdf( 0.5 );
* // returns 0.0125
*
* y = cdf( 8.0 );
* // returns 0.95
*/
function factory( a, b, c ) {
	var denom1;
	var denom2;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return nan;
	}
	if ( !( a <= c && c <= b ) ) {
		return nan;
	}

	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= a ) {
			return 0.0;
		}
		// Case: x > a
		if ( x <= c ) {
			return pow( x - a, 2.0 ) / denom1;
		}
		// Case: x > c
		if ( x < b ) {
			return 1 - ( pow( b - x, 2.0 ) / denom2 );
		}
		// Case: x >= b
		return 1.0;
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1062,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],1061:[function(require,module,exports){
'use strict';

/**
* Triangular distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/triangular/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/triangular/cdf' );
*
* var y = cdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.875
*
* y = cdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.75
*
* y = cdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.278
*
* y = cdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 0.0, 10.0, 2.0 );
* y = mycdf( 0.5 );
* // returns 0.0125
*
* y = mycdf( 8.0 );
* // returns 0.95
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1059,"./factory.js":1060,"@stdlib/utils/define-read-only-property":1425}],1062:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid triangular distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],1063:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/triangular/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/triangular/kurtosis' );
var mean = require( '@stdlib/math/base/dist/triangular/mean' );
var median = require( '@stdlib/math/base/dist/triangular/median' );
var mode = require( '@stdlib/math/base/dist/triangular/mode' );
var skewness = require( '@stdlib/math/base/dist/triangular/skewness' );
var stdev = require( '@stdlib/math/base/dist/triangular/stdev' );
var variance = require( '@stdlib/math/base/dist/triangular/variance' );
var cdf = require( '@stdlib/math/base/dist/triangular/cdf' );
var mgf = require( '@stdlib/math/base/dist/triangular/mgf' );
var pdf = require( '@stdlib/math/base/dist/triangular/pdf' );
var quantile = require( '@stdlib/math/base/dist/triangular/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function triangularCDF( x ) {
	return cdf( x, this.a, this.b, this.c );
} // end FUNCTION triangularCDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function triangularMGF( t ) {
	return mgf( t, this.a, this.b, this.c );
} // end FUNCTION  triangularMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function triangularPDF( x ) {
	return pdf( x, this.a, this.b, this.c );
} // end FUNCTION triangularPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function triangularQuantile( p ) {
	return quantile( p, this.a, this.b, this.c );
} // end FUNCTION triangularQuantile()


// MAIN //

/**
* Triangular distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @param {number} [c=0.5] - mode
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {TypeError} `c` must be a number primitive
* @throws {RangeError} `a` must be smaller than or equal to `b` and `c`
* @throws {RangeError} `b` must be greater than or equal to `a` and `b`
* @throws {RangeError} `c` must be greater than or equal to `a` and smaller than or equal to `b`
* @returns {Triangular} distribution instance
*
* @example
* var triangular = new Triangular( 0.0, 1.0, 0.25 );
*
* var y = triangular.cdf( 0.8 );
* // returns ~0.947
*
* var mu = triangular.mean;
* // returns ~0.417
*/
function Triangular() {
	var a;
	var b;
	var c;
	if ( !(this instanceof Triangular) ) {
		if ( arguments.length === 0 ) {
			return new Triangular();
		}
		return new Triangular( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		c = arguments[ 2 ];
		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( !isNumber( c ) || isnan( c ) ) {
			throw new TypeError( 'invalid input argument. Mode `c` must be a number primitive. Value: `' + c + '`' );
		}
		if ( !( a <= c && c <= b ) ) {
			throw new RangeError( 'invalid input arguments. Parameters must satisfy `a <= c <= b`. Value: `' + a + ',' + b + ',' + c + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
		c = 0.5;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value > b || value > c ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `b` and `c`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a > value || c > value ) {
				throw new RangeError( 'invalid value. Must be greater than or equal to `a` and `c`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	Object.defineProperty( this, 'c', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return c;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a > value || b < value ) {
				throw new RangeError( 'invalid value. Must be greater than or equal to `a` and smaller than or equal to `b`. Value: `'+ value + '`' );
			}
			c = value;
		}
	});
	return this;
} // end FUNCTION Triangular()

/**
* Triangular distribution differential entropy.
*
* @memberof Triangular.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.entropy;
* // returns ~1.886
*/
Object.defineProperty( Triangular.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution excess kurtosis.
*
* @memberof Triangular.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.kurtosis;
* // returns -0.6
*/
Object.defineProperty( Triangular.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution expected value.
*
* @memberof Triangular.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.mean;
* // returns ~8.667
*/
Object.defineProperty( Triangular.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution median.
*
* @memberof Triangular.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.median;
* // returns ~8.899
*/
Object.defineProperty( Triangular.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution mode.
*
* @memberof Triangular.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.mode;
* // returns 10.0
*/
Object.defineProperty( Triangular.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution skewness.
*
* @memberof Triangular.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.skewness;
* // returns ~-0.422
*/
Object.defineProperty( Triangular.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution standard deviation.
*
* @memberof Triangular.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.stdev;
* // returns ~1.7
*/
Object.defineProperty( Triangular.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution variance.
*
* @memberof Triangular.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.variance;
* // returns ~2.889
*/
Object.defineProperty( Triangular.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b, this.c );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Triangular.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.cdf( 3.0 );
* // returns 0.5
*/
setReadOnly( Triangular.prototype, 'cdf', triangularCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Triangular.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.mgf( 0.5 );
* // returns ~4.576
*/
setReadOnly( Triangular.prototype, 'mgf', triangularMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Triangular.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.pdf( 2.4 );
* // returns ~0.40
*/
setReadOnly( Triangular.prototype, 'pdf', triangularPDF );

/**
* Evaluates the quantile function.
*
* @memberof Triangular.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Triangular.prototype, 'quantile', triangularQuantile );


// EXPORTS //

module.exports = Triangular;

},{"@stdlib/assert/is-number":20,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/triangular/cdf":1061,"@stdlib/math/base/dist/triangular/entropy":1066,"@stdlib/math/base/dist/triangular/kurtosis":1067,"@stdlib/math/base/dist/triangular/mean":1070,"@stdlib/math/base/dist/triangular/median":1072,"@stdlib/math/base/dist/triangular/mgf":1075,"@stdlib/math/base/dist/triangular/mode":1078,"@stdlib/math/base/dist/triangular/pdf":1081,"@stdlib/math/base/dist/triangular/quantile":1085,"@stdlib/math/base/dist/triangular/skewness":1088,"@stdlib/math/base/dist/triangular/stdev":1090,"@stdlib/math/base/dist/triangular/variance":1092,"@stdlib/utils/define-read-only-property":1425}],1064:[function(require,module,exports){
'use strict';

/**
* Triangular distribution constructor.
*
* @module @stdlib/math/base/dist/triangular/ctor
*
* @example
* var Triangular = require( '@stdlib/math/base/dist/triangular/ctor' );
*
* var triangular = new Triangular( 0.0, 1.0, 0.5 );
*
* var y = triangular.cdf( 0.8 );
* // returns 0.92
*
* var mu = triangular.mean;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1063}],1065:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} entropy
*
* @example
* var v = entropy( 0.0, 1.0, 0.5 );
* // returns ~-0.193
* @example
* var v = entropy( 4.0, 12.0, 9.0 );
* // returns ~1.886
* @example
* var v = entropy( -4.0, 4.0, -1.0 );
* // returns ~1.886
* @example
* var v = entropy( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = entropy( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = entropy( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = entropy( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = entropy( 0.0, 4.0, NaN );
* // returns NaN
*/
function entropy( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return 0.5 + ln( 0.5 * ( b-a ) );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300}],1066:[function(require,module,exports){
'use strict';

/**
* Triangular distribution differential entropy.
*
* @module @stdlib/math/base/dist/triangular/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/triangular/entropy' );
*
* var v = entropy( 0.0, 1.0, 0.5 );
* // returns ~-0.193
*
* v = entropy( 4.0, 12.0, 5.0 );
* // returns ~1.886
*
* v = entropy( 2.0, 8.0, 7.0 );
* // returns ~1.599
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1065}],1067:[function(require,module,exports){
'use strict';

/**
* Triangular distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/triangular/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/triangular/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0, 0.5 );
* // returns -0.6
*
* v = kurtosis( 4.0, 12.0, 5.0 );
* // returns -0.6
*
* v = kurtosis( 2.0, 8.0, 7.0 );
* // returns -0.6
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1068}],1068:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0, 0.5 );
* // returns -0.6
* @example
* var v = kurtosis( 4.0, 12.0, 9.0 );
* // returns -0.6
* @example
* var v = kurtosis( -4.0, 4.0, -1.0 );
* // returns -0.6
* @example
* var v = kurtosis( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = kurtosis( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = kurtosis( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = kurtosis( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = kurtosis( 0.0, 4.0, NaN );
* // returns NaN
*/
function kurtosis( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return -0.6;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],1069:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace triangular
*/
var triangular = {};

/**
* @name cdf
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/cdf}
*/
setReadOnly( triangular, 'cdf', require( '@stdlib/math/base/dist/triangular/cdf' ) );

/**
* @name entropy
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/entropy}
*/
setReadOnly( triangular, 'entropy', require( '@stdlib/math/base/dist/triangular/entropy' ) );

/**
* @name kurtosis
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/kurtosis}
*/
setReadOnly( triangular, 'kurtosis', require( '@stdlib/math/base/dist/triangular/kurtosis' ) );

/**
* @name mean
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/mean}
*/
setReadOnly( triangular, 'mean', require( '@stdlib/math/base/dist/triangular/mean' ) );

/**
* @name median
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/median}
*/
setReadOnly( triangular, 'median', require( '@stdlib/math/base/dist/triangular/median' ) );

/**
* @name mgf
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/mgf}
*/
setReadOnly( triangular, 'mgf', require( '@stdlib/math/base/dist/triangular/mgf' ) );

/**
* @name mode
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/mode}
*/
setReadOnly( triangular, 'mode', require( '@stdlib/math/base/dist/triangular/mode' ) );

/**
* @name pdf
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/pdf}
*/
setReadOnly( triangular, 'pdf', require( '@stdlib/math/base/dist/triangular/pdf' ) );

/**
* @name quantile
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/quantile}
*/
setReadOnly( triangular, 'quantile', require( '@stdlib/math/base/dist/triangular/quantile' ) );

/**
* @name skewness
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/skewness}
*/
setReadOnly( triangular, 'skewness', require( '@stdlib/math/base/dist/triangular/skewness' ) );

/**
* @name stdev
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/stdev}
*/
setReadOnly( triangular, 'stdev', require( '@stdlib/math/base/dist/triangular/stdev' ) );

/**
* @name Triangular
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/ctor}
*/
setReadOnly( triangular, 'Triangular', require( '@stdlib/math/base/dist/triangular/ctor' ) );

/**
* @name variance
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/triangular/variance}
*/
setReadOnly( triangular, 'variance', require( '@stdlib/math/base/dist/triangular/variance' ) );


// EXPORTS //

module.exports = triangular;

},{"@stdlib/math/base/dist/triangular/cdf":1061,"@stdlib/math/base/dist/triangular/ctor":1064,"@stdlib/math/base/dist/triangular/entropy":1066,"@stdlib/math/base/dist/triangular/kurtosis":1067,"@stdlib/math/base/dist/triangular/mean":1070,"@stdlib/math/base/dist/triangular/median":1072,"@stdlib/math/base/dist/triangular/mgf":1075,"@stdlib/math/base/dist/triangular/mode":1078,"@stdlib/math/base/dist/triangular/pdf":1081,"@stdlib/math/base/dist/triangular/quantile":1085,"@stdlib/math/base/dist/triangular/skewness":1088,"@stdlib/math/base/dist/triangular/stdev":1090,"@stdlib/math/base/dist/triangular/variance":1092,"@stdlib/utils/define-read-only-property":1425}],1070:[function(require,module,exports){
'use strict';

/**
* Triangular distribution expected value.
*
* @module @stdlib/math/base/dist/triangular/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/triangular/mean' );
*
* var v = mean( 0.0, 1.0, 0.5 );
* // returns ~0.5
*
* v = mean( 4.0, 12.0, 5.0 );
* // returns 7.0
*
* v = mean( 2.0, 8.0, 7.0 );
* // returns ~5.667
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1071}],1071:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0, 0.5 );
* // returns ~0.5
* @example
* var v = mean( 4.0, 12.0, 9.0 );
* // returns ~8.333
* @example
* var v = mean( -4.0, 4.0, -1.0 );
* // returns ~-0.333
* @example
* var v = mean( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = mean( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = mean( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = mean( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = mean( 0.0, 4.0, NaN );
* // returns NaN
*/
function mean( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return ( a + b + c ) / 3.0;
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43}],1072:[function(require,module,exports){
'use strict';

/**
* Triangular distribution median.
*
* @module @stdlib/math/base/dist/triangular/median
*
* @example
* var median = require( '@stdlib/math/base/dist/triangular/median' );
*
* var v = median( 0.0, 1.0, 0.5 );
* // returns 0.5
*
* v = median( 4.0, 12.0, 5.0 );
* // returns ~6.708
*
* v = median( 2.0, 8.0, 7.0 );
* // returns ~5.873
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1073}],1073:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the median of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0, 0.5 );
* // returns 0.5
* @example
* var v = median( 4.0, 12.0, 9.0 );
* // returns ~8.472
* @example
* var v = median( -4.0, 4.0, -1.0 );
* // returns ~-0.472
* @example
* var v = median( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = median( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = median( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = median( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = median( 0.0, 4.0, NaN );
* // returns NaN
*/
function median( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	if ( c >= ( a+b ) / 2.0 ) {
		return a + sqrt( 0.5 * ( b-a ) * ( c-a ) );
	}
	return b - sqrt( 0.5 * ( b-a ) * ( b-c ) );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],1074:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a triangular distribution with lower limit `a`, upper limit `b`, and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.0, 2.0, 1.0 );
* var y = mgf( -1.0 );
* // returns ~0.3996
*
* y = mgf( 2.0 );
* // returns ~10.205
*/
function factory( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return nan;
	}
	if ( !( a <= c && c <= b ) ) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a triangular distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var bmc;
		var bma;
		var cma;
		var ret;

		if ( isnan( t ) ) {
			return NaN;
		}
		bmc = b - c;
		bma = b - a;
		cma = c - a;
		if ( t === 0.0 ) {
			return 1.0;
		}
		ret = (bmc * exp( a * t )) - (bma * exp( c * t ));
		ret += cma * exp( b * t );
		ret *= 2.0;
		ret /= bma * cma * bmc * pow( t, 2.0 );
		return ret;
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1077,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],1075:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a triangular distribution.
*
* @module @stdlib/math/base/dist/triangular/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/triangular/mgf' );
*
* var y = mgf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~1.021
*
* y = mgf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~1.111
*
* y = mgf( -0.3, -20.0, 0.0, -2.0 );
* // returns ~24.334
*
* y = mgf( -2.0, -1.0, 1.0, 0.0 );
* // returns ~1.381
*
* var mymgf = mgf.factory( 0.0, 2.0, 1.0 );
* y = mymgf( -1.0 );
* // returns ~0.3996
*
* y = mymgf( 2.0 );
* // returns ~10.205
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1074,"./mgf.js":1076,"@stdlib/utils/define-read-only-property":1425}],1076:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a triangular distribution with lower limit `a`, upper limit `b`, and mode `c` at a value `t`.
*
* @param {number} t - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~1.021
* @example
* var y = mgf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~1.111
* @example
* var y = mgf( -0.3, -20.0, 0.0, -2.0 );
* // returns ~24.334
* @example
* var y = mgf( -2.0, -1.0, 1.0, 0.0 );
* // returns ~1.381
* @example
* var y = mgf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.5, 1.0, 0.0, NaN );
* // returns NaN
* @example
* var y = mgf( 0.5, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function mgf( t, a, b, c ) {
	var bmc;
	var bma;
	var cma;
	var ret;

	if (
		isnan( t ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	bmc = b - c;
	bma = b - a;
	cma = c - a;
	if ( t === 0.0 ) {
		return 1.0;
	}
	ret = (bmc * exp( a * t )) - (bma * exp( c * t ));
	ret += cma * exp( b * t );
	ret *= 2.0;
	ret /= bma * cma * bmc * pow( t, 2.0 );
	return ret;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311}],1077:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid triangular distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],1078:[function(require,module,exports){
'use strict';

/**
* Triangular distribution mode.
*
* @module @stdlib/math/base/dist/triangular/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/triangular/mode' );
*
* var v = mode( 0.0, 1.0, 0.5 );
* // returns 0.5
*
* v = mode( 4.0, 12.0, 5.0 );
* // returns 5.0
*
* v = mode( 2.0, 8.0, 7.0 );
* // returns 7.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1079}],1079:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} mode
*
* @example
* var v = mode( 0.0, 1.0, 0.5 );
* // returns 0.5
* @example
* var v = mode( 4.0, 12.0, 9.0 );
* // returns 9.0
* @example
* var v = mode( -4.0, 4.0, -1.0 );
* // returns -1.0
* @example
* var v = mode( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = mode( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = mode( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = mode( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = mode( 0.0, 4.0, NaN );
* // returns NaN
*/
function mode( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return c;
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43}],1080:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0, 5.0 );
* var y = pdf( 2.0 );
* // returns 0.08
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function factory( a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return nan;
	}
	if ( !( a <= c && c <= b ) ) {
		return nan;
	}

	denom1 = ( b - a ) * ( c - a );
	denom2 = b - a;
	denom3 = ( b - a ) * ( b - c );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 12.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		// Case: x >= a
		if ( x < c ) {
			return 2.0 * ( x - a ) / denom1;
		}
		if ( x === c ) {
			return 2.0 / denom2;
		}
		// Case: x > c
		if ( x <= b ) {
			return 2.0 * ( b - x ) / denom3;
		}
		// Case: x > b
		return 0.0;
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1082,"@stdlib/math/base/assert/is-nan":43}],1081:[function(require,module,exports){
'use strict';

/**
* Triangular distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/triangular/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/triangular/pdf' );
*
* var y = pdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.5
*
* y = pdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 1.0
*
* y = pdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.056
*
* var mypdf = pdf.factory( 0.0, 10.0, 5.0 );
* y = mypdf( 2.0 );
* // returns 0.08
*
* y = mypdf( 12.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1080,"./pdf.js":1083,"@stdlib/utils/define-read-only-property":1425}],1082:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid triangular distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],1083:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.5
* @example
* var y = pdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 1.0
* @example
* var y = pdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.278
* @example
* var y = pdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
* @example
* var y = pdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = pdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
* @example
* var y = pdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function pdf( x, a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return NaN;
	}
	if ( !( a <= c && c <= b ) ) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	denom1 = ( b - a ) * ( c - a );
	denom2 = b - a;
	denom3 = ( b - a ) * ( b - c );
	// Case: x >= a
	if ( x < c ) {
		return 2.0 * ( x - a ) / denom1;
	}
	if ( x === c ) {
		return 2.0 / denom2;
	}
	// Case: x > c
	if ( x <= b ) {
		return 2.0 * ( b - x ) / denom3;
	}
	// Case: x > b
	return 0.0;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43}],1084:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a triangular distribution with lower limit `a`, upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0, 2.5 );
* var y = quantile( 0.4 );
* // returns ~2.658
*
* y = quantile( 0.8 );
* // returns ~3.225
*/
function factory( a, b, c ) {
	var pInflection;
	var fact1;
	var fact2;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return nan;
	}
	if ( !( a <= c && c <= b ) ) {
		return nan;
	}

	pInflection = ( c - a ) / ( b - a );
	fact1 = ( b - a ) * ( c - a);
	fact2 = ( b - a ) * ( b - c );
	return quantile;

	/**
	* Evaluates the quantile function for a triangular distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p < pInflection ) {
			return a + sqrt( fact1 * p );
		}
		if ( p > pInflection ) {
			return b - sqrt( fact2 * ( 1.0 - p ) );
		}
		// Case: p = pInflection
		return c;
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1086,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],1085:[function(require,module,exports){
'use strict';

/**
* Triangular distribution quantile function.
*
* @module @stdlib/math/base/dist/triangular/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/triangular/quantile' );
*
* var y = quantile( 0.9, -1.0, 1.0, 0.0 );
* // returns ~0.553
*
* y = quantile( 0.1, -1.0, 1.0, 0.5 );
* // returns ~-0.452
*
* y = quantile( 0.1, -20.0, 0.0, -2.0 );
* // returns -14.0
*
* y = quantile( 0.8, 0.0, 20.0, 0.0 );
* // returns ~11.056
*
* var myquantile = quantile.factory( 2.0, 4.0, 2.5 );
* y = myquantile( 0.4 );
* // returns ~2.658
*
* y = myquantile( 0.8 );
* // returns ~3.225
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":1084,"./quantile.js":1087,"@stdlib/utils/define-read-only-property":1425}],1086:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid triangular distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],1087:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.9, -1.0, 1.0, 0.0 );
* // returns ~0.553
* @example
* var y = quantile( 0.1, -1.0, 1.0, 0.5 );
* // returns ~-0.452
* @example
* var y = quantile( 0.1, -20.0, 0.0, -2.0 );
* // returns -14.0
* @example
* var y = quantile( 0.8, 0.0, 20.0, 0.0 );
* // returns ~11.056
* @example
* var y = quantile( 1.1, -1.0, 1.0, 0.0 );
* // returns NaN
* @example
* var y = quantile( -0.1, -1.0, 1.0, 0.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.3, NaN, 1.0, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.3, 0.0, NaN, 0.5 );
* // returns NaN
* @example
* var y = quantile( 0.3, 1.0, 0.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.3, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function quantile( p, a, b, c ) {
	var pInflection;
	var fact1;
	var fact2;

	if (
		isnan( p ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return NaN;
	}
	if ( !( a <= c && c <= b ) ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}

	pInflection = ( c - a ) / ( b - a );
	fact1 = ( b - a ) * ( c - a);
	fact2 = ( b - a ) * ( b - c );
	if ( p < pInflection ) {
		return a + sqrt( fact1 * p );
	}
	if ( p > pInflection ) {
		return b - sqrt( fact2 * ( 1.0 - p ) );
	}
	// Case: p = pInflection
	return c;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],1088:[function(require,module,exports){
'use strict';

/**
* Triangular distribution skewness.
*
* @module @stdlib/math/base/dist/triangular/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/triangular/skewness' );
*
* var v = skewness( 0.0, 1.0, 0.5 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0, 5.0 );
* // returns ~0.532
*
* v = skewness( 2.0, 8.0, 7.0 );
* // returns ~-0.505
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1089}],1089:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );


// MAIN //

/**
* Returns the skewness of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0, 0.5 );
* // returns 0.0
* @example
* var v = skewness( 4.0, 12.0, 9.0 );
* // returns ~-0.236
* @example
* var v = skewness( -4.0, 4.0, -1.0 );
* // returns ~0.236
* @example
* var v = skewness( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = skewness( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = skewness( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = skewness( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = skewness( 0.0, 4.0, NaN );
* // returns NaN
*/
function skewness( a, b, c ) {
	var out;
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	out = SQRT2 * ( a + b - (2*c) ) * ( (2*a) - b - c ) * ( a - (2*b) + c );
	out /= 5.0 * pow( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c), 1.5 );
	return out;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-sqrt-two":1421}],1090:[function(require,module,exports){
'use strict';

/**
* Triangular distribution standard deviation.
*
* @module @stdlib/math/base/dist/triangular/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/triangular/stdev' );
*
* var v = stdev( 0.0, 1.0, 0.5 );
* // returns ~0.205
*
* v = stdev( 4.0, 12.0, 5.0 );
* // returns ~1.78
*
* v = stdev( 2.0, 8.0, 7.0 );
* // returns ~1.312
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1091}],1091:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0, 0.5 );
* // returns ~0.205
* @example
* var v = stdev( 4.0, 12.0, 9.0 );
* // returns ~1.65
* @example
* var v = stdev( -4.0, 4.0, -1.0 );
* // returns ~1.65
* @example
* var v = stdev( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = stdev( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = stdev( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = stdev( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = stdev( 0.0, 4.0, NaN );
* // returns NaN
*/
function stdev( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return sqrt( ( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c) ) / 18.0 );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343}],1092:[function(require,module,exports){
'use strict';

/**
* Triangular distribution variance.
*
* @module @stdlib/math/base/dist/triangular/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/triangular/variance' );
*
* var v = variance( 0.0, 1.0, 0.5 );
* // returns ~0.042
*
* v = variance( 4.0, 12.0, 5.0 );
* // returns ~3.167
*
* v = variance( 2.0, 8.0, 7.0 );
* // returns ~1.722
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1093}],1093:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.0, 1.0, 0.5 );
* // returns ~0.042
* @example
* var v = variance( 4.0, 12.0, 9.0 );
* // returns ~2.722
* @example
* var v = variance( -4.0, 4.0, -1.0 );
* // returns ~2.722
* @example
* var v = variance( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = variance( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = variance( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = variance( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = variance( 0.0, 4.0, NaN );
* // returns NaN
*/
function variance( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return ( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c) ) / 18.0;
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43}],1094:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace truncatedNormal
*/
var truncatedNormal = {};

/**
* @name pdf
* @memberof truncatedNormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/truncated-normal/pdf}
*/
setReadOnly( truncatedNormal, 'pdf', require( '@stdlib/math/base/dist/truncated-normal/pdf' ) );


// EXPORTS //

module.exports = truncatedNormal;

},{"@stdlib/math/base/dist/truncated-normal/pdf":1096,"@stdlib/utils/define-read-only-property":1425}],1095:[function(require,module,exports){
'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var Phi = require( '@stdlib/math/base/dist/normal/cdf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, mean  `mu` and standard deviation `sigma`.
*
* @param {Number} a - minimum support
* @param {Number} b - maximum support
* @param {Number} mu - location parameter
* @param {Number} sigma - scale parameter
* @returns {Function} PDF
*/
function factory( a, b, mu, sigma ) {
	var s2 = pow( sigma, 2 );
	var A = 1 / ( sqrt( 2 * s2 * PI ) );
	var B = -1 / ( 2 * s2 );
	/* jshint newcap: false */
	var C = Phi( (b-mu)/sigma ) - Phi( (a-mu)/sigma );

	/**
	* Evaluates the probability density function (PDF) for a truncated normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*/
	return function pdf( x ) {
		if ( x < a || x > b ) {
			return 0.0;
		}
		return A * exp( B * pow( x - mu, 2.0 ) ) / C;
	}; // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/normal/cdf":886,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-pinf":1414}],1096:[function(require,module,exports){
'use strict';

/**
* Truncated normal distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/truncated-normal/pdf
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1095,"./pdf.js":1097,"@stdlib/utils/define-read-only-property":1425}],1097:[function(require,module,exports){
'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var Phi = require( '@stdlib/math/base/dist/normal/cdf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {Number} x - input value
* @param {Number} a - minimum support
* @param {Number} b - maximum support
* @param {Number} mu - location parameter
* @param {Number} sigma - scale parameter
* @returns {Number} evaluated PDF
*/
function pdf( x, a, b, mu, sigma ) {
	if ( x < a || x > b ) {
		return 0;
	}
	var s2 = pow( sigma, 2 );
	var A = 1 / ( sqrt( 2 * s2 * PI ) );
	var B = -1 / ( 2 * s2 );

	/* jshint newcap: false */
	var C = Phi( (b-mu)/sigma ) - Phi( (a-mu)/sigma );

	return A * exp( B * pow( x - mu, 2 ) ) / C;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/normal/cdf":886,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-pinf":1414}],1098:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns 0.9
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns 0.25
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function cdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	if ( x >= b ) {
		return 1.0;
	}
	return ( x - a ) / ( b - a );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43}],1099:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns 0.05
*
* y = cdf( 8.0 );
* // returns 0.8
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		if ( x >= b ) {
			return 1.0;
		}
		return ( x - a ) / ( b - a );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1101,"@stdlib/math/base/assert/is-nan":43}],1100:[function(require,module,exports){
'use strict';

/**
* Uniform distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/uniform/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/uniform/cdf' );
*
* var y = cdf( 5.0, 0.0, 4.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 0.0, 10.0 );
* y = mycdf( 0.5 );
* // returns 0.05
*
* y = mycdf( 8.0 );
* // returns 0.8
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1098,"./factory.js":1099,"@stdlib/utils/define-read-only-property":1425}],1101:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid uniform distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 1.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],1102:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dist/uniform/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/uniform/kurtosis' );
var mean = require( '@stdlib/math/base/dist/uniform/mean' );
var median = require( '@stdlib/math/base/dist/uniform/median' );
var skewness = require( '@stdlib/math/base/dist/uniform/skewness' );
var stdev = require( '@stdlib/math/base/dist/uniform/stdev' );
var variance = require( '@stdlib/math/base/dist/uniform/variance' );
var cdf = require( '@stdlib/math/base/dist/uniform/cdf' );
var logcdf = require( '@stdlib/math/base/dist/uniform/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/uniform/logpdf' );
var mgf = require( '@stdlib/math/base/dist/uniform/mgf' );
var pdf = require( '@stdlib/math/base/dist/uniform/pdf' );
var quantile = require( '@stdlib/math/base/dist/uniform/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function uniformCDF( x ) {
	return cdf( x, this.a, this.b );
} // end FUNCTION uniformCDF()

/**
* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated logCDF
*/
function uniformLogCDF( x ) {
	return logcdf( x, this.a, this.b );
} // end FUNCTION uniformLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function uniformLogPDF( x ) {
	return logpdf( x, this.a, this.b );
} // end FUNCTION uniformLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function uniformMGF( t ) {
	return mgf( t, this.a, this.b );
} // end FUNCTION  uniformMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function uniformPDF( x ) {
	return pdf( x, this.a, this.b );
} // end FUNCTION uniformPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function uniformQuantile( p ) {
	return quantile( p, this.a, this.b );
} // end FUNCTION uniformQuantile()


// MAIN //

/**
* Uniform distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {RangeError} `a` must be smaller than `b`
* @returns {Uniform} distribution instance
*
* @example
* var uniform = new Uniform( 0.0, 1.0 );
*
* var y = uniform.cdf( 0.8 );
* // returns ~0.705
*
* var mu = uniform.mean;
* // returns 0.5
*/
function Uniform() {
	var a;
	var b;
	if ( !(this instanceof Uniform) ) {
		if ( arguments.length === 0 ) {
			return new Uniform();
		}
		return new Uniform( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( a >= b ) {
			throw new RangeError( 'invalid input arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value >= b ) {
				throw new RangeError( 'invalid value. Must be smaller than `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a >= value ) {
				throw new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
} // end FUNCTION Uniform()

/**
* Uniform distribution differential entropy.
*
* @memberof Uniform.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.entropy;
* // returns ~1.838
*/
Object.defineProperty( Uniform.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.a, this.b );
	}
});

/**
* Uniform distribution excess kurtosis.
*
* @memberof Uniform.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.kurtosis;
* // returns -1.5
*/
Object.defineProperty( Uniform.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b );
	}
});

/**
* Uniform distribution expected value.
*
* @memberof Uniform.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.mean;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b );
	}
});

/**
* Uniform distribution median.
*
* @memberof Uniform.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.median;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.a, this.b );
	}
});

/**
* Uniform distribution skewness.
*
* @memberof Uniform.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.skewness;
* // returns 0.0
*/
Object.defineProperty( Uniform.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b );
	}
});

/**
* Uniform distribution standard deviation.
*
* @memberof Uniform.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.stdev;
* // returns ~2.828
*/
Object.defineProperty( Uniform.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b );
	}
});

/**
* Uniform distribution variance.
*
* @memberof Uniform.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.variance;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Uniform.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.cdf( 3.0 );
* // returns ~0.5
*/
setReadOnly( Uniform.prototype, 'cdf', uniformCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Uniform.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.logcdf( 2.5 );
* // returns ~-0.922
*/
setReadOnly( Uniform.prototype, 'logcdf', uniformLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Uniform.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.logpdf( 2.5 );
* // returns ~-0.922
*/
setReadOnly( Uniform.prototype, 'logpdf', uniformLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Uniform.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.mgf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Uniform.prototype, 'mgf', uniformMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Uniform.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.pdf( 2.4 );
* // returns ~0.398
*/
setReadOnly( Uniform.prototype, 'pdf', uniformPDF );

/**
* Evaluates the quantile function.
*
* @memberof Uniform.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Uniform.prototype, 'quantile', uniformQuantile );


// EXPORTS //

module.exports = Uniform;

},{"@stdlib/assert/is-number":20,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/uniform/cdf":1100,"@stdlib/math/base/dist/uniform/entropy":1105,"@stdlib/math/base/dist/uniform/kurtosis":1106,"@stdlib/math/base/dist/uniform/logcdf":1110,"@stdlib/math/base/dist/uniform/logpdf":1114,"@stdlib/math/base/dist/uniform/mean":1117,"@stdlib/math/base/dist/uniform/median":1119,"@stdlib/math/base/dist/uniform/mgf":1122,"@stdlib/math/base/dist/uniform/pdf":1126,"@stdlib/math/base/dist/uniform/quantile":1130,"@stdlib/math/base/dist/uniform/skewness":1133,"@stdlib/math/base/dist/uniform/stdev":1135,"@stdlib/math/base/dist/uniform/variance":1137,"@stdlib/utils/define-read-only-property":1425}],1103:[function(require,module,exports){
'use strict';

/**
* Uniform distribution constructor.
*
* @module @stdlib/math/base/dist/uniform/ctor
*
* @example
* var Uniform = require( '@stdlib/math/base/dist/uniform/ctor' );
*
* var uniform = new Uniform( 0.0, 1.0 );
*
* var y = uniform.cdf( 0.8 );
* // returns 0.8
*
* var mu = uniform.mean;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1102}],1104:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} differential entropy
*
* @example
* var v = entropy( 0.0, 1.0 );
* // returns 0.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.079
* @example
* var v = entropy( -4.0, 4.0 );
* // returns ~2.079
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return ln( b-a );
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/special/ln":1300}],1105:[function(require,module,exports){
'use strict';

/**
* Uniform distribution differential entropy.
*
* @module @stdlib/math/base/dist/uniform/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/uniform/entropy' );
*
* var v = entropy( 0.0, 1.0 );
* // returns 0.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.079
*
* v = entropy( 2.0, 8.0 );
* // returns ~1.792
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1104}],1106:[function(require,module,exports){
'use strict';

/**
* Uniform distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/uniform/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/uniform/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.2
*
* v = kurtosis( 4.0, 12.0 );
* // returns -1.2
*
* v = kurtosis( 2.0, 8.0 );
* // returns -1.2
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1107}],1107:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.2
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns -1.2
* @example
* var v = kurtosis( -4.0, 4.0 );
* // returns -1.2
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return -1.2;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43}],1108:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace uniform
*/
var uniform = {};

/**
* @name cdf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/cdf}
*/
setReadOnly( uniform, 'cdf', require( '@stdlib/math/base/dist/uniform/cdf' ) );

/**
* @name entropy
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/entropy}
*/
setReadOnly( uniform, 'entropy', require( '@stdlib/math/base/dist/uniform/entropy' ) );

/**
* @name kurtosis
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/kurtosis}
*/
setReadOnly( uniform, 'kurtosis', require( '@stdlib/math/base/dist/uniform/kurtosis' ) );

/**
* @name logcdf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/logcdf}
*/
setReadOnly( uniform, 'logcdf', require( '@stdlib/math/base/dist/uniform/logcdf' ) );

/**
* @name logpdf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/logpdf}
*/
setReadOnly( uniform, 'logpdf', require( '@stdlib/math/base/dist/uniform/logpdf' ) );

/**
* @name mean
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/mean}
*/
setReadOnly( uniform, 'mean', require( '@stdlib/math/base/dist/uniform/mean' ) );

/**
* @name median
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/median}
*/
setReadOnly( uniform, 'median', require( '@stdlib/math/base/dist/uniform/median' ) );

/**
* @name mgf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/mgf}
*/
setReadOnly( uniform, 'mgf', require( '@stdlib/math/base/dist/uniform/mgf' ) );

/**
* @name pdf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/pdf}
*/
setReadOnly( uniform, 'pdf', require( '@stdlib/math/base/dist/uniform/pdf' ) );

/**
* @name quantile
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/quantile}
*/
setReadOnly( uniform, 'quantile', require( '@stdlib/math/base/dist/uniform/quantile' ) );

/**
* @name skewness
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/skewness}
*/
setReadOnly( uniform, 'skewness', require( '@stdlib/math/base/dist/uniform/skewness' ) );

/**
* @name stdev
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/stdev}
*/
setReadOnly( uniform, 'stdev', require( '@stdlib/math/base/dist/uniform/stdev' ) );

/**
* @name Uniform
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/ctor}
*/
setReadOnly( uniform, 'Uniform', require( '@stdlib/math/base/dist/uniform/ctor' ) );

/**
* @name variance
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/uniform/variance}
*/
setReadOnly( uniform, 'variance', require( '@stdlib/math/base/dist/uniform/variance' ) );


// EXPORTS //

module.exports = uniform;

},{"@stdlib/math/base/dist/uniform/cdf":1100,"@stdlib/math/base/dist/uniform/ctor":1103,"@stdlib/math/base/dist/uniform/entropy":1105,"@stdlib/math/base/dist/uniform/kurtosis":1106,"@stdlib/math/base/dist/uniform/logcdf":1110,"@stdlib/math/base/dist/uniform/logpdf":1114,"@stdlib/math/base/dist/uniform/mean":1117,"@stdlib/math/base/dist/uniform/median":1119,"@stdlib/math/base/dist/uniform/mgf":1122,"@stdlib/math/base/dist/uniform/pdf":1126,"@stdlib/math/base/dist/uniform/quantile":1130,"@stdlib/math/base/dist/uniform/skewness":1133,"@stdlib/math/base/dist/uniform/stdev":1135,"@stdlib/math/base/dist/uniform/variance":1137,"@stdlib/utils/define-read-only-property":1425}],1109:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 10.0 );
* var y = logcdf( 0.5 );
* // returns ~-2.996
*
* y = logcdf( 8.0 );
* // returns ~-0.223
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return NINF;
		}
		if ( x >= b ) {
			return 0.0;
		}
		return ln( ( x - a ) / ( b - a ) );
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1112,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],1110:[function(require,module,exports){
'use strict';

/**
* Uniform distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/uniform/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/uniform/logcdf' );
*
* var y = logcdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* var mylogcdf = logcdf.factory( 0.0, 10.0 );
* y = mylogcdf( 0.5 );
* // returns ~-2.996
*
* y = mylogcdf( 8.0 );
* // returns ~-0.223
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":1109,"./logcdf.js":1111,"@stdlib/utils/define-read-only-property":1425}],1111:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 9.0, 0.0, 10.0 );
* // returns ~-0.105
* @example
* var y = logcdf( 0.5, 0.0, 2.0 );
* // returns ~-1.386
* @example
* var y = logcdf( +Infinity, 2.0, 4.0 );
* // returns 0.0
* @example
* var y = logcdf( -Infinity, 2.0, 4.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = logcdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function logcdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return NINF;
	}
	if ( x >= b ) {
		return 0.0;
	}
	return ln( ( x - a ) / ( b - a ) );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],1112:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an invalid uniform distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 1.0 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],1113:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 10.0 );
* var y = logpdf( 2.0 );
* // returns ~-2.303
*
* y = logpdf( 12.0 );
* // returns Number.NEGATIVE_INFINITY
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return NINF;
		}
		return -ln( b - a );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1116,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],1114:[function(require,module,exports){
'use strict';

/**
* Uniform distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/uniform/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/uniform/logpdf' );
*
* var y = logpdf( 3.0, 2.0, 6.0 );
* // returns ~-1.386
*
* var mylogPDF = logpdf.factory( 6.0, 7.0 );
* y = mylogPDF( 7.0 );
* // returns 0.0
*
* y = mylogPDF( 5.0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1113,"./logpdf.js":1115,"@stdlib/utils/define-read-only-property":1425}],1115:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 4.0 );
* // returns ~-1.386
* @example
* var y = logpdf( 5.0, 0.0, 4.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( 0.25, 0.0, 1.0 );
* // returns 0.0
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = logpdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function logpdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return NINF;
	}
	return -ln( b - a );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],1116:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid uniform distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 1.0 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],1117:[function(require,module,exports){
'use strict';

/**
* Uniform distribution expected value.
*
* @module @stdlib/math/base/dist/uniform/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/uniform/mean' );
*
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 8.0
*
* v = mean( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1118}],1118:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0 );
* // returns 0.5
* @example
* var v = mean( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = mean( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{}],1119:[function(require,module,exports){
'use strict';

/**
* Uniform distribution median.
*
* @module @stdlib/math/base/dist/uniform/median
*
* @example
* var median = require( '@stdlib/math/base/dist/uniform/median' );
*
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns 8.0
*
* v = median( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1120}],1120:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the median of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0 );
* // returns 0.5
* @example
* var v = median( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = median( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{}],1121:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} MGF
*
* @example
* var mgf = factory( 6.0, 7.0 );
* var y = mgf( 0.1 );
* // returns ~1.916
*
* y = mymgf( 1.1 );
* // returns ~1339.321
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a uniform distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var ret;
		if ( isnan( t ) ) {
			return NaN;
		}
		if ( t === 0.0 ) {
			return 1.0;
		}
		// Case: t not equal to zero
		ret = exp( t * b ) - exp( t * a );
		ret /= t * ( b - a );
		return ret;
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1124,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],1122:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) of a uniform distribution.
*
* @module @stdlib/math/base/dist/uniform/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/uniform/mgf' );
*
* var y = mgf( 2.0, 0.0, 4.0 );
* // returns ~372.495
*
* y = mgf( -0.2, 0.0, 4.0 );
* // returns ~0.688
*
* y = mgf( 2.0, 0.0, 1.0 );
* // returns ~3.195
*
* var mymgf = mgf.factory( 6.0, 7.0 );
* y = mymgf( 0.1 );
* // returns ~1.916
*
* y = mymgf( 1.1 );
* // returns ~1339.321
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1121,"./mgf.js":1123,"@stdlib/utils/define-read-only-property":1425}],1123:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0.0, 4.0 );
* // returns ~372.495
* @example
* var y = mgf( -0.2, 0.0, 4.0 );
* // returns ~0.688
* @example
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~3.195
* @example
* var y = mgf( 0.5, 3.0, 2.0 );
* // returns NaN
* @example
* var y = mgf( 0.5, 3.0, 3.0 );
* // returns NaN
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*/
function mgf( t, a, b ) {
	var ret;
	if (
		isnan( t ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( t === 0.0 ) {
		return 1.0;
	}
	// Case: t not equal to zero
	ret = exp( t * b ) - exp( t * a );
	ret /= t * ( b - a );
	return ret;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257}],1124:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid uniform distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],1125:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0 );
* var y = pdf( 2.0 );
* // returns 0.1
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return 0.0;
		}
		return 1.0 / ( b - a );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1127,"@stdlib/math/base/assert/is-nan":43}],1126:[function(require,module,exports){
'use strict';

/**
* Uniform distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/uniform/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/uniform/pdf' );
*
* var y = pdf( 3.0, 2.0, 6.0 );
* // returns 0.25
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 7.0 );
* // returns 1.0
*
* y = myPDF( 5.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1125,"./pdf.js":1128,"@stdlib/utils/define-read-only-property":1425}],1127:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid uniform distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 1.0 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],1128:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 4.0 );
* // returns 0.25
* @example
* var y = pdf( 5.0, 0.0, 4.0 );
* // returns 0.0
* @example
* var y = pdf( 0.25, 0.0, 1.0 );
* // returns 1.0
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = pdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function pdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	return 1.0 / ( b - a );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43}],1129:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a uniform distribution with minimum support `a` an maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0 );
* var y = quantile( 0.4 );
* // returns 2.8
*
* y = quantile( 0.8 );
* // returns 3.6
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a uniform distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + ( p * ( b - a ) );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1131,"@stdlib/math/base/assert/is-nan":43}],1130:[function(require,module,exports){
'use strict';

/**
* Uniform distribution quantile function.
*
* @module @stdlib/math/base/dist/uniform/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/uniform/quantile' );
*
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns 5.0
*
* var myQuantile = quantile.factory( 0.0, 4.0 );
* y = myQuantile( 0.8 );
* // returns 3.2
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":1129,"./quantile.js":1132,"@stdlib/utils/define-read-only-property":1425}],1131:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid uniform distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],1132:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns 0.8
* @example
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns 5.0
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, 2.0, 1.0 );
* // returns NaN
*/
function quantile( p, a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return a + ( p * ( b - a ) );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43}],1133:[function(require,module,exports){
'use strict';

/**
* Uniform distribution skewness.
*
* @module @stdlib/math/base/dist/uniform/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/uniform/skewness' );
*
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* v = skewness( 2.0, 8.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1134}],1134:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 0.0
* @example
* var v = skewness( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return 0.0;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43}],1135:[function(require,module,exports){
'use strict';

/**
* Uniform distribution standard deviation.
*
* @module @stdlib/math/base/dist/uniform/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/uniform/stdev' );
*
* var v = stdev( 0.0, 1.0 );
* // returns ~0.288
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.309
*
* v = stdev( 2.0, 8.0 );
* // returns ~1.732
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1136}],1136:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// VARIABLES //

var SQRT1O12 = sqrt( 1.0/12.0 );


// MAIN //

/**
* Returns the standard deviation of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0 );
* // returns ~0.288
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.309
* @example
* var v = stdev( -4.0, 4.0 );
* // returns ~2.309
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return SQRT1O12 * ( b-a );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1343}],1137:[function(require,module,exports){
'use strict';

/**
* Uniform distribution variance.
*
* @module @stdlib/math/base/dist/uniform/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/uniform/variance' );
*
* var v = variance( 0.0, 1.0 );
* // returns ~0.083
*
* v = variance( 4.0, 12.0 );
* // returns ~5.333
*
* v = variance( 2.0, 8.0 );
* // returns 3.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1138}],1138:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.0, 1.0 );
* // returns ~0.083
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~5.333
* @example
* var v = variance( -4.0, 4.0 );
* // returns ~5.333
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return (1.0/12.0) * pow( b-a, 2.0 );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/special/pow":1311}],1139:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, k, lambda ) {
	if (
		isnan( x ) ||
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	return -expm1( -pow( x / lambda, k ) );
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/pow":1311}],1140:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var pow = require( '@stdlib/math/base/special/pow' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2.0, 10.0 );
* var y = cdf( 12.0 );
* // returns ~0.763
*
* y = cdf( 8.0 );
* // returns ~0.473
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return nan;
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return -expm1( -pow( x / lambda, k ) );
	} // end FUNCTION cdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1142,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/pow":1311}],1141:[function(require,module,exports){
'use strict';

/**
* Weibull distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/weibull/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dist/weibull/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
*
* var myCDF = factory( 2.0, 10.0 );
* y = myCDF( 12.0 );
* // returns ~0.763
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1139,"./factory.js":1140,"@stdlib/utils/define-read-only-property":1425}],1142:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for an invalid Weibull distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = cdf( 2.0 );
* // returns NaN
*/
function cdf() {
	return NaN;
} // end FUNCTION cdf()


// EXPORTS //

module.exports = cdf;

},{}],1143:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dist/weibull/entropy' );
var kurtosis = require( '@stdlib/math/base/dist/weibull/kurtosis' );
var mean = require( '@stdlib/math/base/dist/weibull/mean' );
var median = require( '@stdlib/math/base/dist/weibull/median' );
var mode = require( '@stdlib/math/base/dist/weibull/mode' );
var skewness = require( '@stdlib/math/base/dist/weibull/skewness' );
var stdev = require( '@stdlib/math/base/dist/weibull/stdev' );
var variance = require( '@stdlib/math/base/dist/weibull/variance' );
var cdf = require( '@stdlib/math/base/dist/weibull/cdf' );
var logcdf = require( '@stdlib/math/base/dist/weibull/logcdf' );
var logpdf = require( '@stdlib/math/base/dist/weibull/logpdf' );
var mgf = require( '@stdlib/math/base/dist/weibull/mgf' );
var pdf = require( '@stdlib/math/base/dist/weibull/pdf' );
var quantile = require( '@stdlib/math/base/dist/weibull/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function weibullCDF( x ) {
	return cdf( x, this.k, this.lambda );
} // end FUNCTION weibullCDF()

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function weibullLogCDF( x ) {
	return logcdf( x, this.k, this.lambda );
} // end FUNCTION weibullLogCDF()

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function weibullLogPDF( x ) {
	return logpdf( x, this.k, this.lambda );
} // end FUNCTION weibullLogPDF()

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function weibullMGF( t ) {
	return mgf( t, this.k, this.lambda );
} // end FUNCTION weibullMGF()

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function weibullPDF( x ) {
	return pdf( x, this.k, this.lambda );
} // end FUNCTION weibullPDF()

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function weibullQuantile( p ) {
	return quantile( p, this.k, this.lambda );
} // end FUNCTION weibullQuantile()


// MAIN //

/**
* Weibull distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - shape parameter
* @param {PositiveNumber} [lambda=1.0] - scale parameter
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @returns {Weibull} distribution instance
*
* @example
* var weibull = new Weibull( 1.0, 1.0 );
*
* var y = weibull.cdf( 0.8 );
* // returns ~0.551
*
* var mode = weibull.mode;
* // returns 0.0
*/
function Weibull() {
	var k;
	var lambda;
	if ( !(this instanceof Weibull) ) {
		if ( arguments.length === 0 ) {
			return new Weibull();
		}
		return new Weibull( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `k` must be a positive number. Value: `' + k + '`' );
		}
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		k = 1.0;
		lambda = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
} // end FUNCTION Weibull()

/**
* Weibull distribution differential entropy.
*
* @memberof Weibull.prototype
* @name entropy
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.entropy;
* // returns ~2.531
*/
Object.defineProperty( Weibull.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k, this.lambda );
	}
});

/**
* Weibull distribution excess kurtosis.
*
* @memberof Weibull.prototype
* @name kurtosis
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.kurtosis;
* // returns ~-0.252
*/
Object.defineProperty( Weibull.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k, this.lambda );
	}
});

/**
* Weibull distribution expected value.
*
* @memberof Weibull.prototype
* @name mean
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.mean;
* // returns ~10.877
*/
Object.defineProperty( Weibull.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k, this.lambda );
	}
});

/**
* Weibull distribution median.
*
* @memberof Weibull.prototype
* @name median
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.median;
* // returns ~10.949
*/
Object.defineProperty( Weibull.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.k, this.lambda );
	}
});

/**
* Weibull distribution mode.
*
* @memberof Weibull.prototype
* @name mode
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.mode;
* // returns ~11.167
*/
Object.defineProperty( Weibull.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k, this.lambda );
	}
});

/**
* Weibull distribution skewness.
*
* @memberof Weibull.prototype
* @name skewness
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.skewness;
* // returns ~-0.087
*/
Object.defineProperty( Weibull.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k, this.lambda );
	}
});

/**
* Weibull distribution standard deviation.
*
* @memberof Weibull.prototype
* @name stdev
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.stdev;
* // returns ~3.051
*/
Object.defineProperty( Weibull.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k, this.lambda );
	}
});

/**
* Weibull distribution variance.
*
* @memberof Weibull.prototype
* @name variance
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.variance;
* // returns ~9.311
*/
Object.defineProperty( Weibull.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k, this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @memberof Weibull.prototype
* @name cdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.cdf( 0.5 );
* // returns ~0.016
*/
setReadOnly( Weibull.prototype, 'cdf', weibullCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @memberof Weibull.prototype
* @name logcdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.logcdf( 0.8 );
* // returns ~-3.239
*/
setReadOnly( Weibull.prototype, 'logcdf', weibullLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @memberof Weibull.prototype
* @name logpdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.logpdf( 0.8 );
* // returns ~-2.343
*/
setReadOnly( Weibull.prototype, 'logpdf', weibullLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @memberof Weibull.prototype
* @name mgf
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.mgf( 0.5 );
* // returns ~9.878
*/
setReadOnly( Weibull.prototype, 'mgf', weibullMGF );

/**
* Evaluates the probability density function (PDF).
*
* @memberof Weibull.prototype
* @name pdf
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.pdf( 2.0 );
* // returns ~0.195
*/
setReadOnly( Weibull.prototype, 'pdf', weibullPDF );

/**
* Evaluates the quantile function.
*
* @memberof Weibull.prototype
* @name quantile
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.quantile( 0.5 );
* // returns ~3.33
*/
setReadOnly( Weibull.prototype, 'quantile', weibullQuantile );


// EXPORTS //

module.exports = Weibull;

},{"@stdlib/assert/is-positive-number":30,"@stdlib/math/base/dist/weibull/cdf":1141,"@stdlib/math/base/dist/weibull/entropy":1146,"@stdlib/math/base/dist/weibull/kurtosis":1147,"@stdlib/math/base/dist/weibull/logcdf":1151,"@stdlib/math/base/dist/weibull/logpdf":1155,"@stdlib/math/base/dist/weibull/mean":1158,"@stdlib/math/base/dist/weibull/median":1160,"@stdlib/math/base/dist/weibull/mgf":1163,"@stdlib/math/base/dist/weibull/mode":1166,"@stdlib/math/base/dist/weibull/pdf":1169,"@stdlib/math/base/dist/weibull/quantile":1173,"@stdlib/math/base/dist/weibull/skewness":1176,"@stdlib/math/base/dist/weibull/stdev":1178,"@stdlib/math/base/dist/weibull/variance":1180,"@stdlib/utils/define-read-only-property":1425}],1144:[function(require,module,exports){
'use strict';

/**
* Weibull distribution constructor.
*
* @module @stdlib/math/base/dist/weibull/ctor
*
* @example
* var Weibull = require( '@stdlib/math/base/dist/weibull/ctor' );
*
* var weibull = new Weibull( 1.0, 1.0 );
*
* var y = weibull.cdf( 0.8 );
* // returns ~0.551
*
* var mode = weibull.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1143}],1145:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/math/constants/float64-eulergamma' );


// MAIN //

/**
* Returns the differential entropy of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.532
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~0.119
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( GAMMA * ( 1.0 - (1.0/k) ) ) + ln( lambda/k ) + 1.0;
} // end FUNCTION entropy()


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-eulergamma":1393}],1146:[function(require,module,exports){
'use strict';

/**
* Weibull distribution differential entropy.
*
* @module @stdlib/math/base/dist/weibull/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dist/weibull/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.532
*
* v = entropy( 8.0, 2.0 );
* // returns ~0.119
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1145}],1147:[function(require,module,exports){
'use strict';

/**
* Weibull distribution excess kurtosis.
*
* @module @stdlib/math/base/dist/weibull/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dist/weibull/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~-0.252
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~0.328
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1148}],1148:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the excess kurtosis of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~-0.252
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~0.328
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( k, lambda ) {
	var out;
	var g4;
	var g3;
	var g2;
	var g1;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	g1 = gamma( 1.0 + (1.0/k) );
	g2 = gamma( 1.0 + (2.0/k) );
	g3 = gamma( 1.0 + (3.0/k) );
	g4 = gamma( 1.0 + (4.0/k) );
	out = (-6.0*pow(g1, 4.0)) + (12.0*g1*g1*g2) - (3.0*g2*g2)- (4.0*g1*g3) + g4;
	out /= pow( g2 - (g1*g1), 2.0 );
	return out;
} // end FUNCTION kurtosis()


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/pow":1311}],1149:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace weibull
*/
var weibull = {};

/**
* @name cdf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/cdf}
*/
setReadOnly( weibull, 'cdf', require( '@stdlib/math/base/dist/weibull/cdf' ) );

/**
* @name entropy
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/entropy}
*/
setReadOnly( weibull, 'entropy', require( '@stdlib/math/base/dist/weibull/entropy' ) );

/**
* @name kurtosis
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/kurtosis}
*/
setReadOnly( weibull, 'kurtosis', require( '@stdlib/math/base/dist/weibull/kurtosis' ) );

/**
* @name logcdf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/logcdf}
*/
setReadOnly( weibull, 'logcdf', require( '@stdlib/math/base/dist/weibull/logcdf' ) );

/**
* @name logpdf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/logpdf}
*/
setReadOnly( weibull, 'logpdf', require( '@stdlib/math/base/dist/weibull/logpdf' ) );

/**
* @name mean
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/mean}
*/
setReadOnly( weibull, 'mean', require( '@stdlib/math/base/dist/weibull/mean' ) );

/**
* @name median
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/median}
*/
setReadOnly( weibull, 'median', require( '@stdlib/math/base/dist/weibull/median' ) );

/**
* @name mgf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/mgf}
*/
setReadOnly( weibull, 'mgf', require( '@stdlib/math/base/dist/weibull/mgf' ) );

/**
* @name mode
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/mode}
*/
setReadOnly( weibull, 'mode', require( '@stdlib/math/base/dist/weibull/mode' ) );

/**
* @name pdf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/pdf}
*/
setReadOnly( weibull, 'pdf', require( '@stdlib/math/base/dist/weibull/pdf' ) );

/**
* @name quantile
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/quantile}
*/
setReadOnly( weibull, 'quantile', require( '@stdlib/math/base/dist/weibull/quantile' ) );

/**
* @name skewness
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/skewness}
*/
setReadOnly( weibull, 'skewness', require( '@stdlib/math/base/dist/weibull/skewness' ) );

/**
* @name stdev
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/stdev}
*/
setReadOnly( weibull, 'stdev', require( '@stdlib/math/base/dist/weibull/stdev' ) );

/**
* @name variance
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/variance}
*/
setReadOnly( weibull, 'variance', require( '@stdlib/math/base/dist/weibull/variance' ) );

/**
* @name Weibull
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dist/weibull/ctor}
*/
setReadOnly( weibull, 'Weibull', require( '@stdlib/math/base/dist/weibull/ctor' ) );


// EXPORTS //

module.exports = weibull;

},{"@stdlib/math/base/dist/weibull/cdf":1141,"@stdlib/math/base/dist/weibull/ctor":1144,"@stdlib/math/base/dist/weibull/entropy":1146,"@stdlib/math/base/dist/weibull/kurtosis":1147,"@stdlib/math/base/dist/weibull/logcdf":1151,"@stdlib/math/base/dist/weibull/logpdf":1155,"@stdlib/math/base/dist/weibull/mean":1158,"@stdlib/math/base/dist/weibull/median":1160,"@stdlib/math/base/dist/weibull/mgf":1163,"@stdlib/math/base/dist/weibull/mode":1166,"@stdlib/math/base/dist/weibull/pdf":1169,"@stdlib/math/base/dist/weibull/quantile":1173,"@stdlib/math/base/dist/weibull/skewness":1176,"@stdlib/math/base/dist/weibull/stdev":1178,"@stdlib/math/base/dist/weibull/variance":1180,"@stdlib/utils/define-read-only-property":1425}],1150:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/math/constants/float64-ln-half' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} logCDF
*
* @example
* var cdf = factory( 2.0, 10.0 );
* var y = cdf( 12.0 );
* // returns ~-0.27
*
* y = cdf( 8.0 );
* // returns ~-0.749
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return nan;
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var p;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return NINF;
		}
		p = -pow( x / lambda, k );
		return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
	} // end FUNCTION logcdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1153,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ln-half":1399,"@stdlib/math/constants/float64-ninf":1411}],1151:[function(require,module,exports){
'use strict';

/**
* Weibull distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dist/weibull/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dist/weibull/logcdf' );
*
* var y = logcdf( 2.0, 1.0, 1.0 );
* // returns ~-0.145
*
* var mylogcdf = logcdf.factory( 2.0, 10.0 );
* y = mylogcdf( 12.0 );
* // returns ~-0.27
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":1150,"./logcdf.js":1152,"@stdlib/utils/define-read-only-property":1425}],1152:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/math/constants/float64-ln-half' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {number} evaluated logarithm of CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~-0.145
* @example
* var y = logcdf( -1.0, 2.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logcdf( +Infinity, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = logcdf( -Infinity, 4.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logcdf( x, k, lambda ) {
	var p;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	p = -pow( x / lambda, k );
	return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ln-half":1399,"@stdlib/math/constants/float64-ninf":1411}],1153:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an invalid Weibull distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logcdf( 2.0 );
* // returns NaN
*/
function logcdf() {
	return NaN;
} // end FUNCTION logcdf()


// EXPORTS //

module.exports = logcdf;

},{}],1154:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} function to evaluate the logarithm of the probability density function
*
* @example
* var logpdf = factory( 7.0, 6.0 );
* var y = logpdf( 7.0 );
* // returns ~-1.864
*
* y = logpdf( 5.0 );
* // returns ~-1.217
*/
function factory( k, lambda ) {
	var lnkl;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return nan;
	}
	lnkl = ln( k / lambda );
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var xol;
		if ( x < 0.0 ) {
			return NINF;
		}
		if ( x === PINF || x === NINF ) {
			return NINF;
		}
		if ( x === 0.0 ) {
			return ( k === 1.0 ) ? ln( k / lambda ) : NINF;
		}
		xol = x / lambda;
		return lnkl + ( ( k - 1.0 ) * ln( xol ) ) - pow( xol, k );
	} // end FUNCTION logpdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1157,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1155:[function(require,module,exports){
'use strict';

/**
* Weibull distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dist/weibull/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dist/weibull/logpdf' );
*
* var y = logpdf( 2.0, 1.0, 0.5 );
* // returns ~-3.297
*
* var mylogpdf = logpdf.factory( 7.0, 6.0 );
* y = mylogpdf( 7.0 );
* // returns ~-1.864
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1154,"./logpdf.js":1156,"@stdlib/utils/define-read-only-property":1425}],1156:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Weibull distribution with shape parameter `k` and scale parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 1.0, 0.5 );
* // returns ~-3.297
* @example
* var y = logpdf( 0.1, 1.0, 1.0 );
* // returns ~-0.1
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns Number.NEGATIVE_INFINITY
* @example
* var y = logpdf( NaN, 0.6, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, k, lambda ) {
	var xol;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	if ( x === PINF || x === NINF ) {
		return NINF;
	}
	if ( x === 0.0 ) {
		return ( k === 1.0 ) ? ln( k/lambda ): NINF;
	}
	xol = x / lambda;
	return ln( k / lambda ) + ( ( k - 1.0 ) * ln( xol ) ) - pow( xol, k );
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1157:[function(require,module,exports){
'use strict';

/**
* Evaluates the logarithm of the probability density function (PDF) for an invalid Weibull distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = logpdf( 3.14 );
* // returns NaN
*/
function logpdf() {
	return NaN;
} // end FUNCTION logpdf()


// EXPORTS //

module.exports = logpdf;

},{}],1158:[function(require,module,exports){
'use strict';

/**
* Weibull distribution expected value.
*
* @module @stdlib/math/base/dist/weibull/mean
*
* @example
* var mean = require( '@stdlib/math/base/dist/weibull/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~10.877
*
* v = mean( 8.0, 2.0 );
* // returns ~1.883
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1159}],1159:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );


// MAIN //

/**
* Returns the expected value of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~10.877
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~1.883
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return lambda * gamma( 1.0 + ( 1.0/k ) );
} // end FUNCTION mean()


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268}],1160:[function(require,module,exports){
'use strict';

/**
* Weibull distribution median.
*
* @module @stdlib/math/base/dist/weibull/median
*
* @example
* var median = require( '@stdlib/math/base/dist/weibull/median' );
*
* var v = median( 1.0, 1.0 );
* // returns ~0.693
*
* v = median( 4.0, 12.0 );
* // returns ~10.949
*
* v = median( 8.0, 2.0 );
* // returns ~1.91
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1161}],1161:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var LN2 = require( '@stdlib/math/constants/float64-ln-two' );


// MAIN //

/**
* Returns the median of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns ~0.693
* @example
* var v = median( 4.0, 12.0 );
* // returns ~10.949
* @example
* var v = median( 8.0, 2.0 );
* // returns ~1.91
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return lambda * pow( LN2, 1.0/k );
} // end FUNCTION median()


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ln-two":1403}],1162:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Weibull distribution with shape `k` and scale `lambda`.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 8.0, 10.0 );
*
* var y = mgf( 0.8 );
* // returns ~3150.149
*
* y = mgf( 0.08 );
* // returns ~2.137s
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return nan;
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Weibull distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var summand;
		var sum;
		var c;
		var n;

		if ( isnan( t ) ) {
			return NaN;
		}
		sum = 1.0;
		c = 1.0;
		n = 0;
		do {
			n += 1;
			c *= ( t * lambda ) / n;
			if ( c === 0.0 ) {
				summand = 0.0;
			} else {
				summand = c * gamma( 1.0 + (n / k) );
			}
			sum += summand;
		} while ( summand / sum > EPS );
		return sum;
	} // end FUNCTION mgf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1165,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/constants/float64-eps":1392}],1163:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Weibull distribution.
*
* @module @stdlib/math/base/dist/weibull/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dist/weibull/mgf' );
*
* var y = mgf( 1.0, 1.0, 0.5 );
* // returns ~2.0
*
* y = mgf( -1.0, 4.0, 4.0 );
* // returns ~0.019
*
* var myMGF = mgf.factory( 8.0, 10.0 );
*
* y = myMGF( 0.8 );
* // returns ~3150.149
*
* y = myMGF( 0.08 );
* // returns ~2.137s
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1162,"./mgf.js":1164,"@stdlib/utils/define-read-only-property":1425}],1164:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var EPS = require( '@stdlib/math/constants/float64-eps' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Weibull distribution with shape `k` and scale `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.0, 0.5 );
* // returns ~2.0
* @example
* var y = mgf( -1.0, 4.0, 4.0 );
* // returns ~0.019
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
* @example
* var y = mgf( 0.2, -1.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.2, 0.0, 0.5 );
* // returns NaN
* @example
* var y = mgf( 0.2, 0.5, -1.0 );
* // returns NaN
* @example
* var y = mgf( 0.2, 0.5, 0.0 );
* // returns NaN
*/
function mgf( t, k, lambda ) {
	var summand;
	var sum;
	var c;
	var n;

	if (
		isnan( t ) ||
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	sum = 1.0;
	c = 1.0;
	n = 0;
	do {
		n += 1;
		c *= ( t * lambda ) / n;
		if ( c === 0.0 ) {
			summand = 0.0;
		} else {
			summand = c * gamma( 1.0 + (n / k) );
		}
		sum += summand;
	} while ( summand / sum > EPS );
	return sum;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/constants/float64-eps":1392}],1165:[function(require,module,exports){
'use strict';

/**
* Evaluates the moment-generating function (MGF) for an invalid Weibull distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = mgf( 1.0 );
* // returns NaN
*/
function mgf() {
	return NaN;
} // end FUNCTION mgf()


// EXPORTS //

module.exports = mgf;

},{}],1166:[function(require,module,exports){
'use strict';

/**
* Weibull distribution mode.
*
* @module @stdlib/math/base/dist/weibull/mode
*
* @example
* var mode = require( '@stdlib/math/base/dist/weibull/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns ~11.167
*
* v = mode( 8.0, 2.0 );
* // returns ~1.967
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1167}],1167:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the mode of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~11.167
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~1.967
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( k <= 1.0 ) {
		return 0.0;
	}
	return lambda * pow( ( k-1.0 ) / k, 1.0/k );
} // end FUNCTION mode()


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/pow":1311}],1168:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 7.0, 6.0 );
* var y = pdf( 7.0 );
* // returns ~0.155
*
* y = pdf( 5.0 );
* // returns ~0.296
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return nan;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var xol;
		var z;
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF || x === NINF ) {
			return 0.0;
		}
		if ( x === 0.0 ) {
			return ( k === 1.0 ) ? k / lambda : 0.0;
		}
		xol = x / lambda;
		z = pow( xol, k - 1.0 );
		return ( k / lambda ) * z * exp( -pow( xol, k ) );
	} // end FUNCTION pdf()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1170,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1169:[function(require,module,exports){
'use strict';

/**
* Weibull distribution probability density function (PDF).
*
* @module @stdlib/math/base/dist/weibull/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dist/weibull/pdf' );
*
* var y = pdf( 2.0, 1.0, 0.5 );
* // returns ~0.037
*
* var myPDF = pdf.factory( 7.0, 6.0 );
* y = myPDF( 7.0 );
* // returns ~0.155
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1168,"./pdf.js":1171,"@stdlib/utils/define-read-only-property":1425}],1170:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for an invalid Weibull distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = pdf( 3.14 );
* // returns NaN
*/
function pdf() {
	return NaN;
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{}],1171:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Weibull distribution with shape parameter `k` and scale parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 1.0, 0.5 );
* // returns ~0.037
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.905
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = pdf( NaN, 0.6, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, k, lambda ) {
	var xol;
	var z;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === PINF || x === NINF ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return ( k === 1.0 ) ? k/lambda : 0.0;
	}
	xol = x / lambda;
	z = pow( xol, k - 1.0 );
	return ( k / lambda ) * z * exp( -pow( xol, k ) );
} // end FUNCTION pdf()


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1172:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var nan = require( './nan.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 10.0 );
* var y = quantile( 0.4 );
* // returns ~7.147
*
* y = quantile( 0.8 );
* // returns ~12.686
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return nan;
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Weibull distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return lambda * pow( -ln( 1.0 - p ), 1.0/k );
	} // end FUNCTION quantile()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./nan.js":1174,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311}],1173:[function(require,module,exports){
'use strict';

/**
* Weibull distribution quantile function.
*
* @module @stdlib/math/base/dist/weibull/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dist/weibull/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
*
* var myQuantile = quantile.factory( 2.0, 10.0 );
* y = myQuantile( 0.4 );
* // returns ~7.147
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = require( './quantile.js' );

},{"./factory.js":1172,"./quantile.js":1175,"@stdlib/utils/define-read-only-property":1425}],1174:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for an invalid Weibull distribution.
*
* @private
* @returns {number} `NaN`
*
* @example
* var y = quantile( 0.3 );
* // returns NaN
*/
function quantile() {
	return NaN;
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{}],1175:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
* @example
* var y = quantile( 0.5, 2.0, 4.0 );
* // returns ~3.33
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		isnan( p ) ||
		k <= 0.0 ||
		lambda <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return lambda * pow( -ln( 1.0 - p ), 1.0/k );
} // end FUNCTION quantile()


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311}],1176:[function(require,module,exports){
'use strict';

/**
* Weibull distribution skewness.
*
* @module @stdlib/math/base/dist/weibull/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dist/weibull/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~-0.087
*
* v = skewness( 8.0, 2.0 );
* // returns ~-0.534
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1177}],1177:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var variance = require( '@stdlib/math/base/dist/weibull/variance' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var mean = require( '@stdlib/math/base/dist/weibull/mean' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the skewness of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~-0.087
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~-0.534
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( k, lambda ) {
	var sigma2;
	var sigma;
	var out;
	var mu;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	mu = mean( k, lambda );
	sigma2 = variance( k, lambda);
	sigma = sqrt( sigma2 );
	out = gamma( 1.0 + ( 3.0/k ) ) * pow( lambda, 3.0 );
	out -= ( 3.0*mu*sigma2 ) + pow( mu, 3.0 );
	out /= pow( sigma, 3.0 );
	return out;
} // end FUNCTION skewness()


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/weibull/mean":1158,"@stdlib/math/base/dist/weibull/variance":1180,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343}],1178:[function(require,module,exports){
'use strict';

/**
* Weibull distribution standard deviation.
*
* @module @stdlib/math/base/dist/weibull/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dist/weibull/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
*
* v = stdev( 4.0, 12.0 );
* // returns ~3.051
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.279
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1179}],1179:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~3.051
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.279
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( k, lambda ) {
	var g1k;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	g1k = gamma( 1.0 + ( 1.0/k ) );
	return lambda * sqrt( gamma( 1.0 + ( 2.0/k ) ) - ( g1k*g1k ) );
} // end FUNCTION stdev()


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/sqrt":1343}],1180:[function(require,module,exports){
'use strict';

/**
* Weibull distribution variance.
*
* @module @stdlib/math/base/dist/weibull/variance
*
* @example
* var variance = require( '@stdlib/math/base/dist/weibull/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns 1.0
*
* v = variance( 4.0, 12.0 );
* // returns ~9.311
*
* v = variance( 8.0, 2.0 );
* // returns ~0.078
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1181}],1181:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var mean = require( '@stdlib/math/base/dist/weibull/mean' );


// MAIN //

/**
* Returns the variance of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~9.311
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.078
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( k, lambda ) {
	var mu;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	mu = mean( k, lambda );
	return ( lambda*lambda * ( gamma( 1.0 + (2.0/k) ) ) ) - ( mu*mu );
} // end FUNCTION variance()


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/dist/weibull/mean":1158,"@stdlib/math/base/special/gamma":1268}],1182:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],1183:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":1182}],1184:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PIO4 = require( '@stdlib/math/constants/float64-fourth-pi' );


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.


// MAIN //

/**
* Computes the arccosine of a number.
*
* @param {number} x - input value
* @returns {number} arccosine (in radians)
*
* @example
* var v = acos( 1.0 );
* // returns 0.0
*
* @example
* var v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* @example
* var v = acos( NaN );
* // returns NaN
*/
function acos( x ) {
	var z;
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x > 0.5 ) {
		return 2.0 * asin( sqrt( 0.5 - (0.5*x) ) );
	}
	z = PIO4 - asin( x );
	z += MOREBITS;
	z += PIO4;
	return z;
} // end FUNCTION acos()


// EXPORTS //

module.exports = acos;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/asin":1187,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-fourth-pi":1395}],1185:[function(require,module,exports){
'use strict';

/**
* Compute the arccosine of a number.
*
* @module @stdlib/math/base/special/acos
*
* @example
* var acos = require( '@stdlib/math/base/special/acos' );
*
* var v = acos( 1.0 );
* // returns 0.0
*
* v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* v = acos( NaN );
* // returns NaN
*/

// MODULES //

var acos = require( './acos.js' );


// EXPORTS //

module.exports = acos;

},{"./acos.js":1184}],1186:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PIO4 = require( '@stdlib/math/constants/float64-fourth-pi' );


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.

/*
* arcsin(x) = x + x^3 P(x^2)/Q(x^2)
* 0 <= x <= 0.625
* Peak relative error = 1.2e-18
*/
var P = [
	-8.198089802484824371615e0,
	1.956261983317594739197e1,
	-1.626247967210700244449e1,
	5.444622390564711410273e0,
	-6.019598008014123785661e-1,
	4.253011369004428248960e-3
];
var Q = [
	-4.918853881490881290097e1,
	1.395105614657485689735e2,
	-1.471791292232726029859e2,
	7.049610280856842141659e1,
	-1.474091372988853791896e1,
	1.0
];

/*
* arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))
* 0 <= x <= 0.5
* Peak relative error = 4.2e-18
*/
var R = [
	2.853665548261061424989e1,
	-2.556901049652824852289e1,
	6.968710824104713396794e0,
	-5.634242780008963776856e-1,
	2.967721961301243206100e-3
];
var S = [
	3.424398657913078477438e2,
	-3.838770957603691357202e2,
	1.470656354026814941758e2,
	-2.194779531642920639778e1,
	1.0
];


// FUNCTIONS //

// Compile functions to evaluate rational functions based on the above coefficients...
var ratevalPQ = evalrational( P, Q );
var ratevalRS = evalrational( R, S );


// MAIN //

/**
* Computes the arcsine of a number.
*
* @param {number} x - input value
* @returns {number} arcsine (in radians)
*
* @example
* var v = asin( 0.0 );
* // returns ~0.0
*
* @example
* var v = asin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = asin( -Math.PI/6.0 );
* // returns ~-0.5
*
* @example
* var v = asin( NaN );
* // returns NaN
*/
function asin( x ) {
	var sgn;
	var zz;
	var a;
	var p;
	var z;

	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		a = x;
	} else {
		sgn = true;
		a = -x;
	}
	if ( a > 1.0 ) {
		return NaN;
	}
	if ( a > 0.625 ) {
		// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))
		zz = 1.0 - a;
		p = zz * ratevalRS( zz );
		zz = sqrt( zz + zz );
		z = PIO4 - zz;
		zz = ( zz*p ) - MOREBITS;
		z -= zz;
		z += PIO4;
	} else {
		if ( a < 1.0e-8 ) {
			return x;
		}
		zz = a * a;
		z = zz * ratevalPQ( zz );
		z = ( a*z ) + a;
	}
	return ( sgn ) ? -z : z;
} // end FUNCTION asin()


// EXPORTS //

module.exports = asin;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-fourth-pi":1395}],1187:[function(require,module,exports){
'use strict';

/**
* Compute the arcsine of a number.
*
* @module @stdlib/math/base/special/asin
*
* @example
* var PI = require( '@stdlib/math/constants/float64-pi' );
* var asin = require( '@stdlib/math/base/special/asin' );
*
* var v = asin( 0.0 );
* // returns 0.0
*
* v = asin( PI/2.0 );
* // returns ~1.0
*
* v = asin( -PI/6.0 );
* // returns ~-0.5
*
* v = asin( NaN );
* // returns NaN
*/

// MODULES //

var asin = require( './asin.js' );


// EXPORTS //

module.exports = asin;

},{"./asin.js":1186}],1188:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/cmath.tgz}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var PIO2 = require( '@stdlib/math/constants/float64-half-pi' );
var PIO4 = require( '@stdlib/math/constants/float64-fourth-pi' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// VARIABLES //

var P = [
	-6.485021904942025371773e1,
	-1.228866684490136173410e2,
	-7.500855792314704667340e1,
	-1.615753718733365076637e1,
	-8.750608600031904122785e-1
];
var Q = [
	1.945506571482613964425e2,
	4.853903996359136964868e2,
	4.328810604912902668951e2,
	1.650270098316988542046e2,
	2.485846490142306297962e1,
	1.0
];
var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.
var T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )


// FUNCTIONS //

// Compile functions to evaluate polynomial functions based on the above coefficients...
var polyvalP = evalpoly( P );
var polyvalQ = evalpoly( Q );


// MAIN //

/**
* Computes the arctangent of a number.
*
* @param {number} x - input value
* @returns {number} arctangent (in radians)
*
* @example
* var v = atan( 0.0 );
* // returns ~0.0
*
* @example
* var v = atan( -Math.PI/4.0 );
* // returns ~-1.0
*
* @example
* var v = atan( Math.PI/4.0 );
* // returns ~1.0
*
* @example
* var v = atan( NaN );
* // returns NaN
*/
function atan( x ) {
	var flg;
	var sgn;
	var y;
	var z;
	if ( isnan( x ) || x === 0.0 ) {
		return x;
	}
	if ( x === PINF ) {
		return PIO2;
	}
	if ( x === NINF ) {
		return -PIO2;
	}
	if ( x < 0.0 ) {
		sgn = true;
		x = -x;
	}
	// Range reduction:
	flg = 0;
	if ( x > T3P8 ) {
		y = PIO2;
		flg = 1;
		x = -( 1.0/x );
	}
	else if ( x <= 0.66 ) {
		y = 0.0;
	}
	else {
		y = PIO4;
		flg = 2;
		x = (x-1.0) / (x+1.0);
	}
	z = x * x;
	z = z*polyvalP( z ) / polyvalQ( z );
	z = ( x*z ) + x;
	if ( flg === 2 ) {
		z += 0.5 * MOREBITS;
	}
	else if ( flg === 1 ) {
		z += MOREBITS;
	}
	y += z;
	return ( sgn ) ? -y : y;
} // end FUNCTION atan()


// EXPORTS //

module.exports = atan;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float64-fourth-pi":1395,"@stdlib/math/constants/float64-half-pi":1397,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1189:[function(require,module,exports){
'use strict';

/**
* Compute the arctangent of a number.
*
* @module @stdlib/math/base/special/atan
*
* @example
* var PI = require( '@stdlib/math/constants/float64-pi' );
*
* var v = atan( 0.0 );
* // returns ~0.0
*
* v = atan( -PI/4.0 );
* // returns ~-1.0
*
* v = atan( PI/4.0 );
* // returns ~1.0
*
* v = atan( NaN );
* // returns NaN
*/

// MODULES //

var atan = require( './atan.js' );


// EXPORTS //

module.exports = atan;

},{"./atan.js":1188}],1190:[function(require,module,exports){
'use strict';

/*
* The original code, copyright and license are from [Go]{@link https://golang.org/src/math/atan2.go}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* Copyright (c) 2012 The Go Authors. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following disclaimer
* in the documentation and/or other materials provided with the
* distribution.
* * Neither the name of Google Inc. nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// MODULES //

var isinfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var signbit = require( '@stdlib/math/base/utils/float64-signbit' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan = require( '@stdlib/math/base/special/atan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Evaluates the arctangent of a quotient of two numbers.
*
* #### Special Cases
*
* ``` tex
* \begin{align}
* \operatorname{atan2}(y,\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atan2}(\mathrm{NaN},x) &= \mathrm{NaN}\\
* \operatorname{atan2}( +0,x \ge 0 ) &= +0 \\
* \operatorname{atan2}( -0, x \ge 0 ) &= -0 \\
* \operatorname{atan2}( +0,x \le -0 ) &= +\Pi \\
* \operatorname{atan2}( -0, x \le -0 ) &= -\Pi \\
* \operatorname{atan2}(+\infty, +\infty) &= +\tfrac{\Pi}{4} \\
* \operatorname{atan2}(-\infty, +\infty) &= -\tfrac{\Pi}{4} \\
* \operatorname{atan2}(+\infty, -\infty) &= +\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(-\infty, -\infty) &= -\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(y, +\infty) &= 0.0 \\
* \operatorname{atan2}(y>0, -\infty) &= +\Pi \\
* \operatorname{atan2}(y<0, -\infty) &= -\Pi \\
* \operatorname{atan2}(+\infty, x ) &= +\tfrac{\Pi}{2} \\
* \operatorname{atan2}(-\infty, x ) &= -\tfrac{\Pi}{2} \\
* \end{align}
* ```
*
* @param {number} y - numerator value
* @param {number} x - denominator value
* @returns {number} arctangent of quotient y/x (in radians)
*
* @example
* var v = atan2( 2.0, 2.0 ); // => atan( 1.0 )
* // returns ~0.785
*
* @example
* var v = atan2( 6.0, 2.0 ); // => atan( 3.0 )
* // returns ~1.249
*
* @example
* var v = atan2( -1.0, -1.0 ); // => atan( 1.0 ) - PI
* // returns ~-2.356
*
* @example
* var v = atan2( 3.0, 0.0 ); // => PI / 2
* // returns ~1.571
*
* @example
* var v = atan2( -2.0, 0.0 ); // => - PI / 2
* // returns ~-1.571
*
* @example
* var v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var v = atan2( 3.0, NaN );
* // returns NaN
*
* @example
* var v = atan2( NaN, 2.0 );
* // returns NaN
*/
function atan2( y, x ) {
	var q;
	if ( isnan( x ) || isnan( y ) ) {
		return NaN;
	}
	if ( isinfinite( x ) ) {
		if ( x === PINF ) {
			if ( isinfinite( y ) ) {
				return copysign( PI / 4.0, y );
			}
			return copysign( 0.0, y );
		}
		// Case: x is -Infinity
		if ( isinfinite( y ) ) {
			return copysign( 3.0*PI/4.0, y );
		}
		return copysign( PI, y );
	}
	if ( isinfinite( y ) ) {
		return copysign( PI / 2.0, y );
	}
	if ( y === 0.0 ) {
		if ( x >= 0.0 && !signbit( x ) ) {
			return copysign( 0.0, y );
		}
		return copysign( PI, y );
	}
	if ( x === 0.0 ) {
		return copysign( PI / 2.0, y );
	}
	q = atan( y / x );
	if ( x < 0.0 ) {
		if ( q <= 0.0 ) {
			return q + PI;
		}
		return q - PI;
	}
	return q;
} // end FUNCTION atan2()


// EXPORTS //

module.exports = atan2;

},{"@stdlib/math/base/assert/is-infinite":39,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/atan":1189,"@stdlib/math/base/special/copysign":1234,"@stdlib/math/base/utils/float64-signbit":1382,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-pinf":1414}],1191:[function(require,module,exports){
'use strict';

/**
* Evaluate the arctangent of the quotient of two numbers.
*
* @module @stdlib/math/base/special/atan2
*
* @example
* var v = atan2( 2.0, 2.0 ); // => atan( 1.0 )
* // returns ~0.785
*
* v = atan2( 6.0, 2.0 ); // => atan( 3.0 )
* // returns ~1.249
*
* v = atan2( -1.0, -1.0 ); // => atan( 1.0 ) - PI
* // returns ~-2.356
*
* v = atan2( 3.0, 0.0 ); // => PI / 2
* // returns ~1.571
*
* v = atan2( -2.0, 0.0 ); // => - PI / 2
* // returns ~-1.571
*
* v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* v = atan2( 3.0, NaN );
* // returns NaN
*
* v = atan2( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

var atan2 = require( './atan2.js' );


// EXPORTS //

module.exports = atan2;

},{"./atan2.js":1190}],1192:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var E = require( '@stdlib/math/constants/float64-e' );
var EPSILON = require( '@stdlib/math/constants/float64-eps' );


// VARIABLES //

var G = 10.90051099999999983936049829935654997826;
var NUM = [
	709811.662581657956893540610814842699825,
	679979.847415722640161734319823103390728,
	293136.785721159725251629480984140341656,
	74887.5403291467179935942448101441897121,
	12555.29058241386295096255111537516768137,
	1443.42992444170669746078056942194198252,
	115.2419459613734722083208906727972935065,
	6.30923920573262762719523981992008976989,
	0.2266840463022436475495508977579735223818,
	0.004826466289237661857584712046231435101741,
	0.4624429436045378766270459638520555557321e-4
];
var DENOM = [
	0,
	362880,
	1026576,
	1172700,
	723680,
	269325,
	63273,
	9450,
	870,
	45,
	1
];


// FUNCTIONS //

/**
* Calculate the Lanczos approximation scaled by exp(G).
*
* @private
* @param {number} z - input value
* @returns {number} Lanczos approximation
*/
var lanczosSumExpGScaled = evalrational( NUM, DENOM );


// MAIN //

/**
* Evaluate the beta function.
*
* @param {NonNegativeNumber} a - input value
* @param {NonNegativeNumber} b - input value
* @returns {number} evaluated beta function
*
* @example
* var v = beta( 0, 0 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = beta( 1, 1 );
* // returns 1
*
* @example
* var v = beta( -1, 2 );
* // returns NaN
*
* @example
* var v = beta( 5, 0.2 );
* // returns ~3.382
*
* @example
* var v = beta( 4, 1 );
* // returns 0.25
*
* @example
* var v = beta( NaN, 2 );
* // returns NaN
*/
function beta( a, b ) {
	var prefix;
	var ambh;
	var agh;
	var bgh;
	var cgh;
	var res;
	var tmp;
	var c;

	prefix = 1;
	c = a + b;
	if ( isnan( a ) || isnan( b ) ) {
		return NaN;
	}
	if ( a < 0.0 || b < 0.0 ) {
		return NaN;
	}
	if ( b === 1.0 ) {
		return 1.0 / a;
	} else if ( a === 1.0 ) {
		return 1.0 / b;
	} else if ( c < EPSILON ) {
		res = c / a;
		res /= b;
		return res;
	}

	// Special cases:
	if ( c === a && b < EPSILON ) {
		return 1.0 / b;
	} else if ( c === b && a < EPSILON ) {
		return 1.0 / a;
	}

	if ( a < b ) {
		// Swap a and b:
		tmp = b;
		b = a;
		a = tmp;
	}

	// Lanczos calculation:
	agh = a + G - 0.5;
	bgh = b + G - 0.5;
	cgh = c + G - 0.5;
	res = lanczosSumExpGScaled( a ) * ( lanczosSumExpGScaled( b ) /
		lanczosSumExpGScaled( c ) );
	ambh = a - 0.5 - b;
	if ( ( abs( b * ambh ) < ( cgh * 100.0 ) ) && a > 100.0 ) {
		// Special case where the base of the power term is close to 1; compute (1+x)^y instead:
		res *= exp( ambh * log1p( -b / cgh ) );
	} else {
		res *= pow( agh / cgh, a - 0.5 - b );
	}
	if ( cgh > 1e10 ) {
		// This avoids possible overflow, but appears to be marginally less accurate:
		res *= pow( (agh / cgh) * (bgh / cgh), b );
	} else {
		res *= pow( (agh * bgh) / (cgh * cgh), b );
	}
	res *= sqrt( E / bgh);

	// If a and b were originally less than 1 we need to scale the result:
	res *= prefix;
	return res;
} // end FUNCTION beta()


// EXPORTS //

module.exports = beta;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-e":1391,"@stdlib/math/constants/float64-eps":1392}],1193:[function(require,module,exports){
'use strict';

/**
* Evaluate the beta function.
*
* @module @stdlib/math/base/special/beta
*
* @example
* var beta = require( '@stdlib/math/base/special/beta' );
*
* var v = beta( 0.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* v = beta( 1.0, 1.0 );
* // returns 1.0
*
* v = beta( -1.0, 2.0 );
* // returns NaN
*
* v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* v = beta( 4.0, 1.0 );
* // returns 0.25
*
* v = beta( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

var beta = require( './beta.js' );


// EXPORTS //

module.exports = beta;

},{"./beta.js":1192}],1194:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var factorial = require( '@stdlib/math/base/special/factorial' );
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MIN_VALUE = require( '@stdlib/math/constants/float64-smallest-normal' );
var EPSILON = require( '@stdlib/math/constants/float64-eps' );
var fullIGammaPrefix = require( './full_igamma_prefix.js' );
var regularisedGammaPrefix = require( './regularised_gamma_prefix.js' );
var tgammaDeltaRatio = require( './tgamma_delta_ratio.js');


// MAIN //

/**
* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} s0 - initial value
* @param {number} mult - initial value
* @param {boolean} normalised - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function
* @returns {number} function value
*/
function betaSmallBLargeASeries( a, b, x, y, s0, mult, normalised ) {
	var prefix;
	var tmp1;
	var tnp1;
	var sum;
	var b2n;
	var bm1;
	var lx2;
	var lxp;
	var mbn;
	var lx;
	var t4;
	var h;
	var j;
	var m;
	var n;
	var p;
	var r;
	var t;
	var u;

	// Some values we'll need later, these are Eq 9.1:
	bm1 = b - 1.0;
	t = a + ( bm1 / 2.0 );
	if ( y < 0.35 ) {
		lx = log1p( -y );
	} else {
		lx = ln( x );
	}
	u = -t * lx;

	// And from from 9.2:
	h = regularisedGammaPrefix( b, u );
	if ( h <= MIN_VALUE ) {
		return s0;
	}
	if ( normalised ) {
		prefix = h / tgammaDeltaRatio( a, b );
		prefix /= pow( t, b );
	} else {
		prefix = fullIGammaPrefix( b, u ) / pow( t, b );
	}
	prefix *= mult;

	// We need the quantity Pn, unfortunately this is computed recursively, and requires a full history of all the previous values so no choice but to declare a big table and hope it's big enough...
	p = new Array( 30 );
	p[ 0 ] = 1;  // see 9.3.

	// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )
	j = gammainc( u, b, true, true );
	j /= h;

	// Now we can start to pull things together and evaluate the sum in Eq 9:
	sum = s0 + ( prefix * j ); // Value at N = 0

	// Some variables we'll need...
	tnp1 = 1.0; // 2*N+1
	lx2 = lx / 2.0;
	lx2 *= lx2;
	lxp = 1.0;
	t4 = 4.0 * t * t;
	b2n = b;
	for ( n = 1; n < p.length; ++n ) {
		// Begin by evaluating the next Pn from Eq 9.4:
		tnp1 += 2;
		p[ n ] = 0.0;
		mbn = b - n;
		tmp1 = 3;
		for ( m = 1; m < n; ++m ) {
			mbn = ( m * b ) - n;
			p[ n ] += mbn * p[ n-m ] / factorial( tmp1 );
			tmp1 += 2;
		}
		p[ n ] /= n;
		p[ n ] += bm1 / factorial( tnp1 );

		// Now we want Jn from Jn-1 using Eq 9.6:
		j = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;
		lxp *= lx2;
		b2n += 2.0;

		// Pull it together with Eq 9:
		r = prefix * p[ n ] * j;
		sum += r;
		if ( r > 1.0 ) {
			if ( abs( r ) < abs( EPSILON * sum ) ) {
				break;
			}
		} else if ( abs( r / EPSILON ) < abs( sum ) ) {
			break;
		}
	}
	return sum;
} // end FUNCTION betaSmallBLargeASeries()


// EXPORTS //

module.exports = betaSmallBLargeASeries;

},{"./full_igamma_prefix.js":1197,"./regularised_gamma_prefix.js":1204,"./tgamma_delta_ratio.js":1206,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/factorial":1262,"@stdlib/math/base/special/gammainc":1277,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-eps":1392,"@stdlib/math/constants/float64-smallest-normal":1415}],1195:[function(require,module,exports){
'use strict';

// MODULES //

var ibetaImp = require( './ibeta_imp.js' );


// MAIN //

/**
* Evaluates the incomplete beta function.
*
* @param {Probability} x - function parameter
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* @example
* var y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* @example
* var y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*/
function betainc( x, a, b, regularized, upper ) {
	if ( regularized !== false ) {
		return upper ?
			ibetaImp( a, b, x, true, true ) :
			ibetaImp( a, b, x, false, true );
	}
	return upper ?
		ibetaImp( a, b, x, true, false ) :
		ibetaImp( a, b, x, false, false );
} // end FUNCTION betainc()


// EXPORTS //

module.exports = betainc;

},{"./ibeta_imp.js":1200}],1196:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
var floor = require( '@stdlib/math/base/special/floor' );
var pow = require( '@stdlib/math/base/special/pow' );
var MIN_VALUE = require( '@stdlib/math/constants/float64-smallest-normal' );


// MAIN //

/**
* For integer arguments we can relate the incomplete beta to the  complement of the binomial distribution cdf and use this finite sum.
*
* @private
* @param {NonNegativeInteger} n - number of trials
* @param {NonNegativeInteger} k - function input
* @param {Probability} x - function input
* @param {Probability} y - probability equal to `1-x`
* @returns {number} sum
*/
function binomialCCDF( n, k, x, y ) {
	var startTerm;
	var result;
	var start;
	var term;
	var i;

	result = pow( x, n );
	if ( result > MIN_VALUE ) {
		term = result;
		for ( i = floor( n - 1 ); i > k; --i ) {
			term *= ((i + 1) * y) / ((n - i) * x);
			result += term;
		}
	} else {
		// First term underflows so we need to start at the mode of the distribution and work outwards:
		start = floor( n * x );
		if ( start <= k + 1 ) {
			start = floor( k + 2 );
		}
		result = pow( x, start ) * pow( y, n - start );
		result *= binomcoef( floor(n), floor(start) );
		if ( result === 0 ) {
			// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:
			for ( i = start - 1; i > k; --i ) {
				result += pow( x, i ) * pow( y, n - i );
				result *= binomcoef( floor(n), floor(i) );
			}
		} else {
			term = result;
			startTerm = result;
			for ( i = start - 1; i > k; --i ) {
				term *= ((i + 1) * y) / ((n - i) * x);
				result += term;
			}
			term = startTerm;
			for ( i = start + 1; i <= n; ++i ) {
				term *= (n - i + 1) * x / (i * y);
				result += term;
			}
		}
	}
	return result;
} // end FUNCTION binomialCCDF()


// EXPORTS

module.exports = binomialCCDF;

},{"@stdlib/math/base/special/binomcoef":1228,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-smallest-normal":1415}],1197:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/math/constants/float64-max-ln' );
var MIN_LN = require( '@stdlib/math/constants/float64-min-ln' );


// MAIN //

/**
* Calculates the power term prefix (z^a)(e^-z) used in the non-normalised incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/
function fullIGammaPrefix( a, z ) {
	var prefix;
	var alz;

	alz = a * ln( z );
	if ( z >= 1.0 ) {
		if ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {
			prefix = pow( z, a ) * exp( -z );
		}
		else if ( a >= 1.0 ) {
			prefix = pow( z / exp(z/a), a );
		}
		else {
			prefix = exp( alz - z );
		}
	}
	else if ( alz > MIN_LN ) {
		prefix = pow( z, a ) * exp( -z );
	}
	else if ( z/a < MAX_LN ) {
		prefix = pow( z / exp(z/a), a );
	} else {
		prefix = exp( alz - z );
	}
	return prefix;
} // end FUNCTION fullIGammaPrefix()


// EXPORTS //

module.exports = fullIGammaPrefix;

},{"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-max-ln":1406,"@stdlib/math/constants/float64-min-ln":1410}],1198:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ibetaPowerTerms = require( './ibeta_power_terms.js' );


// MAIN //

/**
* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} k - function input
* @param {boolean} normalised - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {Object} pderiv - object holding the derivative in the `value` property
* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)
*/
function ibetaAStep( a, b, x, y, k, normalised, pderiv ) {
	var prefix;
	var term;
	var sum;
	var i;

	prefix = ibetaPowerTerms( a, b, x, y, normalised );
	if ( pderiv ) {
		pderiv.value = prefix;
	}
	prefix /= a;
	if ( prefix === 0.0 ) {
		return prefix;
	}
	sum = 1.0;
	term = 1.0;
	// Series summation from 0 to k-1:
	for ( i = 0; i < k-1; ++i ) {
		term *= (a+b+i) * x / (a+i+1.0);
		sum += term;
	}
	prefix *= sum;
	return prefix;
} // end FUNCTION ibetaAStep()


// EXPORTS

module.exports = ibetaAStep;

},{"./ibeta_power_terms.js":1201}],1199:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
var ibetaPowerTerms = require( './ibeta_power_terms.js' );


// FUNCTIONS //

/**
* Continued fraction for the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @returns {Function} series function
*/
function ibetaFraction2t( a, b, x, y ) {
	var m = 0;
	return next;

	/**
	* Calculate the numerator and denominator of the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/
	function next() {
		var denom;
		var aN;
		var bN;

		aN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;
		denom = a + ( 2.0*m ) - 1.0;
		aN /= denom * denom;
		bN = m;
		bN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );
		bN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) /
			( a + (2.0*m) + 1.0 );
		m += 1;
		return [ aN, bN ];
	}
} // end FUNCTION ibetaFraction2t()


// MAIN //

/**
* Evaluates the incomplete beta via the continued fraction representation.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalised - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {Object} pderiv - object holding the derivative in the `value` property
* @returns {number} incomplete beta value
*/
function ibetaFraction2( a, b, x, y, normalised, pderiv ) {
	var result;
	var fract;
	var f;

	result = ibetaPowerTerms( a, b, x, y, normalised );
	if ( pderiv ) {
		pderiv.value = result;
	}
	if ( result === 0.0 ) {
		return result;
	}
	f = ibetaFraction2t( a, b, x, y );
	fract = continuedFraction( f, {
		'keep': true,
		'maxIter': 1000
	});
	return result / fract;
} // end FUNCTION ibetaFraction2()


// EXPORTS

module.exports = ibetaFraction2;

},{"./ibeta_power_terms.js":1201,"@stdlib/math/base/tools/continued-fraction":1353}],1200:[function(require,module,exports){
/* eslint-disable max-statements */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var expm1 = require( '@stdlib/math/base/special/expm1' );
var floor = require( '@stdlib/math/base/special/floor' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var asin = require( '@stdlib/math/base/special/asin' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var MAX_FLOAT64 = require( '@stdlib/math/constants/float64-max' );
var MIN_FLOAT64 = require( '@stdlib/math/constants/float64-smallest-normal' );
var MAX_INT32 = require( '@stdlib/math/constants/int32-max' );
var HALF_PI = require( '@stdlib/math/constants/float64-half-pi' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var betaSmallBLargeASeries = require( './beta_small_b_large_a_series.js' );
var risingFactorialRatio = require( './rising_factorial_ratio.js' );
var ibetaPowerTerms = require( './ibeta_power_terms.js' );
var ibetaFraction2 = require( './ibeta_fraction2.js');
var binomialCCDF = require( './binomial_ccdf.js' );
var ibetaAStep = require( './ibeta_a_step.js' );
var ibetaSeries = require( './ibeta_series.js' );


// MAIN //

/**
* Evaluates the incomplete beta function. This function divides up the input range and selects the right implementation method for each domain.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function input
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalised - boolean indicating if the function should evaluate the regularized incomplete beta function
* @param {Object} [pderiv] - derivative container
* @returns {number} function value
*/
function ibetaImp( a, b, x, invert, normalised, pderiv ) {
	var lambda;
	var prefix;
	var fract;
	var bbar;
	var div;
	var tmp;
	var k;
	var n;
	var p;
	var y;
	y = 1.0 - x;
	if ( pderiv ) {
		// Value not set...
		pderiv.value = -1;
	}
	if ( x < 0.0 || x > 1.0 ) {
		return NaN;
	}
	if ( normalised ) {
		if ( a < 0.0 || b < 0.0 ) {
			return NaN;
		}
		// Extend to a few very special cases...
		if ( a === 0.0 ) {
			if ( b === 0.0 ) {
				return NaN;
			}
			if ( b > 0.0 ) {
				return invert ? 0.0 : 1.0;
			}
		} else if ( b === 0.0 ) {
			if ( a > 0.0 ) {
				return invert ? 1.0 : 0.0;
			}
		}
	} else if ( a <= 0.0 || b <= 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( pderiv ) {
			if ( a === 1.0 ) {
				pderiv.value = 1.0;
			} else {
				pderiv.value = a < 1.0 ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;
			}
		}
		if ( invert ) {
			return normalised ? 1.0 : beta( a, b );
		}
		return 0.0;
	}
	if ( x === 1.0 ) {
		if ( pderiv ) {
			if ( b === 1 ) {
				pderiv.value = 1;
			} else {
				pderiv.value = b < 1 ? MAX_FLOAT64 / 2 : MIN_FLOAT64 * 2;
			}
		}
		if ( invert ) {
			return 0.0;
		}
		return normalised ? 1.0 : beta( a, b );
	}
	if ( a === 0.5 && b === 0.5 ) {
		if ( pderiv ) {
			pderiv.value = 1.0 / PI * sqrt( y * x );
		}
		// We have an arcsine distribution:
		p = invert ? asin( sqrt(y) ) : asin( sqrt(x) );
		p /= HALF_PI;
		if ( !normalised ) {
			p *= PI;
		}
		return p;
	}
	if ( a === 1.0 ) {
		tmp = b;
		b = a;
		a = tmp;

		tmp = y;
		y = x;
		x = tmp;

		invert = !invert;
	}
	if ( b === 1.0 ) {
		// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/
		if ( a === 1.0 ) {
			if ( pderiv ) {
				pderiv.value = 1.0;
			}
			return invert ? y : x;
		}
		if ( pderiv ) {
			pderiv.value = a * pow( x, a - 1.0 );
		}
		if ( y < 0.5 ) {
			p = invert ? -expm1( a * log1p(-y) ) : exp( a * log1p(-y) );
		} else {
			p = invert ? -( pow( x, a ) - 1 ) : pow( x, a );
		}
		if ( !normalised ) {
			p /= a;
		}
		return p;
	}
	if ( min(a, b) <= 1.0 ) {
		if ( x > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;

			invert = !invert;
		}
		if ( max( a, b ) <= 1.0 ) {
			// Both a,b < 1:
			if ( (a >= min( 0.2, b ) ) || ( pow(x, a) <= 0.9 ) ) {
				if ( invert ) {
					fract = -(normalised ? 1.0 : beta( a, b ) );
					invert = false;
					fract = -ibetaSeries(
						a, b, x, fract, normalised, pderiv, y
					);
				} else {
					fract = ibetaSeries(
						a, b, x, 0, normalised, pderiv, y
					);
				}
			} else {
				tmp = b;
				b = a;
				a = tmp;

				tmp = y;
				y = x;
				x = tmp;

				invert = !invert;
				if ( y >= 0.3 ) {
					if ( invert ) {
						fract = -( normalised ? 1.0 : beta( a, b ) );
						invert = false;
						fract = -ibetaSeries(
							a, b, x, fract, normalised, pderiv, y
						);
					} else {
						fract = ibetaSeries(
							a, b, x, 0, normalised, pderiv, y
						);
					}
				} else {
					// Sidestep on a, and then use the series representation:
					if ( normalised ) {
						prefix = 1;
					} else {
						prefix = risingFactorialRatio( a + b, a, 20 );
					}
					fract = ibetaAStep( a, b, x, y, 20, normalised, pderiv );
					if ( invert ) {
						fract -= ( normalised ? 1 : beta( a, b ) );
						invert = false;
						fract = -betaSmallBLargeASeries(
							a + 20, b, x, y, fract, prefix, normalised
						);
					} else {
						fract = betaSmallBLargeASeries(
							a + 20, b, x, y, fract, prefix, normalised
						);
					}
				}
			}
		} else if ( b <= 1 || ( x < 0.1 && ( pow(b * x, a) <= 0.7 ) ) ) {
			if ( invert ) {
				fract = -( normalised ? 1 : beta( a, b ) );
				invert = false;
				fract = -ibetaSeries( a, b, x, fract, normalised, pderiv, y );
			} else {
				fract = ibetaSeries( a, b, x, 0, normalised, pderiv, y );
			}
		} else {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;
			invert = !invert;

			if ( y >= 0.3 ) {
				if (invert) {
					fract = -(normalised ? 1 : beta( a, b ));
					invert = false;
					fract = -ibetaSeries(
						a, b, x, fract, normalised, pderiv, y
					);
				} else {
					fract = ibetaSeries(
						a, b, x, 0, normalised, pderiv, y
					);
				}
			}
			else if ( a >= 15 ) {
				if ( invert ) {
					fract = -(normalised ? 1 : beta( a, b ));
					invert = false;
					fract = -betaSmallBLargeASeries(
						a, b, x, y, fract, 1, normalised
					);
				} else {
					fract = betaSmallBLargeASeries(
						a, b, x, y, 0, 1, normalised
					);
				}
			}
			else {
				if ( normalised ) {
					prefix = 1;
				} else {
					// Sidestep to improve errors:
					prefix = risingFactorialRatio( a + b, a, 20 );
				}
				fract = ibetaAStep( a, b, x, y, 20, normalised, pderiv );
				if ( invert ) {
					fract -= ( normalised ? 1 : beta( a, b ) );
					invert = false;
					fract = -betaSmallBLargeASeries(
						a + 20, b, x, y, fract, prefix, normalised
					);
				} else {
					fract = betaSmallBLargeASeries(
						a + 20, b, x, y, fract, prefix, normalised
					);
				}
			}
		}
	} else {
		// Both a,b >= 1:
		if ( a < b ) {
			lambda = a - ( (a + b) * x );
		} else {
			lambda = ( (a + b) * y ) - b;
		}
		if ( lambda < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;
			invert = !invert;
		}
		if ( b < 40.0 ) {
			if (
				floor(a) === a &&
				floor(b) === b &&
				a < MAX_INT32 - 100
			) {
				// Relate to the binomial distribution and use a finite sum:
				k = a - 1;
				n = b + k;
				fract = binomialCCDF( n, k, x, y );
				if ( !normalised ) {
					fract *= beta( a, b );
				}
			}
			else if ( b * x <= 0.7 ) {
				if ( invert ) {
					fract = -( normalised ? 1.0 : beta( a, b ) );
					invert = false;
					fract = -ibetaSeries(
						a, b, x, fract, normalised, pderiv, y
					);
				} else {
					fract = ibetaSeries(
						a, b, x, 0.0, normalised, pderiv, y
					);
				}
			}
			else if ( a > 15.0 ) {
				// Sidestep so we can use the series representation:
				n = floor( b );
				if ( n === b ) {
					n -= 1;
				}
				bbar = b - n;
				if ( normalised ) {
					prefix = 1;
				} else {
					prefix = risingFactorialRatio( a + bbar, bbar, n );
				}
				fract = ibetaAStep( bbar, a, y, x, n, normalised );
				fract = betaSmallBLargeASeries(
					a, bbar, x, y, fract, 1.0, normalised
				);
				fract /= prefix;
			}
			else if ( normalised ) {
				n = floor( b );
				bbar = b - n;
				if ( bbar <= 0 ) {
					n -= 1;
					bbar += 1;
				}
				fract = ibetaAStep( bbar, a, y, x, n, normalised );
				fract += ibetaAStep( a, bbar, x, y, 20, normalised );
				if ( invert ) {
					fract -= 1;
				}
				fract = betaSmallBLargeASeries(
					a + 20.0, bbar, x, y, fract, 1, normalised
				);
				if ( invert ) {
					fract = -fract;
					invert = false;
				}
			}
			else {
				fract = ibetaFraction2( a, b, x, y, normalised, pderiv );
			}
		} else {
			fract = ibetaFraction2( a, b, x, y, normalised, pderiv );
		}
	}
	if ( pderiv ) {
		if ( pderiv.value < 0.0 ) {
			pderiv.value = ibetaPowerTerms( a, b, x, y, true );
		}
		div = y * x;
		if ( pderiv.value !== 0.0 ) {
			if ( ( MAX_FLOAT64 * div < pderiv.value ) ) {
				// Overflow, return an arbitrarily large value:
				pderiv.value = MAX_FLOAT64 / 2.0;
			} else {
				pderiv.value /= div;
			}
		}
	}
	return invert ? ( normalised ? 1.0 : beta( a, b ) ) - fract : fract;
} // end FUNCTION ibetaImp()


// EXPORTS //

module.exports = ibetaImp;

},{"./beta_small_b_large_a_series.js":1194,"./binomial_ccdf.js":1196,"./ibeta_a_step.js":1198,"./ibeta_fraction2.js":1199,"./ibeta_power_terms.js":1201,"./ibeta_series.js":1202,"./rising_factorial_ratio.js":1205,"@stdlib/math/base/special/asin":1187,"@stdlib/math/base/special/beta":1193,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-half-pi":1397,"@stdlib/math/constants/float64-max":1408,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-smallest-normal":1415,"@stdlib/math/constants/int32-max":1423}],1201:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/math/constants/float64-max-ln' );
var MIN_LN = require( '@stdlib/math/constants/float64-min-ln' );
var E = require( '@stdlib/math/constants/float64-e' );


// VARIABLES //

var G = 10.90051099999999983936049829935654997826;
var NUM = [
	709811.662581657956893540610814842699825,
	679979.847415722640161734319823103390728,
	293136.785721159725251629480984140341656,
	74887.5403291467179935942448101441897121,
	12555.29058241386295096255111537516768137,
	1443.42992444170669746078056942194198252,
	115.2419459613734722083208906727972935065,
	6.30923920573262762719523981992008976989,
	0.2266840463022436475495508977579735223818,
	0.004826466289237661857584712046231435101741,
	0.4624429436045378766270459638520555557321e-4
];
var DENOM = [
	0.0,
	362880.0,
	1026576.0,
	1172700.0,
	723680.0,
	269325.0,
	63273.0,
	9450.0,
	870.0,
	45.0,
	1.0
];


// FUNCTIONS //

/**
* Calculates the Lanczos approximation scaled by exp(G).
*
* @private
* @param {number} z - input value
* @returns {number} Lanczos approximation
*/
var lanczosSumExpGScaled = evalrational( NUM, DENOM );


/**
* Computes the leading power terms in the incomplete beta function. When normalized,
*
* ``` tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ``` tex
* x^a y^b
* ```
*
* #### Notes
*
* - Almost all of the error in the incomplete beta comes from this function, particularly when a and b are large. Computing large powers are *hard* though, and using logarithms just leads to horrendous cancellation errors.
* - For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is *very* unlikely since one of the power terms will evaluate to a number close to 1.
* - If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*    ``` tex
*    (1 + l_1)^a \cdot (1 + l_2)^b \\
*    = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*    = (1 + l_1 + l_3 + l_1*l_3)^a
*    ```
*
*    and
*
*    ``` tex
*    l_3 = (1 + l_2)^(b/a) - 1 \\
*    = \exp((b/a) * \ln(1 + l_2)) - 1
*    ```
*
*  The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalised - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/
function ibetaPowerTerms( a, b, x, y, normalised ) {
	var result;
	var smallA;
	var ratio;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var l3;
	var p1;
	var b1;
	var b2;
	var c;
	var l;

	if ( !normalised ) {
		// Can we do better here?
		return pow( x, a ) * pow( y, b );
	}
	c = a + b;

	// Combine power terms with Lanczos approximation:
	agh = a + G - 0.5;
	bgh = b + G - 0.5;
	cgh = c + G - 0.5;
	result = lanczosSumExpGScaled( c );
	result /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );

	// Combine with the leftover terms from the Lanczos approximation:
	result *= sqrt( bgh / E );
	result *= sqrt( agh / cgh );

	// `l1` and `l2` are the base of the exponents minus one:
	l1 = ( ( x * b ) - ( y * agh ) ) / agh;
	l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
	if ( min( abs(l1), abs(l2) ) < 0.2 ) {
		// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
		if ( l1 * l2 > 0 || min( a, b ) < 1 ) {
			if ( abs(l1) < 0.1 ) {
				result *= exp( a * log1p( l1 ) );
			} else {
				result *= pow( ( x*cgh ) / agh, a );
			}
			if ( abs(l2) < 0.1 ) {
				result *= exp( b * log1p( l2 ) );
			} else {
				result *= pow((y * cgh) / bgh, b);
			}
		}
		else if ( max( abs(l1), abs(l2) ) < 0.5 ) {
			smallA = a < b;
			ratio = b / a;
			if (
				(smallA && (ratio * l2 < 0.1)) ||
				(!smallA && (l1 / ratio > 0.1))
			) {
				l3 = expm1( ratio * log1p( l2 ) );
				l3 = l1 + l3 + ( l3 * l1 );
				l3 = a * log1p( l3 );
				result *= exp( l3 );
			}
			else {
				l3 = expm1( log1p( l1 ) / ratio );
				l3 = l2 + l3 + ( l3 * l2 );
				l3 = b * log1p( l3 );
				result *= exp( l3 );
			}
		}
		else if ( abs(l1) < abs(l2) ) {
			// First base near 1 only:
			l = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );
			if ( l <= MIN_LN || l >= MAX_LN ) {
				l += ln(result);
				if ( l >= MAX_LN ) {
					return NaN;
				}
				result = exp( l );
			} else {
				result *= exp( l );
			}
		}
		else {
			// Second base near 1 only:
			l = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );
			if ( l <= MIN_LN || l >= MAX_LN ) {
				l += ln(result);
				if ( l >= MAX_LN ) {
					return NaN;
				}
				result = exp( l );
			} else {
				result *= exp( l );
			}
		}
	}
	else {
		// General case:
		b1 = (x * cgh) / agh;
		b2 = (y * cgh) / bgh;
		l1 = a * ln(b1);
		l2 = b * ln(b2);
		if (
			l1 >= MAX_LN ||
			l1 <= MIN_LN ||
			l2 >= MAX_LN ||
			l2 <= MIN_LN
		) {
			// Oops, under/overflow, sidestep if we can:
			if ( a < b ) {
				p1 = pow( b2, b / a );
				l3 = a * ( ln(b1) + ln(p1) );
				if ( l3 < MAX_LN && l3 > MIN_LN ) {
					result *= pow( p1 * b1, a );
				} else {
					l2 += l1 + ln(result);
					if ( l2 >= MAX_LN ) {
						return NaN;
					}
					result = exp( l2 );
				}
			}
			else {
				p1 = pow( b1, a / b );
				l3 = ( ln(p1) + ln(b2) ) * b;
				if ( l3 < MAX_LN && l3 > MIN_LN ) {
					result *= pow( p1 * b2, b );
				} else {
					l2 += l1 + ln( result );
					if (l2 >= MAX_LN) {
						return NaN;
					}
					result = exp( l2 );
				}
			}
		}
		else {
			// Finally the normal case:
			result *= pow( b1, a ) * pow( b2, b );
		}
	}
	return result;
} // end FUNCTION ibetaPowerTerms()


// EXPORTS //

module.exports = ibetaPowerTerms;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-e":1391,"@stdlib/math/constants/float64-max-ln":1406,"@stdlib/math/constants/float64-min-ln":1410}],1202:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MIN_VALUE = require( '@stdlib/math/constants/float64-smallest-normal' );
var MAX_LN = require( '@stdlib/math/constants/float64-max-ln' );
var MIN_LN = require( '@stdlib/math/constants/float64-min-ln' );
var E = require( '@stdlib/math/constants/float64-e' );


// VARIABLES //

var G = 10.90051099999999983936049829935654997826;
var NUM = [
	709811.662581657956893540610814842699825,
	679979.847415722640161734319823103390728,
	293136.785721159725251629480984140341656,
	74887.5403291467179935942448101441897121,
	12555.29058241386295096255111537516768137,
	1443.42992444170669746078056942194198252,
	115.2419459613734722083208906727972935065,
	6.30923920573262762719523981992008976989,
	0.2266840463022436475495508977579735223818,
	0.004826466289237661857584712046231435101741,
	0.4624429436045378766270459638520555557321e-4
];
var DENOM = [
	0,
	362880,
	1026576,
	1172700,
	723680,
	269325,
	63273,
	9450,
	870,
	45,
	1
];


// FUNCTIONS //

/**
* Calculate the Lanczos approximation scaled by exp(G).
*
* @private
* @param {number} z - input value
* @returns {number} Lanczos approximation
*/
var lanczosSumExpGScaled = evalrational( NUM, DENOM );

/**
* Series approximation to the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a_ - function parameter
* @param {NonNegativeNumber} b_ - function parameter
* @param {Probability} x_ - function parameter
* @param {number} mult - initial value
* @returns {Function} series function
*/
function ibetaSeriesT( a_, b_, x_, mult ) {
	var result = mult;
	var poch = 1.0 - b_;
	var apn = a_;
	var x = x_;
	var n = 1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		var r = result / apn;
		apn += 1.0;
		result *= poch * x / n;
		n += 1;
		poch += 1.0;
		return r;
	} // end FUNCTION next()
} // end FUNCTION ibetaSeriesT()


// MAIN //

/**
* Incomplete beta series.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {NonNegativeInteger} s0 - initial value
* @param {boolean} normalised - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {Object} pderiv - object holding the derivative in the `value` property
* @param {Probability} y - probability equal to `1-x`
* @returns {number} function value
*/
function ibetaSeries( a, b, x, s0, normalised, pderiv, y ) {
	var result;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var c;
	var s;

	if ( normalised ) {
		c = a + b;

		// Incomplete beta power term, combined with the Lanczos approximation:
		agh = a + G - 0.5;
		bgh = b + G - 0.5;
		cgh = c + G - 0.5;
		result = lanczosSumExpGScaled( c ) / ( lanczosSumExpGScaled( a ) *
			lanczosSumExpGScaled( b ) );

		l1 = ln( cgh / bgh ) * ( b - 0.5 );
		l2 = ln( x * cgh / agh ) * a;

		// Check for over/underflow in the power terms:
		if (
			l1 > MIN_LN &&
			l1 < MAX_LN &&
			l2 > MIN_LN &&
			l2 < MAX_LN
		) {
			if ( a * b < bgh * 10.0 ) {
				result *= exp( ( b-0.5 ) * log1p( a / bgh ) );
			} else {
				result *= pow( cgh / bgh, b - 0.5 );
			}
			result *= pow( x * cgh / agh, a );
			result *= sqrt( agh / E );

			if ( pderiv ) {
				pderiv.value = result * pow( y, b );
			}
		}
		else {
			// We need logs, and this *will* cancel:
			result = ln( result ) + l1 + l2 + ( ( ln( agh ) - 1.0 ) / 2.0 );
			if ( pderiv ) {
				pderiv.value = exp( result + ( b * ln( y ) ) );
			}
			result = exp(result);
		}
	}
	else {
		// Non-normalised, just compute the power:
		result = pow( x, a );
	}
	if ( result < MIN_VALUE ) {
		return s0; // Safeguard: series can't cope with denorms.
	}
	s = ibetaSeriesT( a, b, x, result );
	result = sumSeries( s, {
		'initialValue': s0,
		'maxTerms': 100
	});
	return result;
} // end FUNCTION ibetaSeries()


// EXPORTS //

module.exports = ibetaSeries;

},{"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/base/tools/sum-series":1362,"@stdlib/math/constants/float64-e":1391,"@stdlib/math/constants/float64-max-ln":1406,"@stdlib/math/constants/float64-min-ln":1410,"@stdlib/math/constants/float64-smallest-normal":1415}],1203:[function(require,module,exports){
'use strict';

/**
* Evaluate the incomplete beta function.
*
* @module @stdlib/math/base/special/betainc
*
* @example
* var betainc = require( '@stdlib/math/base/special/betainc' );
*
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*
* y = betainc( 0.2, 1.0, 2.0, true, true );
* // returns 0.64
*/

// MODULES //

var betainc = require( './betainc.js' );


// EXPORTS //

module.exports = betainc;

},{"./betainc.js":1195}],1204:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14
* Copyright Christopher Kormanyos 2013-14
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/math/constants/float64-max-ln' );
var MIN_LN = require( '@stdlib/math/constants/float64-min-ln' );
var E = require( '@stdlib/math/constants/float64-e' );


// VARIABLES //

var G = 10.90051099999999983936049829935654997826;
var NUM = [
	709811.662581657956893540610814842699825,
	679979.847415722640161734319823103390728,
	293136.785721159725251629480984140341656,
	74887.5403291467179935942448101441897121,
	12555.29058241386295096255111537516768137,
	1443.42992444170669746078056942194198252,
	115.2419459613734722083208906727972935065,
	6.30923920573262762719523981992008976989,
	0.2266840463022436475495508977579735223818,
	0.004826466289237661857584712046231435101741,
	0.4624429436045378766270459638520555557321e-4
];
var DENOM = [
	0,
	362880,
	1026576,
	1172700,
	723680,
	269325,
	63273,
	9450,
	870,
	45,
	1
];


// FUNCTIONS //

/**
* Calculate the Lanczos approximation scaled by exp(G).
*
* @private
* @param {number} z - input value
* @returns {number} Lanczos approximation
*/
var lanczosSumExpGScaled = evalrational( NUM, DENOM );


// MAIN //

/**
* Computes (z^a)(e^-z)/tgamma(a).
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} (z^a)(e^-z)/tgamma(a)
*/
function regularisedGammaPrefix( a, z ) {
	var amza;
	var alz;
	var amz;
	var sq;
	var agh = a + G - 0.5;
	var prefix;
	var d = ( (z - a) - G + 0.5 ) / agh;

	if ( a < 1 ) {
		// We have to treat a < 1 as a special case because our Lanczos approximations are optimised against the factorials with a > 1, and very small values of a can give rather erroneous results
		if ( z <= MIN_LN ) {
			// Oh dear, have to use logs, should be free of cancellation errors though:
			return exp( ( a * ln(z) ) - z - gammaln( a ) );
		}
		// Direct calculation, no danger of overflow as gamma(a) < 1/a for small a:
		return pow( z, a ) * exp( -z ) / gamma( a );
	}
	else if ( abs(d*d*a) <= 100 && a > 150 ) {
		// Special case for large a and a ~ z.
		prefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );
		prefix = exp( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * ln(z / agh);
		amz = a - z;
		if (
			min(alz, amz) <= MIN_LN ||
			max(alz, amz) >= MAX_LN
		) {
			amza = amz / a;
			if (
				min(alz, amz)/2 > MIN_LN &&
				max(alz, amz)/2 < MAX_LN
			) {
				// Compute square root of the result and then square it:
				sq = pow( z / agh, a / 2 ) * exp( amz / 2 );
				prefix = sq * sq;
			}
			else if (
				min(alz, amz)/4 > MIN_LN &&
				max(alz, amz)/4 < MAX_LN &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = pow( z / agh, a / 4 ) * exp( amz / 4 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > MIN_LN &&
				amza < MAX_LN
			) {
				prefix = pow( (z * exp(amza)) / agh, a );
			}
			else {
				prefix = exp( alz + amz );
			}
		}
		else
		{
			prefix = pow( z / agh, a ) * exp( amz );
		}
	}
	prefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );
	return prefix;
} // end FUNCTION regularisedGammaPrefix()


// EXPORTS //

module.exports = regularisedGammaPrefix;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-e":1391,"@stdlib/math/constants/float64-max-ln":1406,"@stdlib/math/constants/float64-min-ln":1410}],1205:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MAIN //

/**
* Calculates
*
*    ``` tex
*    \frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }
*    ```
*
* - This function computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`. It is only called with small `k`, for large `k` it is grossly inefficient.
*
* @private
* @param {number} a - input value
* @param {number} b - input value
* @param {number} k - input value
* @returns {number} ratio value
*/
function risingFactorialRatio( a, b, k ) {
	var result;
	var i;
	if ( k === 0 ) {
		return 1.0;
	}
	result = 1.0;
	for ( i = 0; i < k; ++i ) {
		result *= ( a + i ) / ( b + i );
	}
	return result;
} // end FUNCTION risingFactorialRatio()


// EXPORTS //

module.exports = risingFactorialRatio;

},{}],1206:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14
* Copyright Christopher Kormanyos 2013-14
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var factorial = require( '@stdlib/math/base/special/factorial' );
var floor = require( '@stdlib/math/base/special/floor' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var EPSILON = require( '@stdlib/math/constants/float64-eps' );
var E = require( '@stdlib/math/constants/float64-e' );


// VARIABLES //

var MAX_FACTORIAL = 170;
var G = 10.90051099999999983936049829935654997826;
var NUM = [
	38474670393.31776828316099004518914832218,
	36857665043.51950660081971227404959150474,
	15889202453.72942008945006665994637853242,
	4059208354.298834770194507810788393801607,
	680547661.1834733286087695557084801366446,
	78239755.00312005289816041245285376206263,
	6246580.776401795264013335510453568106366,
	341986.3488721347032223777872763188768288,
	12287.19451182455120096222044424100527629,
	261.6140441641668190791708576058805625502,
	2.506628274631000502415573855452633787834
];
var DENOM = [
	0,
	362880,
	1026576,
	1172700,
	723680,
	269325,
	63273,
	9450,
	870,
	45,
	1
];


// FUNCTIONS //

/**
* Calculate the Lanczos sum approximation.
*
* @private
* @param {number} z - input value
* @returns {number} Lanczos approximation
*/
var lanczosSum = evalrational( NUM, DENOM );


/**
* Calculates the ratio of two gamma functions via Lanczos approximation.
*
* #### Notes
*
* - When \\( z < \epsilon \\), we get spurious numeric overflow unless we're very careful, this can occur either inside lanczosSum(z) or in the final combination of terms, to avoid this, split the product up into 2 (or 3) parts:
*
*   ``` tex
*    G(z) / G(L) = 1 / (z \cdot G(L)) ; z < \eps, L = z + \delta = \delta \\
*    z * G(L) = z * G(lim) \cdot (G(L)/G(lim)) ; lim = \text{largest factorial}
*   ````
*
* @private
* @param {number} z - function value
* @param {number} delta - difference
* @returns {number} gamma ratio
*/
function tgammaDeltaRatioImpLanczos( z, delta ) {
	var result;
	var ratio;
	var zgh;
	if ( z < EPSILON ) {
		if ( MAX_FACTORIAL < delta ) {
			ratio = tgammaDeltaRatioImpLanczos( delta, MAX_FACTORIAL - delta );
			ratio *= z;
			ratio *= factorial( MAX_FACTORIAL - 1 );
			return 1.0 / ratio;
		}
		return 1.0 / ( z * gamma( z + delta ) );
	}
	zgh = z + G - 0.5;
	if ( z + delta === z ) {
		if ( abs(delta) < 10.0 ) {
			result = exp( ( 0.5 - z ) * log1p( delta / zgh ) );
		} else {
			result = 1.0;
		}
	} else {
		if ( abs(delta) < 10.0 ) {
			result = exp( ( 0.5 - z ) * log1p( delta / zgh ));
		} else {
			result = pow( zgh / (zgh + delta), z - 0.5 );
		}
		// Split the calculation up to avoid spurious overflow:
		result *= lanczosSum( z ) / lanczosSum( z + delta );
	}
	result *= pow( E / ( zgh + delta ), delta );
	return result;
} // end FUNCTION tgammaDeltaRatioImpLanczos()


// MAIN //

/**
* Implementation of the gamma ratio.
*
* @private
* @param {number} z - function value
* @param {number} delta - difference
* @returns {number} gamma ratio
*/
function tgammaDeltaRatioImp( z, delta ) {
	var result;

	if ( z <= 0.0 || z + delta <= 0.0 ) {
		// This isn't very sophisticated, or accurate, but it does work:
		return gamma( z ) / gamma( z + delta );
	}
	if ( floor(delta) === delta ) {
		if ( floor(z) === z ) {
			// Both z and delta are integers, see if we can just use table lookup of the factorials to get the result:
			if ( z <= MAX_FACTORIAL && ( z + delta <= MAX_FACTORIAL ) ) {
				return factorial( floor(z) - 1.0 ) /
					factorial( floor(z+delta) - 1.0 );
			}
		}
		if ( abs(delta) < 20 ) {
			// Delta is a small integer, we can use a finite product:
			if ( delta === 0 ) {
				return 1.0;
			}
			if ( delta < 0 ) {
				z -= 1.0;
				result = z;
				delta += 1;
				while ( delta !== 0 ) {
					z -= 1;
					result *= z;
					delta += 1;
				}
				return result;
			}
			result = 1.0 / z;
			delta -= 1;
			while ( delta !== 0 ) {
				z += 1;
				result /= z;
				delta -= 1;
			}
			return result;
		}
	}
	return tgammaDeltaRatioImpLanczos( z, delta );
} // end FUNCTION tgammaDeltaRatioImp()


// EXPORTS //

module.exports = tgammaDeltaRatioImp;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/factorial":1262,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-e":1391,"@stdlib/math/constants/float64-eps":1392}],1207:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ibetaInvImp = require( './ibeta_inv_imp.js' );


// MAIN //

/**
* Returns a value p such that `p = betainc(a, b, x)`.
*
* @param {Probability} p - function parameter
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {boolean} [upper=false] - boolean indicating if the function should return the inverse of the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betaincinv( 0.2, 3.0, 3.0 );
* // returns ~0.327
*
* @example
* var y = betaincinv( 0.4, 3.0, 3.0 );
* // returns ~0.446
*
* @example
* var y = betaincinv( 0.4, 3.0, 3.0, true );
* // returns ~0.554
*
* @example
* var y = betaincinv( 0.4, 1.0, 6.0 );
* // returns ~0.082
*
* @example
* var y = betaincinv( 0.8, 1.0, 6.0 );
* // returns ~0.235
*/
function betaincinv( p, a, b, upper ) {
	if (
		isnan( p ) ||
		isnan( a ) ||
		isnan( b )
	) {
		return NaN;
	}
	if ( a <= 0.0 || b <= 0.0 ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( upper ) {
		return ibetaInvImp( a, b, 1.0 - p, p )[ 0 ];
	}
	return ibetaInvImp( a, b, p, 1.0 - p )[ 0 ];
} // end FUNCTION betaincinv()


// EXPORTS //

module.exports = betaincinv;

},{"./ibeta_inv_imp.js":1210,"@stdlib/math/base/assert/is-nan":43}],1208:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var inverseStudentsT = require( './inverse_students_t.js' );


// MAIN //

/**
* Returns the inverse of the incomplete beta function via the Student t distribution.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {Probability} p - probability value
* @param {Object} py - placeholder object holding one minus the returned value
* @returns {number} function value
*/
function findIBetaInvFromTDist( a, p, py ) {
	var df;
	var u;
	var v;
	var t;

	u = p / 2.0;
	v = 1.0 - u;
	df = a * 2.0;
	t = inverseStudentsT( df, u, v );
	if ( py ) {
		py.value = t * t / ( df + ( t*t ) );
	}
	return df / ( df + ( t*t ) );
} // end FUNCTION findIBetaInvFromTDist()


// EXPORTS //

module.exports = findIBetaInvFromTDist;

},{"./inverse_students_t.js":1213}],1209:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var abs = require( '@stdlib/math/base/special/abs');
var ldexp = require( '@stdlib/math/base/special/ldexp');
var sign = require( '@stdlib/math/base/special/signum');
var max = require( '@stdlib/math/base/special/max' );
var MAX_VALUE = require( '@stdlib/math/constants/float64-max' );


// MAIN //

/**
* Performs root finding via third order Halley iteration.
*
* @private
* @param {Array} fun - array of function and its first two derivatives
* @param {number} guess - initial starting value.
* @param {number} minimum - minimum possible value for the result,used as initial lower bracket.
* @param {number} maximum - maximum possible value for the result, used as initial upper bracket.
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/
function halleyIterate( fun, guess, minimum, maximum, digits, maxIter ) {
	var convergence;
	var outOfBounds;
	var delta1;
	var delta2;
	var factor;
	var result;
	var f0Last;
	var count;
	var delta;
	var denom;
	var diff;
	var num;
	var res;
	var f0;
	var f1;
	var f2;

	f0 = 0.0;
	outOfBounds = false;
	result = guess;
	factor = ldexp( 1.0, 1.0 - digits );
	delta = max( 10000000 * guess, 10000000 );  // Arbitrarily large delta...
	f0Last = 0;
	delta1 = delta;
	delta2 = delta;

	count = maxIter;
	do {
		f0Last = f0;
		delta2 = delta1;
		delta1 = delta;
		res = fun( result);
		f0 = res[ 0 ];
		f1 = res[ 1 ];
		f2 = res[ 2 ];
		count -= 1;

		if ( f0 === 0.0 ) {
			break;
		}
		if ( f1 === 0.0 ) {
			// Oops zero derivative!!!
			if ( f0Last === 0.0 ) {
				// Must be the first iteration, pretend that we had a previous one at either min or max:
				if ( result === minimum ) {
					guess = maximum;
				} else {
					guess = minimum;
				}
				f0Last = fun( guess );
				delta = guess - result;
			}
			if ( sign( f0Last ) * sign( f0 ) < 0 ) {
				// We've crossed over so move in opposite direction to last step:
				if ( delta < 0 ) {
					delta = ( result - minimum ) / 2.0;
				} else {
					delta = ( result - maximum ) / 2.0;
				}
			// Move in same direction as last step:
			} else if ( delta < 0 ) {
				delta = (result - maximum) / 2;
			} else {
				delta = (result - minimum) / 2;
			}
			// eslint-disable-next-line no-negated-condition
		} else if ( f2 === 0.0 ) {
			delta = f0 / f1;
		} else {
			denom = 2.0 * f0;
			num = ( 2.0 * f1 ) - ( f0 * ( f2 / f1 ) );
			if ( abs(num) < 1.0 && ( abs(denom) >= abs(num) * MAX_VALUE ) ) {
				// Possible overflow, use Newton step:
				delta = f0 / f1;
			} else {
				delta = denom / num;
			}
			if ( delta * f1 / f0 < 0.0 ) {
				// Probably cancellation error, try a Newton step instead:
				delta = f0 / f1;
				if ( abs(delta) > 2.0 * abs(guess) ) {
					delta = ( delta < 0.0 ? -1.0 : 1.0 ) * 2.0 * abs( guess );
				}
			}
		}
		convergence = abs( delta / delta2 );
		if ( convergence > 0.8 && convergence < 2.0 ) {
			// Last two steps haven't converged, try bisection:
			delta = delta > 0.0 ?
				( result - minimum ) / 2.0 :
				( result - maximum ) / 2.0;
			if ( abs(delta) > result ) {
				delta = sign( delta ) * result; // Protect against huge jumps!
			}
			// Reset delta2 so that this branch will *not* be taken on the next iteration:
			delta2 = delta * 3;
		}
		guess = result;
		result -= delta;

		// Check for out of bounds step:
		if ( result < minimum ) {
			if (
				abs(minimum) < 1 &&
				abs(result) > 1 &&
				( MAX_VALUE / abs(result) < abs(minimum) )
			) {
				diff = 1000.0;
			} else {
				diff = result / minimum;
			}
			if ( abs(diff) < 1.0 ) {
				diff = 1.0 / diff;
			}
			if ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {
				// Only a small out of bounds step, lets assume that the result is probably approximately at minimum:
				delta = 0.99 * (guess - minimum);
				result = guess - delta;
				outOfBounds = true; // Only take this branch once!
			} else {
				delta = (guess - minimum) / 2.0;
				result = guess - delta;
				if ( result === minimum || result === maximum ) {
					break;
				}
			}
		}
		else if ( result > maximum ) {
			if (
				abs(maximum) < 1.0 &&
				abs(result) > 1.0 &&
				MAX_VALUE / abs(result) < abs(maximum)
			) {
				diff = 1000.0;
			} else {
				diff = result / maximum;
			}
			if ( abs(diff) < 1.0 ) {
				diff = 1.0 / diff;
			}
			if ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {
				// Only a small out of bounds step, lets assume that the result is probably approximately at minimum:
				delta = 0.99 * (guess - maximum);
				result = guess - delta;
				outOfBounds = true; // Only take this branch once!
			} else {
				delta = ( guess - maximum ) / 2.0;
				result = guess - delta;
				if ( result === minimum || result === maximum ) {
					break;
				}
			}
		}
		// Update brackets:
		if ( delta > 0.0 ) {
			maximum = guess;
		} else {
			minimum = guess;
		}
	} while ( count && ( abs(result * factor) < abs(delta) ) );

	return result;
} // end FUNCTION halleyIterate()


// EXPORTS //

module.exports = halleyIterate;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/ldexp":1298,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/signum":1328,"@stdlib/math/constants/float64-max":1408}],1210:[function(require,module,exports){
/* eslint-disable max-statements, max-len, no-mixed-operators */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var asin = require( '@stdlib/math/base/special/asin' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var sin = require( '@stdlib/math/base/special/sin' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var FLOAT64_MIN_NORM = require( '@stdlib/math/constants/float64-smallest-normal' );
var HALF_PI = require( '@stdlib/math/constants/float64-half-pi' );
var EPSILON = require( '@stdlib/math/constants/float64-eps' );
var findIBetaInvFromTDist = require( './find_ibeta_inv_from_t_dist.js' );
var temme1 = require( './temme1.js' );
var temme2 = require( './temme2.js' );
var temme3 = require( './temme3.js' );
var halleyIterate = require( './halley_iterate.js' );
var ibetaRoots = require( './ibeta_roots.js' );


// VARIABLES //

// Workspace for the polynomial coefficients:
var terms = new Array( 5 );


// MAIN //

/**
* Calculates the inverse of the incomplete beta function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1 - p`
* @returns {Array} two-element array holding function value `y` and `1-y`
*/
function ibetaInvImp( a, b, p, q ) {
	var maxIter;
	var digits;
	var invert;
	var lambda;
	var lower;
	var theta;
	var upper;
	var roots;
	var maxv;
	var minv;
	var bet;
	var ppa;
	var tmp;
	var xs2;
	var ap1;
	var bm1;
	var fs;
	var lx;
	var ps;
	var xg;
	var xs;
	var yp;
	var a2;
	var a3;
	var b2;
	var r;
	var l;
	var u;
	var x;
	var y;

	// The flag invert is set to true if we swap a for b and p for q, in which case the result has to be subtracted from 1:
	invert = false;
	// Handle trivial cases first...
	if ( q === 0.0 ) {
		return [ 1.0, 0.0 ];
	}
	else if ( p === 0.0 ) {
		return [ 0.0, 1.0 ];
	}
	else if ( a === 1.0 ) {
		if ( b === 1.0 ) {
			return [ p, 1.0 - p ];
		}
		// Change things around so we can handle as b == 1 special case below:
		tmp = b;
		b = a;
		a = tmp;

		tmp = q;
		q = p;
		p = tmp;

		invert = true;
	}
	// Depending upon which approximation method we use, we may end up calculating either x or y initially (where y = 1-x):
	x = 0.0; // Set to a safe zero to avoid a

	// For some of the methods we can put tighter bounds on the result than simply [0,1]:
	lower = 0.0;
	upper = 1.0;

	// Student's T with b = 0.5 gets handled as a special case, swap around if the arguments are in the "wrong" order:
	if ( a === 0.5 ) {
		if ( b === 0.5 ) {
			x = sin( p * HALF_PI );
			x *= x;
			y = sin( q * HALF_PI );
			y *= y;
			return [ x, y ];
		}
		else if ( b > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
		}
	}
	// Select calculation method for the initial estimate:
	if ( b === 0.5 && a >= 0.5 && p !== 1.0 ) {
		// We have a Student's T distribution:
		yp = {};
		x = findIBetaInvFromTDist( a, p, yp );
		y = yp.value;
	}
	else if ( b === 1.0 ) {
		if ( p < q ) {
			if ( a > 1.0 ) {
				x = pow( p, 1.0 / a );
				y = -expm1( ln(p) / a );
			} else {
				x = pow( p, 1.0 / a );
				y = 1.0 - x;
			}
		} else {
			x = exp( log1p(-q) / a );
			y = -expm1( log1p(-q) / a );
		}
		if ( invert ) {
			tmp = y;
			y = x;
			x = tmp;
		}
		return [ x, y ];
	}
	else if ( a + b > 5.0 ) {
		// When a+b is large then we can use one of Prof Temme's asymptotic expansions, begin by swapping things around so that p < 0.5, we do this to avoid cancellations errors when p is large.
		if ( p > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
		}
		minv = min( a, b );
		maxv = max( a, b );
		if ( ( sqrt(minv) > (maxv - minv) ) && minv > 5.0 ) {
			// When a and b differ by a small amount the curve is quite symmetrical and we can use an error function to approximate the inverse. This is the cheapest of the three Temme expansions, and the calculated value for x will never be much larger than p, so we don't have to worry about cancellation as long as p is small.
			x = temme1( a, b, p );
			y = 1.0 - x;
		} else {
			r = a + b;
			theta = asin( sqrt( a/r ) );
			lambda = minv / r;
			if (
				lambda >= 0.2 &&
				lambda <= 0.8 &&
				r >= 10
			) {
				// The second error function case is the next cheapest to use, it breaks down when the result is likely to be very small, if `a+b` is also small, but we can use a cheaper expansion there in any case. As before `x` won't be much larger than `p`, so as long as `p` is small we should be free of cancellation error.
				ppa = pow( p, 1.0/a );
				if ( ppa < 0.0025 && ( a + b < 200.0 ) ) {
					x = ppa * pow( a * beta( a, b ), 1.0/a );
				} else {
					x = temme2( p, r, theta );
				}
				y = 1.0 - x;
			} else {
				// If we get here then a and b are very different in magnitude and we need to use the third of Temme's methods which involves inverting the incomplete gamma.  This is much more expensive than the other methods.  We also can only use this method when a > b, which can lead to cancellation errors if we really want y (as we will when x is close to 1), so a different expansion is used in that case.
				if ( a < b ) {
					tmp = b;
					b = a;
					a = tmp;

					tmp = q;
					q = p;
					p = tmp;
					invert = !invert;
				}
				// Try and compute the easy way first:
				bet = 0.0;
				if ( b < 2.0 ) {
					bet = beta( a, b );
				}
				if ( bet === 0.0 ) {
					y = 1.0;
				} else {
					y = pow( b * q * bet, 1.0/b );
					x = 1.0 - y;
				}
			}
			if ( y > 1e-5 ) {
				x = temme3( a, b, p, q );
				y = 1.0 - x;
			}
		}
	}
	else if ( a < 1.0 && b < 1.0 ) {
		// Both a and b less than 1, there is a point of inflection at xs:
		xs = ( 1.0 - a ) / ( 2.0 - a - b );

		// Now we need to ensure that we start our iteration from the right side of the inflection point:
		fs = betainc( xs, a, b ) - p;
		if ( abs(fs) / p < EPSILON * 3.0 ) {
			// The result is at the point of inflection, best just return it:
			if ( invert ) {
				return [ 1.0 - xs, xs ];
			}
			return [ xs, 1.0 - xs ];
		}
		if ( fs < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
			xs = 1.0 - xs;
		}
		xg = pow( a * p * beta( a, b ), 1.0/a );
		x = xg / ( 1.0 + xg );
		y = 1.0 / ( 1.0 + xg );

		// And finally we know that our result is below the inflection point, so set an upper limit on our search:
		if ( x > xs ) {
			x = xs;
		}
		upper = xs;
	}
	else if ( a > 1.0 && b > 1.0 ) {
		// Small a and b, both greater than 1, there is a point of inflection at xs, and it's complement is xs2, we must always start our iteration from the right side of the point of inflection.
		xs = ( a - 1.0 ) / ( a + b - 2.0 );
		xs2 = ( b - 1.0 ) / ( a + b - 2.0 );
		ps = betainc( xs, a, b ) - p;

		if ( ps < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			tmp = xs2;
			xs2 = xs;
			xs = tmp;

			invert = !invert;
		}
		// Estimate x and y, using expm1 to get a good estimate for y when it's very small:
		lx = ln( p * a * beta( a, b ) ) / a;
		x = exp( lx );
		y = x < 0.9 ? 1.0 - x : -expm1(lx);

		if ( b < a && x < 0.2 ) {
			// Under a limited range of circumstances we can improve our estimate for x...
			ap1 = a - 1.0;
			bm1 = b - 1.0;
			a2 = a * a;
			a3 = a * a2;
			b2 = b * b;
			terms[ 0 ] = 0;
			terms[ 1 ] = 1;
			terms[ 2 ] = bm1 / ap1;
			ap1 *= ap1;
			terms[ 3 ] = bm1 * (3 * a * b + 5 * b + a2 - a - 4) / (2 * (a + 2) * ap1);
			ap1 *= (a + 1);
			terms[ 4 ] = bm1 * (33 * a * b2 + 31 * b2 + 8 * a2 * b2 - 30 * a * b - 47 * b + 11 * a2 * b + 6 * a3 * b + 18 + 4 * a - a3 + a2 * a2 - 10 * a2);
			terms[ 4 ] /= (3 * (a + 3) * (a + 2) * ap1);
			x = evalpoly( terms, x );
		}
		// Know that result is below the inflection point, so set an upper limit on search...
		if ( x > xs ) {
			x = xs;
		}
		upper = xs;
	} else {
		// Case: ( a <= 1 ) != ( b <= 1 )
		// If all else fails we get here, only one of a and b is above 1, and a+b is small.  Start by swapping things around so that we have a concave curve with b > a and no points of inflection in [0,1].  As long as we expect x to be small then we can use the simple (and cheap) power term to estimate x, but when we expect x to be large then this greatly underestimates x and leaves us trying to iterate "round the corner" which may take almost forever. We could use Temme's inverse gamma function case in that case, this works really rather well (albeit expensively) even though strictly speaking we're outside it's defined range. However it's expensive to compute, and an alternative approach which models the curve as a distorted quarter circle is much cheaper to compute, and still keeps the number of iterations required down to a reasonable level. With thanks to Prof. Temme for this suggestion.
		if ( b < a ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;
			invert = !invert;
		}
		if ( pow( p, 1.0/a ) < 0.5 ) {
			x = pow( p * a * beta( a, b ), 1.0/a );
			if ( x === 0 ) {
				x = FLOAT64_MIN_NORM;
			}
			y = 1.0 - x;
		}
		else {
			// Case: pow(q, 1/b) < 0.1
			// Model a distorted quarter circle:
			y = pow( 1.0 - pow( p, b * beta( a, b ) ), 1.0/b );
			if ( y === 0 ) {
				y = FLOAT64_MIN_NORM;
			}
			x = 1.0 - y;
		}
	}
	// Now we have a guess for x (and for y) we can set things up for iteration.  If x > 0.5 it pays to swap things round:
	if ( x > 0.5 ) {
		tmp = b;
		b = a;
		a = tmp;

		tmp = q;
		q = p;
		p = tmp;

		tmp = y;
		y = x;
		x = tmp;

		invert = !invert;
		l = 1.0 - upper;
		u = 1.0 - lower;
		lower = l;
		upper = u;
	}
	// Lower bound for our search:  We're not interested in denormalised answers as these tend to take up lots of iterations, given that we can't get accurate derivatives in this area (they tend to be infinite).
	if ( lower === 0 ) {
		if ( invert ) {
			// We're not interested in answers smaller than machine epsilon:
			lower = EPSILON;
			if ( x < lower ) {
				x = lower;
			}
		} else {
			lower = FLOAT64_MIN_NORM;
		}
		if ( x < lower ) {
			x = lower;
		}
	}
	// Figure out how many digits to iterate towards:
	digits = 32;
	if ( x < 1e-50 && ( a < 1.0 || b < 1.0 ) ) {
		// If we're in a region where the first derivative is very large, then we have to take care that the root-finder doesn't terminate prematurely.  We'll bump the precision up to avoid this, but we have to take care not to set the precision too high or the last few iterations will just thrash around and convergence may be slow in this case. Try 3/4 of machine epsilon:
		digits *= 3;
		digits /= 2;
	}
	// Now iterate, we can use either p or q as the target here depending on which is smaller:
	maxIter = 1000;
	roots = ibetaRoots( a, b, ( p < q ? p : q ), p >= q );
	x = halleyIterate( roots, x, lower, upper, digits, maxIter );

	// Tidy up, if we "lower" was too high then zero is the best answer we have:
	if ( x === lower ) {
		x = 0.0;
	}
	if ( invert ) {
		return [ 1.0 - x, x ];
	}
	return [ x, 1.0 - x ];
} // end FUNCTION ibetaInvImp()


// EXPORTS //

module.exports= ibetaInvImp;

},{"./find_ibeta_inv_from_t_dist.js":1208,"./halley_iterate.js":1209,"./ibeta_roots.js":1211,"./temme1.js":1219,"./temme2.js":1220,"./temme3.js":1221,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/asin":1187,"@stdlib/math/base/special/beta":1193,"@stdlib/math/base/special/betainc":1203,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sin":1330,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float64-eps":1392,"@stdlib/math/constants/float64-half-pi":1397,"@stdlib/math/constants/float64-smallest-normal":1415}],1211:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc/lib/ibeta_imp.js' );
var abs = require( '@stdlib/math/base/special/abs');
var FLOAT64_MAX = require( '@stdlib/math/constants/float64-max' );
var FLOAT64_MIN_NORM = require( '@stdlib/math/constants/float64-smallest-normal' );


// MAIN //

/**
* Returns a root finding function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} target - probability value
* @param {boolean} invert - boolean indicating whether to find the roots of the upper or lower incomplete beta function
* @returns {Function} root finding function
*/
function ibetaRoots( a, b, target, invert ) {
	invert = invert || false;
	return roots;

	/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - input value
	* @returns {Array} roots
	*/
	function roots( x ) {
		var f1p;
		var f1;
		var f2;
		var f;
		var y;

		y = 1.0 - x;
		f1p = {};
		f = betainc( a, b, x, invert, true, f1p ) - target;
		f1 = f1p.value;
		if ( invert ) {
			f1 = -f1;
		}
		if ( y === 0.0 ) {
			y = FLOAT64_MIN_NORM * 64.0;
		}
		if ( x === 0.0 ) {
			x = FLOAT64_MIN_NORM * 64.0;
		}
		f2 = f1 * ( -(y*a) + ( ( b-2.0 ) * x ) + 1.0 );
		if ( abs( f2 ) < y * x * FLOAT64_MAX ) {
			f2 /= (y * x);
		}
		if ( invert ) {
			f2 = -f2;
		}
		// Make sure we don't have a zero derivative:
		if ( f1 === 0.0 ) {
			f1 = (invert ? -1.0 : 1.0) * FLOAT64_MIN_NORM * 64.0;
		}
		return [ f, f1, f2 ];
	} // end FUNCTION roots()
} // end FUNCTION ibetaRoots()


// EXPORTS //

module.exports = ibetaRoots;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/betainc/lib/ibeta_imp.js":1200,"@stdlib/math/constants/float64-max":1408,"@stdlib/math/constants/float64-smallest-normal":1415}],1212:[function(require,module,exports){
'use strict';

/**
* Evaluate the inverse of the incomplete beta function.
*
* @module @stdlib/math/base/special/betaincinv
*
* @example
* var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
*
* var y = betaincinv( 0.2, 3.0, 3.0 );
* // returns ~0.327
*
* y = betaincinv( 0.4, 3.0, 3.0 );
* // returns ~0.446
*
* y = betaincinv( 0.4, 3.0, 3.0, true );
* // returns ~0.554
*
* y = betaincinv( 0.4, 1.0, 6.0 );
* // returns ~0.082
*
* y = betaincinv( 0.8, 1.0, 6.0 );
* // returns ~0.235
*/

// MODULES //

var betaincinv = require( './betaincinv.js' );


// EXPORTS //

module.exports = betaincinv;

},{"./betaincinv.js":1207}],1213:[function(require,module,exports){
/* eslint-disable max-len, no-mixed-operators */
'use strict';

// MODULES //

var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var round = require( '@stdlib/math/base/special/round' );
var acos = require( '@stdlib/math/base/special/acos' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var cos = require( '@stdlib/math/base/special/cos' );
var pow = require( '@stdlib/math/base/special/pow' );
var sin = require( '@stdlib/math/base/special/sin' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var inverseStudentsTBodySeries = require( './inverse_students_t_body_series.js' );
var inverseStudentsTTailSeries = require( './inverse_students_t_tail_series.js' );
var inverseStudentsTHill = require( './inverse_students_t_hill.js' );


// MAIN //

/**
* Evaluates Student's t quantiles.
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @param {Probability} v - probability equal to `1-u`
*@returns {number} function value
*/
function inverseStudentsT( df, u, v ) {
	var crossover;
	var tolerance;
	var rootAlpha;
	var invert;
	var result;
	var alpha;
	var tmp;
	var p0;
	var p2;
	var p4;
	var p5;
	var p;
	var r;
	var x;
	var a;
	var b;
	var c;

	invert = false;
	result = 0;
	if ( u > v ) {
		// Function is symmetric, so invert it:
		tmp = v;
		v = u;
		u = tmp;
		invert = true;
	}
	if ( floor(df) === df && df < 20 ) {
		// We have integer degrees of freedom, try for the special cases first:
		tolerance = ldexp( 1.0, ( 2 * 53 ) / 3 );

		switch ( floor( df ) ) {
		case 1:
			// `df = 1` is the same as the Cauchy distribution, see Shaw Eq 35:
			if ( u === 0.5 ) {
				result = 0;
			} else {
				result = -cos( PI * u) / sin( PI * u);
			}
			break;
		case 2:
			// `df = 2` has an exact result, see Shaw Eq 36:
			result = ( (2.0*u) - 1) / sqrt( 2.0 * u * v );
			break;
		case 4:
			// `df = 4` has an exact result, see Shaw Eq 38 & 39:
			alpha = 4 * u * v;
			rootAlpha = sqrt( alpha );
			r = 4 * cos( acos( rootAlpha ) / 3 ) / rootAlpha;
			x = sqrt( r - 4 );
			result = u - 0.5 < 0 ? -x : x;
			break;
		case 6:
			// We get numeric overflow in this area:
			if ( u < 1e-150 ) {
				return ( invert ? -1 : 1 ) * inverseStudentsTHill( df, u );
			}
			// Newton-Raphson iteration of a polynomial case, choice of seed value is taken from Shaw's online supplement:
			a = 4.0 * ( u - (u*u) );// 1 - 4 * (u - 0.5f) * (u - 0.5f);
			b = pow( a, 1/3 );
			c = 0.85498797333834849467655443627193;
			p = 6 * ( 1 + ( c * ( (1/b) - 1 ) ) );
			do {
				p2 = p * p;
				p4 = p2 * p2;
				p5 = p * p4;
				p0 = p;
				// Next term is given by Eq 41:
				p = 2 * (8 * a * p5 - 270 * p2 + 2187) /
					(5 * (4 * a * p4 - 216 * p - 243));
			} while ( abs( (p - p0) / p ) > tolerance );
			// Use Eq 45 to extract the result:
			p = sqrt( p - df );
			result = (u - 0.5) < 0 ? -p : p;
			break;
		default:
			if ( df > 0x10000000 ) {
				result = erfcinv( 2.0 * u ) * SQRT2;
			} else if ( df < 3 ) {
				// Use a roughly linear scheme to choose between Shaw's tail series and body series:
				crossover = 0.2742 - ( df * 0.0242143 );
				if ( u > crossover ) {
					result = inverseStudentsTBodySeries( df, u );
				} else {
					result = inverseStudentsTTailSeries( df, u );
				}
			} else {
				// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:
				crossover = ldexp( 1.0, round( df / -0.654 ) );
				if ( u > crossover ) {
					result = inverseStudentsTHill( df, u );
				} else {
					result = inverseStudentsTTailSeries( df, u );
				}
			}
		}
	} else if ( df > 0x10000000 ) {
		result = -erfcinv( 2 * u ) * SQRT2;
	} else if ( df < 3 ) {
		// Use a roughly linear scheme to choose between Shaw's tail series and body series:
		crossover = 0.2742 - ( df * 0.0242143 );
		if ( u > crossover ) {
			result = inverseStudentsTBodySeries( df, u );
		} else {
			result = inverseStudentsTTailSeries( df, u );
		}
	} else {
		// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:
		crossover = ldexp( 1.0, round( df / -0.654) );
		if ( u > crossover ) {
			result = inverseStudentsTHill( df, u );
		} else {
			result = inverseStudentsTTailSeries( df, u );
		}
	}
	return invert ? -result : result;
} // end FUNCTION inverseStudentsT()


// EXPORTS //

module.exports = inverseStudentsT;

},{"./inverse_students_t_body_series.js":1214,"./inverse_students_t_hill.js":1215,"./inverse_students_t_tail_series.js":1216,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/acos":1185,"@stdlib/math/base/special/cos":1237,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/ldexp":1298,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/special/sin":1330,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-sqrt-two":1421}],1214:[function(require,module,exports){
/* eslint-disable max-len, no-mixed-operators */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var sqrt = require( '@stdlib/math/base/special/sqrt');
var PI = require( '@stdlib/math/constants/float64-pi' );
var tgammaDeltaRatio = require( './tgamma_delta_ratio.js' );


// VARIABLES //

// Workspace for the polynomial coefficients:
var c = new Array( 10 );


// MAIN //

/**
* Evaluates Student's t quantiles via a body series expansion. Tail and body series are due to Shaw.
*
* #### References
*
* - Shaw, W.T., 2006, "Sampling Student's T distribution - use of the inverse cumulative distribution function.", Journal of Computational Finance, Vol 9 Issue 4, pp 37-73, Summer 2006 (www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf)
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTBodySeries( df, u ) {
	var idf;
	var c0;
	var v;

	// Body series for small N, start with Eq 56 of Shaw:
	v = tgammaDeltaRatio( df / 2, 0.5 ) *
		sqrt( df * PI ) * ( u - 0.5 );
	c0 = 0;
	c[ 0 ] = 1;

	// Figure out what the coefficients are. They depend only on the degrees of freedom (Eq 57 of Shaw):
	idf = 1.0 / df;
	c[ 1 ] = 0.16666666666666666667 + 0.16666666666666666667 * idf;
	c[ 2 ] = (0.0083333333333333333333 * idf +
		0.066666666666666666667) * idf +
		0.058333333333333333333;
	c[ 3 ] = ((0.00019841269841269841270 * idf +
		0.0017857142857142857143) * idf +
		0.026785714285714285714) * idf +
		0.025198412698412698413;
	c[ 4 ] = (((2.7557319223985890653e-6 * idf +
		0.00037477954144620811287) * idf -
		0.0011078042328042328042) * idf +
		0.010559964726631393298) * idf +
		0.012039792768959435626;
	c[ 5 ] = ((((2.5052108385441718775e-8 * idf -
		0.000062705427288760622094) * idf +
		0.00059458674042007375341) * idf -
		0.0016095979637646304313) * idf +
		0.0061039211560044893378) * idf +
		0.0038370059724226390893;
	c[ 6 ] = (((((1.6059043836821614599e-10 * idf +
		0.000015401265401265401265) * idf -
		0.00016376804137220803887) * idf +
		0.00069084207973096861986) * idf -
		0.0012579159844784844785) * idf +
		0.0010898206731540064873) * idf +
		0.0032177478835464946576;
	c[ 7 ] = ((((((7.6471637318198164759e-13 * idf -
		3.9851014346715404916e-6) * idf +
		0.000049255746366361445727) * idf -
		0.00024947258047043099953) * idf +
		0.00064513046951456342991) * idf -
		0.00076245135440323932387) * idf +
		0.000033530976880017885309) * idf +
		0.0017438262298340009980;
	c[ 8 ] = (((((((2.8114572543455207632e-15 * idf +
		1.0914179173496789432e-6) * idf -
		0.000015303004486655377567) * idf +
		0.000090867107935219902229) * idf -
		0.00029133414466938067350) * idf +
		0.00051406605788341121363) * idf -
		0.00036307660358786885787) * idf -
		0.00031101086326318780412) * idf +
		0.00096472747321388644237;
	c[ 9 ] = ((((((((8.2206352466243297170e-18 * idf -
		3.1239569599829868045e-7) * idf +
		4.8903045291975346210e-6) * idf -
		0.000033202652391372058698) * idf +
		0.00012645437628698076975) * idf -
		0.00028690924218514613987) * idf +
		0.00035764655430568632777) * idf -
		0.00010230378073700412687) * idf -
		0.00036942667800009661203) * idf +
		0.00054229262813129686486;
	// Result is then a polynomial in v (see Eq 56 of Shaw)...
	// evaluate_odd_polynomial:
	return c0 + ( v * evalpoly( c, v*v ) );
} // end FUNCTION inverseStudentsTBodySeries()


// EXPORTS //

module.exports = inverseStudentsTBodySeries;

},{"./tgamma_delta_ratio.js":1222,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float64-pi":1413}],1215:[function(require,module,exports){
/* eslint-disable no-mixed-operators */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var expm1 = require( '@stdlib/math/base/special/expm1');
var sqrt = require( '@stdlib/math/base/special/sqrt');
var pow = require( '@stdlib/math/base/special/pow');
var PI = require( '@stdlib/math/constants/float64-pi' );
var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );


// MAIN //

/**
* Evaluates Student's t quantiles via a method due to Hill.
*
* #### References
*
* - G. W. Hill, Algorithm 396, Student's t-Quantiles Communications of the ACM, 13(10): 619-620, Oct., 1970.
*
* @private
* @param {PositiveNumber} ndf - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTHill( ndf, u ) {
	var a;
	var b;
	var c;
	var d;
	var q;
	var x;
	var y;

	if ( ndf > 1e20 ) {
		return -erfcinv( 2 * u ) * SQRT2;
	}
	a = 1.0 / ( ndf - 0.5 );
	b = 48.0 / (a * a);
	c = ((20700 * a / b - 98) * a - 16) * a + 96.36;
	d = ((94.5 / (b + c) - 3) / b + 1) * sqrt( a * PI / 2 ) * ndf;
	y = pow(d * 2 * u, 2 / ndf);

	if ( y > ( 0.05 + a ) ) {
		// Asymptotic inverse expansion about normal:
		x = -erfcinv( 2 * u ) * SQRT2;
		y = x * x;

		if ( ndf < 5.0 ) {
			c += 0.3 * ( ndf - 4.5 ) * ( x + 0.6 );
		}
		c += (((0.05 * d * x - 5) * x - 7) * x - 2) * x + b;
		y = (((((0.4 * y + 6.3) * y + 36) * y + 94.5) / c - y - 3) / b + 1) * x;
		y = expm1( a * y * y );
	} else {
		y = ((1 / ( ( (ndf + 6) / (ndf * y) - 0.089 * d - 0.822 ) *
		(ndf + 2) * 3 ) + 0.5 / (ndf + 4)) * y - 1) *
		(ndf + 1) / (ndf + 2) + 1 / y;
	}
	q = sqrt( ndf * y );
	return -q;
} // end FUNCTION inverseStudentsTHill()


// EXPORTS //

module.exports = inverseStudentsTHill;

},{"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-sqrt-two":1421}],1216:[function(require,module,exports){
/* eslint-disable max-len, no-mixed-operators */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var sqrt = require( '@stdlib/math/base/special/sqrt');
var pow = require( '@stdlib/math/base/special/pow');
var PI = require( '@stdlib/math/constants/float64-pi' );
var tgammaDeltaRatio = require( './tgamma_delta_ratio.js' );


// VARIABLES //

// Array for the coefficients d(k), these depend only on the number of degrees of freedom df, so at least in theory we could tabulate these for fixed df, see p15 of Shaw:
var d = new Array( 7 );


// MAIN //

/**
* Evaluates Student's t quantiles via a tail series expansion. Tail and body series are due to Shaw.
*
* #### References
*
* - Shaw, W.T., 2006, "Sampling Student's T distribution - use of the inverse cumulative distribution function.", Journal of Computational Finance, Vol 9 Issue 4, pp 37-73, Summer 2006 (www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf)
*
* @private
* @param {number} df - degrees of freedom
* @param {number} v - function value
* @returns {number} tail value
*/
function inverseStudentsTTailSeries( df, v ) {
	var result;
	var power;
	var div;
	var np2;
	var np4;
	var np6;
	var rn;
	var w;

	// Tail series expansion, see section 6 of Shaw's paper. `w` is calculated using Eq 60:
	w = tgammaDeltaRatio( df / 2.0, 0.5 ) * sqrt( df * PI ) * v;

	// Define some variables:
	np2 = df + 2;
	np4 = df + 4;
	np6 = df + 6;

	d[ 0 ] = 1;
	d[ 1 ] = -(df + 1) / (2 * np2);
	np2 *= (df + 2);
	d[ 2 ] = -df * (df + 1) * (df + 3) / (8 * np2 * np4);
	np2 *= df + 2;
	d[ 3 ] = -df * (df + 1) * (df + 5) * (((3 * df) + 7) * df -2) / (48 * np2 * np4 * np6);
	np2 *= (df + 2);
	np4 *= (df + 4);
	d[ 4 ] = -df * (df + 1) * (df + 7) *
		( (((((15 * df) + 154) * df + 465) * df + 286) * df - 336) * df + 64 ) /
		(384 * np2 * np4 * np6 * (df + 8));
	np2 *= (df + 2);
	d[ 5 ] = -df * (df + 1) * (df + 3) * (df + 9) *
		(((((((35 * df + 452) * df + 1573) * df + 600) * df - 2020) * df) + 928) * df -128) /
		(1280 * np2 * np4 * np6 * (df + 8) * (df + 10));
	np2 *= (df + 2);
	np4 *= (df + 4);
	np6 *= (df + 6);
	d[ 6 ] = -df * (df + 1) * (df + 11) *
		((((((((((((945 * df) + 31506) * df + 425858) * df + 2980236) * df + 11266745) * df + 20675018) * df + 7747124) * df - 22574632) * df - 8565600) * df + 18108416) * df - 7099392) * df + 884736) /
		(46080 * np2 * np4 * np6 * (df + 8) * (df + 10) * (df +12));

	// Now bring everything together to provide the result this is Eq 62 of Shaw:
	rn = sqrt( df );
	div = pow( rn * w, 1 / df );
	power = div * div;
	result = evalpoly( d, power );
	result *= rn;
	result /= div;
	return -result;
} // end FUNCTION inverseStudentsTTailSeries()


// EXPORTS //

module.exports = inverseStudentsTTailSeries;

},{"./tgamma_delta_ratio.js":1222,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float64-pi":1413}],1217:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var sign = require( '@stdlib/math/base/special/signum' );
var abs = require( '@stdlib/math/base/special/abs' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var MAX_VALUE = require( '@stdlib/math/constants/float64-max' );


// MAIN //

/**
* Performs root finding via second order Newton-Raphson iteration.
*
* @private
* @param {Array} fun - two-element array of the function and its first derivative
* @param {number} guess - initial starting value.
* @param {number} min - minimum possible value for the result,used as initial lower bracket.
* @param {number} max - maximum possible value for the result, used as initial upper bracket.
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/
function newtonRaphsonIterate( fun, guess, min, max, digits, maxIter ) {
	var f0last;
	var delta1;
	var delta2;
	var factor;
	var result;
	var count;
	var delta;
	var res;
	var f0;
	var f1;

	f0 = 0.0;
	f0last = 0.0;
	result = guess;

	factor = ldexp( 1.0, 1.0 - digits );
	delta = MAX_VALUE;
	delta1 = MAX_VALUE;
	delta2 = MAX_VALUE;

	count = maxIter;
	do {
		f0last = f0;
		delta2 = delta1;
		delta1 = delta;
		res = fun(result);
		f0 = res[ 0 ];
		f1 = res[ 1 ];
		count -= 1;
		if ( f0 === 0.0 ) {
			break;
		}
		if ( f1 === 0.0 ) {
			// Oops zero derivative!!!
			if ( f0last === 0.0 ) {
				// Must be the first iteration, pretend that we had a previous one at either min or max:
				if ( result === min ) {
					guess = max;
				} else {
					guess = min;
				}
				f0last = fun( guess );
				delta = guess - result;
			}
			if ( sign(f0last) * sign(f0) < 0 ) {
				// We've crossed over so move in opposite direction to last step:
				if ( delta < 0 ) {
					delta = (result - min) / 2.0;
				} else {
					delta = (result - max) / 2.0;
				}
			} else if ( delta < 0 ) {
				delta = (result - max) / 2.0;
			} else {
				delta = (result - min) / 2.0;
			}
		} else {
			delta = f0 / f1;
		}
		if ( abs(delta * 2.0) > abs(delta2) ) {
			// Last two steps haven't converged, try bisection:
			delta = delta > 0.0 ? (result - min) / 2.0 : (result - max) / 2.0;
		}
		guess = result;
		result -= delta;
		if ( result <= min ) {
			delta = 0.5 * (guess - min);
			result = guess - delta;
			if ( result === min || result === max ) {
				break;
			}
		} else if ( result >= max ) {
			delta = 0.5 * (guess - max);
			result = guess - delta;
			if ( result === min || result === max ) {
				break;
			}
		}
		// Update brackets:
		if ( delta > 0.0 ) {
			max = guess;
		} else {
			min = guess;
		}
	}
	while ( count && ( abs(result * factor) < abs(delta) ) );

	return result;
} // end FUNCTION newtonRaphsonIterate()


// EXPORTS //

module.exports = newtonRaphsonIterate;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/ldexp":1298,"@stdlib/math/base/special/signum":1328,"@stdlib/math/constants/float64-max":1408}],1218:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var MAX_VALUE = require( '@stdlib/math/constants/float64-max' );


// MAIN //

/**
* Helper function used by root finding code to convert `eta` to `x`.
*
* @private
* @param {number} t - first parameter
* @param {number} a - second parameter
* @returns {Function} root function
*/
function temmeRootFinder( t, a ) {
	return roots;

	/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - function value
	* @returns {Array} function roots
	*/
	function roots( x ) {
		var big;
		var f1;
		var f;
		var y;

		y = 1.0 - x;
		if ( y === 0.0 ) {
			big = MAX_VALUE / 4.0;
			return [ -big, -big ];
		}
		if ( x === 0.0 ) {
			big = MAX_VALUE / 4.0;
			return [ -big, -big ];
		}
		f = ln( x ) + ( a * ln( y ) ) + t;
		f1 = ( 1.0 / x ) - ( a / y );
		return [ f, f1 ];
	} // end FUNCTION roots()
} // end FUNCTION temmeRootFinder()


// EXPORTS //

module.exports = temmeRootFinder;

},{"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-max":1408}],1219:[function(require,module,exports){
/* eslint-disable no-mixed-operators */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var sqrt = require( '@stdlib/math/base/special/sqrt');
var exp = require( '@stdlib/math/base/special/exp');
var r2 = require( '@stdlib/math/constants/float64-sqrt-two' );


// VARIABLES //

// Workspaces for the polynomial coefficients:
var workspace = new Array( 7 );
var terms = new Array( 4 );


// MAIN //

/**
* Carries out the first method by Temme.
*
* #### References
*
* - "Asymptotic Inversion of the Incomplete Beta Function", N.M. Temme, Journal of Computation and Applied Mathematics 41 (1992) 145-157, Section 2.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} z - function parameter
* @returns {number} function value
*/
function temme1( a, b, z ) {
	var eta0;
	var eta2;
	var eta;
	var B2;
	var B3;
	var B;
	var c;
	var x;

	// Get the first approximation for eta from the inverse error function (Eq: 2.9 and 2.10):
	eta0 = erfcinv( 2.0 * z );
	eta0 /= -sqrt( a / 2.0 );

	terms[ 0 ] = eta0;

	// Calculate powers:
	B = b - a;
	B2 = B * B;
	B3 = B2 * B;

	// Calculate correction terms:

	// See eq following 2.15:
	workspace[ 0 ] = -B * r2 / 2;
	workspace[ 1 ] = ( 1 - (2.0*B) ) / 8.0;
	workspace[ 2 ] = -(B * r2 / 48.0);
	workspace[ 3 ] = -1.0 / 192.0;
	workspace[ 4 ] = -B * r2 / 3840.0;
	workspace[ 5 ] = 0.0;
	workspace[ 6 ] = 0.0;
	terms[ 1 ] = evalpoly( workspace, eta0 );

	// Eq Following 2.17:
	workspace[ 0 ] = B * r2 * ( (3.0*B) - 2.0) / 12.0;
	workspace[ 1 ] = ( (20.0*B2) - (12.0*B) + 1.0 ) / 128.0;
	workspace[ 2 ] = B * r2 * (20 * B - 1) / 960;
	workspace[ 3 ] = (16 * B2 + 30 * B - 15) / 4608;
	workspace[ 4 ] = B * r2 * (21 * B + 32) / 53760;
	workspace[ 5 ] = (-32 * B2 + 63) / 368640;
	workspace[ 6 ] = -B * r2 * (120 * B + 17) / 25804480;
	terms[ 2 ] = evalpoly( workspace, eta0 );

	// Eq Following 2.17:
	workspace[ 0 ] = B * r2 * (-75 * B2 + 80 * B - 16) / 480;
	workspace[ 1 ] = (-1080 * B3 + 868 * B2 - 90 * B - 45) / 9216;
	workspace[ 2 ] = B * r2 * (-1190 * B2 + 84 * B + 373) / 53760;
	workspace[ 3 ] = (-2240 * B3 - 2508 * B2 + 2100 * B - 165) / 368640;
	workspace[ 4 ] = 0.0;
	workspace[ 5 ] = 0.0;
	workspace[ 6 ] = 0.0;
	terms[ 3 ] = evalpoly( workspace, eta0 );

	// Bring them together to get a final estimate for eta:
	eta = evalpoly( terms, 1.0/a );

	// Now we need to convert eta to x, by solving the appropriate quadratic equation:
	eta2 = eta * eta;
	c = -exp( -eta2 / 2.0 );
	if ( eta2 === 0.0 ) {
		x = 0.5;
	} else {
		x = ( 1.0 + ( eta * sqrt( ( 1.0+c ) / eta2 ) ) ) / 2.0;
	}
	return x;
} // end FUNCTION temme1()


// EXPORTS //

module.exports = temme1;

},{"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float64-sqrt-two":1421}],1220:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var sin = require( '@stdlib/math/base/special/sin' );
var cos = require( '@stdlib/math/base/special/cos' );
var temmeRootFinder = require( './root_finder.js');
var newtonRaphsonIterate = require( './newton_raphson.js' );


// VARIABLES //

// Polynomial coefficients:
var workspace = new Array( 6 );
var terms = new Array( 4 );
var co1 = [
	-1.0,
	-5.0,
	5.0
];
var co2 = [
	1.0,
	21.0,
	-69.0,
	46.0
];
var co3 = [
	7.0,
	-2.0,
	33.0,
	-62.0,
	31.0
];
var co4 = [
	25.0,
	-52.0,
	-17.0,
	88.0,
	-115.0,
	46.0
];
var co5 = [
	7.0,
	12.0,
	-78.0,
	52.0
];
var co6 = [
	-7.0,
	2.0,
	183.0,
	-370.0,
	185.0
];
var co7 = [
	-533.0,
	776.0,
	-1835.0,
	10240.0,
	-13525.0,
	5410.0
];
var co8 = [
	-1579.0,
	3747.0,
	-3372.0,
	-15821.0,
	45588.0,
	-45213.0,
	15071.0
];
var co9 = [
	449.0,
	-1259.0,
	-769.0,
	6686.0,
	-9260.0,
	3704.0
];
var co10 = [
	63149.0,
	-151557.0,
	140052.0,
	-727469.0,
	2239932.0,
	-2251437.0,
	750479.0
];
var co11 = [
	29233.0,
	-78755.0,
	105222.0,
	146879.0,
	-1602610.0,
	3195183.0,
	-2554139.0,
	729754.0
];
var co12 = [
	1.0,
	-13.0,
	13.0
];
var co13 = [
	1.0,
	21.0,
	-69.0,
	46.0
];


// MAIN //

/**
* Carries out the second method by Temme.
*
* #### References
*
* - "Asymptotic Inversion of the Incomplete Beta Function", N.M. Temme, Journal of Computation and Applied Mathematics 41 (1992) 145-157, Section 3.
*
* @private
* @param {number} z - function parameter
* @param {number} r - function parameter
* @param {number} theta - function parameter
* @returns {number} function value
*/
function temme2( z, r, theta ) {
	var upper;
	var lower;
	var alpha;
	var roots;
	var eta0;
	var eta;
	var sc7;
	var sc6;
	var sc5;
	var sc4;
	var sc3;
	var sc2;
	var sc;
	var lu;
	var s2;
	var c2;
	var c;
	var s;
	var u;
	var x;

	// Get first estimate for eta, see Eq 3.9 and 3.10, but note there is a typo in Eq 3.10:
	eta0 = erfcinv( 2.0 * z );
	eta0 /= -sqrt( r / 2.0 );

	s = sin( theta );
	c = cos( theta );

	// Now we need to perturb eta0 to get eta, which we do by evaluating the polynomial in 1/r at the bottom of page 151, to do this we first need the error terms e1, e2 e3 which we'll fill into the array "terms".  Since these terms are themselves polynomials, we'll need another array "workspace" to calculate those...
	terms[ 0 ] = eta0;

	// Some powers of sin(theta) cos(theta) that we'll need later:
	sc = s * c;
	sc2 = sc * sc;
	sc3 = sc2 * sc;
	sc4 = sc2 * sc2;
	sc5 = sc2 * sc3;
	sc6 = sc3 * sc3;
	sc7 = sc4 * sc3;

	// Calculate e1 and put it in terms[1], see the middle of page 151:
	workspace[ 0 ] = ( (2.0*s*s) - 1.0 ) / ( 3.0 * s * c );
	workspace[ 1 ] = -evalpoly( co1, s*s ) / (36 * sc2);
	workspace[ 2 ] = evalpoly( co2, s*s ) / (1620 * sc3);
	workspace[ 3 ] = evalpoly( co3, s*s ) / (6480 * sc4);
	workspace[ 4 ] = evalpoly( co4, s*s ) / (90720 * sc5);
	workspace[ 5 ] = 0.0;
	terms[ 1 ] = evalpoly( workspace, eta0 );

	// Now evaluate e2 and put it in terms[2]:
	workspace[ 0 ] = -evalpoly( co5, s*s, 4 ) / (405 * sc3);
	workspace[ 1 ] = evalpoly( co6, s*s, 5 ) / (2592 * sc4);
	workspace[ 2 ] = -evalpoly( co7, s*s, 6 ) / (204120 * sc5);
	workspace[ 3 ] = -evalpoly( co8, s*s, 7 ) / (2099520 * sc6);
	workspace[ 4 ] = 0.0;
	workspace[ 5 ] = 0.0;
	terms[ 2 ] = evalpoly( workspace, eta0, 4 );

	// And e3, and put it in terms[3]:
	workspace[ 0 ] = evalpoly( co9, s*s ) / (102060 * sc5);
	workspace[ 1 ] = -evalpoly( co10, s*s ) / (20995200 * sc6);
	workspace[ 2 ] = evalpoly( co11, s*s ) / (36741600 * sc7);
	workspace[ 3 ] = 0.0;
	workspace[ 4 ] = 0.0;
	workspace[ 5 ] = 0.0;
	terms[ 3 ] = evalpoly( workspace, eta0 );

	// Bring the correction terms together to evaluate eta; this is the last equation on page 151:
	eta = evalpoly( terms, 1.0/r );

	// Now that we have eta we need to back solve for x, we seek the value of x that gives eta in Eq 3.2. The two methods used are described in section 5. Begin by defining a few variables we'll need later:
	s2 = s * s;
	c2 = c * c;
	alpha = c / s;
	alpha *= alpha;
	lu = ( -( eta*eta ) / ( 2.0*s2 ) ) + ln(s2) + ( c2 * ln(c2) / s2 );

	// Temme doesn't specify what value to switch on here, but this seems to work pretty well:
	if ( abs(eta) < 0.7 ) {
		// Small eta use the expansion Temme gives in the second equation of section 5, it's a polynomial in eta:
		workspace[ 0 ] = s * s;
		workspace[ 1 ] = s * c;
		workspace[ 2 ] = ( 1.0 - ( 2.0 * workspace[0] ) ) / 3.0;
		workspace[ 3 ] = evalpoly( co12, workspace[0] ) / ( 36.0 * s * c );
		workspace[ 4 ] = evalpoly( co13, workspace[0] ) /
			( 270.0 * workspace[0] * c * c );
		workspace[ 5 ] = 0.0;
		x = evalpoly( workspace, eta );
	} else {
		// If eta is large we need to solve Eq 3.2 more directly, begin by getting an initial approximation for x from the last equation on page 155, this is a polynomial in u:
		u = exp( lu );
		workspace[ 0 ] = u;
		workspace[ 1 ] = alpha;
		workspace[ 2 ] = 0;
		workspace[ 3 ] = 3 * alpha * ((3*alpha) + 1) / 6;
		workspace[ 4 ] = 4 * alpha * ((4*alpha) + 1) * ((4*alpha) + 2) / 24;
		workspace[ 5 ] = 5 * alpha * ((5*alpha) + 1) * ((5*alpha) + 2) *
			( (5*alpha) + 3) / 120;
		x = evalpoly( workspace, u );

		// At this point we may or may not have the right answer, Eq-3.2 has two solutions for x for any given eta, however the mapping in 3.2 is 1:1 with the sign of eta and x-sin^2(theta) being the same. So we can check if we have the right root of 3.2, and if not switch x for 1-x.  This transformation is motivated by the fact that the distribution is *almost* symmetric so 1-x will be in the right ball park for the solution:
		if ( ( x - s2 ) * eta < 0.0 ) {
			x = 1.0 - x;
		}
	}
	// The final step is a few Newton-Raphson iterations to clean up our approximation for x, this is pretty cheap in general, and very cheap compared to an incomplete beta evaluation. The limits set on x come from the observation that the sign of eta and x-sin^2(theta) are the same.
	if ( eta < 0.0 ) {
		lower = 0.0;
		upper = s2;
	} else {
		lower = s2;
		upper = 1.0;
	}
	// If our initial approximation is out of bounds then bisect:
	if ( x < lower || x > upper ) {
		x = ( lower + upper ) / 2;
	}
	roots = temmeRootFinder( -lu, alpha );

	// And iterate:
	x = newtonRaphsonIterate( roots, x, lower, upper, 32, 100 );
	return x;
} // end FUNCTION temme2()


// EXPORTS //

module.exports = temme2;

},{"./newton_raphson.js":1217,"./root_finder.js":1218,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/cos":1237,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/sin":1330,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalpoly":1356}],1221:[function(require,module,exports){
/* eslint-disable max-statements, no-mixed-operators, max-len */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var ln = require( '@stdlib/math/base/special/ln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var temmeRootFinder = require( './root_finder.js' );
var newtonRaphsonIterate = require( './newton_raphson.js' );


// MAIN //

/**
* Carries out the third method by Temme.
*
* #### References
*
* - "Asymptotic Inversion of the Incomplete Beta Function", N.M. Temme, Journal of Computation and Applied Mathematics 41 (1992) 145-157, Section 4.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1-p`
* @returns {number} function value
*/
function temme3( a, b, p, q ) {
	var cross;
	var roots;
	var lower;
	var upper;
	var eta0;
	var eta;
	var w10;
	var w12;
	var w13;
	var w14;
	var e1;
	var e2;
	var e3;
	var mu;
	var d2;
	var d3;
	var d4;
	var w2;
	var w3;
	var w4;
	var w5;
	var w6;
	var w7;
	var w8;
	var w9;
	var w1;
	var d;
	var w;
	var u;
	var x;

	// Begin by getting an initial approximation for the quantity eta from the dominant part of the incomplete beta:
	if ( p < q ) {
		eta0 = gammaincinv( p, b, true );
	} else {
		eta0 = gammaincinv( q, b, false );
	}
	eta0 /= a;

	// Define the variables and powers we'll need later on:
	mu = b / a;
	w = sqrt( 1.0 + mu );
	w2 = w * w;
	w3 = w2 * w;
	w4 = w2 * w2;
	w5 = w3 * w2;
	w6 = w3 * w3;
	w7 = w4 * w3;
	w8 = w4 * w4;
	w9 = w5 * w4;
	w10 = w5 * w5;
	d = eta0 - mu;
	d2 = d * d;
	d3 = d2 * d;
	d4 = d2 * d2;
	w1 = w + 1.0;
	w12 = w1 * w1;
	w13 = w1 * w12;
	w14 = w12 * w12;

	// Now we need to compute the perturbation error terms that convert eta0 to eta, these are all polynomials of polynomials. Probably these should be re-written to use tabulated data (see examples above), but it's less of a win in this case as we need to calculate the individual powers for the denominator terms anyway, so we might as well use them for the numerator-polynomials as well.
	// Refer to p154-p155 for the details of these expansions:
	e1 = (w + 2) * (w - 1) / (3 * w);
	e1 += (w3 + 9 * w2 + 21 * w + 5) * d / (36 * w2 * w1);
	e1 -= (w4 - 13 * w3 + 69 * w2 + 167 * w + 46) * d2 / (1620 * w12 * w3);
	e1 -= (7 * w5 + 21 * w4 + 70 * w3 + 26 * w2 - 93 * w - 31) * d3 / (6480 * w13 * w4);
	e1 -= (75 * w6 + 202 * w5 + 188 * w4 - 888 * w3 - 1345 * w2 + 118 * w + 138) * d4 / (272160 * w14 * w5);

	e2 = (28 * w4 + 131 * w3 + 402 * w2 + 581 * w + 208) * (w - 1) / (1620 * w1 * w3);
	e2 -= (35 * w6 - 154 * w5 - 623 * w4 - 1636 * w3 - 3983 * w2 - 3514 * w - 925) * d / (12960 * w12 * w4);
	e2 -= (2132 * w7 + 7915 * w6 + 16821 * w5 + 35066 * w4 + 87490 * w3 + 141183 * w2 + 95993 * w + 21640) * d2 / (816480 * w5 * w13);
	e2 -= (11053 * w8 + 53308 * w7 + 117010 * w6 + 163924 * w5 + 116188 * w4 - 258428 * w3 - 677042 * w2 - 481940 * w - 105497) * d3 / (14696640 * w14 * w6);

	e3 = -((3592 * w7 + 8375 * w6 - 1323 * w5 - 29198 * w4 - 89578 * w3 - 154413 * w2 - 116063 * w - 29632) * (w - 1)) / (816480 * w5 * w12);
	e3 -= (442043 * w9 + 2054169 * w8 + 3803094 * w7 + 3470754 * w6 + 2141568 * w5 - 2393568 * w4 - 19904934 * w3 - 34714674 * w2 - 23128299 * w - 5253353) * d / (146966400 * w6 * w13);
	e3 -= (116932 * w10 + 819281 * w9 + 2378172 * w8 + 4341330 * w7 + 6806004 * w6 + 10622748 * w5 + 18739500 * w4 + 30651894 * w3 + 30869976 * w2 + 15431867 * w + 2919016) * d2 / (146966400 * w14 * w7);

	// Combine eta0 and the error terms to compute eta (Second equation p155):
	eta = eta0 + e1 / a + e2 / (a * a) + e3 / (a * a * a);
	/*
		Now we need to solve Eq 4.2 to obtain x.  For any given value of
		eta there are two solutions to this equation, and since the distribution
		may be very skewed, these are not related by x ~ 1-x we used when
		implementing section 3 above.  However we know that:

			cross < x <= 1       ; iff eta < mu
				x == cross   ; iff eta == mu
				0 <= x < cross    ; iff eta > mu

		Where cross == 1 / (1 + mu)
		Many thanks to Prof Temme for clarifying this point. Therefore we'll just jump straight into Newton iterations to solve Eq 4.2 using these bounds, and simple bisection as the first guess, in practice this converges pretty quickly and we only need a few digits correct anyway:
	*/
	if ( eta <= 0 ) {
		eta = Number.MIN_VALUE;
	}
	u = eta - ( mu*ln(eta) ) + ( ( 1.0+mu ) * ln( 1.0+mu ) ) - mu;
	cross = 1.0 / ( 1.0 + mu );
	lower = eta < mu ? cross : 0.0;
	upper = eta < mu ? 1.0 : cross;
	x = (lower + upper) / 2.0;
	roots = temmeRootFinder( u, mu );
	x = newtonRaphsonIterate( roots, x, lower, upper, 32, 100 );
	return x;
} // end FUNCTION temme3()


// EXPORTS //

module.exports = temme3;

},{"./newton_raphson.js":1217,"./root_finder.js":1218,"@stdlib/math/base/special/gammaincinv":1293,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/sqrt":1343}],1222:[function(require,module,exports){
arguments[4][1206][0].apply(exports,arguments)
},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/factorial":1262,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-e":1391,"@stdlib/math/constants/float64-eps":1392,"dup":1206}],1223:[function(require,module,exports){
'use strict';

/*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain software.
*/

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_SQRT_TWO_PI = require( '@stdlib/math/constants/float64-ln-sqrt-two-pi' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var correction = require( './gamma_correction.js' );


// MAIN //

/**
* Evaluate the natural logarithm of the beta function.
*
* @param {NonNegativeNumber} a - first input value
* @param {NonNegativeNumber} b - second input value
* @returns {number} evaluated logartihm of beta function
*
* @example
* var v = betaln( 0.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = betaln( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* @example
* var v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* @example
* var v = betaln( NaN, 2.0 );
* // returns NaN
*/
function betaln( a, b ) {
	var corr;
	var p;
	var q;

	p = min( a, b );
	q = max( a, b );

	if ( p < 0.0 ) {
		return NaN;
	}
	else if ( p === 0.0 ) {
		return PINF;
	}
	else if ( q === PINF ) {
		return NINF;
	}

	// Case: p and q are big
	if ( p >= 10.0 ) {
		corr = correction( p ) + correction( q ) - correction( p + q );
		return ( -0.5 * ln( q ) ) + LN_SQRT_TWO_PI + corr +
			( (p-0.5) * ln( p/(p+q) ) ) + ( q * log1p( -p/(p+q) ) );
	}
	// Case: p is small, but q is big
	else if ( q >= 10.0 ) {
		corr = correction( q ) - correction( p + q );
		return gammaln( p ) + corr + p - (p * ln( p + q )) +
			( (q-0.5) * log1p( -p/(p+q) ) );
	}
	// Case: p and q are small
	return ln( gamma( p ) * ( gamma( q ) / gamma( p + q ) ) );
} // end FUNCTION betaln()


// EXPORTS //

module.exports = betaln;

},{"./gamma_correction.js":1225,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/constants/float64-ln-sqrt-two-pi":1401,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1224:[function(require,module,exports){
'use strict';

/*
* The code is adapted from the Fortran routine `dcseval` from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.org/slatec/fnlib/}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain software.
*/

// MAIN //

/**
* Evaluate the n-term Chebyshev series `cs` at `x`.
*
* #### References
*
* * R. Broucke, Ten subroutines for the manipulation of Chebyshev series, Algorithm 446, Communications of the A.C.M. 16, (1973) pp. 254-256.
* * L. Fox and I. B. Parker, Chebyshev Polynomials in Numerical Analysis, Oxford University Press, 1968, page 56.
*
* @private
* @param {number} x - value at which the series is to be evaluated
* @param {NumericArray} cs - array of n terms of a Chebyshev series.
* @returns {number} series value
*/
function dcseval( x, cs ) {
	var twox;
	var b2;
	var b1;
	var b0;
	var i;
	var n;

	n = cs.length;
	if ( x < -1.1 || x > 1.1 ) {
		return NaN;
	}

	b1 = 0.0;
	b0 = 0.0;
	twox = 2.0 * x;
	for ( i = 1; i <= n; i++ ) {
		b2 = b1;
		b1 = b0;
		b0 = (twox * b1) - b2 + cs[ n - i ];
	}
	return ( b0 - b2 ) * 0.5;
} // end FUNCTION dcseval()


// EXPORTS //

module.exports = dcseval;

},{}],1225:[function(require,module,exports){
'use strict';

/*
* The code is adapted from the Fortran routine from [netlib]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain software.
*/

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );
var dceval = require( './dceval.js' );


// VARIABLES //

var ALGMCS = [
	+0.1666389480451863247205729650822e+0,
	-0.1384948176067563840732986059135e-4,
	+0.9810825646924729426157171547487e-8,
	-0.1809129475572494194263306266719e-10,
	+0.6221098041892605227126015543416e-13,
	-0.3399615005417721944303330599666e-15,
	+0.2683181998482698748957538846666e-17,
	-0.2868042435334643284144622399999e-19,
	+0.3962837061046434803679306666666e-21,
	-0.6831888753985766870111999999999e-23,
	+0.1429227355942498147573333333333e-24,
	-0.3547598158101070547199999999999e-26,
	+0.1025680058010470912000000000000e-27,
	-0.3401102254316748799999999999999e-29,
	+0.1276642195630062933333333333333e-30
];
var XBIG = 94906265.62425156;
var XMAX = 3.745194030963158e306;


// MAIN //

/**
* Compute the log gamma correction factor for x >= 10 so that
*
* ``` tex
* \log(\gamma(x)) = \log(\sqrt{2*\Pi}) + (x-0.5) \cdot \log(x) - x \operatorname{R9LGMC}(x).
* ```
*
* @private
* @param {number} x - input value
* @returns {number} correction value
*/
function gammaCorrection( x ) {
	if ( x < 10.0 ) {
		return NaN;
	}
	// Checking for underflow...
	if ( x >= XMAX ) {
		return 0.0;
	}
	if ( x < XBIG ) {
		return dceval( (2.0 * pow( 10.0 / x, 2.0 )) - 1.0, ALGMCS ) / x;
	}
	return 1.0 / (x * 12.0);
} // end FUNCTION gammaCorrection()


// EXPORTS //

module.exports = gammaCorrection;

},{"./dceval.js":1224,"@stdlib/math/base/special/pow":1311}],1226:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the beta function.
*
* @module @stdlib/math/base/special/betaln
*
* @example
* var betaln = require( '@stdlib/math/base/special/betaln' );
*
* var v = betaln( 0.0, 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* v = betaln( -1.0, 2.0 );
* // returns NaN
*
* v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* v = betaln( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

var betaln = require( './betaln.js' );


// EXPORTS //

module.exports = betaln;

},{"./betaln.js":1223}],1227:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isOdd = require( '@stdlib/math/base/assert/is-odd' );
var round = require( '@stdlib/math/base/special/round' );


// MAIN //

/**
* Computes the binomial coefficient of two integers.
*
* #### Method
*
* * Instead of evaluating the factorial form, which is inefficient and prone to overflow for large inputs arguments, this module computes the following multiplicative representation of the binomial coefficient for integer arguments
*
*   ``` tex
*   \binom nk = \prod_{i=1}^k \frac{n+1-i}{i}
*   ```
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {number} function value
*
* @example
* var v = binomcoef( 8, 2 );
* // returns 28
*
* @example
* var v = binomcoef( 0, 0 );
* // returns 1
*
* @example
* var v = binomcoef( -4, 2 );
* // returns 10
*
* @example
* var v = binomcoef( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoef( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoef( NaN, NaN );
* // returns NaN
*/
function binomcoef( n, k ) {
	var res;
	var j;
	if ( isnan( n ) || isnan( k ) ) {
		return NaN;
	}
	if ( !isInteger( n ) || !isInteger( k ) ) {
		return NaN;
	}
	if ( k < 0 ) {
		return 0;
	}
	if ( n < 0 ) {
		res = binomcoef( -n + k - 1, k );
		if ( isOdd( k ) ) {
			res = -res;
		}
		return res;
	}
	if ( k > n ) {
		return 0;
	}
	if ( k === 0 || k === n ) {
		return 1;
	}
	if ( k === 1 || k === n - 1 ) {
		return n;
	}
	if ( n - k < k ) {
		k = n - k;
	}
	// Use recursive definition...
	res = n;
	for ( j = 2; j <= k; j++ ) {
		res *= ( n - j + 1 ) / j;
	}
	// Correct for rounding errors...
	return isInteger( res ) ? res : round( res );
} // end FUNCTION binomcoef()


// EXPORTS //

module.exports = binomcoef;

},{"@stdlib/math/base/assert/is-integer":41,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-odd":51,"@stdlib/math/base/special/round":1326}],1228:[function(require,module,exports){
'use strict';

/**
* Compute the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoef
*
* @example
* var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
*
* var v = binomcoef( 8, 2 );
* // returns 28
*
* v = binomcoef( 0, 0 );
* // returns 1
*
* v = binomcoef( -4, 2 );
* // returns 10
*
* v = binomcoef( 5, 3 );
* // returns 10
*
* v = binomcoef( NaN, 3 );
* // returns NaN
*
* v = binomcoef( 5, NaN );
* // returns NaN
*
* v = binomcoef( NaN, NaN );
* // returns NaN
*/

// MODULES //

var binomcoef = require( './binomcoef.js' );


// EXPORTS //

module.exports = binomcoef;

},{"./binomcoef.js":1227}],1229:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var betaln = require( '@stdlib/math/base/special/betaln' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Computes the natural logarithm of the binomial coefficient of two integers.
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {number} function value
*
* @example
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* @example
* var v = binomcoefln( 0, 0 );
* // returns 0.0
*
* @example
* var v = binomcoefln( -4, 2 );
* // returns ~2.302
*
* @example
* var v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* @example
* var v = binomcoefln( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoefln( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoefln( NaN, NaN );
* // returns NaN
*/
function binomcoefln( n, k ) {
	if ( isnan( n ) || isnan( k ) ) {
		return NaN;
	}
	if ( !isInteger( n ) || !isInteger( k ) ) {
		return NaN;
	}
	if ( n < 0.0 ) {
		return binomcoefln( -n + k - 1.0, k );
	}
	if ( k < 0 ) {
		return NINF;
	}
	if ( k === 0 ) {
		return 0.0;
	}
	if ( k === 1 ) {
		return ln( abs( n ) );
	}
	if ( n < k ) {
		return NINF;
	}
	if ( n - k < 2 ) {
		return binomcoefln( n, n - k );
	}
	// Case: n - k >= 2
	return -ln( n + 1 ) - betaln( n - k + 1, k + 1 );
} // end FUNCTION binomcoefln()


// EXPORTS //

module.exports = binomcoefln;

},{"@stdlib/math/base/assert/is-integer":41,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/betaln":1226,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float64-ninf":1411}],1230:[function(require,module,exports){
'use strict';

/**
* Compute the natural logarithm of the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoefln
*
* @example
* var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
*
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* v = binomcoefln( 0, 0 );
* // returns 0.0
*
* v = binomcoefln( -4, 2 );
* // returns ~2.302
*
* v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* v = binomcoefln( NaN, 3 );
* // returns NaN
*
* v = binomcoefln( 5, NaN );
* // returns NaN
*
* v = binomcoefln( NaN, NaN );
* // returns NaN
*/

// MODULES //

var binomcoefln = require( './binomcoefln.js' );


// EXPORTS //

module.exports = binomcoefln;

},{"./binomcoefln.js":1229}],1231:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil( -4.2 );
* // returns -4.0
*
* @example
* var v = ceil( 9.99999 );
* // returns 10.0
*
* @example
* var v = ceil( 0.0 );
* // returns 0.0
*
* @example
* var v = ceil( NaN );
* // returns NaN
*/
var ceil = Math.ceil;


// EXPORTS //

module.exports = ceil;

},{}],1232:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward positive infinity.
*
* @module @stdlib/math/base/special/ceil
*
* @example
* var ceil = require( '@stdlib/math/base/special/ceil' );
*
* var v = ceil( -4.2 );
* // returns -4.0
*
* v = ceil( 9.99999 );
* // returns 10.0
*
* v = ceil( 0.0 );
* // returns 0.0
*
* v = ceil( NaN );
* // returns NaN
*/

// MODULES //

var ceil = require( './ceil.js' );


// EXPORTS //

module.exports = ceil;

},{"./ceil.js":1231}],1233:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000;

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff;


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	x = toWords( x );
	hx = x[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, x[ 1 ] );
} // end FUNCTION copysign()


// EXPORTS //

module.exports = copysign;

},{"@stdlib/math/base/utils/float64-from-words":1366,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-to-words":1384}],1234:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":1233}],1235:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var cosKernel = require( './cos_kernel.js' );
var sinKernel = require( './sin_kernel.js' );
var remPio2 = require( './rem_pio2.js' );


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value
* @returns {number} cosine (in radians)
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( Math.PI/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -Math.PI/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;
	var y;
	var z;

	y = new Array( 2 );
	z = 0.0;
	ix = getHighWord( x );

	// Case: |x| ~< pi/4
	ix &= 0x7fffffff;
	if ( ix <= 0x3fe921fb ) {
		// Case: x < 2**-27
		if ( ix<0x3e400000 ) {
			if ( (x|0) === 0 ) {
				// Generate inexact...
				return 1.0;
			}
		}
		return cosKernel( x, z );
	}
	// Case: cos(Inf or NaN) is NaN */
	else if ( ix >= 0x7ff00000 ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = remPio2( x, y );
	switch ( n & 3 ) {
	case 0:
		return cosKernel( y[0], y[1] );
	case 1:
		return -sinKernel( y[0], y[1], 1 );
	case 2:
		return -cosKernel( y[0], y[1] );
	default:
		return sinKernel( y[0], y[1], 1 );
	}
} // end FUNCTION cos()


// EXPORTS //

module.exports = cos;

},{"./cos_kernel.js":1236,"./rem_pio2.js":1238,"./sin_kernel.js":1240,"@stdlib/math/base/utils/float64-get-high-word":1370}],1236:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var C1  =  4.16666666666666019037e-02; /* 0x3FA55555, 0x5555554C */
var C2  = -1.38888888888741095749e-03; /* 0xBF56C16C, 0x16C15177 */
var C3  =  2.48015872894767294178e-05; /* 0x3EFA01A0, 0x19CB1590 */
var C4  = -2.75573143513906633035e-07; /* 0xBE927E4F, 0x809C52AD */
var C5  =  2.08757232129817482790e-09; /* 0x3E21EE9E, 0xBDB4B1C4 */
var C6  = -1.13596475577881948265e-11; /* 0xBDA8FAE9, 0xBE8838D4 */


// MAIN //

/**
* Compute the cos function on \\( [-\pi/4, \pi/4] \\), \\( \pi/4 \approx 0.785398164 \\)
*
* #### Method
*
* * Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive x.
* * If \\( x < 2^-27 \\), return 1 with inexact if \\( x \ne 0 \\).
* * \\( cos(x) \\) is approximated by a polynomial of degree 14 on \\( [0,\pi/4] \\)
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*   ```
*
*   where the remez error is
*
*   ``` tex
*   \left| \cos(x) - \left( 1 - 0.5x^2 + C_1x^4 +C_2x^6 +C_3x^8 +C_4x^{10} +C_5x^{12}  +C_6x^{15} \right) \right| \le 2^{-58}
*   ```
* * Let \\( C_1x^4 +C_2x^6 +C_3x^8 +C_4x^{10} +C_5x^{12}  +C_6x^{14} \\), then
*
*   ``` tex
*    \cos(x) \approx 1 - \tfrac{x \cdot x}{2} + r
*   ```
*
*   Since \\( \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y \\), a correction term is necessary in \\( \cos(x) \\) and hence
*
*   ``` tex
*   \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*   ```
*
*   For better accuracy, rearrange to
*
*   ``` tex
*   \cos(x+y) \approx w + \left( tmp + ( r - x \cdot y ) \right)
*   ```
*
*   where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( tmp \\) is a tiny correction term ( \\( 1 - \frac{x \cdot x}{2} = w + tmp \\) exactly in infinite precision). The exactness of w + tmp in infinite precision depends on w and tmp having the same precision as x.
*
* @param {number} x - input value (assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of x.
* @returns {number} cosine (in radians)
*/
function cosKernel( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z  = x * x;
	w  = z * z;
	r  = z * ( C1 + z*(C2+z*C3) ) + w * w * ( C4 + z*(C5+z*C6) );
	hz = 0.5 * z;
	w  = 1.0 - hz;
	return w + ( ( (1.0-w) - hz ) + ( z*r - x*y ) );
} // end FUNCTION cosKernel()


// EXPORTS //

module.exports = cosKernel;

},{}],1237:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( Math.PI/4.0 );
* // returns ~0.707
*
* v = cos( -Math.PI/6.0 );
* // returns ~0.866
*/

// MODULES //

var cos = require( './cos.js' );


// EXPORTS //

module.exports = cos;

},{"./cos.js":1235}],1238:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var round = require( '@stdlib/math/base/special/round' );
var remPio2Kernel = require( './rem_pio2_kernel.js' );


// VARIABLES //

var ZERO =  0.00000000000000000000e+00; /* 0x00000000, 0x00000000 */
var TWO24 =  1.67772160000000000000e+07; /* 0x41700000, 0x00000000 */

// 53 bits of 2/PI
var INVPIO2 =  6.36619772367581382433e-01; /* 0x3FE45F30, 0x6DC9C883 */

// First 33 bit of PI/2
var PIO2_1  =  1.57079632673412561417e+00; /* 0x3FF921FB, 0x54400000 */

// PIO2_1T = PI/2 - PIO2_1
var PIO2_1T =  6.07710050650619224932e-11; /* 0x3DD0B461, 0x1A626331 */

// Second 33 bit of PI/2
var PIO2_2  =  6.07710050630396597660e-11; /* 0x3DD0B461, 0x1A600000 */

// PIO2_2T = PI/2 - ( PIO2_1 + PIO2_2 )
var PIO2_2T =  2.02226624879595063154e-21; /* 0x3BA3198A, 0x2E037073 */

// Third 33 bit of PI/2
var PIO2_3  =  2.02226624871116645580e-21; /* 0x3BA3198A, 0x2E000000 */

// PIO2_3T = PI/2 - ( PIO2_1 + PIO2_2 + PIO2_3 )
var PIO2_3T =  8.47842766036889956997e-32; /* 0x397B839A, 0x252049C1 */


// MAIN //

/**
* Compute x - n*pi/2 = r. Returns n and stores the remainder `r`
* as two numbers y[0] and y[1] such that y[0]+y[1] = r.
*
* @private
* @param {number} x - input value
* @param {Array} y - remainder elements
* @returns {integer} n - factor of pi/2
*/
function remPio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var tx;
	var ty;
	var i;
	var n;
	var z;

	tx = new Array( 3 );
	ty = new Array( 2 );

	hx = getHighWord( x );
	ix = hx & 0x7fffffff;

	// Case: |x| ~<= pi/4 , no need for reduction
	if ( ix <= 0x3fe921fb ) {
		y[ 0 ] = x;
		y[ 1 ] = 0;
		return 0;
	}

	// Case: |x| ~<= 5pi/4
	if ( ix <= 0x400f6a7a ) {
		// Case: |x| ~= pi/2 or 2pi/2
		if ( (ix & 0xfffff) === 0x921fb ) {
			// Cancellation => use medium case
			return remPio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3pi/4
		if ( ix <= 0x4002d97c ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = ( z - y[0] ) - PIO2_1T;
				return 1.0;
			} else {
				z = x + PIO2_1;
				y[ 0 ] = z + PIO2_1T;
				y[ 1 ] = ( z - y[0] ) + PIO2_1T;
				return -1.0;
			}
		}
		else {
			if ( x > 0.0 ) {
				z = x - 2 * PIO2_1;
				y[ 0 ] = z - 2 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) -2 * PIO2_1T;
				return 2;
			} else {
				z = x + 2 * PIO2_1;
				y[ 0 ] = z + 2 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) + 2 * PIO2_1T;
				return -2;
			}
		}
	}
	// Case: |x| ~<= 9pi/4
	if ( ix <= 0x401c463b ) {
		// Case: |x| ~<= 7pi/4
		if ( ix <= 0x4015fdbc ) {
			// Case: |x| ~= 3pi/2
			if ( ix === 0x4012d97c ) {
				return remPio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - 3 * PIO2_1;
				y[ 0 ] = z - 3 * PIO2_1T;
				y[ 1 ] = (z-y[0]) - 3 * PIO2_1T;
				return 3;
			} else {
				z = x + 3 * PIO2_1;
				y[ 0 ] = z + 3 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) + 3 * PIO2_1T;
				return -3;
			}
		} else {
			if ( ix === 0x401921fb ) {
				// Case: |x| ~= 4pi/2
				return remPio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - 4.0 * PIO2_1;
				y[ 0 ] = z - 4.0 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) - 4.0 * PIO2_1T;
				return +4;
			} else {
				z = x + 4.0 * PIO2_1;
				y[ 0 ] = z + 4.0 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) + 4.0 * PIO2_1T;
				return -4;
			}
		}
	}
	// Case: |x| ~< 2^20*(pi/2), medium size
	if ( ix < 0x413921fb ) {
		return remPio2Medium( x, ix, y );
	}
	// All other (large) arguments...
	// Case: x is inf or NaN */
	if ( ix >= 0x7ff00000 ) {
		y[ 0 ] = y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|,ilogb(x)-23)...
	low = getLowWord( x );
	// e0 = ilogb(z)-23:
	e0 = ( ix >> 20 ) - 1046;
	z = fromWords( ix - ((e0<<20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		tx[ i ] = z|0;
		z = ( z - tx[i] ) * TWO24;
	}
	tx[ 2 ] = z;
	nx = 3;
	while ( tx[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx--;
	}
	n = remPio2Kernel( tx, ty, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -ty[ 0 ];
		y[ 1 ] = -ty[ 1 ];
		return -n;
	}
	y[ 0 ] = ty[ 0 ];
	y[ 1 ] = ty[ 1 ];
	return n;
} // end FUNCTION remPio2()


/**
* Compute x - n*pi/2 = r for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {int32} ix - higher word
* @param {Array} y - remainder elements
* @returns {integer} n - factor of pi/2
*/
function remPio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - n * PIO2_1;
	w = n * PIO2_1T;
	// 1st round good to 85 bit...
	j = ix >> 20;
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high>>20) & 0x7ff );
	if ( i > 16 ) {
		// 2nd iteration needed, good to 118...
		t  = r;
		w  = n * PIO2_2;
		r  = t - w;
		w  = n * PIO2_2T - ( (t-r) - w );
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high>>20) & 0x7ff );
		if ( i > 49 )  {
			// 3rd iteration need, 151 bits acc
			t  = r;
			w  = n * PIO2_3;
			r  = t - w;
			w  = n * PIO2_3T - ( (t-r) - w );
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = ( r - y[0] ) - w;
	return n;
} // end FUNCTION remPio2Medium()


// EXPORTS //

module.exports = remPio2;

},{"./rem_pio2_kernel.js":1239,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/utils/float64-from-words":1366,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-get-low-word":1372}],1239:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

var INIT_JK = [
	3,
	4,
	4,
	6
]; /* initial value for jk */

/*
* Table of constants for 2/pi, 396 Hex digits (476 decimal) of 2/pi
*
*		integer array, contains the (24*i)-th to (24*i+23)-th
*		bit of 2/pi after binary point. The corresponding
*		floating value is
*
*			ipio2[i] * 2^(-24(i+1)).
*
* NB: This table must have at least (e0-3)/24 + jk terms.
*     For quad precision (e0 <= 16360, jk = 6), this is 686.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting pi/2 into 24 bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, /* 0x3FF921FB, 0x40000000 */
	7.54978941586159635335e-08, /* 0x3E74442D, 0x00000000 */
	5.39030252995776476554e-15, /* 0x3CF84698, 0x80000000 */
	3.28200341580791294123e-22, /* 0x3B78CC51, 0x60000000 */
	1.27065575308067607349e-29, /* 0x39F01B83, 0x80000000 */
	1.22933308981111328932e-36, /* 0x387A2520, 0x40000000 */
	2.73370053816464559624e-44, /* 0x36E38222, 0x80000000 */
	2.16741683877804819444e-51 /* 0x3569F31D, 0x00000000 */
];
var TWO24 =  1.67772160000000000000e+07; /* 0x41700000, 0x00000000 */
var TWON24 =  5.96046447753906250000e-08; /* 0x3E700000, 0x00000000 */


// FUNCTIONS //

/**
* Helper function performing the computation for remPio2Kernel().
*
* @private
* @param {PositiveNumber} x - input value
* @param {Array} y - ouput result in an array of double precision numbers.
* @param {integer} jz - number of terms of ipio2[] used.
* @param {Array} q - array with integral value, representing the 24-bits chunk of the product of x and 2/pi.
* @param {integer} q0 - the corresponding exponent of q[0]. Note that the exponent for q[i] would be q0-24*i.
* @param {integer} jk - jk+1 is the initial number of terms of IPIO2[] needed in the computation.
* @param {integer} jv - index for pointing to the suitable ipio2[] for the computation
* @param {integer} jx - nx - 1
* @param {Array} f - IPIO2[] in floating point
* @param {PositiveInteger} prec - precision in bits (can be 24 (single), 53 (double), 64 (extended), 113 (quad))
* @returns {number} last three digits of N
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f, prec ) {
	var carry;
	var fq;
	var fw;
	var ih;
	var iq;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// jp+1 is the number of terms in PIo2[] needed:
	jp = jk;

	fq = new Array( 20 );
	iq = new Array( 20 );

	// Distill q[] into iq[] reversingly...
	for ( i = 0, j = jz, z = q[ jz ]; j > 0; i++, j-- ) {
		fw = ( TWON24 * z ) | 0;
		iq[ i ] = ( z-TWO24 * fw ) | 0;
		z = q[ j-1 ] + fw;
	}

	// Compute n...
	z  = ldexp( z, q0 );
	// Trim off integer >= 8:
	z -= 8.0 * floor( z * 0.125 );
	n  = z | 0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need iq[jz-1] to determine n...
		i  = ( iq[jz-1] >> (24-q0) );
		n += i;
		iq[ jz-1 ] -= i << (24-q0);
		ih = iq[ jz-1 ] >> (23-q0);
	}
	else if ( q0 === 0 ) {
		ih = iq[ jz-1 ] >> 23;
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;
		// Compute 1-q:
		for ( i = 0; i < jz; i++ ) {
			j = iq[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					iq[ i ] = 0x1000000 - j;
				}
			} else  {
				iq[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) {
			case 1:
				iq[ jz-1 ] &= 0x7fffff;
			break;
			case 2:
				iq[ jz-1 ] &= 0x3fffff;
			break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if recomputation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz - 1; i >= jk; i-- ) {
			j |= iq[ i ];
		}
		if ( j === 0 ) {
			// Need recomputation...
			for( k = 1; iq[jk-k] === 0; k++ ) {}   /* k = no. of terms needed */
			for ( i = jz + 1; i <= jz + k; i++ ) {
				// Add q[jz+1] to q[jz+k]...
				f[ jx+i ] = IPIO2[ jv+i ];
				for ( j = 0, fw = 0.0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + i-j ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f, prec );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( iq[jz] === 0 ) {
			jz--;
			q0-=24;
		}
	} else {
		// Break z into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z) | 0;
			iq[ jz ] = ( z - TWO24*fw ) | 0;
			jz += 1;
			q0 += 24;
			iq[ jz ] = fw;
		} else {
			iq[ jz ] = z | 0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * iq[i];
		fw *= TWON24;
	}
	// Compute PIo2[0,...,jp]*q[jz,...,0]...
	for( i = jz; i >= 0; i-- ) {
		for( fw = 0.0, k = 0; k <= jp && k <= jz - i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		fq[ jz-i ] = fw;
	}
	// Compress fq[] into y[]...
	switch ( prec ) {
	case 0:
		fw = 0.0;
		for ( i = jz; i >= 0; i-- ) {
			fw += fq[ i ];
		}
		y[ 0 ] = ( ih === 0 )? fw: -fw;
	break;
	case 1:
	case 2:
		fw = 0.0;
		for ( i = jz; i >= 0; i-- ) {
			fw += fq[ i ];
		}
		y[ 0 ] = ( ih === 0 ) ? fw: -fw;
		fw = fq[ 0 ] - fw;
		for ( i = 1; i <= jz; i++ ) {
			fw += fq[i];
		}
		y[ 1 ] = ( ih === 0 )? fw: -fw;
	break;
	case 3:
		for ( i = jz; i > 0; i-- ) {
			fw = fq[ i-1 ] + fq[ i ];
			fq[ i ] += fq[ i-1 ]-fw;
			fq[ i-1 ] = fw;
		}
		for ( i = jz; i > 1; i-- ) {
			fw = fq[ i-1 ] + fq[ i ];
			fq[ i ]  += fq[ i-1 ] - fw;
			fq[ i-1 ] = fw;
		}
		for ( fw = 0.0, i = jz; i >= 2; i-- ) {
			fw += fq[ i ];
		}
		if ( ih === 0 ) {
			y[ 0 ] =  fq[ 0 ];
			y[ 1 ] =  fq[ 1 ];
			y[ 2 ] =  fw;
		} else {
			y[ 0 ] = -fq[ 0 ];
			y[ 1 ] = -fq[ 1 ];
			y[ 2 ] = -fw;
		}
	}
	return n & 7;
} // end FUNCTION compute()


// MAIN //

/*
* Return the last three digits of N with `y = x - N*pi/2` so that `|y| < pi/2`.
*
* #### Method
*
* The method is to compute the integer (mod 8) and fraction parts of (2/pi)*x without doing the full multiplication. In general we skip the part of the product that are known to be a huge integer (more accurately, = 0 mod 8 ). Thus the number of operations are independent of the exponent of the input.
*
* @param {PositiveNumber} x - input value
* @param {Array} y - ouput result in an array of double precision numbers.
* @param {PositiveInteger} e0 - The exponent of x[0]. Must be <= 16360
* @param {PositiveInteger} nx - dimension of x[]
* @param {PositiveInteger} prec - precision in bits (can be 24 (single), 53 (double), 64 (extended), 113 (quad))
* @returns {number} last three digits of N
*/
function remPio2Kernel( x, y, e0, nx, prec ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var f;
	var m;
	var q;

	f = new Array( 20 );
	q = new Array( 20 );

	// Initialize jk...
	jk = INIT_JK[ prec ];
	// Determine jx, jv, q0, note that 3 > q0
	jx =  nx - 1;
	jv = ( e0 - 3 ) / 24;
	jv = jv | 0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 =  e0 - 24 * ( jv + 1 );

	// Set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk]:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++, j++ ) {
		f[ i ] = ( j < 0 ) ? 0.0 : IPIO2[ j ];
	}
	// Compute q[0],q[1],...q[jk]:
	for ( i = 0; i <= jk; i++ ) {
		for ( j = 0, fw = 0.0; j <= jx; j++ ) {
			fw += x[ j ] * f[ jx + i-j ];
		}
		q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, q, q0, jk, jv, jx, f, prec );
} // end FUNCTION remPio2Kernel()


// EXPORTS //

module.exports = remPio2Kernel;

},{"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/ldexp":1298}],1240:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1  = -1.66666666666666324348e-01; /* 0xBFC55555, 0x55555549 */
var S2  =  8.33333333332248946124e-03; /* 0x3F811111, 0x1110F8A6 */
var S3  = -1.98412698298579493134e-04; /* 0xBF2A01A0, 0x19C161D5 */
var S4  =  2.75573137070700676789e-06; /* 0x3EC71DE3, 0x57B1FE7D */
var S5  = -2.50507602534068634195e-08; /* 0xBE5AE5E6, 0x8A2B9CEB */
var S6  =  1.58969099521155010221e-10; /* 0x3DE5D93A, 0x5ACFD57C */


// MAIN //

/**
* Computes the sin function on \\( \approx [-\pi/4, \pi/4] \\) (except on -0), \\( \pi/4 \approx 0.7854 \\)
*
* #### Method
*
* * Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive x.
* * Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves -0. Callers may do the optimization \\( \sin(x) \approx x \\) for tiny x.
* * \\( \sin(x) \\) is approximated by a polynomial of degree 13 on \\( \left[0,\tfrac{pi}{4} \right] \\)
*
*   ``` tex
*   \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*   ```
*
*   where
*
*   ``` tex
*   \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*   ```
*
* * We have \\( \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y \\). For better accuracy, let
*
*   ``` tex
*   r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*   ```
*
*   then
*
*   ``` tex
*   \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*   ```
*
* @param {number} x - input value (assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of x.
* @param {number} iy - indicates whether y is 0. (if iy = 0, y assumed to be 0).
* @returns sine (in radians)
*/
function sinKernel( x, y, iy ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + z * ( S3 + z*S4 ) + z * w * ( S5 + z*S6 );
	v = z * x;
	if ( iy === 0 ) {
		return x + v * ( S1 + z*r );
	}
	else {
		return x - ( ( z * (0.5*y-v*r) - y ) - v * S1 );
	}
} // end FUNCTION sinKernel()


// EXPORTS //

module.exports = sinKernel;

},{}],1241:[function(require,module,exports){
'use strict';

/*
* Notes:
*	=> cos(-x) = cos(x)
*	=> sin(-x) = -sin(x)
*	=> cos(π/2) = 0
*	=> cos(0) = 1
*	=> cos(π) = -1
*/


// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var abs = require( '@stdlib/math/base/special/abs' );
var cos = require( '@stdlib/math/base/special/cos' );
var sin = require( '@stdlib/math/base/special/sin' );
var floor = require( '@stdlib/math/base/special/floor' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var MAX_INTEGER = require( '@stdlib/math/constants/float64-max-safe-integer' ) + 1;


// MAIN //

/**
* Computes the value of `cos(πx)`.
*
* @param {number} x - input value
* @throws {RangeError} must provide a finite number
* @returns {number} function value
*
* @example
* var y = cospi( 0.0 );
* // returns 1.0
*
* @example
* var y = cospi( 0.5 );
* // returns 0.0
*
* @example
* var y = cospi( 0.1 );
* // returns ~0.951
*
* @example
* var y = cospi( NaN );
* // returns NaN
*/
function cospi( x ) {
	var ax;
	var ix;
	var rx;
	var y;
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInfinite( x ) ) {
		// TODO: should we throw or return NaN?
		throw new RangeError( 'invalid input argument. Must provide a finite number. Value: `' + x + '`.' );
	}
	ax = abs( x );
	if ( ax > MAX_INTEGER ) {
		// Always even integer...
		return 1.0;
	}
	// Argument reduction (reduce to [0,1))...
	ix = floor( ax );
	rx = ax - ix;
	if ( rx === 0.5 ) {
		return 0.0;
	}
	if ( rx < 0.25 ) {
		y = cos( PI*rx );
	}
	else if ( rx < 0.75 ) {
		rx = 0.5 - rx;
		y = sin( PI*rx ); // recall sin(-x) = -sin(x), thus returned result will be properly signed
	}
	else {
		rx = 1.0 - rx;
		y = -cos( PI*rx );
	}
	// If the integer of `x` is odd, we need to flip the sign...
	return ( ix%2 === 1 ) ? -y : y;
} // end FUNCTION cospi()


// EXPORTS //

module.exports = cospi;

},{"@stdlib/math/base/assert/is-infinite":39,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/cos":1237,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/sin":1330,"@stdlib/math/constants/float64-max-safe-integer":1407,"@stdlib/math/constants/float64-pi":1413}],1242:[function(require,module,exports){
'use strict';

/**
* Compute cos(πx).
*
* @module @stdlib/math/base/special/cospi
*
* @example
* var cospi = require( '@stdlib/math/base/special/cospi' );
*
* var y = cospi( 0.0 );
* // returns 1.0
*
* y = cospi( 0.5 );
* // returns 0.0
*
* y = cospi( 0.1 );
* // returns ~0.951
*
* y = cospi( NaN );
* // returns NaN
*/

// MODULES //

var cospi = require( './cospi.js' );


// EXPORTS //

module.exports = cospi;

},{"./cospi.js":1241}],1243:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var P = [
	0.083333333333333333333333333333333333333333333333333,
	-0.0083333333333333333333333333333333333333333333333333,
	0.003968253968253968253968253968253968253968253968254,
	-0.0041666666666666666666666666666666666666666666666667,
	0.0075757575757575757575757575757575757575757575757576,
	-0.021092796092796092796092796092796092796092796092796,
	0.083333333333333333333333333333333333333333333333333,
	-0.44325980392156862745098039215686274509803921568627
];


// FUNCTIONS //

// Compile a function to evaluate a polynomial based on the above coefficients...
var polyval = evalpoly( P );


// MAIN //

/**
* Evaluates the digamma function via asymptotic expansion.
*
* @param {number} x - input value
* @returns {number} function value
*/
function digamma( x ) {
	var y;
	var z;
	x -= 1.0;
	y = ln(x) + ( 1.0 / (2.0*x) );
	z = 1.0 / (x*x);
	return y - ( z*polyval( z ) );
} // end FUNCTION digamma()


// EXPORTS //

module.exports = digamma;

},{"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/tools/evalpoly":1356}],1244:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}.
*
* The implementation follows the original but has been reformatted and modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var asymptoticApprox = require( './asymptotic_expansion.js' );
var rationalApprox = require( './rational_approximation.js' );


// VARIABLES //

var MIN_SAFE_ASYMPTOTIC = 10.0; // BIG


// MAIN //

/**
* Evaluates the digamma function.
*
* #### Method
*
* 1. For \\(x < 0\\), we use the reflection formula
*
*    ``` tex
*    \psi(1-x) = \psi(x) + \frac{\pi}{\tan(\pi x)}
*    ```
*
*    to make \\(x\\) positive.
*
* 2. For \\(x \in [0,1]\\), we use the recurrence relation
*
*    ``` tex
*    \psi(x) = \psi(x+1) - \frac{1}{x}
*    ```
*
*    to shift the evaluation range to \\([1,2]\\).
*
* 3. For \\(x \in [1,2]\\), we use a rational approximation of the form
*
*    ``` tex
*    \psi(x) = (x - \mathrm{root})(Y + \operatorname{R}(x-1))
*    ```
*
*    where \\(\mathrm{root}\\) is the location of the positive root of \\(\psi\\), \\(Y\\) is a constant, and \\(R\\) is optimized for low absolute error compared to \\(Y\\).
*
*    <!-- <note>-->
*    Note that, since \\(\mathrm{root}\\) is irrational, we need twice as many digits in \\(\mathrm{root}\\) as in \\(x\\) in order to avoid cancellation error during subtraction, assuming \\(x\\) has an exact value. This means that, even if \\(x\\) is rounded to the next representable value, the result of \\(\psi(x)\\) will not be zero.
*    <!-- </note> -->
*    <!-- <note> -->
*    This approach gives 17-digit precision.
*    <!-- </note> -->
*
* 4. For \\(x \in [2,\mathrm{BIG}]\\), we use the recurrence relation
*
*    ``` tex
*    \psi(x+1) = \psi(x) + \frac{1}{x}
*    ```
*
*    to shift the evaluation range to \\([1,2]\\).
*
* 5. For \\(x > \mathrm{BIG}\\), we use the asymptotic expression
*
*    ``` tex
*    \psi(x) = \ln(x) + \frac{1}{2x} - \biggl( \frac{B_{21}}{2x^2} + \frac{B_{22}}{4x^4} + \frac{B_{23}}{6x^6} + \ldots \biggr)
*    ```
*
*    This expansion, however, is divergent after a few terms. The number of terms depends on \\(x\\). Accordingly, we must choose a value of \\(\mathrm{BIG}\\) which allows us to truncate the series at a term that is too small to have an effect on the result. Setting \\(\mathrm{BIG} = 10\\), allows us to truncate the series early and evaluate as \\(1/x^2\\).
*
*    <!-- <note> -->
*    This approach gives 17-digit precision for \\(x \geq 10\\).
*    <!-- </note> -->
*
* #### Notes
*
* * Maximum deviation found: \\(1.466\\mbox{e-}18\\)
* * Max error found: \\(2.452\mbox{e-}17\\) (double precision)
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = digamma( -2.5 );
* // returns ~1.103
*
* @example
* var v = digamma( 1.0 );
* // returns ~-0.577
*
* @example
* var v = digamma( 10.0 );
* // returns ~2.252
*
* @example
* var v = digamma( NaN );
* // returns NaN
*
* @example
* var v = digamma( -1.0 );
* // returns NaN
*/
function digamma( x ) {
	var rem;
	var tmp;
	if ( isnan( x ) || x === 0.0 ) {
		return NaN;
	}
	// If `x` is negative, use reflection...
	if ( x <= -1.0 ) {
		// Reflect:
		x = 1.0 - x;

		// Argument reduction for tan:
		rem = x - floor(x);

		// Shift to negative if > 0.5:
		if ( rem > 0.5 ) {
			rem -= 1.0;
		}
		// Check for evaluation at a negative pole:
		if ( rem === 0.0 ) {
			return NaN;
		}
		tmp = PI / tan( PI * rem );
	} else {
		tmp = 0.0;
	}
	// If we're above the lower-limit for the asymptotic expansion, then use it...
	if ( x >= MIN_SAFE_ASYMPTOTIC ) {
		tmp += asymptoticApprox( x );
		return tmp;
	}
	// If x > 2, reduce to the interval [1,2]...
	while ( x > 2.0 ) {
		x -= 1.0;
		tmp += 1.0/x;
	}
	// If x < 1, use recurrence to shift to > 1..
	while ( x < 1.0 ) {
		tmp -= 1.0/x;
		x += 1.0;
	}
	tmp += rationalApprox( x );
	return tmp;
} // end FUNCTION digamma()


// EXPORTS //

module.exports = digamma;

},{"./asymptotic_expansion.js":1243,"./rational_approximation.js":1246,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/tan":1344,"@stdlib/math/constants/float64-pi":1413}],1245:[function(require,module,exports){
'use strict';

/**
* Evaluate the digamma function.
*
* @module @stdlib/math/base/special/digamma
*
* @example
* var digamma = require( '@stdlib/math/base/special/digamma' );
*
* var v = digamma( -2.5 );
* // returns ~1.103
*
* v = digamma( 1.0 );
* // returns ~-0.577
*
* v = digamma( 10.0 );
* // returns ~2.252
*
* v = digamma( NaN );
* // returns NaN
*
* v = digamma( -1.0 );
* // returns NaN
*/

// MODULES //

var digamma = require( './digamma.js' );


// EXPORTS //

module.exports = digamma;

},{"./digamma.js":1244}],1246:[function(require,module,exports){
'use strict';

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;


// VARIABLES //

var root1 = 1569415565 / 1073741824;
var root2 = ( 381566830 / 1073741824 ) / 1073741824;
var root3 = 0.9016312093258695918615325266959189453125e-19;
var Y = 0.99558162689208984;
var P = [
	0.25479851061131551,
	-0.32555031186804491,
	-0.65031853770896507,
	-0.28919126444774784,
	-0.045251321448739056,
	-0.0020713321167745952,
	0
];
var Q = [
	1.0,
	2.0767117023730469,
	1.4606242909763515,
	0.43593529692665969,
	0.054151797245674225,
	0.0021284987017821144,
	-0.55789841321675513e-6
];


// FUNCTIONS //

// Compile a function to evaluate a rational function based on the above coefficients...
var rateval = evalrational( P, Q );


// MAIN //

/**
* Evaluates the digamma function over interval `[1,2]`.
*
* @param {number} x - input value
* @returns {number} function value
*/
function digamma( x ) {
	var g;
	var r;
	g = x - root1;
	g -= root2;
	g -= root3;
	r = rateval( x - 1.0 );
	return (g*Y) + (g*r);
} // end FUNCTION digamma()


// EXPORTS //

module.exports = digamma;

},{"@stdlib/math/base/tools/evalrational":1359}],1247:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c?revision=268523&view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// VARIABLES //

var TINY = 1e-300;
var VERY_TINY = 2.848094538889218e-306; // 0x00800000, 0x00000000

// 2**-28 = 1/(1<<28) = 1/268435456
var SMALL = 3.725290298461914e-9;

var ERX = 8.45062911510467529297e-1; // 0x3FEB0AC1, 0x60000000

// Coefficients for approximation to erf on [0, 0.84375)
var EFX = 1.28379167095512586316e-1;  // 0x3FC06EBA, 0x8214DB69
var EFX8 = 1.02703333676410069053;    // 0x3FF06EBA, 0x8214DB69
var PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var PP = [
	-3.25042107247001499370e-1, // 0xBFD4CD7D, 0x691CB913
	-2.84817495755985104766e-2, // 0xBF9D2A51, 0xDBD7194F
	-5.77027029648944159157e-3, // 0xBF77A291, 0x236668E4
	-2.37630166566501626084e-5  // 0xBEF8EAD6, 0x120016AC
];
var QQC = 1.0;
var QQ = [
	3.97917223959155352819e-1, // 0x3FD97779, 0xCDDADC09
	6.50222499887672944485e-2, // 0x3FB0A54C, 0x5536CEBA
	5.08130628187576562776e-3, // 0x3F74D022, 0xC4D36B0F
	1.32494738004321644526e-4, // 0x3F215DC9, 0x221C1A10
	-3.96022827877536812320e-6 // 0xBED09C43, 0x42A26120
];

// Coefficients for approximation to erf on [0.84375, 1.25)
var PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var PA = [
	4.14856118683748331666e-1,  // 0x3FDA8D00, 0xAD92B34D
	-3.72207876035701323847e-1, // 0xBFD7D240, 0xFBB8C3F1
	3.18346619901161753674e-1,  // 0x3FD45FCA, 0x805120E4
	-1.10894694282396677476e-1, // 0xBFBC6398, 0x3D3E28EC
	3.54783043256182359371e-2,  // 0x3FA22A36, 0x599795EB
	-2.16637559486879084300e-3  // 0xBF61BF38, 0x0A96073F
];
var QAC = 1.0;
var QA = [
	1.06420880400844228286e-1, // 0x3FBB3E66, 0x18EEE323
	5.40397917702171048937e-1, // 0x3FE14AF0, 0x92EB6F33
	7.18286544141962662868e-2, // 0x3FB2635C, 0xD99FE9A7
	1.26171219808761642112e-1, // 0x3FC02660, 0xE763351F
	1.36370839120290507362e-2, // 0x3F8BEDC2, 0x6B51DD1C
	1.19844998467991074170e-2  // 0x3F888B54, 0x5735151D
];

// Coefficients for approximation to erfc on [1.25, 1/0.35)
var RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var RA = [
	-6.93858572707181764372e-1, // 0xBFE63416, 0xE4BA7360
	-1.05586262253232909814e1,  // 0xC0251E04, 0x41B0E726
	-6.23753324503260060396e1,  // 0xC04F300A, 0xE4CBA38D
	-1.62396669462573470355e2,  // 0xC0644CB1, 0x84282266
	-1.84605092906711035994e2,  // 0xC067135C, 0xEBCCABB2
	-8.12874355063065934246e1,  // 0xC0545265, 0x57E4D2F2
	-9.81432934416914548592     // 0xC023A0EF, 0xC69AC25C
];
var SAC = 1.0;
var SA = [
	1.96512716674392571292e1,  // 0x4033A6B9, 0xBD707687
	1.37657754143519042600e2,  // 0x4061350C, 0x526AE721
	4.34565877475229228821e2,  // 0x407B290D, 0xD58A1A71
	6.45387271733267880336e2,  // 0x40842B19, 0x21EC2868
	4.29008140027567833386e2,  // 0x407AD021, 0x57700314
	1.08635005541779435134e2,  // 0x405B28A3, 0xEE48AE2C
	6.57024977031928170135,    // 0x401A47EF, 0x8E484A93
	-6.04244152148580987438e-2 // 0xBFAEEFF2, 0xEE749A62
];

// Coefficients for approximation to erfc on [1/0.35, 28]
var RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var RB = [
	-7.99283237680523006574e-1, // 0xBFE993BA, 0x70C285DE
	-1.77579549177547519889e1,  // 0xC031C209, 0x555F995A
	-1.60636384855821916062e2,  // 0xC064145D, 0x43C5ED98
	-6.37566443368389627722e2,  // 0xC083EC88, 0x1375F228
	-1.02509513161107724954e3,  // 0xC0900461, 0x6A2E5992
	-4.83519191608651397019e2  // 0xC07E384E, 0x9BDC383F
];
var SBC = 1.0;
var SB = [
	3.03380607434824582924e1, // 0x403E568B, 0x261D5190
	3.25792512996573918826e2, // 0x40745CAE, 0x221B9F0A
	1.53672958608443695994e3, // 0x409802EB, 0x189D5118
	3.19985821950859553908e3, // 0x40A8FFB7, 0x688C246A
	2.55305040643316442583e3, // 0x40A3F219, 0xCEDF3BE6
	4.74528541206955367215e2, // 0x407DA874, 0xE79FE763
	-2.24409524465858183362e1 // 0xC03670E2, 0x42712D62
];


// FUNCTIONS //

// Compile functions to evaluate polynomials based on the above coefficients...
var polyvalPP = evalpoly( PP );
var polyvalQQ = evalpoly( QQ );
var polyvalPA = evalpoly( PA );
var polyvalQA = evalpoly( QA );
var polyvalRA = evalpoly( RA );
var polyvalSA = evalpoly( SA );
var polyvalRB = evalpoly( RB );
var polyvalSB = evalpoly( SB );


// MAIN //

/**
* Evaluates the error function.
*
* ``` tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ``` tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* #### Method
*
* 1. For \\(|x| \in [0, 0.84375)\\),
*
*    ``` tex
*    \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*    ```
*
*    and
*
*    ``` tex
*    \operatorname{erfc}(x) = \begin{cases}
*    1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*    0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*    \end{cases}
*    ```
*
*    where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*    ``` tex
*    \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*    ```
*
*    <!-- <note> -->
*    The formula is derived by noting
*
*    ``` tex
*    \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*    ```
*
*    and that
*
*    ``` tex
*    \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*    ```
*
*    is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*    <!-- </note> -->
*
* 2. For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*    ``` tex
*    \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*    ```
*
*    and
*
*    ``` tex
*    \operatorname{erfc}(x) = \begin{cases}
*    (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*    1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*    \end{cases}
*    ```
*
*    where
*
*    ``` tex
*    \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*    ```
*
*    <!-- <note> -->
*    Here, we use the Taylor series expansion at \\(x = 1\\)
*
*    ``` tex
*    \begin{align*}
*    \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*    &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*    \end{align*}
*    ```
*
*    using a rational approximation to approximate
*
*    ``` tex
*    \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*    ```
*
*    <!-- </note> -->
*    Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*    - \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*    - \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3. For \\(x \in [1.25,1/0.35)\\),
*
*    ``` tex
*    \begin{align*}
*    \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*    \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*    \end{align*}
*    ```
*
*    where
*
*    - \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*    - \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4. For \\(x \in [1/0.35,28)\\),
*
*    ``` tex
*    \operatorname{erfc}(x) = \begin{cases}
*    \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*    2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*    2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*    \end{cases}
*    ```
*
*    and
*
*    ``` tex
*    \operatorname{erf}(x) = \begin{cases}
*    \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*    \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*    \end{cases}
*    ```
*
*    where
*
*    - \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*    - \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5. For \\(x \in [28, \infty)\\),
*
*    ``` tex
*    \begin{align*}
*    \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*    \end{align*}
*    ```
*
*    and
*
*    ``` tex
*    \operatorname{erfc}(x) = \begin{cases}
*    \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*    2 - \mathrm{tiny} & \textrm{if}\ x < 0
*    \end{cases}
*    ```
*
*
* #### Special Cases
*
* ``` tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* #### Notes
*
* * To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*    ``` tex
*    -x^2 = -s^2 + (s-x)(s+x)
*    ```
*
*    and
*
*    ``` tex
*    e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*    ```
*
* * `#4` and `#5` make use of the asymptotic series
*
*    ``` tex
*    \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*    ```
*
*    We use a rational approximation to approximate
*
*    ``` tex
*    g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*    ```
*
* * The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*    ``` tex
*    |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*    ```
*
*    and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*    ``` tex
*    |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*    ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erf( 2.0 );
* // returns ~0.9953
*
* @example
* var y = erf( -1.0 );
* // returns ~-0.8427
*
* @example
* var y = erf( -0.0 );
* // returns -0.0
*
* @example
* var y = erf( NaN );
* // returns NaN
*/
function erf( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( isnan( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === PINF ) {
		return 1.0;
	}
	// Special case: -infinity
	if ( x === NINF ) {
		return -1.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < SMALL ) {
			if ( ax < VERY_TINY ) {
				// Avoid underflow:
				return 0.125 * ( (8.0*x) + (EFX8*x) );
			}
			return x + (EFX*x);
		}
		z = x * x;
		r = PPC + ( z*polyvalPP( z ) );
		s = QQC + ( z*polyvalQQ( z ) );
		y = r / s;
		return x + (x*y);
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = PAC + ( s*polyvalPA( s ) );
		q = QAC + ( s*polyvalQA( s ) );
		if ( sign ) {
			return -ERX - (p/q);
		}
		return ERX + (p/q);
	}
	// +inf > |x| >= 6
	if ( ax >= 6.0 ) {
		if ( sign ) {
			return TINY - 1.0; // raise inexact
		}
		return 1.0 - TINY; // raise inexact
	}
	s = 1.0 / (ax*ax);

	// |x| < 1/0.35 ~ 2.857143
	if ( ax < 2.857142857142857 ) {
		r = RAC + ( s*polyvalRA( s ) );
		s = SAC + ( s*polyvalSA( s ) );
	}
	// |x| >= 1/0.35 ~ 2.857143
	else {
		r = RBC + ( s*polyvalRB( s ) );
		s = SBC + ( s*polyvalSB( s ) );
	}
	z = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x
	r = exp( -(z*z) - 0.5625 ) * exp( ( (z-ax) * (z+ax) ) + (r/s) );
	if ( sign ) {
		return (r/ax) - 1.0;
	}
	return 1.0 - (r/ax);
} // end FUNCTION erf()


// EXPORTS //

module.exports = erf;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-set-low-word":1379,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1248:[function(require,module,exports){
'use strict';

/**
* Evaluate the error function.
*
* @module @stdlib/math/base/special/erf
*
* @example
* var erf = require( '@stdlib/math/base/special/erf' );
*
* var y = erf( 2.0 );
* // returns ~0.9953
*
* y = erf( -1.0 );
* // returns ~-0.8427
*
* y = erf( -0.0 );
* // returns -0.0
*
* y = erf( NaN );
* // returns NaN
*/

// MODULES //

var erf = require( './erf.js' );


// EXPORTS //

module.exports = erf;

},{"./erf.js":1247}],1249:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c?revision=268523&view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// VARIABLES //

var TINY = 1.0e-300;

// 2**-56 = 1/(2**56) = 1/72057594037927940
var SMALL = 1.3877787807814457e-17;

var ERX = 8.45062911510467529297e-1; // 0x3FEB0AC1, 0x60000000

// Coefficients for approximation to erf on [0, 0.84375)
var PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var PP = [
	-3.25042107247001499370e-1, // 0xBFD4CD7D, 0x691CB913
	-2.84817495755985104766e-2, // 0xBF9D2A51, 0xDBD7194F
	-5.77027029648944159157e-3, // 0xBF77A291, 0x236668E4
	-2.37630166566501626084e-5  // 0xBEF8EAD6, 0x120016AC
];
var QQC = 1.0;
var QQ = [
	3.97917223959155352819e-1, // 0x3FD97779, 0xCDDADC09
	6.50222499887672944485e-2, // 0x3FB0A54C, 0x5536CEBA
	5.08130628187576562776e-3, // 0x3F74D022, 0xC4D36B0F
	1.32494738004321644526e-4, // 0x3F215DC9, 0x221C1A10
	-3.96022827877536812320e-6 // 0xBED09C43, 0x42A26120
];

// Coefficients for approximation to erf on [0.84375, 1.25)
var PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var PA = [
	4.14856118683748331666e-1,  // 0x3FDA8D00, 0xAD92B34D
	-3.72207876035701323847e-1, // 0xBFD7D240, 0xFBB8C3F1
	3.18346619901161753674e-1,  // 0x3FD45FCA, 0x805120E4
	-1.10894694282396677476e-1, // 0xBFBC6398, 0x3D3E28EC
	3.54783043256182359371e-2,  // 0x3FA22A36, 0x599795EB
	-2.16637559486879084300e-3  // 0xBF61BF38, 0x0A96073F
];
var QAC = 1.0;
var QA = [
	1.06420880400844228286e-1, // 0x3FBB3E66, 0x18EEE323
	5.40397917702171048937e-1, // 0x3FE14AF0, 0x92EB6F33
	7.18286544141962662868e-2, // 0x3FB2635C, 0xD99FE9A7
	1.26171219808761642112e-1, // 0x3FC02660, 0xE763351F
	1.36370839120290507362e-2, // 0x3F8BEDC2, 0x6B51DD1C
	1.19844998467991074170e-2  // 0x3F888B54, 0x5735151D
];

// Coefficients for approximation to erfc on [1.25, 1/0.35)
var RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var RA = [
	-6.93858572707181764372e-1, // 0xBFE63416, 0xE4BA7360
	-1.05586262253232909814e1,  // 0xC0251E04, 0x41B0E726
	-6.23753324503260060396e1,  // 0xC04F300A, 0xE4CBA38D
	-1.62396669462573470355e2,  // 0xC0644CB1, 0x84282266
	-1.84605092906711035994e2,  // 0xC067135C, 0xEBCCABB2
	-8.12874355063065934246e1,  // 0xC0545265, 0x57E4D2F2
	-9.81432934416914548592     // 0xC023A0EF, 0xC69AC25C
];
var SAC = 1.0;
var SA = [
	1.96512716674392571292e1,  // 0x4033A6B9, 0xBD707687
	1.37657754143519042600e2,  // 0x4061350C, 0x526AE721
	4.34565877475229228821e2,  // 0x407B290D, 0xD58A1A71
	6.45387271733267880336e2,  // 0x40842B19, 0x21EC2868
	4.29008140027567833386e2,  // 0x407AD021, 0x57700314
	1.08635005541779435134e2,  // 0x405B28A3, 0xEE48AE2C
	6.57024977031928170135,    // 0x401A47EF, 0x8E484A93
	-6.04244152148580987438e-2 // 0xBFAEEFF2, 0xEE749A62
];

// Coefficients for approximation to erfc on [1/0.35, 28]
var RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var RB = [
	-7.99283237680523006574e-1, // 0xBFE993BA, 0x70C285DE
	-1.77579549177547519889e1,  // 0xC031C209, 0x555F995A
	-1.60636384855821916062e2,  // 0xC064145D, 0x43C5ED98
	-6.37566443368389627722e2,  // 0xC083EC88, 0x1375F228
	-1.02509513161107724954e3,  // 0xC0900461, 0x6A2E5992
	-4.83519191608651397019e2  // 0xC07E384E, 0x9BDC383F
];
var SBC = 1.0;
var SB = [
	3.03380607434824582924e1, // 0x403E568B, 0x261D5190
	3.25792512996573918826e2, // 0x40745CAE, 0x221B9F0A
	1.53672958608443695994e3, // 0x409802EB, 0x189D5118
	3.19985821950859553908e3, // 0x40A8FFB7, 0x688C246A
	2.55305040643316442583e3, // 0x40A3F219, 0xCEDF3BE6
	4.74528541206955367215e2, // 0x407DA874, 0xE79FE763
	-2.24409524465858183362e1 // 0xC03670E2, 0x42712D62
];


// FUNCTIONS //

// Compile functions to evaluate polynomials based on the above coefficients...
var polyvalPP = evalpoly( PP );
var polyvalQQ = evalpoly( QQ );
var polyvalPA = evalpoly( PA );
var polyvalQA = evalpoly( QA );
var polyvalRA = evalpoly( RA );
var polyvalSA = evalpoly( SA );
var polyvalRB = evalpoly( RB );
var polyvalSB = evalpoly( SB );


// MAIN //

/**
* Evaluates the complementary error function.
*
* ``` tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ``` tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* #### Method
*
* 1. For \\(|x| \in [0, 0.84375)\\),
*
*    ``` tex
*    \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*    ```
*
*    and
*
*    ``` tex
*    \operatorname{erfc}(x) = \begin{cases}
*    1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*    0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*    \end{cases}
*    ```
*
*    where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*    ``` tex
*    \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*    ```
*
*    <!-- <note> -->
*    The formula is derived by noting
*
*    ``` tex
*    \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*    ```
*
*    and that
*
*    ``` tex
*    \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*    ```
*
*    is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*    <!-- </note> -->
*
* 2. For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*    ``` tex
*    \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*    ```
*
*    and
*
*    ``` tex
*    \operatorname{erfc}(x) = \begin{cases}
*    (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*    1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*    \end{cases}
*    ```
*
*    where
*
*    ``` tex
*    \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*    ```
*
*    <!-- <note> -->
*    Here, we use the Taylor series expansion at \\(x = 1\\)
*
*    ``` tex
*    \begin{align*}
*    \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*    &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*    \end{align*}
*    ```
*
*    using a rational approximation to approximate
*
*    ``` tex
*    \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*    ```
*
*    <!-- </note> -->
*    Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*    - \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*    - \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3. For \\(x \in [1.25,1/0.35)\\),
*
*    ``` tex
*    \begin{align*}
*    \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*    \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*    \end{align*}
*    ```
*
*    where
*
*    - \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*    - \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4. For \\(x \in [1/0.35,28)\\),
*
*    ``` tex
*    \operatorname{erfc}(x) = \begin{cases}
*    \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*    2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*    2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*    \end{cases}
*    ```
*
*    and
*
*    ``` tex
*    \operatorname{erf}(x) = \begin{cases}
*    \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*    \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*    \end{cases}
*    ```
*
*    where
*
*    - \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*    - \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5. For \\(x \in [28, \infty)\\),
*
*    ``` tex
*    \begin{align*}
*    \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*    \end{align*}
*    ```
*
*    and
*
*    ``` tex
*    \operatorname{erfc}(x) = \begin{cases}
*    \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*    2 - \mathrm{tiny} & \textrm{if}\ x < 0
*    \end{cases}
*    ```
*
*
* #### Special Cases
*
* ``` tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* #### Notes
*
* * To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*    ``` tex
*    -x^2 = -s^2 + (s-x)(s+x)
*    ```
*
*    and
*
*    ``` tex
*    e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*    ```
*
* * `#4` and `#5` make use of the asymptotic series
*
*    ``` tex
*    \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*    ```
*
*    We use a rational approximation to approximate
*
*    ``` tex
*    g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*    ```
*
* * The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*    ``` tex
*    |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*    ```
*
*    and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*    ``` tex
*    |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*    ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* @example
* var y = erfc( -1.0 );
* // returns ~-1.8427
*
* @example
* var y = erfc( 0.0 );
* // returns 1.0
*
* @example
* var y = erfc( Number.POSITIVE_INFINITY );
* // returns 0.0
*
* @example
* var y = erfc( Number.NEGATIVE_INFINITY );
* // returns 2.0
*
* @example
* var y = erfc( NaN );
* // returns NaN
*/
function erfc( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( isnan( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === PINF ) {
		return 0.0;
	}
	// Special case: -infinity
	if ( x === NINF ) {
		return 2.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < SMALL ) {
			return 1.0 - x; // raise inexact
		}
		z = x * x;
		r = PPC + ( z*polyvalPP( z ) );
		s = QQC + ( z*polyvalQQ( z ) );
		y = r / s;

		// x < 1/4
		if ( x < 0.25 ) {
			return 1.0 - ( x + (x*y) );
		}
		r = x * y;
		r += x - 0.5;
		return 0.5 - r;
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = PAC + ( s*polyvalPA( s ) );
		q = QAC + ( s*polyvalQA( s ) );
		if ( sign ) {
			return 1.0 + ERX + (p/q);
		}
		return 1.0 - ERX - (p/q);
	}
	// |x| < 28
	if ( ax < 28.0 ) {
		s = 1.0 / (ax*ax);

		// |x| < 1/0.35 ~ 2.857143
		if ( ax < 2.857142857142857 ) {
			r = RAC + ( s*polyvalRA( s ) );
			s = SAC + ( s*polyvalSA( s ) );
		}
		// |x| >= 1/0.35 ~ 2.857143
		else {
			// x < -6
			if ( x < -6.0 ) {
				return 2.0 - TINY; // raise inexact
			}
			r = RBC + ( s*polyvalRB( s ) );
			s = SBC + ( s*polyvalSB( s ) );
		}
		z = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x
		r = exp( -(z*z) - 0.5625 ) * exp( ((z-ax)*(z+ax)) + (r/s) );
		if ( sign ) {
			return 2.0 - (r/ax);
		}
		return r/ax;
	}
	if ( sign ) {
		return 2.0 - TINY; // raise inexact; ~2
	}
	return TINY * TINY; // raise inexact; ~0
} // end FUNCTION erfc()


// EXPORTS //

module.exports = erfc;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-set-low-word":1379,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1250:[function(require,module,exports){
'use strict';

/**
* Evaluate the complementary error function.
*
* @module @stdlib/math/base/special/erfc
*
* @example
* var erfc = require( '@stdlib/math/base/special/erfc' );
*
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* y = erfc( -1.0 );
* // returns ~-1.8427
*
* y = erfc( 0.0 );
* // returns 1.0
*
* y = erfc( Number.POSITIVE_INFINITY );
* // returns 0.0
*
* y = erfc( Number.NEGATIVE_INFINITY );
* // returns 2.0
*
* y = erfc( NaN );
* // returns NaN
*/

// MODULES //

var erfc = require( './erfc.js' );


// EXPORTS //

module.exports = erfc;

},{"./erfc.js":1249}],1251:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}.
*
* This implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// VARIABLES //

// Coefficients for erfinv on [0, 0.5]:
var Y1 = 8.91314744949340820313e-2;
var P1 = [
	-5.08781949658280665617e-4,
	-8.36874819741736770379e-3,
	3.34806625409744615033e-2,
	-1.26926147662974029034e-2,
	-3.65637971411762664006e-2,
	2.19878681111168899165e-2,
	8.22687874676915743155e-3,
	-5.38772965071242932965e-3,
	0.0,
	0.0
];
var Q1 = [
	1.0,
	-9.70005043303290640362e-1,
	-1.56574558234175846809,
	1.56221558398423026363,
	6.62328840472002992063e-1,
	-7.1228902341542847553e-1,
	-5.27396382340099713954e-2,
	7.95283687341571680018e-2,
	-2.33393759374190016776e-3,
	8.86216390456424707504e-4
];

// Coefficients for erfinv for 0.5 > 1-x >= 0:
var Y2 = 2.249481201171875;
var P2 = [
	-2.02433508355938759655e-1,
	1.05264680699391713268e-1,
	8.37050328343119927838,
	1.76447298408374015486e1,
	-1.88510648058714251895e1,
	-4.46382324441786960818e1,
	1.7445385985570866523e1,
	2.11294655448340526258e1,
	-3.67192254707729348546
];
var Q2 = [
	1.0,
	6.24264124854247537712,
	3.9713437953343869095,
	-2.86608180499800029974e1,
	-2.01432634680485188801e1,
	4.85609213108739935468e1,
	1.08268667355460159008e1,
	-2.26436933413139721736e1,
	1.72114765761200282724
];

// Coefficients for erfinv for sqrt( -log(1-x) ):
var Y3 = 8.07220458984375e-1;
var P3 = [
	-1.31102781679951906451e-1,
	-1.63794047193317060787e-1,
	1.17030156341995252019e-1,
	3.87079738972604337464e-1,
	3.37785538912035898924e-1,
	1.42869534408157156766e-1,
	2.90157910005329060432e-2,
	2.14558995388805277169e-3,
	-6.79465575181126350155e-7,
	2.85225331782217055858e-8,
	-6.81149956853776992068e-10
];
var Q3 = [
	1.0,
	3.46625407242567245975,
	5.38168345707006855425,
	4.77846592945843778382,
	2.59301921623620271374,
	8.48854343457902036425e-1,
	1.52264338295331783612e-1,
	1.105924229346489121e-2,
	0.0,
	0.0,
	0.0
];

var Y4 = 9.3995571136474609375e-1;
var P4 = [
	-3.50353787183177984712e-2,
	-2.22426529213447927281e-3,
	1.85573306514231072324e-2,
	9.50804701325919603619e-3,
	1.87123492819559223345e-3,
	1.57544617424960554631e-4,
	4.60469890584317994083e-6,
	-2.30404776911882601748e-10,
	2.66339227425782031962e-12
];
var Q4 = [
	1.0,
	1.3653349817554063097,
	7.62059164553623404043e-1,
	2.20091105764131249824e-1,
	3.41589143670947727934e-2,
	2.63861676657015992959e-3,
	7.64675292302794483503e-5,
	0.0,
	0.0
];

var Y5 = 9.8362827301025390625e-1;
var P5 = [
	-1.67431005076633737133e-2,
	-1.12951438745580278863e-3,
	1.05628862152492910091e-3,
	2.09386317487588078668e-4,
	1.49624783758342370182e-5,
	4.49696789927706453732e-7,
	4.62596163522878599135e-9,
	-2.81128735628831791805e-14,
	9.9055709973310326855e-17
];
var Q5 = [
	1.0,
	5.91429344886417493481e-1,
	1.38151865749083321638e-1,
	1.60746087093676504695e-2,
	9.64011807005165528527e-4,
	2.75335474764726041141e-5,
	2.82243172016108031869e-7,
	0.0,
	0.0
];


// FUNCTIONS //

// Compile functions for evaluating rational functions...
var rationalFcnR1 = evalrational( P1, Q1 );
var rationalFcnR2 = evalrational( P2, Q2 );
var rationalFcnR3 = evalrational( P3, Q3 );
var rationalFcnR4 = evalrational( P4, Q4 );
var rationalFcnR5 = evalrational( P5, Q5 );


// MAIN //

/**
* Evaluates the inverse complementary error function.
*
* Note that
*
* ``` tex
* \operatorname{erfc^{-1}}(1-z) = \operatorname{erf^{-1}}(z)
* ```
*
* #### Method
*
* 1. For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*    ``` tex
*    \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*    ```
*
*    where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*    <!-- <note> -->
*    Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*    <!-- </note> -->
*
* 2. For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*    ``` tex
*    \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*    ```
*
*    where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*    <!-- <note> -->
*    Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*    <!-- </note> -->
*
* 3. For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*    ``` tex
*    p = \sqrt{-\ln(1-x)}
*    ```
*
*    Accordingly, the result is given by
*
*    ``` tex
*    \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*    ```
*
*    where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*    <!-- <note> -->
*    Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*      * If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*      * If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*      * If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*      * If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*      * If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*    <!-- </note> -->
*    <!-- <note> -->
*    The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*    <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfcinv( 0.8 );
* // returns ~-0.1791
*
* @example
* var y = erfcinv( 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var y = erfcinv( 2.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var y = erfcinv( NaN );
* // returns NaN
*/
function erfcinv( x ) {
	var sign;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( isnan( x ) ) {
		return NaN;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return PINF;
	}
	// Special case: 2
	if ( x === 2.0 ) {
		return NINF;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x > 2.0 || x < 0.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is outside [0,1], we can take advantage of the complementary error function reflection formula: `erfc(-z) = 2 - erfc(z)`, by negating the result once finished.
	if ( x > 1.0 ) {
		sign = -1.0;
		q = 2.0 - x;
	} else {
		sign = 1.0;
		q = x;
	}
	x = 1.0 - q;

	// x = 1-q <= 0.5
	if ( x <= 0.5 ) {
		g = x * ( x + 10.0 );
		r = rationalFcnR1( x );
		return sign * ( (g*Y1) + (g*r) );
	}
	// q >= 0.25
	if ( q >= 0.25 ) {
		g = sqrt( -2.0 * ln(q) );
		q -= 0.25;
		r = rationalFcnR2( q );
		return sign * ( g / (Y2+r) );
	}
	q = sqrt( -ln( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = rationalFcnR3( qs );
		return sign * ( (Y3*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = rationalFcnR4( qs );
		return sign * ( (Y4*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = rationalFcnR5( qs );
	return sign * ( (Y5*q) + (r*q) );
} // end FUNCTION erfcinv()


// EXPORTS //

module.exports = erfcinv;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1252:[function(require,module,exports){
'use strict';

/**
* Evaluate the inverse complementary error function.
*
* @module @stdlib/math/base/special/erfcinv
*
* @example
* var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
*
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* y = erfcinv( 0.8 );
* // returns ~-0.1791
*
* y = erfcinv( 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* y = erfcinv( 2.0 );
* // returns Number.NEGATIVE_INFINITY
*
* y = erfcinv( NaN );
* // returns NaN
*/

// MODULES //

var erfcinv = require( './erfcinv.js' );


// EXPORTS //

module.exports = erfcinv;

},{"./erfcinv.js":1251}],1253:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}.
*
* This implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// VARIABLES //

// Coefficients for erfinv on [0, 0.5]:
var Y1 = 8.91314744949340820313e-2;
var P1 = [
	-5.08781949658280665617e-4,
	-8.36874819741736770379e-3,
	3.34806625409744615033e-2,
	-1.26926147662974029034e-2,
	-3.65637971411762664006e-2,
	2.19878681111168899165e-2,
	8.22687874676915743155e-3,
	-5.38772965071242932965e-3,
	0.0,
	0.0
];
var Q1 = [
	1.0,
	-9.70005043303290640362e-1,
	-1.56574558234175846809,
	1.56221558398423026363,
	6.62328840472002992063e-1,
	-7.1228902341542847553e-1,
	-5.27396382340099713954e-2,
	7.95283687341571680018e-2,
	-2.33393759374190016776e-3,
	8.86216390456424707504e-4
];

// Coefficients for erfinv for 0.5 > 1-x >= 0:
var Y2 = 2.249481201171875;
var P2 = [
	-2.02433508355938759655e-1,
	1.05264680699391713268e-1,
	8.37050328343119927838,
	1.76447298408374015486e1,
	-1.88510648058714251895e1,
	-4.46382324441786960818e1,
	1.7445385985570866523e1,
	2.11294655448340526258e1,
	-3.67192254707729348546
];
var Q2 = [
	1.0,
	6.24264124854247537712,
	3.9713437953343869095,
	-2.86608180499800029974e1,
	-2.01432634680485188801e1,
	4.85609213108739935468e1,
	1.08268667355460159008e1,
	-2.26436933413139721736e1,
	1.72114765761200282724
];

// Coefficients for erfinv for sqrt( -log(1-x) ):
var Y3 = 8.07220458984375e-1;
var P3 = [
	-1.31102781679951906451e-1,
	-1.63794047193317060787e-1,
	1.17030156341995252019e-1,
	3.87079738972604337464e-1,
	3.37785538912035898924e-1,
	1.42869534408157156766e-1,
	2.90157910005329060432e-2,
	2.14558995388805277169e-3,
	-6.79465575181126350155e-7,
	2.85225331782217055858e-8,
	-6.81149956853776992068e-10
];
var Q3 = [
	1.0,
	3.46625407242567245975,
	5.38168345707006855425,
	4.77846592945843778382,
	2.59301921623620271374,
	8.48854343457902036425e-1,
	1.52264338295331783612e-1,
	1.105924229346489121e-2,
	0.0,
	0.0,
	0.0
];

var Y4 = 9.3995571136474609375e-1;
var P4 = [
	-3.50353787183177984712e-2,
	-2.22426529213447927281e-3,
	1.85573306514231072324e-2,
	9.50804701325919603619e-3,
	1.87123492819559223345e-3,
	1.57544617424960554631e-4,
	4.60469890584317994083e-6,
	-2.30404776911882601748e-10,
	2.66339227425782031962e-12
];
var Q4 = [
	1.0,
	1.3653349817554063097,
	7.62059164553623404043e-1,
	2.20091105764131249824e-1,
	3.41589143670947727934e-2,
	2.63861676657015992959e-3,
	7.64675292302794483503e-5,
	0.0,
	0.0
];

var Y5 = 9.8362827301025390625e-1;
var P5 = [
	-1.67431005076633737133e-2,
	-1.12951438745580278863e-3,
	1.05628862152492910091e-3,
	2.09386317487588078668e-4,
	1.49624783758342370182e-5,
	4.49696789927706453732e-7,
	4.62596163522878599135e-9,
	-2.81128735628831791805e-14,
	9.9055709973310326855e-17
];
var Q5 = [
	1.0,
	5.91429344886417493481e-1,
	1.38151865749083321638e-1,
	1.60746087093676504695e-2,
	9.64011807005165528527e-4,
	2.75335474764726041141e-5,
	2.82243172016108031869e-7,
	0.0,
	0.0
];


// FUNCTIONS //

// Compile functions for evaluating rational functions...
var rationalFcnR1 = evalrational( P1, Q1 );
var rationalFcnR2 = evalrational( P2, Q2 );
var rationalFcnR3 = evalrational( P3, Q3 );
var rationalFcnR4 = evalrational( P4, Q4 );
var rationalFcnR5 = evalrational( P5, Q5 );


// MAIN //

/**
* Evaluates the inverse error function.
*
* #### Method
*
* 1. For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*    ``` tex
*    \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*    ```
*
*    where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*    <!-- <note> -->
*    Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*    <!-- </note> -->
*
* 2. For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*    ``` tex
*    \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*    ```
*
*    where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*    <!-- <note> -->
*    Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*    <!-- </note> -->
*
* 3. For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*    ``` tex
*    p = \sqrt{-\ln(1-x)}
*    ```
*
*    Accordingly, the result is given by
*
*    ``` tex
*    \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*    ```
*
*    where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*    <!-- <note> -->
*    Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*      * If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*      * If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*      * If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*      * If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*      * If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*    <!-- </note> -->
*    <!-- <note> -->
*    The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*    <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfinv( 0.8 );
* // returns ~0.9062
*
* @example
* var y = erfinv( 0.0 );
* // returns 0.0
*
* @example
* var y = erfinv( -0.0 );
* // returns -0.0
*
* @example
* var y = erfinv( -1.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var y = erfinv( 1.0 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var y = erfinv( NaN );
* // returns NaN
*/
function erfinv( x ) {
	var sign;
	var ax;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( isnan( x ) ) {
		return NaN;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return PINF;
	}
	// Special case: -1
	if ( x === -1.0 ) {
		return NINF;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	// Special case: |x| > 1 (range error)
	if ( x > 1.0 || x < -1.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.
	if ( x < 0.0 ) {
		sign = -1.0;
		ax = -x;
	} else {
		sign = 1.0;
		ax = x;
	}
	q = 1.0 - ax;

	// |x| <= 0.5
	if ( ax <= 0.5 ) {
		g = ax * ( ax + 10.0 );
		r = rationalFcnR1( ax );
		return sign * ( (g*Y1) + (g*r) );
	}
	// 1-|x| >= 0.25
	if ( q >= 0.25 ) {
		g = sqrt( -2.0 * ln(q) );
		q -= 0.25;
		r = rationalFcnR2( q );
		return sign * ( g / (Y2+r) );
	}
	q = sqrt( -ln( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = rationalFcnR3( qs );
		return sign * ( (Y3*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = rationalFcnR4( qs );
		return sign * ( (Y4*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = rationalFcnR5( qs );
	return sign * ( (Y5*q) + (r*q) );
} // end FUNCTION erfinv()


// EXPORTS //

module.exports = erfinv;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1254:[function(require,module,exports){
'use strict';

/**
* Evaluate the inverse error function.
*
* @module @stdlib/math/base/special/erfinv
*
* @example
* var erfinv = require( '@stdlib/math/base/special/erfinv' );
*
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* y = erfinv( 0.8 );
* // returns ~0.9062
*
* y = erfinv( 0.0 );
* // returns 0.0
*
* y = erfinv( -0.0 );
* // returns -0.0
*
* y = erfinv( -1.0 );
* // returns Number.NEGATIVE_INFINITY
*
* y = erfinv( 1.0 );
* // returns Number.POSITIVE_INFINITY
*
* y = erfinv( NaN );
* // returns NaN
*/

// MODULES //

var erfinv = require( './erfinv.js' );


// EXPORTS //

module.exports = erfinv;

},{"./erfinv.js":1253}],1255:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var expmulti = require( './expmulti.js' );


// VARIABLES //

var LN2_HI = 6.93147180369123816490e-01;
var LN2_LO = 1.90821492927058770002e-10;
var LOG2_E = 1.44269504088896338700e+00;
var OVERFLOW = 7.09782712893383973096e+02;
var UNDERFLOW = -7.45133219101941108420e+02;
var NEARZERO = 1.0 / (1 << 28); // 2^-28;
var NEG_NEARZERO = -NEARZERO;


// MAIN //

/**
* Evaluates the natural exponential function.
*
* #### Method
*
* 1. We reduce \\( x \\) to an \\( r \\) so that \\( |r| \leq 0.5 \cdot \ln(2) \approx 0.34658 \\). Given \\( x \\), we find an \\( r \\) and integer \\( k \\) such that
*
*   ``` tex
*   \begin{align*}
*   x &= k \cdot \ln(2) + r \\
*   |r| &\leq 0.5 \cdot \ln(2)
*   \end{align*}
*   ```
*
*   <!-- <note> -->
*   \\( r \\) can be represented as \\( r = \mathrm{hi} - \mathrm{lo} \\) for better accuracy.
*   <!-- </note> -->
*
* 2. We approximate of \\( e^{r} \\) by a special rational function on the interval \\([0,0.34658]\\):
*
*   ``` tex
*   \begin{align*}
*   R\left(r^2\right) &= r \cdot \frac{ e^{r}+1 }{ e^{r}-1 } \\
*   &= 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*   \end{align*}
*   ```
*
*   We use a special Remes algorithm on \\([0,0.34658]\\) to generate a polynomial of degree \\(5\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-59}\\). In other words,
*
*   ``` tex
*   R(z) \sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5
*   ```
*
*   where \\( z = r^2 \\) and
*
*   ``` tex
*   \left|  2 + P_1 z + \ldots + P_5 z^5  - R(z) \right| \leq 2^{-59}
*   ```
*
*   <!-- <note> -->
*   The values of \\( P_1 \\) to \\( P_5 \\) are listed in the source code.
*   <!-- </note> -->
*   The computation of \\( e^{r} \\) thus becomes
*
*   ``` tex
*   \begin{align*}
*   e^{r} &= 1 + \frac{2r}{R-r} \\
*           &= 1 + r + \frac{r \cdot R_1(r)}{2 - R_1(r)}\ \text{for better accuracy}
*   \end{align*}
*   ```
*
*   where
*
*   ``` tex
*   R_1(r) = r - P_1\ r^2 + P_2\ r^4 + \ldots + P_5\ r^{10}
*   ```
*
* 3. We scale back to obtain \\( e^{x} \\). From step 1, we have
*
*   ``` tex
*   e^{x} = 2^k e^{r}
*   ```
*
*
* #### Special Cases
*
* ``` tex
* \begin{align*}
* e^\infty &= \infty \\
* e^{-\infty} &= 0 \\
* e^{\mathrm{NaN}} &= \mathrm{NaN} \\
* e^0 &= 1\ \mathrm{is\ exact\ for\ finite\ argument\ only}
* \end{align*}
* ```
*
* #### Notes
*
* - According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
* - For IEEE double,
*   * if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(e^{x}\\) overflows
*   * if \\(x < -7.45133219101941108420\mbox{e+}02\\), then \\(e^{x}\\) underflows
* - The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp( 4.0 );
* // returns ~54.5982
*
* @example
* var v = exp( -9.0 );
* // returns ~1.234e-4
*
* @example
* var v = exp( 0.0 );
* // returns 1.0
*
* @example
* var v = exp( NaN );
* // returns NaN
*/
function exp( x ) {
	var hi;
	var lo;
	var k;

	if ( isnan( x ) || x === PINF ) {
		return x;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	if ( x > OVERFLOW ) {
		return PINF;
	}
	if ( x < UNDERFLOW ) {
		return 0.0;
	}
	if (
		x > NEG_NEARZERO &&
		x < NEARZERO
	) {
		return 1.0 + x;
	}
	// Reduce and compute `r = hi - lo` for extra precision.
	if ( x < 0.0 ) {
		k = trunc( (LOG2_E*x) - 0.5 );
	} else {
		k = trunc( (LOG2_E*x) + 0.5 );
	}
	hi = x - (k*LN2_HI);
	lo = k * LN2_LO;

	return expmulti( hi, lo, k );
} // end FUNCTION exp()


// EXPORTS //

module.exports = exp;

},{"./expmulti.js":1256,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/trunc":1349,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1256:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

var P = [
	1.66666666666666019037e-01,  /* 0x3FC55555; 0x5555553E */
	-2.77777777770155933842e-03, /* 0xBF66C16C; 0x16BEBD93 */
	6.61375632143793436117e-05, /* 0x3F11566A; 0xAF25DE2C */
	-1.65339022054652515390e-06,/* 0xBEBBBD41; 0xC5D26BF1 */
	4.13813679705723846039e-08 /* 0x3E663769; 0x72BEA4D0 */
];


// FUNCTIONS //

// Compile a function for evaluating a polynomial based on the above coefficients...
var polyval_P = evalpoly( P );


// MAIN //

/**
* Computes \\(e^{r} 2^k\\) where \\(r = \mathrm{hi} - \mathrm{lo}\\) and \\(|r| \leq \ln(2)/2\\).
*
* @private
* @param {number} hi - upper bound
* @param {number} lo - lower bound
* @param {integer} k - power of 2
* @returns {number} function value
*/
function expmulti( hi, lo, k ) {
	var r;
	var t;
	var c;
	var y;

	r = hi - lo;
	t = r * r;
	c = r - t*polyval_P( t );
	y = 1.0 - ((lo - (r*c)/(2.0-c)) - hi);

	return ldexp( y, k );
} // end FUNCTION expmulti()


// EXPORTS //

module.exports = expmulti;

},{"@stdlib/math/base/special/ldexp":1298,"@stdlib/math/base/tools/evalpoly":1356}],1257:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural exponential function.
*
* @module @stdlib/math/base/special/exp
*
* @example
* var exp = require( '@stdlib/math/base/special/exp' );
*
* var v = exp( 4.0 );
* // returns ~54.5982
*
* v = exp( -9.0 );
* // returns ~1.234e-4
*
* v = exp( 0.0 );
* // returns 1.0
*
* v = exp( NaN );
* // returns NaN
*/

// MODULES //

var exp = require( './exp.js' );


// EXPORTS //

module.exports = exp;

},{"./exp.js":1255}],1258:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [netlib]{@link http://www.netlib.org/fdlibm/s_expm1.c}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var highWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var LN2_HALF = require( '@stdlib/math/constants/float64-half-ln-two' );


// VARIABLES //

var OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF

// High and low words of ln(2):
var LN2_HI = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000
var LN2_LO = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76

// 1 / ln(2):
var LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE

// ln(2) * 56:
var LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1

// ln(2) * 1.5:
var LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73

// Scaled polynomial coefficients:
var Q = [
	-3.33333333333331316428e-02, // 0xBFA11111 0x111110F4
	1.58730158725481460165e-03,  // 0x3F5A01A0 0x19FE5585
	-7.93650757867487942473e-05, // 0xBF14CE19 0x9EAADBB7
	4.00821782732936239552e-06,  // 0x3ED0CFCA 0x86E65239
	-2.01099218183624371326e-07 // 0xBE8AFDB7 0x6E09C32D
];


// FUNCTIONS //

var polyval = evalpoly.factory( Q );


// MAIN //

/**
* Computes `exp(x) - 1`.
*
* #### Method
*
* 1. Given \\(x\\), we use argument reduction to find \\(r\\) and an integer \\(k\\) such that
*
*    ``` tex
*    x = k \cdot \ln(2) + r
*    ```
*
*    where
*
*    ``` tex
*    |r| \leq \frac{\ln(2)}{2} \approx 0.34658
*    ```
*
*    <!-- <note> -->
*    A correction term \\(c\\) will need to be computed to compensate for the error in \\(r\\) when rounded to a floating-point number.
*    <!-- </note> -->
*
* 2. To approximate \\(\operatorname{expm1}(r)\\), we use a special rational function on the interval \\([0,0.34658]\\). Since
*
*    ``` tex
*    r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*    ```
*
*    we define \\(\operatorname{R1}(r^2)\\) by
*
*    ``` tex
*    r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} \operatorname{R1}(r^2)
*    ```
*
*    That is,
*
*    ``` tex
*    \begin{align*}
*    \operatorname{R1}(r^2) &= \frac{6}{r} \biggl(\frac{e^r+1}{e^r-1} - \frac{2}{r}\biggr) \\
*    &= \frac{6}{r} \biggl( 1 + 2 \biggl(\frac{1}{e^r-1} - \frac{1}{r}\biggr)\biggr) \\
*    &= 1 - \frac{r^2}{60} + \frac{r^4}{2520} - \frac{r^6}{100800} + \ldots
*    \end{align*}
*    ```
*
*    We use a special Remes algorithm on \\([0,0.347]\\) to generate a polynomial of degree \\(5\\) in \\(r^2\\) to approximate \\(\mathrm{R1}\\). The maximum error of this polynomial approximation is bounded by \\(2^{-61}\\). In other words,
*
*    ``` tex
*    \operatorname{R1}(z) \approx 1 + \mathrm{Q1} \cdot z + \mathrm{Q2} \cdot z^2 + \mathrm{Q3} \cdot z^3 + \mathrm{Q4} \cdot z^4 + \mathrm{Q5} \cdot z^5
*    ```
*
*    where
*
*    ``` tex
*    \begin{align*}
*    \mathrm{Q1} &= -1.6666666666666567384\mbox{e-}2 \\
*    \mathrm{Q2} &= 3.9682539681370365873\mbox{e-}4 \\
*    \mathrm{Q3} &= -9.9206344733435987357\mbox{e-}6 \\
*    \mathrm{Q4} &= 2.5051361420808517002\mbox{e-}7 \\
*    \mathrm{Q5} &= -6.2843505682382617102\mbox{e-}9
*    \end{align*}
*    ```
*
*    where \\(z = r^2\\) and the values of \\(\mathrm{Q1}\\) to \\(\mathrm{Q5}\\) are listed in the source. The error is bounded by
*
*    ``` tex
*    \biggl| 1 + \mathrm{Q1} \cdot z + \ldots + \mathrm{Q5} \cdot z - \operatorname{R1}(z) \biggr| \leq 2^{-61}
*    ```
*
*    \\(\operatorname{expm1}(r) = e^r - 1\\) is then computed by the following specific way which minimizes the accumulated rounding error
*
*    ``` tex
*    \operatorname{expm1}(r) = r + \frac{r^2}{2} + \frac{r^3}{2} \biggl( \frac{3 - (\mathrm{R1} + \mathrm{R1} \cdot \frac{r}{2})}{6 - r ( 3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr)
*    ```
*
*    To compensate for the error in the argument reduction, we use
*
*    ``` tex
*    \begin{align*}
*    \operatorname{expm1}(r+c) &= \operatorname{expm1}(r) + c + \operatorname{expm1}(r) \cdot c \\
*    &\approx \operatorname{expm1}(r) + c + rc
*    \end{align*}
*    ```
*
*    Thus, \\(c + rc\\) will be added in as the correction terms for \\(\operatorname{expm1}(r+c)\\). Now, we can rearrange the term to avoid optimization screw up.
*
*    ``` tex
     \begin{align*}
*    \operatorname{expm1}(r+c) &\approx r - \biggl( \biggl( r + \biggl( \frac{r^2}{2} \biggl( \frac{\mathrm{R1} - (3 - \mathrm{R1} \cdot \frac{r}{2})}{6 - r (3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr) - c \biggr) - c \biggr) - \frac{r^2}{2} \biggr) \\
*    &= r - \mathrm{E}
*    \end{align*}
*    ```
*
* 3. To scale back to obtain \\(\operatorname{expm1}(x)\\), we have (from step 1)
*
*    ``` tex
*    \operatorname{expm1}(x) = \begin{cases}
*    2^k  (\operatorname{expm1}(r) + 1) - 1 \\
*    2^k (\operatorname{expm1}(r) + (1-2^{-k}))
*    \end{cases}
*    ```
*
* #### Special Cases
*
* ``` tex
* \begin{align*}
* \operatorname{expm1}(\infty) &= \infty \\
* \operatorname{expm1}(-\infty) &= -1 \\
* \operatorname{expm1}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* #### Notes
*
* - For finite arguments, only \\(\operatorname{expm1}(0) = 0\\) is exact.
* - To save one multiplication, we scale the coefficient \\(\mathrm{Qi}\\) to \\(\mathrm{Qi} \cdot {2^i}\\) and replace \\(z\\) by \\(\frac{x^2}{2}\\).
* - To achieve maximum accuracy, we compute \\(\operatorname{expm1}(x)\\) by
*   * if \\(x < -56 \cdot \ln(2)\\), return \\(-1.0\\) (raise inexact if \\(x\\) does not equal \\(\infty\\))
*   * if \\(k = 0\\), return \\(r-\mathrm{E}\\)
*   * if \\(k = -1\\), return \\(\frac{(r-\mathrm{E})-1}{2}\\)
*   * if \\(k = 1\\),
*     - if \\(r < -0.25\\), return \\(2((r+0.5)- \mathrm{E})\\)
*     - else return \\(1+2(r-\mathrm{E})\\)
*   * if \\(k < -2\\) or \\(k > 56\\), return \\(2^k(1-(\mathrm{E}-r)) - 1\\) (or \\(e^x-1\\))
*   * if \\(k \leq 20\\), return \\(2^k((1-2^{-k})-(\mathrm{E}-r))\\)
*   * else return \\(2^k(1-((\mathrm{E}+2^{-k})-r))\\)
* - For IEEE 754 double, if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(\operatorname{expm1}(x)\\) will overflow.
* - The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
*
* #### Accuracy
*
* According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = expm1( 0.2 );
* // returns ~0.221
*
* @example
* var v = expm1( -9.0 );
* // returns ~-0.999
*
* @example
* var v = expm1( 0.0 );
* // returns 0.0
*
* @example
* var v = expm1( NaN );
* // returns NaN
*/
function expm1( x ) {
	var halfX;
	var sign;
	var hi;
	var lo;
	var hx;
	var r1;
	var y;
	var z;
	var c;
	var t;
	var e;
	var k;

	if ( x === PINF || isnan( x ) ) {
		return x;
	}
	if ( x === NINF ) {
		return -1.0;
	}
	if ( x === 0.0 ) {
		return x; // handles +-0 (IEEE 754-2008)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		sign = true;
		y = -x;
	} else {
		sign = false;
		y = x;
	}
	// Filter out huge and non-finite arguments...
	if ( y >= LN2x56 ) { // if |x| >= 56*ln(2)
		if ( sign ) { // if x <= -56*ln(2)
			return -1.0;
		}
		if ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...
			return PINF;
		}
	}
	// Extract the more significant bits from |x|:
	hx = highWord( y );

	// Argument reduction...
	if ( y > LN2_HALF ) { // if |x| > 0.5*ln(2)
		if ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)
			if ( sign ) {
				hi = x + LN2_HI;
				lo = -LN2_LO;
				k = -1;
			} else {
				hi = x - LN2_HI;
				lo = LN2_LO;
				k = 1;
			}
		} else {
			if ( sign ) {
				k = (LN2_INV*x) - 0.5;
			} else {
				k = (LN2_INV*x) + 0.5;
			}
			k = k|0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)
			t = k;
			hi = x - (t*LN2_HI); // t*ln2_hi is exact here
			lo = t * LN2_LO;
		}
		x = hi - lo;
		c = (hi-x) - lo;
	}
	// if |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54
	else if ( hx < 1016070144 ) {
		return x;
	}
	else {
		k = 0;
	}
	// x is now in primary range...
	halfX = 0.5 * x;
	z = x * halfX;

	r1 = 1.0 + ( z * polyval( z ) );

	t = 3.0 - (r1*halfX);
	e = z * ( (r1-t) / (6.0 - (x*t)) );
	if ( k === 0 ) {
		return x - ( (x*e) - z );	// c is 0
	}
	e = ( x * (e-c) ) - c;
	e -= z;
	if ( k === -1 ) {
		return ( 0.5*(x-e) )- 0.5;
	}
	if ( k === 1 ) {
		if ( x < -0.25 ) {
			return -2.0 * ( e - (x+0.5) );
		}
		return 1 + ( 2.0 * (x-e) );
	}
	if ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1
		y = 1.0 - (e-x);

		// Add k to y's exponent:
		hi = highWord( y ) + (k<<20);
		y = setHighWord( y, hi );

		return y - 1.0;
	}
	t = 1.0;
	if ( k < 20 ) {
		// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x200000 = 0 00000000010 00000000000000000000
		hi = 1072693248 - (0x200000>>k);
		t = setHighWord( t, hi ); // t=1-2^-k
		y = t - (e-x);
	} else {
		hi = ( (BIAS-k)<<20 );
		t = setHighWord( t, hi ); // t=2^-k
		y = x - (e+t);
		y += 1.0;
	}
	// Add k to y's exponent:
	hi = highWord( y ) + (k<<20);
	y = setHighWord( y, hi );
	return y;
} // end FUNCTION expm1()


// EXPORTS //

module.exports = expm1;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-set-high-word":1377,"@stdlib/math/constants/float64-exponent-bias":1394,"@stdlib/math/constants/float64-half-ln-two":1396,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1259:[function(require,module,exports){
'use strict';

/**
* Compute `exp(x) - 1`.
*
* @module @stdlib/math/base/special/expm1
*
* @example
* var expm1 = require( '@stdlib/math/base/special/expm1' );
*
* var v = expm1( 0.2 );
* // returns ~0.221
*
* v = expm1( -9.0 );
* // returns ~-0.999
*
* v = expm1( 0.0 );
* // returns 0.0
*
* v = expm1( NaN );
* // returns NaN
*/

// MODULES //

var expm1 = require( './expm1.js' );


// EXPORTS //

module.exports = expm1;

},{"./expm1.js":1258}],1260:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var FACTORIALS = require( './factorials.json' );


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Evaluates the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} factorial
*
* @example
* var v = factorial( 3.0 );
* // returns 6.0
*
* @example
* var v = factorial( -1.5 );
* // returns ~-3.545
*
* @example
* var v = factorial( -0.5 );
* // returns ~1.772
*
* @example
* var v = factorial( 0.5 );
* // returns ~0.886
*
* @example
* var v = factorial( -10.0 );
* // returns NaN
*
* @example
* var v = factorial( 171.0 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = factorial( NaN );
* // returns NaN
*/
function factorial( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInteger( x ) ) {
		if ( x < 0 ) {
			return NaN;
		}
		if ( x <= MAX_FACTORIAL ) {
			return FACTORIALS[ x ];
		}
		return PINF;
	}
	return gamma( x + 1.0 );
} // end FUNCTION factorial()


// EXPORTS //

module.exports = factorial;

},{"./factorials.json":1261,"@stdlib/math/base/assert/is-integer":41,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/constants/float64-pinf":1414}],1261:[function(require,module,exports){
module.exports=[
	1,
	1,
	2,
	6,
	24,
	120,
	720,
	5040,
	40320,
	362880.0,
	3628800.0,
	39916800.0,
	479001600.0,
	6227020800.0,
	87178291200.0,
	1307674368000.0,
	20922789888000.0,
	355687428096000.0,
	6402373705728000.0,
	121645100408832000.0,
	0.243290200817664e19,
	0.5109094217170944e20,
	0.112400072777760768e22,
	0.2585201673888497664e23,
	0.62044840173323943936e24,
	0.15511210043330985984e26,
	0.403291461126605635584e27,
	0.10888869450418352160768e29,
	0.304888344611713860501504e30,
	0.8841761993739701954543616e31,
	0.26525285981219105863630848e33,
	0.822283865417792281772556288e34,
	0.26313083693369353016721801216e36,
	0.868331761881188649551819440128e37,
	0.29523279903960414084761860964352e39,
	0.103331479663861449296666513375232e41,
	0.3719933267899012174679994481508352e42,
	0.137637530912263450463159795815809024e44,
	0.5230226174666011117600072241000742912e45,
	0.203978820811974433586402817399028973568e47,
	0.815915283247897734345611269596115894272e48,
	0.3345252661316380710817006205344075166515e50,
	0.1405006117752879898543142606244511569936e52,
	0.6041526306337383563735513206851399750726e53,
	0.265827157478844876804362581101461589032e55,
	0.1196222208654801945619631614956577150644e57,
	0.5502622159812088949850305428800254892962e58,
	0.2586232415111681806429643551536119799692e60,
	0.1241391559253607267086228904737337503852e62,
	0.6082818640342675608722521633212953768876e63,
	0.3041409320171337804361260816606476884438e65,
	0.1551118753287382280224243016469303211063e67,
	0.8065817517094387857166063685640376697529e68,
	0.427488328406002556429801375338939964969e70,
	0.2308436973392413804720927426830275810833e72,
	0.1269640335365827592596510084756651695958e74,
	0.7109985878048634518540456474637249497365e75,
	0.4052691950487721675568060190543232213498e77,
	0.2350561331282878571829474910515074683829e79,
	0.1386831185456898357379390197203894063459e81,
	0.8320987112741390144276341183223364380754e82,
	0.507580213877224798800856812176625227226e84,
	0.3146997326038793752565312235495076408801e86,
	0.1982608315404440064116146708361898137545e88,
	0.1268869321858841641034333893351614808029e90,
	0.8247650592082470666723170306785496252186e91,
	0.5443449390774430640037292402478427526443e93,
	0.3647111091818868528824985909660546442717e95,
	0.2480035542436830599600990418569171581047e97,
	0.1711224524281413113724683388812728390923e99,
	0.1197857166996989179607278372168909873646e101,
	0.8504785885678623175211676442399260102886e102,
	0.6123445837688608686152407038527467274078e104,
	0.4470115461512684340891257138125051110077e106,
	0.3307885441519386412259530282212537821457e108,
	0.2480914081139539809194647711659403366093e110,
	0.188549470166605025498793226086114655823e112,
	0.1451830920282858696340707840863082849837e114,
	0.1132428117820629783145752115873204622873e116,
	0.8946182130782975286851441715398316520698e117,
	0.7156945704626380229481153372318653216558e119,
	0.5797126020747367985879734231578109105412e121,
	0.4753643337012841748421382069894049466438e123,
	0.3945523969720658651189747118012061057144e125,
	0.3314240134565353266999387579130131288001e127,
	0.2817104114380550276949479442260611594801e129,
	0.2422709538367273238176552320344125971528e131,
	0.210775729837952771721360051869938959523e133,
	0.1854826422573984391147968456455462843802e135,
	0.1650795516090846108121691926245361930984e137,
	0.1485715964481761497309522733620825737886e139,
	0.1352001527678402962551665687594951421476e141,
	0.1243841405464130725547532432587355307758e143,
	0.1156772507081641574759205162306240436215e145,
	0.1087366156656743080273652852567866010042e147,
	0.103299784882390592625997020993947270954e149,
	0.9916779348709496892095714015418938011582e150,
	0.9619275968248211985332842594956369871234e152,
	0.942689044888324774562618574305724247381e154,
	0.9332621544394415268169923885626670049072e156,
	0.9332621544394415268169923885626670049072e158,
	0.9425947759838359420851623124482936749562e160,
	0.9614466715035126609268655586972595484554e162,
	0.990290071648618040754671525458177334909e164,
	0.1029901674514562762384858386476504428305e167,
	0.1081396758240290900504101305800329649721e169,
	0.1146280563734708354534347384148349428704e171,
	0.1226520203196137939351751701038733888713e173,
	0.132464181945182897449989183712183259981e175,
	0.1443859583202493582204882102462797533793e177,
	0.1588245541522742940425370312709077287172e179,
	0.1762952551090244663872161047107075788761e181,
	0.1974506857221074023536820372759924883413e183,
	0.2231192748659813646596607021218715118256e185,
	0.2543559733472187557120132004189335234812e187,
	0.2925093693493015690688151804817735520034e189,
	0.339310868445189820119825609358857320324e191,
	0.396993716080872089540195962949863064779e193,
	0.4684525849754290656574312362808384164393e195,
	0.5574585761207605881323431711741977155627e197,
	0.6689502913449127057588118054090372586753e199,
	0.8094298525273443739681622845449350829971e201,
	0.9875044200833601362411579871448208012564e203,
	0.1214630436702532967576624324188129585545e206,
	0.1506141741511140879795014161993280686076e208,
	0.1882677176888926099743767702491600857595e210,
	0.237217324288004688567714730513941708057e212,
	0.3012660018457659544809977077527059692324e214,
	0.3856204823625804217356770659234636406175e216,
	0.4974504222477287440390234150412680963966e218,
	0.6466855489220473672507304395536485253155e220,
	0.8471580690878820510984568758152795681634e222,
	0.1118248651196004307449963076076169029976e225,
	0.1487270706090685728908450891181304809868e227,
	0.1992942746161518876737324194182948445223e229,
	0.269047270731805048359538766214698040105e231,
	0.3659042881952548657689727220519893345429e233,
	0.5012888748274991661034926292112253883237e235,
	0.6917786472619488492228198283114910358867e237,
	0.9615723196941089004197195613529725398826e239,
	0.1346201247571752460587607385894161555836e242,
	0.1898143759076170969428526414110767793728e244,
	0.2695364137888162776588507508037290267094e246,
	0.3854370717180072770521565736493325081944e248,
	0.5550293832739304789551054660550388118e250,
	0.80479260574719919448490292577980627711e252,
	0.1174997204390910823947958271638517164581e255,
	0.1727245890454638911203498659308620231933e257,
	0.2556323917872865588581178015776757943262e259,
	0.380892263763056972698595524350736933546e261,
	0.571338395644585459047893286526105400319e263,
	0.8627209774233240431623188626544191544816e265,
	0.1311335885683452545606724671234717114812e268,
	0.2006343905095682394778288746989117185662e270,
	0.308976961384735088795856467036324046592e272,
	0.4789142901463393876335775239063022722176e274,
	0.7471062926282894447083809372938315446595e276,
	0.1172956879426414428192158071551315525115e279,
	0.1853271869493734796543609753051078529682e281,
	0.2946702272495038326504339507351214862195e283,
	0.4714723635992061322406943211761943779512e285,
	0.7590705053947218729075178570936729485014e287,
	0.1229694218739449434110178928491750176572e290,
	0.2004401576545302577599591653441552787813e292,
	0.3287218585534296227263330311644146572013e294,
	0.5423910666131588774984495014212841843822e296,
	0.9003691705778437366474261723593317460744e298,
	0.1503616514864999040201201707840084015944e301,
	0.2526075744973198387538018869171341146786e303,
	0.4269068009004705274939251888899566538069e305,
	0.7257415615307998967396728211129263114717e307
]

},{}],1262:[function(require,module,exports){
'use strict';

/**
* Evaluate the factorial function.
*
* @module @stdlib/math/base/special/factorial
*
* @example
* var factorial = require( '@stdlib/math/base/special/factorial' );
*
* var v = factorial( 3.0 );
* // returns 6.0
*
* v = factorial( -1.5 );
* // returns ~-3.545
*
* v = factorial( -0.5 );
* // returns ~1.772
*
* v = factorial( 0.5 );
* // returns ~0.886
*
* v = factorial( -10.0 );
* // returns NaN
*
* v = factorial( 171.0 );
* // returns Number.POSITIVE_INFINITY
*
* v = factorial( NaN );
* // returns NaN
*/

// MODULES //

var factorial = require( './factorial.js' );


// EXPORTS //

module.exports = factorial;

},{"./factorial.js":1260}],1263:[function(require,module,exports){
'use strict';

// MODULES //

var isNegativeInteger = require( '@stdlib/math/base/assert/is-negative-integer' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );


// MAIN //

/**
* Evaluates the natural logarithm of the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} natural logarithm of factorial of `x`
*
* @example
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* @example
* var v = factorialln( 2.4 );
* // returns ~1.092
*
* @example
* var v = factorialln( -1.0 );
* // returns NaN
*
* @example
* var v = factorialln( -1.5 );
* // returns ~1.266
*
* @example
* var v = factorialln( NaN );
* // returns NaN
*/
function factorialln( x ) {
	if ( isNegativeInteger( x ) ) {
		return NaN;
	}
	return gammaln( x + 1.0 );
} // end FUNCTION factorialln()


// EXPORTS //

module.exports = factorialln;

},{"@stdlib/math/base/assert/is-negative-integer":45,"@stdlib/math/base/special/gammaln":1297}],1264:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the factorial function.
*
* @module @stdlib/math/base/special/factorialln
*
* @example
* var factorialln = require( '@stdlib/math/base/special/factorialln' );
*
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* v = factorialln( 2.4 );
* // returns ~1.092
*
* v = factorialln( -1.0 );
* // returns NaN
*
* v = factorialln( -1.5 );
* // returns ~1.266
*
* v = factorialln( NaN );
* // returns NaN
*/

// MODULES //

var factorialln = require( './factorialln.js' );


// EXPORTS //

module.exports = factorialln;

},{"./factorialln.js":1263}],1265:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],1266:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":1265}],1267:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://netlib.sandia.gov/cephes/cprob/gamma.c}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var abs = require( '@stdlib/math/base/special/abs' );
var floor = require( '@stdlib/math/base/special/floor' );
var sin = require( '@stdlib/math/base/special/sin' );
var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var stirlingApprox = require( './stirling_approximation.js' );
var smallApprox = require( './small_approximation.js' );


// VARIABLES //

var P = [
	9.99999999999999996796e-01,
	4.94214826801497100753e-01,
	2.07448227648435975150e-01,
	4.76367800457137231464e-02,
	1.04213797561761569935e-02,
	1.19135147006586384913e-03,
	1.60119522476751861407e-04,
	0
];
var Q = [
	1.00000000000000000320e+00,
	7.14304917030273074085e-02,
	-2.34591795718243348568e-01,
	3.58236398605498653373e-02,
	1.18139785222060435552e-02,
	-4.45641913851797240494e-03,
	5.39605580493303397842e-04,
	-2.31581873324120129819e-05
];


// FUNCTIONS //

// Compile a function to evaluate a rational function based on the above coefficients...
var rateval = evalrational( P, Q );


// MAIN //

/**
* Evaluates the gamma function.
*
* #### Method
*
* 1. Arguments \\(|x| \leq 34\\) are reduced by recurrence and the function approximated by a rational function of degree \\(6/7\\) in the interval \\((2,3)\\).
* 2. Large negative arguments are made positive using a reflection formula.
* 3. Large arguments are handled by Stirling's formula.
*
*
* #### Notes
*
* * Relative error:
*
*   | arithmetic | domain    | # trials | peak    | rms     |
*   |:----------:|:---------:|:--------:|:-------:|:-------:|
*   | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |
*   | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |
*   | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |
*   | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |
*
* * Error for arguments outside the test range will be larger owing to error amplification by the exponential function.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gamma( 4.0 );
* // returns 6.0
*
* @example
* var v = gamma( -1.5 );
* // returns ~2.363
*
* @example
* var v = gamma( -0.5 );
* // returns ~-3.545
*
* @example
* var v = gamma( 0.5 );
* // returns ~1.772
*
* @example
* var v = gamma( 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = gamma( -0.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = gamma( NaN );
* // returns NaN
*/
function gamma( x ) {
	var sign;
	var q;
	var p;
	var z;
	if (
		(isInteger( x ) && x < 0) ||
		x === NINF ||
		isnan( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( isNegativeZero( x ) ) {
			return NINF;
		}
		return PINF;
	}
	if (
		x < -170.5674972726612 ||
		x > 171.61447887182298
	) {
		return PINF;
	}
	q = abs( x );
	if ( q > 33.0 ) {
		if ( x >= 0.0 ) {
			return stirlingApprox( x );
		}
		p = floor( q );

		// Check whether `x` is even...
		if ( (p&1) === 0 ) {
			sign = -1.0;
		} else {
			sign = 1.0;
		}
		z = q - p;
		if ( z > 0.5 ) {
			p += 1.0;
			z = q - p;
		}
		z = q * sin( PI * z );
		return sign * PI / ( abs(z)*stirlingApprox(q) );
	}
	// Reduce `x`...
	z = 1.0;
	while ( x >= 3.0 ) {
		x -= 1.0;
		z *= x;
	}
	while ( x < 0.0 ) {
		if ( x > -1.0e-9 ) {
			return smallApprox( x, z );
		}
		z /= x;
		x += 1.0;
	}
	while ( x < 2.0 ) {
		if ( x < 1.0e-9 ) {
			return smallApprox( x, z );
		}
		z /= x;
		x += 1.0;
	}
	if ( x === 2.0 ) {
		return z;
	}
	x -= 2.0;
	return z * rateval( x );
} // end FUNCTION gamma()


// EXPORTS //

module.exports = gamma;

},{"./small_approximation.js":1269,"./stirling_approximation.js":1270,"@stdlib/math/base/assert/is-integer":41,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-negative-zero":47,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/sin":1330,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-pinf":1414}],1268:[function(require,module,exports){
'use strict';

/**
* Evaluate the gamma function.
*
* @module @stdlib/math/base/special/gamma
*
* @example
* var gamma = require( '@stdlib/math/base/special/gamma' );
*
* var v = gamma( 4.0 );
* // returns 6.0
*
* v = gamma( -1.5 );
* // returns ~2.363
*
* v = gamma( -0.5 );
* // returns ~-3.545
*
* v = gamma( 0.5 );
* // returns ~1.772
*
* v = gamma( 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* v = gamma( -0.0 );
* // returns Number.NEGATIVE_INFINITY
*
* v = gamma( NaN );
* // returns NaN
*/

// MODULES //

var gamma = require( './gamma.js' );


// EXPORTS //

module.exports = gamma;

},{"./gamma.js":1267}],1269:[function(require,module,exports){
'use strict';

// MODULES //

var EULER = require( '@stdlib/math/constants/float64-eulergamma' );


// MAIN //

/**
* Evaluates the gamma function using a small-value approximation.
*
* @param {number} x - input value
* @param {number} z - scale factor
* @returns {number} function value
*/
function gamma( x, z ) {
	return z / ( (1.0 + EULER*x) * x );
} // end FUNCTION gamma()


// EXPORTS //

module.exports = gamma;

},{"@stdlib/math/constants/float64-eulergamma":1393}],1270:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var SQRT_TWO_PI = require( '@stdlib/math/constants/float64-sqrt-two-pi' );
var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );


// VARIABLES //

var MAX_STIRLING = 143.01608;
var S = [
	8.33333333333482257126e-02,
	3.47222221605458667310e-03,
	-2.68132617805781232825e-03,
	-2.29549961613378126380e-04,
	7.87311395793093628397e-04
];


// FUNCTIONS //

// Compile a function to evaluate a polynomial based on the above coefficients...
var polyval = evalpoly( S );


// MAIN //

/**
* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\(33 \leq x \leq 172\\).
*
* @param {number} x - input value
* @returns {number} function value
*/
function gamma( x ) {
	var w;
	var y;
	var v;

	w = 1.0 / x;
	w = 1.0 + w * polyval( w );
	y = exp( x );

	// Check `x` to avoid `pow()` overflow...
	if ( x > MAX_STIRLING ) {
		v = pow( x, 0.5*x - 0.25 );
		y = v * (v/y);
	} else {
		y = pow( x, x-0.5 ) / y;
	}
	return SQRT_TWO_PI * y * w;
} // end FUNCTION gamma()


// EXPORTS //

module.exports = gamma;

},{"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float64-sqrt-two-pi":1420}],1271:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Calculates normalised Q when a is an integer.
*
* @private
* @param {integer} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/
function finiteGammaQ( a, x ) {
	var term;
	var sum;
	var e;
	var n;

	e = exp( -x );
	sum = e;
	if ( sum !== 0.0 ) {
		term = sum;
		for ( n = 1; n < a; ++n ) {
			term /= n;
			term *= x;
			sum += term;
		}
	}
	return sum;
} // end FUNCTION finiteGammaQ()


// EXPORTS //

module.exports = finiteGammaQ;

},{"@stdlib/math/base/special/exp":1257}],1272:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Calculates normalised Q when a is a half-integer.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/
function finiteHalfGammaQ( a, x ) {
	var half;
	var term;
	var sum;
	var e;
	var n;

	e = erfc( sqrt(x) );
	if ( e !== 0 && a > 1.0 ) {
		term = exp( -x ) / sqrt( PI * x );
		term *= x;
		half = 0.5;
		term /= half;
		sum = term;
		for ( n = 2; n < a; ++n ) {
			term /= n - half;
			term *= x;
			sum += term;
		}
		e += sum;
	}
	return e;
} // end FUNCTION finiteHalfGammaQ()


// EXPORTS //

module.exports = finiteHalfGammaQ;

},{"@stdlib/math/base/special/erfc":1250,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/constants/float64-pi":1413}],1273:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/math/constants/float64-max-ln' );
var MIN_LN = require( '@stdlib/math/constants/float64-min-ln' );


// MAIN //

/**
* Calculates the power term prefix (z^a)(e^-z) used in the non-normalised incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/
function fullIGammaPrefix( a, z ) {
	var prefix;
	var alz;

	alz = a * ln( z );
	if ( z >= 1.0 ) {
		if ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {
			prefix = pow( z, a ) * exp( -z );
		}
		else if ( a >= 1.0 ) {
			prefix = pow( z / exp(z/a), a );
		}
		else {
			prefix = exp( alz - z );
		}
	}
	else {
		/* eslint-disable no-lonely-if */
		if ( alz > MIN_LN ) {
			prefix = pow( z, a ) * exp( -z );
		}
		else if ( z/a < MAX_LN ) {
			prefix = pow( z / exp(z/a), a );
		} else {
			prefix = exp( alz - z );
		}
	}
	return prefix;
} // end FUNCTION fullIGammaPrefix()


// EXPORTS //

module.exports = fullIGammaPrefix;

},{"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-max-ln":1406,"@stdlib/math/constants/float64-min-ln":1410}],1274:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14
* (C) Christopher Kormanyos 2013-14
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var floor = require( '@stdlib/math/base/special/floor' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var SQRT_EPSILON = require( '@stdlib/math/constants/float64-sqrt-eps' );
var FLOAT64_MAX = require( '@stdlib/math/constants/float64-max' );
var SQRT_TWO_PI = require( '@stdlib/math/constants/float64-sqrt-two-pi' );
var MAX_LN = require( '@stdlib/math/constants/float64-max-ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var finiteGammaQ = require( './finite_gamma_q.js' );
var finiteHalfGammaQ = require( './finite_half_gamma_q.js' );
var fullIGammaPrefix = require( './full_igamma_prefix.js' );
var igammaTemmeLarge = require( './igamma_temme_large.js' );
var lowerGammaSeries = require( './lower_gamma_series.js' );
var regularisedGammaPrefix = require( './regularised_gamma_prefix.js' );
var tgammaSmallUpperPart = require( './tgamma_small_upper_part.js' );
var upperGammaFraction = require( './upper_gamma_fraction.js' );


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.
*
*
* #### Notes
*
* - When a >= MAX_FACTORIAL and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if x is a long way from a in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with lgamma in the hopes that we get a finite result.
*
* @param {NonNegativeNumber} x - function parameter
* @param {PositiveNumber} a - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function
* @returns {number} function value
*/
function gammainc( x, a, regularized, upper ) {
	var optimisedInvert;
	var normalised;
	var evalMethod;
	var initValue;
	var isHalfInt;
	var useTemme;
	var isSmallA;
	var invert;
	var result;
	var isInt;
	var sigma;
	var gam;
	var res;
	var fa;
	var g;

	if ( x < 0.0 || a <= 0.0 ) {
		return NaN;
	}
	normalised = ( regularized === void 0 ) ? true : regularized;
	invert = upper;
	result = 0.0;
	if ( a >= MAX_FACTORIAL && !normalised ) {
		if ( invert && ( a * 4.0 < x ) ) {
			// This is method 4 below, done in logs:
			result = ( a * ln(x) ) - x;
			result += ln( upperGammaFraction( a, x ) );
		}
		else if ( !invert && ( a > 4.0 * x ) ) {
			// This is method 2 below, done in logs:
			result = ( a * ln(x) ) - x;
			initValue = 0;
			result += ln( lowerGammaSeries( a, x, initValue ) / a );
		}
		else {
			result = gammainc( a, x, true, invert );
			if ( result === 0.0 ) {
				if ( invert ) {
					// Try http://functions.wolfram.com/06.06.06.0039.01
					result = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );
					result = ln( result ) - a + ( ( a-0.5 ) * ln(a) );
					result += ln( SQRT_TWO_PI );
				} else {
					// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:
					result = ( a * ln( x ) ) - x;
					initValue = 0.0;
					result += ln( lowerGammaSeries( a, x, initValue ) / a);
				}
			}
			else {
				result = ln( result ) + gammaln( a );
			}
		}
		if ( result > MAX_LN ) {
			return PINF;
		}
		return exp( result );
	}
	isSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < MAX_LN );
	if ( isSmallA ) {
		fa = floor( a );
		isInt = ( fa === a );
		isHalfInt = isInt ? false : ( abs( fa - a ) === 0.5 );
	} else {
		isInt = isHalfInt = false;
	}
	if ( isInt && x > 0.6 ) {
		// Calculate Q via finite sum:
		invert = !invert;
		evalMethod = 0;
	}
	else if ( isHalfInt && x > 0.2 ) {
		// Calculate Q via finite sum for half integer a:
		invert = !invert;
		evalMethod = 1;
	}
	else if ( x < SQRT_EPSILON && a > 1.0 ) {
		evalMethod = 6;
	}
	else if ( x < 0.5 ) {
		// Changeover criterion chosen to give a changeover at Q ~ 0.33:
		if ( -0.4 / ln( x ) < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 3;
		}
	}
	else if ( x < 1.1 ) {
		// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:
		if ( x * 0.75 < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 3;
		}
	}
	else {
		// Begin by testing whether we're in the "bad" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:
		useTemme = false;
		if ( normalised && a > 20 ) {
			sigma = abs( (x-a)/a );
			if ( a > 200 ) {
				// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.
				if ( 20 / a > sigma * sigma ) {
					useTemme = true;
				}
			} else if ( sigma < 0.4 ) {
				useTemme = true;
			}
		}
		if ( useTemme ) {
			evalMethod = 5;
		}
		// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.
		else if ( x - ( 1.0 / (3.0 * x) ) < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 4;
			invert = !invert;
		}
	}

	/* eslint-disable default-case */
	switch ( evalMethod ) {
	case 0:
		result = finiteGammaQ( a, x );
		if (normalised === false ) {
			result *= gamma( a );
		}
		break;
	case 1:
		result = finiteHalfGammaQ( a, x );
		if ( normalised === false ) {
			result *= gamma( a );
		}
		break;
	case 2:
		// Compute P:
		result = normalised ?
			regularisedGammaPrefix( a, x ) :
			fullIGammaPrefix( a, x );
		if ( result !== 0.0 ) {
			initValue = 0.0;
			optimisedInvert = false;
			if ( invert ) {
				initValue = normalised ? 1.0 : gamma(a);
				if (
					normalised ||
					result >= 1.0 ||
					FLOAT64_MAX * result > initValue
				) {
					initValue /= result;
					if (
						normalised ||
						a < 1.0 ||
						( FLOAT64_MAX / a > initValue )
					) {
						initValue *= -a;
						optimisedInvert = true;
					}
					else {
						initValue = 0.0;
					}
				}
				else {
					initValue = 0.0;
				}
			}
		}
		result *= lowerGammaSeries( a, x, initValue ) / a;
		if ( optimisedInvert ) {
			invert = false;
			result = -result;
		}
		break;
	case 3:
		// Compute Q:
		invert = !invert;
		res = tgammaSmallUpperPart( a, x, invert );
		result = res[ 0 ];
		g = res[ 1 ];
		invert = false;
		if ( normalised ) {
			result /= g;
		}
		break;
	case 4:
		// Compute Q:
		result = normalised ?
			regularisedGammaPrefix( a, x ) :
			fullIGammaPrefix( a, x );
		if ( result !== 0 ) {
			result *= upperGammaFraction( a, x );
		}
		break;
	case 5:
		result = igammaTemmeLarge( a, x );
		if ( x >= a ) {
			invert = !invert;
		}
		break;
	case 6:
		// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/
		result = normalised ?
			pow(x, a) / gamma( a + 1.0 ) :
			pow( x, a ) / a;
		result *= 1.0 - ( a * x / ( a + 1.0 ) );
		break;
	}
	if ( normalised && result > 1.0 ) {
		result = 1.0;
	}
	if ( invert ) {
		gam = normalised ? 1.0 : gamma( a );
		result = gam - result;
	}
	return result;
} // end FUNCTION gammainc()


// EXPORTS //

module.exports = gammainc;

},{"./finite_gamma_q.js":1271,"./finite_half_gamma_q.js":1272,"./full_igamma_prefix.js":1273,"./igamma_temme_large.js":1276,"./lower_gamma_series.js":1278,"./regularised_gamma_prefix.js":1280,"./tgamma_small_upper_part.js":1282,"./upper_gamma_fraction.js":1283,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/constants/float64-max":1408,"@stdlib/math/constants/float64-max-ln":1406,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-sqrt-eps":1416,"@stdlib/math/constants/float64-sqrt-two-pi":1420}],1275:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/gamma.hpp}.
*
* This implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );


// MAIN //

/**
* Computes `Γ(x+1) - 1`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammap1m1( 1e-3 );
* // returns ~-0.001
*
* @example
* var v = gammap1m1( -3/2 );
* // returns ~-4.545
*
* @example
* var v = gammap1m1( 4.0 );
* // returns 23
*
* @example
* var v = gammap1m1( 1/2 );
* // returns ~-0.114
*
* @example
* var v = gammap1m1( NaN );
* // returns NaN
*/
function gammap1m1( x ) {
	if ( x < -0.5 ) {
		// Best method is simply to subtract 1 from gamma:
		return gamma( 1.0 + x ) - 1.0;
	}
	if ( x < 0.0 ) {
		// Use expm1 on gammaln:
		return expm1( -log1p(x) + gammaln( x + 2.0 ) );
	}
	if ( x < 2.0 ) {
		// Use expm1 on gammaln:
		return expm1( gammaln( x + 1.0 ) );
	}
	// Best method is simply to subtract 1 from gamma:
	return gamma( 1.0 + x ) - 1.0;
} // end FUNCTION gammap1m1()


// EXPORTS //

module.exports = gammap1m1;

},{"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/log1p":1302}],1276:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// VARIABLES //

// Pre-allocate workspace array:
var workspace = new Array( 10 );

// Polynomical coefficients...
var C0 = [
	-0.33333333333333333,
	0.083333333333333333,
	-0.014814814814814815,
	0.0011574074074074074,
	0.0003527336860670194,
	-0.00017875514403292181,
	0.39192631785224378e-4,
	-0.21854485106799922e-5,
	-0.185406221071516e-5,
	0.8296711340953086e-6,
	-0.17665952736826079e-6,
	0.67078535434014986e-8,
	0.10261809784240308e-7,
	-0.43820360184533532e-8,
	0.91476995822367902e-9
];
var C1 = [
	-0.0018518518518518519,
	-0.0034722222222222222,
	0.0026455026455026455,
	-0.00099022633744855967,
	0.00020576131687242798,
	-0.40187757201646091e-6,
	-0.18098550334489978e-4,
	0.76491609160811101e-5,
	-0.16120900894563446e-5,
	0.46471278028074343e-8,
	0.1378633446915721e-6,
	-0.5752545603517705e-7,
	0.11951628599778147e-7
];
var C2 = [
	0.0041335978835978836,
	-0.0026813271604938272,
	0.00077160493827160494,
	0.20093878600823045e-5,
	-0.00010736653226365161,
	0.52923448829120125e-4,
	-0.12760635188618728e-4,
	0.34235787340961381e-7,
	0.13721957309062933e-5,
	-0.6298992138380055e-6,
	0.14280614206064242e-6
];
var C3 = [
	0.00064943415637860082,
	0.00022947209362139918,
	-0.00046918949439525571,
	0.00026772063206283885,
	-0.75618016718839764e-4,
	-0.23965051138672967e-6,
	0.11082654115347302e-4,
	-0.56749528269915966e-5,
	0.14230900732435884e-5
];
var C4 = [
	-0.0008618882909167117,
	0.00078403922172006663,
	-0.00029907248030319018,
	-0.14638452578843418e-5,
	0.66414982154651222e-4,
	-0.39683650471794347e-4,
	0.11375726970678419e-4
];
var C5 = [
	-0.00033679855336635815,
	-0.69728137583658578e-4,
	0.00027727532449593921,
	-0.00019932570516188848,
	0.67977804779372078e-4,
	0.1419062920643967e-6,
	-0.13594048189768693e-4,
	0.80184702563342015e-5,
	-0.22914811765080952e-5
];
var C6 = [
	0.00053130793646399222,
	-0.00059216643735369388,
	0.00027087820967180448,
	0.79023532326603279e-6,
	-0.81539693675619688e-4,
	0.56116827531062497e-4,
	-0.18329116582843376e-4
];
var C7 = [
	0.00034436760689237767,
	0.51717909082605922e-4,
	-0.00033493161081142236,
	0.0002812695154763237,
	-0.00010976582244684731
];
var C8 = [
	-0.00065262391859530942,
	0.00083949872067208728,
	-0.00043829709854172101
];

// Compile functions for evaluating polynomial functions...
var polyvalC0 = evalpoly.factory( C0 );
var polyvalC1 = evalpoly.factory( C1 );
var polyvalC2 = evalpoly.factory( C2 );
var polyvalC3 = evalpoly.factory( C3 );
var polyvalC4 = evalpoly.factory( C4 );
var polyvalC5 = evalpoly.factory( C5 );
var polyvalC6 = evalpoly.factory( C6 );
var polyvalC7 = evalpoly.factory( C7 );
var polyvalC8 = evalpoly.factory( C8 );


// MAIN //

/**
* Asymptotic expansions of the incomplete gamma functions when a is large and x ~ a. (IEEE double precision or 10^-17).
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} value of asymptotic expansion
*/
function igammaTemmeLarge( a, x ) {
	var result;
	var sigma;
	var phi;
	var y;
	var z;

	sigma = ( x - a ) / a;
	phi = -ln( 1 + sigma ) + sigma;
	y = a * phi;
	z = sqrt( 2 * phi );
	if ( x < a ) {
		z = -z;
	}
	workspace[ 0 ] = polyvalC0( z );
	workspace[ 1 ] = polyvalC1( z );
	workspace[ 2 ] = polyvalC2( z );
	workspace[ 3 ] = polyvalC3( z );
	workspace[ 4 ] = polyvalC4( z );
	workspace[ 5 ] = polyvalC5( z );
	workspace[ 6 ] = polyvalC6( z );
	workspace[ 7 ] = polyvalC7( z );
	workspace[ 8 ] = polyvalC8( z );
	workspace[ 9 ] = -0.00059676129019274625;
	result = evalpoly( workspace, 1.0/a );
	result *= exp( -y ) / sqrt( 2.0 * PI * a );
	if ( x < a ) {
		result = -result;
	}
	result += erfc( sqrt(y) ) / 2.0;
	return result;
} // end FUNCTION igammaTemmeLarge()


// EXPORTS //

module.exports = igammaTemmeLarge;

},{"@stdlib/math/base/special/erfc":1250,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float64-pi":1413}],1277:[function(require,module,exports){
'use strict';

/**
* Evaluate the incomplete gamma function.
*
* @module @stdlib/math/base/special/gammainc
*
* @example
* var gammainc = require( '@stdlib/math/base/special/gammainc' );
*
* var v = gammainc( 6.0, 2.0 );
* // returns ~0.9826
*
* v = gammainc( 1.0, 2.0, true, true );
* // returns ~0.7358
*
* v = gammainc( 7.0, 5.0 );
* // returns ~0.8270
*
* v = gammainc( 7.0, 5.0, false );
* // returns ~19.8482
*
* v = gammainc( NaN, 2.0 );
* // returns NaN
*
* v = gammainc( 6.0, NaN );
* // returns NaN
*/

// MODULES //

var gammainc = require( './gammainc.js' );


// EXPORTS //

module.exports = gammainc;

},{"./gammainc.js":1274}],1278:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
var lowerIncompleteGammaSeries = require( './lower_incomplete_gamma_series' );


// MAIN //

/**
* Sums elements of the series expansion of the lower incomplete gamma function.
*
* #### Method
*
* Multiply result by ((z^a) * (e^-z) / a) to get the full lower incomplete integral. Then divide by tgamma(a) to get the normalised value.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @param {number} initialValue - initial value of the resulting sum
* @returns {number} sum of terms of lower gamma series
*/
function lowerGammaSeries( a, z, initialValue ) {
	var result;
	var s;

	initialValue = initialValue || 0.0;
	s = lowerIncompleteGammaSeries( a, z );
	result = sumSeries( s, {
		'initialValue': initialValue
	});
	return result;
} // end FUNCTION lowerGammaSeries()


// EXPORTS //

module.exports = lowerGammaSeries;

},{"./lower_incomplete_gamma_series":1279,"@stdlib/math/base/tools/sum-series":1362}],1279:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MAIN //

/**
* Creates a function to evaluate a series expansion of the incomplete gamma function.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/
function lowerIncompleteGammaSeries( a1, z1 ) {
	var result = 1.0;
	var a = a1;
	var z = z1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		var r = result;
		a += 1.0;
		result *= z/a;
		return r;
	} // end FUNCTION next()
} // end FUNCTION lowerIncompleteGammaSeries()


// EXPORTS //

module.exports = lowerIncompleteGammaSeries;

},{}],1280:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var E = require( '@stdlib/math/constants/float64-e' );


// VARIABLES //

var LOG_MAX_VALUE = 709.0;
var LOG_MIN_VALUE = -708.0;
var G = 10.90051099999999983936049829935654997826;
var NUM = [
	709811.662581657956893540610814842699825,
	679979.847415722640161734319823103390728,
	293136.785721159725251629480984140341656,
	74887.5403291467179935942448101441897121,
	12555.29058241386295096255111537516768137,
	1443.42992444170669746078056942194198252,
	115.2419459613734722083208906727972935065,
	6.30923920573262762719523981992008976989,
	0.2266840463022436475495508977579735223818,
	0.004826466289237661857584712046231435101741,
	0.4624429436045378766270459638520555557321e-4
];
var DENOM = [
	0,
	362880,
	1026576,
	1172700,
	723680,
	269325,
	63273,
	9450,
	870,
	45,
	1
];


// FUNCTIONS //

/**
* Calculate the Lanczos approximation scaled by exp(G).
*
* @private
* @param {number} z - input value
* @returns {number} Lanczos approximation
*/
var lanczosSumExpGScaled = evalrational( NUM, DENOM );


// MAIN //

/**
* Computes (z^a)(e^-z)/tgamma(a).
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} (z^a)(e^-z)/tgamma(a)
*/
function regularisedGammaPrefix( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + G - 0.5;
	d = ( (z - a) - G + 0.5 ) / agh;
	if ( a < 1 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimised against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= LOG_MIN_VALUE ) {
			// Use logs, so should be free of cancellation errors:
			return exp( ( a * ln(z) ) - ( z - gammaln( a ) ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return pow( z, a ) * exp( -z ) / gamma( a );
	}
	else if ( abs(d*d*a) <= 100 && a > 150 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( log1p( d ) - d ) ) + ( z * (0.5 - G) / agh );
		prefix = exp( prefix );
	}
	else {
		// General case. direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * ln(z / agh);
		amz = a - z;
		if (
			min(alz, amz) <= LOG_MIN_VALUE ||
			max(alz, amz) >= LOG_MAX_VALUE
		) {
			amza = amz / a;
			if (
				min(alz, amz)/2 > LOG_MIN_VALUE &&
				max(alz, amz)/2 < LOG_MAX_VALUE
			) {
				// Compute square root of the result and then square it:
				sq = pow( z / agh, a / 2 ) * exp( amz / 2 );
				prefix = sq * sq;
			}
			else if (
				min(alz, amz)/4 > LOG_MIN_VALUE &&
				max(alz, amz)/4 < LOG_MAX_VALUE &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = pow( z / agh, a / 4 ) * exp( amz / 4 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > LOG_MIN_VALUE &&
				amza < LOG_MAX_VALUE
			) {
				prefix = pow( (z * exp(amza)) / agh, a );
			}
			else {
				prefix = exp( alz + amz );
			}
		}
		else {
			prefix = pow( z / agh, a ) * exp( amz );
		}
	}
	prefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );
	return prefix;
} // end FUNCTION regularisedGammaPrefix()


// EXPORTS //

module.exports = regularisedGammaPrefix;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/log1p":1302,"@stdlib/math/base/special/max":1307,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-e":1391}],1281:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

/**
* Series representation for upper fraction when z is small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {Function}  series function
*/
function smallGamma2Series( a, x ) {
	var result;
	var apn;
	var n;
	var r;

	result = -x;
	x = -x;
	apn = a + 1.0;
	n = 1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		r = result / apn;
		result *= x;
		n += 1;
		result /= n;
		apn += 1.0;
		return r;
	} // end FUNCTION next();
} // end FUNCTION smallGamma2Series()


// EXPORTS //

module.exports = smallGamma2Series;

},{}],1282:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var powm1 = require( '@stdlib/math/base/special/powm1' );
var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
var smallGamma2Series = require( './small_gamma2_series.js' );
var tgamma1pm1 = require( './gammap1m1.js' );


// MAIN //

/**
* Compute the full upper fraction (Q) when a is very small.
*
* @param {number} a - function parameter
* @param {number} x - function parameter
* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated
* @returns {Array} full upper fraction (Q) and pgam
*/
function tgammaSmallUpperPart( a, x, invert ) {
	var initialValue;
	var result;
	var pgam;
	var p;
	var s;

	result = tgamma1pm1( a );
	pgam = ( result + 1.0 ) / a;
	p = powm1( x, a );
	result -= p;
	result /= a;
	s = smallGamma2Series( a, x );
	p += 1.0;
	initialValue = invert ? pgam : 0.0;
	result = -p * sumSeries( s, {
		'initialValue': (initialValue - result) / p
	});
	if ( invert ) {
		result = -result;
	}
	return [ result, pgam ];
} // end FUNCTION tgammaSmallUpperPart()


// EXPORTS //

module.exports = tgammaSmallUpperPart;

},{"./gammap1m1.js":1275,"./small_gamma2_series.js":1281,"@stdlib/math/base/special/powm1":1319,"@stdlib/math/base/tools/sum-series":1362}],1283:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
var upperIncompleteGammaFract = require( './upper_incomplete_gamma_fract' );


// MAIN //

/**
* Evaluate the lower incomplete gamma integral via a series expansion and divide by gamma(z) to normalise.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} function value
*/
function upperGammaFraction( a, z ) {
	var f = upperIncompleteGammaFract( a, z );
	return 1.0 / ( z - a + 1.0 + continuedFraction( f ) );
} // end FUNCTION upperGammaFraction()


// EXPORTS //

module.exports = upperGammaFraction;

},{"./upper_incomplete_gamma_fract":1284,"@stdlib/math/base/tools/continued-fraction":1353}],1284:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MAIN //

/**
* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/
function upperIncompleteGammaFract( a1, z1 ) {
	var z = z1 - a1 + 1.0;
	var a = a1;
	var k = 0;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/
	function next() {
		k += 1;
		z += 2.0;
		return [
			k * (a - k),
			z
		];
	} // end FUNCTION next()
} // end FUNCTION upperIncompleteGammaFract()


// EXPORTS //

module.exports = upperIncompleteGammaFract;

},{}],1285:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Computes the sum of a Chebyshev polynomial.
*
* @private
* @param {PositiveInteger} n - degree of polynomial
* @param {number} t - input value
* @param {Array} ak - coefficients of the Chebyshev polynomial
* @returns {number} Chebyshev sum
*/
function chepolsum( n, t, ak ) {
	var tt;
	var u0;
	var u1;
	var u2;
	var k;

	u0 = 0.0;
	u1 = 0.0;
	tt = t + t;
	k = n;
	do {
		u2 = u1;
		u1 = u0;
		u0 = ( tt*u1 ) - u2 + ak[ k ];
		k -= 1;
	} while ( k >= 0 );
	return ( u0 - u2 ) / 2.0;
} // end FUNCTION chepolsum()


// EXPORTS //

module.exports = chepolsum;

},{}],1286:[function(require,module,exports){
/* eslint-disable max-statements */
'use strict';

// MODULES //

var debug = require( 'debug' )( 'gammaincinv:compute' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var min = require( '@stdlib/math/base/special/min' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var SQRT_TWO_PI = require( '@stdlib/math/constants/float64-sqrt-two-pi' );
var MAX_FLOAT32 = require( '@stdlib/math/constants/float32-max' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var higherNewton = require( './higher_newton.js' );
var lambdaeta = require( './lambdaeta.js' );
var gamstar = require( './gamstar.js' );
var eps1 = require( './eps1.js' );
var eps2 = require( './eps2.js' );
var eps3 = require( './eps3.js' );


// VARIABLES //

var ONEO6 = 0.166666666666666666666666666667;
var ONEO12 = 0.0833333333333333333333333333333;
var ONEO24 = 0.0416666666666666666666666666667;


// MAIN //

/**
* This routine computes xr in the equations P(a,xr)=p and Q(a,xr)=q with a as a given positive parameter; p and q satisfy p+q=1. The equation is inverted with min(p,q).
*
* @private
* @param {number} a - scale value of incomplete gamma function
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @returns {number} solution of the equations P(a,xr)=p and Q(a,xr)=q with a as a given positive parameter.
*/
function compute( a, p, q ) {
	var ap1inv;
	var invfp;
	var lgama;
	var pcase;
	var porq;
	var ainv;
	var logr;
	var ap22;
	var ap14;
	var ap13;
	var ap12;
	var vgam;
	var vmin;
	var xini;
	var ap1;
	var ap2;
	var ap3;
	var eta;
	var p6;
	var p5;
	var x0;
	var ck;
	var a2;
	var L2;
	var L3;
	var L4;
	var b2;
	var b3;
	var p3;
	var a4;
	var fp;
	var p4;
	var p2;
	var a3;
	var xr;
	var b;
	var L;
	var i;
	var k;
	var m;
	var r;
	var s;
	var y;

	ck = new Array( 5 );
	if ( p < 0.5) {
		pcase = true;
		porq = p;
		s = -1;
	} else {
		pcase = false;
		porq = q;
		s = 1;
	}
	k = 0;
	if ( abs( a - 1 ) < 1e-4 ) {
		m = 0;
		if ( pcase ) {
			if ( p < 1e-3 ) {
				p2 = p * p;
				p3 = p2 * p;
				p4 = p3 * p;
				p5 = p4 * p;
				p6 = p5 * p;
				x0 = p + ( p2*0.5 ) + ( p3*(1/3) ) + ( p4*0.25 );
				x0 += ( p5*0.2 ) + ( p6*(1/6) );
			} else {
				x0 = -ln( 1 - p );
			}
		} else {
			x0 = -ln( q );
		}
		if ( a === 1 ) {
			k = 2;
			xr = x0;
		} else {
			lgama = gammaln( a );
			k = 1;
		}
	}
	if ( q < 1e-30 && a < 0.5 ) {
		m = 0;
		x0 = -ln( q * gamma(a) ) + ( ( a-1.0 ) * ln( -ln( q * gamma(a) ) ));
		k = 1;
		lgama = gammaln( a );
	}
	if ( a > 1.0 && a < 500.0 && p < 1e-80 ) {
		m = 0;
		ainv = 1.0 / a;
		ap1inv = 1.0 / ( a + 1.0 );
		x0 = ( gammaln( a+1.0 )+ ln( p ) ) * ainv;
		x0 = exp( x0 );
		xini = x0;
		for ( i = 0; i < 10; i++ ) {
			x0 = xini * exp( x0 * ainv ) * pow( 1.0 - ( x0*ap1inv ), ainv );
		}
		k = 1;
		lgama = gammaln( a );
	}

	logr = (1.0/a) * ( ln(p) + gammaln( a + 1 ) );
	if ( ( logr < ln( 0.2 * ( 1.0+a ) ) ) && ( k === 0 ) ) {
		r = exp( logr );
		m = 0;
		a2 = a * a;
		a3 = a2 * a;
		a4 = a3 * a;
		ap1 = a + 1;
		ap12 = ap1 * ap1;
		ap13 = ap1 * ap12;
		ap14 = ap12 * ap12;
		ap2 = a + 2;
		ap22 = ap2 * ap2;
		ap3 = a + 3;
		ck[ 0 ] = 1.0;
		ck[ 1 ] = 1.0 / ap1;
		ck[ 2 ] = 0.5 * ( ( 3.0*a ) + 5.0 ) / ( ap12 * ap2 );
		ck[ 3 ] = (1/3) * ( 31.0 + (8.0*a2) + (33.0*a) ) / ( ap13 * ap2 * ap3 );
		ck[ 4 ] = ONEO24 * ( 2888.0 + (1179.0*a3) + (125.0*a4) + (3971.0*a2) +
			(5661.0*a) ) / ( ap14 * ap22 * ap3 * ( a+4.0 ) );
		x0 = r * evalpoly( ck, r );
		lgama = gammaln( a );
		k = 1;
	}
	if ( ( a < 10.0 ) && ( k === 0 ) ) {
		vgam = sqrt( a ) / ( gamstar(a) * SQRT_TWO_PI );
		vmin = min( 0.02, vgam );
		if ( q < vmin ) {
			m = 0;
			b = 1.0 - a;
			b2 = b * b;
			b3 = b2 * b;
			eta = sqrt( -2.0/a * ln( q / vgam ) );
			x0 = a * lambdaeta(eta);
			L = ln( x0 );
			if ( x0 > 5 ) {
				L2 = L * L;
				L3 = L2 * L;
				L4 = L3 * L;
				r = 1.0 / x0;
				ck[ 0 ] = L - 1.0;
				ck[ 1 ] = ( (3.0*b) - (2.0*b*L) + L2 - ( 2.0*L ) + 2.0 ) * 0.5;
				ck[ 2 ] =( (24*b*L) - (11*b2) - (24*b) - (6*L2) + (12*L) -
					12.0 - (9*b*L2) + (6*b2*L) + (2*L3) ) * ONEO6;
				ck[ 3 ] = ( (-12*b3*L) + (84*b*L2) - (114*b2*L) + (72+(36*L2)) +
					(((3*L4)-(72*L)+162) * (b-(168*b*L))) - ((12*L3)+(25*b3)) -
					( (22*b*L3)+(36*b2*L2)+(120*b2) ) ) * ONEO12;
				ck[ 4 ] = 0.0;
				x0 = x0 - L + ( b*r*evalpoly( ck, r ) );
			} else {
				r = 1.0 / x0;
				L2 = L * L;
				ck[ 0 ] = L - 1.0;
				if ( ( L - ( b*r*ck[ 0 ] ) ) < x0 ) {
					x0 = x0 - L + ( b * r * ck[ 0 ] );
				}
			}
			lgama = gammaln( a );
			k = 1;
		}
	}
	if ( ( abs( porq - 0.5 ) < 1e-5 ) && ( k === 0 ) ) {
		m = 0;
		ainv = 1.0 / a;
		x0 = a - (1/3) + ( ( 0.0197530864197530864197530864198 +
			( 0.00721144424848128551832255535959 * ainv ) ) * ainv );
		lgama = gammaln( a );
		k = 1;
	}
	if ( ( a < 1 ) && ( k === 0 ) ) {
		m = 0;
		if (pcase) {
			x0 = exp( (1/a) * ( ln(porq) + gammaln(a+1) ) );
		} else {
			x0 = exp( (1/a) * ( ln(1-porq) + gammaln(a+1) ) );
		}
		lgama = gammaln( a );
		k = 1;
	}
	if ( k === 0 ) {
		m = 1;
		ainv = 1 / a;
		r = erfcinv( 2 * porq );
		eta = s * r / sqrt( a * 0.5 );
		if ( r < MAX_FLOAT32 ) {
			eta += ( eps1(eta) + ( (eps2(eta)+(eps3(eta)*ainv))*ainv ) ) * ainv;
			x0 = a * lambdaeta(eta);
			y = eta;
			fp = -sqrt( a / (2*PI) ) * exp( -0.5*a*y*y ) / ( gamstar(a) );
			invfp = 1 / fp;
		} else {
			debug( 'Warning: Overflow problems in one or more steps of the computation.' );
			return NaN;
		}
	}
	if ( k < 2 ) {
		xr = higherNewton( x0, a, m, p, q, lgama, invfp, pcase );
	}
	return xr;
} // end FUNCTION compute()


// EXPORTS //

module.exports = compute;

},{"./eps1.js":1287,"./eps2.js":1288,"./eps3.js":1289,"./gamstar.js":1291,"./higher_newton.js":1292,"./lambdaeta.js":1294,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/erfcinv":1252,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/min":1309,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float32-max":1389,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-sqrt-two-pi":1420,"debug":1444}],1287:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var evalrational = require( '@stdlib/math/base/tools/evalrational' );
var ln = require( '@stdlib/math/base/special/ln' );
var lambdaeta = require( './lambdaeta.js' );


// VARIABLES //

var AK = [
	-3.333333333438e-1,
	-2.070740359969e-1,
	-5.041806657154e-2,
	-4.923635739372e-3,
	-4.293658292782e-5
];
var BK = [
	1.000000000000e+0,
	7.045554412463e-1,
	2.118190062224e-1,
	3.048648397436e-2,
	1.605037988091e-3
];


// FUNCTIONS //

var rateval = evalrational.factory( AK, BK );


// MAIN //

/**
* Evaluates the `eps1` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps1( eta ) {
	var la;
	if ( abs( eta ) < 1.0 ) {
		return rateval( eta );
	}
	la = lambdaeta( eta );
	return ln( eta / ( la - 1.0 ) ) / eta;
} // end FUNCTION eps1()


// EXPORTS //

module.exports = eps1;

},{"./lambdaeta.js":1294,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/tools/evalrational":1359}],1288:[function(require,module,exports){
'use strict';

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' );
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var AK1 = [
	-1.72847633523e-2,
	-1.59372646475e-2,
	-4.64910887221e-3,
	-6.06834887760e-4,
	-6.14830384279e-6
];
var BK1 = [
	1.00000000000e+0,
	7.64050615669e-1,
	2.97143406325e-1,
	5.79490176079e-2,
	5.74558524851e-3
];

var AK2 = [
	-1.72839517431e-2,
	-1.46362417966e-2,
	-3.57406772616e-3,
	-3.91032032692e-4,
	2.49634036069e-6
];
var BK2 = [
	1.00000000000e+0,
	6.90560400696e-1,
	2.49962384741e-1,
	4.43843438769e-2,
	4.24073217211e-3
];

var AK3 = [
	9.99944669480e-1,
	1.04649839762e+2,
	8.57204033806e+2,
	7.31901559577e+2,
	4.55174411671e+1
];
var BK3 = [
	1.00000000000e+0,
	1.04526456943e+2,
	8.23313447808e+2,
	3.11993802124e+3,
	3.97003311219e+3
];


// FUNCTIONS //

var rateval1 = evalrational.factory( AK1, BK1 );
var rateval2 = evalrational.factory( AK2, BK2 );
var rateval3 = evalrational.factory( AK3, BK3 );


// MAIN //

/**
* Evaluates the `eps2` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps2( eta ) {
	var lnmeta;
	var x;
	if ( eta < -5.0 ) {
		x = eta * eta;
		lnmeta = ln( -eta );
		return ( 12.0 - x - ( 6.0*( lnmeta*lnmeta ) ) ) / ( 12.0 * x * eta );
	}
	else if ( eta < -2.0 ) {
		return rateval1( eta );
	}
	else if ( eta < 2.0 ) {
		return rateval2( eta );
	}
	else if ( eta < 1000.0 ) {
		x = 1.0 / eta;
		return rateval3( eta ) / ( -12.0 * eta );
	}
	return -1.0 / ( 12.0 * eta );
} // end FUNCTION eps2()


// EXPORTS //

module.exports = eps2;

},{"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/tools/evalrational":1359}],1289:[function(require,module,exports){
'use strict';

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' );
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var ak1 = [
	4.95346498136e-2,
	2.99521337141e-2,
	6.88296911516e-3,
	5.12634846317e-4,
	-2.01411722031e-5
];
var bk1 = [
	1.00000000000e+0,
	7.59803615283e-1,
	2.61547111595e-1,
	4.64854522477e-2,
	4.03751193496e-3
];

var ak2 = [
	4.52313583942e-3,
	1.20744920113e-3,
	-7.89724156582e-5,
	-5.04476066942e-5,
	-5.35770949796e-6
];
var bk2 = [
	1.00000000000e+0,
	9.12203410349e-1,
	4.05368773071e-1,
	9.01638932349e-2,
	9.48935714996e-3
];

var ak3 = [
	4.39937562904e-3,
	4.87225670639e-4,
	-1.28470657374e-4,
	5.29110969589e-6,
	1.57166771750e-7
];
var bk3 = [
	1.00000000000e+0,
	7.94435257415e-1,
	3.33094721709e-1,
	7.03527806143e-2,
	8.06110846078e-3
];

var ak4 = [
	-1.14811912320e-3,
	-1.12850923276e-1,
	1.51623048511e+0,
	-2.18472031183e-1,
	7.30002451555e-2
];
var bk4 = [
	1.00000000000e+0,
	1.42482206905e+1,
	6.97360396285e+1,
	2.18938950816e+2,
	2.77067027185e+2
];

var ak5 = [
	-1.45727889667e-4,
	-2.90806748131e-1,
	-1.33085045450e+1,
	1.99722374056e+2,
	-1.14311378756e+1
];
var bk5 = [
	1.00000000000e+0,
	1.39612587808e+2,
	2.18901116348e+3,
	7.11524019009e+3,
	4.55746081453e+4
];


// FUNCTIONS //

var rational1 = evalrational.factory( ak1, bk1 );
var rational2 = evalrational.factory( ak2, bk2 );
var rational3 = evalrational.factory( ak3, bk3 );
var rational4 = evalrational.factory( ak4, bk4 );
var rational5 = evalrational.factory( ak5, bk5 );


// MAIN //

/**
* Evaluates the `eps3` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps3( eta ) {
	var eta3;
	var x;
	var y;

	if ( eta < -8.0 ) {
		x = eta * eta;
		y = ln( -eta ) / eta;
		return ( -30.0 + ( eta*y*( (6.0*x*y*y) - 12.0+x ) ) ) /
			( 12.0 * eta * x * x );
	}
	else if ( eta < -4.0 ) {
		return rational1( eta ) / ( eta * eta );
	}
	else if ( eta < -2.0 ) {
		return rational2( eta );
	}
	else if ( eta < 2.0 ) {
		return rational3( eta );
	}
	else if ( eta < 10.0 ) {
		x = 1.0 / eta;
		return rational4( x ) / ( eta * eta );
	}
	else if ( eta < 100.0 ) {
		x = 1.0 / eta;
		return rational5( x ) / ( eta * eta );
	}
	eta3 = eta * eta * eta;
	return -ln( eta ) / ( 12.0 * eta3 );
} // end FUNCTION eps3()


// EXPORTS //

module.exports = eps3;

},{"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/tools/evalrational":1359}],1290:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var FLOAT32_SMALLEST = require( '@stdlib/math/constants/float32-smallest-normal' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var compute = require( './compute.js' );


// MAIN //

/*
* Translated from the Fortran module by
* ----------------------------------------------------------------------
* Authors:
*  Amparo Gil    (U. Cantabria, Santander, Spain)
*                 e-mail: amparo.gil@unican.es
*  Javier Segura (U. Cantabria, Santander, Spain)
*                 e-mail: javier.segura@unican.es
*  Nico M. Temme (CWI, Amsterdam, The Netherlands)
*                 e-mail: nico.temme@cwi.nl
* ---------------------------------------------------------------------
*/

/**
* Inverts the lower gamma function, i.e. computes xr such that P(a,xr) = p.
*
* #### Method
*
* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.
*
* #### Notes
*
* * The claimed accuracy obtained using this inversion routine is near 1e-12.
*
* #### References
*
* * A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun
* * A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981
*
* @param {Probability} p - probability value
* @param {number} a - scale parameter
* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead, i.e. compute xr such that Q(a,xr)=p.
* @returns {number} function value of the inverse
*/
function gammaincinv( p, a, upper ) {
	if ( isnan( p ) || isnan( a ) ) {
		return NaN;
	}
	if ( a < FLOAT32_SMALLEST ) {
		return NaN;
	}
	if ( p > 1.0 || p < 0.0 ) {
		return NaN;
	}
	if ( upper === true ) {
		// Case: Invert upper gamma function...
		if ( p === 0.0 ) {
			return PINF;
		} else if ( p === 1.0 ) {
			return 0.0;
		}
		return compute( a, 1.0 - p, p );
	}
	// Default: Invert lower gamma function
	if ( p === 0.0 ) {
		return 0.0;
	} else if ( p === 1.0 ) {
		return PINF;
	}
	return compute( a, p, 1.0 - p );
} // end FUNCTION gammaincinv()


// EXPORTS //

module.exports = gammaincinv;

},{"./compute.js":1286,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/constants/float32-smallest-normal":1390,"@stdlib/math/constants/float64-pinf":1414}],1291:[function(require,module,exports){
'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var ln = require( '@stdlib/math/base/special/ln' );
var FLOAT32_MAX = require( '@stdlib/math/constants/float32-max' );
var SQRT_TWO_PI = require( '@stdlib/math/constants/float64-sqrt-two-pi' );
var stirling = require( './stirling.js' );


// MAIN //

/**
* Computes the regulated gamma function.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function gamstar( x ) {
	if ( x >= 3.0 ) {
		return exp( stirling(x) );
	}
	else if ( x > 0.0 ) {
		return gamma(x) / ( exp( -x + ( ( x-0.5 ) * ln(x) ) ) * SQRT_TWO_PI );
	}
	// Case: x <= 0.0
	return FLOAT32_MAX;
} // end FUNCTION gamstar()


// EXPORTS //

module.exports = gamstar;

},{"./stirling.js":1295,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float32-max":1389,"@stdlib/math/constants/float64-sqrt-two-pi":1420}],1292:[function(require,module,exports){
'use strict';

// MODULES //

var debug = require( 'debug' )( 'gammaincinv:higher_newton' );
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_FLOAT32 = require( '@stdlib/math/constants/float32-max' );


// MAIN //

/**
* Implementation of the high order Newton-like method.
*
* @private
* @param {number} x0 - initial value
* @param {number} a - scale parameter
* @param {number} m - indicator
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @param {number} lgama - logarithm of scale parameter
* @param {number} invfp - one over `fp`
* @param {boolean} pcase - boolean indicating whether p < 0.5
* @returns {number} function value of the inverse
*/
function higherNewton( x0, a, m, p, q, lgama, invfp, pcase ) {
	var dlnr;
	var xini;
	var ck0;
	var ck1;
	var ck2;
	var a2;
	var x2;
	var px;
	var qx;
	var xr;
	var t;
	var n;
	var r;
	var x;

	x = x0;
	t = 1;
	n = 1;
	a2 = a * a;
	xini = x0;
	do {
		x = x0;
		x2 = x * x;
		if ( m === 0 ) {
			dlnr = ( ( 1.0-a ) * ln( x ) ) + x + lgama;
			if ( dlnr > ln( MAX_FLOAT32 ) ) {
				debug( 'Warning: overflow problems in one or more steps of the computation. The initial approximation to the root is returned.' );
				return xini;
			}
			r = exp( dlnr );
		} else {
			r = -invfp * x;
		}
		if ( pcase ) {
			// gammainc( x, s[, regularized = true ][, upper = false ] )
			px = gammainc( x, a, true, false );
			ck0 = -r * ( px - p );
		} else {
			// gammainc( x, s[, regularized = true ][, upper = true ] )
			qx = gammainc( x, a, true, true );
			ck0 = r * ( qx - q );
		}
		r = ck0;
		if ( ( p > 1e-120 ) || ( n > 1 ) ) {
			ck1 = 0.5 * ( x - a + 1.0 ) / x;
			ck2 = ( (2*x2) - (4*x*a) + (4*x) + (2*a2) - (3*a) + 1 ) / x2;
			ck2 /= 6.0;
			x0 = x + ( r * ( 1.0 + ( r * ( ck1 + (r*ck2) ) ) ) );
		} else {
			x0 = x + r;
		}
		t = abs( ( x/x0 ) - 1.0 );
		n += 1;
		x = x0;
		if ( x < 0 ) {
			x = xini;
			n = 100;
		}
	} while ( ( ( t > 2e-14 ) && ( n < 35 ) ) );
	if ( ( t > 2e-14 ) || ( n > 99 ) ) {
		debug( 'Warning: the number of iterations in the Newton method reached the upper limit N=35. The last value obtained for the root is given as output.' );
	}
	xr = x || 0;
	return xr;
} // end FUNCTION higherNewton()


// EXPORTS //

module.exports = higherNewton;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/gammainc":1277,"@stdlib/math/base/special/ln":1300,"@stdlib/math/constants/float32-max":1389,"debug":1444}],1293:[function(require,module,exports){
'use strict';

/**
* Computes the inverse of the lower incomplete gamma function
*
* @module @stdlib/math/base/special/gammaincinv
*
* @example
* var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
*
* var val = gammaincinv( 0.5, 2.0 );
* // returns ~1.678
*
* val = gammaincinv( 0.1, 10.0 );
* // returns ~6.221
*
* val = gammaincinv( 0.75, 3.0 );
* // returns ~3.92
*
* val = gammaincinv( 0.75, 3.0, true );
* // returns ~1.727
*
* val = gammaincinv( 0.75, NaN );
* // returns NaN
*
* val = gammaincinv( NaN, 3.0 );
* // returns NaN
*/

// MODULES //

var gammaincinv = require( './gammaincinv.js' );


// EXPORTS //

module.exports = gammaincinv;

},{"./gammaincinv.js":1290}],1294:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );


// VARIABLES //

var ONEO12 = 0.0833333333333333333333333333333;
var ONEO120 = 0.00833333333333333333333333333333;

var AK1 = [
	0,
	1.0,
	1.0,
	1.5,
	2.66666666666666666666666666667,
	5.20833333333333333333333333333,
	10.8
];

var AK2 = [
	1.0,
	1.0,
	0.333333333333333333333333333333,
	0.0277777777777777777777777777778,
	-0.00370370370370370370370370370370,
	0.000231481481481481481481481481481,
	0.0000587889476778365667254556143445
];


// FUNCTIONS //

var polyval1 = evalpoly.factory( AK1 );
var polyval2 = evalpoly.factory( AK2 );


// MAIN //

/**
* Returns the positive number satisfying eta^2/2=lambda-1-ln(lambda) with sign(lambda-1)=sign(eta);
*
* @private
* @param {number} eta - eta value
* @returns {number} value satisfying equation
*/
function lambdaeta( eta ) {
	var L2;
	var L3;
	var L4;
	var L5;
	var ak;
	var la;
	var L;
	var q;
	var r;
	var s;

	ak = new Array( 6 );
	s = eta * eta * 0.5;
	if ( eta === 0.0 ) {
		la = 0.0;
	}
	else if ( eta < -1.0 ) {
		r = exp( -1.0 - s );
		la = polyval1( r );
	}
	else if ( eta < 1.0 ) {
		r = eta;
		la = polyval2( r );
	}
	else {
		r = 11.0 + s;
		L = ln( r );
		la = r + L;
		r = 1.0 / r;
		L2 = L * L;
		L3 = L2 * L;
		L4 = L3 * L;
		L5 = L4 * L;
		ak[ 0 ] = 1.0;
		ak[ 1 ] = ( 2.0-L ) * 0.5;
		ak[ 2 ] = ( ( -9.0*L ) + 6.0 + ( 2.0*L2 ) ) / 6.0;
		ak[ 4 ] = ( 60.0 + (350.0*L2) - (300.0*L) - (125.0*L3) + (12.0*L4) );
		ak[ 4 ] /= 60.0;
		ak[ 3 ] = -( (3*L3)+ (36*L) - (22*L2) - 12 ) * ONEO12;
		ak[ 5 ] = -(-120 - (274*L4) + (900*L) -
			(1700*L2) + (1125*L3) + (20*L5));
		ak[ 5 ] *= ONEO120;
		la += ( L * r * evalpoly( ak, r ) );
	}
	r = 1.0;
	if ( ( eta > -3.5 && eta < -0.03 ) || ( eta > 0.03 && eta < 40.0 ) ) {
		r = 1.0;
		q = la;
		do {
			la = q * ( s + ln(q) ) / ( q - 1.0 );
			r = abs( ( q/la ) - 1.0 );
			q = la;
		} while ( r > 1e-8 );
	}
	return la;
} // end FUNCTION lambdaeta()


// EXPORTS //

module.exports = lambdaeta;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/tools/evalpoly":1356}],1295:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_SQRT_TWO_PI = require( '@stdlib/math/constants/float64-ln-sqrt-two-pi' );
var SMALLEST_FLOAT32 = require( '@stdlib/math/constants/float32-smallest-normal' );
var MAX_FLOAT32 = require( '@stdlib/math/constants/float32-max' );
var chepolsum = require( './chepolsum.js' );


// Polyomial coefficients:

var A = [
	1.996379051590076518221,
	-0.17971032528832887213e-2,
	0.131292857963846713e-4,
	-0.2340875228178749e-6,
	0.72291210671127e-8,
	-0.3280997607821e-9,
	0.198750709010e-10,
	-0.15092141830e-11,
	0.1375340084e-12,
	-0.145728923e-13,
	0.17532367e-14,
	-0.2351465e-15,
	0.346551e-16,
	-0.55471e-17,
	0.9548e-18,
	-0.1748e-18,
	0.332e-19,
	-0.58e-20
];

var C = [
	0.25721014990011306473e-1,
	0.82475966166999631057e-1,
	-0.25328157302663562668e-2,
	0.60992926669463371e-3,
	-0.33543297638406e-3,
	0.250505279903e-3
];
var C6 = 0.30865217988013567769;

var D = [
	0.0833333333333333333333333333333,
	-0.00277777777777777777777777777778,
	0.000793650793650793650793650793651,
	-0.000595238095238095238095238095238
];


// FUNCTIONS //

var polyval1 = evalpoly.factory( C );
var polyval2 = evalpoly.factory( D );


// MAIN //

/**
* Computes the stirling series corresponding with asymptotic series for log(gamma(x)), that is:  1/(12x)-1/(360x**3)...; x>= 3}
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function stirling( x ) {
	var z;
	if ( x < SMALLEST_FLOAT32 ) {
		return MAX_FLOAT32;
	}
	else if ( x < 1.0 ) {
		return gammaln( x+1.0 ) - ( (x+0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;
	}
	else if ( x < 2.0 ) {
		return gammaln( x ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;
	}
	else if ( x < 3.0 ) {
		return gammaln( x-1.0 ) - ( (x-0.5) * ln(x) ) + x -
			LN_SQRT_TWO_PI + ln( x-1.0 );
	}
	else if ( x < 12.0 ) {
		z = ( 18.0 / ( x * x ) ) - 1.0;
		return chepolsum( 17, z, A ) / ( 12.0 * x );
	}
	z = 1.0 / ( x * x );
	if ( x < 1000.0 ) {
		return polyval1( z ) / ( C6 + z ) / x;
	}
	return polyval2( z ) / x;
} // end FUNCTION stirling()


// EXPORTS //

module.exports = stirling;

},{"./chepolsum.js":1285,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float32-max":1389,"@stdlib/math/constants/float32-smallest-normal":1390,"@stdlib/math/constants/float64-ln-sqrt-two-pi":1401}],1296:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c?revision=268523&view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var PI = require( '@stdlib/math/constants/float64-pi' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// VARIABLES //

var A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8
var A1 = [
	6.73523010531292681824e-02, // 0x3FB13E001A5562A7
	7.38555086081402883957e-03, // 0x3F7E404FB68FEFE8
	1.19270763183362067845e-03, // 0x3F538A94116F3F5D
	2.20862790713908385557e-04, // 0x3F2CF2ECED10E54D
	2.52144565451257326939e-05  // 0x3EFA7074428CFA52
];
var A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD
var A2 = [
	2.05808084325167332806e-02, // 0x3F951322AC92547B
	2.89051383673415629091e-03, // 0x3F67ADD8CCB7926B
	5.10069792153511336608e-04, // 0x3F40B6C689B99C00
	1.08011567247583939954e-04, // 0x3F1C5088987DFB07
	4.48640949618915160150e-05  // 0x3F07858E90A45837
];
var RC = 1.0;
var R = [
	1.39200533467621045958e+00, // 0x3FF645A762C4AB74
	7.21935547567138069525e-01, // 0x3FE71A1893D3DCDC
	1.71933865632803078993e-01, // 0x3FC601EDCCFBDF27
	1.86459191715652901344e-02, // 0x3F9317EA742ED475
	7.77942496381893596434e-04, // 0x3F497DDACA41A95B
	7.32668430744625636189e-06  // 0x3EDEBAF7A5B38140
];
var SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var S = [
	2.14982415960608852501e-01,  // 0x3FCB848B36E20878
	3.25778796408930981787e-01,  // 0x3FD4D98F4F139F59
	1.46350472652464452805e-01,  // 0x3FC2BB9CBEE5F2F7
	2.66422703033638609560e-02,  // 0x3F9B481C7E939961
	1.84028451407337715652e-03,  // 0x3F5E26B67368F239
	3.19475326584100867617e-05   // 0x3F00BFECDD17E945
];
var T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2
var T1 = [
	-3.27885410759859649565e-02, // 0xBFA0C9A8DF35B713
	6.10053870246291332635e-03,  // 0x3F78FCE0E370E344
	-1.40346469989232843813e-03, // 0xBF56FE8EBF2D1AF1
	3.15632070903625950361e-04   // 0x3F34AF6D6C0EBBF7
];
var T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509
var T2 = [
	1.79706750811820387126e-02,  // 0x3F9266E7970AF9EC
	-3.68452016781138256760e-03, // 0xBF6E2EFFB3E914D7
	8.81081882437654011382e-04,  // 0x3F4CDF0CEF61A8E9
	-3.12754168375120860518e-04  // 0xBF347F24ECC38C38
];
var T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B
var T3 = [
	-1.03142241298341437450e-02, // 0xBF851F9FBA91EC6A
	2.25964780900612472250e-03,  // 0x3F6282D32E15C915
	-5.38595305356740546715e-04, // 0xBF41A6109C73E0EC
	3.35529192635519073543e-04   // 0x3F35FD3EE8C2D3F4
];
var UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var U = [
	6.32827064025093366517e-01,  // 0x3FE4401E8B005DFF
	1.45492250137234768737e+00,  // 0x3FF7475CD119BD6F
	9.77717527963372745603e-01,  // 0x3FEF497644EA8450
	2.28963728064692451092e-01,  // 0x3FCD4EAEF6010924
	1.33810918536787660377e-02   // 0x3F8B678BBF2BAB09
];
var VC = 1.0;
var V = [
	2.45597793713041134822e+00, // 0x4003A5D7C2BD619C
	2.12848976379893395361e+00, // 0x40010725A42B18F5
	7.69285150456672783825e-01, // 0x3FE89DFBE45050AF
	1.04222645593369134254e-01, // 0x3FBAAE55D6537C88
	3.21709242282423911810e-03  // 0x3F6A5ABB57D0CF61
];
var WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69
var W = [
	8.33333333333329678849e-02,  // 0x3FB555555555553B
	-2.77777777728775536470e-03, // 0xBF66C16C16B02E5C
	7.93650558643019558500e-04,  // 0x3F4A019F98CF38B6
	-5.95187557450339963135e-04, // 0xBF4380CB8C0FE741
	8.36339918996282139126e-04,  // 0x3F4B67BA4CDAD5D1
	-1.63092934096575273989e-03  // 0xBF5AB89D0B9E43E4
];
var YMIN = 1.461632144968362245;
var TWO52 = 4503599627370496; // 2**52
var TWO58 = 288230376151711744; // 2**58
var TINY = 8.470329472543003e-22;
var TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F
var TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42
var TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)


// FUNCTIONS //

// Compile functions to evaluate polynomials based on the above coefficients...
var polyvalA1 = evalpoly( A1 );
var polyvalA2 = evalpoly( A2 );
var polyvalR = evalpoly( R );
var polyvalS = evalpoly( S );
var polyvalT1 = evalpoly( T1 );
var polyvalT2 = evalpoly( T2 );
var polyvalT3 = evalpoly( T3 );
var polyvalU = evalpoly( U );
var polyvalV = evalpoly( V );
var polyvalW = evalpoly( W );


// MAIN //

/**
* Evaluates the natural logarithm of the gamma function.
*
* #### Method
*
* 1. Argument reduction for \\(0 < x \leq 8\\). Since \\(\Gamma(1+s) = s \Gamma(s)\\), for \\(x \in [0,8]\\), we may reduce \\(x\\) to a number in \\([1.5,2.5]\\) by
*
*   ``` tex
*   \operatorname{lgamma}(1+s) = \ln(s) + \operatorname{lgamma}(s)
*   ```
*
*   For example,
*
*   ``` tex
*   \begin{align}
*   \operatorname{lgamma}(7.3) &= \ln(6.3) + \operatorname{lgamma}(6.3) \\
*   &= \ln(6.3 \cdot 5.3) + \operatorname{lgamma}(5.3) \\
*   &= \ln(6.3 \cdot 5.3 \cdot 4.3 \cdot 3.3 \cdot2.3) + \operatorname{lgamma}(2.3)
*   \end{align}
*   ```
*
* 2. Compute a polynomial approximation of \\(\mathrm{lgamma}\\) around its
minimum (\\(\mathrm{ymin} = 1.461632144968362245\\)) to maintain monotonicity. On the interval \\([\mathrm{ymin} - 0.23, \mathrm{ymin} + 0.27]\\) (i.e., \\([1.23164,1.73163]\\)), we let \\(z = x - \mathrm{ymin}\\) and use
*
*   ``` tex
*   \operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \cdot \operatorname{poly}(z)
*   ```
*
*   where \\(\operatorname{poly}(z)\\) is a \\(14\\) degree polynomial.
*
* 3. Compute a rational approximation in the primary interval \\([2,3]\\). Let \\( s = x - 2.0 \\). We can thus use the approximation
*
*   ``` tex
*   \operatorname{lgamma}(x) = \frac{s}{2} + s\frac{\operatorname{P}(s)}{\operatorname{Q}(s)}
*   ```
*
*   with accuracy
*
*   ``` tex
*   \biggl|\frac{\mathrm{P}}{\mathrm{Q}} - \biggr(\operatorname{lgamma}(x)-\frac{s}{2}\biggl)\biggl| < 2^{-61.71}
*   ```
*
*   The algorithms are based on the observation
*
*   ``` tex
*   \operatorname{lgamma}(2+s) = s(1 - \gamma) + \frac{\zeta(2) - 1}{2} s^2 - \frac{\zeta(3) - 1}{3} s^3 + \ldots
*   ```
*
*   where \\(\zeta\\) is the zeta function and \\(\gamma = 0.5772156649...\\) is the Euler-Mascheroni constant, which is very close to \\(0.5\\).
*
* 3. For \\(x \geq 8\\),
*
*   ``` tex
*   \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr) \ln(x) - x + \frac{\ln(2\pi)}{2} + \frac{1}{12x} - \frac{1}{360x^3} + \ldots
*   ```
*
*   which can be expressed
*
*   ``` tex
*   \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)-\frac{\ln(2\pi)-1}{2} + \ldots
*   ```
*
*   Let \\(z = \frac{1}{x}\\). We can then use the approximation
*
*   ``` tex
*   f(z) = \operatorname{lgamma}(x) - \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)
*   ```
*
*   by
*
*   ``` tex
*   w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \ldots + w_6 z^{11}
*   ```

*   where
*
*   ``` tex
*   |w - f(z)| < 2^{-58.74}
*   ```
*
* 4. For negative \\(x\\), since
*
*   ``` tex
*   -x \Gamma(-x) \Gamma(x) = \frac{\pi}{\sin(\pi x)}
*   ```
*
*   where \\(\Gamma\\) is the gamma function, we have
*
*   ``` tex
*   \Gamma(x) = \frac{\pi}{\sin(\pi x)(-x)\Gamma(-x)}
*   ```
*
*   Since \\(\Gamma(-x)\\) is positive,
*
*   ``` tex
*   \operatorname{sign}(\Gamma(x)) = \operatorname{sign}(\sin(\pi x))
*   ```
*
*   for \\(x < 0\\). Hence, for \\(x < 0\\),
*
*   ``` tex
*   \mathrm{signgam} = \operatorname{sign}(\sin(\pi x))
*   ```
*
*   and
*
*   ``` tex
*   \begin{align}
*   \operatorname{lgamma}(x) &= \ln(|\Gamma(x)|) \\
*   &= \ln\biggl(\frac{\pi}{|x \sin(\pi x)|}\biggr) - \operatorname{lgamma}(-x)
*   \end{align}
*   ```
*
*   <!-- <note> -->
*   Note that one should avoid computing \\(\pi (-x)\\) directly in the computation of \\(\sin(\pi (-x))\\).
*   <!-- </note> -->
*
*
* #### Special Cases
*
* ``` tex
* \begin{align}
* \operatorname{lgamma}(2+s) &\approx s (1-\gamma) & \mathrm{for\ tiny\ s} \\
* \operatorname{lgamma}(x) &\approx -\ln(x) & \mathrm{for\ tiny\ x} \\
* \operatorname{lgamma}(1) &= 0 & \\
* \operatorname{lgamma}(2) &= 0 & \\
* \operatorname{lgamma}(0) &= \infty & \\
* \operatorname{lgamma}(\infty) &= \infty & \\
* \operatorname{lgamma}(-\mathrm{integer}) &= \pm \infty
* \end{align}
* ```
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammaln( 1.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 2.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 4.0 );
* // returns ~1.792
*
* @example
* var v = gammaln( -0.5 );
* // returns ~1.266
*
* @example
* var v = gammaln( 0.5 );
* // returns ~0.572
*
* @example
* var v = gammaln( 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = gammaln( NaN );
* // returns NaN
*/
function gammaln( x ) {
	var isNegative;
	var nadj;
	var flg;
	var p3;
	var p2;
	var p1;
	var p;
	var q;
	var t;
	var w;
	var y;
	var z;
	var r;

	// Special cases: NaN, +-infinity
	if ( isnan( x ) || isInfinite( x ) ) {
		return x;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return PINF;
	}
	if ( x < 0.0 ) {
		isNegative = true;
		x = -x;
	} else {
		isNegative = false;
	}
	// If |x| < 2**-70, return -ln(|x|)
	if ( x < TINY ) {
		return -ln( x );
	}
	if ( isNegative ) {
		// If |x| >= 2**52, must be -integer
		if ( x >= TWO52 ) {
			return PINF;
		}
		t = sinpi( x );
		if ( t === 0.0 ) {
			return PINF;
		}
		nadj = ln( PI / abs( t*x ) );
	}
	// If x equals 1 or 2, return 0
	if ( x === 1.0 || x === 2.0 ) {
		return 0.0;
	}
	// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)
	if ( x < 2.0 ) {
		if ( x <= 0.9 ) {
			r = -ln( x );

			// 0.7316 <= x <=  0.9
			if ( x >= ( YMIN - 1.0 + 0.27 ) ) {
				y = 1.0 - x;
				flg = 0;
			}
			// 0.2316 <= x < 0.7316
			else if ( x >= (YMIN - 1.0 - 0.27) ) {
				y = x - (TC - 1.0);
				flg = 1;
			}
			// 0 < x < 0.2316
			else {
				y = x;
				flg = 2;
			}
		} else {
			r = 0.0;

			// 1.7316 <= x < 2
			if ( x >= (YMIN + 0.27) ) {
				y = 2.0 - x;
				flg = 0;
			}
			// 1.2316 <= x < 1.7316
			else if ( x >= (YMIN - 0.27) ) {
				y = x - TC;
				flg = 1;
			}
			// 0.9 < x < 1.2316
			else {
				y = x - 1.0;
				flg = 2;
			}
		}
		switch ( flg ) { // eslint-disable-line default-case
		case 0:
			z = y * y;
			p1 = A1C + (z*polyvalA1( z ));
			p2 = z * (A2C + (z*polyvalA2( z )));
			p = (y*p1) + p2;
			r += ( p - (0.5*y) );
			break;
		case 1:
			z = y * y;
			w = z * y;
			p1 = T1C + (w*polyvalT1( w ));
			p2 = T2C + (w*polyvalT2( w ));
			p3 = T3C + (w*polyvalT3( w ));
			p = (z*p1) - (TT - (w*(p2+(y*p3))));
			r += ( TF + p );
			break;
		case 2:
			p1 = y * (UC + (y*polyvalU( y )));
			p2 = VC + (y*polyvalV( y ));
			r += (-0.5*y) + (p1/p2);
			break;
		}
	}
	// 2 <= x < 8
	else if ( x < 8.0 ) {
		flg = trunc( x );
		y = x - flg;
		p = y * (SC + (y*polyvalS( y )));
		q = RC + (y*polyvalR( y ));
		r = (0.5*y) + (p/q);
		z = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)
		switch ( flg ) { // eslint-disable-line default-case
		case 7:
			z *= y + 6.0;
			/* falls through */
		case 6:
			z *= y + 5.0;
			/* falls through */
		case 5:
			z *= y + 4.0;
			/* falls through */
		case 4:
			z *= y + 3.0;
			/* falls through */
		case 3:
			z *= y + 2.0;
			r += ln( z );
		}
	}
	// 8 <= x < 2**58
	else if ( x < TWO58 ) {
		t = ln( x );
		z = 1.0 / x;
		y = z * z;
		w = WC + (z*polyvalW( y ));
		r = ((x-0.5)*(t-1.0)) + w;
	}
	// 2**58 <= x <= Inf
	else {
		r = x * ( ln(x)-1.0 );
	}
	if ( isNegative ) {
		r = nadj - r;
	}
	return r;
} // end FUNCTION gammaln()


// EXPORTS //

module.exports = gammaln;

},{"@stdlib/math/base/assert/is-infinite":39,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/sinpi":1341,"@stdlib/math/base/special/trunc":1349,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/constants/float64-pi":1413,"@stdlib/math/constants/float64-pinf":1414}],1297:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the gamma function.
*
* @module @stdlib/math/base/special/gammaln
*
* @example
* var gammaln = require( '@stdlib/math/base/special/gammaln' );
*
* var v = gammaln( 1.0 );
* // returns 0.0
*
* v = gammaln( 2.0 );
* // returns 0.0
*
* v = gammaln( 4.0 );
* // returns ~1.792
*
* v = gammaln( -0.5 );
* // returns ~1.266
*
* v = gammaln( 0.5 );
* // returns ~0.572
*
* v = gammaln( 0.0 );
* // returns Number.POSITIVE_INFINITY
*
* v = gammaln( NaN );
* // returns NaN
*/

// MODULES //

var gammaln = require( './gammaln.js' );


// EXPORTS //

module.exports = gammaln;

},{"./gammaln.js":1296}],1298:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":1299}],1299:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
var floatExp = require( '@stdlib/math/base/utils/float64-exponent' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111
var CLEAR_EXP_MASK = 0x800fffff; // 2148532223


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/
function ldexp( frac, exp ) {
	var high;
	var tmp;
	var w;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	tmp = normalize( frac );
	frac = tmp[ 0 ];
	exp += tmp[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	w = toWords( frac );
	high = w[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, w[ 1 ] );
} // end FUNCTION ldexp()


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/math/base/assert/is-infinite":39,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/copysign":1234,"@stdlib/math/base/utils/float64-exponent":1364,"@stdlib/math/base/utils/float64-from-words":1366,"@stdlib/math/base/utils/float64-normalize":1374,"@stdlib/math/base/utils/float64-to-words":1384,"@stdlib/math/constants/float64-exponent-bias":1394,"@stdlib/math/constants/float64-max-base2-exponent":1405,"@stdlib/math/constants/float64-max-base2-exponent-subnormal":1404,"@stdlib/math/constants/float64-min-base2-exponent-subnormal":1409,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1300:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm.
*
* @module @stdlib/math/base/special/ln
*
* @example
* var ln = require( '@stdlib/math/base/special/ln' );
*
* var v = ln( 4.0 );
* // returns ~1.386
*
* v = ln( 0.0 );
* // returns Number.NEGATIVE_INFINITY
*
* v = ln( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = ln( NaN );
* // returns NaN
*
* v = ln( -4.0 );
* // returns NaN
*/

// MODULES //

var ln = require( './ln.js' );


// EXPORTS //

module.exports = ln;

},{"./ln.js":1301}],1301:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// VARIABLES //

var LN2_HI = 6.93147180369123816490e-01; // 3fe62e42 fee00000
var LN2_LO = 1.90821492927058770002e-10; // 3dea39ef 35793c76
var TWO54 = 1.80143985094819840000e+16; // 0x43500000, 0x00000000
var P = [
	3.999999999940941908e-01,  // 3FD99999 9997FA04
	2.222219843214978396e-01,  // 3FCC71C5 1D8E78AF
	1.531383769920937332e-01  // 3FC39A09 D078C69F
];
var Q = [
	6.666666666666735130e-01, // 3FE55555 55555593
	2.857142874366239149e-01, // 3FD24924 94229359
	1.818357216161805012e-01, // 3FC74664 96CB03DE
	1.479819860511658591e-01 // 3FC2F112 DF3E5244
];

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff;

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000;

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000;

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000;


// FUNCTIONS //

// Compile functions to evaluate polynomial functions based on the above coefficients...
var polyvalP = evalpoly( P );
var polyvalQ = evalpoly( Q );


// MAIN //

/**
* Evaluates the natural logarithm.
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = ln( 4.0 );
* // returns ~1.386
*
* @example
* var v = ln( 0.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = ln( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = ln( NaN );
* // returns NaN
*
* @example
* var v = ln( -4.0 );
* // returns NaN
*/
function ln( x ) {
	var words;
	var hfsq;
	var hx;
	var k;
	var t2;
	var t1;
	var R;
	var f;
	var i;
	var j;
	var s;
	var w;
	var z;

	if ( x === 0.0 ) {
		return NINF;
	}
	if ( isnan( x ) || x < 0.0 ) {
		return NaN;
	}

	words = toWords( x );
	hx = words[ 0 ];

	k = 0;
	if ( hx < HIGH_MIN_NORMAL_EXP ) {
		// Case: 0 < x < 2**-1022
		k -= 54;
		// Subnormal number, scale up x:
		x *= TWO54;
		hx = getHighWord( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += ( hx>>20 ) - BIAS;
	hx &= HIGH_SIGNIFICAND_MASK;
	i = (hx+0x95f64) & 0x100000;
	// Normalize x or x/2...
	x = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );
	k += ( i>>20 );
	f = x - 1.0;
	if ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			if ( k === 0.0 ) {
				return 0.0;
			}
			return (k * LN2_HI) + (k * LN2_LO);
		}
		R = f * f * ( 0.5 - (0.33333333333333333*f) );
		if ( k === 0.0 ) {
			return f - R;
		}
		return (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );
	}
	s = f / (2.0 + f );
	z = s * s;
	i = hx - 0x6147a;
	w = z * z;
	j = 0x6b851 - hx;
	t1 = w * polyvalP( w );
	t2 = z * polyvalQ( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		if ( k === 0.0 ) {
			return f - ( hfsq - (s * (hfsq+R)) );
		}
		return (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );
	}
	if ( k === 0 ) {
		return f - ( s * ( f - R ) );
	}
	return (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );
} // end FUNCTION ln()


// EXPORTS //

module.exports = ln;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-set-high-word":1377,"@stdlib/math/base/utils/float64-to-words":1384,"@stdlib/math/constants/float64-exponent-bias":1394,"@stdlib/math/constants/float64-ninf":1411}],1302:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of \\(1+x\\).
*
* @module @stdlib/math/base/special/log1p
*
* @example
* var log1p = require( '@stdlib/math/base/special/log1p' );
*
* var v = log1p( 4.0 );
* // returns ~1.609
*
* v = log1p( -1.0 );
* // returns Number.NEGATIVE_INFINITY
*
* v = log1p( 0.0 );
* // returns 0.0
*
* v = log1p( -0.0 );
* // returns -0.0
*
* v = log1p( -2.0 );
* // returns NaN
*
* v = log1p( NaN );
* // returns NaN
*/

// MODULES //

var log1p = require( './log1p.js' );


// EXPORTS //

module.exports = log1p;

},{"./log1p.js":1303}],1303:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [netlib]{http://www.netlib.org/fdlibm/s_log1p.c}.
*
* The long comment and implementation follow the original, but have been reformatted and modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var highWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// VARIABLES //

// High and low words of ln(2):
var LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000
var LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76

// sqrt(2)-1:
var SQRT2M1 = 4.142135623730950488017e-01;  // 0x3fda8279 0x99fcef34

// sqrt(2)/2-1:
var SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866

// 2**-29:
var SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000

// 2**-54:
var TINY = 5.551115123125783e-17;

// Max integer (unsafe) => 2**53:
var TWO53 = 9007199254740992;

// 2/3:
var TWO_THIRDS = 6.666666666666666666e-01;

// Polynomial coefficients:
var Lp = [
	6.666666666666735130e-01, // 0x3FE55555 0x55555593
	3.999999999940941908e-01, // 0x3FD99999 0x9997FA04
	2.857142874366239149e-01, // 0x3FD24924 0x94229359
	2.222219843214978396e-01, // 0x3FCC71C5 0x1D8E78AF
	1.818357216161805012e-01, // 0x3FC74664 0x96CB03DE
	1.531383769920937332e-01, // 0x3FC39A09 0xD078C69F
	1.479819860511658591e-01 // 0x3FC2F112 0xDF3E5244
];


// FUNCTIONS //

var polyval = evalpoly.factory( Lp );


// MAIN //

/**
* Evaluates the natural logarithm of \\(1+x\\).
*
* #### Method
*
* 1. Argument Reduction: find \\(k\\) and \\(f\\) such that
*
*    ``` tex
*    1+x = 2^k (1+f)
*    ```
*
*    where
*
*    ``` tex
*    \frac{\sqrt{2}}{2} < 1+f < \sqrt{2}
*    ```
*
*    <!-- <note> -->
*    If \\(k=0\\), then \\(f=x\\) is exact. However, if \\(k \neq 0\\), then \\(f\\) may not be representable exactly. In that case, a correction term is needed. Let
*
*    ``` tex
*    u = \operatorname{round}(1+x)
*    ```
*
*    and
*
*    ``` tex
*    c = (1+x) - u
*    ```
*
*    then
*
*    ``` tex
*    \ln (1+x) - \ln u \approx \frac{c}{u}
*    ```
*
*    We can thus proceed to compute \\(\ln(u)\\), and add back the correction term \\(c/u\\).
*    <!-- </note> -->
*    <!-- <note> -->
*    When \\(x > 2^{53}\\), one can simply return \\(\ln(x)\\).
*    <!-- </note> -->
*
* 2. Approximation of \\(\operatorname{log1p}(f)\\). Let
*
*    ``` tex
*    s = \frac{f}{2+f}
*    ```
*
*    based on
*
*    ``` tex
*    \begin{align*}
*    \ln 1+f &= \ln (1+s) - \ln (1-s) \\
*            &= 2s + \frac{2}{3} s^3 + \frac{2}{5} s^5 + ... \\
*            &= 2s + sR \\
*    \end{align*}
*    ```
*
*     We use a special Reme algorithm on \\([0,0.1716]\\) to generate a polynomial of degree \\(14\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-58.45}\\). In other words,
*
*     ``` tex
*     R(z) \approx \mathrm{Lp}_1 s^2 + \mathrm{Lp}_2 s^4 + \mathrm{Lp}_3 s^6 + \mathrm{Lp}_4 s^8 + \mathrm{Lp}_5 s^{10} + \mathrm{Lp}_6 s^{12} + \mathrm{Lp}_7 s^{14}
*     ```
*
*     and
*
*     ``` tex
*     | \mathrm{Lp}_1 s^2 + \ldots + \mathrm{Lp}_7 s^14 - R(z) | \leq 2^{-58.45}
*     ```
*
*     <!-- <note> -->
*     The values of \\(Lp1\\) to \\(Lp7\\) may be found in the source.
*     <!-- </note> -->
*
*     Note that
*
*     ``` tex
*     \begin{align*}
*     2s &= f - sf \\
*        &= f - \frac{f^2}{2} + s \frac{f^2}{2} \\
*     \end{align*}
*     ```
*
*     In order to guarantee error in \\(\ln\\) below \\(1\ \mathrm{ulp}\\), we compute the log by
*
*     ``` tex
*     \operatorname{log1p}(f) = f - \biggl(\frac{f^2}{2} - s\biggl(\frac{f^2}{2}+R\biggr)\biggr)
*     ```
*
* 3. Finally,
*
*    ``` tex
*    \begin{align*}
*    \operatorname{log1p}(x) &= k \cdot \mathrm{ln2} + \operatorname{log1p}(f) \\
*    &= k \cdot \mathrm{ln2}_{hi}+\biggl(f-\biggl(\frac{f^2}{2}-\biggl(s\biggl(\frac{f^2}{2}+R\biggr)+k \cdot \mathrm{ln2}_{lo}\biggr)\biggr)\biggr) \\
*    \end{align*}
*    ```
*
*    Here \\(\mathrm{ln2}\\) is split into two floating point numbers:
*
*    ``` tex
*    \mathrm{ln2}_{hi} + \mathrm{ln2}_{lo}
*    ```
*
*    where \\(n \cdot \mathrm{ln2}_{hi}\\) is always exact for \\(|n| < 2000\\).
*
*
* #### Special Cases
*
* - \\(\operatorname{log1p}(x) = \mathrm{NaN}\\) with signal if \\(x < -1\\) (including \\(-\infty\\))
* - \\(\operatorname{log1p}(+\infty) = +\infty\\)
* - \\(\operatorname{log1p}(-1) = -\infty\\) with signal
* - \\(\operatorname{log1p}(\mathrm{NaN})= \mathrm{NaN}\\) with no signal
*
*
* #### Notes
*
* * According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
* * The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.
* * Assuming \\(\ln(x)\\) is accurate, the following algorithm can be used to evaluate \\(\operatorname{log1p}(x)\\) to within a few ULP:
*
*    ``` javascript
*    var u = 1.0 + x;
*    if ( u === 1.0 ) {
*      return x;
*    } else {
*      return ln(u) * (x/(u-1.0));
*    }
*    ```
*
*    See HP-15C Advanced Functions Handbook, p.193.
*
*
* @param {number} x - input value
* @returns {number} the natural logarithm of `1+x`
*
* @example
* var v = log1p( 4.0 );
* // returns ~1.609
*
* @example
* var v = log1p( -1.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = log1p( 0.0 );
* // returns 0.0
*
* @example
* var v = log1p( -0.0 );
* // returns -0.0
*
* @example
* var v = log1p( -2.0 );
* // returns NaN
*
* @example
* var v = log1p( NaN );
* // returns NaN
*/
function log1p( x ) {
	var hfsq;
	var hu;
	var y;
	var f;
	var c;
	var s;
	var z;
	var R;
	var u;
	var k;

	if ( x < -1.0 || isnan( x ) ) {
		return NaN;
	}
	if ( x === -1.0 ) {
		return NINF;
	}
	if ( x === PINF ) {
		return x;
	}
	if ( x === 0.0 ) {
		return x; // handle +-0 (IEEE 754-2008 spec)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		y = -x;
	} else {
		y = x;
	}
	// Argument reduction...
	k = 1;

	// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...
	if ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422
		if ( y < SMALL ) { // if |x| < 2**-29
			if ( y < TINY ) { // if |x| < 2**-54
				return x;
			}
			// Use a simple two-term Taylor series...
			return x - ( x*x*0.5 );
		}
		// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...
		if ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929
			// => -0.2929 < x < 0.41422
			k = 0;
			f = x; // exact
			hu = 1;
		}
	}
	// Address case where `f` cannot be represented exactly...
	if ( k !== 0 ) {
		if ( y < TWO53 ) {
			u = 1.0 + x;
			hu = highWord( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - BIAS;

			// Correction term...
			if ( k > 0 ) { // positive unbiased exponent
				c = 1.0 - (u-x);
			} else { // nonpositive unbiased exponent
				c = x - (u-1.0);
			}
			c /= u;
		} else {
			u = x;
			hu = highWord( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - BIAS;

			// Correction term is zero:
			c = 0;
		}
		// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:
		hu &= 0x000fffff; // max value => 1048575

		// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110
		if ( hu < 434334 ) {
			// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000
			u = setHighWord( u, hu|0x3ff00000 );
		} else {
			k += 1;

			// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000
			u = setHighWord( u, hu|0x3fe00000 );

			// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576
			hu = (1048576-hu)>>2;
		}
		f = u - 1.0;
	}
	// Approximation of log1p(f)...
	hfsq = 0.5 * f * f;
	if ( hu === 0 ) { // if |f| < 2**-20
		if ( f === 0.0 ) {
			c += k * LN2_LO;
			return ( k * LN2_HI ) + c;
		}
		R = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division
		return ( k*LN2_HI ) - ( (R - ( (k*LN2_LO) + c)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;

	R = z * polyval( z );

	if ( k === 0 ) {
		return f - ( hfsq - ( s*(hfsq+R) ) );
	}
	return ( k*LN2_HI ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*LN2_LO) + c))) - f );
} // end FUNCTION log1p()


// EXPORTS //

module.exports = log1p;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-set-high-word":1377,"@stdlib/math/constants/float64-exponent-bias":1394,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1304:[function(require,module,exports){
'use strict';

/**
* Evaluate the binary logarithm (base two).
*
* @module @stdlib/math/base/special/log2
*
* @example
* var log2 = require( '@stdlib/math/base/special/log2' );
*
* var v = log2( 4.0 );
* // returns 2.0
*
* v = log2( 8.0 );
* // returns 3.0
*
* v = log2( 0.0 );
* // returns Number.NEGATIVE_INFINITY
*
* v = log2( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = log2( NaN );
* // returns NaN
*
* v = log2( -4.0 );
* // returns NaN
*/

// MODULES //

var log2 = require( './log2.js' );


// EXPORTS //

module.exports = log2;

},{"./log2.js":1306}],1305:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );


// VARIABLES //

var P = [
	3.999999999940941908e-01,  // 3FD99999 9997FA04
	2.222219843214978396e-01,  // 3FCC71C5 1D8E78AF
	1.531383769920937332e-01  // 3FC39A09 D078C69F
];
var Q = [
	6.666666666666735130e-01, // 3FE55555 55555593
	2.857142874366239149e-01, // 3FD24924 94229359
	1.818357216161805012e-01, // 3FC74664 96CB03DE
	1.479819860511658591e-01 // 3FC2F112 DF3E5244
];

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff;


// FUNCTIONS //

// Compile functions to evaluate polynomial functions based on the above coefficients...
var polyvalP = evalpoly( P );
var polyvalQ = evalpoly( Q );


// MAIN //

/**
* Return log(x) - (x-1) for x in ~[sqrt(2)/2, sqrt(2)].
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function klog( x ) {
	var words;
	var hfsq;
	var t1;
	var t2;
	var hx;
	var lx;
	var f;
	var s;
	var z;
	var R;
	var w;
	var i;
	var j;

	words = toWords( x );
	hx = words[ 0 ];
	lx = words[ 1 ];

	f = x - 1.0;
	if ( ( HIGH_SIGNIFICAND_MASK & (2+hx) ) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			return 0.0;
		}
		return f * f * ( 0.33333333333333333*f - 0.5 );
	}
 	s = f / ( 2.0 + f );
	z = s * s;
	hx &= HIGH_SIGNIFICAND_MASK;
	i = hx - 0x6147a;
	w = z * z;
	j = 0x6b851 - hx;
	t1 = w * polyvalP( w );
	t2 = z * polyvalQ( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		return s * (hfsq+R) - hfsq;
	} else {
		return s * (R-f);
	}
} // end FUNCTION klog()


// EXPORTS //

module.exports = klog;

},{"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-to-words":1384}],1306:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log2.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var klog = require( './klog.js' );


// VARIABLES //

var TWO54 = 1.80143985094819840000e+16; /* 0x43500000, 0x00000000 */
var IVLN2HI = 1.44269504072144627571e+00; /* 0x3ff71547, 0x65200000 */
var IVLN2LO = 1.67517131648865118353e-10; /* 0x3de705fc, 0x2eefa200 */

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff;

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000;

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000;

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000;

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff;


// MAIN //

/**
* Evaluates the binary logarithm (base two).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log2( 4.0 );
* // returns 2.0
*
* @example
* var v = log2( 8.0 );
* // returns 3.0
*
* @example
* var v = log2( 0.0 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = log2( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = log2( NaN );
* // returns NaN
*
* @example
* var v = log2( -4.0 );
* // returns NaN
*/
function log2( x ) {
	var words;
	var hi;
	var lo;
	var hx;
	var lx;
	var f;
	var i;
	var k;

	if ( isnan( x ) || x < 0.0 ) {
		return NaN;
	}

	words = toWords( x );
	hx = words[ 0 ];
	lx = words[ 1 ];

	k = 0;
	if ( hx < HIGH_MIN_NORMAL_EXP ) {
		// Case: x < 2**-1022
		if ( ( (hx&ABS_MASK) | lx ) === 0 ) {
			return NINF;
		}
		k -= 54;
		// Subnormal number, scale up x:
		x *= TWO54;
		hx = getHighWord( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += (hx>>20) - BIAS;
	hx &= HIGH_SIGNIFICAND_MASK;
	i = ( hx+0x95f64 ) & 0x100000;
	// Normalize x or x/2...
	x = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );
	k += (i>>20);
	f = klog( x );
	hi = x = x - 1;
	hi = setLowWord( hi, 0 );
	lo = x - hi;
	return ( (x+f) * IVLN2LO ) + ( (lo+f) * IVLN2HI ) + ( hi * IVLN2HI ) + k;
} // end FUNCTION log2()


// EXPORTS //

module.exports = log2;

},{"./klog.js":1305,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-set-high-word":1377,"@stdlib/math/base/utils/float64-set-low-word":1379,"@stdlib/math/base/utils/float64-to-words":1384,"@stdlib/math/constants/float64-exponent-bias":1394,"@stdlib/math/constants/float64-ninf":1411}],1307:[function(require,module,exports){
'use strict';

/**
* Return the maximum value.
*
* @module @stdlib/math/base/special/max
*
* @example
* var max = require( '@stdlib/math/base/special/max' );
*
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = max( 3.14, NaN );
* // returns NaN
*
* v = max( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

var max = require( './max.js' );


// EXPORTS //

module.exports = max;

},{"./max.js":1308}],1308:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the maximum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum value
*
* @example
* var v = max( 3.14, 4.2 );
* // returns 4.2

* @example
* var v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = max( 3.14, NaN );
* // returns NaN
*
* @example
* var v = max( +0.0, -0.0 );
* // returns +0.0
*/
function max( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( isnan( x ) || isnan( y ) ) {
			return NaN;
		}
		if ( x === PINF || y === PINF ) {
			return PINF;
		}
		if ( x === y && x === 0.0 ) {
			if ( isPositiveZero( x ) ) {
				return x;
			}
			return y;
		}
		if ( x > y ) {
			return x;
		}
		return y;
	}
	m = NINF;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( isnan( v ) || v === PINF ) {
			return v;
		}
		if ( v > m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			isPositiveZero( v )
		) {
			m = v;
		}
	}
	return m;
} // end FUNCTION max()


// EXPORTS //

module.exports = max;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-positive-zero":55,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1309:[function(require,module,exports){
'use strict';

/**
* Return the minimum value.
*
* @module @stdlib/math/base/special/min
*
* @example
* var min = require( '@stdlib/math/base/special/min' );
*
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns -0.0
*/

// MODULES //

var min = require( './min.js' );


// EXPORTS //

module.exports = min;

},{"./min.js":1310}],1310:[function(require,module,exports){
'use strict';

// MODULES //

var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Returns the minimum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum value
*
* @example
* var v = min( 3.14, 4.2 );
* // returns 3.14

* @example
* var v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 3.14, NaN );
* // returns NaN
*
* @example
* var v = min( +0.0, -0.0 );
* // returns -0.0
*/
function min( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( isnan( x ) || isnan( y ) ) {
			return NaN;
		}
		if ( x === NINF || y === NINF ) {
			return NINF;
		}
		if ( x === y && x === 0.0 ) {
			if ( isNegativeZero( x ) ) {
				return x;
			}
			return y;
		}
		if ( x < y ) {
			return x;
		}
		return y;
	}
	m = PINF;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( isnan( v ) || v === NINF ) {
			return v;
		}
		if ( v < m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			isNegativeZero( v )
		) {
			m = v;
		}
	}
	return m;
} // end FUNCTION min()


// EXPORTS //

module.exports = min;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-negative-zero":47,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1311:[function(require,module,exports){
'use strict';

/**
* Evaluate the exponential function.
*
* @module @stdlib/math/base/special/pow
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* v = pow( 4.0, 0.5 );
* // returns 2.0
*
* v = pow( 100.0, 0.0 );
* // returns 1.0
*
* v = pow( Math.PI, 5.0 );
* // returns ~306.0197
*
* v = pow( Math.PI, -0.2 );
* // returns ~0.7954
*
* v = pow( NaN, 3.0 );
* // returns NaN
*
* v = pow( 5.0, NaN );
* // returns NaN
*
* v = pow( NaN, NaN );
* // returns NaN
*/

// MODULES //

var pow = require( './pow.js' );


// EXPORTS //

module.exports = pow;

},{"./pow.js":1314}],1312:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );
var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff;

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000;

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000;

// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023
var HIGH_BIASED_EXP_NEG_512 = 0x20000000;

// 0x00080000 = 524288 => 0 00000000000 10000000000000000000
var HIGH_SIGNIFICAND_HALF = 0x00080000;

// TODO: consider making an external constant
var HIGH_NUM_SIGNIFICAND_BITS = 20;

var TWO53 = 9007199254740992.0;	// 0x43400000, 0x00000000

// 2/(3*LN2)
var CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD

// (float)CP
var CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000

// Low: CP_HI
var CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5

var BP = [
	1.0,
	1.5
];
var DP_HI = [
	0.0,
	5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000
];
var DP_LO = [
	0.0,
	1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006
];

// Polynomial coefficients...
var L = [
	5.99999999999994648725e-01, // 0x3FE33333, 0x33333303
	4.28571428578550184252e-01, // 0x3FDB6DB6, 0xDB6FABFF
	3.33333329818377432918e-01, // 0x3FD55555, 0x518F264D
	2.72728123808534006489e-01, // 0x3FD17460, 0xA91D4101
	2.30660745775561754067e-01, // 0x3FCD864A, 0x93C9DB65
	2.06975017800338417784e-01  // 0x3FCA7E28, 0x4A454EEF
];


// FUNCTIONS //

// Compile a function for evaluating a polynomial based on the above coefficients...
var polyvalL = evalpoly( L );


// MAIN //

/**
* Computes \\(\operatorname{log2}(ax)\\).
*
* @private
* @param {number} ax - absolute value of `x`
* @param {number} ahx - high word of `ax`
* @returns {NumberArray} tuple comprised of high and low parts
*
* @example
* var t = log2ax( 9.0, 1075970048 ); // => [ t1, t2 ]
* // returns [ 3.169923782348633, 0.0000012190936795504075 ]
*/
function log2ax( ax, ahx ) {
	var tmp;
	var ss;  // `hs + ls`
	var s2;  // `ss` squared
	var hs;
	var ls;
	var ht;
	var lt;
	var bp;  // `BP` constant
	var dp;  // `DP` constant
	var hp;
	var lp;
	var hz;
	var lz;
	var t1;
	var t2;
	var t;
	var r;
	var u;
	var v;
	var n;
	var j;
	var k;

	n = 0;

	// Check if `x` is subnormal...
	if ( ahx < HIGH_MIN_NORMAL_EXP ) {
		ax *= TWO53;
		n -= 53;
		ahx = getHighWord( ax );
	}
	// Extract the unbiased exponent of `x`:
	n += (ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS;

	// Isolate the significand bits of `x`:
	j = (ahx & HIGH_SIGNIFICAND_MASK);

	// Normalize `ahx` by setting the (biased) exponent to `1023`:
	ahx = (j | HIGH_BIASED_EXP_0);

	// Determine the interval of `|x|` by comparing significand bits...

	// |x| < sqrt(3/2)
	if ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110
		k = 0;
	}
	// |x| < sqrt(3)
	else if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010
		k = 1;
	}
	// |x| >= sqrt(3)
	else {
		k = 0;
		n += 1;
		ahx -= HIGH_MIN_NORMAL_EXP;
	}
	// Load the normalized high word into `|x|`:
	ax = setHighWord( ax, ahx );

	// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:
	bp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5
	u = ax - bp; // (x-1) || (x-1.5)
	v = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)
	ss = u * v;
	hs = setLowWord( ss, 0 ); // set all low word (less significant significand) bits to 0s

	// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):
	tmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;
	tmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`
	ht = setHighWord( 0.0, tmp );
	lt = ax - (ht - bp);
	ls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );

	// Compute `log(ax)`...

	s2 = ss * ss;
	r = s2 * s2 * polyvalL( s2 );
	r += ls * (hs + ss);
	s2 = hs * hs;
	ht = 3.0 + s2 + r;
	ht = setLowWord( ht, 0 );
	lt = r - ((ht-3.0) - s2);

	// u+v = ss*(1+...):
	u = hs * ht;
	v = ( ls*ht ) + ( lt*ss );

	// 2/(3LN2) * (ss+...):
	hp = u + v;
	hp = setLowWord( hp, 0 );
	lp = v - (hp - u);
	hz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)
	lz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];

	// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz
	dp = DP_HI[ k ];
	t = n;
	t1 = ((hz+lz) + dp) + t; // log2(ax)
	t1 = setLowWord( t1, 0 );
	t2 = lz - (((t1-t) - dp) - hz);
	return [ t1, t2 ];
} // FUNCTION log2ax()


// EXPORTS //

module.exports = log2ax;

},{"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-set-high-word":1377,"@stdlib/math/base/utils/float64-set-low-word":1379,"@stdlib/math/constants/float64-exponent-bias":1394}],1313:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );


// VARIABLES //

// 1/LN2
var INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE

// High (24 bits): 1/LN2
var INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000

// Low: 1/LN2
var INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44

// Polynomial coefficients for `x - x^2/2 + x^3/3 - x^4/4`...
var W = [
	0.5,
	-0.3333333333333333333333,
	0.25
];


// FUNCTIONS //

// Compile a function for evaluating a polynomial based on the above coefficients...
var polyvalW = evalpoly( W );


// MAIN //

/**
* Computes \\(\operatorname{log}(x)\\) assuming \\(|1-x|\\) is small and using the approximation \\(x - x^2/2 + x^3/3 - x^4/4\\).
*
* @private
* @param {number} ax - absolute value of `x`
* @returns {NumberArray} tuple comprised of high and low parts
*
* @example
* var t = logx( 9.0 ); // => [ t1, t2 ]
* // returns [ -1265.7236328125, -0.0008163940840404393 ]
*/
function logx( ax ) {
	var t2;
	var t1;
	var t;
	var w;
	var u;
	var v;

	t = ax - 1.0; // `t` has `20` trailing zeros
	w = t * t * polyvalW( t );
	u = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits
	v = ( t*INV_LN2_LO ) - ( w*INV_LN2 );
	t1 = u + v;
	t1 = setLowWord( t1, 0 );
	t2 = v - (t1 - u);
	return [ t1, t2 ];
} // end FUNCTION logx()


// EXPORTS //

module.exports = logx;

},{"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-set-low-word":1379}],1314:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isOdd = require( '@stdlib/math/base/assert/is-odd' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );
var uint32ToInt32 = require( '@stdlib/math/base/utils/uint32-to-int32' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var xIsZero = require( './x_is_zero.js' );
var yIsHuge = require( './y_is_huge.js' );
var yIsInfinite = require( './y_is_infinite.js' );
var log2ax = require( './log2ax.js' );
var logx = require( './logx.js' );
var pow2 = require( './pow2.js' );


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff;

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_MAX_NEAR_UNITY = 0x3fefffff;

// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31
var HIGH_BIASED_EXP_31 = 0x41e00000;

// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64
var HIGH_BIASED_EXP_64 = 0x43f00000;

// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024
var HIGH_BIASED_EXP_10 = 0x40900000;

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000;

// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000
var HIGH_1075 = 0x4090cc00;

// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000
var HIGH_NEG_1075 = 0xc090cc00;

var HIGH_NUM_NONSIGN_BITS = 31;

var HUGE = 1.0e300;
var TINY = 1.0e-300;

// -(1024-log2(ovfl+.5ulp))
var OVT = 8.0085662595372944372e-17;


// MAIN //

/**
* Evaluates the exponential function.
*
* #### Method
*
* 1. Let \\(x = 2^n (1+f)\\).
*
* 2. Compute \\(\operatorname{log2}(x)\\) as
*
*   ``` tex
*   \operatorname{log2}(x) = w_1 + w_2
*   ```
*
*   where \\(w_1\\) has \\(53 - 24 = 29\\) bit trailing zeros.
*
* 3. Compute
*
*   ``` tex
*   y \cdot \operatorname{log2}(x) = n + y^\prime
*   ```
*
*   by simulating multi-precision arithmetic, where \\(|y^\prime| \leq 0.5\\).
*
* 4. Return
*
*   ``` tex
*   x^y = 2^n e^{y^\prime \cdot \mathrm{log2}}
*   ```
*
* #### Special Cases
*
* ``` tex
* \begin{align*}
* x^{\mathrm{NaN}} &= \mathrm{NaN} & \\
* (\mathrm{NaN})^y &= \mathrm{NaN} & \\
* 1^y &= 1 & \\
* x^0 &= 1 & \\
* x^1 &= x & \\
* (\pm 0)^\infty &= +0 & \\
* (\pm 0)^{-\infty} &= +\infty & \\
* (+0)^y &= +0 & \mathrm{if}\ y > 0 \\
* (+0)^y &= +\infty & \mathrm{if}\ y < 0 \\
* (-0)^y &= -\infty & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= +\infty & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= -0 & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y > 0 \\
* (-0)^y &= +0 & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y > 0 \\
* (-1)^{\pm\infty} &= \mathrm{NaN} & \\
* x^{\infty} &= +\infty & |x| > 1 \\
* x^{\infty} &= +0 & |x| < 1 \\
* x^{-\infty} &= +0 & |x| > 1 \\
* x^{-\infty} &= +\infty & |x| < 1 \\
* (-\infty)^y &= (-0)^y & \\
* \infty^y &= +0 & y < 0 \\
* \infty^y &= +\infty & y > 0 \\
* x^y &= \mathrm{NaN} & \mathrm{if}\ y\ \mathrm{is\ not\ a\ finite\ integer\ and}\ x < 0
* \end{align*}
* ```
*
*
* #### Notes
*
* - \\(\operatorname{pow}(x,y)\\) returns \\(x^y\\) nearly rounded. In particular, \\(\operatorname{pow}(<\mathrm{integer}>,<\mathrm{integer}>)\\) __always__ returns the correct integer, provided the value is representable.
* - The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.
*
*
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* @example
* var v = pow( 4.0, 0.5 );
* // returns 2.0
*
* @example
* var v = pow( 100.0, 0.0 );
* // returns 1.0
*
* @example
* var v = pow( Math.PI, 5.0 );
* // returns ~306.0197
*
* @example
* var v = pow( Math.PI, -0.2 );
* // returns ~0.7954
*
* @example
* var v = pow( NaN, 3.0 );
* // returns NaN
*
* @example
* var v = pow( 5.0, NaN );
* // returns NaN
*
* @example
* var v = pow( NaN, NaN );
* // returns NaN
*/
function pow( x, y ) {
	var ahx; // absolute value high word `x`
	var ahy; // absolute value high word `y`
	var ax;  // absolute value `x`
	var hx;  // high word `x`
	var lx;  // low word `x`
	var hy;  // high word `y`
	var ly;  // low word `y`
	var sx;  // sign `x`
	var sy;  // sign `y`
	var y1;
	var hp;
	var lp;
	var w;
	var t;
	var z;   // y prime
	var j;
	var i;
	if ( isnan( x ) || isnan( y ) ) {
		return NaN;
	}
	// Split `y` into high and low words:
	hy = getHighWord( y );
	ly = getLowWord( y );

	// Special cases `y`...
	if ( ly === 0 ) {
		if ( y === 0.0 ) {
			return 1.0;
		}
		if ( y === 1.0 ) {
			return x;
		}
		if ( y === -1.0 ) {
			return 1.0 / x;
		}
		if ( y === 0.5 ) {
			return sqrt( x );
		}
		if ( y === -0.5 ) {
			return 1.0 / sqrt( x );
		}
		if ( y === 2.0 ) {
			return x * x;
		}
		if ( y === 3.0 ) {
			return x * x * x;
		}
		if ( y === 4.0 ) {
			x *= x;
			return x * x;
		}
		if ( isInfinite( y ) ) {
			return yIsInfinite( x, y );
		}
	}
	// Split `x` into high and low words:
	hx = getHighWord( x );
	lx = getLowWord( x );

	// Special cases `x`...
	if ( lx === 0 ) {
		if ( hx === 0 ) {
			return xIsZero( x, y );
		}
		if ( x === 1.0 ) {
			return 1.0;
		}
		if (
			x === -1.0 &&
			isOdd( y )
		) {
			return -1.0;
		}
		if ( isInfinite( x ) ) {
			if ( x === NINF ) {
				// pow( 1/x, -y )
				return pow( -0.0, -y );
			}
			if ( y < 0.0 ) {
				return 0.0;
			}
			return PINF;
		}
	}
	if (
		x < 0.0 &&
		isInteger( y ) === false
	) {
		// signal NaN...
		return (x-x)/(x-x);
	}
	ax = abs( x );

	// Remove the sign bits (i.e., get absolute values):
	ahx = (hx & ABS_MASK);
	ahy = (hy & ABS_MASK);

	// Extract the sign bits:
	sx = (hx >>> HIGH_NUM_NONSIGN_BITS);
	sy = (hy >>> HIGH_NUM_NONSIGN_BITS);

	// Determine the sign of the result...
	if ( sx && isOdd( y ) ) {
		sx = -1.0;
	} else {
		sx = 1.0;
	}
	// Case 1: `|y|` is huge...

	// |y| > 2^31
	if ( ahy > HIGH_BIASED_EXP_31 ) {
		// `|y| > 2^64`, then must over- or underflow...
		if ( ahy > HIGH_BIASED_EXP_64 ) {
			return yIsHuge( x, y );
		}
		// Over- or underflow if `x` is not close to unity...

		if ( ahx < HIGH_MAX_NEAR_UNITY ) {
			// y < 0
			if ( sy === 1 ) {
				// signal overflow...
				return sx * HUGE * HUGE;
			}
			// signal underflow...
			return sx * TINY * TINY;
		}
		if ( ahx > HIGH_BIASED_EXP_0 ) {
			// y > 0
			if ( sy === 0 ) {
				// signal overflow...
				return sx * HUGE * HUGE;
			}
			// signal underflow...
			return sx * TINY * TINY;
		}
		// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.
		t = logx( ax );
	}
	// Case 2: `|y|` is not huge...
	else {
		t = log2ax( ax, ahx );
	}
	// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...
	y1 = setLowWord( y, 0 );
	lp = ( (y-y1)*t[0] ) + ( y*t[1] );
	hp = y1 * t[0];
	z = lp + hp;

	// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.
	w = toWords( z );
	j = uint32ToInt32( w[0] );
	i = uint32ToInt32( w[1] );

	// z >= 1024
	if ( j >= HIGH_BIASED_EXP_10 ) {
		// z > 1024
		if ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {
			// signal overflow...
			return sx * HUGE * HUGE;
		}
		else if ( (lp+OVT) > (z-hp) ) {
			// signal overflow...
			return sx * HUGE * HUGE;
		}
	}
	// z <= -1075
	else if ( (j&ABS_MASK) >= HIGH_1075 ) {
		// z < -1075
		if ( ((j-HIGH_NEG_1075)|i) !== 0 ) {
			// signal underflow...
			return sx * TINY * TINY;
		}
		else if ( lp <= (z-hp) ) {
			// signal underflow...
			return sx * TINY * TINY;
		}
	}
	// Compute `2^(hp+lp)`...
	z = pow2( j, hp, lp );

	return sx * z;
} // end FUNCTION pow()


// EXPORTS //

module.exports = pow;

},{"./log2ax.js":1312,"./logx.js":1313,"./pow2.js":1315,"./x_is_zero.js":1316,"./y_is_huge.js":1317,"./y_is_infinite.js":1318,"@stdlib/math/base/assert/is-infinite":39,"@stdlib/math/base/assert/is-integer":41,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/assert/is-odd":51,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/sqrt":1343,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-get-low-word":1372,"@stdlib/math/base/utils/float64-set-low-word":1379,"@stdlib/math/base/utils/float64-to-words":1384,"@stdlib/math/base/utils/uint32-to-int32":1387,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1315:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );
var uint32ToInt32 = require( '@stdlib/math/base/utils/uint32-to-int32' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var LN2 = require( '@stdlib/math/constants/float64-ln-two' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff;

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff;

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000;

// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_BIASED_EXP_NEG_1 = 0x3fe00000;

// TODO: consider making into an external constant
var HIGH_NUM_SIGNIFICAND_BITS = 20;

// High: LN2
var LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000

// Low: LN2
var LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39

// Polynomial coefficients...
var P = [
	1.66666666666666019037e-01,  // 0x3FC55555, 0x5555553E
	-2.77777777770155933842e-03, // 0xBF66C16C, 0x16BEBD93
	6.61375632143793436117e-05,  // 0x3F11566A, 0xAF25DE2C
	-1.65339022054652515390e-06, // 0xBEBBBD41, 0xC5D26BF1
	4.13813679705723846039e-08   // 0x3E663769, 0x72BEA4D0
];


// FUNCTIONS //

// Compile a function for evaluating a polynomial based on the above coefficients...
var polyvalP = evalpoly( P );


// MAIN //

/**
* Computes \\(2^{\mathrm{hp} + \mathrm{lp}\\).
*
* @private
* @param {number} j - high word of `hp + lp`
* @param {number} hp - first power summand
* @param {number} lp - second power summand
* @returns {number} function value
*
* @example
* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );
* // returns 0.012345679012345678
*/
function pow2( j, hp, lp ) {
	var tmp;
	var t1;
	var t;
	var r;
	var u;
	var v;
	var w;
	var z;
	var n;
	var i;
	var k;

	i = (j & ABS_MASK);
	k = (i>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS;
	n = 0;

	// `|z| > 0.5`, set `n = z+0.5`
	if ( i > HIGH_BIASED_EXP_NEG_1 ) {
		n = j + (HIGH_MIN_NORMAL_EXP>>(k+1));
		k = ((n & ABS_MASK)>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS; // new k for n
		tmp = ((n & ~(HIGH_SIGNIFICAND_MASK >> k)));
		t = setHighWord( 0.0, tmp );
		n = ((n & HIGH_SIGNIFICAND_MASK)|HIGH_MIN_NORMAL_EXP) >>
			(HIGH_NUM_SIGNIFICAND_BITS-k);
		if ( j < 0 ) {
			n = -n;
		}
		hp -= t;
	}
	t = lp + hp;
	t = setLowWord( t, 0 );
	u = t * LN2_HI;
	v = ( (lp - (t-hp))*LN2 ) + ( t*LN2_LO );
	z = u + v;
	w = v - (z - u);
	t = z * z;
	t1 = z - ( t*polyvalP( t ) );
	r = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );
	z = 1.0 - (r - z);
	j = getHighWord( z );
	j = uint32ToInt32( j );
	j += (n << HIGH_NUM_SIGNIFICAND_BITS);

	// Check for subnormal output...
	if ( (j>>HIGH_NUM_SIGNIFICAND_BITS) <= 0 ) {
		z = ldexp( z, n );
	} else {
		z = setHighWord( z, j );
	}
	return z;
} // end FUNCTION pow2()


// EXPORTS //

module.exports = pow2;

},{"@stdlib/math/base/special/ldexp":1298,"@stdlib/math/base/tools/evalpoly":1356,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-set-high-word":1377,"@stdlib/math/base/utils/float64-set-low-word":1379,"@stdlib/math/base/utils/uint32-to-int32":1387,"@stdlib/math/constants/float64-exponent-bias":1394,"@stdlib/math/constants/float64-ln-two":1403}],1316:[function(require,module,exports){
'use strict';

// MODULES //

var isOdd = require( '@stdlib/math/base/assert/is-odd' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the exponential function when  \\(|x| = 0\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = pow( -0.0, -9 );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = pow( 0.0, -9 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = pow( -0.0, 9 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = pow( 0.0, Number.NEGATIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = pow( 0.0, Number.POSITIVE_INFINITY );
* // returns 0.0
*/
function pow( x, y ) {
	if ( y === NINF ) {
		return PINF;
	}
	if ( y === PINF ) {
		return 0.0;
	}
	if ( y > 0.0 ) {
		if ( isOdd( y ) ) {
			return x; // handles +-0
		}
		return 0.0;
	}
	// y < 0.0
	if ( isOdd( y ) ) {
		return copysign( PINF, x ); // handles +-0
	}
	return PINF;
} // end FUNCTION pow()


// EXPORTS //

module.exports = pow;

},{"@stdlib/math/base/assert/is-odd":51,"@stdlib/math/base/special/copysign":1234,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1317:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff;

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_MAX_NEAR_UNITY = 0x3fefffff;

var HUGE = 1.0e300;
var TINY = 1.0e-300;


// MAIN //

/**
* Evaluates the exponential function when \\(|y| > 2^64\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} overflow or underflow result
*
* @example
* var v = pow( 9.0, 3.6893488147419103e19 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = pow( -3.14, -3.6893488147419103e19 );
* // returns 0.0
*/
function pow( x, y ) {
	var ahx;
	var hx;

	hx = getHighWord( x );
	ahx = (hx & ABS_MASK);

	if ( ahx <= HIGH_MAX_NEAR_UNITY ) {
		if ( y < 0 ) {
			// signal overflow...
			return HUGE * HUGE;
		}
		// signal underflow...
		return TINY * TINY;
	}
	// `x` has a biased exponent greater than or equal to `0`...

	if ( y > 0 ) {
		// signal overflow...
		return HUGE * HUGE;
	}
	// signal underflow...
	return TINY * TINY;
} // end FUNCTION pow()


// EXPORTS //

module.exports = pow;

},{"@stdlib/math/base/utils/float64-get-high-word":1370}],1318:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// MAIN //

/**
* Evaluates the exponential function when \\( y = \pm \infty\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( -1.0, Number.POSITIVE_INFINITY );
* // returns NaN
*
* @example
* var v = pow( -1.0, Number.NEGATIVE_INFINITY );
* // returns NaN
*
* @example
* var v = pow( 1.0, Number.POSITIVE_INFINITY );
* // returns 1.0
*
* @example
* var v = pow( 1.0, Number.NEGATIVE_INFINITY );
* // returns 1.0
*
* @example
* var v = pow( 0.5, Number.POSITIVE_INFINITY );
* // returns 0.0
*
* @example
* var v = pow( 0.5, Number.NEGATIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = pow( 1.5, Number.NEGATIVE_INFINITY );
* // returns 0.0
*
* @example
* var v = pow( 1.5, Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*/
function pow( x, y ) {
	if ( x === -1.0 ) {
		// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.
		return (x-x)/(x-x); // signal NaN
	}
	if ( x === 1.0 ) {
		return 1.0;
	}
	// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)
	if ( (abs(x) < 1.0) === (y === PINF) ) {
		return 0.0;
	}
	// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)
	return PINF;
} // end FUNCTION pow()


// EXPORTS //

module.exports = pow;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/constants/float64-pinf":1414}],1319:[function(require,module,exports){
'use strict';

/**
* Evaluate `bˣ - 1`.
*
* @module @stdlib/math/base/special/powm1
*
* @example
* var powm1 = require( '@stdlib/math/base/special/powm1' );
*
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* y = powm1( Math.PI, 5.0 );
* // returns ~305.0197
*
* y = powm1( NaN, 3.0 );
* // returns NaN
*
* y = powm1( 5.0, NaN );
* // returns NaN
*/

// MODULES //

var powm1 = require( './powm1.js' );


// EXPORTS //

module.exports = powm1;

},{"./powm1.js":1320}],1320:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var trunc = require( '@stdlib/math/base/special/trunc' );


// MAIN //

/**
* Evaluates `bˣ - 1`.
*
* @param {number} b - base
* @param {number} x - exponent
* @returns {number} function value
*
* @example
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* @example
* var y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* @example
* var y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* @example
* var y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( Math.PI, 5.0 );
* // returns ~305.0197
*
* @example
* var y = powm1( NaN, 3.0 );
* // returns NaN
*
* @example
* var y = powm1( 5.0, NaN );
* // returns NaN
*/
function powm1( b, x ) {
	var y;
	if (
		isnan( b ) ||
		isnan( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0
		return 0.0;
	}
	if ( b === 0.0 ) {
		// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1
		return -1.0;
	}
	if ( b < 0.0 && x%2.0 === 0 ) {
		// If `x` is even, recognize that `(-b)**x == (b)**x`...
		b = -b;
	}
	if ( b > 0.0 ) {
		if (
			abs( x*(b-1.0) ) < 0.5 ||
			abs( x ) < 0.2
		) {
			// No good/quick approximation for ln(b)*x, so we have to evaluate...
			y = ln( b ) * x;
			if ( y < 0.5 ) {
				return expm1( y );
			}
		}
	} else if ( trunc( x ) !== x ) {
		// Exponentiation would yield a complex result...
		return NaN;
	}
	return pow( b, x ) - 1.0;
} // end FUNCTION powm1()


// EXPORTS //

module.exports = powm1;

},{"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/expm1":1259,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/trunc":1349}],1321:[function(require,module,exports){
module.exports=[1.00000000000000000000000000000000000000000,
0.166666666666666666666666666666666666666667,
-0.0333333333333333333333333333333333333333333,
0.0238095238095238095238095238095238095238095,
-0.0333333333333333333333333333333333333333333,
0.0757575757575757575757575757575757575757576,
-0.253113553113553113553113553113553113553114,
1.16666666666666666666666666666666666666667,
-7.09215686274509803921568627450980392156863,
54.9711779448621553884711779448621553884712,
-529.124242424242424242424242424242424242424,
6192.12318840579710144927536231884057971014,
-86580.2531135531135531135531135531135531136,
1.42551716666666666666666666666666666666667e6,
-2.72982310678160919540229885057471264367816e7,
6.01580873900642368384303868174835916771401e8,
-1.51163157670921568627450980392156862745098e10,
4.29614643061166666666666666666666666666667e11,
-1.37116552050883327721590879485616327721591e13,
4.88332318973593166666666666666666666666667e14,
-1.92965793419400681486326681448632668144863e16,
8.41693047573682615000553709856035437430786e17,
-4.03380718540594554130768115942028985507246e19,
2.11507486380819916056014539007092198581560e21,
-1.20866265222965259346027311937082525317819e23,
7.50086674607696436685572007575757575757576e24,
-5.03877810148106891413789303052201257861635e26,
3.65287764848181233351104308429711779448622e28,
-2.84987693024508822262691464329106781609195e30,
2.38654274996836276446459819192192149717514e32,
-2.13999492572253336658107447651910973926742e34,
2.05009757234780975699217330956723102516667e36,
-2.09380059113463784090951852900279701847092e38,
2.27526964884635155596492603527692645814700e40,
-2.62577102862395760473030497361582020814490e42,
3.21250821027180325182047923042649852435219e44,
-4.15982781667947109139170744952623589366896e46,
5.69206954820352800238834562191210586444805e48,
-8.21836294197845756922906534686173330145509e50,
1.25029043271669930167323398297028955241772e53,
-2.00155832332483702749253291988132987687242e55,
3.36749829153643742333966769033387530162196e57,
-5.94709705031354477186604968440515408405791e59,
1.10119103236279775595641307904376916046305e62,
-2.13552595452535011886583850190410656789733e64,
4.33288969866411924196166130593792062184514e66,
-9.18855282416693282262005552155018971389604e68,
2.03468967763290744934550279902200200659751e71,
-4.70038339580357310785752555350060606545967e73,
1.13180434454842492706751862577339342678904e76,
-2.83822495706937069592641563364817647382847e78,
7.40642489796788506297508271409209841768797e80,
-2.00964548027566044834656196727153631868673e83,
5.66571700508059414457193460305193569614195e85,
-1.65845111541362169158237133743199123014950e88,
5.03688599504923774192894219151801548124424e90,
-1.58614682376581863693634015729664387827410e93,
5.17567436175456269840732406825071225612408e95,
-1.74889218402171173396900258776181591451415e98,
6.11605199949521852558245252642641677807677e100,
-2.21227769127078349422883234567129324455732e103,
8.27227767987709698542210624599845957312047e105,
-3.19589251114157095835916343691808148735263e108,
1.27500822233877929823100243029266798669572e111,
-5.25009230867741338994028246245651754469199e113,
2.23018178942416252098692981988387281437383e116,
-9.76845219309552044386335133989802393011669e118,
4.40983619784529542722726228748131691918758e121,
-2.05085708864640888397293377275830154864566e124,
9.82144332797912771075729696020975210414919e126,
-4.84126007982088805087891967099634127611305e129,
2.45530888014809826097834674040886903996737e132,
-1.28069268040847475487825132786017857218118e135,
6.86761671046685811921018885984644004360924e137,
-3.78464685819691046949789954163795568144895e140,
2.14261012506652915508713231351482720966602e143,
-1.24567271371836950070196429616376072194583e146,
7.43457875510001525436796683940520613117807e148,
-4.55357953046417048940633332233212748767721e151,
2.86121128168588683453638472510172325229190e154,
-1.84377235520338697276882026536287854875414e157,
1.21811545362210466995013165065995213558174e160,
-8.24821871853141215484818457296893447301419e162,
5.72258779378329433296516498142978615918685e165,
-4.06685305250591047267679693831158655602196e168,
2.95960920646420500628752695815851870426379e171,
-2.20495225651894575090311752273445984836379e174,
1.68125970728895998058311525151360665754464e177,
-1.31167362135569576486452806355817153004431e180,
1.04678940094780380821832853929823089643829e183,
-8.54328935788337077185982546299082774593270e185,
7.12878213224865423522884066771438224721245e188,
-6.08029314555358993000847118686477458461988e191,
5.29967764248499239300942910043247266228490e194,
-4.71942591687458626443646229013379911103761e197,
4.29284137914029810894168296541074669045521e200,
-3.98767449682322074434477655542938795106651e203,
3.78197804193588827138944181161393327898220e206,
-3.66142336836811912436858082151197348755196e209,
3.61760902723728623488554609298914089477541e212,
-3.64707726451913543621383088655499449048682e215,
3.75087554364544090983452410104814189306842e218,
-3.93458672964390282694891288533713429355657e221,
4.20882111481900820046571171111494898242731e224,
-4.59022962206179186559802940573325591059371e227,
5.10317257726295759279198185106496768539760e230,
-5.78227623036569554015377271242917142512200e233,
6.67624821678358810322637794412809363451080e236,
-7.85353076444504163225916259639312444428230e239,
9.41068940670587255245443288258762485293948e242,
-1.14849338734651839938498599206805592548354e246,
1.42729587428487856771416320087122499897180e249,
-1.80595595869093090142285728117654560926719e252,
2.32615353076608052161297985184708876161736e255,
-3.04957517154995947681942819261542593785327e258,
4.06858060764339734424012124124937318633684e261,
-5.52310313219743616252320044093186392324280e264,
7.62772793964343924869949690204961215533859e267,
-1.07155711196978863132793524001065396932667e271,
1.53102008959691884453440916153355334355847e274,
-2.22448916821798346676602348865048510824835e277,
3.28626791906901391668189736436895275365183e280,
-4.93559289559603449020711938191575963496999e283,
7.53495712008325067212266049779283956727824e286,
-1.16914851545841777278088924731655041783900e290,
1.84352614678389394126646201597702232396492e293,
-2.95368261729680829728014917350525183485207e296,
4.80793212775015697668878704043264072227967e299,
-7.95021250458852528538243631671158693036798e302,
1.33527841873546338750122832017820518292039e306]

},{}],1322:[function(require,module,exports){
module.exports=[
	-0.5,
	1.644934066848226436472415166646025189218949901206798437735,
	1.082323233711138191516003696541167902774750951918726907682,
	1.017343061984449139714517929790920527901817490032853561842,
	1.004077356197944339378685238508652465258960790649850020329,
	1.000994575127818085337145958900319017006019531564477517257,
	1.000246086553308048298637998047739670960416088458003404533,
	1.000061248135058704829258545105135333747481696169154549482,
	1.000015282259408651871732571487636722023237388990471531153,
	1.000003817293264999839856461644621939730454697218953331143,
	1.000000953962033872796113152038683449345943794187410595750,
	1.000000238450502727732990003648186752994935041821779658269,
	1.000000059608189051259479612440207935801227503918837302795,
	1.000000014901554828365041234658506630698628864788167885910,
	1.000000003725334024788457054819204018402423232893059295811,
	1.000000000931327432419668182871764735021219813567955136816,
	1.000000000232831183367650549200145597594049502482982284530,
	1.000000000058207720879027008892436859891063054173122604617,
	1.000000000014551921891041984235929632245318420983808894124,
	1.000000000003637979547378651190237236355873273512646028384,
	1.000000000000909494784026388928253311838694908753860000990,
	1.000000000000227373684582465251522682157797869121382982198,
	1.000000000000056843419876275856092771829675240685530571588,
	1.000000000000014210854828031606769834307141739537678698605,
	1.000000000000003552713691337113673298469534059342992145655,
	1.000000000000000888178421093081590309609138639138632560887,
	1.000000000000000222044605079804198399932009420465396423665,
	1.000000000000000055511151248454812437237365905094302816723
]

},{}],1323:[function(require,module,exports){
'use strict';

/**
* Evaluate the Riemann zeta function.
*
* @module @stdlib/math/base/special/riemann-zeta
*
* @example
* var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
*
* var v = zeta( 1.1 );
* // returns ~10.584
*
* v = zeta( -4.0 );
* // returns 0.0
*
* v = zeta( 70.0 );
* // returns 1.0
*
* v = zeta( 0.5 );
* // returns ~-1.46
*
* v = zeta( 1.0 ); // pole
* // returns NaN
*
* v = zeta( NaN );
* // returns NaN
*/

// MODULES //

var zeta = require( './zeta.js' );


// EXPORTS //

module.exports = zeta;

},{"./zeta.js":1325}],1324:[function(require,module,exports){
module.exports=[
	1.202056903159594285399738161511449990764986292340498881792,
	1.036927755143369926331365486457034168057080919501912811974,
	1.008349277381922826839797549849796759599863560565238706417,
	1.002008392826082214417852769232412060485605851394888756548,
	1.000494188604119464558702282526469936468606435758208617119,
	1.000122713347578489146751836526357395714275105895509845136,
	1.000030588236307020493551728510645062587627948706858177506,
	1.000007637197637899762273600293563029213088249090262679095,
	1.000001908212716553938925656957795101353258571144838630235,
	1.000000476932986787806463116719604373045966446694784937600,
	1.000000119219925965311073067788718882326387254997784519858,
	1.000000029803503514652280186063705069366011844730919543312,
	1.000000007450711789835429491981004170604119454719031882565,
	1.000000001862659723513049006403909945416948061665330469200,
	1.000000000465662906503378407298923325122007106269185336947,
	1.000000000116415501727005197759297383545630951652247172763,
	1.000000000029103850444970996869294252278840464106981987433,
	1.000000000007275959835057481014520869012338059264850925555,
	1.000000000001818989650307065947584832100730085030589309618,
	1.000000000000454747378304215402679911202948857033904529911,
	1.000000000000113686840768022784934910483802590643743590284,
	1.000000000000028421709768893018554550737049426620743688265,
	1.000000000000007105427395210852712877354479956800022742043,
	1.000000000000001776356843579120327473349014400279570155508,
	1.000000000000000444089210314381336419777094026812133645960,
	1.000000000000000111022302514106613372054456992138270248322,
	1.000000000000000027755575621361241725816324538540697689849,
	1.000000000000000006938893904544153697446085326249809274836,
	1.000000000000000001734723476047576572048972969937595907478,
	1.000000000000000000433680869002065048749702356590624136125,
	1.000000000000000000108420217249424140630127111654613825894,
	1.000000000000000000027105054312234688319546213119497764319,
	1.000000000000000000006776263578045189097995298741556686206,
	1.000000000000000000001694065894509799165406492747124861940,
	1.000000000000000000000423516473627283334786227048335793441,
	1.000000000000000000000105879118406802338522650015392383985,
	1.000000000000000000000026469779601698529611341166842038716,
	1.000000000000000000000006617444900424404067355245332308220,
	1.000000000000000000000001654361225106075646229923677181049,
	1.000000000000000000000000413590306276516092600938245550814,
	1.000000000000000000000000103397576569128709932840955917459,
	1.000000000000000000000000025849394142282142681277617708450,
	1.000000000000000000000000006462348535570531803438002161122,
	1.000000000000000000000000001615587133892632521206011405705,
	1.000000000000000000000000000403896783473158082562226281299,
	1.000000000000000000000000000100974195868289515336192507001,
	1.000000000000000000000000000025243548967072378244674341938,
	1.000000000000000000000000000006310887241768094495682609394,
	1.000000000000000000000000000001577721810442023616644432783,
	1.000000000000000000000000000000394430452610505903352639355,
	1.000000000000000000000000000000098607613152626475748329968,
	1.000000000000000000000000000000024651903288156618927101395,
	1.000000000000000000000000000000006162975822039154730666338,
	1.000000000000000000000000000000001540743955509788682543361,
	1.000000000000000000000000000000000385185988877447170622149,
	1.000000000000000000000000000000000096296497219361792654016
]

},{}],1325:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/zeta.hpp}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var floor = require( '@stdlib/math/base/special/floor' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );
var SQRT_EPSILON = require( '@stdlib/math/constants/float64-sqrt-eps' );
var LN_SQRT_TWO_PI = require( '@stdlib/math/constants/float64-ln-sqrt-two-pi' );
var ODD_POSITIVE_INTEGERS = require( './odd_positive_integers.json' );
var EVEN_NONNEGATIVE_INTEGERS = require( './even_nonnegative_integers.json' );
var BERNOULLI = require( './bernoulli.json' );


// VARIABLES //

var MAX_BERNOULLI_2N = 129;
var MAX_FACTORIAL = 170; // TODO: consider making external constant
var MAX_LN = 709; // TODO: consider making external constant

// Polynomial coefficients...
var Y1 = 1.2433929443359375;
var P1 = [
	0.24339294433593750202,
	-0.49092470516353571651,
	0.0557616214776046784287,
	-0.00320912498879085894856,
	0.000451534528645796438704,
	-0.933241270357061460782e-5
];
var Q1 = [
	1.0,
	-0.279960334310344432495,
	0.0419676223309986037706,
	-0.00413421406552171059003,
	0.00024978985622317935355,
	-0.101855788418564031874e-4
];
var P2 = [
	0.577215664901532860516,
	0.243210646940107164097,
	0.0417364673988216497593,
	0.00390252087072843288378,
	0.000249606367151877175456,
	0.110108440976732897969e-4
];
var Q2 = [
	1.0,
	0.295201277126631761737,
	0.043460910607305495864,
	0.00434930582085826330659,
	0.000255784226140488490982,
	0.10991819782396112081e-4
];
var Y3 = 0.6986598968505859375;
var P3 = [
	-0.0537258300023595030676,
	0.0445163473292365591906,
	0.0128677673534519952905,
	0.00097541770457391752726,
	0.769875101573654070925e-4,
	0.328032510000383084155e-5,
	0.0
];
var Q3 = [
	1.0,
	0.33383194553034051422,
	0.0487798431291407621462,
	0.00479039708573558490716,
	0.000270776703956336357707,
	0.106951867532057341359e-4,
	0.236276623974978646399e-7
];
var P4 = [
	-2.49710190602259410021,
	-2.60013301809475665334,
	-0.939260435377109939261,
	-0.138448617995741530935,
	-0.00701721240549802377623,
	-0.229257310594893932383e-4,
	0.0,
	0.0,
	0.0
];
var Q4 = [
	1.0,
	0.706039025937745133628,
	0.15739599649558626358,
	0.0106117950976845084417,
	-0.36910273311764618902e-4,
	0.493409563927590008943e-5,
	-0.234055487025287216506e-6,
	0.718833729365459760664e-8,
	-0.1129200113474947419e-9
];
var P5 = [
	-4.78558028495135619286,
	-1.89197364881972536382,
	-0.211407134874412820099,
	-0.000189204758260076688518,
	0.00115140923889178742086,
	0.639949204213164496988e-4,
	0.139348932445324888343e-5,
	0.0,
	0.0
];
var Q5 = [
	1.0,
	0.244345337378188557777,
	0.00873370754492288653669,
	-0.00117592765334434471562,
	-0.743743682899933180415e-4,
	-0.21750464515767984778e-5,
	0.471001264003076486547e-8,
	-0.833378440625385520576e-10,
	0.699841545204845636531e-12
];
var P6 = [
	-10.3948950573308896825,
	-2.85827219671106697179,
	-0.347728266539245787271,
	-0.0251156064655346341766,
	-0.00119459173416968685689,
	-0.382529323507967522614e-4,
	-0.785523633796723466968e-6,
	-0.821465709095465524192e-8
];
var Q6 = [
	1.0,
	0.208196333572671890965,
	0.0195687657317205033485,
	0.00111079638102485921877,
	0.408507746266039256231e-4,
	0.955561123065693483991e-6,
	0.118507153474022900583e-7,
	0.222609483627352615142e-14
];


// FUNCTIONS //

// Compile functions to evaluate polynomials based on the above coefficients...
var rateval1 = evalrational( P1, Q1 );
var rateval2 = evalrational( P2, Q2 );
var rateval3 = evalrational( P3, Q3 );
var rateval4 = evalrational( P4, Q4 );
var rateval5 = evalrational( P5, Q5 );
var rateval6 = evalrational( P6, Q6 );


// MAIN //

/**
* Evaluates the Riemann zeta function.
*
* #### Method
*
* 1. First, we use the reflection formula
*
*   ``` tex
*   \zeta(1-s) = 2 \sin\biggl(\frac{\pi(1-s)}{2}\biggr)(2\pi^{-s})\Gamma(s)\zeta(s)
*   ```
*
*   to make \\(s\\) positive.
*
* 2. For \\(s \in (0,1)\\), we use the approximation
*
*   ``` tex
*   \zeta(s) = \frac{C + \operatorname{R}(1-s) - s}{1-s}
*   ```
*
*   with rational approximation \\(\operatorname{R}(1-z)\\) and constant \\(C\\).
*
* 3. For \\(s \in (1,4)\\), we use the approximation
*
*   ``` tex
*   \zeta(s) = C + \operatorname{R}(s-n) + \frac{1}{s-1}
*   ```
*
*   with rational approximation \\(\operatorname{R}(z-n)\\), constant \\(C\\), and integer \\(n\\).
*
* 4. For \\(s > 4\\), we use the approximation
*
*   ``` tex
*   \zeta(s) = 1 + e^{\operatorname{R}(z-n)}
*   ```
*
*   with rational approximation \\(\operatorname{R}(z-n)\\) and integer \\(n\\).
*
* 5. For negative odd integers, we use the closed form
*
*   ``` tex
*   \zeta(-n) = \frac{(-1)^n}{n+1} B_{n+1}
*   ```
*
*   where \\(B_{n+1}\\) is a Bernoulli number.
*
* 6. For negative even integers, we use the closed form
*
*   ``` tex
*   \zeta(-2n) = 0
*   ```
*
* 7. For nonnegative even integers, we could use the closed form
*
*   ``` tex
*   \zeta(2n) = \frac{(-1)^{n-1}2^{2n-1}\pi^{2n}}{(2n)!} B_{2n}
*   ```
*
*   where \\(B_{2n}\\) is a Bernoulli number. However, to speed computation, we use precomputed values (Wolfram Alpha).
*
* 8. For positive negative integers, we use precomputed values (Wolfram Alpha), as these values are useful for certain infinite series calculations.
*
*
* #### Notes
*
* * \\([\approx 1.5\mbox{e-}8, 1)\\)
*    - max deviation: \\(2.020\mbox{e-}18\\)
*    - expected error: \\(-2.020\mbox{e-}18\\)
*    - max error found (double): \\(3.994987\mbox{e-}17\\)
* * \\([1,2]\\)
*    - max deviation: \\(9.007\mbox{e-}20\\)
*    - expected error: \\(9.007\mbox{e-}20\\)
* * \\((2,4]\\)
*    - max deviation: \\(5.946\mbox{e-}22\\)
*    - expected error: \\(-5.946\mbox{e-}22\\)
* * \\((4,7]\\)
*    - max deviation: \\(2.955\mbox{e-}17\\)
*    - expected error: \\(2.955\mbox{e-}17\\)
*    - max error found (double): \\(2.009135\mbox{e-}16\\)
* * \\((7,15)\\)
*    - max deviation: \\(7.117\mbox{e-}16\\)
*    - expected error: \\(7.117\mbox{e-}16\\)
*    - max error found (double): \\(9.387771\mbox{e-}16\\)
* * \\([15,36)\\)
*    - max error (in interpolated form): \\(1.668\mbox{e-}17\\)
*    - max error found (long double): \\(1.669714\mbox{e-}17\\)
*
*
* @param {number} s - input value
* @returns {number} function value
*
* @example
* var v = zeta( 1.1 );
* // returns ~10.584
*
* @example
* var v = zeta( -4.0 );
* // returns 0.0
*
* @example
* var v = zeta( 70.0 );
* // returns 1.0
*
* @example
* var v = zeta( 0.5 );
* // returns ~-1.46
*
* @example
* var v = zeta( 1.0 ); // pole
* // returns NaN
*
* @example
* var v = zeta( NaN );
* // returns NaN
*/
function zeta( s ) {
	var tmp;
	var sc;
	var as;
	var is;
	var r;
	var n;

	// Check for `NaN`:
	if ( isnan( s ) ) {
		return NaN;
	}
	// Check for a pole:
	if ( s === 1.0 ) {
		return NaN;
	}
	// Check for large value:
	if ( s >= 56.0 ) {
		return 1.0;
	}
	// Check for a closed form (integers):
	if ( isInteger( s ) ) {
		// Cast `s` to a 32-bit signed integer:
		is = s|0; // asm type annotation

		// Check that `s` does not exceed MAX_INT32:
		if ( is === s ) {
			if ( is < 0 ) {
				as = (-is)|0; // asm type annotation

				// Check if even negative integer:
				if ( (as&1) === 0 ) {
					return 0.0;
				}
				n = ( (as+1) / 2 )|0; // asm type annotation

				// Check if less than max Bernoulli number:
				if ( n <= MAX_BERNOULLI_2N ) {
					return -BERNOULLI[ n ] / (as+1.0);
				}
				// fall through...
			}
			// Check if even nonnegative integer:
			else if ( (is&1) === 0 ) {
				return EVEN_NONNEGATIVE_INTEGERS[ is/2 ];
			}
			// Must be a odd positive integer:
			else {
				return ODD_POSITIVE_INTEGERS[ (is-3)/2 ];
			}
		}
		// fall through...
	}
	if ( abs(s) < SQRT_EPSILON ) {
		return -0.5 - (LN_SQRT_TWO_PI * s);
	}
	sc = 1.0 - s;
	if ( s < 0.0 ) {
		// Check if even negative integer:
		if ( floor(s/2.0) === s/2.0 ) {
			return 0.0;
		}
		// Swap `s` and `sc`:
		tmp = s;
		s = sc;
		sc = tmp;

		// Determine if computation will overflow:
		if ( s > MAX_FACTORIAL ) {
			tmp = sinpi( 0.5*sc ) * 2.0 * zeta( s );
			r = gammaln( s );
			r -= s * ln( TWO_PI );
			if ( r > MAX_LN ) {
				return ( tmp < 0.0 ) ? NINF : PINF;
			}
			return tmp * exp( r );
		}
		return sinpi( 0.5*sc ) * 2.0 * pow( TWO_PI, -s ) *
			gamma( s ) * zeta( s );
	}
	if ( s < 1.0 ) {
		tmp = rateval1( sc );
		tmp -= Y1;
		tmp += sc;
		tmp /= sc;
		return tmp;
	}
	if ( s <= 2.0 ) {
		sc = -sc;
		tmp = 1.0 / sc;
		return tmp + rateval2( sc );
	}
	if ( s <= 4.0 ) {
		tmp = Y3 + ( 1.0 / (-sc) );
		return tmp + rateval3( s-2.0 );
	}
	if ( s <= 7.0 ) {
		tmp = rateval4( s-4.0 );
		return 1.0 + exp( tmp );
	}
	if ( s < 15.0 ) {
		tmp = rateval5( s-7.0 );
		return 1.0 + exp( tmp );
	}
	if ( s < 36.0 ) {
		tmp = rateval6( s-15.0 );
		return 1.0 + exp( tmp );
	}
	// s < 56
	return 1.0 + pow( 2.0, -s );
} // end FUNCTION zeta()


// EXPORTS //

module.exports = zeta;

},{"./bernoulli.json":1321,"./even_nonnegative_integers.json":1322,"./odd_positive_integers.json":1324,"@stdlib/math/base/assert/is-integer":41,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/gamma":1268,"@stdlib/math/base/special/gammaln":1297,"@stdlib/math/base/special/ln":1300,"@stdlib/math/base/special/pow":1311,"@stdlib/math/base/special/sinpi":1341,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-ln-sqrt-two-pi":1401,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414,"@stdlib/math/constants/float64-sqrt-eps":1416,"@stdlib/math/constants/float64-two-pi":1422}],1326:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":1327}],1327:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],1328:[function(require,module,exports){
'use strict';

/**
* Evaluate the signum function.
*
* @module @stdlib/math/base/special/signum
*
* @example
* var signum = require( '@stdlib/math/base/special/signum' );
*
* var sign = signum( -5.0 );
* // returns -1.0
*
* sign = signum( 5.0 );
* // returns 1.0
*
* sign = signum( -0.0 );
* // returns -0.0
*
* sign = signum( 0.0 );
* // returns 0.0
*
* sign = signum( NaN );
* // returns NaN
*/

// MODULES //

var signum = require( './signum.js' );


// EXPORTS //

module.exports = signum;

},{"./signum.js":1329}],1329:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the signum function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var sign = signum( -5.0 );
* // returns -1.0
*
* @example
* var sign = signum( 5.0 );
* // returns 1.0
*
* @example
* var sign = signum( -0.0 );
* // returns -0.0
*
* @example
* var sign = signum( 0.0 );
* // returns 0.0
*
* @example
* var sign = signum( NaN );
* // returns NaN
*/
function signum( x ) {
	if ( x === 0.0 || isnan( x ) ) {
		return x; // addresses both +-0
	}
	return ( x < 0.0 ) ? -1.0 : 1.0;
} // end FUNCTION signum()


// EXPORTS //

module.exports = signum;

},{"@stdlib/math/base/assert/is-nan":43}],1330:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

// MODULES //

var sin = require( './sin.js' );


// EXPORTS //

module.exports = sin;

},{"./sin.js":1336}],1331:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var C1 = 4.16666666666666019037e-02;  // 0x3FA55555, 0x5555554C
var C2 = -1.38888888888741095749e-03; // 0xBF56C16C, 0x16C15177
var C3 = 2.48015872894767294178e-05;  // 0x3EFA01A0, 0x19CB1590
var C4 = -2.75573143513906633035e-07; // 0xBE927E4F, 0x809C52AD
var C5 = 2.08757232129817482790e-09;  // 0x3E21EE9E, 0xBDB4B1C4
var C6 = -1.13596475577881948265e-11; // 0xBDA8FAE9, 0xBE8838D4


// MAIN //

/**
* Computes the cosine on \\( [-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* * Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
* * If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
* * \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( [0,\pi/4] \\).
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*   ```
*
*   where the Remez error is
*
*   ``` tex
*   \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*   ```
*
* * Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*   ```
*
*   Since
*
*   ``` tex
*   \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*   ```

*   a correction term is necessary in \\( \cos(x) \\). Hence,
*
*   ``` tex
*   \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*   ```
*
*   For better accuracy, rearrange to
*
*   ``` tex
*   \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*   ```
*
*   where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @private
* @param {number} x - input value (assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine (in radians)
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;
	z = x * x;
	w = z * z;
	r = z * (C1 + (z * (C2 + (z*C3))));
	r += w * w * (C4 + (z * (C5 + (z*C6))));
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
} // end FUNCTION kernelCos()


// EXPORTS //

module.exports = kernelCos;

},{}],1332:[function(require,module,exports){
/* eslint-disable no-plusplus */
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

// Initial value for `jk`:
var INIT_JK = [ 3, 4, 4, 6 ];

/*
* Table of constants for `2/pi` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (24*i)-th to (24*i+23)-th bit of `2/pi` after binary point. The corresponding floating value is
*
* ``` text
* ipio2[i] * 2^(-24(i+1))
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (e0 <= 16360, jk = 6), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `pi/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
} // end FUNCTION zero()

/**
* Performs the computation for `kernelRemPio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {Array<number>} y - output result in an array of double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/pi`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @param {PositiveInteger} prec - precision in bits (can be 24 (single), 53 (double), 64 (extended), 113 (quad))
* @returns {number} last three digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f, prec ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++, j-- ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) {
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			default:
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// k = number of terms needed
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f, prec );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	switch ( prec ) {
	case 0:
		fw = 0.0;
		for ( i = jz; i >= 0; i-- ) {
			fw += FQ[ i ];
		}
		if ( ih === 0 ) {
			y[ 0 ] = fw;
		} else {
			y[ 0 ] = -fw;
		}
		break;
	case 1:
	case 2:
		fw = 0.0;
		for ( i = jz; i >= 0; i-- ) {
			fw += FQ[ i ];
		}
		if ( ih === 0 ) {
			y[ 0 ] = fw;
		} else {
			y[ 0 ] = -fw;
		}
		fw = FQ[ 0 ] - fw;
		for ( i = 1; i <= jz; i++ ) {
			fw += FQ[i];
		}
		if ( ih === 0 ) {
			y[ 1 ] = fw;
		} else {
			y[ 1 ] = -fw;
		}
		break;
	case 3:
		for ( i = jz; i > 0; i-- ) {
			fw = FQ[ i-1 ] + FQ[ i ];
			FQ[ i ] += FQ[ i-1 ] - fw;
			FQ[ i-1 ] = fw;
		}
		for ( i = jz; i > 1; i-- ) {
			fw = FQ[ i-1 ] + FQ[ i ];
			FQ[ i ] += FQ[ i-1 ] - fw;
			FQ[ i-1 ] = fw;
		}
		fw = 0.0;
		for ( i = jz; i >= 2; i-- ) {
			fw += FQ[ i ];
		}
		if ( ih === 0 ) {
			y[ 0 ] = FQ[ 0 ];
			y[ 1 ] = FQ[ 1 ];
			y[ 2 ] = fw;
		} else {
			y[ 0 ] = -FQ[ 0 ];
			y[ 1 ] = -FQ[ 1 ];
			y[ 2 ] = -fw;
		}
		break;
	default:
		break;
	}
	return ( n & 7 );
} // end FUNCTION compute()


// MAIN //

/**
* Return the last three digits of `N` with `y = x - N*pi/2` so that `|y| < pi/2`.
*
* ## Method
*
* The method is to compute the integer (mod 8) and fraction parts of `(2/pi)*x` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals 0 mod 8 ). Thus, the number of operations are independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {Array<number>} y - output result in an array of double precision numbers
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @param {PositiveInteger} prec - precision in bits (can be 24 (single), 53 (double), 64 (extended), 113 (quad))
* @returns {number} last three digits of `N`
*/
function kernelRemPio2( x, y, e0, nx, prec ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk`:
	jk = INIT_JK[ prec ];

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++, j++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F, prec );
} // end FUNCTION kernelRemPio2()


// EXPORTS //

module.exports = kernelRemPio2;

},{"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/ldexp":1298}],1333:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx [-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* * Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
* * Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
* * \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left[0,\tfrac{pi}{4}\right] \\)
*
*   ``` tex
*   \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*   ```
*
*   where
*
*   ``` tex
*   \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*   ```
*
* * We have
*
*   ``` tex
*   \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*   ```
*
*   For better accuracy, let
*
*   ``` tex
*   r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*   ```
*
*   then
*
*   ``` tex
*   \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*   ```
*
*
* @private
* @param {number} x - input value (assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @param {number} iy - indicates whether `y` is `0` (if `iy = 0`, `y` assumed to be `0`)
* @returns {number} sine (in radians)
*/
function kernelSin( x, y, iy ) {
	var r;
	var v;
	var w;
	var z;
	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( iy === 0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
} // end FUNCTION kernelSin()


// EXPORTS //

module.exports = kernelSin;

},{}],1334:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var remPio2Kernel = require( './kernel_rem_pio2.js' );
var remPio2Medium = require( './rem_pio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of PI/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = PI/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff;

// High word significand for PI and PI/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb;

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// High word for 3*PI/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c;

// High word for 5*PI/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a;

// High word for 6*PI/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c;

// High word for 7*PI/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc;

// High word for 8*PI/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb;

// High word for 9*PI/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b;

// 2^20*pi/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb;

// Arrays for storing temporary values (note that, in C, this would not be thread-safe):
var TX = new Array( 3 );
var TY = new Array( 2 );


// MAIN //

/**
* Computes `x - n*pi/2 = r`.
*
* ## Notes
*
* * Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @private
* @param {number} x - input value
* @param {Array<number>} y - remainder elements
* @returns {integer} factor of `pi/2`
*/
function remPio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = hx & ABS_MASK;

	// Case: |x| ~<= pi/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5pi/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= pi/2 or pi
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return remPio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3pi/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9pi/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7pi/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3pi/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return remPio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4pi/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return remPio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*pi/2 (medium size)
	if ( ix < MEDIUM ) {
		return remPio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // e0 = ilogb(z) - 23 => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = remPio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
} // end FUNCTION remPio2()


// EXPORTS //

module.exports = remPio2;

},{"./kernel_rem_pio2.js":1332,"./rem_pio2_medium.js":1335,"@stdlib/math/base/utils/float64-from-words":1366,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-get-low-word":1372}],1335:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );


// VARIABLES //

// 53 bits of 2/PI:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of PI/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = PI/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of PI/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = PI/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of PI/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = PI/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff;


// MAIN //

/**
* Computes `x - n*pi/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {Array<number>} y - remainder elements
* @returns {integer} factor of `pi/2`
*/
function remPio2( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = ix >> 20;
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
} // end FUNCTION remPio2()


// EXPORTS //

module.exports = remPio2;

},{"@stdlib/math/base/special/round":1326,"@stdlib/math/base/utils/float64-get-high-word":1370}],1336:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var kernelCos = require( './kernel_cos.js' );
var kernelSin = require( './kernel_sin.js' );
var remPio2 = require( './rem_pio2.js' );


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
var SMALL_HIGH_WORD = 0x3e500000;

// Array for storing remainder elements:
var Y = [ 0.0, 0.0 ];


// MAIN //

/**
* Computes the sine of a number.
*
* #### Method
*
* * Let `S`, `C`, and `T` denote the `sin`, `cos` and `tan`, respectively, on `[-PI/4, +PI/4]`.
* * Reduce the argument `x` to `y1+y2 = x-k*pi/2` in `[-pi/4 , +pi/4]`, and let `n = k mod 4`. We have
*
*   | n   |  sin(x)  |  cos(x)  |  tan(x)  |
*   |:---:|:--------:|:--------:|:--------:|
*   |  0  |     S    |     C    |    T     |
*   |  1  |     C    |    -S    |   -1/T   |
*   |  2  |    -S    |    -C    |    T     |
*   |  3  |    -C    |     S    |   -1/T   |
*
*
* @param {number} x - input value
* @returns {number} sine (in radians)
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;
	var z;

	z = 0.0;
	ix = getHighWord( x );

	// Case: |x| ~< pi/4
	ix &= ABS_MASK;
	if ( ix <= PIO4_HIGH_WORD ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			return x;
		}
		return kernelSin( x, z, 0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		return NaN;
	}
	// Argument reduction...
	n = remPio2( x, Y );
	switch ( n & 3 ) {
	case 0:
		return kernelSin( Y[0], Y[1], 1 );
	case 1:
		return kernelCos( Y[0], Y[1] );
	case 2:
		return -kernelSin( Y[0], Y[1], 1 );
	default:
		return -kernelCos( Y[0], Y[1] );
	}
} // end FUNCTION sin()


// EXPORTS //

module.exports = sin;

},{"./kernel_cos.js":1331,"./kernel_sin.js":1333,"./rem_pio2.js":1334,"@stdlib/math/base/utils/float64-get-high-word":1370}],1337:[function(require,module,exports){
'use strict';

/**
* Compute the normalized cardinal sine of a number.
*
* @module @stdlib/math/base/special/sinc
*
* @example
* var sinc = require( '@stdlib/math/base/special/sinc' );
*
* var v = sinc( 0.5 );
* // returns ~0.637
*
* v = sinc( -1.2 );
* // returns ~-0.156

* v = sinc( 0.0 );
* // returns 1.0
*
* v = sinc( NaN );
* // returns NaN
*/

// MODULES //

var sinc = require( './sinc.js' );


// EXPORTS //

module.exports = sinc;

},{"./sinc.js":1338}],1338:[function(require,module,exports){
'use strict';

// MODULES //

var sinpi = require( '@stdlib/math/base/special/sinpi' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Computes the normalized cardinal sine of a number.
*
* #### Method
*
* For \\( x \neq 0 \\), the normalized cardinal sine is calculated as
*
* ``` tex
* \operatorname{sinc}(x) = \frac{\operatorname{sin}(\pi x)}{\pi x}.
* ```
*
*
* #### Special Cases
*
* ``` tex
* \begin{align}
* \operatorname{sinc}(0) &= 1 & \\
* \operatorname{sinc}(\infty) &= 0 & \\
* \operatorname{sinc}(-\infty) &= 0 & \\
* \operatorname{sinc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align}
* ```
*
*
* @param {number} x - input value
* @returns {number} cardinal sine
*
* @example
* var v = sinc( 0.5 );
* // returns ~0.637
*
* @example
* var v = sinc( -1.2 );
* // returns ~-0.156
*
* @example
* var v = sinc( 0.0 );
* // returns 1.0
*
* @example
* var v = sinc( NaN );
* // returns NaN
*/
function sinc( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInfinite( x ) ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return 1.0;
	}
	return sinpi( x ) / ( PI * x );
} // end FUNCTION sinc()


// EXPORTS //

module.exports = sinc;

},{"@stdlib/math/base/assert/is-infinite":39,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/sinpi":1341,"@stdlib/math/constants/float64-pi":1413}],1339:[function(require,module,exports){
'use strict';

/**
* Compute the hyperbolic sine of a number.
*
* @module @stdlib/math/base/special/sinh
*
* @example
* var sinh = require( '@stdlib/math/base/special/sinh' );
*
* var v = sinh( 0.0 );
* // returns 0.0
*
* v = sinh( 2.0 );
* // returns ~3.627
*
* v = sinh( -2.0 );
* // returns ~-3.627
*
* v = sinh( NaN );
* // returns NaN
*/

// MODULES //

var sinh = require( './sinh.js' );


// EXPORTS //

module.exports = sinh;

},{"./sinh.js":1340}],1340:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var LN2 = require( '@stdlib/math/constants/float64-ln-two' );


// VARIABLES //

// ln(2^1024)
var MAXLOG = 7.09782712893383996843e2;

// ln(2^-1022)
var MINLOG = -7.08396418532264106224e2;

var POS_OVERFLOW = MAXLOG + LN2;
var NEG_OVERFLOW = MINLOG - LN2;

var LARGE = MAXLOG - LN2;

var P = [
	-3.51754964808151394800e5,
	-1.15614435765005216044e4,
	-1.63725857525983828727e2,
	-7.89474443963537015605e-1
];
var Q = [
	-2.11052978884890840399e6,
	3.61578279834431989373e4,
	-2.77711081420602794433e2,
	1.0
];


// FUNCTIONS //

// Compile a function to evaluate a rational function based on the above coefficients...
var rateval = evalrational( P, Q );


// MAIN //

/**
* Computes the hyperbolic sine of a number.
*
* #### Method
*
* The range is partitioned into two segments. If \\( |x| \le 1 \\), we use a rational function of the form
*
* ``` tex
* x + x^3 \frac{\mathrm{P}(x)}{\mathrm{Q}(x)}
* ```
*
* Otherwise, the calculation is
*
* ``` tex
* \operatorname{sinh}(x) = \frac{ e^x - e^{-x} }{2}.
* ```
*
*
* #### Notes
*
* * Relative error:
*
*   | arithmetic | domain   | # trials | peak    | rms     |
*   |:----------:|:--------:|:--------:|:-------:|:-------:|
*   | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |
*   | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |
*
*
* @param {number} x - input value
* @returns {number} hyperbolic sine (in radians)
*
* @example
* var v = sinh( 0.0 );
* // returns 0.0
*
* @example
* var v = sinh( 2.0 );
* // returns ~3.627
*
* @example
* var v = sinh( -2.0 );
* // returns ~-3.627
*
* @example
* var v = sinh( NaN );
* // returns NaN
*/
function sinh( x ) {
	var a;
	if ( x === 0.0 ) {
		return x; // handles `+-0`
	}
	a = abs( x );
	if (
		x > POS_OVERFLOW ||
		x < NEG_OVERFLOW
	) {
		return ( x > 0.0 ) ? PINF : NINF;
	}
	if ( a > 1.0 ) {
		if ( a >= LARGE ) {
			a = exp( 0.5*a );
			a = ( 0.5 * a ) * a;
			if ( x < 0.0 ) {
				a = -a;
			}
			return a;
		}
		a = exp( a );
		a = (0.5*a) - (0.5/a);
		if ( x < 0.0 ) {
			a = -a;
		}
		return a;
	}
	a *= a;
	return x + ( x*a*rateval( a ) );
} // end FUNCTION sinh()


// EXPORTS //

module.exports = sinh;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/exp":1257,"@stdlib/math/base/tools/evalrational":1359,"@stdlib/math/constants/float64-ln-two":1403,"@stdlib/math/constants/float64-ninf":1411,"@stdlib/math/constants/float64-pinf":1414}],1341:[function(require,module,exports){
'use strict';

/**
* Compute the value of `sin(πx)`.
*
* @module @stdlib/math/base/special/sinpi
*
* @example
* var sinpi = require( '@stdlib/math/base/special/sinpi' );
*
* var y = sinpi( 0.0 );
* // returns 0.0
*
* y = sinpi( 0.5 );
* // returns 1.0
*
* y = sinpi( 0.9 );
* // returns ~0.309
*
* y = sinpi( NaN );
* // returns NaN
*/

// MODULES //

var sinpi = require( './sinpi.js' );


// EXPORTS //

module.exports = sinpi;

},{"./sinpi.js":1342}],1342:[function(require,module,exports){
'use strict';

/*
* Notes:
*	=> sin(-x) = -sin(x)
*	=> sin(+n) = +0, where `n` is a positive integer
*	=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer
*	=> cos(-x) = cos(x)
*/


// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var cos = require( '@stdlib/math/base/special/cos' );
var sin = require( '@stdlib/math/base/special/sin' );
var abs = require( '@stdlib/math/base/special/abs' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var PI = require( '@stdlib/math/constants/float64-pi' );


// MAIN //

/**
* Computes the value of `sin(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = sinpi( 0.0 );
* // returns 0.0
*
* @example
* var y = sinpi( 0.5 );
* // returns 1.0
*
* @example
* var y = sinpi( 0.9 );
* // returns ~0.309
*
* @example
* var y = sinpi( NaN );
* // returns NaN
*/
function sinpi( x ) {
	var ar;
	var r;
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInfinite( x ) ) {
		return NaN;
	}
	// Argument reduction (reduce to [0,2))...
	r = x % 2.0; // sign preserving
	ar = abs( r );

	// If `x` is an integer, the mod is an integer...
	if ( ar === 0.0 || ar === 1.0 ) {
		return copysign( 0.0, r );
	}
	if ( ar < 0.25 ) {
		return sin( PI*r );
	}
	// In each of the following, we further reduce to [-π/4,π/4)...
	if ( ar < 0.75 ) {
		ar = 0.5 - ar;
		return copysign( cos( PI*ar ), r );
	}
	if ( ar < 1.25 ) {
		r = copysign( 1.0, r ) - r;
		return sin( PI*r );
	}
	if ( ar < 1.75 ) {
		ar = ar - 1.5;
		return -copysign( cos( PI*ar ), r );
	}
	r = r - copysign( 2.0, r );
	return sin( PI*r );
} // end FUNCTION sinpi()


// EXPORTS //

module.exports = sinpi;

},{"@stdlib/math/base/assert/is-infinite":39,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/base/special/copysign":1234,"@stdlib/math/base/special/cos":1237,"@stdlib/math/base/special/sin":1330,"@stdlib/math/constants/float64-pi":1413}],1343:[function(require,module,exports){
'use strict';

/**
* Compute the principal square root.
*
* @module @stdlib/math/base/special/sqrt
*
* @example
* var sqrt = require( '@stdlib/math/base/special/sqrt' );
*
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

// MODULES //

var sqrt = Math.sqrt;


// EXPORTS //

module.exports = sqrt;

},{}],1344:[function(require,module,exports){
'use strict';

/**
* Evaluate the tangent of a number.
*
* @module @stdlib/math/base/special/tan
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* v = tan( -Math.PI/4.0 );
* // returns ~-1.0
*
* v = tan( Math.PI/4.0 );
* // returns ~1.0
*
* v = tan( NaN );
* // returns NaN
*/

// MODULES //

var tan = require( './tan.js' );


// EXPORTS //

module.exports = tan;

},{"./tan.js":1347}],1345:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var round = require( '@stdlib/math/base/special/round' );
var remPio2Kernel = require( './rem_pio2_kernel.js' );


// VARIABLES //

var ZERO =  0.00000000000000000000e+00; /* 0x00000000, 0x00000000 */
var TWO24 =  1.67772160000000000000e+07; /* 0x41700000, 0x00000000 */

// 53 bits of 2/PI
var INVPIO2 =  6.36619772367581382433e-01; /* 0x3FE45F30, 0x6DC9C883 */

// First 33 bit of PI/2
var PIO2_1  =  1.57079632673412561417e+00; /* 0x3FF921FB, 0x54400000 */

// PIO2_1T = PI/2 - PIO2_1
var PIO2_1T =  6.07710050650619224932e-11; /* 0x3DD0B461, 0x1A626331 */

// Second 33 bit of PI/2
var PIO2_2  =  6.07710050630396597660e-11; /* 0x3DD0B461, 0x1A600000 */

// PIO2_2T = PI/2 - ( PIO2_1 + PIO2_2 )
var PIO2_2T =  2.02226624879595063154e-21; /* 0x3BA3198A, 0x2E037073 */

// Third 33 bit of PI/2
var PIO2_3  =  2.02226624871116645580e-21; /* 0x3BA3198A, 0x2E000000 */

// PIO2_3T = PI/2 - ( PIO2_1 + PIO2_2 + PIO2_3 )
var PIO2_3T =  8.47842766036889956997e-32; /* 0x397B839A, 0x252049C1 */


// MAIN //

/**
* Compute x - n*pi/2 = r. Returns n and stores the remainder `r`
* as two numbers y[0] and y[1] such that y[0]+y[1] = r.
*
* @private
* @param {number} x - input value
* @param {Array} y - remainder elements
* @returns {integer} n - factor of pi/2
*/
function remPio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var tx;
	var ty;
	var i;
	var n;
	var z;

	tx = new Array( 3 );
	ty = new Array( 2 );

	hx = getHighWord( x );
	ix = hx & 0x7fffffff;

	// Case: |x| ~<= pi/4 , no need for reduction
	if ( ix <= 0x3fe921fb ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}

	// Case: |x| ~<= 5pi/4
	if ( ix <= 0x400f6a7a ) {
		// Case: |x| ~= pi/2 or 2pi/2
		if ( (ix & 0xfffff) === 0x921fb ) {
			// Cancellation => use medium case
			return remPio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3pi/4
		if ( ix <= 0x4002d97c ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = ( z - y[0] ) - PIO2_1T;
				return 1;
			} else {
				z = x + PIO2_1;
				y[ 0 ] = z + PIO2_1T;
				y[ 1 ] = ( z - y[0] ) + PIO2_1T;
				return -1;
			}
		}
		else {
			if ( x > 0.0 ) {
				z = x - 2 * PIO2_1;
				y[ 0 ] = z - 2 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) -2 * PIO2_1T;
				return 2;
			} else {
				z = x + 2 * PIO2_1;
				y[ 0 ] = z + 2 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) + 2 * PIO2_1T;
				return -2;
			}
		}
	}
	// Case: |x| ~<= 9pi/4
	if ( ix <= 0x401c463b ) {
		// Case: |x| ~<= 7pi/4
		if ( ix <= 0x4015fdbc ) {
			// Case: |x| ~= 3pi/2
			if ( ix === 0x4012d97c ) {
				return remPio2Medium( x, ix, y );
			}
			if ( x > 0 ) {
				z = x - 3 * PIO2_1;
				y[ 0 ] = z - 3 * PIO2_1T;
				y[ 1 ] = (z-y[0]) - 3 * PIO2_1T;
				return 3;
			} else {
				z = x + 3 * PIO2_1;
				y[ 0 ] = z + 3 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) + 3 * PIO2_1T;
				return -3;
			}
		} else {
			if ( ix === 0x401921fb ) {
				// Case: |x| ~= 4pi/2
				return remPio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - 4.0 * PIO2_1;
				y[ 0 ] = z - 4.0 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) - 4.0 * PIO2_1T;
				return 4;
			} else {
				z = x + 4.0 * PIO2_1;
				y[ 0 ] = z + 4.0 * PIO2_1T;
				y[ 1 ] = ( z - y[0] ) + 4.0 * PIO2_1T;
				return -4;
			}
		}
	}
	// Case: |x| ~< 2^20*(pi/2), medium size
	if ( ix < 0x413921fb ) {
		return remPio2Medium( x, ix, y );
	}
	// All other (large) arguments...
	// Case: x is inf or NaN */
	if ( ix >= 0x7ff00000 ) {
		y[ 0 ] = y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|,ilogb(x)-23)...
	low = getLowWord( x );
	// e0 = ilogb(z)-23:
	e0 = ( ix >> 20 ) - 1046;
	z = fromWords( ix - ((e0<<20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		tx[ i ] = z|0;
		z = ( z - tx[i] ) * TWO24;
	}
	tx[ 2 ] = z;
	nx = 3;
	while ( tx[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx--;
	}
	n = remPio2Kernel( tx, ty, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -ty[ 0 ];
		y[ 1 ] = -ty[ 1 ];
		return -n;
	}
	y[ 0 ] = ty[ 0 ];
	y[ 1 ] = ty[ 1 ];
	return n;
} // end FUNCTION remPio2()


/**
* Compute x - n*pi/2 = r for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {int32} ix - higher word
* @param {Array} y - remainder elements
* @returns {integer} n - factor of pi/2
*/
function remPio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - n * PIO2_1;
	w = n * PIO2_1T;
	// 1st round good to 85 bit...
	j = ix >> 20;
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high>>20) & 0x7ff );
	if ( i > 16 ) {
		// 2nd iteration needed, good to 118...
		t  = r;
		w  = n * PIO2_2;
		r  = t - w;
		w  = n * PIO2_2T - ( (t-r) - w );
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high>>20) & 0x7ff );
		if ( i > 49 )  {
			// 3rd iteration need, 151 bits acc
			t  = r;
			w  = n * PIO2_3;
			r  = t - w;
			w  = n * PIO2_3T - ( (t-r) - w );
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = ( r - y[0] ) - w;
	return n;
} // end FUNCTION remPio2Medium()


// EXPORTS //

module.exports = remPio2;

},{"./rem_pio2_kernel.js":1346,"@stdlib/math/base/special/round":1326,"@stdlib/math/base/utils/float64-from-words":1366,"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-get-low-word":1372}],1346:[function(require,module,exports){
arguments[4][1239][0].apply(exports,arguments)
},{"@stdlib/math/base/special/floor":1266,"@stdlib/math/base/special/ldexp":1298,"dup":1239}],1347:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var tanKernel = require( './tan_kernel.js' );
var remPio2 = require( './rem_pio2.js' );


// MAIN //

/**
* Evaluates the tangent of a number.
*
* #### Method
*
* * Let S,C and T denote the sin, cos and tan respectively on [-PI/4, +PI/4]. Reduce the argument x to y1+y2 = x-k*pi/2 in [-pi/4 , +pi/4], and let n = k mod 4. We have
*
*   | n   |  sin(x)  |  cos(x)  |  tan(x)  |
*   |:---:|:--------:|:--------:|:--------:|
*   |  0  |     S    |     C    |    T     |
*   |  1  |     C    |    -S    |   -1/T   |
*   |  2  |    -S    |    -C    |    T     |
*   |  3  |    -C    |     S    |   -1/T   |
*
* @param {number} x - input value
* @returns {number} tangent (in radians)
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* @example
* var v = tan( -Math.PI/4.0 );
* // returns ~-1.0
*
* @example
* var v = tan( Math.PI/4.0 );
* // returns ~1.0
*
* @example
* var v = tan( NaN );
* // returns NaN
*/
function tan( x ) {
	var y;
	var z;
	var n;
	var ix;

	z = 0.0;
	y = new Array( 2 );
	ix = getHighWord( x );
	ix &= 0x7fffffff;

	// Case: |x| ~< pi/4
	if ( ix <= 0x3fe921fb ) {
		// Case: x < 2**-27
		if ( ix < 0x3e400000 ) {
			if ( (x|0) === 0 ) {
				// Generate inexact...
				return x;
			}
		}
		return tanKernel( x, z, 1 );
	}
	// Case: tan(Inf or NaN) is NaN
	else if ( ix >= 0x7ff00000 ) {
		return NaN;
	}
	// Argument reduction needed...
	n = remPio2( x, y );
	return tanKernel( y[0], y[1], 1 - ( (n&1) << 1 ) );
} // end FUNCTION tan()


// EXPORTS //

module.exports = tan;

},{"./rem_pio2.js":1345,"./tan_kernel.js":1348,"@stdlib/math/base/utils/float64-get-high-word":1370}],1348:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_tan.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright 2004 Sun Microsystems, Inc.  All Rights Reserved.
*
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );


// VARIABLES //

var PIO4 = 7.85398163397448278999e-01;
var PIO4LO = 3.06161699786838301793e-17;
var T = [
	3.33333333333334091986e-01,	/* 3FD55555, 55555563 */
	1.33333333333201242699e-01,	/* 3FC11111, 1110FE7A */
	5.39682539762260521377e-02,	/* 3FABA1BA, 1BB341FE */
	2.18694882948595424599e-02,	/* 3F9664F4, 8406D637 */
	8.86323982359930005737e-03,	/* 3F8226E3, E96E8493 */
	3.59207910759131235356e-03,	/* 3F6D6D22, C9560328 */
	1.45620945432529025516e-03,	/* 3F57DBC8, FEE08315 */
	5.88041240820264096874e-04,	/* 3F4344D8, F2F26501 */
	2.46463134818469906812e-04,	/* 3F3026F7, 1A8D1068 */
	7.81794442939557092300e-05,	/* 3F147E88, A03792A6 */
	7.14072491382608190305e-05,	/* 3F12B80F, 32F0A7E9 */
	-1.85586374855275456654e-05,	/* BEF375CB, DB605373 */
	2.59073051863633712884e-05	/* 3EFB2A70, 74BF7AD4 */
];


// MAIN //

/**
* Computes the tan function on \\( \approx[-\pi/4, \pi/4] \\) (except on -0), \\( \pi/4 \approx 0.7854 \\)
*
* #### Method
*
* * Since \\( \tan(-x) = -\tan(x) \\), we need only to consider positive x.
* * Callers must return \\( \tan(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves -0. Callers may do the optimization \\( \tan(x) \approx x \\) for tiny x.
* * \\( \tan(x) \\) is approximated by a odd polynomial of degree 27 on \\( [0,0.67434] \\)
*
*   ``` tex
*   \tan(x) \approx x + T_1 x^3 + \ldots + T_{13} x^{27}
*   ```
*   where
*
*   ``` tex
*   \left| \frac{\tan(x)}{x} - \left( 1 + T_1 x^2 + T_2 x^4 + \ldots + T_{13} x^{26} \right) \right|  \le 2^{-59.2}
*   ```
*
* * Note: \\( \tan(x+y) = \tan(x) + \tan'(x) \cdot y \approx \tan(x) + ( 1 + x \cdot x ) \cdot y \\). Therefore, for better accuracy in computing \\( \tan(x+y) \\), let
*
*   ``` tex
*    r = x^3 \cdot \left( T_2+x^2 \cdot (T_3+x^2 \cdot (\ldots+x^2 \cdot (T_{12}+x^2 \cdot T_{13}))) \right)
*   ```
*
*   then
*
*   ``` tex
*   \tan(x+y) = x^3 + \left( T_1 \cdot x^2 + (x \cdot (r+y)+y) \right)
*   ```
*
* * For x in \\( [0.67434,\pi/4] \\),  let \\( y = \pi/4 - x \\), then
*
*   ``` tex
*   \tan(x) = \tan\left(\tfrac{\pi}{4}-y\right) = \frac{1-\tan(y)}{1+\tan(y)} \\
*   = 1 - 2 \cdot \left( \tan(y) - \tfrac{\tan(y)^2}{1+\tan(y)} \right)
*   ```
*
* @param {number} x - input value (assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of x.
* @param {number} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned.
* @param {number} tangent (in radians)
*/
function tanKernel( x, y, k ) {
	var hx;
	var ix;
	var a;
	var r;
	var s;
	var t;
	var v;
	var w;
	var z;

	hx = getHighWord( x );
	// High word of |x|:
	ix = hx & 0x7fffffff;

	// Case: |x| >= 0.6744
	if ( ix >= 0x3FE59428 ) {
		if ( x < 0 ) {
			x = -x;
			y = -y;
		}
		z = PIO4 - x;
		w = PIO4LO - y;
		x = z + w;
		y = 0.0;
	}
	z = x * x;
	w = z * z;
	// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) +
	// x^5(x^2*(T[2]+x^4*T[4]+...+x^22*[T12]))
	r = T[1] + w * (T[3] + w * (T[5] + w * (T[7] + w * (T[9] +
		w * T[11]))));
	v = z * (T[2] + w * (T[4] + w * (T[6] + w * (T[8] + w * (T[10] +
		w * T[12])))));
	s = z * x;
	r = y + z * (s * (r + v) + y);
	r += T[0] * s;
	w = x + r;
	if ( ix >= 0x3FE59428 ) {
		v = k;
		return ( 1.0 - ( (hx >> 30) & 2 ) ) *
			( v - 2.0 * (x - (w * w / (w + v) - r)) );
	}
	if ( k === 1 ) {
		return w;
	}
	else {
		// Compute -1.0 / (x+r) accurately:
		z = w;
		setLowWord( z, 0 );
		v = r - (z - x); // z + v = r + x
		t = a = -1.0 / w; // a = -1.0 / w
		setLowWord( t, 0 );
		s = 1.0 + t * z;
		return t + a * (s + t * v);
	}
} // end FUNCTION tanKernel()


// EXPORTS //

module.exports = tanKernel;

},{"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/base/utils/float64-set-low-word":1379}],1349:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward zero.
*
* @module @stdlib/math/base/special/trunc
*
* @example
* var trunc = require( '@stdlib/math/base/special/trunc' );
*
* var v = trunc( -4.2 );
* // returns -4.0
*
* v = trunc( 9.99999 );
* // returns 9.0
*
* v = trunc( 0.0 );
* // returns 0.0
*
* v = trunc( -0.0 );
* // returns -0.0
*
* v = trunc( NaN );
* // returns NaN
*
* v = trunc( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = trunc( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var trunc = require( './trunc.js' );


// EXPORTS //

module.exports = trunc;

},{"./trunc.js":1350}],1350:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );


// MAIN //

/**
* Rounds a numeric value toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc( -4.2 );
* // returns -4.0
*
* @example
* var v = trunc( 9.99999 );
* // returns 9.0
*
* @example
* var v = trunc( 0.0 );
* // returns 0.0
*
* @example
* var v = trunc( -0.0 );
* // returns -0.0
*
* @example
* var v = trunc( NaN );
* // returns NaN
*
* @example
* var v = trunc( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = trunc( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*/
function trunc( x ) {
	if ( x < 0.0 ) {
		return ceil( x );
	}
	return floor( x );
} // end FUNCTION trunc()


// EXPORTS //

module.exports = trunc;

},{"@stdlib/math/base/special/ceil":1232,"@stdlib/math/base/special/floor":1266}],1351:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/math/constants/float64-eps' );
var TINY = require( '@stdlib/math/constants/float32-smallest-normal' );


// VARIABLES //

var MAX_ITER = 1000000;


// FUNCTIONS //

/**
* Evaluates
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionA( gen, factor, maxIter ) {
	var delta;
	var a0;
	var C;
	var D;
	var f;
	var v;

	v = gen();
	f = v[ 1 ];
	a0 = v[ 0 ];
	if ( f === 0 ) {
		f = TINY;
	}
	C = f;
	D = 0.0;

	do {
		v = gen();
		if ( v ) {
			D = v[ 1 ] + ( v[ 0 ] * D );
			if ( D === 0.0 ) {
				D = TINY;
			}
			C = v[ 1 ] + ( v[ 0 ] / C );
			if ( C === 0.0 ) {
				C = TINY;
			}
			D = 1.0 / D;
			delta = C * D;
			f = f * delta;
		}
	} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus

	return a0 / f;
} // end FUNCTION continuedFractionA()

/**
* Evaluates
*      b0 +   a1
*      ---------------
*      b1 +   a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionB( gen, factor, maxIter ) {
	var delta;
	var C;
	var D;
	var f;
	var v;

	v = gen();
	f = v[ 1 ];
	if ( f === 0.0 ) {
		f = TINY;
	}
	C = f;
	D = 0.0;
	do {
		v = gen();
		if ( v ) {
			D = v[ 1 ] + ( v[ 0 ] * D );
			if ( D === 0.0 ) {
				D = TINY;
			}
			C = v[ 1 ] + ( v[ 0 ] / C );
			if ( C === 0.0 ) {
				C = TINY;
			}
			D = 1.0 / D;
			delta = C * D;
			f = f * delta;
		}
	} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	return f;
} // end FUNCTION continuedFractionB()


// MAIN //

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* #### References
* * Lentz, W.J. 1976, Applied Optics, vol. 15, pp. 668-671.
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/
function continuedFraction( generator, options ) {
	var maxIter;
	var opts;
	var eps;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	eps = opts.tolerance || TOLERANCE;
	maxIter = opts.maxIter || MAX_ITER;

	if ( opts.keep ) {
		return continuedFractionB( generator, eps, maxIter );
	}
	return continuedFractionA( generator, eps, maxIter );
} // end FUNCTION continuedFraction()


// EXPORTS //

module.exports = continuedFraction;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/constants/float32-smallest-normal":1390,"@stdlib/math/constants/float64-eps":1392}],1352:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/math/constants/float64-eps' );
var TINY = require( '@stdlib/math/constants/float32-smallest-normal' );


// VARIABLES //

var MAX_ITER = 1000000;


// FUNCTIONS //

/**
* Evaluates
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionA( gen, factor, maxIter ) {
	var isgenerator = typeof gen.next === 'function';
	var f;
	var C;
	var D;
	var delta;
	var a0;
	var v = isgenerator ? gen.next().value : gen();
	f = v[ 1 ];
	a0 = v[ 0 ];
	if ( f === 0.0 ) {
		f = TINY;
	}
	C = f;
	D = 0;
	if ( isgenerator === true ) {
		do {
			v = gen.next().value;
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = TINY;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = TINY;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	} else {
		do {
			v = gen();
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = TINY;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = TINY;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	}
	return a0 / f;
} // end FUNCTION continuedFractionA()

/**
* Evaluates
*      b0 +    a1
*      ---------------
*      b1 +     a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionB( gen, factor, maxIter ) {
	var isgenerator = typeof gen.next === 'function';
	var f;
	var C;
	var D;
	var delta;
	var v = isgenerator ? gen.next().value : gen();
	f = v[ 1 ];
	if ( f === 0.0 ) {
		f = TINY;
	}
	C = f;
	D = 0.0;
	if ( isgenerator === true ) {
		do {
			v = gen.next().value;
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = TINY;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = TINY;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	} else {
		do {
			v = gen();
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = TINY;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = TINY;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	}
	return f;
} // end FUNCTION continuedFractionB()


// MAIN //

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* #### References
* * Lentz, W.J. 1976, Applied Optics, vol. 15, pp. 668-671.
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator();
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function* generator() {
*    var i = 0;
*    while ( true ) {
*        i++;
*        yield [ i, i ];
*    }
* }
*/
function continuedFraction( generator, options ) {
	var maxIter;
	var opts;
	var eps;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	eps = opts.tolerance || TOLERANCE;
	maxIter = opts.maxIter || MAX_ITER;

	if ( opts.keep ) {
		return continuedFractionB( generator, eps, maxIter );
	}
	return continuedFractionA( generator, eps, maxIter );
} // end FUNCTION continuedFraction()


// EXPORTS //

module.exports = continuedFraction;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/constants/float32-smallest-normal":1390,"@stdlib/math/constants/float64-eps":1392}],1353:[function(require,module,exports){
'use strict';

/**
* Calculates a continued fraction approximation.
*
* @module @stdlib/math/base/tools/continued-fraction
*
* @example
* var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
*
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/

// MODULES //

var hasGeneratorsSupport = require( '@stdlib/utils/detect-generator-support' )();


// EXPORTS //

module.exports = hasGeneratorsSupport ? require( './generators.js' ) : require( './basic.js' );

},{"./basic.js":1351,"./generators.js":1352,"@stdlib/utils/detect-generator-support":1427}],1354:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* #### Notes
*
* * The implementation uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function evalpoly( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
} // end FUNCTION evalpoly()


// EXPORTS //

module.exports = evalpoly;

},{}],1355:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( './evalpoly.js' );


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* #### Notes
*
* * The compiled function uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return evalpoly( c, x );
	} // end FUNCTON polyval()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./evalpoly.js":1354}],1356:[function(require,module,exports){
'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalpoly = require( './evalpoly.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalpoly, 'factory', factory );


// EXPORTS //

module.exports = evalpoly;

},{"./evalpoly.js":1354,"./factory.js":1355,"@stdlib/utils/define-read-only-property":1425}],1357:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/tools/rational.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\). Coefficients should be sorted in ascending degree.
*
* #### Notes
*
* * The implementation uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree
* @param {NumericAray} Q - denominator polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*
* @example
* var P = [ -6.0, -5.0 ];
* var Q = [ 3.0, 0.5 ];
*
* var v = evalrational( P, Q, 6.0 ); //  => ( -6*6^0 - 5*6^1 ) / ( 3*6^0 + 0.5*6^1 ) = (-6-30)/(3+3)
* // returns -6.0
*
* @example
* // 2x^3 + 4x^2 - 5x^1 - 6x^0 => degree 4
* var P = [ -6.0, -5.0, 4.0, 2.0 ];
*
* // 0.5x^1 + 3x^0 => degree 2
* var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded
*
* var v = evalrational( P, Q, 6.0 ); // => ( -6*6^0 - 5*6^1 + 4*6^2 + 2*6^3 ) / ( 3*6^0 + 0.5*6^1 + 0*6^2 + 0*6^3 ) = (-6-30+144+432)/(3+3)
* // returns 90.0
*/
function evalrational( P, Q, x ) {
	var len;
	var s1;
	var s2;
	var i;

	len = P.length;
	if ( len === 0 ) {
		return NaN;
	}
	if ( len !== Q.length ) {
		return NaN;
	}
	if ( x === 0.0 || len === 1 ) {
		return P[ 0 ] / Q[ 0 ];
	}
	// Use Horner's method...
	if ( abs( x ) <= 1.0 ) {
		s1 = P[ len-1 ];
		s2 = Q[ len-1 ];
		for ( i = len-2; i >= 0; --i ) {
			s1 *= x;
			s2 *= x;
			s1 += P[ i ];
			s2 += Q[ i ];
		}
	} else {
		x = 1.0 / x; // use inverse to avoid overflow
		s1 = P[ 0 ];
		s2 = Q[ 0 ];
		for( i = 1; i < len; ++i ) {
			s1 *= x;
			s2 *= x;
			s1 += P[ i ];
			s2 += Q[ i ];
		}
	}
	return s1 / s2;
} // end FUNCTION evalrational()


// EXPORTS //

module.exports = evalrational;

},{"@stdlib/math/base/special/abs":1183}],1358:[function(require,module,exports){
'use strict';

// MODULES //

var evalrational = require( './evalrational.js' );


// MAIN //

/**
* Generates a function for evaluating a rational function.
*
* #### Notes
*
* * The compiled function uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree
* @param {NumericArray} Q - denominator polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a rational function
*
* @example
* var P = [ 20.0, 8.0, 3.0 ];
* var Q = [ 10.0, 9.0, 1.0 ];
*
* var rational = evalrational.factory( P, Q );
*
* var v = rational( 10.0 ); // => (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2) = (20+80+300)/(10+90+100)
* // returns 2.0
*
* v = rational( 2.0 ); // => (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2) = (20+16+12)/(10+18+4)
* // returns 1.5
*/
function factory( P, Q ) {
	var f;
	var r;
	var n;
	var m;
	var i;

	// Avoid exceeding maximum stack size on V8 :(. Note that the value of `500` was empirically determined...
	if ( P.length > 500 ) {
		return rational;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalrational(x){';

	// Create the function body...
	n = P.length;

	// Declare variables...
	f += 'var ax,s1,s2;';

	// If no coefficients, the function always returns NaN...
	if ( n === 0 ) {
		f += 'return NaN;';
	}
	// If P and Q have different lengths, the function always returns NaN...
	else if ( n !== Q.length ) {
		f += 'return NaN;';
	}
	// If P and Q have only one coefficient, the function always returns the ratio of the first coefficients...
	else if ( n === 1 ) {
		r = P[ 0 ] / Q[ 0 ];
		f += 'return ' + r + ';';
	}
	// If more than one coefficient, apply Horner's method to both the numerator and denominator...
	else {
		// If `x == 0`, return the ratio of the first coefficients...
		r = P[ 0 ] / Q[ 0 ];
		f += 'if(x===0.0){return ' + r + ';}';

		// Compute the absolute value of `x`...
		f += 'if(x<0.0){ax=-x;}else{ax=x;}';

		// If `abs(x) <= 1`, evaluate the numerator and denominator of the rational function using Horner's method...
		f += 'if(ax<=1.0){';
		f += 's1 = ' + P[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += P[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
		f += 's2 = ' + Q[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += Q[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';

		// Close the if statement...
		f += '}else{';

		// If `abs(x) > 1`, evaluate the numerator and denominator via the inverse to avoid overflow...
		f += 'x = 1.0/x;';
		m = n - 1;
		f += 's1 = ' + P[ m ];
		for ( i = m - 1; i >= 0; i-- ) {
			f += '+x*';
			if ( i > 0 ) {
				f += '(';
			}
			f += P[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';

		m = n - 1;
		f += 's2 = ' + Q[ m ];
		for ( i = m - 1; i >= 0; i-- ) {
			f += '+x*';
			if ( i > 0 ) {
				f += '(';
			}
			f += Q[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';

		// Close the else statement...
		f += '}';

		// Return the ratio of the two sums...
		f += 'return s1/s2;';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalrational.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*	function evalrational( x ) {
	*		var ax, s1, s2;
	*		if ( x === 0.0 ) {
	*			return P[0] / Q[0];
	*		}
	*		if ( x < 0.0 ) {
	*			ax = -x;
	*		} else {
	*			ax = x;
	*		}
	*		if ( ax <= 1.0 ) {
	*			s1 = P[0]+x*(P[1]+x*(P[2]+x*(P[3]+...+x*(P[n-2]+x*P[n-1]))));
	*			s2 = Q[0]+x*(Q[1]+x*(Q[2]+x*(Q[3]+...+x*(Q[n-2]+x*Q[n-1]))));
	*		} else {
	*			x = 1.0/x;
	*			s1 = P[n-1]+x*(P[n-2]+x*(P[n-3]+x*(P[n-4]+...+x*(P[1]+x*P[0]))));
	*			s2 = Q[n-1]+x*(Q[n-2]+x*(Q[n-3]+x*(Q[n-4]+...+x*(Q[1]+x*Q[0]))));
	*		}
	*		return s1 / s2;
	*	}
	*/

	/**
	* Evaluates a rational function.
	*
	* @private
	* @param {number} x - value at which to evaluate a rational function
	* @returns {number} evaluated rational function
	*/
	function rational( x ) {
		return evalrational( P, Q, x );
	} // end FUNCTION rational()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./evalrational.js":1357}],1359:[function(require,module,exports){
'use strict';

/**
* Evaluate a rational function.
*
* @module @stdlib/math/base/tools/evalrational
*
* @example
* var evalrational = require( '@stdlib/math/base/tools/evalrational' );
*
* // 2x^3 + 4x^2 - 5x^1 - 6x^0 => degree 4
* var P = [ -6.0, -5.0, 4.0, 2.0 ];
*
* // 0.5x^1 + 3x^0 => degree 2
* var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded
*
* var v = evalrational( P, Q, 6.0 ); // => ( -6*6^0 - 5*6^1 + 4*6^2 + 2*6^3 ) / ( 3*6^0 + 0.5*6^1 + 0*6^2 + 0*6^3 ) = (-6-30+144+432)/(3+3)
* // returns 90.0
*
* @example
* var evalrational = require( '@stdlib/math/base/tools/evalrational' );
*
* var P = [ 20.0, 8.0, 3.0 ];
* var Q = [ 10.0, 9.0, 1.0 ];
*
* var rational = evalrational.factory( P, Q );
*
* var v = rational( 10.0 ); // => (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2) = (20+80+300)/(10+90+100)
* // returns 2.0
*
* v = rational( 2.0 ); // => (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2) = (20+16+12)/(10+18+4)
* // returns 1.5
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalrational = require( './evalrational.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalrational, 'factory', factory );


// EXPORTS //

module.exports = evalrational;

},{"./evalrational.js":1357,"./factory.js":1358,"@stdlib/utils/define-read-only-property":1425}],1360:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/math/constants/float64-eps' );


// VARIABLES //

var MAX_TERMS = 1000000;


// MAIN //

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/
function sumSeries( generator, options ) {
	var nextTerm;
	var tolerance;
	var counter;
	var result;
	var opts;

	opts = {};

	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || TOLERANCE;
	counter = opts.maxTerms || MAX_TERMS;
	result = opts.initialValue || 0;

	// Repeatedly call function...
	do {
		nextTerm = generator();
		result += nextTerm;
	}
	while ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus

	return result;
} // end FUNCTION sum_series()


// EXPORTS //

module.exports = sumSeries;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/constants/float64-eps":1392}],1361:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/math/constants/float64-eps' );


// VARIABLES //

var MAX_TERMS = 1000000;


// MAIN //

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesGenerator( 0.9 );
* var out = sumSeries( gen );
* // returns 10
*
* function* geometricSeriesGenerator( x ) {
*     var exponent = 0;
*     while ( true ) {
*         yield Math.pow( x, exponent );
*         exponent += 1;
*     }
* }
*/
function sumSeries( generator, options ) {
	var isgenerator;
	var tolerance;
	var nextTerm;
	var counter;
	var result;
	var opts;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || TOLERANCE;
	counter = opts.maxTerms || MAX_TERMS;
	result = opts.initialValue || 0;

	isgenerator = typeof generator.next === 'function';
	if ( isgenerator === true ) {
		// Case A: Iterate over generator object created by a generator function...
		for ( nextTerm of generator ) {
			result += nextTerm;
			if (
				abs(tolerance * result) >= abs(nextTerm) ||
				--counter === 0 // eslint-disable-line no-plusplus
			) {
				break;
			}
		}
	} else {
		// Case B: Repeatedly call function...
		do {
			nextTerm = generator();
			result += nextTerm;
		}
		while ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus
	}
	return result;
} // end FUNCTION sumSeries()


// EXPORTS //

module.exports = sumSeries;

},{"@stdlib/math/base/special/abs":1183,"@stdlib/math/constants/float64-eps":1392}],1362:[function(require,module,exports){
'use strict';

/**
* Sum the elements of the series given by the supplied function.
*
* @module @stdlib/math/base/tools/sum-series
*
* @example
* var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
*
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/

// MODULES //

var hasGeneratorsSupport = require( '@stdlib/utils/detect-generator-support' )();


// EXPORTS //

module.exports = hasGeneratorsSupport ? require( './generators.js' ) : require( './basic.js' );

},{"./basic.js":1360,"./generators.js":1361,"@stdlib/utils/detect-generator-support":1427}],1363:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var EXP_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return high - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;

},{"@stdlib/math/base/utils/float64-get-high-word":1370,"@stdlib/math/constants/float64-exponent-bias":1394,"@stdlib/math/constants/float64-high-word-exponent-mask":1398}],1364:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-exponent
*
* @example
* var exponent = require( '@stdlib/math/base/utils/float64-exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './exponent.js' );


// EXPORTS //

module.exports = exponent;

},{"./exponent.js":1363}],1365:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":1367}],1366:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":1365}],1367:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":9}],1368:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
} // end FUNCTION getHighWord()


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":1369}],1369:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":9}],1370:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-high-word
*
* @example
* var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './get_high_word.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./get_high_word.js":1368}],1371:[function(require,module,exports){
'use strict';

// MODULES //

var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
} // end FUNCTION getLowWord()


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":1373}],1372:[function(require,module,exports){
'use strict';

/**
* Returns an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-low-word
*
* @example
* var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './get_low_word.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./get_low_word.js":1371}],1373:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":9}],1374:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/math/base/utils/float64-normalize
*
* @example
* var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*/

// MODULES //

var normalize = require( './normalize.js' );


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":1375}],1375:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - input value
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( 0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( Number.POSITIVE_INFINITY );
* // returns [ Number.POSITIVE_INFINITY, 0 ]
*
* @example
* var out = normalize( Number.NEGATIVE_INFINITY );
* // returns [ Number.NEGATIVE_INFINIY, 0 ]
*
* @example
* var out = normalize( NaN );
* // returns [ NaN, 0 ]
*/
function normalize( x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		return [ x*SCALAR, -52 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalize()


// EXPORTS //

module.exports = normalize;

},{"@stdlib/math/base/assert/is-infinite":39,"@stdlib/math/base/assert/is-nan":43,"@stdlib/math/base/special/abs":1183,"@stdlib/math/constants/float64-smallest-normal":1415}],1376:[function(require,module,exports){
arguments[4][1369][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":9,"dup":1369}],1377:[function(require,module,exports){
'use strict';

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-set-high-word
*
* @example
* var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var setHighWord = require( '@stdlib/math/base/utils/float64-set-high-word' );
* var PINF = require( '@stdlib/math/constants/float64-pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

// MODULES //

var setHighWord = require( './set_high_word.js' );


// EXPORTS //

module.exports = setHighWord;

},{"./set_high_word.js":1378}],1378:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/math/constants/float64-pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/
function setHighWord( x, high ) {
	FLOAT64_VIEW[ 0 ] = x;
	UINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION setHighWord()


// EXPORTS //

module.exports = setHighWord;

},{"./high.js":1376}],1379:[function(require,module,exports){
'use strict';

/**
* Set the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-set-low-word
*
* @example
* var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );
*
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var setLowWord = require( '@stdlib/math/base/utils/float64-set-low-word' );
* var PINF = require( '@stdlib/math/constants/float64-pinf' );
* var NINF = require( '@stdlib/math/constants/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/

// MODULES //

var setLowWord = require( './set_low_word.js' );


// EXPORTS //

module.exports = setLowWord;

},{"./set_low_word.js":1381}],1380:[function(require,module,exports){
arguments[4][1373][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":9,"dup":1373}],1381:[function(require,module,exports){
'use strict';

// MODULES //

var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Sets the less significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - double
* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`
* @returns {number} double having the same higher order word as `x`
*
* @example
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var PINF = require( '@stdlib/math/constants/float64-pinf' );
* var NINF = require( '@stdlib/math/constants/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/
function setLowWord( x, low ) {
	FLOAT64_VIEW[ 0 ] = x;
	UINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION setLowWord()


// EXPORTS //

module.exports = setLowWord;

},{"./low.js":1380}],1382:[function(require,module,exports){
'use strict';

/**
* Return a boolean indicating if the sign bit is on (true) or off (false).
*
* @module @stdlib/math/base/utils/float64-signbit
*
* @example
* var signbit = require( '@stdlib/math/base/utils/float64-signbit' );
*
* var bool = signbit( 4.0 );
* // returns false
*
* bool = signbit( -9.14e-307 );
* // returns true
*
* bool = signbit( 0.0 );
* // returns false
*
* bool = signbit( -0.0 );
* // returns true
*/

// MODULES //

var signbit = require( './signbit.js' );


// EXPORTS //

module.exports = signbit;

},{"./signbit.js":1383}],1383:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );


// MAIN //

/**
* Returns a boolean indicating if the sign bit is on (true) or off (false).
*
* @param {number} x - input value
* @returns {boolean} boolean indicating if sign bit is on or off
*
* @example
* var bool = signbit( 4.0 );
* // returns false
* @example
* var bool = signbit( -9.14e-307 );
* // returns true
* @example
* var bool = signbit( 0.0 );
* // returns false
* @example
* var bool = signbit( -0.0 );
* // returns true
*/
function signbit( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:
	var high = getHighWord( x );

	// Shift off all bits which are not the sign bit and check if the sign bit is on:
	return ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary
} // end FUNCTION signbit()


// EXPORTS //

module.exports = signbit;

},{"@stdlib/math/base/utils/float64-get-high-word":1370}],1384:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":1386}],1385:[function(require,module,exports){
arguments[4][1367][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":9,"dup":1367}],1386:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":1385}],1387:[function(require,module,exports){
'use strict';

/**
* Convert an unsigned 32-bit integer to a signed 32-bit integer.
*
* @module @stdlib/math/base/utils/uint32-to-int32
*
* @example
* var float64ToUint32 = require( '@stdlib/math/base/utils/float64-to-uint32' );
* var uint32ToInt32 = require( '@stdlib/math/base/utils/uint32-to-int32' );
*
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/

// MODULES //

var uint32ToInt32 = require( './uint32_to_int32.js' );


// EXPORTS //

module.exports = uint32ToInt32;

},{"./uint32_to_int32.js":1388}],1388:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Converts an unsigned 32-bit integer to a signed 32-bit integer.
*
* @param {uinteger32} x - unsigned 32-bit integer
* @returns {integer32} signed 32-bit integer
*
* @example
* var float64ToUint32 = require( '@stdlib/math/base/utils/float64-to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* @example
* var float64ToUint32 = require( '@stdlib/math/base/utils/float64-to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/
function uint32ToInt32( x ) {
	// NOTE: we could also use typed-arrays to achieve the same end.
	return x|0; // asm type annotation
} // end FUNCTION uint32ToInt32()


// EXPORTS //

module.exports = uint32ToInt32;

},{}],1389:[function(require,module,exports){
'use strict';

/**
* Maximum single-precision floating-point number.
*
* @module @stdlib/math/constants/float32-max
* @type {number}
*
* @example
* var FLOAT32_MAX = require( '@stdlib/math/constants/float32-max' );
* // returns 3.4028234663852886e+38
*/


// MAIN //

/**
* The maximum single-precision floating-point number is given by
*
* ``` tex
* 2^{127} (2 - 2^{-23})
* ```
*
* @constant
* @type {number}
* @default 3.4028234663852886e+38
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_MAX = 3.4028234663852886e+38;


// EXPORTS //

module.exports = FLOAT32_MAX;

},{}],1390:[function(require,module,exports){
'use strict';

/**
* Smallest positive single-precision floating-point normal number.
*
* @module @stdlib/math/constants/float32-smallest-normal
* @type {number}
*
* @example
* var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/math/constants/float32-smallest-normal' );
* // returns 1.1754943508222875e-38
*/


// MAIN //

/**
* The smallest positive single-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{127-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000001 00000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 1.1754943508222875e-38
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;


// EXPORTS //

module.exports = FLOAT32_SMALLEST_NORMAL;


},{}],1391:[function(require,module,exports){
'use strict';

/**
* Euler's number.
*
* @module @stdlib/math/constants/float64-e
* @type {number}
*
* @example
* var E = require( '@stdlib/math/constants/float64-e' );
* // returns 2.718281828459045
*/


// MAIN //

/**
* Euler's number.
*
* @constant
* @type {number}
* @default 2.718281828459045
* @see [OEIS]{@link https://oeis.org/A001113}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}
*/

var E = 2.718281828459045235360287471352662497757247093699959574966;


// EXPORTS //

module.exports = E;

},{}],1392:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],1393:[function(require,module,exports){
'use strict';

/**
* The Euler-Mascheroni constant.
*
* @module @stdlib/math/constants/float64-eulergamma
* @type {number}
*
* @example
* var GAMMA = require( '@stdlib/math/constants/float64-eulergamma' );
* // returns 0.5772156649015329
*/


// MAIN //

/**
* The Euler-Mascheroni constant.
*
* @constant
* @type {number}
* @default 0.5772156649015329
* @see [OEIS]{@link http://oeis.org/A001620}
* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}
*/
var GAMMA = 0.577215664901532860606512090082402431042;


// EXPORTS //

module.exports = GAMMA;

},{}],1394:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],1395:[function(require,module,exports){
'use strict';

/**
* One fourth times the mathematical constant `π`.
*
* @module @stdlib/math/constants/float64-fourth-pi
* @type {number}
*
* @example
* var FOURTH_PI = require( '@stdlib/math/constants/float64-fourth-pi' );
* // returns 7.85398163397448309616e-1
*/


// MAIN //

/**
* One fourth times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 7.85398163397448309616e-1
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var FOURTH_PI = 7.85398163397448309616e-1;


// EXPORTS //

module.exports = FOURTH_PI;

},{}],1396:[function(require,module,exports){
'use strict';

/**
* One half times the natural logarithm of 2.
*
* @module @stdlib/math/constants/float64-half-ln-two
* @type {number}
*
* @example
* var HALF_LN2 = require( '@stdlib/math/constants/float64-half_ln2' );
* // returns 3.46573590279972654709e-01
*/


// MAIN //

/**
* One half times the natural logarithm of 2.
*
* ``` tex
* \frac{\ln 2}{2}
* ```
*
* @constant
* @type {number}
* @default 3.46573590279972654709e-01
*/
var HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF


// EXPORTS //

module.exports = HALF_LN2;

},{}],1397:[function(require,module,exports){
'use strict';

/**
* One half times the mathematical constant `π`.
*
* @module @stdlib/math/constants/float64-half-pi
* @type {number}
*
* @example
* var HALF_PI = require( '@stdlib/math/constants/float64-half-pi' );
* // returns 1.5707963267948966
*/


// MAIN //

/**
* One half times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.5707963267948966
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var HALF_PI = 1.5707963267948966;


// EXPORTS //

module.exports = HALF_PI;

},{}],1398:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],1399:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of `1/2`.
*
* @module @stdlib/math/constants/float64-ln-half
* @type {number}
*
* @example
* var LN_HALF = require( '@stdlib/math/constants/float64-ln-half' );
* // returns -0.6931471805599453
*/


// MAIN //

/**
* Natural logarithm of `1/2`.
*
* ``` tex
* \ln (1/2)
* ```
*
* @constant
* @type {number}
* @default -0.6931471805599453
*/
var LN_HALF = -0.69314718055994530941723212145817656807550013436025525412;


// EXPORTS //

module.exports = LN_HALF;

},{}],1400:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the mathematical constant `π`.
*
* @module @stdlib/math/constants/float64-ln-pi
* @type {number}
*
* @example
* var LN_PI = require( '@stdlib/math/constants/float64-ln-pi' );
* // returns 1.1447298858494002
*/


// MAIN //

/**
* Natural logarithm of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.1447298858494002
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var LN_PI = 1.1447298858494002;


// EXPORTS //

module.exports = LN_PI;

},{}],1401:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the square root of `2π`.
*
* @module @stdlib/math/constants/float64-ln-sqrt-two-pi
* @type {number}
*
* @example
* var LN_SQRT_TWO_PI = require( '@stdlib/math/constants/float64-ln-sqrt-two-pi' );
* // returns 0.9189385332046728
*/


// MAIN //

/**
* Natural logarithm of the square root of `2π`.
*
* ``` tex
* \ln \sqrt{2\pi}
* ```
*
* @constant
* @type {number}
* @default 0.9189385332046728
*/
var LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len


// EXPORTS //

module.exports = LN_SQRT_TWO_PI;

},{}],1402:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of `2π`.
*
* @module @stdlib/math/constants/float64-ln-two-pi
* @type {number}
*
* @example
* var LN_TWO_PI = require( '@stdlib/math/constants/float64-ln-two-pi' );
* // returns 1.8378770664093456
*/


// MAIN //

/**
* Natural logarithm of `2π`.
*
* ``` tex
* \ln 2\pi
* ```
*
* @constant
* @type {number}
* @default 1.8378770664093456
*/
var LN_TWO_PI = 1.837877066409345483560659472811235279722794947275566825634; // eslint-disable-line max-len


// EXPORTS //

module.exports = LN_TWO_PI;

},{}],1403:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of `2`.
*
* @module @stdlib/math/constants/float64-ln-two
* @type {number}
*
* @example
* var LN2 = require( '@stdlib/math/constants/float64-ln-two' );
* // returns 0.6931471805599453
*/


// MAIN //

/**
* Natural logarithm of `2`.
*
* ``` tex
* \ln 2
* ```
*
* @constant
* @type {number}
* @default 0.6931471805599453
*/
var LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len


// EXPORTS //

module.exports = LN2;

},{}],1404:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],1405:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ``` text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],1406:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-ln
* @type {number}
*
* @example
* var FLOAT64_MAX_LN = require( '@stdlib/math/constants/float64-max-ln' );
* // returns 709.782712893384
*/


// MAIN //

/**
* The natural logarithm of the maximum double-precision floating-point number is given by
*
* ``` tex
* \ln \left( 2^{1023} (2 - 2^{-52}) \right)
* ```
*
* @constant
* @type {number}
* @default 709.782712893384
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_LN = 709.782712893384;


// EXPORTS //

module.exports = FLOAT64_MAX_LN;

},{}],1407:[function(require,module,exports){
'use strict';

/**
* Maximum safe double-precision floating-point integer.
*
* @module @stdlib/math/constants/float64-max-safe-integer
* @type {number}
*
* @example
* var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/math/constants/float64-max-safe-integer' );
* // returns 9007199254740991
*/


// MAIN //

/**
* The maximum safe double-precision floating-point integer is given by
*
* ``` tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;


// EXPORTS //

module.exports = FLOAT64_MAX_SAFE_INTEGER;

},{}],1408:[function(require,module,exports){
'use strict';

/**
* Maximum double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max
* @type {number}
*
* @example
* var FLOAT64_MAX = require( '@stdlib/math/constants/float64-max' );
* // returns 1.7976931348623157e+308
*/


// MAIN //

/**
* The maximum double-precision floating-point number is given by
*
* ``` tex
* 2^{1023} (2 - 2^{-52})
* ```
*
* @constant
* @type {number}
* @default 1.7976931348623157e+308
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX = 1.7976931348623157e+308;


// EXPORTS //

module.exports = FLOAT64_MAX;

},{}],1409:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],1410:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-ln
* @type {number}
*
* @example
* var FLOAT64_MIN_LN = require( '@stdlib/math/constants/float64-min-ln' );
* // returns -708.3964185322641
*/


// MAIN //

/**
* The natural logarithm of the smallest normalized double-precision floating-point number is given by
*
* ``` tex
* -\ln \left( 2^{1023-1} \right)
* ```
*
* @constant
* @type {number}
* @default -708.3964185322641
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_LN = -708.3964185322641;


// EXPORTS //

module.exports = FLOAT64_MIN_LN;

},{}],1411:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],1412:[function(require,module,exports){
'use strict';

/**
* Square of the mathematical constant `π`.
*
* @module @stdlib/math/constants/float64-pi-squared
* @type {number}
*
* @example
* var PI_SQUARED = require( '@stdlib/math/constants/float64-pi-squared' );
* // returns 9.869604401089358
*/


// MAIN //

/**
* Square of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 9.869604401089358
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI_SQUARED = 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377; // eslint-disable-line max-len


// EXPORTS //

module.exports = PI_SQUARED;

},{}],1413:[function(require,module,exports){
'use strict';

/**
* The mathematical constant `π`.
*
* @module @stdlib/math/constants/float64-pi
* @type {number}
*
* @example
* var PI = require( '@stdlib/math/constants/float64-pi' );
* // returns 3.141592653589793
*/


// MAIN //

/**
* The mathematical constant `π`.
*
* @constant
* @type {number}
* @default 3.141592653589793
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len


// EXPORTS //

module.exports = PI;

},{}],1414:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],1415:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/math/constants/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],1416:[function(require,module,exports){
'use strict';

/**
* Square root of double-precision floating-point epsilon.
*
* @module @stdlib/math/constants/float64-sqrt-eps
* @type {number}
*
* @example
* var FLOAT64_SQRT_EPSILON = require( '@stdlib/math/constants/float64-sqrt-eps' );
* // returns 0.14901161193847656e-7
*/


// MAIN //

/**
* Square root of double-precision floating-point epsilon.
*
* ``` tex
* \sqrt{\frac{1}{2^{52}}}
* ```
*
* @constant
* @type {number}
* @default 0.14901161193847656e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;


// EXPORTS //

module.exports = FLOAT64_SQRT_EPSILON;

},{}],1417:[function(require,module,exports){
'use strict';

/**
* Square root of the mathematical constant `π` divided by `2`.
*
* @module @stdlib/math/constants/float64-sqrt-half-pi
* @type {number}
*
* @example
* var SQRT_HALF_PI = require( '@stdlib/math/constants/float64-sqrt-half-pi' );
* // returns 1.2533141373155003
*/


// MAIN //

/**
* Square root of the mathematical constant `π` divided by `2`.
*
* @constant
* @type {number}
* @default 1.2533141373155003
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_HALF_PI = 1.253314137315500251207882642405522626503493370304969158314;


// EXPORTS //

module.exports = SQRT_HALF_PI;

},{}],1418:[function(require,module,exports){
'use strict';

/**
* Square root of the mathematical constant `π`.
*
* @module @stdlib/math/constants/float64-sqrt-pi
* @type {number}
*
* @example
* var SQRT_PI = require( '@stdlib/math/constants/float64-sqrt-pi' );
* // returns 1.7724538509055160
*/


// MAIN //

/**
* Square root of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.7724538509055160
* @see [OEIS]{@link https://oeis.org/A002161}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;


// EXPORTS //

module.exports = SQRT_PI;

},{}],1419:[function(require,module,exports){
'use strict';

/**
* Square root of `3`.
*
* @module @stdlib/math/constants/float64-sqrt-three
* @type {number}
*
* @example
* var SQRT3 = require( '@stdlib/math/constants/float64-sqrt-three' );
* // returns 1.7320508075688772
*/


// MAIN //

/**
* Square root of `3`.
*
* ``` tex
* \sqrt{3}
* ```
*
* @constant
* @type {number}
* @default 1.7320508075688772
*/
var SQRT3 = 1.732050807568877293527446341505872366942805253810380628055e+00; // eslint-disable-line max-len


// EXPORTS //

module.exports = SQRT3;

},{}],1420:[function(require,module,exports){
'use strict';

/**
* Square root of the mathematical constant `π` times `2`.
*
* @module @stdlib/math/constants/float64-sqrt-two-pi
* @type {number}
*
* @example
* var SQRT_TWO_PI = require( '@stdlib/math/constants/float64-sqrt-two-pi' );
* // returns 2.5066282746310007
*/


// MAIN //

/**
* Square root of the mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 2.5066282746310007
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;


// EXPORTS //

module.exports = SQRT_TWO_PI;

},{}],1421:[function(require,module,exports){
'use strict';

/**
* Square root of `2`.
*
* @module @stdlib/math/constants/float64-sqrt-two
* @type {number}
*
* @example
* var SQRT2 = require( '@stdlib/math/constants/float64-sqrt-two' );
* // returns 1.4142135623730951
*/


// MAIN //

/**
* Square root of `2`.
*
* ``` tex
* \sqrt{2}
* ```
*
* @constant
* @type {number}
* @default 1.4142135623730951
*/
var SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len


// EXPORTS //

module.exports = SQRT2;

},{}],1422:[function(require,module,exports){
'use strict';

/**
* The mathematical constant `π` times `2`.
*
* @module @stdlib/math/constants/float64-two-pi
* @type {number}
*
* @example
* var TWO_PI = require( '@stdlib/math/constants/float64-two-pi' );
* // returns 6.283185307179586
*/


// MAIN //

/**
* The mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 6.283185307179586
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len


// EXPORTS //

module.exports = TWO_PI;

},{}],1423:[function(require,module,exports){
'use strict';

/**
* Maximum signed 32-bit integer.
*
* @module @stdlib/math/constants/int32-max
* @type {integer32}
*
* @example
* var INT32_MAX = require( '@stdlib/math/constants/int32-max' );
* // returns 2147483647
*/


// MAIN //

/**
* The maximum signed 32-bit integer is given by
*
* ``` tex
* 2^{31} - 1
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 01111111111111111111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 2147483647
*/
var INT32_MAX = 2147483647|0; // asm type annotation


// EXPORTS //

module.exports = INT32_MAX;

},{}],1424:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],1425:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":1424}],1426:[function(require,module,exports){
'use strict';

// MODULES //

var evil = require( '@stdlib/utils/eval' );


// MAIN //

/**
* Tests for native `function*()` support.
*
* @returns {boolean} boolean indicating if an environment has native `function*()` support
*
* @example
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/
function hasGeneratorSupport() {
	var bool;
	try {
		evil( '"use strict"; (function* () {})' );
		bool = true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
} // end FUNCTION hasGeneratorSupport()


// EXPORTS //

module.exports = hasGeneratorSupport;

},{"@stdlib/utils/eval":1432}],1427:[function(require,module,exports){
'use strict';

/**
* Tests for native `function*()` support.
*
* @module @stdlib/utils/detect-generator-support
*
* @example
* var hasGeneratorSupport = require( '@stdlib/utils/detect-generator-support' );
*
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/

// MODULES //

var hasGeneratorSupport = require( './detect_generator_support.js' );


// EXPORTS //

module.exports = hasGeneratorSupport;

},{"./detect_generator_support.js":1426}],1428:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
} // end FUNCTION hasSymbolSupport()


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],1429:[function(require,module,exports){
'use strict';

/**
* Tests for native `Symbol` support.
*
* @module @stdlib/utils/detect-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/utils/detect-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var hasSymbolSupport = require( './detect_symbol_support.js' );


// EXPORTS //

module.exports = hasSymbolSupport;

},{"./detect_symbol_support.js":1428}],1430:[function(require,module,exports){
'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( hasSymbols && typeof Symbol.toStringTag === 'symbol' );
} // end FUNCTION hasToStringTagSupport()


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/utils/detect-symbol-support":1429}],1431:[function(require,module,exports){
'use strict';

/**
* Tests for native `toStringTag` support.
*
* @module @stdlib/utils/detect-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/utils/detect-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var hasToStringTagSupport = require( './has_tostringtag_support.js' );


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"./has_tostringtag_support.js":1430}],1432:[function(require,module,exports){
/* eslint-disable no-eval */
'use strict';

/**
* Alias for `eval` global.
*
* @module @stdlib/utils/eval
*
* @example
* var evil = require( '@stdlib/utils/@stdlib/utils/eval' );
*
* var v = evil( '5*4*3*2*1' );
* // returns 120
*/

// MODULES //

var evil = eval;


// EXPORTS //

module.exports = evil;

},{}],1433:[function(require,module,exports){
'use strict';

/**
* Returns a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();


// MAIN //

var nativeClass;
if ( hasToStringTag ) {
	nativeClass = require( './polyfill.js' );
} else {
	nativeClass = require( './native_class.js' );
}


// EXPORTS //

module.exports = nativeClass;

},{"./native_class.js":1434,"./polyfill.js":1435,"@stdlib/utils/detect-tostringtag-support":1431}],1434:[function(require,module,exports){
'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
} // end FUNCTION nativeClass()


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":1436}],1435:[function(require,module,exports){
'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
} // end FUNCTION nativeClass()


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":1436,"./tostringtag.js":1437,"@stdlib/assert/has-own-property":2}],1436:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = Object.prototype.toString; // eslint-disable-line no-redeclare

},{}],1437:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';

},{}],1438:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],1439:[function(require,module,exports){

},{}],1440:[function(require,module,exports){
arguments[4][1439][0].apply(exports,arguments)
},{"dup":1439}],1441:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],1442:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":1438,"ieee754":1463}],1443:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":1465}],1444:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))
},{"./debug":1445,"_process":1441}],1445:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":1467}],1446:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":1447,"./lib/keys.js":1448}],1447:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],1448:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],1449:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":1459,"object-keys":1469}],1450:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],1451:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":1452,"./helpers/isNaN":1453,"./helpers/mod":1454,"./helpers/sign":1455,"es-to-primitive/es5":1456,"has":1462,"is-callable":1466}],1452:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],1453:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],1454:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],1455:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],1456:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":1457,"is-callable":1466}],1457:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],1458:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],1459:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],1460:[function(require,module,exports){
var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],1461:[function(require,module,exports){
var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":1460}],1462:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":1461}],1463:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],1464:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],1465:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],1466:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],1467:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],1468:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],1469:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":1470}],1470:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],1471:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":1441}],1472:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":1441}],1473:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":1474}],1474:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":1476,"./_stream_writable":1478,"core-util-is":1443,"inherits":1464,"process-nextick-args":1472}],1475:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":1477,"core-util-is":1443,"inherits":1464}],1476:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":1474,"./internal/streams/BufferList":1479,"./internal/streams/destroy":1480,"./internal/streams/stream":1481,"_process":1441,"core-util-is":1443,"events":1458,"inherits":1464,"isarray":1482,"process-nextick-args":1472,"safe-buffer":1489,"string_decoder/":1483,"util":1439}],1477:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":1474,"core-util-is":1443,"inherits":1464}],1478:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":1474,"./internal/streams/destroy":1480,"./internal/streams/stream":1481,"_process":1441,"core-util-is":1443,"inherits":1464,"process-nextick-args":1472,"safe-buffer":1489,"util-deprecate":1501}],1479:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":1489}],1480:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":1472}],1481:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":1458}],1482:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],1483:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":1489}],1484:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":1485}],1485:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":1474,"./lib/_stream_passthrough.js":1475,"./lib/_stream_readable.js":1476,"./lib/_stream_transform.js":1477,"./lib/_stream_writable.js":1478}],1486:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":1485}],1487:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":1478}],1488:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":1441,"through":1500}],1489:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":1442}],1490:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":1458,"inherits":1464,"readable-stream/duplex.js":1473,"readable-stream/passthrough.js":1484,"readable-stream/readable.js":1485,"readable-stream/transform.js":1486,"readable-stream/writable.js":1487}],1491:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":1451,"function-bind":1461}],1492:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":1491,"./polyfill":1493,"./shim":1494,"define-properties":1449,"function-bind":1461}],1493:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":1491}],1494:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":1493,"define-properties":1449}],1495:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":1496,"./lib/results":1498,"./lib/test":1499,"_process":1441,"defined":1450,"through":1500}],1496:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":1441,"fs":1440,"through":1500}],1497:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":1441}],1498:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":1441,"events":1458,"function-bind":1461,"has":1462,"inherits":1464,"object-inspect":1468,"resumer":1488,"through":1500}],1499:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":1497,"deep-equal":1446,"defined":1450,"events":1458,"has":1462,"inherits":1464,"path":1471,"string.prototype.trim":1492}],1500:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":1441,"stream":1490}],1501:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[1058]);
