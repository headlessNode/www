// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

// MAIN //

var ctor = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

var hasFloat64ArraySupport = require( '@stdlib/utils/detect-float64array-support' );
var builtin = require( './float64array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat64ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./float64array.js":1,"./polyfill.js":3,"@stdlib/utils/detect-float64array-support":1940}],3:[function(require,module,exports){
'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],4:[function(require,module,exports){
'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

var hasUint16ArraySupport = require( '@stdlib/utils/detect-uint16array-support' );
var builtin = require( './uint16array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint16ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":5,"./uint16array.js":6,"@stdlib/utils/detect-uint16array-support":1948}],5:[function(require,module,exports){
'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],6:[function(require,module,exports){
'use strict';

// MAIN //

var ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],7:[function(require,module,exports){
'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

var hasUint32ArraySupport = require( '@stdlib/utils/detect-uint32array-support' );
var builtin = require( './uint32array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":8,"./uint32array.js":9,"@stdlib/utils/detect-uint32array-support":1951}],8:[function(require,module,exports){
'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],9:[function(require,module,exports){
'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],10:[function(require,module,exports){
'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

var hasUint8ArraySupport = require( '@stdlib/utils/detect-uint8array-support' );
var builtin = require( './uint8array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint8ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":11,"./uint8array.js":12,"@stdlib/utils/detect-uint8array-support":1954}],11:[function(require,module,exports){
'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],12:[function(require,module,exports){
'use strict';

// MAIN //

var ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],13:[function(require,module,exports){
'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

module.exports = hasOwnProp;

},{}],14:[function(require,module,exports){
'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var hasOwnProp = require( './has_own_property.js' );


// EXPORTS //

module.exports = hasOwnProp;

},{"./has_own_property.js":13}],15:[function(require,module,exports){
'use strict';

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

// MODULES //

var isArray = require( './is_array.js' );


// EXPORTS //

module.exports = isArray;

},{"./is_array.js":16}],16:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/
function isArray( value ) {
	return ( nativeClass( value ) === '[object Array]' );
}


// EXPORTS //

module.exports = Array.isArray || isArray;

},{"@stdlib/utils/native-class":1957}],17:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a Buffer instance.
*
* @module @stdlib/assert/is-buffer
*
* @example
* var isBuffer = require( '@stdlib/assert/is-buffer' );
*
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* v = isBuffer( {} );
* // returns false
*/

// MODULES //

var isBuffer = require( './is_buffer.js' );


// EXPORTS //

module.exports = isBuffer;

},{"./is_buffer.js":18}],18:[function(require,module,exports){
'use strict';

// MODULES //

var isObjectLike = require( '@stdlib/assert/is-object-like' );


// MAIN //

/**
* Tests if a value is a Buffer instance.
*
* @param {*} value - value to validate
* @returns {boolean} boolean indicating if a value is a Buffer instance
*
* @example
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* @example
* var v = isBuffer( new Buffer( [1,2,3,4] ) );
* // returns true
*
* @example
* var v = isBuffer( {} );
* // returns false
*
* @example
* var v = isBuffer( [] );
* // returns false
*/
function isBuffer( value ) {
	return (
		isObjectLike( value ) &&
		(
			// eslint-disable-next-line no-underscore-dangle
			value._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)
			(
				value.constructor &&

				// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions
				typeof value.constructor.isBuffer === 'function' &&
				value.constructor.isBuffer( value )
			)
		)
	);
}


// EXPORTS //

module.exports = isBuffer;

},{"@stdlib/assert/is-object-like":45}],19:[function(require,module,exports){
'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

var isFloat64Array = require( './is_float64array.js' );


// EXPORTS //

module.exports = isFloat64Array;

},{"./is_float64array.js":20}],20:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return ( nativeClass( value ) === '[object Float64Array]' );
}


// EXPORTS //

module.exports = isFloat64Array;

},{"@stdlib/utils/native-class":1957}],21:[function(require,module,exports){
'use strict';

/**
* Test if a value is a function.
*
* @module @stdlib/assert/is-function
*
* @example
* var isFunction = require( '@stdlib/assert/is-function' );
*
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

// MODULES //

var isFunction = require( './is_function.js' );


// EXPORTS //

module.exports = isFunction;

},{"./is_function.js":22}],22:[function(require,module,exports){
'use strict';

// MODULES //

var typeOf = require( '@stdlib/utils/type-of' );


// MAIN //

/**
* Tests if a value is a function.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a function
*
* @example
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/
function isFunction( value ) {
	// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.
	return ( typeOf( value ) === 'function' );
}


// EXPORTS //

module.exports = isFunction;

},{"@stdlib/utils/type-of":1966}],23:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is an integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an integer
*
* @example
* var bool = isInteger( 5.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isInteger( -3.14 );
* // returns false
*
* @example
* var bool = isInteger( null );
* // returns false
*/
function isInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isInteger;

},{"./object.js":26,"./primitive.js":27}],24:[function(require,module,exports){
'use strict';

/**
* Test if a value is an integer.
*
* @module @stdlib/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/assert/is-integer' );
*
* var bool = isInteger( 5.0 );
* // returns true
*
* bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isInteger( -3.14 );
* // returns false
*
* bool = isInteger( null );
* // returns false
*
* @example
* // Use interface to check for integer primitives...
* var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
*
* var bool = isInteger( -3.0 );
* // returns true
*
* bool = isInteger( new Number( -3.0 ) );
* // returns false
*
* @example
* // Use interface to check for integer objects...
* var isInteger = require( '@stdlib/assert/is-integer' ).isObject;
*
* var bool = isInteger( 3.0 );
* // returns false
*
* bool = isInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isInteger, 'isPrimitive', isPrimitive );
setReadOnly( isInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isInteger;

},{"./generic.js":23,"./object.js":26,"./primitive.js":27,"@stdlib/utils/define-read-only-property":1937}],25:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var isInt = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Tests if a number primitive is an integer value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a number primitive is an integer value
*/
function isInteger( value ) {
	return (
		value < PINF &&
		value > NINF &&
		isInt( value )
	);
}


// EXPORTS //

module.exports = isInteger;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-integer":126}],26:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;
var isInt = require( './integer.js' );


// MAIN //

/**
* Tests if a value is a number object having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having an integer value
*
* @example
* var bool = isInteger( 3.0 );
* // returns false
*
* @example
* var bool = isInteger( new Number( 3.0 ) );
* // returns true
*/
function isInteger( value ) {
	return (
		isNumber( value ) &&
		isInt( value.valueOf() )
	);
}


// EXPORTS //

module.exports = isInteger;

},{"./integer.js":25,"@stdlib/assert/is-number":40}],27:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isInt = require( './integer.js' );


// MAIN //

/**
* Tests if a value is a number primitive having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having an integer value
*
* @example
* var bool = isInteger( -3.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( -3.0 ) );
* // returns false
*/
function isInteger( value ) {
	return (
		isNumber( value ) &&
		isInt( value )
	);
}


// EXPORTS //

module.exports = isInteger;

},{"./integer.js":25,"@stdlib/assert/is-number":40}],28:[function(require,module,exports){
'use strict';

// MODULES //

var Uint8Array = require( '@stdlib/array/uint8' );
var Uint16Array = require( '@stdlib/array/uint16' );


// MAIN //

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{"@stdlib/array/uint16":4,"@stdlib/array/uint8":10}],29:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":30}],30:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":28}],31:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( null );
* // returns false
*/
function isnan( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isnan;

},{"./object.js":33,"./primitive.js":34}],32:[function(require,module,exports){
'use strict';

/**
* Test if a value is `NaN`.
*
* @module @stdlib/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( new Number( NaN ) );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( null );
* // returns false
*
* @example
* // Use interface to check for `NaN` primitives...
* var isnan = require( '@stdlib/assert/is-nan' ).isPrimitive;
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns false
*
* @example
* // Use interface to check for `NaN` objects...
* var isnan = require( '@stdlib/assert/is-nan' ).isObject;
*
* var bool = isnan( NaN );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isnan = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isnan, 'isPrimitive', isPrimitive );
setReadOnly( isnan, 'isObject', isObject );


// EXPORTS //

module.exports = isnan;

},{"./generic.js":31,"./object.js":33,"./primitive.js":34,"@stdlib/utils/define-read-only-property":1937}],33:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;
var isNan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Tests if a value is a number object having a value of `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*/
function isnan( value ) {
	return (
		isNumber( value ) &&
		isNan( value.valueOf() )
	);
}


// EXPORTS //

module.exports = isnan;

},{"@stdlib/assert/is-number":40,"@stdlib/math/base/assert/is-nan":128}],34:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isNan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Tests if a value is a `NaN` number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `NaN` number primitive
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns false
*/
function isnan( value ) {
	return (
		isNumber( value ) &&
		isNan( value )
	);
}


// EXPORTS //

module.exports = isnan;

},{"@stdlib/assert/is-number":40,"@stdlib/math/base/assert/is-nan":128}],35:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a nonnegative integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( null );
* // returns false
*/
function isNonNegativeInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"./object.js":37,"./primitive.js":38}],36:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a nonnegative integer.
*
* @module @stdlib/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* bool = isNonNegativeInteger( null );
* // returns false
*
* @example
* // Use interface to check for nonnegative integer primitives...
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for nonnegative integer objects...
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isObject;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNonNegativeInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isNonNegativeInteger, 'isPrimitive', isPrimitive );
setReadOnly( isNonNegativeInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"./generic.js":35,"./object.js":37,"./primitive.js":38,"@stdlib/utils/define-read-only-property":1937}],37:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/
function isNonNegativeInteger( value ) {
	return (
		isInteger( value ) &&
		value.valueOf() >= 0
	);
}


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"@stdlib/assert/is-integer":24}],38:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*/
function isNonNegativeInteger( value ) {
	return (
		isInteger( value ) &&
		value >= 0
	);
}


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"@stdlib/assert/is-integer":24}],39:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a number
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* @example
* bool = isNumber( NaN );
* // returns true
*
* @example
* bool = isNumber( null );
* // returns false
*/
function isNumber( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isNumber;

},{"./object.js":41,"./primitive.js":42}],40:[function(require,module,exports){
'use strict';

/**
* Test if a value is a number.
*
* @module @stdlib/assert/is-number
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' );
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( null );
* // returns false
*
* @example
* // Use interface to check for number primitives...
* var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns false
*
* @example
* // Use interface to check for number objects...
* var isNumber = require( '@stdlib/assert/is-number' ).isObject;
*
* var bool = isNumber( 3.14 );
* // returns false
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isNumber, 'isPrimitive', isPrimitive );
setReadOnly( isNumber, 'isObject', isObject );


// EXPORTS //

module.exports = isNumber;

},{"./generic.js":39,"./object.js":41,"./primitive.js":42,"@stdlib/utils/define-read-only-property":1937}],41:[function(require,module,exports){
'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();
var nativeClass = require( '@stdlib/utils/native-class' );
var test = require( './try2serialize.js' );


// MAIN //

/**
* Tests if a value is a number object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object
*
* @example
* var bool = isNumber( 3.14 );
* // returns false
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*/
function isNumber( value ) {
	if ( typeof value === 'object' ) {
		if ( hasToStringTag ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object Number]' );
	}
	return false;
}


// EXPORTS //

module.exports = isNumber;

},{"./try2serialize.js":44,"@stdlib/utils/detect-tostringtag-support":1946,"@stdlib/utils/native-class":1957}],42:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns false
*/
function isNumber( value ) {
	return ( typeof value === 'number' );
}


// EXPORTS //

module.exports = isNumber;

},{}],43:[function(require,module,exports){
'use strict';

// eslint-disable-next-line stdlib/no-redeclare
var toString = Number.prototype.toString; // non-generic


// EXPORTS //

module.exports = toString;

},{}],44:[function(require,module,exports){
'use strict';

// MODULES //

var toString = require( './tostring.js' ); // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		toString.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

module.exports = test;

},{"./tostring.js":43}],45:[function(require,module,exports){
'use strict';

/**
* Test if a value is object-like.
*
* @module @stdlib/assert/is-object-like
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' );
*
* var bool = isObjectLike( {} );
* // returns true
*
* bool = isObjectLike( [] );
* // returns true
*
* bool = isObjectLike( null );
* // returns false
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' ).isObjectLikeArray;
*
* var bool = isObjectLike( [ {}, [] ] );
* // returns true
*
* bool = isObjectLike( [ {}, '3.0' ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-function' );
var isObjectLike = require( './is_object_like.js' );


// MAIN //

setReadOnly( isObjectLike, 'isObjectLikeArray', arrayfun( isObjectLike ) );


// EXPORTS //

module.exports = isObjectLike;

},{"./is_object_like.js":46,"@stdlib/assert/tools/array-function":66,"@stdlib/utils/define-read-only-property":1937}],46:[function(require,module,exports){
'use strict';

/**
* Tests if a value is object-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is object-like
*
* @example
* var bool = isObjectLike( {} );
* // returns true
*
* @example
* var bool = isObjectLike( [] );
* // returns true
*
* @example
* var bool = isObjectLike( null );
* // returns false
*/
function isObjectLike( value ) {
	return (
		value !== null &&
		typeof value === 'object'
	);
}


// EXPORTS //

module.exports = isObjectLike;

},{}],47:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a positive integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive integer
*
* @example
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( 3.14 );
* // returns false
*
* @example
* var bool = isPositiveInteger( null );
* // returns false
*/
function isPositiveInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isPositiveInteger;

},{"./object.js":49,"./primitive.js":50}],48:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a positive integer.
*
* @module @stdlib/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveInteger( -5.0 );
* // returns false
*
* bool = isPositiveInteger( 3.14 );
* // returns false
*
* bool = isPositiveInteger( null );
* // returns false
*
* @example
* // Use interface to check for positive integer primitives...
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
*
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for positive integer objects...
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isObject;
*
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isPositiveInteger, 'isPrimitive', isPrimitive );
setReadOnly( isPositiveInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isPositiveInteger;

},{"./generic.js":47,"./object.js":49,"./primitive.js":50,"@stdlib/utils/define-read-only-property":1937}],49:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/
function isPositiveInteger( value ) {
	return (
		isInteger( value ) &&
		value.valueOf() > 0.0
	);
}


// EXPORTS //

module.exports = isPositiveInteger;

},{"@stdlib/assert/is-integer":24}],50:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*/
function isPositiveInteger( value ) {
	return (
		isInteger( value ) &&
		value > 0.0
	);
}


// EXPORTS //

module.exports = isPositiveInteger;

},{"@stdlib/assert/is-integer":24}],51:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a positive number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive number
*
* @example
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveNumber( 3.14 );
* // returns true
*
* @example
* var bool = isPositiveNumber( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( null );
* // returns false
*/
function isPositiveNumber( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isPositiveNumber;

},{"./object.js":53,"./primitive.js":54}],52:[function(require,module,exports){
'use strict';

/**
* Test if a value is a positive number.
*
* @module @stdlib/assert/is-positive-number
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' );
*
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveNumber( 3.14 );
* // returns true
*
* bool = isPositiveNumber( -5.0 );
* // returns false
*
* bool = isPositiveNumber( null );
* // returns false
*
* @example
* // Use interface to check for positive number primitives...
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
*
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for positive number objects...
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isObject;
*
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveNumber = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isPositiveNumber, 'isPrimitive', isPrimitive );
setReadOnly( isPositiveNumber, 'isObject', isObject );


// EXPORTS //

module.exports = isPositiveNumber;

},{"./generic.js":51,"./object.js":53,"./primitive.js":54,"@stdlib/utils/define-read-only-property":1937}],53:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/
function isPositiveNumber( value ) {
	return (
		isNumber( value ) &&
		value.valueOf() > 0.0
	);
}


// EXPORTS //

module.exports = isPositiveNumber;

},{"@stdlib/assert/is-number":40}],54:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*/
function isPositiveNumber( value ) {
	return (
		isNumber( value ) &&
		value > 0.0
	);
}


// EXPORTS //

module.exports = isPositiveNumber;

},{"@stdlib/assert/is-number":40}],55:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( -5.0 );
* // returns false
*
* @example
* var bool = isProbability( null );
* // returns false
*/
function isProbability( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isProbability;

},{"./object.js":57,"./primitive.js":58}],56:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a probability.
*
* @module @stdlib/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( -5.0 );
* // returns false
*
* bool = isProbability( null );
* // returns false
*
* @example
* // Use interface to check for probability primitives...
* var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
*
* var bool = isProbability( 0.3 );
* // returns true
*
* bool = isProbability( new Number( 0.3 ) );
* // returns false
*
* @example
* // Use interface to check for probability objects...
* var isProbability = require( '@stdlib/assert/is-probability' ).isObject;
*
* var bool = isProbability( 0.77 );
* // returns false
*
* bool = isProbability( new Number( 0.77 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isProbability = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isProbability, 'isPrimitive', isPrimitive );
setReadOnly( isProbability, 'isObject', isObject );


// EXPORTS //

module.exports = isProbability;

},{"./generic.js":55,"./object.js":57,"./primitive.js":58,"@stdlib/utils/define-read-only-property":1937}],57:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value which is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns false
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*/
function isProbability( value ) {
	return (
		isNumber( value ) &&
		value.valueOf() >= 0.0 &&
		value.valueOf() <= 1.0
	);
}


// EXPORTS //

module.exports = isProbability;

},{"@stdlib/assert/is-number":40}],58:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a value which is a probability
*
* @example
* var bool = isProbability( 0.66 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.66 ) );
* // returns false
*/
function isProbability( value ) {
	return (
		isNumber( value ) &&
		value >= 0.0 &&
		value <= 1.0
	);
}


// EXPORTS //

module.exports = isProbability;

},{"@stdlib/assert/is-number":40}],59:[function(require,module,exports){
'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

var isUint16Array = require( './is_uint16array.js' );


// EXPORTS //

module.exports = isUint16Array;

},{"./is_uint16array.js":60}],60:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return ( nativeClass( value ) === '[object Uint16Array]' );
}


// EXPORTS //

module.exports = isUint16Array;

},{"@stdlib/utils/native-class":1957}],61:[function(require,module,exports){
'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

var isUint32Array = require( './is_uint32array.js' );


// EXPORTS //

module.exports = isUint32Array;

},{"./is_uint32array.js":62}],62:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return ( nativeClass( value ) === '[object Uint32Array]' );
}


// EXPORTS //

module.exports = isUint32Array;

},{"@stdlib/utils/native-class":1957}],63:[function(require,module,exports){
'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

var isUint8Array = require( './is_uint8array.js' );


// EXPORTS //

module.exports = isUint8Array;

},{"./is_uint8array.js":64}],64:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return ( nativeClass( value ) === '[object Uint8Array]' );
}


// EXPORTS //

module.exports = isUint8Array;

},{"@stdlib/utils/native-class":1957}],65:[function(require,module,exports){
'use strict';

// MODULES //

var isArray = require( '@stdlib/assert/is-array' );


// MAIN //

/**
* Returns a function which tests if every element in an array passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/
function arrayfcn( predicate ) {
	if ( typeof predicate !== 'function' ) {
		throw new TypeError( 'invalid input argument. Must provide a function. Value: `' + predicate + '`.' );
	}
	return every;

	/**
	* Tests if every element in an array passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition
	*/
	function every( value ) {
		var len;
		var i;
		if ( !isArray( value ) ) {
			return false;
		}
		len = value.length;
		if ( len === 0 ) {
			return false;
		}
		for ( i = 0; i < len; i++ ) {
			if ( predicate( value[ i ] ) === false ) {
				return false;
			}
		}
		return true;
	}
}


// EXPORTS //

module.exports = arrayfcn;

},{"@stdlib/assert/is-array":15}],66:[function(require,module,exports){
'use strict';

/**
* Return a function which tests if every element in an array passes a test condition.
*
* @module @stdlib/assert/tools/array-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arrayfcn = require( '@stdlib/assert/tools/array-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

// MODULES //

var arrayfcn = require( './arrayfcn.js' );


// EXPORTS //

module.exports = arrayfcn;

},{"./arrayfcn.js":65}],67:[function(require,module,exports){
'use strict';

/**
* Maximum single-precision floating-point number.
*
* @module @stdlib/constants/math/float32-max
* @type {number}
*
* @example
* var FLOAT32_MAX = require( '@stdlib/constants/math/float32-max' );
* // returns 3.4028234663852886e+38
*/


// MAIN //

/**
* Maximum single-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{127} (2 - 2^{-23})
* ```
*
* @constant
* @type {number}
* @default 3.4028234663852886e+38
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_MAX = 3.4028234663852886e+38;


// EXPORTS //

module.exports = FLOAT32_MAX;

},{}],68:[function(require,module,exports){
'use strict';

/**
* Smallest positive single-precision floating-point normal number.
*
* @module @stdlib/constants/math/float32-smallest-normal
* @type {number}
*
* @example
* var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/math/float32-smallest-normal' );
* // returns 1.1754943508222875e-38
*/


// MAIN //

/**
* The smallest positive single-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{127-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000001 00000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 1.1754943508222875e-38
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;


// EXPORTS //

module.exports = FLOAT32_SMALLEST_NORMAL;


},{}],69:[function(require,module,exports){
'use strict';

/**
* Euler's number.
*
* @module @stdlib/constants/math/float64-e
* @type {number}
*
* @example
* var E = require( '@stdlib/constants/math/float64-e' );
* // returns 2.718281828459045
*/


// MAIN //

/**
* Euler's number.
*
* @constant
* @type {number}
* @default 2.718281828459045
* @see [OEIS]{@link https://oeis.org/A001113}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}
*/
var E = 2.718281828459045235360287471352662497757247093699959574966;


// EXPORTS //

module.exports = E;

},{}],70:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/math/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],71:[function(require,module,exports){
'use strict';

/**
* The Euler-Mascheroni constant.
*
* @module @stdlib/constants/math/float64-eulergamma
* @type {number}
*
* @example
* var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
* // returns 0.5772156649015329
*/


// MAIN //

/**
* The Euler-Mascheroni constant.
*
* @constant
* @type {number}
* @default 0.5772156649015329
* @see [OEIS]{@link http://oeis.org/A001620}
* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}
*/
var GAMMA = 0.577215664901532860606512090082402431042;


// EXPORTS //

module.exports = GAMMA;

},{}],72:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/math/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],73:[function(require,module,exports){
'use strict';

/**
* One fourth times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-fourth-pi
* @type {number}
*
* @example
* var FOURTH_PI = require( '@stdlib/constants/math/float64-fourth-pi' );
* // returns 7.85398163397448309616e-1
*/


// MAIN //

/**
* One fourth times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 7.85398163397448309616e-1
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var FOURTH_PI = 7.85398163397448309616e-1;


// EXPORTS //

module.exports = FOURTH_PI;

},{}],74:[function(require,module,exports){
'use strict';

/**
* Arbitrary constant `g` to be used in Lanczos approximation functions.
*
* @module @stdlib/constants/math/float64-gamma-lanczos-g
* @type {number}
*
* @example
* var FLOAT64_GAMMA_LANCZOS_G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
* // returns 10.900511
*/


// MAIN //

/**
* Arbitrary constant `g` to be used in Lanczos approximation functions.
*
* @constant
* @type {number}
* @default 10.900511
* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}
*/
var FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;


// EXPORTS //

module.exports = FLOAT64_GAMMA_LANCZOS_G;

},{}],75:[function(require,module,exports){
'use strict';

/**
* One half times the natural logarithm of 2.
*
* @module @stdlib/constants/math/float64-half-ln-two
* @type {number}
*
* @example
* var HALF_LN2 = require( '@stdlib/constants/math/float64-half_ln2' );
* // returns 3.46573590279972654709e-01
*/


// MAIN //

/**
* One half times the natural logarithm of 2.
*
* ```tex
* \frac{\ln 2}{2}
* ```
*
* @constant
* @type {number}
* @default 3.46573590279972654709e-01
*/
var HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF


// EXPORTS //

module.exports = HALF_LN2;

},{}],76:[function(require,module,exports){
'use strict';

/**
* One half times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-half-pi
* @type {number}
*
* @example
* var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
* // returns 1.5707963267948966
*/


// MAIN //

/**
* One half times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.5707963267948966
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var HALF_PI = 1.5707963267948966;


// EXPORTS //

module.exports = HALF_PI;

},{}],77:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],78:[function(require,module,exports){
'use strict';

/**
* High word mask for the significand of a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-high-word-significand-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/constants/math/float64-high-word-significand-mask' );
* // returns 1048575
*/


// MAIN //

/**
* High word mask for the significand of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the significand of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 1048575 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000000 11111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 0x000fffff
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = 0x000fffff;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;

},{}],79:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of `1/2`.
*
* @module @stdlib/constants/math/float64-ln-half
* @type {number}
*
* @example
* var LN_HALF = require( '@stdlib/constants/math/float64-ln-half' );
* // returns -0.6931471805599453
*/


// MAIN //

/**
* Natural logarithm of `1/2`.
*
* ```tex
* \ln (1/2)
* ```
*
* @constant
* @type {number}
* @default -0.6931471805599453
*/
var LN_HALF = -0.69314718055994530941723212145817656807550013436025525412;


// EXPORTS //

module.exports = LN_HALF;

},{}],80:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-ln-pi
* @type {number}
*
* @example
* var LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
* // returns 1.1447298858494002
*/


// MAIN //

/**
* Natural logarithm of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.1447298858494002
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var LN_PI = 1.1447298858494002;


// EXPORTS //

module.exports = LN_PI;

},{}],81:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the square root of `2π`.
*
* @module @stdlib/constants/math/float64-ln-sqrt-two-pi
* @type {number}
*
* @example
* var LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
* // returns 0.9189385332046728
*/


// MAIN //

/**
* Natural logarithm of the square root of `2π`.
*
* ```tex
* \ln \sqrt{2\pi}
* ```
*
* @constant
* @type {number}
* @default 0.9189385332046728
*/
var LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len


// EXPORTS //

module.exports = LN_SQRT_TWO_PI;

},{}],82:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of `2π`.
*
* @module @stdlib/constants/math/float64-ln-two-pi
* @type {number}
*
* @example
* var LN_TWO_PI = require( '@stdlib/constants/math/float64-ln-two-pi' );
* // returns 1.8378770664093456
*/


// MAIN //

/**
* Natural logarithm of `2π`.
*
* ```tex
* \ln 2\pi
* ```
*
* @constant
* @type {number}
* @default 1.8378770664093456
*/
var LN_TWO_PI = 1.837877066409345483560659472811235279722794947275566825634; // eslint-disable-line max-len


// EXPORTS //

module.exports = LN_TWO_PI;

},{}],83:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of `2`.
*
* @module @stdlib/constants/math/float64-ln-two
* @type {number}
*
* @example
* var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
* // returns 0.6931471805599453
*/


// MAIN //

/**
* Natural logarithm of `2`.
*
* ```tex
* \ln 2
* ```
*
* @constant
* @type {number}
* @default 0.6931471805599453
*/
var LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len


// EXPORTS //

module.exports = LN2;

},{}],84:[function(require,module,exports){
'use strict';

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-max-base10-exponent' );
* // returns 308
*/


// MAIN //

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default 308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE10_EXPONENT = 308|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE10_EXPONENT;

},{}],85:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],86:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],87:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-ln
* @type {number}
*
* @example
* var FLOAT64_MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
* // returns 709.782712893384
*/


// MAIN //

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* ## Notes
*
* The natural logarithm of the maximum is given by
*
* ```tex
* \ln \left( 2^{1023} (2 - 2^{-52}) \right)
* ```
*
* @constant
* @type {number}
* @default 709.782712893384
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_LN = 709.782712893384;


// EXPORTS //

module.exports = FLOAT64_MAX_LN;

},{}],88:[function(require,module,exports){
'use strict';

/**
* Maximum safe double-precision floating-point integer.
*
* @module @stdlib/constants/math/float64-max-safe-integer
* @type {number}
*
* @example
* var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
* // returns 9007199254740991
*/


// MAIN //

/**
* Maximum safe double-precision floating-point integer.
*
* ## Notes
*
* The integer has the value
*
* ```tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;


// EXPORTS //

module.exports = FLOAT64_MAX_SAFE_INTEGER;

},{}],89:[function(require,module,exports){
'use strict';

/**
* Maximum safe nth Fibonacci number when stored in double-precision floating-point format.
*
* @module @stdlib/constants/math/float64-max-safe-nth-fibonacci
* @type {integer}
*
* @example
* var FLOAT64_MAX_SAFE_NTH_FIBONACCI = require( '@stdlib/constants/math/float64-max-safe-nth-fibonacci' );
* // returns 78
*/


// MAIN //

/**
* The maximum safe nth Fibonacci number when stored in double-precision floating-point format.
*
* @constant
* @type {integer}
* @default 78
* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_NTH_FIBONACCI = 78|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_SAFE_NTH_FIBONACCI;

},{}],90:[function(require,module,exports){
/* eslint-disable id-length */
'use strict';

/**
* Maximum safe nth Lucas number when stored in double-precision floating-point format.
*
* @module @stdlib/constants/math/float64-max-safe-nth-lucas
* @type {integer}
*
* @example
* var FLOAT64_MAX_SAFE_NTH_LUCAS = require( '@stdlib/constants/math/float64-max-safe-nth-lucas' );
* // returns 76
*/


// MAIN //

/**
* The maximum safe nth Lucas number when stored in double-precision floating-point format.
*
* @constant
* @type {integer}
* @default 76
* @see [Lucas number]{@link https://en.wikipedia.org/wiki/Lucas_number}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_NTH_LUCAS = 76|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_SAFE_NTH_LUCAS;

},{}],91:[function(require,module,exports){
'use strict';

/**
* Maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max
* @type {number}
*
* @example
* var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
* // returns 1.7976931348623157e+308
*/


// MAIN //

/**
* Maximum double-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{1023} (2 - 2^{-52})
* ```
*
* @constant
* @type {number}
* @default 1.7976931348623157e+308
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX = 1.7976931348623157e+308;


// EXPORTS //

module.exports = FLOAT64_MAX;

},{}],92:[function(require,module,exports){
'use strict';

/**
* The minimum base 10 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base10-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
* // returns -324
*/


// MAIN //

/**
* The minimum base 10 exponent for a subnormal double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default -324
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = -324|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;

},{}],93:[function(require,module,exports){
'use strict';

/**
* The minimum base 10 exponent for a normal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-min-base10-exponent' );
* // returns -308
*/


// MAIN //

/**
* The minimum base 10 exponent for a normal double-precision floating-point number.
*
* ```text
* 2^-1022 = 2.2250738585072014e-308 => -308
* ```
*
* @constant
* @type {integer32}
* @default -308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE10_EXPONENT = -308|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE10_EXPONENT;

},{}],94:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],95:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a normal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-min-base2-exponent' );
* // returns -1022
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a normal double-precision floating-point number.
*
* ```text
* 1 - BIAS = -1022
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1022
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT = -1022|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT;

},{}],96:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-ln
* @type {number}
*
* @example
* var FLOAT64_MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
* // returns -708.3964185322641
*/


// MAIN //

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -\ln \left( 2^{1023-1} \right)
* ```
*
* @constant
* @type {number}
* @default -708.3964185322641
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_LN = -708.3964185322641;


// EXPORTS //

module.exports = FLOAT64_MIN_LN;

},{}],97:[function(require,module,exports){
'use strict';

/**
* Minimum safe double-precision floating-point integer.
*
* @module @stdlib/constants/math/float64-min-safe-integer
* @type {number}
*
* @example
* var FLOAT64_MIN_SAFE_INTEGER = require( '@stdlib/constants/math/float64-min-safe-integer' );
* // returns -9007199254740991
*/


// MAIN //

/**
* Minimum safe double-precision floating-point integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -(2^{53} - 1)
* ```
*
* @constant
* @type {number}
* @default -9007199254740991
* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_SAFE_INTEGER = -9007199254740991;


// EXPORTS //

module.exports = FLOAT64_MIN_SAFE_INTEGER;

},{}],98:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/math/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/math/float64-ninf' );
* // returns -Infinity
*/


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],99:[function(require,module,exports){
'use strict';

/**
* Golden ratio.
*
* @module @stdlib/constants/math/float64-phi
* @type {number}
*
* @example
* var PHI = require( '@stdlib/constants/math/float64-phi' );
* // returns 1.618033988749895
*/


// MAIN //

/**
* Golden ratio.
*
* @constant
* @type {number}
* @default 1.618033988749895
* @see [OEIS]{@link http://oeis.org/A001622}
* @see [Wikipedia]{@link http://en.wikipedia.org/wiki/Golden_ratio}
*/
var PHI = 1.61803398874989484820458683436563811772030917980576286213544862; // eslint-disable-line max-len


// EXPORTS //

module.exports = PHI;

},{}],100:[function(require,module,exports){
'use strict';

/**
* Square of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi-squared
* @type {number}
*
* @example
* var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );
* // returns 9.869604401089358
*/


// MAIN //

/**
* Square of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 9.869604401089358
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI_SQUARED = 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377; // eslint-disable-line max-len


// EXPORTS //

module.exports = PI_SQUARED;

},{}],101:[function(require,module,exports){
'use strict';

/**
* The mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi
* @type {number}
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* // returns 3.141592653589793
*/


// MAIN //

/**
* The mathematical constant `π`.
*
* @constant
* @type {number}
* @default 3.141592653589793
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len


// EXPORTS //

module.exports = PI;

},{}],102:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/math/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/math/float64-pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],103:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/math/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],104:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point subnormal number.
*
* @module @stdlib/constants/math/float64-smallest-subnormal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_SUBNORMAL = require( '@stdlib/constants/math/float64-smallest-subnormal' );
* // returns 4.940656458412465e-324
*/


// MAIN //

/**
* The smallest positive double-precision floating-point subnormal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1} 2^{52}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000000 00000000000000000000 00000000000000000000000000000001
* ```
*
* @constant
* @type {number}
* @default 4.940656458412465e-324
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_SUBNORMAL = 4.940656458412465e-324;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_SUBNORMAL;


},{}],105:[function(require,module,exports){
'use strict';

/**
* Square root of double-precision floating-point epsilon.
*
* @module @stdlib/constants/math/float64-sqrt-eps
* @type {number}
*
* @example
* var FLOAT64_SQRT_EPSILON = require( '@stdlib/constants/math/float64-sqrt-eps' );
* // returns 0.14901161193847656e-7
*/


// MAIN //

/**
* Square root of double-precision floating-point epsilon.
*
* ```tex
* \sqrt{\frac{1}{2^{52}}}
* ```
*
* @constant
* @type {number}
* @default 0.14901161193847656e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;


// EXPORTS //

module.exports = FLOAT64_SQRT_EPSILON;

},{}],106:[function(require,module,exports){
'use strict';

/**
* Square root of the mathematical constant `π` divided by `2`.
*
* @module @stdlib/constants/math/float64-sqrt-half-pi
* @type {number}
*
* @example
* var SQRT_HALF_PI = require( '@stdlib/constants/math/float64-sqrt-half-pi' );
* // returns 1.2533141373155003
*/


// MAIN //

/**
* Square root of the mathematical constant `π` divided by `2`.
*
* @constant
* @type {number}
* @default 1.2533141373155003
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_HALF_PI = 1.253314137315500251207882642405522626503493370304969158314;


// EXPORTS //

module.exports = SQRT_HALF_PI;

},{}],107:[function(require,module,exports){
'use strict';

/**
* Square root of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-sqrt-pi
* @type {number}
*
* @example
* var SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
* // returns 1.7724538509055160
*/


// MAIN //

/**
* Square root of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.7724538509055160
* @see [OEIS]{@link https://oeis.org/A002161}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;


// EXPORTS //

module.exports = SQRT_PI;

},{}],108:[function(require,module,exports){
'use strict';

/**
* Square root of `3`.
*
* @module @stdlib/constants/math/float64-sqrt-three
* @type {number}
*
* @example
* var SQRT3 = require( '@stdlib/constants/math/float64-sqrt-three' );
* // returns 1.7320508075688772
*/


// MAIN //

/**
* Square root of `3`.
*
* ```tex
* \sqrt{3}
* ```
*
* @constant
* @type {number}
* @default 1.7320508075688772
*/
var SQRT3 = 1.732050807568877293527446341505872366942805253810380628055e+00; // eslint-disable-line max-len


// EXPORTS //

module.exports = SQRT3;

},{}],109:[function(require,module,exports){
'use strict';

/**
* Square root of the mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two-pi
* @type {number}
*
* @example
* var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
* // returns 2.5066282746310007
*/


// MAIN //

/**
* Square root of the mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 2.5066282746310007
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;


// EXPORTS //

module.exports = SQRT_TWO_PI;

},{}],110:[function(require,module,exports){
'use strict';

/**
* Square root of `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two
* @type {number}
*
* @example
* var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
* // returns 1.4142135623730951
*/


// MAIN //

/**
* Square root of `2`.
*
* ```tex
* \sqrt{2}
* ```
*
* @constant
* @type {number}
* @default 1.4142135623730951
*/
var SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len


// EXPORTS //

module.exports = SQRT2;

},{}],111:[function(require,module,exports){
'use strict';

/**
* The mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-two-pi
* @type {number}
*
* @example
* var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
* // returns 6.283185307179586
*/


// MAIN //

/**
* The mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 6.283185307179586
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len


// EXPORTS //

module.exports = TWO_PI;

},{}],112:[function(require,module,exports){
'use strict';

/**
* Maximum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-max
* @type {integer32}
*
* @example
* var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
* // returns 2147483647
*/


// MAIN //

/**
* Maximum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{31} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111111111111111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 2147483647
*/
var INT32_MAX = 2147483647|0; // asm type annotation


// EXPORTS //

module.exports = INT32_MAX;

},{}],113:[function(require,module,exports){
'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/math/uint16-max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/math/uint16-max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

module.exports = UINT16_MAX;

},{}],114:[function(require,module,exports){
'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/math/uint32-max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/math/uint32-max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],115:[function(require,module,exports){
'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/math/uint8-max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/math/uint8-max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

module.exports = UINT8_MAX;

},{}],116:[function(require,module,exports){
'use strict';

/**
* Test if a 32-bit integer is even.
*
* @module @stdlib/math/base/assert/int32-is-even
*
* @example
* var isEven = require( '@stdlib/math/base/assert/int32-is-even' );
*
* var bool = isEven( 5 );
* // returns false
*
* bool = isEven( -2 );
* // returns true
*
* bool = isEven( 0 );
* // returns true
*/

// MODULES //

var isEven = require( './is_even.js' );


// EXPORTS //

module.exports = isEven;

},{"./is_even.js":117}],117:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a 32-bit integer is even.
*
* @param {integer32} x - value to test
* @returns {boolean} boolean indicating whether the value is even
*
* @example
* var bool = isEven( 5 );
* // returns false
*
* @example
* var bool = isEven( -2 );
* // returns true
*
* @example
* var bool = isEven( 0 );
* // returns true
*/
function isEven( x ) {
	return (x & 1) === 0;
}


// EXPORTS //

module.exports = isEven;

},{}],118:[function(require,module,exports){
'use strict';

/**
* Test if a 32-bit integer is odd.
*
* @module @stdlib/math/base/assert/int32-is-odd
*
* @example
* var isOdd = require( '@stdlib/math/base/assert/int32-is-odd' );
*
* var bool = isOdd( 5 );
* // returns true
*
* bool = isOdd( -2 );
* // returns false
*
* bool = isOdd( 0 );
* // returns false
*/

// MODULES //

var isOdd = require( './is_odd.js' );


// EXPORTS //

module.exports = isOdd;

},{"./is_odd.js":119}],119:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a 32-bit integer is odd.
*
* @param {integer32} x - value to test
* @returns {boolean} boolean indicating whether the value is odd
*
* @example
* var bool = isOdd( 5 );
* // returns true
*
* @example
* var bool = isOdd( -2 );
* // returns false
*
* @example
* var bool = isOdd( 0 );
* // returns false
*/
function isOdd( x ) {
	return (x & 1) === 1;
}


// EXPORTS //

module.exports = isOdd;

},{}],120:[function(require,module,exports){
'use strict';

/**
* Test if a finite numeric value is an even number.
*
* @module @stdlib/math/base/assert/is-even
*
* @example
* var isEven = require( '@stdlib/math/base/assert/is-even' );
*
* var bool = isEven( 5.0 );
* // returns false
*
* bool = isEven( -2.0 );
* // returns true
*
* bool = isEven( 0.0 );
* // returns true
*
* bool = isEven( NaN );
* // returns false
*/

// MODULES //

var isEven = require( './is_even.js' );


// EXPORTS //

module.exports = isEven;

},{"./is_even.js":121}],121:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Tests if a finite numeric value is an even number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an even number
*
* @example
* var bool = isEven( 5.0 );
* // returns false
*
* @example
* var bool = isEven( -2.0 );
* // returns true
*
* @example
* var bool = isEven( 0.0 );
* // returns true
*
* @example
* var bool = isEven( NaN );
* // returns false
*/
function isEven( x ) {
	return isInteger( x/2.0 );
}


// EXPORTS //

module.exports = isEven;

},{"@stdlib/math/base/assert/is-integer":126}],122:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is finite.
*
* @module @stdlib/math/base/assert/is-finite
*
* @example
* var isfinite = require( '@stdlib/math/base/assert/is-finite' );
*
* var bool = isfinite( 5.0 );
* // returns true
*
* bool = isfinite( -2.0e64 );
* // returns true
*
* bool = isfinite( Infinity );
* // returns false
*
* bool = isfinite( -Infinity );
* // returns false
*/

// MODULES //

var isfinite = require( './is_finite.js' );


// EXPORTS //

module.exports = isfinite;

},{"./is_finite.js":123}],123:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is finite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is finite
*
* @example
* var bool = isfinite( 5.0 );
* // returns true
*
* @example
* var bool = isfinite( -2.0e64 );
* // returns true
*
* @example
* var bool = isfinite( Infinity );
* // returns false
*
* @example
* var bool = isfinite( -Infinity );
* // returns false
*/
function isfinite( x ) {
	return (
		// NaN check (x !== x ):
		x === x &&

		// +-infinity check:
		x > NINF &&
		x < PINF
	);
}


// EXPORTS //

module.exports = isfinite;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102}],124:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":125}],125:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
}


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102}],126:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is an integer.
*
* @module @stdlib/math/base/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/math/base/assert/is-integer' );
*
* var bool = isInteger( 1.0 );
* // returns true
*
* bool = isInteger( 3.14 );
* // returns false
*/

// MODULES //

var isInteger = require( './is_integer.js' );


// EXPORTS //

module.exports = isInteger;

},{"./is_integer.js":127}],127:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is an integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an integer
*
* @example
* var bool = isInteger( 1.0 );
* // returns true
*
* @example
* var bool = isInteger( 3.14 );
* // returns false
*/
function isInteger( x ) {
	return (floor(x) === x);
}


// EXPORTS //

module.exports = isInteger;

},{"@stdlib/math/base/special/floor":1484}],128:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":129}],129:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],130:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is a negative integer.
*
* @module @stdlib/math/base/assert/is-negative-integer
*
* @example
* var isNegativeInteger = require( '@stdlib/math/base/assert/is-negative-integer' );
*
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* bool = isNegativeInteger( 0.0 );
* // returns false
*
* bool = isNegativeInteger( 10.0 );
* // returns false
*/

// MODULES //

var isNegativeInteger = require( './is_negative_integer.js' );


// EXPORTS //

module.exports = isNegativeInteger;

},{"./is_negative_integer.js":131}],131:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a negative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a negative integer
*
* @example
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* @example
* var bool = isNegativeInteger( 0.0 );
* // returns false
*
* @example
* var bool = isNegativeInteger( 10.0 );
* // returns false
*/
function isNegativeInteger( x ) {
	return (floor(x) === x && x < 0.0);
}


// EXPORTS //

module.exports = isNegativeInteger;

},{"@stdlib/math/base/special/floor":1484}],132:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is negative zero.
*
* @module @stdlib/math/base/assert/is-negative-zero
*
* @example
* var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
*
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* bool = isNegativeZero( 0.0 );
* // returns false
*/

// MODULES //

var isNegativeZero = require( './is_negative_zero.js' );


// EXPORTS //

module.exports = isNegativeZero;

},{"./is_negative_zero.js":133}],133:[function(require,module,exports){
'use strict';

// MODULES //

var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is negative zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is negative zero
*
* @example
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* @example
* var bool = isNegativeZero( 0.0 );
* // returns false
*/
function isNegativeZero( x ) {
	return (x === 0.0 && 1.0/x === NINF);
}


// EXPORTS //

module.exports = isNegativeZero;

},{"@stdlib/constants/math/float64-ninf":98}],134:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is a nonnegative integer.
*
* @module @stdlib/math/base/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* bool = isNonNegativeInteger( -10.0 );
* // returns false
*/

// MODULES //

var isNonNegativeInteger = require( './is_nonnegative_integer.js' );


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"./is_nonnegative_integer.js":135}],135:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a nonnegative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -10.0 );
* // returns false
*/
function isNonNegativeInteger( x ) {
	return (floor(x) === x && x >= 0);
}


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"@stdlib/math/base/special/floor":1484}],136:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is a nonpositive integer.
*
* @module @stdlib/math/base/assert/is-nonpositive-integer
*
* @example
* var isNonPositiveInteger = require( '@stdlib/math/base/assert/is-nonpositive-integer' );
*
* var bool = isNonPositiveInteger( -1.0 );
* // returns true
*
* bool = isNonPositiveInteger( 0.0 );
* // returns true
*
* bool = isNonPositiveInteger( 10.0 );
* // returns false
*/

// MODULES //

var isNonPositiveInteger = require( './is_nonpositive_integer.js' );


// EXPORTS //

module.exports = isNonPositiveInteger;

},{"./is_nonpositive_integer.js":137}],137:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a nonpositive integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a nonpositive integer
*
* @example
* var bool = isNonPositiveInteger( -1.0 );
* // returns true
*
* @example
* var bool = isNonPositiveInteger( 0.0 );
* // returns true
*
* @example
* var bool = isNonPositiveInteger( 10.0 );
* // returns false
*/
function isNonPositiveInteger( x ) {
	return (floor(x) === x && x <= 0);
}


// EXPORTS //

module.exports = isNonPositiveInteger;

},{"@stdlib/math/base/special/floor":1484}],138:[function(require,module,exports){
'use strict';

/**
* Test if a finite numeric value is an odd number.
*
* @module @stdlib/math/base/assert/is-odd
*
* @example
* var isOdd = require( '@stdlib/math/base/assert/is-odd' );
*
* var bool = isOdd( 5.0 );
* // returns true
*
* bool = isOdd( -2.0 );
* // returns false
*
* bool = isOdd( 0.0 );
* // returns false
*
* bool = isOdd( NaN );
* // returns false
*/

// MODULES //

var isOdd = require( './is_odd.js' );


// EXPORTS //

module.exports = isOdd;

},{"./is_odd.js":139}],139:[function(require,module,exports){
'use strict';

// MODULES //

var isEven = require( '@stdlib/math/base/assert/is-even' );


// MAIN //

/**
* Tests if a finite numeric value is an odd number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an odd number
*
* @example
* var bool = isOdd( 5.0 );
* // returns true
*
* @example
* var bool = isOdd( -2.0 );
* // returns false
*
* @example
* var bool = isOdd( 0.0 );
* // returns false
*
* @example
* var bool = isOdd( NaN );
* // returns false
*/
function isOdd( x ) {
	// Check sign to prevent overflow...
	if ( x > 0.0 ) {
		return isEven( x-1.0 );
	}
	return isEven( x+1.0 );
}


// EXPORTS //

module.exports = isOdd;

},{"@stdlib/math/base/assert/is-even":120}],140:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is a positive integer.
*
* @module @stdlib/math/base/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* bool = isPositiveInteger( 0.0 );
* // returns false
*
* bool = isPositiveInteger( -10.0 );
* // returns false
*/

// MODULES //

var isPositiveInteger = require( './is_positive_integer.js' );


// EXPORTS //

module.exports = isPositiveInteger;

},{"./is_positive_integer.js":141}],141:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a positive integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a positive integer
*
* @example
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -10.0 );
* // returns false
*/
function isPositiveInteger( x ) {
	return (floor(x) === x && x > 0);
}


// EXPORTS //

module.exports = isPositiveInteger;

},{"@stdlib/math/base/special/floor":1484}],142:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is positive zero.
*
* @module @stdlib/math/base/assert/is-positive-zero
*
* @example
* var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
*
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* bool = isPositiveZero( -0.0 );
* // returns false
*/

// MODULES //

var isPositiveZero = require( './is_positive_zero.js' );


// EXPORTS //

module.exports = isPositiveZero;

},{"./is_positive_zero.js":143}],143:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Tests if a numeric value is positive zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is positive zero
*
* @example
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* @example
* var bool = isPositiveZero( -0.0 );
* // returns false
*/
function isPositiveZero( x ) {
	return (x === 0.0 && 1.0/x === PINF);
}


// EXPORTS //

module.exports = isPositiveZero;

},{"@stdlib/constants/math/float64-pinf":102}],144:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is a probability.
*
* @module @stdlib/math/base/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/math/base/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( NaN );
* // returns false
*/

// MODULES //

var isProbability = require( './is_probability.js' );


// EXPORTS //

module.exports = isProbability;

},{"./is_probability.js":145}],145:[function(require,module,exports){
'use strict';

/**
* Tests if a numeric value is a probability.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( NaN );
* // returns false
*/
function isProbability( x ) {
	return ( x >= 0.0 && x <= 1.0 );
}


// EXPORTS //

module.exports = isProbability;

},{}],146:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is a safe integer.
*
* @module @stdlib/math/base/assert/is-safe-integer
*
* @example
* var isSafeInteger = require( '@stdlib/math/base/assert/is-safe-integer' );
*
* var bool = isSafeInteger( 1.0 );
* // returns true
*
* bool = isSafeInteger( 2.0e200 );
* // returns false
*
* bool = isSafeInteger( 3.14 );
* // returns false
*/

// MODULES //

var isSafeInteger = require( './is_safe_integer.js' );


// EXPORTS //

module.exports = isSafeInteger;

},{"./is_safe_integer.js":147}],147:[function(require,module,exports){
'use strict';

// MODULES //

var MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
var MIN_SAFE_INTEGER = require( '@stdlib/constants/math/float64-min-safe-integer' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a safe integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a safe integer
*
* @example
* var bool = isSafeInteger( 1.0 );
* // returns true
*
* @example
* var bool = isSafeInteger( 2.0e200 );
* // returns false
*
* @example
* var bool = isSafeInteger( 3.14 );
* // returns false
*/
function isSafeInteger( x ) {
	return (
		x >= MIN_SAFE_INTEGER &&
		x <= MAX_SAFE_INTEGER &&
		isInteger( x )
	);
}


// EXPORTS //

module.exports = isSafeInteger;

},{"@stdlib/constants/math/float64-max-safe-integer":88,"@stdlib/constants/math/float64-min-safe-integer":97,"@stdlib/math/base/assert/is-integer":126}],148:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace ns
*/
var ns = {};

/**
* @name isEvenInt32
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/int32-is-even}
*/
setReadOnly( ns, 'isEvenInt32', require( '@stdlib/math/base/assert/int32-is-even' ) );

/**
* @name isOddInt32
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/int32-is-odd}
*/
setReadOnly( ns, 'isOddInt32', require( '@stdlib/math/base/assert/int32-is-odd' ) );

/**
* @name isEven
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-even}
*/
setReadOnly( ns, 'isEven', require( '@stdlib/math/base/assert/is-even' ) );

/**
* @name isFinite
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-finite}
*/
setReadOnly( ns, 'isFinite', require( '@stdlib/math/base/assert/is-finite' ) );

/**
* @name isInfinite
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-infinite}
*/
setReadOnly( ns, 'isInfinite', require( '@stdlib/math/base/assert/is-infinite' ) );

/**
* @name isInteger
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-integer}
*/
setReadOnly( ns, 'isInteger', require( '@stdlib/math/base/assert/is-integer' ) );

/**
* @name isnan
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-nan}
*/
setReadOnly( ns, 'isnan', require( '@stdlib/math/base/assert/is-nan' ) );

/**
* @name isNegativeInteger
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-negative-integer}
*/
setReadOnly( ns, 'isNegativeInteger', require( '@stdlib/math/base/assert/is-negative-integer' ) );

/**
* @name isNegativeZero
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-negative-zero}
*/
setReadOnly( ns, 'isNegativeZero', require( '@stdlib/math/base/assert/is-negative-zero' ) );

/**
* @name isNonNegativeInteger
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-nonnegative-integer}
*/
setReadOnly( ns, 'isNonNegativeInteger', require( '@stdlib/math/base/assert/is-nonnegative-integer' ) );

/**
* @name isNonPositiveInteger
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-nonpositive-integer}
*/
setReadOnly( ns, 'isNonPositiveInteger', require( '@stdlib/math/base/assert/is-nonpositive-integer' ) );

/**
* @name isOdd
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-odd}
*/
setReadOnly( ns, 'isOdd', require( '@stdlib/math/base/assert/is-odd' ) );

/**
* @name isPositiveInteger
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-positive-integer}
*/
setReadOnly( ns, 'isPositiveInteger', require( '@stdlib/math/base/assert/is-positive-integer' ) );

/**
* @name isPositiveZero
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-positive-zero}
*/
setReadOnly( ns, 'isPositiveZero', require( '@stdlib/math/base/assert/is-positive-zero' ) );

/**
* @name isProbability
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-probability}
*/
setReadOnly( ns, 'isProbability', require( '@stdlib/math/base/assert/is-probability' ) );

/**
* @name isSafeInteger
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/is-safe-integer}
*/
setReadOnly( ns, 'isSafeInteger', require( '@stdlib/math/base/assert/is-safe-integer' ) );

/**
* @name isPow2Uint32
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/assert/uint32-is-pow2}
*/
setReadOnly( ns, 'isPow2Uint32', require( '@stdlib/math/base/assert/uint32-is-pow2' ) );


// EXPORTS //

module.exports = ns;

},{"@stdlib/math/base/assert/int32-is-even":116,"@stdlib/math/base/assert/int32-is-odd":118,"@stdlib/math/base/assert/is-even":120,"@stdlib/math/base/assert/is-finite":122,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-negative-integer":130,"@stdlib/math/base/assert/is-negative-zero":132,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/assert/is-nonpositive-integer":136,"@stdlib/math/base/assert/is-odd":138,"@stdlib/math/base/assert/is-positive-integer":140,"@stdlib/math/base/assert/is-positive-zero":142,"@stdlib/math/base/assert/is-probability":144,"@stdlib/math/base/assert/is-safe-integer":146,"@stdlib/math/base/assert/uint32-is-pow2":149,"@stdlib/utils/define-read-only-property":1937}],149:[function(require,module,exports){
'use strict';

/**
* Test whether an unsigned integer is a power of 2.
*
* @module @stdlib/math/base/assert/uint32-is-pow2
*
* @example
* var isPow2Uint32 = require( '@stdlib/math/base/assert/uint32-is-pow2' );
*
* var bool = isPow2Uint32( 2 );
* // returns true
*
* bool = isPow2Uint32( 5 );
* // returns false
*/

// MODULES //

var isPow2Uint32 = require( './is_pow2.js' );


// EXPORTS //

module.exports = isPow2Uint32;

},{"./is_pow2.js":150}],150:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests whether an unsigned integer is a power of 2.
*
* @param {uinteger32} x - value to test
* @returns {boolean} boolean indicating whether a value is a power of 2
*
* @example
* var bool = isPow2Uint32( 2 );
* // returns true
*
* @example
* var bool = isPow2Uint32( 5 );
* // returns false
*/
function isPow2Uint32( x ) {
	x >>>= 0;
	return ( !!x && !(x & (x-1)));
}


// EXPORTS //

module.exports = isPow2Uint32;

},{}],151:[function(require,module,exports){
'use strict';

// MODULES //

var hypot = require( '@stdlib/math/base/special/hypot' );


// MAIN //

/**
* Computes the absolute value of a complex number.
*
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {number} absolute value
*
* @example
* var v = cabs( 5.0, 3.0 );
* // returns ~5.83
*/
function cabs( re, im ) {
	return hypot( re, im );
}


// EXPORTS //

module.exports = cabs;

},{"@stdlib/math/base/special/hypot":1609}],152:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value of a complex number.
*
* @module @stdlib/math/base/complex/abs
*
* @example
* var cabs = require( '@stdlib/math/base/complex/abs' );
*
* var v = cabs( 5.0, 3.0 );
* // returns ~5.83
*/

// MODULES //

var cabs = require( './cabs.js' );


// EXPORTS //

module.exports = cabs;

},{"./cabs.js":151}],153:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Computes the squared absolute value of a complex number.
*
* ## Notes
*
* -   Be careful of overflow and underflow.
*
*
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {number} squared absolute value
*
* @example
* var v = cabs2( 5.0, 3.0 );
* // returns 34.0
*/
function cabs2( re, im ) {
	return (re*re) + (im*im);
}


// EXPORTS //

module.exports = cabs2;

},{}],154:[function(require,module,exports){
'use strict';

/**
* Compute the squared absolute value of a complex number.
*
* @module @stdlib/math/base/complex/abs2
*
* @example
* var cabs2 = require( '@stdlib/math/base/complex/abs2' );
*
* var v = cabs2( 5.0, 3.0 );
* // returns 34.0
*/

// MODULES //

var cabs2 = require( './cabs2.js' );


// EXPORTS //

module.exports = cabs2;

},{"./cabs2.js":153}],155:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Adds two complex numbers.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = new Float64Array( 2 );
* var v = cadd( out, 5.0, 3.0, -2.0, 1.0 );
* // returns <Float64Array>[ 3.0, 4.0 ]
*/
function cadd( out, re1, im1, re2, im2 ) {
	out[ 0 ] = re1 + re2;
	out[ 1 ] = im1 + im2;
	return out;
}


// EXPORTS //

module.exports = cadd;

},{}],156:[function(require,module,exports){
'use strict';

/**
* Add two complex numbers.
*
* @module @stdlib/math/base/complex/add
*
* @example
* var cadd = require( '@stdlib/math/base/complex/add' );
*
* var v = cadd( 5.0, 3.0, -2.0, 1.0 );
* // returns [ 3.0, 4.0 ]
*
* @example
* var cadd = require( '@stdlib/math/base/complex/add' );
*
* var out = new Float32Array( 2 );
*
* var v = cadd( out, 5.0, 3.0, -2.0, 1.0 );
* // returns <Float32Array>[ 3.0, 4.0 ]
*
* var bool = ( out === v );
* // returns true
*/

// MODULES //

var cadd = require( './main.js' );


// EXPORTS //

module.exports = cadd;

},{"./main.js":157}],157:[function(require,module,exports){
'use strict';

// MODULES //

var add = require( './cadd.js' );


// MAIN //

/**
* Adds two complex numbers.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = new Float64Array( 2 );
* var v = cadd( out, 5.0, 3.0, -2.0, 1.0 );
* // returns <Float64Array>[ 3.0, 4.0 ]
*/
function cadd( out, re1, im1, re2, im2 ) {
	if ( arguments.length === 4 ) {
		return add( [ 0.0, 0.0 ], out, re1, im1, re2 );
	}
	return add( out, re1, im1, re2, im2 );
}


// EXPORTS //

module.exports = cadd;

},{"./cadd.js":155}],158:[function(require,module,exports){
'use strict';

// MODULES //

var ceil = require( '@stdlib/math/base/special/ceil' );


// MAIN //

/**
* Rounds a complex number toward positive infinity.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = new Array( 2 );
* var v = cceil( out, -4.2, 5.5 );
* // returns [ -4.0, 6.0 ]
*
* @example
* var out = new Array( 2 );
* var v = cceil( out, 9.99999, 0.1 );
* // returns [ 10.0, 1.0 ]
*
* @example
* var out = new Array( 2 );
* var v = cceil( out, 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var out = new Array( 2 );
* var v = cceil( out, NaN, NaN );
* // returns [ NaN, NaN ]
*/
function cceil( out, re, im ) {
	out[ 0 ] = ceil( re );
	out[ 1 ] = ceil( im );
	return out;
}


// EXPORTS //

module.exports = cceil;

},{"@stdlib/math/base/special/ceil":1380}],159:[function(require,module,exports){
'use strict';

/**
* Round a complex number toward positive infinity.
*
* @module @stdlib/math/base/complex/ceil
*
* @example
* var cceil = require( '@stdlib/math/base/complex/ceil' );
*
* var v = cceil( -4.2, 5.5 );
* // returns [ -4.0, 6.0 ]
*
* v = cceil( 9.99999, 0.1 );
* // returns [ 10.0, 1.0 ]
*
* v = cceil( 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* v = cceil( NaN, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var cceil = require( '@stdlib/math/base/complex/ceil' );
*
* var out = new Array( 2 );
*
* var v = cceil( out, -4.2, 5.5 );
* // returns [ -4.0, 6.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var cceil = require( './main.js' );


// EXPORTS //

module.exports = cceil;

},{"./main.js":160}],160:[function(require,module,exports){
'use strict';

// MODULES //

var ceil = require( './cceil.js' );


// MAIN //

/**
* Rounds a complex number toward positive infinity.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = cceil( out, -4.2, 5.5 );
* // returns [ -4.0, 6.0 ]
*
* @example
* var out = new Array( 2 );
*
* var v = cceil( out, 9.99999, 0.1 );
* // returns [ 10.0, 1.0 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var v = cceil( 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var v = cceil( NaN, NaN );
* // returns [ NaN, NaN ]
*/
function cceil( out, re, im ) {
	if ( arguments.length === 2 ) {
		return ceil( [ 0.0, 0.0 ], out, re );
	}
	return ceil( out, re, im );
}


// EXPORTS //

module.exports = cceil;

},{"./cceil.js":158}],161:[function(require,module,exports){
'use strict';

// MODULES //

var sincos = require( '@stdlib/math/base/special/sincos' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Computes the cis function of a complex number.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = new Array( 2 );
*
* var v = cis( out, 1.0, 0.0 );
* // returns [ ~0.540, ~0.841 ]
*
* var bool = ( v === out );
* // returns true
*/
function cis( out, re, im ) {
	var tmp;
	var e;

	sincos( out, re );
	tmp = out[ 0 ];
	if ( im !== 0.0 ) {
		e = exp( -im );
		tmp *= e;
		out[ 1 ] *= e;
	}
	out[ 0 ] = out[ 1 ];
	out[ 1 ] = tmp;
	return out;
}


// EXPORTS //

module.exports = cis;

},{"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sincos":1810}],162:[function(require,module,exports){
'use strict';

/**
* Compute the cis function of a complex number.
*
* @module @stdlib/math/base/complex/cis
*
* @example
* var cis = require( '@stdlib/math/base/complex/cis' );
*
* var v = cis( 0.0, 0.0 );
* // returns [ 1.0, 0.0 ]
*
* @example
* var cis = require( '@stdlib/math/base/complex/cis' );
*
* var out = new Array( 2 );
*
* var v = cis( out, 1.0, 0.0 );
* // returns [ ~0.540, ~0.841 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var cis = require( './main.js' );


// EXPORTS //

module.exports = cis;

},{"./main.js":163}],163:[function(require,module,exports){
'use strict';

// MODULES //

var computeCis = require( './cis.js' );


// MAIN //

/**
* Computes the cis function of a complex number.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = cis( 0.0, 0.0 );
* // returns [ 1.0, 0.0 ]
*
* @example
* var v = cis( 1.0, 0.0 );
* // returns [ ~0.540, ~0.841 ]
*
* @example
* var out = new Array( 2 );
*
* var v = cis( out, 1.0, 0.0 );
* // returns [ ~0.540, ~0.841 ]
*
* var bool = ( v === out );
* // returns true
*/
function cis( out, re, im ) {
	if ( arguments.length === 2 ) {
		return computeCis( [ 0.0, 0.0 ], out, re );
	}
	return computeCis( out, re, im );
}


// EXPORTS //

module.exports = cis;

},{"./cis.js":161}],164:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var max = require( '@stdlib/math/base/special/max' );
var FLOAT64_BIGGEST = require( '@stdlib/constants/math/float64-max' );
var FLOAT64_SMALLEST = require( '@stdlib/constants/math/float64-smallest-normal' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var robustInternal = require( './robust_internal.js' );


// VARIABLES //

var LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;
var SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );
var RECIP_EPS_SQR = 2.0 / ( EPS * EPS );


// MAIN //

/**
* Divides two complex numbers.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = new Array( 2 );
*
* var v = cdiv( out, -13.0, -1.0, -2.0, 1.0 );
* // returns [ 5.0, 3.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function cdiv( out, re1, im1, re2, im2 ) {
	var ab;
	var cd;
	var s;

	ab = max( abs(re1), abs(im1) );
	cd = max( abs(re2), abs(im2) );
	s = 1.0;

	if ( ab >= LARGE_THRESHOLD ) {
		re1 *= 0.5;
		im1 *= 0.5;
		s *= 2.0;
	} else if ( ab <= SMALL_THRESHOLD ) {
		re1 *= RECIP_EPS_SQR;
		im1 *= RECIP_EPS_SQR;
		s /= RECIP_EPS_SQR;
	}
	if ( cd >= LARGE_THRESHOLD ) {
		re2 *= 0.5;
		im2 *= 0.5;
		s *= 0.5;
	} else if ( cd <= SMALL_THRESHOLD ) {
		re2 *= RECIP_EPS_SQR;
		im2 *= RECIP_EPS_SQR;
		s *= RECIP_EPS_SQR;
	}
	if ( abs( im2 ) <= abs( re2 ) ) {
		robustInternal( out, re1, im1, re2, im2 );
	} else {
		robustInternal( out, im1, re1, im2, re2 );
		out[ 1 ] *= -1;
	}
	out[ 0 ] *= s;
	out[ 1 ] *= s;
	return out;
}


// EXPORTS //

module.exports = cdiv;

},{"./robust_internal.js":168,"@stdlib/constants/math/float64-eps":70,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/max":1703}],165:[function(require,module,exports){
'use strict';

/**
* Divide two complex numbers.
*
* @module @stdlib/math/base/complex/divide
*
* @example
* var cdiv = require( '@stdlib/math/base/complex/divide' );
*
* var v = cdiv( -13.0, -1.0, -2.0, 1.0 );
* // returns [ 5.0, 3.0 ]
*
* @example
* var cdiv = require( '@stdlib/math/base/complex/divide' );
*
* var out = new Array( 2 );
*
* var v = cdiv( out, -13.0, -1.0, -2.0, 1.0 );
* // returns [ 5.0, 3.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var cdiv = require( './main.js' );


// EXPORTS //

module.exports = cdiv;

},{"./main.js":167}],166:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Computes the real part of the quotient.
*
* ## Notes
*
* -   See figure 10 of [reference][@baudin:2012].
*
* [@baudin:2012]: https://arxiv.org/abs/1210.4539
*
* @private
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @param {number} r - partial result
* @param {number} t - partial result
* @returns {number} real part of the quotient
*/
function internalCompreal( re1, im1, re2, im2, r, t ) {
	var br;
	if ( r === 0.0 ) {
		return ( re1 + (im2 * (im1/re2)) ) * t;
	}
	br = im1 * r;
	if ( br === 0.0 ) {
		return ( re1*t ) + ( (im1*t) * r );
	}
	return ( re1+br ) * t;
}


// EXPORTS //

module.exports = internalCompreal;

},{}],167:[function(require,module,exports){
'use strict';

// MODULES //

var divide = require( './cdiv.js' );


// MAIN //

/**
* Divides two complex numbers.
*
* ## References
*
* -   Baudin, Michael, and Robert L. Smith. 2012. "A Robust Complex Division in Scilab." _arXiv_ abs/1210.4539 \[cs.MS\] (October): 1–25. <https://arxiv.org/abs/1210.4539>.
*
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = cdiv( -13.0, -1.0, -2.0, 1.0 );
* // returns [ 5.0, 3.0 ]
*
* @example
* var out = new Array( 2 );
*
* var v = cdiv( out, -13.0, -1.0, -2.0, 1.0 );
* // returns [ 5.0, 3.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function cdiv( out, re1, im1, re2, im2 ) {
	if ( arguments.length === 4 ) {
		return divide( [ 0.0, 0.0 ], out, re1, im1, re2 );
	}
	return divide( out, re1, im1, re2, im2 );
}


// EXPORTS //

module.exports = cdiv;

},{"./cdiv.js":164}],168:[function(require,module,exports){
'use strict';

// MODULES //

var internalCompreal = require( './internal_compreal.js' );


// MAIN //

/**
* Computes the complex division.
*
* ## Notes
*
* -   See figure 10 of [reference][@baudin:2012].
*
* [@baudin:2012]: https://arxiv.org/abs/1210.4539
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
*/
function robustInternal( out, re1, im1, re2, im2 ) {
	var r;
	var t;

	r = im2 / re2;
	t = 1.0 / ( re2 + (im2*r) );

	out[ 0 ] = internalCompreal( re1, im1, re2, im2, r, t );
	out[ 1 ] = internalCompreal( im1, -re1, re2, im2, r, t );
}


// EXPORTS //

module.exports = robustInternal;

},{"./internal_compreal.js":166}],169:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Rounds a complex number toward negative infinity.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} rounded components
*
* @example
* var out = new Array( 2 );
* var v = cfloor( out, -4.2, 5.5 );
* // returns [ -5.0, 5.0 ]
*
* @example
* var out = new Array( 2 );
* var v = cfloor( out, 9.99999, 0.1 );
* // returns [ 9.0, 0.0 ]
*
* @example
* var out = new Array( 2 );
* var v = cfloor( out, 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var out = new Array( 2 );
* var v = cfloor( out, NaN, NaN );
* // returns [ NaN, NaN ]
*/
function cfloor( out, re, im ) {
	out[ 0 ] = floor( re );
	out[ 1 ] = floor( im );
	return out;
}


// EXPORTS //

module.exports = cfloor;

},{"@stdlib/math/base/special/floor":1484}],170:[function(require,module,exports){
'use strict';

/**
* Round a complex number toward negative infinity.
*
* @module @stdlib/math/base/complex/floor
*
* @example
* var cfloor = require( '@stdlib/math/base/complex/floor' );
*
* var v = cfloor( -4.2, 5.5 );
* // returns [ -5.0, 5.0 ]
*
* v = cfloor( 9.99999, 0.1 );
* // returns [ 9.0, 0.0 ]
*
* v = cfloor( 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* v = cfloor( NaN, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var cfloor = require( '@stdlib/math/base/complex/floor' );
*
* var out = new Array( 2 );
*
* var v = cfloor( out, -4.2, 5.5 );
* // returns [ -5.0, 5.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var cfloor = require( './main.js' );


// EXPORTS //

module.exports = cfloor;

},{"./main.js":171}],171:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( './cfloor.js' );


// MAIN //

/**
* Rounds a complex number toward negative infinity.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} rounded components
*
* @example
* var v = cfloor( -4.2, 5.5 );
* // returns [ -5.0, 5.0 ]
*
* @example
* var out = new Array( 2 );
*
* var v = cfloor( out, 9.99999, 0.1 );
* // returns [ 9.0, 0.0 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var v = cfloor( out, 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var v = cfloor( out, NaN, NaN );
* // returns [ NaN, NaN ]
*/
function cfloor( out, re, im ) {
	if ( arguments.length === 2 ) {
		return floor( [ 0.0, 0.0 ], out, re );
	}
	return floor( out, re, im );
}


// EXPORTS //

module.exports = cfloor;

},{"./cfloor.js":169}],172:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var max = require( '@stdlib/math/base/special/max' );
var FLOAT64_BIGGEST = require( '@stdlib/constants/math/float64-max' );
var FLOAT64_SMALLEST = require( '@stdlib/constants/math/float64-smallest-normal' );
var EPS = require( '@stdlib/constants/math/float64-eps' );


// VARIABLES //

var LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;
var SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );
var RECIP_EPS_SQR = 2.0 / ( EPS * EPS );


// MAIN //

/**
* Computes the inverse of a complex number.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = new Array( 2 );
*
* var v = cinv( out, 2.0, 4.0 );
* // returns [ 0.1, -0.2 ]
*
* var bool = ( v === out );
* // returns true
*/
function cinv( out, re, im ) {
	var ab;
	var s;
	var r;
	var t;

	ab = max( abs(re), abs(im) );
	s = 1.0;
	if ( ab >= LARGE_THRESHOLD ) {
		re *= 0.5;
		im *= 0.5;
		s *= 0.5;
	} else if ( ab <= SMALL_THRESHOLD ) {
		re *= RECIP_EPS_SQR;
		im *= RECIP_EPS_SQR;
		s *= RECIP_EPS_SQR;
	}
	if ( abs( im ) <= abs( re ) ) {
		r = im / re;
		t = 1.0 / ( re + (im*r) );
		out[ 0 ] = t;
		out[ 1 ] = -r * t;
	} else {
		r = re / im;
		t = 1.0 / ( im + (re*r) );
		out[ 0 ] = r * t;
		out[ 1 ] = -t;
	}
	out[ 0 ] *= s;
	out[ 1 ] *= s;
	return out;
}


// EXPORTS //

module.exports = cinv;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/max":1703}],173:[function(require,module,exports){
'use strict';

/**
* Compute the inverse of a complex number.
*
* @module @stdlib/math/base/complex/inv
*
* @example
* var cinv = require( '@stdlib/math/base/complex/inv' );
*
* var v = cinv( 2.0, 4.0 );
* // returns [ 0.1, -0.2 ]
*
* @example
* var cinv = require( '@stdlib/math/base/complex/inv' );
*
* var out = new Array( 2 );
*
* var v = cinv( out, 2.0, 4.0 );
* // returns [ 0.1, -0.2 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var cinv = require( './main.js' );


// EXPORTS //

module.exports = cinv;

},{"./main.js":174}],174:[function(require,module,exports){
'use strict';

// MODULES //

var inverse = require( './cinv.js' );


// MAIN //

/**
* Computes the inverse of a complex number.
*
* ## References
*
* -   Baudin, Michael, and Robert L. Smith. 2012. "A Robust Complex Division in Scilab." _arXiv_ abs/1210.4539 \[cs.MS\] (October): 1–25. <https://arxiv.org/abs/1210.4539>.
*
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = cinv( 2.0, 4.0 );
* // returns [ 0.1, -0.2 ]
*
* @example
* var out = new Array( 2 );
*
* var v = cinv( out, 2.0, 4.0 );
* // returns [ 0.1, -0.2 ]
*
* var bool = ( v === out );
* // returns true
*/
function cinv( out, re, im ) {
	if ( arguments.length === 2 ) {
		return inverse( [ 0.0, 0.0 ], out, re );
	}
	return inverse( out, re, im );
}


// EXPORTS //

module.exports = cinv;

},{"./cinv.js":172}],175:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace ns
*/
var ns = {};

/**
* @name cabs
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/abs}
*/
setReadOnly( ns, 'cabs', require( '@stdlib/math/base/complex/abs' ) );

/**
* @name cabs2
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/abs2}
*/
setReadOnly( ns, 'cabs2', require( '@stdlib/math/base/complex/abs2' ) );

/**
* @name cadd
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/add}
*/
setReadOnly( ns, 'cadd', require( '@stdlib/math/base/complex/add' ) );

/**
* @name cceil
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/ceil}
*/
setReadOnly( ns, 'cceil', require( '@stdlib/math/base/complex/ceil' ) );

/**
* @name ccis
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/cis}
*/
setReadOnly( ns, 'ccis', require( '@stdlib/math/base/complex/cis' ) );

/**
* @name cdiv
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/divide}
*/
setReadOnly( ns, 'cdiv', require( '@stdlib/math/base/complex/divide' ) );

/**
* @name cfloor
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/floor}
*/
setReadOnly( ns, 'cfloor', require( '@stdlib/math/base/complex/floor' ) );

/**
* @name cinv
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/inv}
*/
setReadOnly( ns, 'cinv', require( '@stdlib/math/base/complex/inv' ) );

/**
* @name cmul
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/multiply}
*/
setReadOnly( ns, 'cmul', require( '@stdlib/math/base/complex/multiply' ) );

/**
* @name cphase
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/phase}
*/
setReadOnly( ns, 'cphase', require( '@stdlib/math/base/complex/phase' ) );

/**
* @name cpolar
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/polar}
*/
setReadOnly( ns, 'cpolar', require( '@stdlib/math/base/complex/polar' ) );

/**
* @name cround
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/round}
*/
setReadOnly( ns, 'cround', require( '@stdlib/math/base/complex/round' ) );

/**
* @name csub
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/complex/subtract}
*/
setReadOnly( ns, 'csub', require( '@stdlib/math/base/complex/subtract' ) );


// EXPORTS //

module.exports = ns;

},{"@stdlib/math/base/complex/abs":152,"@stdlib/math/base/complex/abs2":154,"@stdlib/math/base/complex/add":156,"@stdlib/math/base/complex/ceil":159,"@stdlib/math/base/complex/cis":162,"@stdlib/math/base/complex/divide":165,"@stdlib/math/base/complex/floor":170,"@stdlib/math/base/complex/inv":173,"@stdlib/math/base/complex/multiply":177,"@stdlib/math/base/complex/phase":180,"@stdlib/math/base/complex/polar":182,"@stdlib/math/base/complex/round":185,"@stdlib/math/base/complex/subtract":188,"@stdlib/utils/define-read-only-property":1937}],176:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Multiplies two complex numbers.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} real and imaginary components
*
* @example
* var out = new Array( 2 );
* var v = cmul( out, 5.0, 3.0, -2.0, 1.0 );
* // returns [ -13.0, -1.0 ]
*/
function cmul( out, re1, im1, re2, im2 ) {
	out[ 0 ] = (re1*re2) - (im1*im2);
	out[ 1 ] = (re1*im2) + (im1*re2);
	return out;
}


// EXPORTS //

module.exports = cmul;

},{}],177:[function(require,module,exports){
'use strict';

/**
* Multiply two complex numbers.
*
* @module @stdlib/math/base/complex/multiply
*
* @example
* var cmul = require( '@stdlib/math/base/complex/multiply' );
*
* var v = cmul( 5.0, 3.0, -2.0, 1.0 );
* // returns [ -13.0, -1.0 ]
*
* @example
* var cmul = require( '@stdlib/math/base/complex/multiply' );
*
* var out = new Array( 2 );
*
* var v = cmul( out, 5.0, 3.0, -2.0, 1.0 );
* // returns [ -13.0, -1.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var cmul = require( './main.js' );


// EXPORTS //

module.exports = cmul;

},{"./main.js":178}],178:[function(require,module,exports){
'use strict';

// MODULES //

var mul = require( './cmul.js' );


// MAIN //

/**
* Multiplies two complex numbers.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} real and imaginary components
*
* @example
* var v = cmul( out, 5.0, 3.0, -2.0, 1.0 );
* // returns [ -13.0, -1.0 ]
*
* @example
* var out = new Array( 2 );
*
* var v = cmul( out, 5.0, 3.0, -2.0, 1.0 );
* // returns [ -13.0, -1.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function cmul( out, re1, im1, re2, im2 ) {
	if ( arguments.length === 4 ) {
		return mul( [ 0.0, 0.0 ], out, re1, im1, re2 );
	}
	return mul( out, re1, im1, re2, im2 );
}


// EXPORTS //

module.exports = cmul;

},{"./cmul.js":176}],179:[function(require,module,exports){
'use strict';

// MODULES //

var atan2 = require( '@stdlib/math/base/special/atan2' );


// MAIN //

/**
* Computes the argument of a complex number in radians.
*
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {number} argument
*
* @example
* var phi = cphase( 5.0, 3.0 );
* // returns ~0.5404
*/
function cphase( re, im ) {
	return atan2( im, re );
}


// EXPORTS //

module.exports = cphase;

},{"@stdlib/math/base/special/atan2":1324}],180:[function(require,module,exports){
'use strict';

/**
* Compute the argument of a complex number in radians.
*
* @module @stdlib/math/base/complex/phase
*
* @example
* var cphase = require( '@stdlib/math/base/complex/phase' );
*
* var phi = cphase( 5.0, 3.0 );
* // returns ~0.5404
*/

// MODULES //

var cphase = require( './cphase.js' );


// EXPORTS //

module.exports = cphase;

},{"./cphase.js":179}],181:[function(require,module,exports){
'use strict';

// MODULES //

var cabs = require( '@stdlib/math/base/complex/abs' );
var cphase = require( '@stdlib/math/base/complex/phase' );


// MAIN //

/**
* Computes the absolute value and the phase of a complex number.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} absolute value and phase (in radians)
*
* @example
* var out = new Array( 2 );
*
* var o = cpolar( out, 5.0, 3.0 );
* // returns [ ~5.83, ~0.5404 ]
*
* var bool = ( o === out );
* // returns true
*/
function cpolar( out, re, im ) {
	out[ 0 ] = cabs( re, im );
	out[ 1 ] = cphase( re, im );
	return out;
}


// EXPORTS //

module.exports = cpolar;

},{"@stdlib/math/base/complex/abs":152,"@stdlib/math/base/complex/phase":180}],182:[function(require,module,exports){
'use strict';

/**
* Compute the absolute value and the phase of a complex number.
*
* @module @stdlib/math/base/complex/polar
*
* @example
* var cpolar = require( '@stdlib/math/base/complex/polar' );
*
* var o = cpolar( 5.0, 3.0 );
* // returns [ ~5.83, ~0.5404 ]
*
* @example
* var cpolar = require( '@stdlib/math/base/complex/polar' );
*
* var out = new Array( 2 );
*
* var o = cpolar( out, 5.0, 3.0 );
* // returns [ ~5.83, ~0.5404 ]
*
* var bool = ( o === out );
* // returns true
*/

// MODULES //

var cpolar = require( './main.js' );


// EXPORTS //

module.exports = cpolar;

},{"./main.js":183}],183:[function(require,module,exports){
'use strict';

// MODULES //

var polar = require( './cpolar.js' );


// MAIN //

/**
* Computes the absolute value and the phase of a complex number.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} absolute value and phase (in radians)
*
* @example
* var o = cpolar( 5.0, 3.0 );
* // returns [ ~5.83, ~0.5404 ]
*
* @example
* var out = new Array( 2 );
*
* var o = cpolar( out, 5.0, 3.0 );
* // returns [ ~5.83, ~0.5404 ]
*
* var bool = ( o === out );
* // returns true
*/
function cpolar( out, re, im ) {
	if ( arguments.length === 2 ) {
		return polar( [ 0.0, 0.0 ], out, re );
	}
	return polar( out, re, im );
}


// EXPORTS //

module.exports = cpolar;

},{"./cpolar.js":181}],184:[function(require,module,exports){
'use strict';

// MODULES //

var round = require( '@stdlib/math/base/special/round' );


// MAIN //

/**
* Rounds a complex number to the nearest integer.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} rounded components
*
* @example
* var out = new Array( 2 );
*
* var v = cround( out, -4.2, 5.5 );
* // returns [ -4.0, 6.0 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = new Array( 2 );
* var v = cround( out, 9.99999, 0.1 );
* // returns [ 10.0, 0.0 ]
*
* @example
* var out = new Array( 2 );
* var v = cround( out, 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var out = new Array( 2 );
* var v = cround( out, NaN, NaN );
* // returns [ NaN, NaN ]
*/
function cround( out, re, im ) {
	out[ 0 ] = round( re );
	out[ 1 ] = round( im );
	return out;
}


// EXPORTS //

module.exports = cround;

},{"@stdlib/math/base/special/round":1777}],185:[function(require,module,exports){
'use strict';

/**
* Round a complex number to the nearest integer.
*
* @module @stdlib/math/base/complex/round
*
* @example
* var cround = require( '@stdlib/math/base/complex/round' );
*
* var v = cround( -4.2, 5.5 );
* // returns [ -5.0, 6.0 ]
*
* v = cround( 9.99999, 0.1 );
* // returns [ 10.0, 0.0 ]
*
* v = cround( 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* v = cround( NaN, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var cround = require( '@stdlib/math/base/complex/round' );
*
* var out = new Array( 2 );
*
* var v = cround( out, -4.2, 5.5 );
* // returns [ -5.0, 6.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var cround = require( './main.js' );


// EXPORTS //

module.exports = cround;

},{"./main.js":186}],186:[function(require,module,exports){
'use strict';

// MODULES //

var round = require( './cround.js' );


// MAIN //

/**
* Rounds a complex number to the nearest integer.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re - real component
* @param {number} im - imaginary component
* @returns {(Array|TypedArray|Object)} rounded components
*
* @example
* var v = cround( -4.2, 5.5 );
* // returns [ -4.0, 6.0 ]
*
* @example
* var out = new Array( 2 );
*
* var v = cround( out, -4.2, 5.5 );
* // returns [ -4.0, 6.0 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var v = cround( 9.99999, 0.1 );
* // returns [ 10.0, 0.0 ]
*
* @example
* var v = cround( 0.0, 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var v = cround( NaN, NaN );
* // returns [ NaN, NaN ]
*/
function cround( out, re, im ) {
	if ( arguments.length === 2 ) {
		return round( [ 0.0, 0.0 ], out, re );
	}
	return round( out, re, im );
}


// EXPORTS //

module.exports = cround;

},{"./cround.js":184}],187:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Subtracts two complex numbers.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} real and imaginary components
*
* @example
* var out = new Array( 2 );
*
* var v = csub( out, 5.0, 3.0, -2.0, 1.0 );
* // returns [ 7.0, 2.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function csub( out, re1, im1, re2, im2 ) {
	out[ 0 ] = re1 - re2;
	out[ 1 ] = im1 - im2;
	return out;
}


// EXPORTS //

module.exports = csub;

},{}],188:[function(require,module,exports){
'use strict';

/**
* Subtract two complex numbers.
*
* @module @stdlib/math/base/complex/subtract
*
* @example
* var csub = require( '@stdlib/math/base/complex/subtract' );
*
* var v = csub( 5.0, 3.0, -2.0, 1.0 );
* // returns [ 7.0, 2.0 ]
*
* @example
* var csub = require( '@stdlib/math/base/complex/subtract' );
*
* var out = new Array( 2 );
*
* var v = csub( out, 5.0, 3.0, -2.0, 1.0 );
* // returns [ 7.0, 2.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var csub = require( './main.js' );


// EXPORTS //

module.exports = csub;

},{"./main.js":189}],189:[function(require,module,exports){
'use strict';

// MODULES //

var sub = require( './csub.js' );


// MAIN //

/**
* Subtracts two complex numbers.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} real and imaginary components
*
* @example
* var v = csub( 5.0, 3.0, -2.0, 1.0 );
* // returns [ 7.0, 2.0 ]
*
* @example
* var out = new Array( 2 );
*
* var v = csub( out, 5.0, 3.0, -2.0, 1.0 );
* // returns [ 7.0, 2.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function csub( out, re1, im1, re2, im2 ) {
	if ( arguments.length === 4 ) {
		return sub( [ 0.0, 0.0 ], out, re1, im1, re2 );
	}
	return sub( out, re1, im1, re2, im2 );
}


// EXPORTS //

module.exports = csub;

},{"./csub.js":187}],190:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

var TWO_OVER_PI = 2.0 / PI;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns ~0.795
*
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns ~0.333
*
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function cdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	if ( x >= b ) {
		return 1.0;
	}
	return TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/sqrt":1826}],191:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

var TWO_OVER_PI = 2.0 / PI;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns ~0.144
*
* y = cdf( 8.0 );
* // returns ~0.705
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		if ( x >= b ) {
			return 1.0;
		}
		return TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],192:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/arcsine/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/arcsine/cdf' );
*
* var y = cdf( 5.0, 0.0, 4.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 0.0, 10.0 );
* y = mycdf( 0.5 );
* // returns ~0.144
*
* y = mycdf( 8.0 );
* // returns ~0.705
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":190,"./factory.js":191,"@stdlib/utils/define-read-only-property":1937}],193:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/arcsine/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/arcsine/kurtosis' );
var mean = require( '@stdlib/math/base/dists/arcsine/mean' );
var median = require( '@stdlib/math/base/dists/arcsine/median' );
var mode = require( '@stdlib/math/base/dists/arcsine/mode' );
var skewness = require( '@stdlib/math/base/dists/arcsine/skewness' );
var stdev = require( '@stdlib/math/base/dists/arcsine/stdev' );
var variance = require( '@stdlib/math/base/dists/arcsine/variance' );
var cdf = require( '@stdlib/math/base/dists/arcsine/cdf' );
var logcdf = require( '@stdlib/math/base/dists/arcsine/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/arcsine/logpdf' );
var pdf = require( '@stdlib/math/base/dists/arcsine/pdf' );
var quantile = require( '@stdlib/math/base/dists/arcsine/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function arcsineCDF( x ) {
	return cdf( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function arcsineLogCDF( x ) {
	return logcdf( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function arcsineLogPDF( x ) {
	return logpdf( x, this.a, this.b );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function arcsinePDF( x ) {
	return pdf( x, this.a, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function arcsineQuantile( p ) {
	return quantile( p, this.a, this.b );
}


// MAIN //

/**
* Arcsine distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {RangeError} `a` must be smaller than `b`
* @returns {Arcsine} distribution instance
*
* @example
* var arcsine = new Arcsine( 0.0, 1.0 );
*
* var y = arcsine.cdf( 0.8 );
* // returns ~0.705
*
* var mu = arcsine.mean;
* // returns 0.5
*/
function Arcsine() {
	var a;
	var b;
	if ( !(this instanceof Arcsine) ) {
		if ( arguments.length === 0 ) {
			return new Arcsine();
		}
		return new Arcsine( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( a >= b ) {
			throw new RangeError( 'invalid input arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new Arcsine( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value >= b ) {
				throw new RangeError( 'invalid value. Must be smaller than `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new Arcsine( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a >= value ) {
				throw new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Arcsine distribution differential entropy.
*
* @name entropy
* @memberof Arcsine.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.entropy;
* // returns ~1.838
*/
Object.defineProperty( Arcsine.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.a, this.b );
	}
});

/**
* Arcsine distribution excess kurtosis.
*
* @name kurtosis
* @memberof Arcsine.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.kurtosis;
* // returns -1.5
*/
Object.defineProperty( Arcsine.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b );
	}
});

/**
* Arcsine distribution expected value.
*
* @name mean
* @memberof Arcsine.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.mean;
* // returns 8.0
*/
Object.defineProperty( Arcsine.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b );
	}
});

/**
* Arcsine distribution median.
*
* @name median
* @memberof Arcsine.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.median;
* // returns 8.0
*/
Object.defineProperty( Arcsine.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.a, this.b );
	}
});

/**
* Arcsine distribution mode.
*
* @name mode
* @memberof Arcsine.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.mode;
* // returns 4.0
*/
Object.defineProperty( Arcsine.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.a, this.b );
	}
});

/**
* Arcsine distribution skewness.
*
* @name skewness
* @memberof Arcsine.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.skewness;
* // returns 0.0
*/
Object.defineProperty( Arcsine.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b );
	}
});

/**
* Arcsine distribution standard deviation.
*
* @name stdev
* @memberof Arcsine.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.stdev;
* // returns ~2.828
*/
Object.defineProperty( Arcsine.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b );
	}
});

/**
* Arcsine distribution variance.
*
* @name variance
* @memberof Arcsine.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.variance;
* // returns 8.0
*/
Object.defineProperty( Arcsine.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Arcsine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.cdf( 3.0 );
* // returns ~0.5
*/
setReadOnly( Arcsine.prototype, 'cdf', arcsineCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Arcsine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.logcdf( 3.0 );
* // returns ~-0.693
*/
setReadOnly( Arcsine.prototype, 'logcdf', arcsineLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Arcsine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.logpdf( 2.5 );
* // returns ~-0.922
*/
setReadOnly( Arcsine.prototype, 'logpdf', arcsineLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Arcsine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.pdf( 2.4 );
* // returns ~0.398
*/
setReadOnly( Arcsine.prototype, 'pdf', arcsinePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Arcsine.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Arcsine.prototype, 'quantile', arcsineQuantile );


// EXPORTS //

module.exports = Arcsine;

},{"@stdlib/assert/is-number":40,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/arcsine/cdf":192,"@stdlib/math/base/dists/arcsine/entropy":196,"@stdlib/math/base/dists/arcsine/kurtosis":197,"@stdlib/math/base/dists/arcsine/logcdf":201,"@stdlib/math/base/dists/arcsine/logpdf":204,"@stdlib/math/base/dists/arcsine/mean":206,"@stdlib/math/base/dists/arcsine/median":208,"@stdlib/math/base/dists/arcsine/mode":210,"@stdlib/math/base/dists/arcsine/pdf":213,"@stdlib/math/base/dists/arcsine/quantile":216,"@stdlib/math/base/dists/arcsine/skewness":218,"@stdlib/math/base/dists/arcsine/stdev":220,"@stdlib/math/base/dists/arcsine/variance":222,"@stdlib/utils/define-read-only-property":1937}],194:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution constructor.
*
* @module @stdlib/math/base/dists/arcsine/ctor
*
* @example
* var Arcsine = require( '@stdlib/math/base/dists/arcsine/ctor' );
*
* var arcsine = new Arcsine( 0.0, 1.0 );
*
* var y = arcsine.cdf( 0.8 );
* // returns ~0.705
*
* var mu = arcsine.mean;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":193}],195:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var FOURTH_PI = require( '@stdlib/constants/math/float64-fourth-pi' );


// VARIABLES //

var LN_FOURTH_PI = ln( FOURTH_PI );


// MAIN //

/**
* Returns the differential entropy of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} entropy
*
* @example
* var v = entropy( 0.0, 1.0 );
* // returns ~-0.242
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.838
*
* @example
* var v = entropy( -4.0, 4.0 );
* // returns ~1.838
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return LN_FOURTH_PI + ln( b - a );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-fourth-pi":73,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],196:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution differential entropy.
*
* @module @stdlib/math/base/dists/arcsine/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/arcsine/entropy' );
*
* var v = entropy( 0.0, 1.0 );
* // returns ~-0.242
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.838
*
* v = entropy( 2.0, 8.0 );
* // returns ~1.55
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":195}],197:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/arcsine/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/arcsine/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.5
*
* v = kurtosis( 4.0, 12.0 );
* // returns -1.5
*
* v = kurtosis( 2.0, 8.0 );
* // returns -1.5
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":198}],198:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.5
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns -1.5
*
* @example
* var v = kurtosis( -4.0, 4.0 );
* // returns -1.5
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return -1.5;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],199:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace arcsine
*/
var arcsine = {};

/**
* @name Arcsine
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/ctor}
*/
setReadOnly( arcsine, 'Arcsine', require( '@stdlib/math/base/dists/arcsine/ctor' ) );

/**
* @name cdf
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/cdf}
*/
setReadOnly( arcsine, 'cdf', require( '@stdlib/math/base/dists/arcsine/cdf' ) );

/**
* @name entropy
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/entropy}
*/
setReadOnly( arcsine, 'entropy', require( '@stdlib/math/base/dists/arcsine/entropy' ) );

/**
* @name kurtosis
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/kurtosis}
*/
setReadOnly( arcsine, 'kurtosis', require( '@stdlib/math/base/dists/arcsine/kurtosis' ) );

/**
* @name logcdf
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/logcdf}
*/
setReadOnly( arcsine, 'logcdf', require( '@stdlib/math/base/dists/arcsine/logcdf' ) );

/**
* @name logpdf
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/logpdf}
*/
setReadOnly( arcsine, 'logpdf', require( '@stdlib/math/base/dists/arcsine/logpdf' ) );

/**
* @name mean
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/mean}
*/
setReadOnly( arcsine, 'mean', require( '@stdlib/math/base/dists/arcsine/mean' ) );

/**
* @name median
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/median}
*/
setReadOnly( arcsine, 'median', require( '@stdlib/math/base/dists/arcsine/median' ) );

/**
* @name mode
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/mode}
*/
setReadOnly( arcsine, 'mode', require( '@stdlib/math/base/dists/arcsine/mode' ) );

/**
* @name pdf
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/pdf}
*/
setReadOnly( arcsine, 'pdf', require( '@stdlib/math/base/dists/arcsine/pdf' ) );

/**
* @name quantile
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/quantile}
*/
setReadOnly( arcsine, 'quantile', require( '@stdlib/math/base/dists/arcsine/quantile' ) );

/**
* @name skewness
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/skewness}
*/
setReadOnly( arcsine, 'skewness', require( '@stdlib/math/base/dists/arcsine/skewness' ) );

/**
* @name stdev
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/stdev}
*/
setReadOnly( arcsine, 'stdev', require( '@stdlib/math/base/dists/arcsine/stdev' ) );

/**
* @name variance
* @memberof arcsine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/arcsine/variance}
*/
setReadOnly( arcsine, 'variance', require( '@stdlib/math/base/dists/arcsine/variance' ) );


// EXPORTS //

module.exports = arcsine;

},{"@stdlib/math/base/dists/arcsine/cdf":192,"@stdlib/math/base/dists/arcsine/ctor":194,"@stdlib/math/base/dists/arcsine/entropy":196,"@stdlib/math/base/dists/arcsine/kurtosis":197,"@stdlib/math/base/dists/arcsine/logcdf":201,"@stdlib/math/base/dists/arcsine/logpdf":204,"@stdlib/math/base/dists/arcsine/mean":206,"@stdlib/math/base/dists/arcsine/median":208,"@stdlib/math/base/dists/arcsine/mode":210,"@stdlib/math/base/dists/arcsine/pdf":213,"@stdlib/math/base/dists/arcsine/quantile":216,"@stdlib/math/base/dists/arcsine/skewness":218,"@stdlib/math/base/dists/arcsine/stdev":220,"@stdlib/math/base/dists/arcsine/variance":222,"@stdlib/utils/define-read-only-property":1937}],200:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 10.0 );
* var y = logcdf( 0.5 );
* // returns ~-1.938
*
* y = logcdf( 8.0 );
* // returns ~-0.35
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return NINF;
		}
		if ( x >= b ) {
			return 0.0;
		}
		return LN2 - LN_PI + ln( asin( sqrt( ( x-a ) / ( b-a ) ) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-pi":80,"@stdlib/constants/math/float64-ln-two":83,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],201:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/arcsine/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/arcsine/logcdf' );
*
* var y = logcdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* var mylogcdf = logcdf.factory( 0.0, 10.0 );
* y = mylogcdf( 0.5 );
* // returns ~-1.938
*
* y = mylogcdf( 8.0 );
* // returns ~-0.35
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":200,"./logcdf.js":202,"@stdlib/utils/define-read-only-property":1937}],202:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 9.0, 0.0, 10.0 );
* // returns ~-0.23
*
* @example
* var y = logcdf( 0.5, 0.0, 2.0 );
* // returns ~-1.1
*
* @example
* var y = logcdf( +Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = logcdf( -Infinity, 2.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function logcdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return NINF;
	}
	if ( x >= b ) {
		return 0.0;
	}
	return LN2 - LN_PI + ln( asin( sqrt( ( x-a ) / ( b-a ) ) ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ln-pi":80,"@stdlib/constants/math/float64-ln-two":83,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826}],203:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 10.0 );
* var y = logpdf( 2.0 );
* // returns ~-2.531
*
* y = logpdf( 12.0 );
* // returns -Infinity
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return NINF;
		}
		return -( LN_PI + ( ln( ( x-a ) * ( b-x ) ) / 2.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-pi":80,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],204:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/arcsine/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/arcsine/logpdf' );
*
* var y = logpdf( 3.0, 2.0, 6.0 );
* // returns ~-1.694
*
* var mylogPDF = logpdf.factory( 6.0, 7.0 );
* y = mylogPDF( 7.0 );
* // returns Infinity
*
* y = mylogPDF( 5.0 );
* // returns -Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":203,"./logpdf.js":205,"@stdlib/utils/define-read-only-property":1937}],205:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 4.0 );
* // returns ~-1.838
*
* @example
* var y = logpdf( 5.0, 0.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.25, 0.0, 1.0 );
* // returns ~-0.308
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function logpdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return NINF;
	}
	return -( LN_PI + ( ln( ( x-a ) * ( b-x ) ) / 2.0 ) );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ln-pi":80,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],206:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution expected value.
*
* @module @stdlib/math/base/dists/arcsine/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/arcsine/mean' );
*
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 8.0
*
* v = mean( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":207}],207:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = mean( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
}


// EXPORTS //

module.exports = mean;

},{}],208:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution median.
*
* @module @stdlib/math/base/dists/arcsine/median
*
* @example
* var median = require( '@stdlib/math/base/dists/arcsine/median' );
*
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns 8.0
*
* v = median( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":209}],209:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the median of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* @example
* var v = median( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = median( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = median( 2.0, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
}


// EXPORTS //

module.exports = median;

},{}],210:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution mode.
*
* @module @stdlib/math/base/dists/arcsine/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/arcsine/mode' );
*
* var v = mode( 0.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns 4.0
*
* v = mode( 2.0, 8.0 );
* // returns 2.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":211}],211:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} mode
*
* @example
* var v = mode( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns 4.0
*
* @example
* var v = mode( -4.0, 4.0 );
* // returns -4.0
*
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return a;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],212:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0 );
* var y = pdf( 2.0 );
* // returns ~0.08
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return 0.0;
		}
		return 1.0 / ( PI * sqrt( ( x-a ) * ( b-x ) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],213:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/arcsine/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/arcsine/pdf' );
*
* var y = pdf( 3.0, 2.0, 6.0 );
* // returns ~0.184
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 7.0 );
* // returns Infinity
*
* y = myPDF( 5.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":212,"./pdf.js":214,"@stdlib/utils/define-read-only-property":1937}],214:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 4.0 );
* // returns ~0.159
*
* @example
* var y = pdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.25, 0.0, 1.0 );
* // returns ~0.735
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function pdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	return 1.0 / ( PI * sqrt( ( x-a ) * ( b-x ) ) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],215:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var sin = require( '@stdlib/math/base/special/sin' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for an arcsine distribution with minimum support `a` an maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0 );
* var y = quantile( 0.4 );
* // returns ~2.691
*
* y = quantile( 0.8 );
* // returns ~3.809
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for an arcsine distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + ( pow( sin( HALF_PI*p ), 2.0 ) * ( b-a ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-half-pi":76,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sin":1806,"@stdlib/utils/constant-function":1933}],216:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution quantile function.
*
* @module @stdlib/math/base/dists/arcsine/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/arcsine/quantile' );
*
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns ~5.0
*
* var myQuantile = quantile.factory( 0.0, 4.0 );
* y = myQuantile( 0.8 );
* // returns ~3.618
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":215,"./quantile.js":217,"@stdlib/utils/define-read-only-property":1937}],217:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var sin = require( '@stdlib/math/base/special/sin' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );


// MAIN //

/**
* Evaluates the quantile function for an arcsine distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.905
*
* @example
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns ~5.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 2.0, 1.0 );
* // returns NaN
*/
function quantile( p, a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return a + ( pow( sin( HALF_PI*p ), 2.0 ) * ( b-a ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/constants/math/float64-half-pi":76,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sin":1806}],218:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution skewness.
*
* @module @stdlib/math/base/dists/arcsine/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/arcsine/skewness' );
*
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* v = skewness( 2.0, 8.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":219}],219:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* @example
* var v = skewness( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128}],220:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution standard deviation.
*
* @module @stdlib/math/base/dists/arcsine/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/arcsine/stdev' );
*
* var v = stdev( 0.0, 1.0 );
* // returns ~0.354
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* v = stdev( 2.0, 8.0 );
* // returns ~2.121
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":221}],221:[function(require,module,exports){
'use strict';

// VARIABLES //

var SQRT1OVER8 = 0.35355339059327373; // sqrt( 1.0/8.0 )


// MAIN //

/**
* Returns the standard deviation of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0 );
* // returns ~0.354
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* @example
* var v = stdev( -4.0, 4.0 );
* // returns ~2.828
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( a, b ) {
	if ( a >= b ) {
		return NaN;
	}
	return SQRT1OVER8 * ( b-a );
}


// EXPORTS //

module.exports = stdev;

},{}],222:[function(require,module,exports){
'use strict';

/**
* Arcsine distribution variance.
*
* @module @stdlib/math/base/dists/arcsine/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/arcsine/variance' );
*
* var v = variance( 0.0, 1.0 );
* // returns ~0.125
*
* v = variance( 4.0, 12.0 );
* // returns 8.0
*
* v = variance( 2.0, 8.0 );
* // returns ~4.5
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":223}],223:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.0, 1.0 );
* // returns ~0.125
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = variance( -4.0, 4.0 );
* // returns 8.0
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( a, b ) {
	if ( a >= b ) {
		return NaN;
	}
	return 0.125 * pow( b-a, 2.0 );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/special/pow":1743}],224:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.813
*
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.104
*
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.967
*
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( 1.5, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x >= 1.0 ) {
		return 1.0;
	}
	return betainc( x, alpha, beta );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363}],225:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.705
*
* y = cdf( 0.3 );
* // returns ~0.369
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x >= 1.0 ) {
			return 1.0;
		}
		return betainc( x, alpha, beta );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/utils/constant-function":1933}],226:[function(require,module,exports){
'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a beta distribution.
*
* @module @stdlib/math/base/dists/beta/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/beta/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.813
*
* @example
* var factory = require( '@stdlib/math/base/dists/beta/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.705
*
* y = cdf( 0.3 );
* // returns ~0.369
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":224,"./factory.js":225,"@stdlib/utils/define-read-only-property":1937}],227:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/beta/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/beta/kurtosis' );
var mean = require( '@stdlib/math/base/dists/beta/mean' );
var median = require( '@stdlib/math/base/dists/beta/median' );
var mode = require( '@stdlib/math/base/dists/beta/mode' );
var skewness = require( '@stdlib/math/base/dists/beta/skewness' );
var stdev = require( '@stdlib/math/base/dists/beta/stdev' );
var variance = require( '@stdlib/math/base/dists/beta/variance' );
var cdf = require( '@stdlib/math/base/dists/beta/cdf' );
var logcdf = require( '@stdlib/math/base/dists/beta/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/beta/logpdf' );
var mgf = require( '@stdlib/math/base/dists/beta/mgf' );
var pdf = require( '@stdlib/math/base/dists/beta/pdf' );
var quantile = require( '@stdlib/math/base/dists/beta/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function betaCDF( x ) {
	return cdf( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function betaLogCDF( x ) {
	return logcdf( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function betaLogPDF( x ) {
	return logpdf( x, this.alpha, this.beta );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function betaMGF( t ) {
	return mgf( t, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function betaPDF( x ) {
	return pdf( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function betaQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
}


// MAIN //

/**
* Beta distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - first shape parameter
* @param {PositiveNumber} [beta=1.0] - second shape parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Beta} distribution instance
*
* @example
* var beta = new Beta( 1.0, 1.0 );
*
* var y = beta.cdf( 0.8 );
* // returns 0.8
*
* var mu = beta.mean;
* // returns 0.5
*/
function Beta() {
	var alpha;
	var beta;
	if ( !(this instanceof Beta) ) {
		if ( arguments.length === 0 ) {
			return new Beta();
		}
		return new Beta( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Beta distribution differential entropy.
*
* @name entropy
* @memberof Beta.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.entropy;
* // returns ~-0.869
*/
Object.defineProperty( Beta.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.beta );
	}
});

/**
* Beta distribution excess kurtosis.
*
* @name kurtosis
* @memberof Beta.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.kurtosis;
* // returns ~0.082
*/
Object.defineProperty( Beta.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Beta distribution expected value.
*
* @name mean
* @memberof Beta.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.mean;
* // returns 0.25
*/
Object.defineProperty( Beta.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Beta distribution median.
*
* @name median
* @memberof Beta.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.median;
* // returns ~0.239
*/
Object.defineProperty( Beta.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.alpha, this.beta );
	}
});

/**
* Beta distribution mode.
*
* @name mode
* @memberof Beta.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.mode;
* // returns 0.25
*/
Object.defineProperty( Beta.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Beta distribution skewness.
*
* @name skewness
* @memberof Beta.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.skewness;
* // returns ~0.011
*/
Object.defineProperty( Beta.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Beta distribution standard deviation.
*
* @name stdev
* @memberof Beta.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.stdev;
* // returns ~0.105
*/
Object.defineProperty( Beta.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.beta );
	}
});

/**
* Beta distribution variance.
*
* @name variance
* @memberof Beta.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.variance;
* // returns ~0.011
*/
Object.defineProperty( Beta.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Beta.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.cdf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Beta.prototype, 'cdf', betaCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Beta.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.logcdf( 0.5 );
* // returns ~-0.207
*/
setReadOnly( Beta.prototype, 'logcdf', betaLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Beta.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.logpdf( 0.8 );
* // returns ~-2.0557
*/
setReadOnly( Beta.prototype, 'logpdf', betaLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Beta.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.mgf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Beta.prototype, 'mgf', betaMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Beta.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.pdf( 0.8 );
* // returns ~0.013
*/
setReadOnly( Beta.prototype, 'pdf', betaPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Beta.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.quantile( 0.5 );
* // returns ~0.314
*/
setReadOnly( Beta.prototype, 'quantile', betaQuantile );


// EXPORTS //

module.exports = Beta;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/beta/cdf":226,"@stdlib/math/base/dists/beta/entropy":230,"@stdlib/math/base/dists/beta/kurtosis":231,"@stdlib/math/base/dists/beta/logcdf":235,"@stdlib/math/base/dists/beta/logpdf":238,"@stdlib/math/base/dists/beta/mean":240,"@stdlib/math/base/dists/beta/median":242,"@stdlib/math/base/dists/beta/mgf":246,"@stdlib/math/base/dists/beta/mode":248,"@stdlib/math/base/dists/beta/pdf":251,"@stdlib/math/base/dists/beta/quantile":254,"@stdlib/math/base/dists/beta/skewness":256,"@stdlib/math/base/dists/beta/stdev":258,"@stdlib/math/base/dists/beta/variance":260,"@stdlib/utils/define-read-only-property":1937}],228:[function(require,module,exports){
'use strict';

/**
* Beta distribution constructor.
*
* @module @stdlib/math/base/dists/beta/ctor
*
* @example
* var Beta = require( '@stdlib/math/base/dists/beta/ctor' );
*
* var beta = new Beta( 1.0, 1.0 );
*
* var y = beta.cdf( 0.8 );
* // returns 0.8
*
* var mu = beta.mean;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":227}],229:[function(require,module,exports){
'use strict';

// MODULES //

var digamma = require( '@stdlib/math/base/special/digamma' );
var betaln = require( '@stdlib/math/base/special/betaln' );


// MAIN //

/**
* Returns the differential entropy of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {NonPositiveNumber} differential entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~-0.869
*
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.795
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = betaln( alpha, beta );
	out -= ( alpha-1.0 ) * digamma( alpha );
	out -= ( beta-1.0 ) * digamma( beta );
	out += ( alpha+beta-2.0 ) * digamma( alpha+beta );
	return out;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/digamma":1412}],230:[function(require,module,exports){
'use strict';

/**
* Beta distribution differential entropy.
*
* @module @stdlib/math/base/dists/beta/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/beta/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 0.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~-0.869
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.795
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":229}],231:[function(require,module,exports){
'use strict';

/**
* Beta distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/beta/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/beta/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns -1.2
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~0.082
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~0.490
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":232}],232:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the excess kurtosis of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~0.529
*
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~-0.829
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	var axb;
	var amb;
	var apb;
	var out;

	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	axb = alpha * beta;
	amb = alpha - beta;
	apb = alpha + beta;
	out = amb * amb * ( apb+1.0 );
	out -= axb * ( apb+2.0 );
	out *= 6.0;
	out /= axb * ( apb+2.0 ) * ( apb+3.0 );
	return out;
}


// EXPORTS //

module.exports = kurtosis;

},{}],233:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace beta
*/
var beta = {};

/**
* @name Beta
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/ctor}
*/
setReadOnly( beta, 'Beta', require( '@stdlib/math/base/dists/beta/ctor' ) );

/**
* @name cdf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/cdf}
*/
setReadOnly( beta, 'cdf', require( '@stdlib/math/base/dists/beta/cdf' ) );

/**
* @name entropy
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/entropy}
*/
setReadOnly( beta, 'entropy', require( '@stdlib/math/base/dists/beta/entropy' ) );

/**
* @name kurtosis
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/kurtosis}
*/
setReadOnly( beta, 'kurtosis', require( '@stdlib/math/base/dists/beta/kurtosis' ) );

/**
* @name logcdf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/logcdf}
*/
setReadOnly( beta, 'logcdf', require( '@stdlib/math/base/dists/beta/logcdf' ) );

/**
* @name logpdf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/logpdf}
*/
setReadOnly( beta, 'logpdf', require( '@stdlib/math/base/dists/beta/logpdf' ) );

/**
* @name mean
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/mean}
*/
setReadOnly( beta, 'mean', require( '@stdlib/math/base/dists/beta/mean' ) );

/**
* @name median
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/median}
*/
setReadOnly( beta, 'median', require( '@stdlib/math/base/dists/beta/median' ) );

/**
* @name mgf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/mgf}
*/
setReadOnly( beta, 'mgf', require( '@stdlib/math/base/dists/beta/mgf' ) );

/**
* @name mode
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/mode}
*/
setReadOnly( beta, 'mode', require( '@stdlib/math/base/dists/beta/mode' ) );

/**
* @name pdf
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/pdf}
*/
setReadOnly( beta, 'pdf', require( '@stdlib/math/base/dists/beta/pdf' ) );

/**
* @name quantile
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/quantile}
*/
setReadOnly( beta, 'quantile', require( '@stdlib/math/base/dists/beta/quantile' ) );

/**
* @name skewness
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/skewness}
*/
setReadOnly( beta, 'skewness', require( '@stdlib/math/base/dists/beta/skewness' ) );

/**
* @name stdev
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/stdev}
*/
setReadOnly( beta, 'stdev', require( '@stdlib/math/base/dists/beta/stdev' ) );

/**
* @name variance
* @memberof beta
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/beta/variance}
*/
setReadOnly( beta, 'variance', require( '@stdlib/math/base/dists/beta/variance' ) );


// EXPORTS //

module.exports = beta;

},{"@stdlib/math/base/dists/beta/cdf":226,"@stdlib/math/base/dists/beta/ctor":228,"@stdlib/math/base/dists/beta/entropy":230,"@stdlib/math/base/dists/beta/kurtosis":231,"@stdlib/math/base/dists/beta/logcdf":235,"@stdlib/math/base/dists/beta/logpdf":238,"@stdlib/math/base/dists/beta/mean":240,"@stdlib/math/base/dists/beta/median":242,"@stdlib/math/base/dists/beta/mgf":246,"@stdlib/math/base/dists/beta/mode":248,"@stdlib/math/base/dists/beta/pdf":251,"@stdlib/math/base/dists/beta/quantile":254,"@stdlib/math/base/dists/beta/skewness":256,"@stdlib/math/base/dists/beta/stdev":258,"@stdlib/math/base/dists/beta/variance":260,"@stdlib/utils/define-read-only-property":1937}],234:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.35
*
* y = logcdf( 0.3 );
* // returns ~-0.997
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return NINF;
		}
		if ( x >= 1.0 ) {
			return 0.0;
		}
		return ln( betainc( x, alpha, beta ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],235:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a beta distribution.
*
* @module @stdlib/math/base/dists/beta/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/beta/logcdf' );
*
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-0.693
*
* y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.208
*
* @example
* var factory = require( '@stdlib/math/base/dists/beta/logcdf' ).factory;
*
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.35
*
* y = logcdf( 0.3 );
* // returns ~-0.997
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":234,"./logcdf.js":236,"@stdlib/utils/define-read-only-property":1937}],236:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-0.693
*
* @example
* var y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.208
*
* @example
* var y = logcdf( 0.2, 2.0, 2.0 );
* // returns ~-2.263
*
* @example
* var y = logcdf( 0.8, 4.0, 4.0 );
* // returns ~-0.034
*
* @example
* var y = logcdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = logcdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function logcdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return NINF;
	}
	if ( x >= 1.0 ) {
		return 0.0;
	}
	return ln( betainc( x, alpha, beta ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/ln":1679}],237:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/
function factory( alpha, beta ) {
	var betalnAB;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	betalnAB = betaln( alpha, beta );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated natural logarithm of the PDF
	*
	* @example
	* var y = logpdf( 0.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x > 1.0 ) {
			// Support of the Beta distribution: [0,1]
			return NINF;
		}
		if ( x === 0.0 ) {
			if ( alpha < 1.0 ) {
				return PINF;
			}
			if ( alpha > 1.0 ) {
				return NINF;
			}
			return ln( beta );
		}
		if ( x === 1.0 ) {
			if ( beta < 1.0 ) {
				return PINF;
			}
			if ( beta > 1.0 ) {
				return NINF;
			}
			return ln( alpha );
		}
		out = -betalnAB;
		out += ( ( alpha-1.0 )*ln(x) ) + ( ( beta-1.0 )*log1p(-x) );
		return out;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/utils/constant-function":1933}],238:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the probability density function (logPDF) for a beta distribution.
*
* @module @stdlib/math/base/dists/beta/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/beta/logpdf' );
*
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.223
*
* @example
* var factory = require( '@stdlib/math/base/dists/beta/logpdf' );
*
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":237,"./logpdf.js":239,"@stdlib/utils/define-read-only-property":1937}],239:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* @example
* var y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.223
*
* @example
* var y = logpdf( 0.2, 2.0, 2.0 );
* // returns ~-0.041
*
* @example
* var y = logpdf( 0.8, 4.0, 4.0 );
* // returns ~-0.557
*
* @example
* var y = logpdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 1.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function logpdf( x, alpha, beta ) {
	var out;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x > 1.0 ) {
		// Support of the Beta distribution: [0,1]
		return NINF;
	}
	if ( x === 0.0 ) {
		if ( alpha < 1.0 ) {
			return PINF;
		}
		if ( alpha > 1.0 ) {
			return NINF;
		}
		return ln( beta );
	}
	if ( x === 1.0 ) {
		if ( beta < 1.0 ) {
			return PINF;
		}
		if ( beta > 1.0 ) {
			return NINF;
		}
		return ln( alpha );
	}
	out = ( alpha-1.0 ) * ln( x );
	out += ( beta-1.0 ) * log1p( -x );
	out -= betaln( alpha, beta );
	return out;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690}],240:[function(require,module,exports){
'use strict';

/**
* Beta distribution expected value.
*
* @module @stdlib/math/base/dists/beta/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/beta/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 0.25
*
* v = mean( 8.0, 2.0 );
* // returns 0.8
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":241}],241:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 0.5
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 0.25
*
* @example
* var v = mean( 8.0, 2.0 );
* // returns 0.8
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / ( alpha + beta );
}


// EXPORTS //

module.exports = mean;

},{}],242:[function(require,module,exports){
'use strict';

/**
* Beta distribution median.
*
* @module @stdlib/math/base/dists/beta/median
*
* @example
* var median = require( '@stdlib/math/base/dists/beta/median' );
*
* var v = median( 1.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns ~0.239
*
* v = median( 8.0, 2.0 );
* // returns ~0.820
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":243}],243:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );


// MAIN //

/**
* Returns the median of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns 0.5
*
* @example
* var v = median( 4.0, 12.0 );
* // returns ~0.239
*
* @example
* var v = median( 8.0, 2.0 );
* // returns ~0.820
*
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = median( 2.0, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return betaincinv( 0.5, alpha, beta );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/special/betaincinv":1365}],244:[function(require,module,exports){
'use strict';

// MODULES //

var betaFcn = require( '@stdlib/math/base/special/beta' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/constants/math/float64-eps' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.
*
* @private
* @param {number} t - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
* @example
* var y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
* @example
* var y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
* @example
* var y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
*/
function mgf( t, alpha, beta ) {
	var summand;
	var denom;
	var sum;
	var c;
	var k;

	denom = betaFcn( alpha, beta );
	sum = 1.0;
	c = 1.0;
	k = 1;
	do {
		c *= t / k;
		summand = ( betaFcn( alpha+k, beta ) / denom ) * c;
		sum += summand;
		k += 1;
	} while ( abs( summand / sum ) >= EPS );
	return sum;
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/beta":1360}],245:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var mgf0 = require( './_mgf.js' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.5, 0.5 );
*
* var y = mgf( 0.8 );
* // returns ~1.522
*
* y = mgf( 0.3 );
* // returns ~1.168
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a beta distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 2.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) ) {
			return NaN;
		}
		return mgf0( t, alpha, beta );
	}
}


// EXPORTS //

module.exports = factory;

},{"./_mgf.js":244,"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],246:[function(require,module,exports){
'use strict';

/**
* Moment-generating function (MGF) for a beta distribution.
*
* @module @stdlib/math/base/dists/beta/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/beta/mgf' );
*
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
*
* y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
*
* y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
*
* y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
*
* @example
* var factory = require( '@stdlib/math/base/dists/beta/mgf' ).factory;
*
* var mgf = factory( 0.5, 0.5 );
*
* var y = mgf( 0.8 );
* // returns ~1.522
*
* y = mgf( 0.3 );
* // returns ~1.168
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":245,"./mgf.js":247,"@stdlib/utils/define-read-only-property":1937}],247:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var mgf0 = require( './_mgf.js' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
*
* @example
* var y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
*
* @example
* var y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
*
* @example
* var y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
*
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.5, 0.0 );
* // returns NaN
*/
function mgf( t, alpha, beta ) {
	if (
		isnan( t ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mgf0( t, alpha, beta );
}


// EXPORTS //

module.exports = mgf;

},{"./_mgf.js":244,"@stdlib/math/base/assert/is-nan":128}],248:[function(require,module,exports){
'use strict';

/**
* Beta distribution mode.
*
* @module @stdlib/math/base/dists/beta/mode.
*
* @example
* var mode = require( '@stdlib/math/base/dists/beta/mode' );
*
* var v = mode( 4.0, 12.0 );
* // returns ~0.214
*
* v = mode( 8.0, 2.0 );
* // returns ~0.875
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":249}],249:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.214
*
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~0.875
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, 0.8 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 2.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if ( alpha <= 1.0 || beta <= 1.0 ) {
		return NaN;
	}
	return ( alpha-1.0 ) / ( alpha+beta-2.0 );
}


// EXPORTS //

module.exports = mode;

},{}],250:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.796
*
* y = pdf( 0.3 );
* // returns ~0.695
*/
function factory( alpha, beta ) {
	var betalnAB;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	betalnAB = betaln( alpha, beta );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 0.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x > 1.0 ) {
			// Support of the Beta distribution: [0,1]
			return 0.0;
		}
		if ( x === 0.0 ) {
			if ( alpha < 1.0 ) {
				return PINF;
			}
			if ( alpha > 1.0 ) {
				return 0.0;
			}
			return beta;
		}
		if ( x === 1.0 ) {
			if ( beta < 1.0 ) {
				return PINF;
			}
			if ( beta > 1.0 ) {
				return 0.0;
			}
			return alpha;
		}
		out = -betalnAB;
		out += ( alpha-1.0 ) * ln( x );
		out += ( beta-1.0 ) * log1p( -x );
		return exp( out );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/utils/constant-function":1933}],251:[function(require,module,exports){
'use strict';

/**
* Evaluate the probability density function (PDF) for a beta distribution.
*
* @module @stdlib/math/base/dists/beta/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/beta/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns 1.25
*
* @example
* var factory = require( '@stdlib/math/base/dists/beta/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.796
*
* y = pdf( 0.3 );
* // returns ~0.695
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":250,"./pdf.js":252,"@stdlib/utils/define-read-only-property":1937}],252:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns 1.25
*
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.96
*
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~0.573
*
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	var out;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x > 1.0 ) {
		// Support of the Beta distribution: [0,1]
		return 0.0;
	}
	if ( x === 0.0 ) {
		if ( alpha < 1.0 ) {
			return PINF;
		}
		if ( alpha > 1.0 ) {
			return 0.0;
		}
		return beta;
	}
	if ( x === 1.0 ) {
		if ( beta < 1.0 ) {
			return PINF;
		}
		if ( beta > 1.0 ) {
			return 0.0;
		}
		return alpha;
	}
	out = ( alpha-1.0 ) * ln( x );
	out += ( beta-1.0 ) * log1p( -x );
	out -= betaln( alpha, beta );
	return exp( out );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690}],253:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.904
*
* y = quantile( 0.8 );
* // returns ~0.986
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a beta distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if (
			isnan( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		return betaincinv( p, alpha, beta );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaincinv":1365,"@stdlib/utils/constant-function":1933}],254:[function(require,module,exports){
'use strict';

/**
* Evaluate the quantile function for a beta distribution.
*
* @module @stdlib/math/base/dists/beta/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/beta/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~0.894
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.686
*
* @example
* var factory = require( '@stdlib/math/base/dists/beta/quantile' ).factory;
*
* var quantile = factory( 2.0, 2.0 );
*
* var y = quantile( 0.8 );
* // returns ~0.713
*
* y = quantile( 0.4 );
* // returns ~0.5
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":253,"./quantile.js":255,"@stdlib/utils/define-read-only-property":1937}],255:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~0.894
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.686
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if (
		isnan( p ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return betaincinv( p, alpha, beta );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaincinv":1365}],256:[function(require,module,exports){
'use strict';

/**
* Beta distribution skewness.
*
* @module @stdlib/math/base/dists/beta/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/beta/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~0.529
*
* v = skewness( 8.0, 2.0 );
* // returns ~0.829
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":257}],257:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~0.529
*
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~-0.829
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	var out;
	var ab;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	ab = alpha + beta;
	out = 2.0 * ( beta-alpha ) * sqrt( ab + 1.0 );
	out /= ( ab + 2.0 ) * sqrt( alpha * beta );
	return out;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/special/sqrt":1826}],258:[function(require,module,exports){
'use strict';

/**
* Beta distribution standard deviation.
*
* @module @stdlib/math/base/dists/beta/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/beta/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns ~0.289
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.105
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.121
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":259}],259:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns 0.289
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.105
*
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.121
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( alpha, beta ) {
	var apb;
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	apb = alpha + beta;
	out = sqrt( ( alpha * beta ) / ( apb + 1.0 ) );
	out /= apb;
	return out;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1826}],260:[function(require,module,exports){
'use strict';

/**
* Beta distribution variance.
*
* @module @stdlib/math/base/dists/beta/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/beta/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns ~0.083
*
* v = variance( 4.0, 12.0 );
* // returns ~0.011
*
* v = variance( 8.0, 2.0 );
* // returns ~0.015
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":261}],261:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the variance of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns 0.5
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.239
*
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.820
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	var apb;
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	apb = alpha + beta;
	out = alpha * beta;
	out /= apb * apb * ( apb+1.0 );
	return out;
}


// EXPORTS //

module.exports = variance;

},{}],262:[function(require,module,exports){
'use strict';

// MODULES //

var betaCDF = require( '@stdlib/math/base/dists/beta/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.333
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.539
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.074
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.38
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	return betaCDF( x / ( 1.0 + x ), alpha, beta );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/beta/cdf":226}],263:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betaFactory = require( '@stdlib/math/base/dists/beta/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.465
*
* y = cdf( 0.3 );
* // returns ~0.319
*/
function factory( alpha, beta ) {
	var betaCDF;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	betaCDF = betaFactory( alpha, beta );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		return betaCDF( x / ( 1.0 + x ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/beta/cdf":226,"@stdlib/utils/constant-function":1933}],264:[function(require,module,exports){
'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a beta prime distribution.
*
* @module @stdlib/math/base/dists/betaprime/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/betaprime/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.333
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.539
*
* @example
* var factory = require( '@stdlib/math/base/dists/betaprime/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.465
*
* y = cdf( 0.3 );
* // returns ~0.319
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":262,"./factory.js":263,"@stdlib/utils/define-read-only-property":1937}],265:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var kurtosis = require( '@stdlib/math/base/dists/betaprime/kurtosis' );
var mean = require( '@stdlib/math/base/dists/betaprime/mean' );
var mode = require( '@stdlib/math/base/dists/betaprime/mode' );
var skewness = require( '@stdlib/math/base/dists/betaprime/skewness' );
var stdev = require( '@stdlib/math/base/dists/betaprime/stdev' );
var variance = require( '@stdlib/math/base/dists/betaprime/variance' );
var cdf = require( '@stdlib/math/base/dists/betaprime/cdf' );
var logcdf = require( '@stdlib/math/base/dists/betaprime/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/betaprime/logpdf' );
var pdf = require( '@stdlib/math/base/dists/betaprime/pdf' );
var quantile = require( '@stdlib/math/base/dists/betaprime/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function betaPrimeCDF( x ) {
	return cdf( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function betaPrimeLogCDF( x ) {
	return logcdf( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function betaPrimeLogPDF( x ) {
	return logpdf( x, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function betaPrimePDF( x ) {
	return pdf( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function betaPrimeQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
}


// MAIN //

/**
* Beta prime distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - first shape parameter
* @param {PositiveNumber} [beta=1.0] - second shape parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {BetaPrime} distribution instance
*
* @example
* var betaprime = new BetaPrime( 1.0, 1.0 );
*
* var y = betaprime.cdf( 0.8 );
* // returns ~0.444
*
* var mode = betaprime.mode;
* // returns 0.0
*/
function BetaPrime() {
	var alpha;
	var beta;
	if ( !(this instanceof BetaPrime) ) {
		if ( arguments.length === 0 ) {
			return new BetaPrime();
		}
		return new BetaPrime( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Beta prime distribution excess kurtosis.
*
* @name kurtosis
* @memberof BetaPrime.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.kurtosis;
* // returns ~5.764
*/
Object.defineProperty( BetaPrime.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution expected value.
*
* @name mean
* @memberof BetaPrime.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.mean;
* // returns ~0.364
*/
Object.defineProperty( BetaPrime.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution mode.
*
* @name mode
* @memberof BetaPrime.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.mode;
* // returns ~0.231
*/
Object.defineProperty( BetaPrime.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution skewness.
*
* @name skewness
* @memberof BetaPrime.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.skewness;
* // returns ~1.724
*/
Object.defineProperty( BetaPrime.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution standard deviation.
*
* @name stdev
* @memberof BetaPrime.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.stdev;
* // returns ~0.224
*/
Object.defineProperty( BetaPrime.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.beta );
	}
});

/**
* Beta prime distribution variance.
*
* @name variance
* @memberof BetaPrime.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.variance;
* // returns ~0.05
*/
Object.defineProperty( BetaPrime.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof BetaPrime.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.cdf( 0.5 );
* // returns ~0.539
*/
setReadOnly( BetaPrime.prototype, 'cdf', betaPrimeCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof BetaPrime.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.logcdf( 0.5 );
* // returns ~-0.618
*/
setReadOnly( BetaPrime.prototype, 'logcdf', betaPrimeLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof BetaPrime.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.logpdf( 0.8 );
* // returns ~-1.469
*/
setReadOnly( BetaPrime.prototype, 'logpdf', betaPrimeLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof BetaPrime.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.pdf( 0.8 );
* // returns ~0.23
*/
setReadOnly( BetaPrime.prototype, 'pdf', betaPrimePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof BetaPrime.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.quantile( 0.5 );
* // returns ~0.315
*/
setReadOnly( BetaPrime.prototype, 'quantile', betaPrimeQuantile );


// EXPORTS //

module.exports = BetaPrime;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/betaprime/cdf":264,"@stdlib/math/base/dists/betaprime/kurtosis":267,"@stdlib/math/base/dists/betaprime/logcdf":271,"@stdlib/math/base/dists/betaprime/logpdf":274,"@stdlib/math/base/dists/betaprime/mean":276,"@stdlib/math/base/dists/betaprime/mode":278,"@stdlib/math/base/dists/betaprime/pdf":281,"@stdlib/math/base/dists/betaprime/quantile":284,"@stdlib/math/base/dists/betaprime/skewness":286,"@stdlib/math/base/dists/betaprime/stdev":288,"@stdlib/math/base/dists/betaprime/variance":290,"@stdlib/utils/define-read-only-property":1937}],266:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution constructor.
*
* @module @stdlib/math/base/dists/betaprime/ctor
*
* @example
* var BetaPrime = require( '@stdlib/math/base/dists/betaprime/ctor' );
*
* var betaprime = new BetaPrime( 1.0, 1.0 );
*
* var y = betaprime.cdf( 0.8 );
* // returns ~0.444
*
* var mode = betaprime.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":265}],267:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/betaprime/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/betaprime/kurtosis' );
*
* var v = kurtosis( 2.0, 6.0 );
* // returns ~26.143
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~5.764
*
* v = kurtosis( 12.0, 6.0 );
* // returns ~19.49
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":268}],268:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 2.0, 6.0 );
* // returns ~26.143
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~5.764
* @example
* var v = kurtosis( 12.0, 6.0 );
* // returns ~19.49
* @example
* var v = kurtosis( 2.0, 4.0 );
* // returns NaN
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	var abm1;
	var bm1;
	var out;
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 4.0
	) {
		return NaN;
	}
	abm1 = alpha + beta - 1.0;
	bm1 = beta - 1.0;
	out = ( alpha * abm1 * ( (5.0*beta )-11.0 ) ) + ( ( bm1*bm1 )*( bm1-1.0 ) );
	out *= 6.0;
	out /= alpha * abm1 * ( beta-3.0 ) * ( beta-4.0 );
	return out;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],269:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace betaprime
*/
var betaprime = {};

/**
* @name BetaPrime
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/ctor}
*/
setReadOnly( betaprime, 'BetaPrime', require( '@stdlib/math/base/dists/betaprime/ctor' ) );

/**
* @name cdf
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/cdf}
*/
setReadOnly( betaprime, 'cdf', require( '@stdlib/math/base/dists/betaprime/cdf' ) );

/**
* @name kurtosis
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/kurtosis}
*/
setReadOnly( betaprime, 'kurtosis', require( '@stdlib/math/base/dists/betaprime/kurtosis' ) );

/**
* @name logcdf
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/logcdf}
*/
setReadOnly( betaprime, 'logcdf', require( '@stdlib/math/base/dists/betaprime/logcdf' ) );

/**
* @name logpdf
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/logpdf}
*/
setReadOnly( betaprime, 'logpdf', require( '@stdlib/math/base/dists/betaprime/logpdf' ) );

/**
* @name mean
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/mean}
*/
setReadOnly( betaprime, 'mean', require( '@stdlib/math/base/dists/betaprime/mean' ) );

/**
* @name mode
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/mode}
*/
setReadOnly( betaprime, 'mode', require( '@stdlib/math/base/dists/betaprime/mode' ) );

/**
* @name pdf
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/pdf}
*/
setReadOnly( betaprime, 'pdf', require( '@stdlib/math/base/dists/betaprime/pdf' ) );

/**
* @name quantile
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/quantile}
*/
setReadOnly( betaprime, 'quantile', require( '@stdlib/math/base/dists/betaprime/quantile' ) );

/**
* @name skewness
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/skewness}
*/
setReadOnly( betaprime, 'skewness', require( '@stdlib/math/base/dists/betaprime/skewness' ) );

/**
* @name stdev
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/stdev}
*/
setReadOnly( betaprime, 'stdev', require( '@stdlib/math/base/dists/betaprime/stdev' ) );

/**
* @name variance
* @memberof betaprime
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/betaprime/variance}
*/
setReadOnly( betaprime, 'variance', require( '@stdlib/math/base/dists/betaprime/variance' ) );


// EXPORTS //

module.exports = betaprime;

},{"@stdlib/math/base/dists/betaprime/cdf":264,"@stdlib/math/base/dists/betaprime/ctor":266,"@stdlib/math/base/dists/betaprime/kurtosis":267,"@stdlib/math/base/dists/betaprime/logcdf":271,"@stdlib/math/base/dists/betaprime/logpdf":274,"@stdlib/math/base/dists/betaprime/mean":276,"@stdlib/math/base/dists/betaprime/mode":278,"@stdlib/math/base/dists/betaprime/pdf":281,"@stdlib/math/base/dists/betaprime/quantile":284,"@stdlib/math/base/dists/betaprime/skewness":286,"@stdlib/math/base/dists/betaprime/stdev":288,"@stdlib/math/base/dists/betaprime/variance":290,"@stdlib/utils/define-read-only-property":1937}],270:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betaFactory = require( '@stdlib/math/base/dists/beta/logcdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.766
*
* y = logcdf( 0.3 );
* // returns ~-1.142
*/
function factory( alpha, beta ) {
	var betaLogCDF;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	betaLogCDF = betaFactory( alpha, beta );
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return NINF;
		}
		if ( x === PINF ) {
			return 0.0;
		}
		return betaLogCDF( x / ( 1.0 + x ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/beta/logcdf":235,"@stdlib/utils/constant-function":1933}],271:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution.
*
* @module @stdlib/math/base/dists/betaprime/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/betaprime/logcdf' );
*
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-1.099
*
* y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.618
*
* @example
* var factory = require( '@stdlib/math/base/dists/betaprime/logcdf' ).factory;
*
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.766
*
* y = logcdf( 0.3 );
* // returns ~-1.142
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":270,"./logcdf.js":272,"@stdlib/utils/define-read-only-property":1937}],272:[function(require,module,exports){
'use strict';

// MODULES //

var betaLogCDF = require( '@stdlib/math/base/dists/beta/logcdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-1.099
*
* @example
* var y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.618
*
* @example
* var y = logcdf( 0.2, 2.0, 2.0 );
* // returns ~-2.603
*
* @example
* var y = logcdf( 0.8, 4.0, 4.0 );
* // returns ~-0.968
*
* @example
* var y = logcdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function logcdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return NINF;
	}
	if ( x === PINF ) {
		return 0.0;
	}
	return betaLogCDF( x / ( 1.0 + x ), alpha, beta );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/beta/logcdf":235}],273:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-1.62
*
* y = logpdf( 0.3 );
* // returns ~-0.805
*/
function factory( alpha, beta ) {
	var betalnAB;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	betalnAB = betaln( alpha, beta );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated natural logarithm of the PDF
	*
	* @example
	* var y = logpdf( 0.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			// Support of the BetaPrime distribution: (0,∞)
			return NINF;
		}
		out = ( alpha-1.0 ) * ln( x );
		out -= ( alpha+beta ) * log1p( x );
		out -= betalnAB;
		return out;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/utils/constant-function":1933}],274:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the probability density function (logPDF) for a beta prime distribution.
*
* @module @stdlib/math/base/dists/betaprime/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/betaprime/logpdf' );
*
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns ~-0.811
*
* y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~-0.13
*
* @example
* var factory = require( '@stdlib/math/base/dists/betaprime/logpdf' );
*
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":273,"./logpdf.js":275,"@stdlib/utils/define-read-only-property":1937}],275:[function(require,module,exports){
'use strict';

// MODULES //

var betaln = require( '@stdlib/math/base/special/betaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns ~-0.811
*
* @example
* var y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~-0.13
*
* @example
* var y = logpdf( 0.2, 2.0, 2.0 );
* // returns ~-0.547
*
* @example
* var y = logpdf( 0.8, 4.0, 4.0 );
* // returns ~-0.43
*
* @example
* var y = logpdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function logpdf( x, alpha, beta ) {
	var out;

	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		// Support of the BetaPrime distribution: (0,∞)
		return NINF;
	}
	out = ( alpha-1.0 ) * ln( x );
	out -= ( alpha+beta ) * log1p( x );
	out -= betaln( alpha, beta );
	return out;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690}],276:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution expected value.
*
* @module @stdlib/math/base/dists/betaprime/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/betaprime/mean' );
*
* var v = mean( 1.0, 2.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~0.364
*
* v = mean( 8.0, 2.0 );
* // returns 8.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":277}],277:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 2.0 );
* // returns 1.0
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.364
* @example
* var v = mean( 8.0, 2.0 );
* // returns 8.0
* @example
* var v = mean( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 1.0 ) {
		return NaN;
	}
	return alpha / ( beta - 1.0 );
}


// EXPORTS //

module.exports = mean;

},{}],278:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution mode.
*
* @module @stdlib/math/base/dists/betaprime/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/betaprime/mode' );
*
* var v = mode( 1.0, 2.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns ~0.231
*
* v = mode( 8.0, 2.0 );
* // returns ~2.333
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":279}],279:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 2.0 );
* // returns 0.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.231
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~2.333
* @example
* var v = mode( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( alpha < 1.0 ) {
		return 0.0;
	}
	return ( alpha - 1.0 ) / ( beta + 1.0 );
}


// EXPORTS //

module.exports = mode;

},{}],280:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var logpdfFactory = require( '@stdlib/math/base/dists/betaprime/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.198
*
* y = pdf( 0.3 );
* // returns ~0.447
*/
function factory( alpha, beta ) {
	var logpdf;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	logpdf = logpdfFactory( alpha, beta );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 0.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return exp( logpdf( x ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/betaprime/logpdf":274,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],281:[function(require,module,exports){
'use strict';

/**
* Evaluate the probability density function (PDF) for a beta prime distribution.
*
* @module @stdlib/math/base/dists/betaprime/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/betaprime/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns ~0.444
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns ~0.878
*
* @example
* var factory = require( '@stdlib/math/base/dists/betaprime/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.198
*
* y = pdf( 0.3 );
* // returns ~0.447
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":280,"./pdf.js":282,"@stdlib/utils/define-read-only-property":1937}],282:[function(require,module,exports){
'use strict';

// MODULES //

var logpdf = require( '@stdlib/math/base/dists/betaprime/logpdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns ~0.444
*
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns ~0.878
*
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.579
*
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~0.65
*
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return exp( logpdf( x, alpha, beta ) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/betaprime/logpdf":274,"@stdlib/math/base/special/exp":1456}],283:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~9.468
*
* y = quantile( 0.8 );
* // returns ~70.042
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a beta prime distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var x;
		if (
			isnan( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		x = betaincinv( p, alpha, beta );
		return x / ( 1.0-x );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaincinv":1365,"@stdlib/utils/constant-function":1933}],284:[function(require,module,exports){
'use strict';

/**
* Evaluate the quantile function for a beta prime distribution.
*
* @module @stdlib/math/base/dists/betaprime/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/betaprime/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~8.472
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~2.187
*
* @example
* var factory = require( '@stdlib/math/base/dists/betaprime/quantile' ).factory;
*
* var quantile = factory( 2.0, 2.0 );
*
* var y = quantile( 0.8 );
* // returns ~2.482
*
* y = quantile( 0.4 );
* // returns ~0.763
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":283,"./quantile.js":285,"@stdlib/utils/define-read-only-property":1937}],285:[function(require,module,exports){
'use strict';

// MODULES //

var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~8.472
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~2.187
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	var x;
	if (
		isnan( p ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	x = betaincinv( p, alpha, beta );
	return x / ( 1.0-x );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaincinv":1365}],286:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution skewness.
*
* @module @stdlib/math/base/dists/betaprime/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/betaprime/skewness' );
*
* var v = skewness( 2.0, 4.0 );
* // returns ~6.261
*
* v = skewness( 4.0, 12.0 );
* // returns ~1.724
*
* v = skewness( 8.0, 4.0 );
* // returns ~5.729
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":287}],287:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 2.0, 4.0 );
* // returns ~6.261
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~1.724
* @example
* var v = skewness( 8.0, 4.0 );
* // returns ~5.729
* @example
* var v = skewness( 2.0, 2.0 );
* // returns NaN
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	var out;
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 3.0
	) {
		return NaN;
	}
	out = 2.0 * ( ( 2.0*alpha ) + beta - 1.0 ) / ( beta-3.0 );
	out *= sqrt( ( beta-2.0 ) / ( alpha * ( alpha+beta-1.0 ) ) );
	return out;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],288:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution standard deviation.
*
* @module @stdlib/math/base/dists/betaprime/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/betaprime/stdev' );
*
* var v = stdev( 1.0, 3.0 );
* // returns ~0.866
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.223
*
* v = stdev( 8.0, 2.5 );
* // returns ~8.219
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":289}],289:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 3.0 );
* // returns ~0.866
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.223
* @example
* var v = stdev( 8.0, 2.5 );
* // returns ~8.219
* @example
* var v = stdev( 8.0, 2.0 );
* // returns NaN
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( alpha, beta ) {
	var bm1;
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 2.0
	) {
		return NaN;
	}
	bm1 = beta - 1.0;
	return sqrt( ( alpha * ( alpha + bm1 ) ) / ( ( bm1-1.0 ) * bm1*bm1 ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],290:[function(require,module,exports){
'use strict';

/**
* Beta prime distribution variance.
*
* @module @stdlib/math/base/dists/betaprime/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/betaprime/variance' );
*
* var v = variance( 1.0, 3.0 );
* // returns ~0.75
*
* v = variance( 4.0, 12.0 );
* // returns ~0.05
*
* v = variance( 8.0, 2.5 );
* // returns ~67.556
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":291}],291:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 3.0 );
* // returns ~0.75
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.05
* @example
* var v = variance( 8.0, 2.5 );
* // returns ~67.556
* @example
* var v = variance( 8.0, 2.0 );
* // returns NaN
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	var bm1;
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 2.0
	) {
		return NaN;
	}
	bm1 = beta - 1.0;
	return ( alpha * ( alpha + bm1 ) ) / ( ( bm1-1.0 ) * bm1*bm1 );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],292:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 3.0, 20, 0.2 );
* // returns ~0.411
*
* @example
* var y = cdf( 21.0, 20, 0.2 );
* // returns 1.0
*
* @example
* var y = cdf( 5.0, 10, 0.4 );
* // returns ~0.834
*
* @example
* var y = cdf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var y = cdf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, 1.5 );
* // returns NaN
*/
function cdf( x, n, p ) {
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x >= n ) {
		return 1.0;
	}
	x = floor( x + 1.0e-7 );
	return betainc( p, x + 1.0, n - x, true, true );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/floor":1484}],293:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10, 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.172
*
* y = cdf( 1.0 );
* // returns ~0.011
*/
function factory( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x >= n ) {
			return 1.0;
		}
		// Ensure left-continuity:
		x = floor( x + 1.0e-7 );
		return betainc( p, x + 1.0, n - x, true, true );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/floor":1484,"@stdlib/utils/constant-function":1933}],294:[function(require,module,exports){
'use strict';

/**
* Binomial distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/binomial/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/binomial/cdf' );
*
* var y = cdf( 3.0, 20, 0.2 );
* // returns ~0.411
*
* y = cdf( 21.0, 20, 0.2 );
* // returns 1.0
*
* y = cdf( 5.0, 10, 0.4 );
* // returns ~0.834
*
* y = cdf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var factory = require( '@stdlib/math/base/dists/binomial/cdf' ).factory;
*
* var cdf = factory( 10, 0.5 );
*
* var y = cdf( 3.0 );
* // returns ~0.172
*
* y = cdf( 1.0 );
* // returns ~0.011
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":292,"./factory.js":293,"@stdlib/utils/define-read-only-property":1937}],295:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var kurtosis = require( '@stdlib/math/base/dists/binomial/kurtosis' );
var mean = require( '@stdlib/math/base/dists/binomial/mean' );
var median = require( '@stdlib/math/base/dists/binomial/median' );
var mode = require( '@stdlib/math/base/dists/binomial/mode' );
var skewness = require( '@stdlib/math/base/dists/binomial/skewness' );
var stdev = require( '@stdlib/math/base/dists/binomial/stdev' );
var variance = require( '@stdlib/math/base/dists/binomial/variance' );
var cdf = require( '@stdlib/math/base/dists/binomial/cdf' );
var logpmf = require( '@stdlib/math/base/dists/binomial/logpmf' );
var mgf = require( '@stdlib/math/base/dists/binomial/mgf' );
var pmf = require( '@stdlib/math/base/dists/binomial/pmf' );
var quantile = require( '@stdlib/math/base/dists/binomial/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function binomialCDF( x ) {
	return cdf( x, this.n, this.p );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function binomialLogPMF( x ) {
	return logpmf( x, this.n, this.p );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function binomialMGF( t ) {
	return mgf( t, this.n, this.p );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function binomialPMF( x ) {
	return pmf( x, this.n, this.p );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function binomialQuantile( p ) {
	return quantile( p, this.n, this.p );
}


// MAIN //

/**
* Binomial distribution constructor.
*
* @constructor
* @param {PositiveInteger} [n=1.0] - number of trials
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `n` must be a positive integer
* @throws {TypeError} `p` must be a number between 0 and 1
* @returns {Binomial} distribution instance
*
* @example
* var binomial = new Binomial( 5, 0.1 );
*
* var y = binomial.cdf( 0.8 );
* // returns ~0.59
*
* var mode = binomial.mode;
* // returns 0.0
*/
function Binomial() {
	var n;
	var p;
	if ( !(this instanceof Binomial) ) {
		if ( arguments.length === 0 ) {
			return new Binomial();
		}
		return new Binomial( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		n = arguments[ 0 ];
		p = arguments[ 1 ];
		if ( !isPositiveInteger( n ) ) {
			throw new TypeError( 'invalid input argument. Number of trials `n` must be a positive integer. Value: `' + n + '`' );
		}
		if ( !isProbability( p ) ) {
			throw new TypeError( 'invalid input argument. Success probability `p` must be a number between 0 and 1. Value: `' + p + '`' );
		}
	} else {
		n = 1;
		p = 0.5;
	}
	Object.defineProperty( this, 'n', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return n;
		},
		'set': function set( value ) {
			if ( !isPositiveInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );
			}
			n = value;
		}
	});
	Object.defineProperty( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !isProbability( value ) ) {
				throw new TypeError( 'invalid value. Must be a number between 0 and 1. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
}

/**
* Binomial distribution excess kurtosis.
*
* @name kurtosis
* @memberof Binomial.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.kurtosis;
* // returns ~-0.152
*/
Object.defineProperty( Binomial.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.n, this.p );
	}
});

/**
* Binomial distribution expected value.
*
* @name mean
* @memberof Binomial.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.mean;
* // returns ~4.8
*/
Object.defineProperty( Binomial.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.n, this.p );
	}
});

/**
* Binomial distribution median.
*
* @name median
* @memberof Binomial.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.median;
* // returns 5.0
*/
Object.defineProperty( Binomial.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.n, this.p );
	}
});

/**
* Binomial distribution mode.
*
* @name mode
* @memberof Binomial.prototype
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.mode;
* // returns 5.0
*/
Object.defineProperty( Binomial.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.n, this.p );
	}
});

/**
* Binomial distribution skewness.
*
* @name skewness
* @memberof Binomial.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.skewness;
* // returns ~0.118
*/
Object.defineProperty( Binomial.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.n, this.p );
	}
});

/**
* Binomial distribution standard deviation.
*
* @name stdev
* @memberof Binomial.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.stdev;
* // returns ~1.697
*/
Object.defineProperty( Binomial.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.n, this.p );
	}
});

/**
* Binomial distribution variance.
*
* @name variance
* @memberof Binomial.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.variance;
* // returns ~2.88
*/
Object.defineProperty( Binomial.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.n, this.p );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Binomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.cdf( 0.5 );
* // returns ~0.41
*/
setReadOnly( Binomial.prototype, 'cdf', binomialCDF );

/**
* Evaluates the natural logarithm of the probability density function (PMF).
*
* @name logpmf
* @memberof Binomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.logpmf( 2.0 );
* // returns ~-1.871
*/
setReadOnly( Binomial.prototype, 'logpmf', binomialLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Binomial.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.mgf( 0.5 );
* // returns ~1.629
*/
setReadOnly( Binomial.prototype, 'mgf', binomialMGF );

/**
* Evaluates the probability density function (PMF).
*
* @name pmf
* @memberof Binomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.pmf( 2.0 );
* // returns ~0.154
*/
setReadOnly( Binomial.prototype, 'pmf', binomialPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Binomial.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.quantile( 0.5 );
* // returns 1.0
*/
setReadOnly( Binomial.prototype, 'quantile', binomialQuantile );


// EXPORTS //

module.exports = Binomial;

},{"@stdlib/assert/is-positive-integer":48,"@stdlib/assert/is-probability":56,"@stdlib/math/base/dists/binomial/cdf":294,"@stdlib/math/base/dists/binomial/kurtosis":299,"@stdlib/math/base/dists/binomial/logpmf":303,"@stdlib/math/base/dists/binomial/mean":305,"@stdlib/math/base/dists/binomial/median":307,"@stdlib/math/base/dists/binomial/mgf":310,"@stdlib/math/base/dists/binomial/mode":312,"@stdlib/math/base/dists/binomial/pmf":315,"@stdlib/math/base/dists/binomial/quantile":318,"@stdlib/math/base/dists/binomial/skewness":322,"@stdlib/math/base/dists/binomial/stdev":324,"@stdlib/math/base/dists/binomial/variance":326,"@stdlib/utils/define-read-only-property":1937}],296:[function(require,module,exports){
'use strict';

/**
* Binomial distribution constructor.
*
* @module @stdlib/math/base/dists/binomial/ctor
*
* @example
* var Binomial = require( '@stdlib/math/base/dists/binomial/ctor' );
*
* var binomial = new Binomial( 8, 0.2 );
*
* var y = binomial.cdf( 2.8 );
* // returns ~0.797
*
* var mode = binomial.mode;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":295}],297:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the entropy of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} entropy
*
* @example
* var v = entropy( 100, 0.1 );
* // returns ~0.051
* @example
* var v = entropy( 20, 0.5 );
* // returns ~-0.1
* @example
* var v = entropy( 10.3, 0.5 );
* // returns NaN
* @example
* var v = entropy( 20, 1.1 );
* // returns NaN
* @example
* var v = entropy( 20, NaN );
* // returns NaN
*/
function entropy( n, p ) {
	var nlq;
	var out;
	var i;
	var q;

	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( p === 0 || p === 1 || n === 0 ) {
		return 0.0;
	}
	q = 1.0 - p;
	nlq = n * ln( q );
	out = exp( nlq ) * nlq;
	for ( i = 1; i <= n; i++ ) {
		nlq += ln( ( n - i + 1 ) / i ) + ln( p / q );
		out += exp( nlq ) * nlq;
	}
	return -out;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679}],298:[function(require,module,exports){
'use strict';

/**
* Binomial distribution entropy.
*
* @module @stdlib/math/base/dists/binomial/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/binomial/entropy' );
*
* var v = entropy( 100, 0.1 );
* // returns ~0.051
*
* v = entropy( 20, 0.5 );
* // returns ~-0.1
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":297}],299:[function(require,module,exports){
'use strict';

/**
* Binomial distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/binomial/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/binomial/kurtosis' );
*
* var v = kurtosis( 100, 0.1 );
* // returns ~0.051
*
* v = kurtosis( 20, 0.5 );
* // returns ~-0.1
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":300}],300:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the kurtosis of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 100, 0.1 );
* // returns ~0.051
* @example
* var v = kurtosis( 20, 0.5 );
* // returns ~-0.1
* @example
* var v = kurtosis( 10.3, 0.5 );
* // returns NaN
* @example
* var v = kurtosis( 20, 1.1 );
* // returns NaN
* @example
* var v = kurtosis( 20, NaN );
* // returns NaN
*/
function kurtosis( n, p ) {
	var pq;
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	pq = p * ( 1.0 - p );
	return ( 1.0 - ( 6.0 * pq ) ) / ( n * pq );
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134}],301:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace binomial
*/
var binomial = {};

/**
* @name Binomial
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/ctor}
*/
setReadOnly( binomial, 'Binomial', require( '@stdlib/math/base/dists/binomial/ctor' ) );

/**
* @name cdf
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/cdf}
*/
setReadOnly( binomial, 'cdf', require( '@stdlib/math/base/dists/binomial/cdf' ) );

/**
* @name entropy
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/entropy}
*/
setReadOnly( binomial, 'entropy', require( '@stdlib/math/base/dists/binomial/entropy' ) );

/**
* @name kurtosis
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/kurtosis}
*/
setReadOnly( binomial, 'kurtosis', require( '@stdlib/math/base/dists/binomial/kurtosis' ) );

/**
* @name logpmf
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/logpmf}
*/
setReadOnly( binomial, 'logpmf', require( '@stdlib/math/base/dists/binomial/logpmf' ) );

/**
* @name mean
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/mean}
*/
setReadOnly( binomial, 'mean', require( '@stdlib/math/base/dists/binomial/mean' ) );

/**
* @name median
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/median}
*/
setReadOnly( binomial, 'median', require( '@stdlib/math/base/dists/binomial/median' ) );

/**
* @name mgf
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/mgf}
*/
setReadOnly( binomial, 'mgf', require( '@stdlib/math/base/dists/binomial/mgf' ) );

/**
* @name mode
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/mode}
*/
setReadOnly( binomial, 'mode', require( '@stdlib/math/base/dists/binomial/mode' ) );

/**
* @name pmf
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/pmf}
*/
setReadOnly( binomial, 'pmf', require( '@stdlib/math/base/dists/binomial/pmf' ) );

/**
* @name quantile
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/quantile}
*/
setReadOnly( binomial, 'quantile', require( '@stdlib/math/base/dists/binomial/quantile' ) );

/**
* @name skewness
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/skewness}
*/
setReadOnly( binomial, 'skewness', require( '@stdlib/math/base/dists/binomial/skewness' ) );

/**
* @name stdev
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/stdev}
*/
setReadOnly( binomial, 'stdev', require( '@stdlib/math/base/dists/binomial/stdev' ) );

/**
* @name variance
* @memberof binomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/binomial/variance}
*/
setReadOnly( binomial, 'variance', require( '@stdlib/math/base/dists/binomial/variance' ) );


// EXPORTS //

module.exports = binomial;

},{"@stdlib/math/base/dists/binomial/cdf":294,"@stdlib/math/base/dists/binomial/ctor":296,"@stdlib/math/base/dists/binomial/entropy":298,"@stdlib/math/base/dists/binomial/kurtosis":299,"@stdlib/math/base/dists/binomial/logpmf":303,"@stdlib/math/base/dists/binomial/mean":305,"@stdlib/math/base/dists/binomial/median":307,"@stdlib/math/base/dists/binomial/mgf":310,"@stdlib/math/base/dists/binomial/mode":312,"@stdlib/math/base/dists/binomial/pmf":315,"@stdlib/math/base/dists/binomial/quantile":318,"@stdlib/math/base/dists/binomial/skewness":322,"@stdlib/math/base/dists/binomial/stdev":324,"@stdlib/math/base/dists/binomial/variance":326,"@stdlib/utils/define-read-only-property":1937}],302:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logpmf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 10, 0.5 );
* var y = logpmf( 3.0 );
* // returns ~-2.146
*
* y = logpmf( 5.0 );
* // returns ~-1.402
*/
function factory( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		!isNonNegativeInteger( n ) ||
		n === PINF ||
		p < 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	if ( p === 0.0 || n === 0 ) {
		return degenerate( 0.0 );
	}
	if ( p === 1.0 ) {
		return degenerate( n );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) ) {
			if ( x > n ) {
				return NINF;
			}
			out = binomcoefln( n, x );
			out += (x * ln( p )) + ((n - x) * log1p( -p ));
			return out;
		}
		return NINF;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/degenerate/logpmf":460,"@stdlib/math/base/special/binomcoefln":1375,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/utils/constant-function":1933}],303:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a binomial distribution.
*
* @module @stdlib/math/base/dists/binomial/logpmf
*
* @example
* var logpmf = require( '@stdlib/math/base/dists/binomial/logpmf' );
*
* var y = logpmf( 3.0, 20, 0.2 );
* // returns ~-1.583
*
* y = logpmf( 21.0, 20, 0.2 );
* // returns -Infinity
*
* y = logpmf( 5.0, 10, 0.4 );
* // returns ~-1.606
*
* y = logpmf( 0.0, 10, 0.4 );
* // returns ~-5.108
*
* @example
* var factory = require( '@stdlib/math/base/dists/binomial/logpmf' ).factory;
*
* var logpmf = factory( 10, 0.5 );
*
* var y = logpmf( 3.0 );
* // returns ~-2.146
*
* y = logpmf( 5.0 );
* // returns ~-1.402
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpmf = require( './logpmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpmf, 'factory', factory );


// EXPORTS //

module.exports = logpmf;

},{"./factory.js":302,"./logpmf.js":304,"@stdlib/utils/define-read-only-property":1937}],304:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 3.0, 20, 0.2 );
* // returns ~-1.583
*
* @example
* var y = logpmf( 21.0, 20, 0.2 );
* // returns -Infinity
*
* @example
* var y = logpmf( 5.0, 10, 0.4 );
* // returns ~-1.606
*
* @example
* var y = logpmf( 0.0, 10, 0.4 );
* // returns ~-5.108
*
* @example
* var y = logpmf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 20, 1.5 );
* // returns NaN
*/
function logpmf( x, n, p ) {
	var out;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( isNonNegativeInteger( x ) ) {
		if ( x > n ) {
			return NINF;
		}
		if ( p === 0.0 ) {
			return ( x === 0 ) ? 0.0 : NINF;
		}
		if ( p === 1.0 ) {
			return ( x === n ) ? 0.0 : NINF;
		}
		out = binomcoefln( n, x );
		out += (x * ln( p )) + (( n - x ) * log1p( -p ));
		return out;
	}
	return NINF;
}


// EXPORTS //

module.exports = logpmf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/binomcoefln":1375,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690}],305:[function(require,module,exports){
'use strict';

/**
* Binomial distribution expected value.
*
* @module @stdlib/math/base/dists/binomial/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/binomial/mean' );
*
* var v = mean( 100, 0.1 );
* // returns 10.0
*
* v = mean( 20, 0.5 );
* // returns 10.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":306}],306:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the expected value of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 100, 0.1 );
* // returns 10.0
* @example
* var v = mean( 20, 0.5 );
* // returns 10.0
* @example
* var v = mean( 10.3, 0.5 );
* // returns NaN
* @example
* var v = mean( 20, 1.1 );
* // returns NaN
* @example
* var v = mean( 20, NaN );
* // returns NaN
*/
function mean( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return n * p;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134}],307:[function(require,module,exports){
'use strict';

/**
* Binomial distribution median.
*
* @module @stdlib/math/base/dists/binomial/median
*
* @example
* var median = require( '@stdlib/math/base/dists/binomial/median' );
*
* var v = median( 100, 0.1 );
* // returns 10
*
* v = median( 20, 0.5 );
* // returns 10
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":308}],308:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var mean = require( '@stdlib/math/base/dists/binomial/mean' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the median of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 100, 0.1 );
* // returns 10
* @example
* var v = median( 20, 0.5 );
* // returns 10
* @example
* var v = median( 10.3, 0.5 );
* // returns NaN
* @example
* var v = median( 20, 1.1 );
* // returns NaN
* @example
* var v = median( 20, NaN );
* // returns NaN
*/
function median( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return round( mean( n, p ) );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/binomial/mean":305,"@stdlib/math/base/special/round":1777}],309:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 10, 0.5 );
* var y = mgf( 0.3 );
* // returns ~5.013
*/
function factory( n, p ) {
	if ( isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a binomial distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var base;
		if ( isnan( t ) ) {
			return NaN;
		}
		base = 1.0 - p + (p * exp(t));
		return pow( base, n );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],310:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a binomial distribution.
*
* @module @stdlib/math/base/dists/binomial/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/binomial/mgf' );
*
* var y = mgf( 0.5, 20, 0.2 );
* // returns ~11.471
*
* y = mgf( 5.0, 20, 0.2 );
* // returns ~4.798e29
*
* y = mgf( 0.9, 10, 0.4 )
* // returns ~99.338
*
* @example
* var factory = require( '@stdlib/math/base/dists/binomial/mgf' ).factory;
*
* var mgf = factory( 10, 0.5 );
*
* var y = mgf( 0.3 );
* // returns ~5.013
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":309,"./mgf.js":311,"@stdlib/utils/define-read-only-property":1937}],311:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a binomial distribution with number of trials `n` and success probability `p` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 20, 0.2 );
* // returns ~11.471
*
* @example
* var y = mgf( 5.0, 20, 0.2 );
* // returns ~4.798e29
*
* @example
* var y = mgf( 0.9, 10, 0.4 )
* // returns ~99.338
*
* @example
* var y = mgf( 0.0, 10, 0.4 )
* // returns 1.0
*
* @example
* var y = mgf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 20, -1.0 );
* // returns
*
* @example
* var y = mgf( 0.2, 20, 1.5 );
* // returns NaN
*/
function mgf( t, n, p ) {
	var base;
	if (
		isnan( t ) ||
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	base = 1.0 - p + (p * exp(t));
	return pow( base, n );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],312:[function(require,module,exports){
'use strict';

/**
* Binomial distribution mode.
*
* @module @stdlib/math/base/dists/binomial/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/binomial/mode' );
*
* var v = mode( 100, 0.1 );
* // returns 10
*
* v = mode( 20, 0.5 );
* // returns 10
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":313}],313:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the mode of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 100, 0.1 );
* // returns 10
* @example
* var v = mode( 20, 0.5 );
* // returns 10
* @example
* var v = mode( 10.3, 0.5 );
* // returns NaN
* @example
* var v = mode( 20, 1.1 );
* // returns NaN
* @example
* var v = mode( 20, NaN );
* // returns NaN
*/
function mode( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return floor( ( n+1 ) * p );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/floor":1484}],314:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/pmf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 10, 0.5 );
* var y = pmf( 3.0 );
* // returns ~0.117
*
* y = pmf( 5.0 );
* // returns ~0.246
*/
function factory( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		!isNonNegativeInteger( n ) ||
		n === PINF ||
		p < 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	if ( p === 0.0 || n === 0 ) {
		return degenerate( 0.0 );
	}
	if ( p === 1.0 ) {
		return degenerate( n );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var lnl;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) ) {
			if ( x > n ) {
				return 0.0;
			}
			lnl = binomcoefln( n, x );
			lnl += (x * ln( p )) + ((n - x) * log1p( -p ));
			return exp( lnl );
		}
		return 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/degenerate/pmf":469,"@stdlib/math/base/special/binomcoefln":1375,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/utils/constant-function":1933}],315:[function(require,module,exports){
'use strict';

/**
* Binomial distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dists/binomial/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dists/binomial/pmf' );
*
* var y = pmf( 3.0, 20, 0.2 );
* // returns ~0.205
*
* y = pmf( 21.0, 20, 0.2 );
* // returns 0.0
*
* y = pmf( 5.0, 10, 0.4 );
* // returns ~0.201
*
* y = pmf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var factory = require( '@stdlib/math/base/dists/binomial/pmf' ).factory;
*
* var pmf = factory( 10, 0.5 );
*
* var y = pmf( 3.0 );
* // returns ~0.117
*
* y = pmf( 5.0 );
* // returns ~0.246
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":314,"./pmf.js":316,"@stdlib/utils/define-read-only-property":1937}],316:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 3.0, 20, 0.2 );
* // returns ~0.205
*
* @example
* var y = pmf( 21.0, 20, 0.2 );
* // returns 0.0
*
* @example
* var y = pmf( 5.0, 10, 0.4 );
* // returns ~0.201
*
* @example
* var y = pmf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var y = pmf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, 1.5 );
* // returns NaN
*/
function pmf( x, n, p ) {
	var lnl;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( isNonNegativeInteger( x ) ) {
		if ( x > n ) {
			return 0.0;
		}
		if ( p === 0.0 ) {
			return ( x === 0 ) ? 1.0 : 0.0;
		}
		if ( p === 1.0 ) {
			return ( x === n ) ? 1.0 : 0.0;
		}
		lnl = binomcoefln( n, x );
		lnl += (x * ln( p )) + (( n - x ) * log1p( -p ));
		return exp( lnl );
	}
	return 0.0;
}


// EXPORTS //

module.exports = pmf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/binomcoefln":1375,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690}],317:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/quantile' ).factory;
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dists/binomial/cdf' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var searchLeft = require( './search_left.js' );
var searchRight = require( './search_right.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10, 0.5 );
* var y = quantile( 0.1 );
* // returns 3
*
* y = quantile( 0.9 );
* // returns 7
*/
function factory( n, p ) {
	var sigmaInv;
	var sigma;
	var mu;

	if (
		isnan( n ) ||
		isnan( p ) ||
		!isNonNegativeInteger( n ) ||
		n === PINF ||
		p < 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	if ( p === 0.0 || n === 0.0 ) {
		return degenerate( 0.0 );
	}
	if ( p === 1.0 ) {
		return degenerate( n );
	}
	mu = n * p;
	sigma = sqrt( n * p * ( 1.0-p ) );
	sigmaInv = 1.0 / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a binomial distribution.
	*
	* @private
	* @param {Probability} r - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( r ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( isnan( r ) || r < 0.0 || r > 1.0 ) {
			return NaN;
		}
		if ( r === 0.0 ) {
			return 0;
		}
		if ( r === 1.0 ) {
			return n;
		}
		// Cornish-Fisher expansion:
		if ( r < 0.5 ) {
			x = -erfcinv( 2.0 * r ) * SQRT2;
		} else {
			x = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );
		guess = round( mu + (sigma * corr) );
		if ( cdf( guess, n, p ) >= r ) {
			return searchLeft( guess, r, n, p );
		}
		return searchRight( guess, r, n, p );
	}
}


// EXPORTS //

module.exports = factory;

},{"./search_left.js":320,"./search_right.js":321,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/binomial/cdf":294,"@stdlib/math/base/dists/degenerate/quantile":472,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],318:[function(require,module,exports){
'use strict';

/**
* Binomial distribution quantile function.
*
* @module @stdlib/math/base/dists/binomial/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/binomial/quantile' );
*
* var y = quantile( 0.4, 20, 0.2 );
* // returns 2
*
* y = quantile( 0.8, 20, 0.2 );
* // returns 5
*
* y = quantile( 0.5, 10, 0.4 );
* // returns 4
*
* @example
* var factory = require( '@stdlib/math/base/dists/binomial/quantile' ).factory;
*
* var quantile = factory( 10, 0.5 );
*
* var y = quantile( 0.1 );
* // returns 3
*
* y = quantile( 0.9 );
* // returns 7
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":317,"./quantile.js":319,"@stdlib/utils/define-read-only-property":1937}],319:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dists/binomial/cdf' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var searchLeft = require( './search_left.js' );
var searchRight = require( './search_right.js' );


// MAIN //

/**
* Evaluates the quantile function for a binomial distribution with number of trials `n` and success probability `p` at a probability `r`.
*
* @param {Probability} r - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p  - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.4, 20, 0.2 );
* // returns 2
*
* @example
* var y = quantile( 0.8, 20, 0.2 );
* // returns 5
*
* @example
* var y = quantile( 0.5, 10, 0.4 );
* // returns 4
*
* @example
* var y = quantile( 0.0, 10, 0.4 );
* // returns 0
*
* @example
* var y = quantile( 1.0, 10, 0.4 );
* // returns 10
*
* @example
* var y = quantile( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, 20, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 20, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 20, 1.5 );
* // returns NaN
*/
function quantile( r, n, p ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var mu;
	var x2;
	var x;

	if (
		isnan( r ) ||
		isnan( n ) ||
		isnan( p ) ||
		r < 0.0 ||
		r > 1.0 ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	if ( r === 1.0 || p === 1.0 ) {
		return n;
	}
	if ( r === 0.0 || p === 0.0 || n === 0 ) {
		return 0.0;
	}
	// Cornish-Fisher expansion:
	mu = n * p;
	sigma = sqrt( n * p * ( 1.0-p ) );
	sigmaInv = 1.0 / sigma;
	if ( r < 0.5 ) {
		x = -erfcinv( 2.0 * r ) * SQRT2;
	} else {
		x = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );
	guess = round( mu + (sigma * corr) );
	if ( cdf( guess, n, p ) >= r ) {
		return searchLeft( guess, r, n, p );
	}
	return searchRight( guess, r, n, p );
}


// EXPORTS //

module.exports = quantile;

},{"./search_left.js":320,"./search_right.js":321,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/binomial/cdf":294,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/sqrt":1826}],320:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dists/binomial/cdf' );


// MAIN //

/**
* Performs a search to the left.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} r - probability
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `r` quantile of the specified distribution
*/
function searchLeft( x, r, n, p ) {
	while ( x !== 0 && cdf( x-1, n, p) >= r ) {
		x -=1;
	}
	return x;
}


// EXPORTS //

module.exports = searchLeft;

},{"@stdlib/math/base/dists/binomial/cdf":294}],321:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dists/binomial/cdf' );


// MAIN //

/**
* Performs a search to the right.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} r - probability
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `r` quantile of the specified distribution
*/
function searchRight( x, r, n, p ) {
	x += 1;
	while ( cdf( x, n, p ) < r ) {
		x += 1;
	}
	return x;
}


// EXPORTS //

module.exports = searchRight;

},{"@stdlib/math/base/dists/binomial/cdf":294}],322:[function(require,module,exports){
'use strict';

/**
* Binomial distribution skewness.
*
* @module @stdlib/math/base/dists/binomial/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/binomial/skewness' );
*
* var v = skewness( 100, 0.1 );
* // returns 9
*
* v = skewness( 20, 0.5 );
* // returns 5
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":323}],323:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the skewness of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} skewness
*
* @example
* var v = skewness( 100, 0.1 );
* // returns ~0.267
* @example
* var v = skewness( 20, 0.5 );
* // returns 0
* @example
* var v = skewness( 10.3, 0.5 );
* // returns NaN
* @example
* var v = skewness( 20, 1.1 );
* // returns NaN
* @example
* var v = skewness( 20, NaN );
* // returns NaN
*/
function skewness( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return ( 1.0 - ( 2.0*p ) ) / sqrt( n * p * ( 1.0-p ) );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/sqrt":1826}],324:[function(require,module,exports){
'use strict';

/**
* Binomial distribution standard deviation.
*
* @module @stdlib/math/base/dists/binomial/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/binomial/stdev' );
*
* var v = stdev( 100, 0.1 );
* // returns 3.0
*
* v = stdev( 20, 0.5 );
* // returns ~2.236
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":325}],325:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 100, 0.1 );
* // returns 3.0
* @example
* var v = stdev( 20, 0.5 );
* // returns ~2.236
* @example
* var v = stdev( 10.3, 0.5 );
* // returns NaN
* @example
* var v = stdev( 20, 1.1 );
* // returns NaN
* @example
* var v = stdev( 20, NaN );
* // returns NaN
*/
function stdev( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return sqrt( n * p * ( 1.0 - p ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/sqrt":1826}],326:[function(require,module,exports){
'use strict';

/**
* Binomial distribution variance.
*
* @module @stdlib/math/base/dists/binomial/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/binomial/variance' );
*
* var v = variance( 100, 0.1 );
* // returns 9
*
* v = variance( 20, 0.5 );
* // returns 5
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":327}],327:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the variance of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 100, 0.1 );
* // returns 9
* @example
* var v = variance( 20, 0.5 );
* // returns 5
* @example
* var v = variance( 10.3, 0.5 );
* // returns NaN
* @example
* var v = variance( 20, 1.1 );
* // returns NaN
* @example
* var v = variance( 20, NaN );
* // returns NaN
*/
function variance( n, p ) {
	if (
		isnan( n ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!isNonNegativeInteger( n ) ||
		n === PINF
	) {
		return NaN;
	}
	return n * p * ( 1.0 - p );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134}],328:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan2 = require( '@stdlib/math/base/special/atan2' );


// VARIABLES //

var ONE_OVER_PI = 0.3183098861837907;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 4.0, 0.0, 2.0 );
* // returns ~0.852
*
* @example
* var y = cdf( 1.0, 0.0, 2.0 );
* // returns ~0.648
*
* @example
* var y = cdf( 1.0, 3.0, 2.0 );
* // returns 0.25
*
* @example
* var y = cdf( NaN, 0.0, 2.0 );
* // returns NaN
*
* @example
* var y = cdf( 1.0, 2.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 1.0, NaN, 3.0 );
* // returns NaN
*/
function cdf( x, x0, gamma ) {
	if (
		isnan( x ) ||
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5;
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/atan2":1324}],329:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan2 = require( '@stdlib/math/base/special/atan2' );


// VARIABLES //

var ONE_OVER_PI = 0.3183098861837907;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
*
* var y = cdf( 10.0 );
* // returns 0.5
*
* y = cdf( 12.0 );
* // returns 0.75
*/
function factory( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/atan2":1324,"@stdlib/utils/constant-function":1933}],330:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/cauchy/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/cauchy/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.852
*
* @example
* var factory = require( '@stdlib/math/base/dists/cauchy/cdf' ).factory;
*
* var cdf = factory( 1.5, 3.0 );
*
* var y = cdf( 1.0 );
* // returns ~0.447
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":328,"./factory.js":329,"@stdlib/utils/define-read-only-property":1937}],331:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/cauchy/entropy' );
var median = require( '@stdlib/math/base/dists/cauchy/median' );
var mode = require( '@stdlib/math/base/dists/cauchy/mode' );
var cdf = require( '@stdlib/math/base/dists/cauchy/cdf' );
var logcdf = require( '@stdlib/math/base/dists/cauchy/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/cauchy/logpdf' );
var pdf = require( '@stdlib/math/base/dists/cauchy/pdf' );
var quantile = require( '@stdlib/math/base/dists/cauchy/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function cauchyCDF( x ) {
	return cdf( x, this.x0, this.gamma );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function cauchyLogCDF( x ) {
	return logcdf( x, this.x0, this.gamma );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function cauchyLogPDF( x ) {
	return logpdf( x, this.x0, this.gamma );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function cauchyPDF( x ) {
	return pdf( x, this.x0, this.gamma );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function cauchyQuantile( p ) {
	return quantile( p, this.x0, this.gamma );
}


// MAIN //

/**
* Cauchy distribution constructor.
*
* @constructor
* @param {number} [x0=0.0] - location parameter
* @param {PositiveNumber} [gamma=1.0] - scale parameter
* @throws {TypeError} `gamma` must be a positive number
* @returns {Cauchy} distribution instance
*
* @example
* var cauchy = new Cauchy( 1.0, 1.0 );
*
* var y = cauchy.cdf( 0.8 );
* // returns ~0.437
*
* var median = cauchy.median;
* // returns 1.0
*/
function Cauchy() {
	var gamma;
	var x0;
	if ( !(this instanceof Cauchy) ) {
		if ( arguments.length === 0 ) {
			return new Cauchy();
		}
		return new Cauchy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		x0 = arguments[ 0 ];
		gamma = arguments[ 1 ];
		if ( !isNumber( x0 ) || isnan( x0 ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `x0` must be a number primitive. Value: `' + x0 + '`' );
		}
		if ( !isPositive( gamma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `gamma` must be a positive number. Value: `' + gamma + '`' );
		}
	} else {
		x0 = 0.0;
		gamma = 1.0;
	}
	Object.defineProperty( this, 'x0', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return x0;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			x0 = value;
		}
	});
	Object.defineProperty( this, 'gamma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return gamma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			gamma = value;
		}
	});
	return this;
}

/**
* Cauchy distribution differential entropy.
*
* @name entropy
* @memberof Cauchy.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.entropy;
* // returns ~5.016
*/
Object.defineProperty( Cauchy.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.x0, this.gamma );
	}
});

/**
* Cauchy distribution median.
*
* @name median
* @memberof Cauchy.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.median;
* // returns 4.0
*/
Object.defineProperty( Cauchy.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.x0, this.gamma );
	}
});

/**
* Cauchy distribution mode.
*
* @name mode
* @memberof Cauchy.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.mode;
* // returns 4.0
*/
Object.defineProperty( Cauchy.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.x0, this.gamma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Cauchy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.cdf( 0.5 );
* // returns ~0.386
*/
setReadOnly( Cauchy.prototype, 'cdf', cauchyCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Cauchy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.logcdf( 0.5 );
* // returns ~-0.952
*/
setReadOnly( Cauchy.prototype, 'logcdf', cauchyLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Cauchy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.logpdf( 0.8 );
* // returns ~-2.617
*/
setReadOnly( Cauchy.prototype, 'logpdf', cauchyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Cauchy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.pdf( 0.8 );
* // returns ~0.073
*/
setReadOnly( Cauchy.prototype, 'pdf', cauchyPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Cauchy.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Cauchy.prototype, 'quantile', cauchyQuantile );


// EXPORTS //

module.exports = Cauchy;

},{"@stdlib/assert/is-nan":32,"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/cauchy/cdf":330,"@stdlib/math/base/dists/cauchy/entropy":334,"@stdlib/math/base/dists/cauchy/logcdf":337,"@stdlib/math/base/dists/cauchy/logpdf":340,"@stdlib/math/base/dists/cauchy/median":342,"@stdlib/math/base/dists/cauchy/mode":344,"@stdlib/math/base/dists/cauchy/pdf":347,"@stdlib/math/base/dists/cauchy/quantile":350,"@stdlib/utils/define-read-only-property":1937}],332:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution constructor.
*
* @module @stdlib/math/base/dists/cauchy/ctor
*
* @example
* var Cauchy = require( '@stdlib/math/base/dists/cauchy/ctor' );
*
* var cauchy = new Cauchy( 1.0, 1.0 );
*
* var y = cauchy.cdf( 0.8 );
* // returns ~0.437
*
* var mode = cauchy.mode;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":331}],333:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns the differential entropy of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 10.0, 5.0 );
* // returns ~4.14
* @example
* var v = entropy( 7.0, 0.1 );
* // returns ~0.228
* @example
* var v = entropy( 10.0, -0.5 );
* // returns NaN
*/
function entropy( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return ln( gamma ) + ln( 4.0*PI );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],334:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution differential entropy.
*
* @module @stdlib/math/base/dists/cauchy/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/cauchy/entropy' );
*
* var v = entropy( 10.0, 7.0 );
* // returns ~4.477
*
* v = entropy( 22.0, 0.5 );
* // returns ~1.838
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":333}],335:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace cauchy
*/
var cauchy = {};

/**
* @name Cauchy
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/ctor}
*/
setReadOnly( cauchy, 'Cauchy', require( '@stdlib/math/base/dists/cauchy/ctor' ) );

/**
* @name cdf
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/cdf}
*/
setReadOnly( cauchy, 'cdf', require( '@stdlib/math/base/dists/cauchy/cdf' ) );

/**
* @name entropy
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/entropy}
*/
setReadOnly( cauchy, 'entropy', require( '@stdlib/math/base/dists/cauchy/entropy' ) );

/**
* @name logcdf
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/logcdf}
*/
setReadOnly( cauchy, 'logcdf', require( '@stdlib/math/base/dists/cauchy/logcdf' ) );

/**
* @name logpdf
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/logpdf}
*/
setReadOnly( cauchy, 'logpdf', require( '@stdlib/math/base/dists/cauchy/logpdf' ) );

/**
* @name median
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/median}
*/
setReadOnly( cauchy, 'median', require( '@stdlib/math/base/dists/cauchy/median' ) );

/**
* @name mode
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/mode}
*/
setReadOnly( cauchy, 'mode', require( '@stdlib/math/base/dists/cauchy/mode' ) );

/**
* @name pdf
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/pdf}
*/
setReadOnly( cauchy, 'pdf', require( '@stdlib/math/base/dists/cauchy/pdf' ) );

/**
* @name quantile
* @memberof cauchy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cauchy/quantile}
*/
setReadOnly( cauchy, 'quantile', require( '@stdlib/math/base/dists/cauchy/quantile' ) );


// EXPORTS //

module.exports = cauchy;

},{"@stdlib/math/base/dists/cauchy/cdf":330,"@stdlib/math/base/dists/cauchy/ctor":332,"@stdlib/math/base/dists/cauchy/entropy":334,"@stdlib/math/base/dists/cauchy/logcdf":337,"@stdlib/math/base/dists/cauchy/logpdf":340,"@stdlib/math/base/dists/cauchy/median":342,"@stdlib/math/base/dists/cauchy/mode":344,"@stdlib/math/base/dists/cauchy/pdf":347,"@stdlib/math/base/dists/cauchy/quantile":350,"@stdlib/utils/define-read-only-property":1937}],336:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan2 = require( '@stdlib/math/base/special/atan2' );
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var ONE_OVER_PI = 0.3183098861837907;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 10.0, 2.0 );
*
* var y = logcdf( 10.0 );
* // returns -0.693
*
* y = logcdf( 12.0 );
* // returns -0.288
*/
function factory( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the  natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ln( ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5 );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/atan2":1324,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],337:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/cauchy/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/cauchy/logcdf' );
*
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.16
*
* @example
* var factory = require( '@stdlib/math/base/dists/cauchy/logcdf' );
*
* var logCDF = factory( 1.5, 3.0 );
*
* var y = logCDF( 1.0 );
* // returns ~-0.805
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":336,"./logcdf.js":338,"@stdlib/utils/define-read-only-property":1937}],338:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan2 = require( '@stdlib/math/base/special/atan2' );
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var ONE_OVER_PI = 0.3183098861837907;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 4.0, 0.0, 2.0 );
* // returns ~-0.16
* @example
* var y = logcdf( 1.0, 0.0, 2.0 );
* // returns ~-0.434
* @example
* var y = logcdf( 1.0, 3.0, 2.0 );
* // returns -1.386
* @example
* var y = logcdf( NaN, 0.0, 2.0 );
* // returns NaN
* @example
* var y = logcdf( 1.0, 2.0, NaN );
* // returns NaN
* @example
* var y = logcdf( 1.0, NaN, 3.0 );
* // returns NaN
*/
function logcdf( x, x0, gamma ) {
	if (
		isnan( x ) ||
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return ln( ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5 );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/atan2":1324,"@stdlib/math/base/special/ln":1679}],339:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNPI = require( '@stdlib/constants/math/float64-ln-pi' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 4.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-4.141
*
* y = logpdf( 3.0 );
* // returns ~-2.064
*/
function factory( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (logPDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return -( LNPI + ln( gamma ) + log1p( pow( (x-x0)/gamma, 2.0 ) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-pi":80,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],340:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution logarithm of probability density function (logPDF).
*
* @module @stdlib/math/base/dists/cauchy/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/cauchy/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.765
*
* @example
* var factory = require( '@stdlib/math/base/dists/cauchy/logpdf' ).factory;
*
* var logpdf = factory( 10.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-1.839
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":339,"./logpdf.js":341,"@stdlib/utils/define-read-only-property":1937}],341:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNPI = require( '@stdlib/constants/math/float64-ln-pi' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 1.0, 1.0 )
* // returns ~-1.839
*
* @example
* var y = logpdf( 4.0, 3.0, 0.1 )
* // returns ~-3.458
*
* @example
* var y = logpdf( 4.0, 3.0, 3.0 )
* // returns ~-2.354
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 )
* // returns NaN
*
* @example
* var y = logpdf( 2.0, NaN, 1.0 )
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 1.0, NaN )
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 1.0, -2.0 )
* // returns NaN
*/
function logpdf( x, x0, gamma ) {
	if (
		isnan( x ) ||
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return -( LNPI + ln( gamma ) + log1p( pow( (x-x0)/gamma, 2.0 ) ) );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ln-pi":80,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743}],342:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution median.
*
* @module @stdlib/math/base/dists/cauchy/median
*
* @example
* var median = require( '@stdlib/math/base/dists/cauchy/median' );
*
* var v = median( 10.0, 7.0 );
* // returns 10.0
*
* v = median( 22.0, 0.5 );
* // returns 22.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":343}],343:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} median
*
* @example
* var v = median( 10.0, 5.0 );
* // returns 10.0
* @example
* var v = median( 7.0, 0.1 );
* // returns 7.0
* @example
* var v = median( 10.0, -0.5 );
* // returns NaN
*/
function median( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return x0;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128}],344:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution mode.
*
* @module @stdlib/math/base/dists/cauchy/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/cauchy/mode' );
*
* var v = mode( 10.0, 7.0 );
* // returns 10.0
*
* v = mode( 22.0, 0.5 );
* // returns 22.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":345}],345:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} mode
*
* @example
* var v = mode( 10.0, 5.0 );
* // returns 10.0
* @example
* var v = mode( 7.0, 0.1 );
* // returns 7.0
* @example
* var v = mode( 10.0, -0.5 );
* // returns NaN
*/
function mode( x0, gamma ) {
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return x0;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],346:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 4.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.0159
*
* y = pdf( 3.0 );
* // returns ~0.127
*/
function factory( x0, gamma ) {
	var gpi;
	if (
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return constantFunction( NaN );
	}
	gpi = gamma * PI;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return 1.0 / ( gpi * (1.0 + pow( (x-x0)/gamma, 2.0 )) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],347:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/cauchy/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/cauchy/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.063
*
* @example
* var factory = require( '@stdlib/math/base/dists/cauchy/pdf' ).factory;
*
* var pdf = factory( 10.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.159
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":346,"./pdf.js":348,"@stdlib/utils/define-read-only-property":1937}],348:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 1.0, 1.0 )
* // returns ~0.159
*
* @example
* var y = pdf( 4.0, 3.0, 0.1 )
* // returns ~0.0315
*
* @example
* var y = pdf( 4.0, 3.0, 3.0 )
* // returns ~0.095
*
* @example
* var y = pdf( NaN, 1.0, 1.0 )
* // returns NaN
*
* @example
* var y = pdf( 2.0, NaN, 1.0 )
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1.0, NaN )
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 1.0, -2.0 )
* // returns NaN
*/
function pdf( x, x0, gamma ) {
	var denom;
	if (
		isnan( x ) ||
		isnan( gamma ) ||
		isnan( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	denom = PI * gamma * ( 1.0 + pow( (x-x0)/gamma, 2.0 ) );
	return 1.0 / denom;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],349:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.2 );
* // returns ~7.247
*
* y = quantile( 0.8 );
* // returns ~12.753
*/
function factory( x0, gamma ) {
	if (
		isnan( x0 ) ||
		isnan( gamma ) ||
		gamma <= 0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Cauchy distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return x0 + ( gamma * tan( PI*( p-0.5 ) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/tan":1829,"@stdlib/utils/constant-function":1933}],350:[function(require,module,exports){
'use strict';

/**
* Cauchy distribution quantile function.
*
* @module @stdlib/math/base/dists/cauchy/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/cauchy/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.376
*
* @example
* var factory = require( '@stdlib/math/base/dists/cauchy/quantile' ).factory;
*
* var quantile = factory( 10.0, 2.0 );
*
* var y = quantile( 0.5 );
* // returns 10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":349,"./quantile.js":351,"@stdlib/utils/define-read-only-property":1937}],351:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.3, 2.0, 2.0 );
* // returns ~0.547
*
* @example
* var y = quantile( 0.8, 10, 2.0 );
* // returns ~12.753
*
* @example
* var y = quantile( 0.1, 10.0, 2.0 );
* // returns ~3.845
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, x0, gamma ) {
	if (
		isnan( x0 ) ||
		isnan( gamma ) ||
		gamma <= 0.0 ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return x0 + ( gamma * tan( PI*( p-0.5 ) ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/tan":1829}],352:[function(require,module,exports){
'use strict';

// MODULES //

var gammaCDF = require( '@stdlib/math/base/dists/gamma/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.739
* @example
* var y = cdf( 1.0, 0.5 );
* // returns ~0.846
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, k ) {
	if (
		isnan( x ) ||
		isnan( k ) ||
		k < 0.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		return x <= 0 ? 0.0 : 1.0;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return gammaCDF( x*x, k/2.0, 0.5 );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/gamma/cdf":642}],353:[function(require,module,exports){
'use strict';

// MODULES //

var degenerate = require( '@stdlib/math/base/dists/degenerate/cdf' ).factory;
var gammaFactory = require( '@stdlib/math/base/dists/gamma/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0 );
*
* var y = cdf( 6.0 );
* // returns ~1.0
*
* y = cdf( 1.5 );
* // returns ~0.478
*/
function factory( k ) {
	var gamma;
	if ( k === 0.0 ) {
		return degenerate( 0.0 );
	}
	gamma = gammaFactory( k/2.0, 0.5 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return gamma( x*x );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/cdf":451,"@stdlib/math/base/dists/gamma/cdf":642}],354:[function(require,module,exports){
'use strict';

/**
* Chi distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/chi/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/chi/cdf' );
*
* var y = cdf( 2.0, 8.0 );
* // returns ~0.143
*
* y = cdf( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/chi/cdf' ).factory;
*
* var cdf = factory( 1.0 );
*
* var y = cdf( 2.0 );
* // returns ~0.954
*
* y = cdf( 1.2 );
* // returns ~0.77
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":352,"./factory.js":353,"@stdlib/utils/define-read-only-property":1937}],355:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/chi/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/chi/kurtosis' );
var mean = require( '@stdlib/math/base/dists/chi/mean' );
var mode = require( '@stdlib/math/base/dists/chi/mode' );
var skewness = require( '@stdlib/math/base/dists/chi/skewness' );
var stdev = require( '@stdlib/math/base/dists/chi/stdev' );
var variance = require( '@stdlib/math/base/dists/chi/variance' );
var cdf = require( '@stdlib/math/base/dists/chi/cdf' );
var logpdf = require( '@stdlib/math/base/dists/chi/logpdf' );
var pdf = require( '@stdlib/math/base/dists/chi/pdf' );
var quantile = require( '@stdlib/math/base/dists/chi/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function chiCDF( x ) {
	return cdf( x, this.k );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function chiLogPDF( x ) {
	return logpdf( x, this.k );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function chiPDF( x ) {
	return pdf( x, this.k );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function chiQuantile( p ) {
	return quantile( p, this.k );
}


// MAIN //

/**
* Chi distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - degrees of freedom
* @throws {TypeError} `k` must be a positive number
* @returns {Chi} distribution instance
*
* @example
* var chi = new Chi( 1.0 );
*
* var y = chi.cdf( 0.8 );
* // returns ~0.576
*
* var mode = chi.mode;
* // returns 0.0
*/
function Chi() {
	var k;
	if ( !(this instanceof Chi) ) {
		if ( arguments.length === 0 ) {
			return new Chi();
		}
		return new Chi( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `k` must be a positive number. Value: `' + k + '`' );
		}
	} else {
		k = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	return this;
}

/**
* Chi distribution differential entropy.
*
* @name entropy
* @memberof Chi.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.entropy;
* // returns ~1.019
*/
Object.defineProperty( Chi.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k );
	}
});

/**
* Chi distribution excess kurtosis.
*
* @name kurtosis
* @memberof Chi.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.kurtosis;
* // returns ~0.059
*/
Object.defineProperty( Chi.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k );
	}
});

/**
* Chi distribution expected value.
*
* @name mean
* @memberof Chi.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.mean;
* // returns ~1.88
*/
Object.defineProperty( Chi.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k );
	}
});

/**
* Chi distribution mode.
*
* @name mode
* @memberof Chi.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.mode;
* // returns ~1.732
*/
Object.defineProperty( Chi.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k );
	}
});

/**
* Chi distribution skewness.
*
* @name skewness
* @memberof Chi.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.skewness;
* // returns ~0.406
*/
Object.defineProperty( Chi.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k );
	}
});

/**
* Chi distribution standard deviation.
*
* @name stdev
* @memberof Chi.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.stdev;
* // returns ~0.683
*/
Object.defineProperty( Chi.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k );
	}
});

/**
* Chi distribution variance.
*
* @name variance
* @memberof Chi.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.variance;
* // returns ~0.466
*/
Object.defineProperty( Chi.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Chi.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.cdf( 0.5 );
* // returns ~0.118
*/
setReadOnly( Chi.prototype, 'cdf', chiCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Chi.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.logpdf( 0.8 );
* // returns ~-0.819
*/
setReadOnly( Chi.prototype, 'logpdf', chiLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Chi.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.pdf( 0.8 );
* // returns ~0.441
*/
setReadOnly( Chi.prototype, 'pdf', chiPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Chi.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.quantile( 0.5 );
* // returns ~1.177
*/
setReadOnly( Chi.prototype, 'quantile', chiQuantile );


// EXPORTS //

module.exports = Chi;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/chi/cdf":354,"@stdlib/math/base/dists/chi/entropy":358,"@stdlib/math/base/dists/chi/kurtosis":359,"@stdlib/math/base/dists/chi/logpdf":363,"@stdlib/math/base/dists/chi/mean":365,"@stdlib/math/base/dists/chi/mode":367,"@stdlib/math/base/dists/chi/pdf":370,"@stdlib/math/base/dists/chi/quantile":373,"@stdlib/math/base/dists/chi/skewness":375,"@stdlib/math/base/dists/chi/stdev":377,"@stdlib/math/base/dists/chi/variance":379,"@stdlib/utils/define-read-only-property":1937}],356:[function(require,module,exports){
'use strict';

/**
* Chi distribution constructor.
*
* @module @stdlib/math/base/dists/chi/ctor
*
* @example
* var Chi = require( '@stdlib/math/base/dists/chi/ctor' );
*
* var chi = new Chi( 1.0 );
*
* var y = chi.cdf( 0.8 );
* // returns ~0.576
*
* var mode = chi.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":355}],357:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Returns the differential entropy of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~1.052
* @example
* var v = entropy( 1.0 );
* // returns ~0.726
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( k ) {
	var kh;
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	kh = k / 2.0;
	return gammaln( kh ) + ( 0.5 * ( k - LN2 - ( ( k-1.0 )*digamma( kh ) ) ) );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/gammaln":1583}],358:[function(require,module,exports){
'use strict';

/**
* Chi distribution differential entropy.
*
* @module @stdlib/math/base/dists/chi/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/chi/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~1.056
*
* v = entropy( 1.5 );
* // returns ~0.878
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":357}],359:[function(require,module,exports){
'use strict';

/**
* Chi distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/chi/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/chi/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.007
*
* v = kurtosis( 1.5 );
* // returns ~0.424
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":360}],360:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var skewness = require( '@stdlib/math/base/dists/chi/skewness' );
var variance = require( '@stdlib/math/base/dists/chi/variance' );
var mean = require( '@stdlib/math/base/dists/chi/mean' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the excess kurtosis of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.011
* @example
* var v = kurtosis( 1.0 );
* // returns ~0.869
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( k ) {
	var sigma2;
	var sigma;
	var g1;
	var mu;
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	sigma2 = variance( k );
	sigma = sqrt( sigma2 );
	mu = mean( k );
	g1 = skewness( k );
	return ( 2.0/sigma2 ) * ( 1.0 - ( mu*sigma*g1 ) - sigma2 );
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/chi/mean":365,"@stdlib/math/base/dists/chi/skewness":375,"@stdlib/math/base/dists/chi/variance":379,"@stdlib/math/base/special/sqrt":1826}],361:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace chi
*/
var chi = {};

/**
* @name cdf
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/cdf}
*/
setReadOnly( chi, 'cdf', require( '@stdlib/math/base/dists/chi/cdf' ) );

/**
* @name Chi
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/ctor}
*/
setReadOnly( chi, 'Chi', require( '@stdlib/math/base/dists/chi/ctor' ) );

/**
* @name entropy
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/entropy}
*/
setReadOnly( chi, 'entropy', require( '@stdlib/math/base/dists/chi/entropy' ) );

/**
* @name kurtosis
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/kurtosis}
*/
setReadOnly( chi, 'kurtosis', require( '@stdlib/math/base/dists/chi/kurtosis' ) );

/**
* @name logpdf
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/logpdf}
*/
setReadOnly( chi, 'logpdf', require( '@stdlib/math/base/dists/chi/logpdf' ) );

/**
* @name mean
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/mean}
*/
setReadOnly( chi, 'mean', require( '@stdlib/math/base/dists/chi/mean' ) );

/**
* @name mode
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/mode}
*/
setReadOnly( chi, 'mode', require( '@stdlib/math/base/dists/chi/mode' ) );

/**
* @name pdf
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/pdf}
*/
setReadOnly( chi, 'pdf', require( '@stdlib/math/base/dists/chi/pdf' ) );

/**
* @name quantile
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/quantile}
*/
setReadOnly( chi, 'quantile', require( '@stdlib/math/base/dists/chi/quantile' ) );

/**
* @name skewness
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/skewness}
*/
setReadOnly( chi, 'skewness', require( '@stdlib/math/base/dists/chi/skewness' ) );

/**
* @name stdev
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/stdev}
*/
setReadOnly( chi, 'stdev', require( '@stdlib/math/base/dists/chi/stdev' ) );

/**
* @name variance
* @memberof chi
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chi/variance}
*/
setReadOnly( chi, 'variance', require( '@stdlib/math/base/dists/chi/variance' ) );


// EXPORTS //

module.exports = chi;

},{"@stdlib/math/base/dists/chi/cdf":354,"@stdlib/math/base/dists/chi/ctor":356,"@stdlib/math/base/dists/chi/entropy":358,"@stdlib/math/base/dists/chi/kurtosis":359,"@stdlib/math/base/dists/chi/logpdf":363,"@stdlib/math/base/dists/chi/mean":365,"@stdlib/math/base/dists/chi/mode":367,"@stdlib/math/base/dists/chi/pdf":370,"@stdlib/math/base/dists/chi/quantile":373,"@stdlib/math/base/dists/chi/skewness":375,"@stdlib/math/base/dists/chi/stdev":377,"@stdlib/math/base/dists/chi/variance":379,"@stdlib/utils/define-read-only-property":1937}],362:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5 );
*
* var y = logpdf( 2.0 );
* // returns ~-3.219
*
* y = logpdf( 1.0 );
* // returns ~-1.269
*/
function factory( k ) {
	var km1;
	var kh;

	if ( isnan( k ) || k < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( k === 0.0 ) {
		return degenerate( 0.0 );
	}

	kh = k / 2.0;
	km1 = k - 1.0;
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 1.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return NINF;
		}
		out = ( ( 1.0-kh ) * LN2 ) + ( km1 * ln( x ) ) - ( (x*x) / 2.0 );
		out -= gammaln( kh );
		return out;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logpdf":457,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],363:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability density function (PDF) for a chi distribution.
*
* @module @stdlib/math/base/dists/chi/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/chi/logpdf' );
*
* var y = logpdf( 2.0, 1.0 );
* // returns ~-2.226
*
* @example
* var factory = require( '@stdlib/math/base/dists/chi/logpdf' ).factory;
*
* var logpdf = factory( 6.0 );
*
* var y = logpdf( 3.0 );
* // returns ~-1.088
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":362,"./logpdf.js":364,"@stdlib/utils/define-read-only-property":1937}],364:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 4.0 );
* // returns ~-4.35
*
* @example
* var y = logpdf( 0.7, 0.7 );
* // returns ~-0.622
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function logpdf( x, k ) {
	var out;
	var kh;
	if (
		isnan( x ) ||
		isnan( k ) ||
		k < 0.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		// Point mass at 0...
		return x === 0.0 ? PINF : NINF;
	}
	if ( x < 0.0 || x === PINF ) {
		return NINF;
	}
	kh = k / 2.0;
	out = ( ( 1.0-kh ) * LN2 ) + ( ( k-1.0 ) * ln( x ) ) - ( (x*x) / 2.0 );
	out -= gammaln( kh );
	return out;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679}],365:[function(require,module,exports){
'use strict';

/**
* Chi distribution expected value.
*
* @module @stdlib/math/base/dists/chi/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/chi/mean' );
*
* var v = mean( 11.0 );
* // returns ~3.242
*
* v = mean( 4.5 );
* // returns ~2.008
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":366}],366:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var SQRT_TWO = require( '@stdlib/constants/math/float64-sqrt-two' );


// MAIN //

/**
* Returns the expected value of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~2.918
* @example
* var v = mean( 1.0 );
* // returns ~0.798
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return SQRT_TWO * gamma( ( k+1.0 ) / 2.0 ) / gamma( k / 2.0 );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525}],367:[function(require,module,exports){
'use strict';

/**
* Chi distribution mode.
*
* @module @stdlib/math/base/dists/chi/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/chi/mode' );
*
* var v = mode( 11.0 );
* // returns ~3.162
*
* v = mode( 1.5 );
* // returns ~0.707
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":368}],368:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the mode of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns ~2.828
* @example
* var v = mode( 1.0 );
* // returns 0.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( k ) {
	if ( isnan( k ) || k < 1.0 ) {
		return NaN;
	}
	return sqrt( k - 1.0 );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],369:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
*
* var y = pdf( 2.0 );
* // returns ~0.04
*
* y = pdf( 1.0 );
* // returns ~0.281
*/
function factory( k ) {
	var km1;
	var kh;

	if ( isnan( k ) || k < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( k === 0.0 ) {
		return degenerate( 0.0 );
	}

	kh = k / 2.0;
	km1 = k - 1.0;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 1.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		out = pow( 2.0, 1.0-kh ) * pow( x, km1 ) * exp( -(x*x)/2.0 );
		out /= gamma( kh );
		return out;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/pdf":466,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],370:[function(require,module,exports){
'use strict';

/**
* Chi distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/chi/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/chi/pdf' );
*
* var y = pdf( 2.0, 1.0 );
* // returns ~0.108
*
* @example
* var factory = require( '@stdlib/math/base/dists/chi/pdf' ).factory;
*
* var pdf = factory( 6.0 );
*
* var y = pdf( 3.0 );
* // returns ~0.337
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":369,"./pdf.js":371,"@stdlib/utils/define-read-only-property":1937}],371:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a chi distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.013
*
* @example
* var y = pdf( 0.7, 0.7 );
* // returns ~0.537
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, k ) {
	var out;
	var kh;
	if (
		isnan( x ) ||
		isnan( k ) ||
		k < 0.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		// Point mass at 0...
		return x === 0.0 ? PINF : 0.0;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	kh = k / 2.0;
	out = pow( 2.0, 1.0-kh ) * pow( x, k-1.0 ) * exp( -(x*x)/2.0 );
	out /= gamma( kh );
	return out;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/pow":1743}],372:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dists/gamma/quantile' ).factory;
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
*
* var y = quantile( 0.9 );
* // returns ~1.1
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function factory( k ) {
	var gamma = gammaFactory( k/2.0, 0.5 );
	return quantile;

	/**
	* Evaluates the quantile function for a chi distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		return sqrt( gamma( p ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dists/gamma/quantile":668,"@stdlib/math/base/special/sqrt":1826}],373:[function(require,module,exports){
'use strict';

/**
* Chi distribution quantile function.
*
* @module @stdlib/math/base/dists/chi/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/chi/quantile' );
*
* var y = quantile( 0.8, 3.0 );
* // returns ~2.154
*
* @example
* var factory = require( '@stdlib/math/base/dists/chi/quantile' ).factory;
*
* var quantile = factory( 2.0 );
*
* var y = myquantile( 0.3 );
* // returns ~0.844
*
* y = myquantile( 0.7 );
* // returns ~1.552
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":372,"./quantile.js":374,"@stdlib/utils/define-read-only-property":1937}],374:[function(require,module,exports){
'use strict';

// MODULES //

var gammaQuantile = require( '@stdlib/math/base/dists/gamma/quantile' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a chi distribution with degrees of freedom `k` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.282
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~1.832
* @example
* var y = quantile( 0.8, 0.1 );
* // returns ~0.116
* @example
* var y = quantile( -0.2, 0.5 );
* // returns NaN
* @example
* var y = quantile( 1.1, 0.5 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, k ) {
	return sqrt( gammaQuantile( p, k/2.0, 0.5 ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/dists/gamma/quantile":668,"@stdlib/math/base/special/sqrt":1826}],375:[function(require,module,exports){
'use strict';

/**
* Chi distribution skewness.
*
* @module @stdlib/math/base/dists/chi/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/chi/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.225
*
* v = skewness( 1.5 );
* // returns ~0.763
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":376}],376:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var variance = require( '@stdlib/math/base/dists/chi/variance' );
var mean = require( '@stdlib/math/base/dists/chi/mean' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.252
* @example
* var v = skewness( 1.0 );
* // returns ~0.995
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( k ) {
	var sigma3;
	var sigma2;
	var sigma;
	var mu;
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	mu = mean( k );
	sigma = sqrt( variance( k ) );
	sigma2 = sigma * sigma;
	sigma3 = sigma2 * sigma;
	return ( mu / sigma3 ) * ( 1.0 - ( 2.0*sigma2 ) );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/chi/mean":365,"@stdlib/math/base/dists/chi/variance":379,"@stdlib/math/base/special/sqrt":1826}],377:[function(require,module,exports){
'use strict';

/**
* Chi distribution standard deviation.
*
* @module @stdlib/math/base/dists/chi/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/chi/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~0.699
*
* v = stdev( 1.5 );
* // returns ~0.637
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":378}],378:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var mean = require( '@stdlib/math/base/dists/chi/mean' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~0.697
* @example
* var v = stdev( 1.0 );
* // returns ~0.603
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( k ) {
	var mu;
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	mu = mean( k );
	return sqrt( k - ( mu*mu ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/chi/mean":365,"@stdlib/math/base/special/sqrt":1826}],379:[function(require,module,exports){
'use strict';

/**
* Chi distribution variance.
*
* @module @stdlib/math/base/dists/chi/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/chi/variance' );
*
* var v = variance( 11.0 );
* // returns ~0.488
*
* v = variance( 1.5 );
* // returns ~0.406
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":380}],380:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var mean = require( '@stdlib/math/base/dists/chi/mean' );


// MAIN //

/**
* Returns the variance of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~0.485
* @example
* var v = variance( 1.0 );
* // returns ~0.363
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( k ) {
	var mu;
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	mu = mean( k );
	return k - ( mu*mu );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/chi/mean":365}],381:[function(require,module,exports){
'use strict';

// MODULES //

var gammaCDF = require( '@stdlib/math/base/dists/gamma/cdf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.428
* @example
* var y = cdf( 1.0, 0.5 );
* // returns ~0.846
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, k ) {
	return gammaCDF( x, k/2.0, 0.5 );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/dists/gamma/cdf":642}],382:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dists/gamma/cdf' ).factory;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0 );
*
* var y = cdf( 6.0 );
* // returns ~0.888
*
* y = cdf( 1.5 );
* // returns ~0.318
*/
function factory( k ) {
	return gammaFactory( k/2.0, 0.5 );
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dists/gamma/cdf":642}],383:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/chisquare/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/chisquare/cdf' );
*
* var y = cdf( 2.0, 8.0 );
* // returns ~0.019
*
* y = cdf( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/chisquare/cdf' ).factory;
*
* var cdf = factory( 1.0 );
*
* var y = cdf( 2.0 );
* // returns ~0.843
*
* y = cdf( 1.2 );
* // returns ~0.727
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":381,"./factory.js":382,"@stdlib/utils/define-read-only-property":1937}],384:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/chisquare/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/chisquare/kurtosis' );
var mean = require( '@stdlib/math/base/dists/chisquare/mean' );
var mode = require( '@stdlib/math/base/dists/chisquare/mode' );
var skewness = require( '@stdlib/math/base/dists/chisquare/skewness' );
var stdev = require( '@stdlib/math/base/dists/chisquare/stdev' );
var variance = require( '@stdlib/math/base/dists/chisquare/variance' );
var cdf = require( '@stdlib/math/base/dists/chisquare/cdf' );
var mgf = require( '@stdlib/math/base/dists/chisquare/mgf' );
var pdf = require( '@stdlib/math/base/dists/chisquare/pdf' );
var quantile = require( '@stdlib/math/base/dists/chisquare/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function chisquareCDF( x ) {
	return cdf( x, this.k );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function chisquareMGF( t ) {
	return mgf( t, this.k );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function chisquarePDF( x ) {
	return pdf( x, this.k );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function chisquareQuantile( p ) {
	return quantile( p, this.k );
}


// MAIN //

/**
* Chi-squared distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - rate parameter
* @throws {TypeError} `k` must be a positive number
* @returns {ChiSquare} distribution instance
*
* @example
* var chisquare = new ChiSquare( 1.0 );
*
* var y = chisquare.cdf( 0.8 );
* // returns ~0.629
*
* var mode = chisquare.mode;
* // returns 0.0
*/
function ChiSquare() {
	var k;
	if ( !(this instanceof ChiSquare) ) {
		if ( arguments.length === 0 ) {
			return new ChiSquare();
		}
		return new ChiSquare( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `k` must be a positive number. Value: `' + k + '`' );
		}
	} else {
		k = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	return this;
}

/**
* Chi-squared distribution differential entropy.
*
* @name entropy
* @memberof ChiSquare.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.entropy;
* // returns ~2.27
*/
Object.defineProperty( ChiSquare.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k );
	}
});

/**
* Chi-squared distribution excess kurtosis.
*
* @name kurtosis
* @memberof ChiSquare.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.kurtosis;
* // returns 3.0
*/
Object.defineProperty( ChiSquare.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k );
	}
});

/**
* Chi-squared distribution expected value.
*
* @name mean
* @memberof ChiSquare.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.mean;
* // returns 4.0
*/
Object.defineProperty( ChiSquare.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k );
	}
});

/**
* Chi-squared distribution mode.
*
* @name mode
* @memberof ChiSquare.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.mode;
* // returns 2.0
*/
Object.defineProperty( ChiSquare.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k );
	}
});

/**
* Chi-squared distribution skewness.
*
* @name skewness
* @memberof ChiSquare.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.skewness;
* // returns ~1.414
*/
Object.defineProperty( ChiSquare.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k );
	}
});

/**
* Chi-squared distribution standard deviation.
*
* @name stdev
* @memberof ChiSquare.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.stdev;
* // returns ~2.828
*/
Object.defineProperty( ChiSquare.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k );
	}
});

/**
* Chi-squared distribution variance.
*
* @name variance
* @memberof ChiSquare.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.variance;
* // returns 8.0
*/
Object.defineProperty( ChiSquare.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof ChiSquare.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.cdf( 0.5 );
* // returns ~0.221
*/
setReadOnly( ChiSquare.prototype, 'cdf', chisquareCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof ChiSquare.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.mgf( 0.2 );
* // returns ~1.667
*/
setReadOnly( ChiSquare.prototype, 'mgf', chisquareMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof ChiSquare.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.pdf( 0.8 );
* // returns ~0.335
*/
setReadOnly( ChiSquare.prototype, 'pdf', chisquarePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof ChiSquare.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.quantile( 0.5 );
* // returns ~1.386
*/
setReadOnly( ChiSquare.prototype, 'quantile', chisquareQuantile );


// EXPORTS //

module.exports = ChiSquare;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/chisquare/cdf":383,"@stdlib/math/base/dists/chisquare/entropy":387,"@stdlib/math/base/dists/chisquare/kurtosis":388,"@stdlib/math/base/dists/chisquare/mean":394,"@stdlib/math/base/dists/chisquare/mgf":397,"@stdlib/math/base/dists/chisquare/mode":399,"@stdlib/math/base/dists/chisquare/pdf":402,"@stdlib/math/base/dists/chisquare/quantile":405,"@stdlib/math/base/dists/chisquare/skewness":407,"@stdlib/math/base/dists/chisquare/stdev":409,"@stdlib/math/base/dists/chisquare/variance":411,"@stdlib/utils/define-read-only-property":1937}],385:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution constructor.
*
* @module @stdlib/math/base/dists/chisquare/ctor
*
* @example
* var ChiSquare = require( '@stdlib/math/base/dists/chisquare/ctor' );
*
* var chisquare = new ChiSquare( 1.0 );
*
* var y = chisquare.cdf( 0.8 );
* // returns ~0.629
*
* var mode = chisquare.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":384}],386:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~2.786
* @example
* var v = entropy( 1.0 );
* // returns ~0.784
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( k ) {
	var kh;
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	kh = k / 2.0;
	return kh + ln( 2.0*gamma( kh ) ) + ( ( 1.0-kh ) * digamma( kh ) );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/ln":1679}],387:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution differential entropy.
*
* @module @stdlib/math/base/dists/chisquare/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/chisquare/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~2.901
*
* v = entropy( 1.5 );
* // returns ~1.375
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":386}],388:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/chisquare/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/chisquare/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~1.091
*
* v = kurtosis( 1.5 );
* // returns 8.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":389}],389:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~1.333
* @example
* var v = kurtosis( 1.0 );
* // returns 12.0
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( k ) {
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	return 12.0 / k;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],390:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace chisquare
*/
var chisquare = {};

/**
* @name cdf
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/cdf}
*/
setReadOnly( chisquare, 'cdf', require( '@stdlib/math/base/dists/chisquare/cdf' ) );

/**
* @name ChiSquare
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/ctor}
*/
setReadOnly( chisquare, 'ChiSquare', require( '@stdlib/math/base/dists/chisquare/ctor' ) );

/**
* @name entropy
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/entropy}
*/
setReadOnly( chisquare, 'entropy', require( '@stdlib/math/base/dists/chisquare/entropy' ) );

/**
* @name kurtosis
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/kurtosis}
*/
setReadOnly( chisquare, 'kurtosis', require( '@stdlib/math/base/dists/chisquare/kurtosis' ) );

/**
* @name logpdf
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/logpdf}
*/
setReadOnly( chisquare, 'logpdf', require( '@stdlib/math/base/dists/chisquare/logpdf' ) );

/**
* @name mean
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/mean}
*/
setReadOnly( chisquare, 'mean', require( '@stdlib/math/base/dists/chisquare/mean' ) );

/**
* @name mgf
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/mgf}
*/
setReadOnly( chisquare, 'mgf', require( '@stdlib/math/base/dists/chisquare/mgf' ) );

/**
* @name mode
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/mode}
*/
setReadOnly( chisquare, 'mode', require( '@stdlib/math/base/dists/chisquare/mode' ) );

/**
* @name pdf
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/pdf}
*/
setReadOnly( chisquare, 'pdf', require( '@stdlib/math/base/dists/chisquare/pdf' ) );

/**
* @name quantile
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/quantile}
*/
setReadOnly( chisquare, 'quantile', require( '@stdlib/math/base/dists/chisquare/quantile' ) );

/**
* @name skewness
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/skewness}
*/
setReadOnly( chisquare, 'skewness', require( '@stdlib/math/base/dists/chisquare/skewness' ) );

/**
* @name stdev
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/stdev}
*/
setReadOnly( chisquare, 'stdev', require( '@stdlib/math/base/dists/chisquare/stdev' ) );

/**
* @name variance
* @memberof chisquare
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/chisquare/variance}
*/
setReadOnly( chisquare, 'variance', require( '@stdlib/math/base/dists/chisquare/variance' ) );


// EXPORTS //

module.exports = chisquare;

},{"@stdlib/math/base/dists/chisquare/cdf":383,"@stdlib/math/base/dists/chisquare/ctor":385,"@stdlib/math/base/dists/chisquare/entropy":387,"@stdlib/math/base/dists/chisquare/kurtosis":388,"@stdlib/math/base/dists/chisquare/logpdf":392,"@stdlib/math/base/dists/chisquare/mean":394,"@stdlib/math/base/dists/chisquare/mgf":397,"@stdlib/math/base/dists/chisquare/mode":399,"@stdlib/math/base/dists/chisquare/pdf":402,"@stdlib/math/base/dists/chisquare/quantile":405,"@stdlib/math/base/dists/chisquare/skewness":407,"@stdlib/math/base/dists/chisquare/stdev":409,"@stdlib/math/base/dists/chisquare/variance":411,"@stdlib/utils/define-read-only-property":1937}],391:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dists/gamma/logpdf' ).factory;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5 );
*
* var y = logpdf( 2.0 );
* // returns ~-2.976
*
* y = logpdf( 1.0 );
* // returns ~-1.959
*/
function factory( k ) {
	return gammaFactory( k/2.0, 0.5 );
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dists/gamma/logpdf":652}],392:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability density function (PDF) for a chi-squared distribution.
*
* @module @stdlib/math/base/dists/chisquare/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/chisquare/logpdf' );
*
* var y = logpdf( 2.0, 1.0 );
* // returns ~-2.266
*
* @example
* var factory = require( '@stdlib/math/base/dists/chisquare/logpdf' ).factory;
*
* var logpdf = factory( 6.0 );
*
* var y = logpdf( 3.0 );
* // returns ~-2.071
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":391,"./logpdf.js":393,"@stdlib/utils/define-read-only-property":1937}],393:[function(require,module,exports){
'use strict';

// MODULES //

var gammaLogPDF = require( '@stdlib/math/base/dists/gamma/logpdf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 4.0 );
* // returns ~-2.74
*
* @example
* var y = logpdf( 0.7, 0.7 );
* // returns ~-1.295
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function logpdf( x, k ) {
	return gammaLogPDF( x, k/2.0, 0.5 );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/dists/gamma/logpdf":652}],394:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution expected value.
*
* @module @stdlib/math/base/dists/chisquare/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/chisquare/mean' );
*
* var v = mean( 11.0 );
* // returns 11.0
*
* v = mean( 4.5 );
* // returns 4.5
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":395}],395:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 9.0
* @example
* var v = mean( 1.0 );
* // returns 1.0
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return k;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],396:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} MGF
*
* @example
* var mgf = factory( 1.0 );
*
* var y = mgf( 0.2 );
* // returns ~1.291
*
* y = mgf( 0.4 );
* // returns ~2.236
*/
function factory( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a chi-squared distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) || t >= 0.5 ) {
			return NaN;
		}
		return pow( 1-(2*t), -k/2 );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],397:[function(require,module,exports){
'use strict';

/**
* Moment-generating function (MGF) for a chi-squared distribution.
*
* @module @stdlib/math/base/dists/chisquare/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/chisquare/mgf' );
*
* var y = mgf( 0.4, 2 );
* // returns ~5.0
*
* y = mgf( -1.0, 5.0 );
* // returns ~0.0642
*
* y = mgf( 0.0, 10.0 );
* // returns 1.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/chisquare/mgf' ).factory;
*
* var mgf = factory( 1.0 );
*
* var y = mgf( 0.2 );
* // returns ~1.291
*
* y = mgf( 0.4 );
* // returns ~2.236
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":396,"./mgf.js":398,"@stdlib/utils/define-read-only-property":1937}],398:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a chi-squared distribution with degrees of freedom `k` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.4, 2 );
* // returns ~5.0
*
* @example
* var y = mgf( -1.0, 5.0 );
* // returns ~0.0642
*
* @example
* var y = mgf( 0.0, 10.0 );
* // returns 1.0
*/
function mgf( t, k ) {
	if (
		isnan( t ) ||
		isnan( k ) ||
		k < 0.0 ||
		t >= 0.5
	) {
		return NaN;
	}
	return pow( 1-(2*t), -k/2 );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],399:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution mode.
*
* @module @stdlib/math/base/dists/chisquare/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/chisquare/mode' );
*
* var v = mode( 11.0 );
* // returns 11.0
*
* v = mode( 1.5 );
* // returns 0.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":400}],400:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var max = require( '@stdlib/math/base/special/max' );


// MAIN //

/**
* Returns the mode of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 9.0
* @example
* var v = mode( 1.0 );
* // returns 0.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return max( k - 2.0, 0.0 );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/max":1703}],401:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dists/gamma/pdf' ).factory;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
*
* var y = pdf( 2.0 );
* // returns ~0.051
*
* y = pdf( 1.0 );
* // returns ~0.141
*/
function factory( k ) {
	return gammaFactory( k/2.0, 0.5 );
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dists/gamma/pdf":664}],402:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/chisquare/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/chisquare/pdf' );
*
* var y = pdf( 2.0, 1.0 );
* // returns ~0.104
*
* @example
* var factory = require( '@stdlib/math/base/dists/chisquare/pdf' ).factory;
*
* var pdf = factory( 6.0 );
*
* var y = pdf( 3.0 );
* // returns ~0.126
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":401,"./pdf.js":403,"@stdlib/utils/define-read-only-property":1937}],403:[function(require,module,exports){
'use strict';

// MODULES //

var gammaPDF = require( '@stdlib/math/base/dists/gamma/pdf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.065
*
* @example
* var y = pdf( 0.7, 0.7 );
* // returns ~0.274
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, k ) {
	return gammaPDF( x, k/2.0, 0.5 );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/dists/gamma/pdf":664}],404:[function(require,module,exports){
'use strict';

// MODULES //

var gammaFactory = require( '@stdlib/math/base/dists/gamma/quantile' ).factory;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
*
* var y = quantile( 0.9 );
* // returns ~1.21
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function factory( k ) {
	return gammaFactory( k/2.0, 0.5 );
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/dists/gamma/quantile":668}],405:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution quantile function.
*
* @module @stdlib/math/base/dists/chisquare/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/chisquare/quantile' );
*
* var y = quantile( 0.8, 3.0 );
* // returns ~4.642
*
* @example
* var factory = require( '@stdlib/math/base/dists/chisquare/quantile' ).factory;
*
* var quantile = factory( 2.0 );
*
* var y = myquantile( 0.3 );
* // returns ~0.713
*
* y = myquantile( 0.7 );
* // returns ~2.408
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":404,"./quantile.js":406,"@stdlib/utils/define-read-only-property":1937}],406:[function(require,module,exports){
'use strict';

// MODULES //

var gammaQuantile = require( '@stdlib/math/base/dists/gamma/quantile' );


// MAIN //

/**
* Evaluates the quantile function for a chi-squared distribution with degrees of freedom `k` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.642
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~3.357
* @example
* var y = quantile( 0.8, 0.1 );
* // returns ~0.014
* @example
* var y = quantile( -0.2, 0.5 );
* // returns NaN
* @example
* var y = quantile( 1.1, 0.5 );
* // returns NaN
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
* @example
* // Negative degrees of freedom:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, k ) {
	return gammaQuantile( p, k/2.0, 0.5 );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/dists/gamma/quantile":668}],407:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution skewness.
*
* @module @stdlib/math/base/dists/chisquare/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/chisquare/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.853
*
* v = skewness( 1.5 );
* // returns ~2.309
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":408}],408:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.943
* @example
* var v = skewness( 1.0 );
* // returns ~2.828
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( k ) {
	if ( isnan( k ) || k <= 0.0 ) {
		return NaN;
	}
	return sqrt( 8.0 / k );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],409:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution standard deviation.
*
* @module @stdlib/math/base/dists/chisquare/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/chisquare/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~4.69
*
* v = stdev( 1.5 );
* // returns ~1.732
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":410}],410:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~4.243
* @example
* var v = stdev( 1.0 );
* // returns ~1.414
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return sqrt( 2.0 * k );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],411:[function(require,module,exports){
'use strict';

/**
* Chi-squared distribution variance.
*
* @module @stdlib/math/base/dists/chisquare/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/chisquare/variance' );
*
* var v = variance( 11.0 );
* // returns 22.0
*
* v = variance( 1.5 );
* // returns 3.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":412}],412:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns 18.0
* @example
* var v = variance( 1.0 );
* // returns 2.0
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( k ) {
	if ( isnan( k ) || k < 0.0 ) {
		return NaN;
	}
	return 2.0 * k;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],413:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 0.0, 1.0 );
* // returns ~0.909
*
* @example
* var y = cdf( 1.2, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = cdf( -0.9, 0.0, 1.0);
* // returns 0.0
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function cdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x < mu ? 0.0 : 1.0;
	}
	if ( x < mu - s ) {
		return 0.0;
	}
	if ( x > mu + s ) {
		return 1.0;
	}
	z = ( x - mu ) / s;
	return ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sinpi":1820}],414:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.9 );
* // returns ~0.015
*
* y = cdf( 4.0 );
* // returns ~0.971
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < mu - s ) {
			return 0.0;
		}
		if ( x > mu + s ) {
			return 1.0;
		}
		z = ( x - mu ) / s;
		return ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/cdf":451,"@stdlib/math/base/special/sinpi":1820,"@stdlib/utils/constant-function":1933}],415:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/cosine/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/cosine/cdf' );
*
* var y = cdf( 0.5, 0.0, 1.0 );
* // returns ~0.909
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 4.0 );
* // returns ~0.971
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":413,"./factory.js":414,"@stdlib/utils/define-read-only-property":1937}],416:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var kurtosis = require( '@stdlib/math/base/dists/cosine/kurtosis' );
var mean = require( '@stdlib/math/base/dists/cosine/mean' );
var median = require( '@stdlib/math/base/dists/cosine/median' );
var mode = require( '@stdlib/math/base/dists/cosine/mode' );
var skewness = require( '@stdlib/math/base/dists/cosine/skewness' );
var stdev = require( '@stdlib/math/base/dists/cosine/stdev' );
var variance = require( '@stdlib/math/base/dists/cosine/variance' );
var cdf = require( '@stdlib/math/base/dists/cosine/cdf' );
var logcdf = require( '@stdlib/math/base/dists/cosine/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/cosine/logpdf' );
var mgf = require( '@stdlib/math/base/dists/cosine/mgf' );
var pdf = require( '@stdlib/math/base/dists/cosine/pdf' );
var quantile = require( '@stdlib/math/base/dists/cosine/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function cosineCDF( x ) {
	return cdf( x, this.mu, this.s );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function cosineLogCDF( x ) {
	return logcdf( x, this.mu, this.s );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function cosineLogPDF( x ) {
	return logpdf( x, this.mu, this.s );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function cosineMGF( t ) {
	return mgf( t, this.mu, this.s );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function cosinePDF( x ) {
	return pdf( x, this.mu, this.s );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function cosineQuantile( p ) {
	return quantile( p, this.mu, this.s );
}


// MAIN //

/**
* Cosine distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [s=1.0] - scale parameter
* @throws {TypeError} `s` must be a positive number
* @returns {Cosine} distribution instance
*
* @example
* var cosine = new Cosine( 1.0, 1.0 );
*
* var y = cosine.cdf( 1.5 );
* // returns ~0.909
*
* var mu = cosine.mean;
* // returns 1.0
*/
function Cosine() {
	var mu;
	var s;
	if ( !(this instanceof Cosine) ) {
		if ( arguments.length === 0 ) {
			return new Cosine();
		}
		return new Cosine( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		s = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( s ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `s` must be a positive number. Value: `' + s + '`' );
		}
	} else {
		mu = 0.0;
		s = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	return this;
}

/**
* Cosine distribution excess kurtosis.
*
* @name kurtosis
* @memberof Cosine.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.kurtosis;
* // returns ~-0.594
*/
Object.defineProperty( Cosine.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.s );
	}
});

/**
* Cosine distribution expected value.
*
* @name mean
* @memberof Cosine.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.mean;
* // returns 4.0
*/
Object.defineProperty( Cosine.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.s );
	}
});

/**
* Cosine distribution median.
*
* @name median
* @memberof Cosine.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.median;
* // returns 4.0
*/
Object.defineProperty( Cosine.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.s );
	}
});

/**
* Cosine distribution mode.
*
* @name mode
* @memberof Cosine.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.mode;
* // returns 4.0
*/
Object.defineProperty( Cosine.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.s );
	}
});

/**
* Cosine distribution skewness.
*
* @name skewness
* @memberof Cosine.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.skewness;
* // returns 0.0
*/
Object.defineProperty( Cosine.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.s );
	}
});

/**
* Cosine distribution standard deviation.
*
* @name stdev
* @memberof Cosine.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.stdev;
* // returns ~4.338
*/
Object.defineProperty( Cosine.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.s );
	}
});

/**
* Cosine distribution variance.
*
* @name variance
* @memberof Cosine.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.variance;
* // returns ~18.819
*/
Object.defineProperty( Cosine.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.s );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.cdf( 0.5 );
* // returns ~0.165
*/
setReadOnly( Cosine.prototype, 'cdf', cosineCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.logcdf( 0.5 );
* // returns ~-1.802
*/
setReadOnly( Cosine.prototype, 'logcdf', cosineLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.logpdf( 0.8 );
* // returns ~-1.617
*/
setReadOnly( Cosine.prototype, 'logpdf', cosineLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.mgf( 0.2 );
* // returns ~1.555
*/
setReadOnly( Cosine.prototype, 'mgf', cosineMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.pdf( 0.8 );
* // returns 0.198
*/
setReadOnly( Cosine.prototype, 'pdf', cosinePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Cosine.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.quantile( 0.5 );
* // returns ~2.0
*/
setReadOnly( Cosine.prototype, 'quantile', cosineQuantile );


// EXPORTS //

module.exports = Cosine;

},{"@stdlib/assert/is-nan":32,"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/cosine/cdf":415,"@stdlib/math/base/dists/cosine/kurtosis":418,"@stdlib/math/base/dists/cosine/logcdf":422,"@stdlib/math/base/dists/cosine/logpdf":425,"@stdlib/math/base/dists/cosine/mean":427,"@stdlib/math/base/dists/cosine/median":429,"@stdlib/math/base/dists/cosine/mgf":432,"@stdlib/math/base/dists/cosine/mode":434,"@stdlib/math/base/dists/cosine/pdf":437,"@stdlib/math/base/dists/cosine/quantile":441,"@stdlib/math/base/dists/cosine/skewness":443,"@stdlib/math/base/dists/cosine/stdev":445,"@stdlib/math/base/dists/cosine/variance":447,"@stdlib/utils/define-read-only-property":1937}],417:[function(require,module,exports){
'use strict';

/**
* Cosine distribution constructor.
*
* @module @stdlib/math/base/dists/cosine/ctor
*
* @example
* var Cosine = require( '@stdlib/math/base/dists/cosine/ctor' );
*
* var cosine = new Cosine( 1.0, 1.0 );
*
* var y = cosine.cdf( 1.5 );
* // returns ~0.909
*
* var mean = cosine.mean;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":416}],418:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/cosine/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/cosine/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns ~-0.594
*
* y = kurtosis( 4.0, 2.0 );
* // returns ~-0.594
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":419}],419:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );


// MAIN //

/**
* Returns the excess kurtosis for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns ~-0.594
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns ~-0.594
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, s ) {
	var out;
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	out = 6.0 * ( 90.0 - ( PI_SQUARED*PI_SQUARED ) );
	out /= 5.0 * pow( PI_SQUARED-6.0, 2.0 );
	return out;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],420:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace cosine
*/
var cosine = {};

/**
* @name cdf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/cdf}
*/
setReadOnly( cosine, 'cdf', require( '@stdlib/math/base/dists/cosine/cdf' ) );

/**
* @name Cosine
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/ctor}
*/
setReadOnly( cosine, 'Cosine', require( '@stdlib/math/base/dists/cosine/ctor' ) );

/**
* @name kurtosis
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/kurtosis}
*/
setReadOnly( cosine, 'kurtosis', require( '@stdlib/math/base/dists/cosine/kurtosis' ) );

/**
* @name logcdf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/logcdf}
*/
setReadOnly( cosine, 'logcdf', require( '@stdlib/math/base/dists/cosine/logcdf' ) );

/**
* @name logpdf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/logpdf}
*/
setReadOnly( cosine, 'logpdf', require( '@stdlib/math/base/dists/cosine/logpdf' ) );

/**
* @name mean
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/mean}
*/
setReadOnly( cosine, 'mean', require( '@stdlib/math/base/dists/cosine/mean' ) );

/**
* @name median
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/median}
*/
setReadOnly( cosine, 'median', require( '@stdlib/math/base/dists/cosine/median' ) );

/**
* @name mgf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/mgf}
*/
setReadOnly( cosine, 'mgf', require( '@stdlib/math/base/dists/cosine/mgf' ) );

/**
* @name mode
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/mode}
*/
setReadOnly( cosine, 'mode', require( '@stdlib/math/base/dists/cosine/mode' ) );

/**
* @name pdf
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/pdf}
*/
setReadOnly( cosine, 'pdf', require( '@stdlib/math/base/dists/cosine/pdf' ) );

/**
* @name quantile
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/quantile}
*/
setReadOnly( cosine, 'quantile', require( '@stdlib/math/base/dists/cosine/quantile' ) );

/**
* @name skewness
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/skewness}
*/
setReadOnly( cosine, 'skewness', require( '@stdlib/math/base/dists/cosine/skewness' ) );

/**
* @name stdev
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/stdev}
*/
setReadOnly( cosine, 'stdev', require( '@stdlib/math/base/dists/cosine/stdev' ) );

/**
* @name variance
* @memberof cosine
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/cosine/variance}
*/
setReadOnly( cosine, 'variance', require( '@stdlib/math/base/dists/cosine/variance' ) );


// EXPORTS //

module.exports = cosine;

},{"@stdlib/math/base/dists/cosine/cdf":415,"@stdlib/math/base/dists/cosine/ctor":417,"@stdlib/math/base/dists/cosine/kurtosis":418,"@stdlib/math/base/dists/cosine/logcdf":422,"@stdlib/math/base/dists/cosine/logpdf":425,"@stdlib/math/base/dists/cosine/mean":427,"@stdlib/math/base/dists/cosine/median":429,"@stdlib/math/base/dists/cosine/mgf":432,"@stdlib/math/base/dists/cosine/mode":434,"@stdlib/math/base/dists/cosine/pdf":437,"@stdlib/math/base/dists/cosine/quantile":441,"@stdlib/math/base/dists/cosine/skewness":443,"@stdlib/math/base/dists/cosine/stdev":445,"@stdlib/math/base/dists/cosine/variance":447,"@stdlib/utils/define-read-only-property":1937}],421:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logcdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.9 );
* // returns ~-4.2
*
* y = logcdf( 4.0 );
* // returns ~-0.029
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < mu - s ) {
			return NINF;
		}
		if ( x > mu + s ) {
			return 0.0;
		}
		z = ( x - mu ) / s;
		return ln( ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0 );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logcdf":454,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sinpi":1820,"@stdlib/utils/constant-function":1933}],422:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of cumulative distribution function (CDF) for a raised cosine distribution.
*
* @module @stdlib/math/base/dists/cosine/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/cosine/logcdf' );
*
* var y = logcdf( 0.5, 0.0, 1.0 );
* // returns ~-0.095
*
* var mylogcdf = logcdf.factory( 3.0, 1.5 );
*
* y = mylogcdf( 4.0 );
* // returns ~--0.029
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":421,"./logcdf.js":423,"@stdlib/utils/define-read-only-property":1937}],423:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, 0.0, 1.0 );
* // returns ~-0.095
*
* @example
* var y = logcdf( 1.2, 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = logcdf( -0.9, 0.0, 1.0 );
* // returns ~-7.108
*
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function logcdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x < mu ? NINF : 0.0;
	}
	if ( x < mu - s ) {
		return NINF;
	}
	if ( x > mu + s ) {
		return 0.0;
	}
	z = ( x - mu ) / s;
	return ln( ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0 );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sinpi":1820}],424:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-0.693
*
* y = logpdf( 9.0 );
* // returns ~-1.386
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			x < mu - s ||
			x > mu + s
		) {
			return NINF;
		}
		z = ( x - mu ) / s;
		return ln( 1.0 + cospi( z ) ) - ln( 2.0 * s );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logpdf":457,"@stdlib/math/base/special/cospi":1403,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],425:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/cosine/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/cosine/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-0.693
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":424,"./logpdf.js":426,"@stdlib/utils/define-read-only-property":1937}],426:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 3.0 );
* // returns ~-2.254
*
* @example
* var y = logpdf( 1.5, 4.0, 4.0 );
* // returns ~-2.562
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 8.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function logpdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : NINF;
	}
	if (
		x < mu - s ||
		x > mu + s
	) {
		return NINF;
	}
	z = ( x - mu ) / s;
	return ln( 1.0 + cospi( z ) ) - ln( 2.0 * s );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/cospi":1403,"@stdlib/math/base/special/ln":1679}],427:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution expected value.
*
* @module @stdlib/math/base/dists/cosine/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/cosine/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":428}],428:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],429:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution median.
*
* @module @stdlib/math/base/dists/cosine/median
*
* @example
* var median = require( '@stdlib/math/base/dists/cosine/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":430}],430:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128}],431:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinh = require( '@stdlib/math/base/special/sinh' );
var exp = require( '@stdlib/math/base/special/exp' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 3.0, 1.5 );
*
* var y = mgf( 1.9 );
* // returns ~495.57
*
* y = mgf( -1.0 );
* // returns ~0.058
*/
function factory( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a raised cosine distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 2.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		var out;
		var st;
		if ( isnan( t ) ) {
			return NaN;
		}
		st = s * t;
		out = PI_SQUARED * sinh( st );
		out /= st * ( PI_SQUARED + ( st*st ) );
		out *= exp( mu * t );
		return out;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sinh":1817,"@stdlib/utils/constant-function":1933}],432:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution moment-generating function (MGF).
*
* @module @stdlib/math/base/dists/cosine/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/cosine/mgf' );
*
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.016
*
* var mymgf = mgf.factory( 3.0, 1.5 );
*
* y = mymgf( 1.0 );
* // returns ~23.219
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":431,"./mgf.js":433,"@stdlib/utils/define-read-only-property":1937}],433:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinh = require( '@stdlib/math/base/special/sinh' );
var exp = require( '@stdlib/math/base/special/exp' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.016
*
* @example
* var y = mgf( 1.2, 0.0, 1.0 );
* // returns ~1.098
*
* @example
* var y = mgf( -0.9, 0.0, 3.0);
* // returns 0.0
*
* @example
* var y = mgf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function mgf( t, mu, s ) {
	var out;
	var st;
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	st = s * t;
	out = PI_SQUARED * sinh( st );
	out /= st * ( PI_SQUARED + ( st*st ) );
	out *= exp( mu * t );
	return out;
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sinh":1817}],434:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution mode.
*
* @module @stdlib/math/base/dists/cosine/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/cosine/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":435}],435:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],436:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 3.0 );
* var y = pdf( 2.0 );
* // returns ~0.083
*
* y = pdf( 5.0 );
* // returns 0.0
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			x < mu - s ||
			x > mu + s
		) {
			return 0.0;
		}
		z = ( x - mu ) / s;
		return ( 1.0 + cospi( z ) ) / ( 2.0 * s );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/pdf":466,"@stdlib/math/base/special/cospi":1403,"@stdlib/utils/constant-function":1933}],437:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/cosine/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/cosine/pdf' );
*
* var y = pdf( 2.0, 0.0, 3.0 );
* // returns ~0.083
*
* var myPDF = pdf.factory( 0.0, 3.0 );
* y = myPDF( 2.0 );
* // returns ~0.083
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":436,"./pdf.js":438,"@stdlib/utils/define-read-only-property":1937}],438:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 3.0 );
* // returns ~0.083
*
* @example
* var y = pdf( 2.5, 4.0, 2.0 );
* // returns ~0.073
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function pdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : 0.0;
	}
	if (
		x < mu - s ||
		x > mu + s
	) {
		return 0.0;
	}
	z = ( x - mu ) / s;
	return ( 1.0 + cospi( z ) ) / ( 2.0 * s );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/cospi":1403}],439:[function(require,module,exports){
'use strict';

// MODULES //

var cosineCDF = require( '@stdlib/math/base/dists/cosine/cdf' );


// VARIABLES //

var MAX_ITERATIONS = 1e4;
var TOLERANCE = 1e-12;


// MAIN //

/**
* Bisection method to find quantile as there is no closed-form expression for the inverse of the CDF.
*
* @private
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*/
function bisect( p, mu, s ) {
	var a;
	var b;
	var c;
	var m;
	var n;

	n = 1;
	a = mu - s;
	b = mu + s;
	while ( n < MAX_ITERATIONS ) {
		m = ( a + b ) / 2.0;
		if ( b - a < TOLERANCE ) {
			return m;
		}
		c = cosineCDF( m, mu, s);
		if ( p > c ) {
			a = m;
		} else {
			b = m;
		}
		n += 1;
	}
	return m;
}


// EXPORTS //

module.exports = bisect;

},{"@stdlib/math/base/dists/cosine/cdf":415}],440:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/quantile' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var bisect = require( './bisect.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~10.0
*
* y = quantile( 0.8 );
* // returns ~10.655
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a raised cosine distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return bisect( p, mu, s );
	}
}


// EXPORTS //

module.exports = factory;

},{"./bisect.js":439,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/quantile":472,"@stdlib/utils/constant-function":1933}],441:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution quantile function.
*
* @module @stdlib/math/base/dists/cosine/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/cosine/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.327
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns ~10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":440,"./quantile.js":442,"@stdlib/utils/define-read-only-property":1937}],442:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var bisect = require( './bisect.js' );


// MAIN //

/**
* Evaluates the quantile function for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.327
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		isnan( p ) ||
		s < 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return mu;
	}
	return bisect( p, mu, s );
}


// EXPORTS //

module.exports = quantile;

},{"./bisect.js":439,"@stdlib/math/base/assert/is-nan":128}],443:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution skewness.
*
* @module @stdlib/math/base/dists/cosine/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/cosine/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":444}],444:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128}],445:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution standard deviation.
*
* @module @stdlib/math/base/dists/cosine/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/cosine/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~0.362
*
* y = stdev( 4.0, 2.0 );
* // returns ~0.723
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":446}],446:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );


// MAIN //

/**
* Returns the standard deviation for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~0.362
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~0.723
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return s * sqrt( ( 1.0/3.0 ) - ( 2/PI_SQUARED ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],447:[function(require,module,exports){
'use strict';

/**
* Raised cosine distribution variance.
*
* @module @stdlib/math/base/dists/cosine/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/cosine/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~0.131
*
* y = variance( 4.0, 2.0 );
* // returns ~0.523
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":448}],448:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );


// MAIN //

/**
* Returns the variance for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~0.131
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~0.523
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return ( s*s ) * ( ( 1.0/3.0 ) - ( 2/PI_SQUARED ) );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/assert/is-nan":128}],449:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of distribution
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = cdf( 4.0, 3.0 );
* // returns 1.0
*
* @example
* var y = cdf( 3.0, 3.0 );
* // returns 1.0
*
* @example
* var y = cdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*/
function cdf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return (x < mu) ? 0.0 : 1.0;
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128}],450:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - constant value of distribution
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*
* y = cdf( NaN )
* // returns NaN
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated cumulative distribution function
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return (x < mu) ? 0.0 : 1.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],451:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/degenerate/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/degenerate/cdf' );
*
* var y = cdf( 2.0, 5.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/degenerate/cdf' ).factory;
*
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":449,"./factory.js":450,"@stdlib/utils/define-read-only-property":1937}],452:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace degenerate
*/
var degenerate = {};

/**
* @name cdf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/degenerate/cdf}
*/
setReadOnly( degenerate, 'cdf', require( '@stdlib/math/base/dists/degenerate/cdf' ) );

/**
* @name logcdf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/degenerate/logcdf}
*/
setReadOnly( degenerate, 'logcdf', require( '@stdlib/math/base/dists/degenerate/logcdf' ) );

/**
* @name logpdf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/degenerate/logpdf}
*/
setReadOnly( degenerate, 'logpdf', require( '@stdlib/math/base/dists/degenerate/logpdf' ) );

/**
* @name logpmf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/degenerate/logpmf}
*/
setReadOnly( degenerate, 'logpmf', require( '@stdlib/math/base/dists/degenerate/logpmf' ) );

/**
* @name mgf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/degenerate/mgf}
*/
setReadOnly( degenerate, 'mgf', require( '@stdlib/math/base/dists/degenerate/mgf' ) );

/**
* @name pdf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/degenerate/pdf}
*/
setReadOnly( degenerate, 'pdf', require( '@stdlib/math/base/dists/degenerate/pdf' ) );

/**
* @name pmf
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/degenerate/pmf}
*/
setReadOnly( degenerate, 'pmf', require( '@stdlib/math/base/dists/degenerate/pmf' ) );

/**
* @name quantile
* @memberof degenerate
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/degenerate/quantile}
*/
setReadOnly( degenerate, 'quantile', require( '@stdlib/math/base/dists/degenerate/quantile' ) );


// EXPORTS //

module.exports = degenerate;

},{"@stdlib/math/base/dists/degenerate/cdf":451,"@stdlib/math/base/dists/degenerate/logcdf":454,"@stdlib/math/base/dists/degenerate/logpdf":457,"@stdlib/math/base/dists/degenerate/logpmf":460,"@stdlib/math/base/dists/degenerate/mgf":463,"@stdlib/math/base/dists/degenerate/pdf":466,"@stdlib/math/base/dists/degenerate/pmf":469,"@stdlib/math/base/dists/degenerate/quantile":472,"@stdlib/utils/define-read-only-property":1937}],453:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (logCDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 5.0 );
*
* var y = logcdf( 3.0 );
* // returns -Infinity
*
* y = logcdf( 6.0 );
* // returns 0.0
*
* y = logcdf( NaN )
* // returns NaN
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (logCDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} natural logarithm of cumulative distribution function
	*
	* @example
	* var y = logcdf( 10.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x < mu ) ? NINF : 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],454:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/degenerate/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/degenerate/logcdf' );
*
* var y = logcdf( 2.0, 5.0 );
* // returns -Infinity
*
* @example
* var factory = require( '@stdlib/math/base/dists/degenerate/logcdf' ).factory;
*
* var logcdf = factory( 5.0 );
*
* var y = logcdf( 3.0 );
* // returns -Infinity
*
* y = logcdf( 6.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":453,"./logcdf.js":455,"@stdlib/utils/define-read-only-property":1937}],455:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for a degenerate distribution with mean `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of distribution
* @returns {number} natural logarithm of cumulative distribution function
*
* @example
* var y = logcdf( 2.0, 3.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( 4.0, 3.0 );
* // returns 0.0
*
* @example
* var y = logcdf( 3.0, 3.0 );
* // returns 0.0
*
* @example
* var y = logcdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*/
function logcdf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x < mu ) ? NINF : 0.0;
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128}],456:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the natural logarithm of the probability density function
*
* @example
* var logpdf = factory( 5.0 );
*
* var y = logpdf( 0.0 );
* // returns -Infinity
*
* y = logpdf( 5.0 );
* // returns Infinity
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (logPDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} natural logarithm of the probability density function
	*
	* @example
	* var y = logpdf( 10.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? PINF : NINF;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],457:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution logarithm of probability density function (logPDF).
*
* @module @stdlib/math/base/dists/degenerate/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/degenerate/logpdf' );
*
* var y = logpdf( 2.0, 0.0 );
* // returns -Infinity
*
* @example
* var factory = require( '@stdlib/math/base/dists/degenerate/logpdf' ).factory;
*
* var logPDF = factory( 10.0 );
*
* var y = logPDF( 10.0 );
* // returns Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":456,"./logpdf.js":458,"@stdlib/utils/define-read-only-property":1937}],458:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} natural logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 3.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 3.0, 3.0 );
* // returns Infinity
*
* @example
* var y = logpdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*/
function logpdf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? PINF : NINF;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],459:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 5.0 );
*
* var y = logpmf( 0.0 );
* // returns -Infinity
*
* y = logpmf( 5.0 );
* // returns 0.0
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return constantFunction( NaN );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 10.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? 0.0 : NINF;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],460:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability mass function (PDF) for a degenerate distribution.
*
* @module @stdlib/math/base/dists/degenerate/logpmf
*
* @example
* var logpmf = require( '@stdlib/math/base/dists/degenerate/logpmf' );
*
* var y = logpmf( 2.0, 0.0 );
* // returns -Infinity
*
* @example
* var factory = require( '@stdlib/math/base/dists/degenerate/logpmf' ).factory;
*
* var logpmf = factory( 10.0 );
*
* var y = logpmf( 10.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpmf = require( './logpmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpmf, 'factory', factory );


// EXPORTS //

module.exports = logpmf;

},{"./factory.js":459,"./logpmf.js":461,"@stdlib/utils/define-read-only-property":1937}],461:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} logarithm of probability mass function
*
* @example
* var y = logpmf( 2.0, 3.0 );
* // returns -Infinity
*
* @example
* var y = logpmf( 3.0, 3.0 );
* // returns 0.0
*
* @example
* var y = logpmf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN );
* // returns NaN
*/
function logpmf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? 0.0 : NINF;
}


// EXPORTS //

module.exports = logpmf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128}],462:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2.0 );
*
* var y = mgf( 0.0 );
* // returns 1.0
*
* y = mgf( 2.0 );
* // returns ~54.598
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a degenerate distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 10.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) ) {
			return NaN;
		}
		return exp( mu*t );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],463:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution moment-generating function (MGF).
*
* @module @stdlib/math/base/dists/degenerate/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/degenerate/mgf' );
*
* var y = mgf( 2.0, 0.0 );
* // returns 1.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/degenerate/mgf' ).factory;
*
* var mgf = factory( 10.0 );
*
* var y = mymgf( 0.1 );
* // returns ~2.718
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":462,"./mgf.js":464,"@stdlib/utils/define-read-only-property":1937}],464:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a degenerate distribution centered at `mu`.
*
* @param {number} t - input value
* @param {number} mu - value at which to center the distribution
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.0 );
* // returns ~2.718
*
* @example
* var y = mgf( 2.0, 3.0 );
* // returns ~403.429
*
* @example
* var y = mgf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*/
function mgf( t, mu ) {
	if ( isnan( t ) || isnan( mu ) ) {
		return NaN;
	}
	return exp( mu*t );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],465:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 5.0 );
*
* var y = pdf( 0.0 );
* // returns 0.0
*
* y = pdf( 5.0 );
* // returns Infinity
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return constantFunction( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated probability density function
	*
	* @example
	* var y = pdf( 10.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? PINF : 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],466:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/degenerate/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/degenerate/pdf' );
*
* var y = pdf( 2.0, 0.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/degenerate/pdf' ).factory;
*
* var pdf = factory( 10.0 );
*
* var y = pdf( 10.0 );
* // returns Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":465,"./pdf.js":467,"@stdlib/utils/define-read-only-property":1937}],467:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = pdf( 3.0, 3.0 );
* // returns Infinity
*
* @example
* var y = pdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*/
function pdf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? PINF : 0.0;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],468:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the probability mass function
*
* @example
* var pmf = factory( 5.0 );
*
* var y = pmf( 0.0 );
* // returns 0.0
*
* y = pmf( 5.0 );
* // returns 1.0
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return constantFunction( NaN );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PMF
	*
	* @example
	* var y = pmf( 10.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? 1.0 : 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],469:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution probability mass function (PDF).
*
* @module @stdlib/math/base/dists/degenerate/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dists/degenerate/pmf' );
*
* var y = pmf( 2.0, 0.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/degenerate/pmf' ).factory;
*
* var pmf = factory( 10.0 );
*
* var y = pmf( 10.0 );
* // returns 1.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":468,"./pmf.js":470,"@stdlib/utils/define-read-only-property":1937}],470:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated probability mass function
*
* @example
* var y = pmf( 2.0, 3.0 );
* // returns 0.0
* @example
* var y = pmf( 3.0, 3.0 );
* // returns 1.0
* @example
* var y = pmf( NaN, 0.0 );
* // returns NaN
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*/
function pmf( x, mu ) {
	if ( isnan( x ) || isnan( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? 1.0 : 0.0;
}


// EXPORTS //

module.exports = pmf;

},{"@stdlib/math/base/assert/is-nan":128}],471:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the quantile function of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the quantile function
*
* @example
* var quantile = factory( 5.0 );
*
* var y = quantile( 0.3 );
* // returns 5.0
*
* y = quantile( 0.1 );
* // returns 5.0
*
* y = quantile( 1.1 );
* // returns NaN
*/
function factory( mu ) {
	if ( isnan( mu ) ) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function of a degenerate distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.5 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],472:[function(require,module,exports){
'use strict';

/**
* Degenerate distribution quantile function.
*
* @module @stdlib/math/base/dists/degenerate/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/degenerate/quantile' );
*
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/degenerate/quantile' ).factory;
*
* var quantile = factory( 10.0 );
*
* var y = quantile( 0.5 );
* // returns 10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":471,"./quantile.js":473,"@stdlib/utils/define-read-only-property":1937}],473:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a degenerate distribution centered at `mu`.
*
* @param {Probability} p - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var y = quantile( 0.9, 4.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*/
function quantile( p, mu ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128}],474:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns ~0.909
*
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns ~0.333
*
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function cdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	if ( x >= b ) {
		return 1.0;
	}
	return ( floor( x ) - a + 1.0 ) / ( b - a + 1.0 );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484}],475:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns ~0.091
*
* y = cdf( 8.0 );
* // returns ~0.818
*/
function factory( a, b ) {
	var am1;
	var n;
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return constantFunction( NaN );
	}
	am1 = a - 1.0;
	n = b - a + 1.0;
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a discrete uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		if ( x >= b ) {
			return 1.0;
		}
		return ( floor( x ) - am1 ) / n;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/utils/constant-function":1933}],476:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/discrete-uniform/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/discrete-uniform/cdf' );
*
* var y = cdf( 3.0, 0, 4 );
* // returns ~0.8
*
* var mycdf = cdf.factory( 0, 10 );
* y = mycdf( 0.5 );
* // returns ~0.091
*
* y = mycdf( 8.0 );
* // returns ~0.818
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":474,"./factory.js":475,"@stdlib/utils/define-read-only-property":1937}],477:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/discrete-uniform/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/discrete-uniform/kurtosis' );
var mean = require( '@stdlib/math/base/dists/discrete-uniform/mean' );
var median = require( '@stdlib/math/base/dists/discrete-uniform/median' );
var skewness = require( '@stdlib/math/base/dists/discrete-uniform/skewness' );
var stdev = require( '@stdlib/math/base/dists/discrete-uniform/stdev' );
var variance = require( '@stdlib/math/base/dists/discrete-uniform/variance' );
var cdf = require( '@stdlib/math/base/dists/discrete-uniform/cdf' );
var logcdf = require( '@stdlib/math/base/dists/discrete-uniform/logcdf' );
var logpmf = require( '@stdlib/math/base/dists/discrete-uniform/logpmf' );
var mgf = require( '@stdlib/math/base/dists/discrete-uniform/mgf' );
var pmf = require( '@stdlib/math/base/dists/discrete-uniform/pmf' );
var quantile = require( '@stdlib/math/base/dists/discrete-uniform/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function discreteUniformCDF( x ) {
	return cdf( x, this.a, this.b );
}

/**
* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function discreteUniformLogCDF( x ) {
	return logcdf( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the probability mass function (logPMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function discreteUniformLogPMF( x ) {
	return logpmf( x, this.a, this.b );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function discreteUniformMGF( t ) {
	return mgf( t, this.a, this.b );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function discreteUniformPMF( x ) {
	return pmf( x, this.a, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function discreteUniformQuantile( p ) {
	return quantile( p, this.a, this.b );
}


// MAIN //

/**
* Discrete uniform distribution constructor.
*
* @constructor
* @param {integer} [a=0] - minimum support
* @param {integer} [b=1] - maximum support
* @throws {TypeError} `a` must be an integer
* @throws {TypeError} `b` must be an integer
* @throws {RangeError} `a` must be smaller than `b`
* @returns {DiscreteUniform} distribution instance
*
* @example
* var discreteUniform = new DiscreteUniform( 0, 1 );
*
* var y = discreteUniform.cdf( 0.8 );
* // returns 0.5
*
* var mu = discreteUniform.mean;
* // returns 0.5
*/
function DiscreteUniform() {
	var a;
	var b;
	if ( !(this instanceof DiscreteUniform) ) {
		if ( arguments.length === 0 ) {
			return new DiscreteUniform();
		}
		return new DiscreteUniform( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isInteger( a ) ) {
			throw new TypeError( 'invalid input argument. Minimum support `a` must be an integer. Value: `' + a + '`' );
		}
		if ( !isInteger( b ) ) {
			throw new TypeError( 'invalid input argument. Maximum support `b` must be an integer. Value: `' + b + '`' );
		}
		if ( a > b ) {
			throw new RangeError( 'invalid input arguments. Minimum support `a` must be less than or equal to maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0;
		b = 1;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be an integer. Value: `' + value + '`' );
			}
			if ( value > b ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be an integer. Value: `' + value + '`' );
			}
			if ( a > value ) {
				throw new RangeError( 'invalid value. Must be greater than or equal to `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Discrete uniform distribution differential entropy.
*
* @name entropy
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.entropy;
* // returns ~2.197
*/
Object.defineProperty( DiscreteUniform.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.a, this.b );
	}
});

/**
* Discrete uniform distribution excess kurtosis.
*
* @name kurtosis
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.kurtosis;
* // returns -1.23
*/
Object.defineProperty( DiscreteUniform.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b );
	}
});

/**
* Discrete uniform distribution expected value.
*
* @name mean
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.mean;
* // returns 8.0
*/
Object.defineProperty( DiscreteUniform.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b );
	}
});

/**
* Discrete uniform distribution median.
*
* @name median
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.median;
* // returns 8.0
*/
Object.defineProperty( DiscreteUniform.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.a, this.b );
	}
});

/**
* Discrete uniform distribution skewness.
*
* @name skewness
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.skewness;
* // returns 0.0
*/
Object.defineProperty( DiscreteUniform.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b );
	}
});

/**
* Discrete uniform distribution standard deviation.
*
* @name stdev
* @memberof DiscreteUniform.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.stdev;
* // returns ~2.582
*/
Object.defineProperty( DiscreteUniform.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b );
	}
});

/**
* Discrete uniform distribution variance.
*
* @name variance
* @memberof DiscreteUniform.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.variance;
* // returns ~6.667
*/
Object.defineProperty( DiscreteUniform.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.cdf( 3.0 );
* // returns ~0.667
*/
setReadOnly( DiscreteUniform.prototype, 'cdf', discreteUniformCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.logcdf( 2.5 );
* // returns ~-1.099
*/
setReadOnly( DiscreteUniform.prototype, 'logcdf', discreteUniformLogCDF );

/**
* Evaluates the natural logarithm of the probability mass function (logPMF).
*
* @name logpmf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.logpmf( 3.0 );
* // returns ~-1.099
*/
setReadOnly( DiscreteUniform.prototype, 'logpmf', discreteUniformLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.mgf( 0.5 );
* // returns ~4.863
*/
setReadOnly( DiscreteUniform.prototype, 'mgf', discreteUniformMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.pmf( 3.0 );
* // returns ~0.333
*/
setReadOnly( DiscreteUniform.prototype, 'pmf', discreteUniformPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.quantile( 0.6 );
* // returns 3.0
*/
setReadOnly( DiscreteUniform.prototype, 'quantile', discreteUniformQuantile );


// EXPORTS //

module.exports = DiscreteUniform;

},{"@stdlib/assert/is-integer":24,"@stdlib/math/base/dists/discrete-uniform/cdf":476,"@stdlib/math/base/dists/discrete-uniform/entropy":480,"@stdlib/math/base/dists/discrete-uniform/kurtosis":481,"@stdlib/math/base/dists/discrete-uniform/logcdf":485,"@stdlib/math/base/dists/discrete-uniform/logpmf":488,"@stdlib/math/base/dists/discrete-uniform/mean":490,"@stdlib/math/base/dists/discrete-uniform/median":492,"@stdlib/math/base/dists/discrete-uniform/mgf":495,"@stdlib/math/base/dists/discrete-uniform/pmf":498,"@stdlib/math/base/dists/discrete-uniform/quantile":501,"@stdlib/math/base/dists/discrete-uniform/skewness":503,"@stdlib/math/base/dists/discrete-uniform/stdev":505,"@stdlib/math/base/dists/discrete-uniform/variance":507,"@stdlib/utils/define-read-only-property":1937}],478:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution constructor.
*
* @module @stdlib/math/base/dists/discrete-uniform/ctor
*
* @example
* var DiscreteUniform = require( '@stdlib/math/base/dists/discrete-uniform/ctor' );
*
* var discreteUniform = new DiscreteUniform( 0, 8 );
*
* var y = discreteUniform.cdf( 0.8 );
* // returns ~0.111
*
* var mu = discreteUniform.mean;
* // returns 4.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":477}],479:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the entropy of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} entropy
*
* @example
* var v = entropy( 0, 1 );
* // returns ~0.693
*
* @example
* var v = entropy( 4, 12 );
* // returns ~2.197
*
* @example
* var v = entropy( -4, 4 );
* // returns ~2.197
*
* @example
* var v = entropy( 1, 2.5 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1 );
* // returns NaN
*
* @example
* var v = entropy( 2, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2 );
* // returns NaN
*/
function entropy( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	return ln( b - a + 1 );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],480:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution entropy.
*
* @module @stdlib/math/base/dists/discrete-uniform/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/discrete-uniform/entropy' );
*
* var v = entropy( 0, 1 );
* // returns ~0.693
*
* v = entropy( 4, 12 );
* // returns ~2.197
*
* v = entropy( 2, 8 );
* // returns ~1.946
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":479}],481:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/discrete-uniform/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/discrete-uniform/kurtosis' );
*
* var v = kurtosis( 0, 1 );
* // returns -2.0
*
* v = kurtosis( 4, 12 );
* // returns ~-1.23
*
* v = kurtosis( -4, 8 );
* // returns ~-1.214
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":482}],482:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the excess kurtosis of a discrete uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0, 1 );
* // returns -2.0
*
* @example
* var v = kurtosis( 4, 12 );
* // returns ~-1.23
*
* @example
* var v = kurtosis( -4, 4 );
* // returns ~-1.23
*
* @example
* var v = kurtosis( 1, 0.4 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1 );
* // returns NaN
*
* @example
* var v = kurtosis( 2, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2 );
* // returns NaN
*/
function kurtosis( a, b ) {
	var n2;
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	n2 = pow( b - a + 1.0, 2.0 );
	return -1.2 * ( n2 + 1.0 ) / ( n2 - 1.0 );
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],483:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace discreteUniform
*/
var discreteUniform = {};

/**
* @name cdf
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/cdf}
*/
setReadOnly( discreteUniform, 'cdf', require( '@stdlib/math/base/dists/discrete-uniform/cdf' ) );

/**
* @name DiscreteUniform
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/ctor}
*/
setReadOnly( discreteUniform, 'DiscreteUniform', require( '@stdlib/math/base/dists/discrete-uniform/ctor' ) );

/**
* @name entropy
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/entropy}
*/
setReadOnly( discreteUniform, 'entropy', require( '@stdlib/math/base/dists/discrete-uniform/entropy' ) );

/**
* @name kurtosis
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/kurtosis}
*/
setReadOnly( discreteUniform, 'kurtosis', require( '@stdlib/math/base/dists/discrete-uniform/kurtosis' ) );

/**
* @name logcdf
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/logcdf}
*/
setReadOnly( discreteUniform, 'logcdf', require( '@stdlib/math/base/dists/discrete-uniform/logcdf' ) );

/**
* @name logpmf
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/logpmf}
*/
setReadOnly( discreteUniform, 'logpmf', require( '@stdlib/math/base/dists/discrete-uniform/logpmf' ) );

/**
* @name mean
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/mean}
*/
setReadOnly( discreteUniform, 'mean', require( '@stdlib/math/base/dists/discrete-uniform/mean' ) );

/**
* @name median
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/median}
*/
setReadOnly( discreteUniform, 'median', require( '@stdlib/math/base/dists/discrete-uniform/median' ) );

/**
* @name mgf
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/mgf}
*/
setReadOnly( discreteUniform, 'mgf', require( '@stdlib/math/base/dists/discrete-uniform/mgf' ) );

/**
* @name pmf
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/pmf}
*/
setReadOnly( discreteUniform, 'pmf', require( '@stdlib/math/base/dists/discrete-uniform/pmf' ) );

/**
* @name quantile
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/quantile}
*/
setReadOnly( discreteUniform, 'quantile', require( '@stdlib/math/base/dists/discrete-uniform/quantile' ) );

/**
* @name skewness
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/skewness}
*/
setReadOnly( discreteUniform, 'skewness', require( '@stdlib/math/base/dists/discrete-uniform/skewness' ) );

/**
* @name stdev
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/stdev}
*/
setReadOnly( discreteUniform, 'stdev', require( '@stdlib/math/base/dists/discrete-uniform/stdev' ) );

/**
* @name variance
* @memberof discreteUniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform/variance}
*/
setReadOnly( discreteUniform, 'variance', require( '@stdlib/math/base/dists/discrete-uniform/variance' ) );


// EXPORTS //

module.exports = discreteUniform;

},{"@stdlib/math/base/dists/discrete-uniform/cdf":476,"@stdlib/math/base/dists/discrete-uniform/ctor":478,"@stdlib/math/base/dists/discrete-uniform/entropy":480,"@stdlib/math/base/dists/discrete-uniform/kurtosis":481,"@stdlib/math/base/dists/discrete-uniform/logcdf":485,"@stdlib/math/base/dists/discrete-uniform/logpmf":488,"@stdlib/math/base/dists/discrete-uniform/mean":490,"@stdlib/math/base/dists/discrete-uniform/median":492,"@stdlib/math/base/dists/discrete-uniform/mgf":495,"@stdlib/math/base/dists/discrete-uniform/pmf":498,"@stdlib/math/base/dists/discrete-uniform/quantile":501,"@stdlib/math/base/dists/discrete-uniform/skewness":503,"@stdlib/math/base/dists/discrete-uniform/stdev":505,"@stdlib/math/base/dists/discrete-uniform/variance":507,"@stdlib/utils/define-read-only-property":1937}],484:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0, 10 );
* var y = logcdf( 0.5 );
* // returns ~-2.398
*
* y = logcdf( 8.0 );
* // returns ~-0.201
*/
function factory( a, b ) {
	var logn;
	var am1;
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return constantFunction( NaN );
	}
	am1 = a - 1.0;
	logn = ln( b - a + 1.0 );
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return NINF;
		}
		if ( x >= b ) {
			return 0.0;
		}
		return ln( floor( x ) - am1 ) - logn;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],485:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution.
*
* @module @stdlib/math/base/dists/discrete-uniform/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/discrete-uniform/logcdf' );
*
* var y = logcdf( 3.0, 0, 4 );
* // returns ~-0.223
*
* var mylogcdf = logcdf.factory( 0, 10 );
* y = mylogcdf( 0.5 );
* // returns ~-2.398
*
* y = mylogcdf( 8.0 );
* // returns ~-0.201
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":484,"./logcdf.js":486,"@stdlib/utils/define-read-only-property":1937}],486:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 9.0, 0, 10 );
* // returns ~-0.095
*
* @example
* var y = logcdf( 0.5, 0, 2 );
* // returns ~-1.099
*
* @example
* var y = logcdf( +Infinity, 2, 4 );
* // returns 0.0
*
* @example
* var y = logcdf( -Infinity, 2, 4 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1, 0 );
* // returns NaN
*/
function logcdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( x < a ) {
		return NINF;
	}
	if ( x >= b ) {
		return 0.0;
	}
	return ln( floor( x ) - a + 1.0 ) - ln( b - a + 1.0 );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ln":1679}],487:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 0, 10 );
* var y = logpmf( 2.0 );
* // returns ~-2.398
*
* y = logpmf( 12.0 );
* // returns -Infinity
*/
function factory( a, b ) {
	var logn;
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return constantFunction( NaN );
	}
	logn = -ln( b - a + 1.0 );
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b || !isInteger( x ) ) {
			return NINF;
		}
		return logn;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],488:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a discrete uniform distribution.
*
* @module @stdlib/math/base/dists/discrete-uniform/logpmf
*
* @example
* var logpmf = require( '@stdlib/math/base/dists/discrete-uniform/logpmf' );
*
* var y = logpmf( 3.0, 2, 6 );
* // returns ~-1.609
*
* var myLogPMF = logpmf.factory( 6, 7 );
* y = myLogPMF( 7.0 );
* // returns ~-0.693
*
* y = myLogPMF( 5.0 );
* // returns -Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpmf = require( './logpmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpmf, 'factory', factory );


// EXPORTS //

module.exports = logpmf;

},{"./factory.js":487,"./logpmf.js":489,"@stdlib/utils/define-read-only-property":1937}],489:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 2.0, 0, 4 );
* // returns ~-1.609
*
* @example
* var y = logpmf( 5.0, 0, 4 );
* // returns -Infinity
*
* @example
* var y = logpmf( 2, 0, 8 );
* // returns ~-2.197
*
* @example
* var y = logpmf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function logpmf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( x < a || x > b || !isInteger( x ) ) {
		return NINF;
	}
	return -ln( b - a + 1.0 );
}


// EXPORTS //

module.exports = logpmf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],490:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution expected value.
*
* @module @stdlib/math/base/dists/discrete-uniform/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/discrete-uniform/mean' );
*
* var v = mean( 0, 1 );
* // returns 0.5
*
* v = mean( 2, 10 );
* // returns 6.0
*
* v = mean( -10, 10 );
* // returns 0.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":491}],491:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Returns the expected value of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} expected value
*
* @example
* var v = mean( 0, 1 );
* // returns 0.5
*
* @example
* var v = mean( -4, 4 );
* // returns 0.0
*
* @example
* var v = mean( 0, 10 );
* // returns 5.0
*
* @example
* var v = mean( 1, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1 );
* // returns NaN
*
* @example
* var v = mean( 2, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2 );
* // returns NaN
*/
function mean( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	return ( a/2 ) + ( b/2 );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128}],492:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution median.
*
* @module @stdlib/math/base/dists/discrete-uniform/median
*
* @example
* var median = require( '@stdlib/math/base/dists/discrete-uniform/median' );
*
* var v = median( 0, 1 );
* // returns 0.5
*
* v = median( 2, 10 );
* // returns 6.0
*
* v = median( -10, 10 );
* // returns 0.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":493}],493:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Returns the median of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} median
*
* @example
* var v = median( 0, 1 );
* // returns 0.5
*
* @example
* var v = median( -4, 4 );
* // returns 0.0
*
* @example
* var v = median( 0, 10 );
* // returns 5.0
*
* @example
* var v = median( 1, -0.1 );
* // returns NaN
*
* @example
* var v = median( -0.1, 1 );
* // returns NaN
*
* @example
* var v = median( 2, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2 );
* // returns NaN
*/
function median( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	return ( a/2 ) + ( b/2 );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128}],494:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} MGF
*
* @example
* var mgf = factory( 6, 7 );
* var y = mgf( 0.1 );
* // returns ~1.918
*
* y = mymgf( 1.1 );
* // returns ~1471.722
*/
function factory( a, b ) {
	var n;
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return constantFunction( NaN );
	}
	n = b - a + 1;
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a discrete uniform distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var ret;
		if ( isnan( t ) ) {
			return NaN;
		}
		if ( t === 0.0 ) {
			return 1.0;
		}
		// Case: t not equal to zero
		ret = exp( t*a ) * expm1( t*n );
		ret /= n * expm1( t );
		return ret;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/utils/constant-function":1933}],495:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) of a discrete uniform distribution.
*
* @module @stdlib/math/base/dists/discrete-uniform/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/discrete-uniform/mgf' );
*
* var y = mgf( 2.0, 0, 4 );
* // returns ~689.475
*
* y = mgf( -0.2, 0, 4 );
* // returns ~0.697
*
* y = mgf( 2.0, 0, 1 );
* // returns ~4.195
*
* var mymgf = mgf.factory( 6, 7 );
* y = mymgf( 0.1 );
* // returns ~1.918
*
* y = mymgf( 1.1 );
* // returns ~1471.722
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":494,"./mgf.js":496,"@stdlib/utils/define-read-only-property":1937}],496:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) of a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `t`.
*
* @param {number} t - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0, 4 );
* // returns ~689.475
*
* @example
* var y = mgf( -0.2, 0, 4 );
* // returns ~0.697
*
* @example
* var y = mgf( 2.0, 0, 1 );
* // returns ~4.195
*
* @example
* var y = mgf( 0.5, 3, 3 );
* // returns ~4.482
*
* @example
* var y = mgf( 0.5, 3, 2 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0, NaN );
* // returns NaN
*/
function mgf( t, a, b ) {
	var ret;
	var n;
	if (
		isnan( t ) ||
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( t === 0.0 ) {
		return 1.0;
	}
	// Case: t not equal to zero
	n = b - a + 1;
	ret = exp( t*a ) * expm1( t*n );
	ret /= n * expm1( t );
	return ret;
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467}],497:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} PMF
*
* @example
* var pmf = factory( 0, 10 );
* var y = pmf( 2.0 );
* // returns ~0.091
*
* y = pmf( 12.0 );
* // returns 0.0
*/
function factory( a, b ) {
	var ninv;
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return constantFunction( NaN );
	}
	ninv = 1.0 / ( b - a + 1.0 );
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a discrete uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b || !isInteger( x ) ) {
			return 0.0;
		}
		return ninv;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],498:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dists/discrete-uniform/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dists/discrete-uniform/pmf' );
*
* var y = pmf( 3.0, 2, 6 );
* // returns ~0.2
*
* var myPMF = pmf.factory( 6, 7 );
* y = myPMF( 7.0 );
* // returns 0.5
*
* y = myPMF( 5.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":497,"./pmf.js":499,"@stdlib/utils/define-read-only-property":1937}],499:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated PMF
*
* @example
* var y = pmf( 2.0, 0, 4 );
* // returns ~0.2
*
* @example
* var y = pmf( 5.0, 0, 4 );
* // returns 0.0
*
* @example
* var y = pmf( 2, 0, 8 );
* // returns ~0.111
*
* @example
* var y = pmf( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 1 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 3, 1 );
* // returns NaN
*/
function pmf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( x < a || x > b || !isInteger( x ) ) {
		return 0.0;
	}
	return 1.0 / ( b - a + 1.0 );
}


// EXPORTS //

module.exports = pmf;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128}],500:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a discrete uniform distribution with minimum support `a` an maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2, 4 );
* var y = quantile( 0.4 );
* // returns 2.8
*
* y = quantile( 0.8 );
* // returns 3.6
*/
function factory( a, b ) {
	var n;
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return constantFunction( NaN );
	}
	n = b - a + 1;
	return quantile;

	/**
	* Evaluates the quantile function for a discrete uniform distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + floor( p * n );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/utils/constant-function":1933}],501:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution quantile function.
*
* @module @stdlib/math/base/dists/discrete-uniform/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/discrete-uniform/quantile' );
*
* var y = quantile( 0.5, 0, 10 );
* // returns 5
*
* var myQuantile = quantile.factory( 0, 4 );
* y = myQuantile( 0.8 );
* // returns 4
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":500,"./quantile.js":502,"@stdlib/utils/define-read-only-property":1937}],502:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Evaluates the quantile function for a discrete uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0, 1 );
* // returns 1
*
* @example
* var y = quantile( 0.5, 0, 10 );
* // returns 5
*
* @example
* var y = quantile( 1.1, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1, 1.5 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 2, 1 );
* // returns NaN
*/
function quantile( p, a, b ) {
	var n;
	if (
		isnan( p ) ||
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	n = b - a + 1;
	return a + floor( p * n );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484}],503:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution skewness.
*
* @module @stdlib/math/base/dists/discrete-uniform/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/discrete-uniform/skewness' );
*
* var v = skewness( 0, 1 );
* // returns 0.0
*
* v = skewness( 2, 10 );
* // returns 0.0
*
* v = skewness( -10, 10 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":504}],504:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Returns the skewness of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} skewness
*
* @example
* var v = skewness( 0, 1 );
* // returns 0.0
*
* @example
* var v = skewness( -4, 4 );
* // returns 0.0
*
* @example
* var v = skewness( 0, 10 );
* // returns 0.0
*
* @example
* var v = skewness( 1, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1 );
* // returns NaN
*
* @example
* var v = skewness( 2, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2 );
* // returns NaN
*/
function skewness( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128}],505:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution standard deviation.
*
* @module @stdlib/math/base/dists/discrete-uniform/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/discrete-uniform/stdev' );
*
* var v = stdev( 0, 1 );
* // returns ~0.5
*
* v = stdev( 4, 12 );
* // returns ~2.582
*
* v = stdev( 2, 8 );
* // returns 2.0
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":506}],506:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var pow = require( '@stdlib/math/base/special/pow' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// VARIABLES //

var SQRT1O12 = sqrt( 1.0/12.0 );


// MAIN //

/**
* Returns the standard deviation of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0, 1 );
* // returns ~0.5
*
* @example
* var v = stdev( 4, 12 );
* // returns ~2.582
*
* @example
* var v = stdev( -4, 4 );
* // returns ~2.582
*
* @example
* var v = stdev( 1, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( 0.5, 1 );
* // returns NaN
*
* @example
* var v = stdev( 2, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2 );
* // returns NaN
*/
function stdev( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	return SQRT1O12 * sqrt( ( pow( b-a+1, 2.0 ) - 1.0 ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],507:[function(require,module,exports){
'use strict';

/**
* Discrete uniform distribution variance.
*
* @module @stdlib/math/base/dists/discrete-uniform/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/discrete-uniform/variance' );
*
* var v = variance( 0, 1 );
* // returns ~0.25
*
* v = variance( 4, 12 );
* // returns ~6.667
*
* v = variance( 2, 8 );
* // returns 4.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":508}],508:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0, 1 );
* // returns ~0.25
*
* @example
* var v = variance( 4, 12 );
* // returns ~6.667
*
* @example
* var v = variance( -4, 4 );
* // returns ~6.667
*
* @example
* var v = variance( 1, -0.1 );
* // returns NaN
*
* @example
* var v = variance( 0.5, 1 );
* // returns NaN
*
* @example
* var v = variance( 2, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2 );
* // returns NaN
*/
function variance( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		!isInteger( a ) ||
		!isInteger( b ) ||
		a > b
	) {
		return NaN;
	}
	return ( pow( b-a+1, 2.0 ) - 1.0 ) / 12.0;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],509:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var gammaCDF = require( '@stdlib/math/base/dists/gamma/cdf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1, 1.0 );
* // returns ~0.865
*
* @example
* var y = cdf( 2.0, 3, 1.0 );
* // returns ~0.323
*
* @example
* var y = cdf( 2.0, 2.5, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( -1.0, 2, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function cdf( x, k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return NaN;
	}
	return gammaCDF( x, k, lambda );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/gamma/cdf":642}],510:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var factoryGamma = require( '@stdlib/math/base/dists/gamma/cdf' ).factory;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2, 0.1 );
* var y = cdf( 12.0 );
* // returns ~0.337
*
* y = cdf( 8.0 );
* // returns ~0.191
*/
function factory( k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return constantFunction( NaN );
	}
	return factoryGamma( k, lambda );
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/gamma/cdf":642,"@stdlib/utils/constant-function":1933}],511:[function(require,module,exports){
'use strict';

/**
* Erlang distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/erlang/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/erlang/cdf' );
*
* var y = cdf( 2.0, 8, 3.0 );
* // returns ~0.256
*
* y = cdf( 0.0, 1, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2, 0.5 );
* y = mycdf( 6.0 );
* // returns ~0.801
*
* y = mycdf( 2.0 );
* // returns ~0.264
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":509,"./factory.js":510,"@stdlib/utils/define-read-only-property":1937}],512:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/erlang/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/erlang/kurtosis' );
var mean = require( '@stdlib/math/base/dists/erlang/mean' );
var mode = require( '@stdlib/math/base/dists/erlang/mode' );
var skewness = require( '@stdlib/math/base/dists/erlang/skewness' );
var stdev = require( '@stdlib/math/base/dists/erlang/stdev' );
var variance = require( '@stdlib/math/base/dists/erlang/variance' );
var cdf = require( '@stdlib/math/base/dists/erlang/cdf' );
var logpdf = require( '@stdlib/math/base/dists/erlang/logpdf' );
var mgf = require( '@stdlib/math/base/dists/erlang/mgf' );
var pdf = require( '@stdlib/math/base/dists/erlang/pdf' );
var quantile = require( '@stdlib/math/base/dists/erlang/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function erlangCDF( x ) {
	return cdf( x, this.k, this.lambda );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function erlangLogPDF( x ) {
	return logpdf( x, this.k, this.lambda );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function erlangMGF( t ) {
	return mgf( t, this.k, this.lambda );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function erlangPDF( x ) {
	return pdf( x, this.k, this.lambda );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function erlangQuantile( p ) {
	return quantile( p, this.k, this.lambda );
}


// MAIN //

/**
* Erlang distribution constructor.
*
* @constructor
* @param {PositiveInteger} [k=1.0] - shape parameter
* @param {PositiveNumber} [lambda=1.0] - rate parameter
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @returns {Erlang} distribution instance
*
* @example
* var erlang = new Erlang( 1.0, 1.0 );
*
* var y = erlang.cdf( 0.8 );
* // returns ~0.551
*
* var mode = erlang.mode;
* // returns 0.0
*/
function Erlang() {
	var k;
	var lambda;
	if ( !(this instanceof Erlang) ) {
		if ( arguments.length === 0 ) {
			return new Erlang();
		}
		return new Erlang( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		if ( !isPositiveInteger( k ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `k` must be a positive integer. Value: `' + k + '`' );
		}
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		k = 1.0;
		lambda = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositiveInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
}

/**
* Erlang distribution differential entropy.
*
* @name entropy
* @memberof Erlang.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.entropy;
* // returns ~2.531
*/
Object.defineProperty( Erlang.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k, this.lambda );
	}
});

/**
* Erlang distribution excess kurtosis.
*
* @name kurtosis
* @memberof Erlang.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.kurtosis;
* // returns ~-0.252
*/
Object.defineProperty( Erlang.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k, this.lambda );
	}
});

/**
* Erlang distribution expected value.
*
* @name mean
* @memberof Erlang.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.mean;
* // returns ~10.877
*/
Object.defineProperty( Erlang.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k, this.lambda );
	}
});

/**
* Erlang distribution mode.
*
* @name mode
* @memberof Erlang.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.mode;
* // returns ~11.167
*/
Object.defineProperty( Erlang.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k, this.lambda );
	}
});

/**
* Erlang distribution skewness.
*
* @name skewness
* @memberof Erlang.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.skewness;
* // returns ~-0.087
*/
Object.defineProperty( Erlang.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k, this.lambda );
	}
});

/**
* Erlang distribution standard deviation.
*
* @name stdev
* @memberof Erlang.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.stdev;
* // returns ~3.051
*/
Object.defineProperty( Erlang.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k, this.lambda );
	}
});

/**
* Erlang distribution variance.
*
* @name variance
* @memberof Erlang.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.variance;
* // returns ~9.311
*/
Object.defineProperty( Erlang.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k, this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Erlang.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.cdf( 0.5 );
* // returns ~0.016
*/
setReadOnly( Erlang.prototype, 'cdf', erlangCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Erlang.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.logpdf( 2.0 );
* // returns ~-1.635
*/
setReadOnly( Erlang.prototype, 'logpdf', erlangLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Erlang.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.mgf( 0.5 );
* // returns ~9.878
*/
setReadOnly( Erlang.prototype, 'mgf', erlangMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Erlang.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.pdf( 2.0 );
* // returns ~0.195
*/
setReadOnly( Erlang.prototype, 'pdf', erlangPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Erlang.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.quantile( 0.5 );
* // returns ~3.33
*/
setReadOnly( Erlang.prototype, 'quantile', erlangQuantile );


// EXPORTS //

module.exports = Erlang;

},{"@stdlib/assert/is-positive-integer":48,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/erlang/cdf":511,"@stdlib/math/base/dists/erlang/entropy":515,"@stdlib/math/base/dists/erlang/kurtosis":516,"@stdlib/math/base/dists/erlang/logpdf":520,"@stdlib/math/base/dists/erlang/mean":522,"@stdlib/math/base/dists/erlang/mgf":525,"@stdlib/math/base/dists/erlang/mode":527,"@stdlib/math/base/dists/erlang/pdf":530,"@stdlib/math/base/dists/erlang/quantile":533,"@stdlib/math/base/dists/erlang/skewness":535,"@stdlib/math/base/dists/erlang/stdev":537,"@stdlib/math/base/dists/erlang/variance":539,"@stdlib/utils/define-read-only-property":1937}],513:[function(require,module,exports){
'use strict';

/**
* Erlang distribution constructor.
*
* @module @stdlib/math/base/dists/erlang/ctor
*
* @example
* var Erlang = require( '@stdlib/math/base/dists/erlang/ctor' );
*
* var erlang = new Erlang( 1, 1.0 );
*
* var y = erlang.cdf( 0.8 );
* // returns ~0.551
*
* var mode = erlang.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":512}],514:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} differential entropy
*
* @example
* var v = entropy( 1, 1.0 );
* // returns ~-0.154
* @example
* var v = entropy( 4, 12.0 );
* // returns ~9.587
* @example
* var v = entropy( 8, 2.0 );
* // returns ~33.973
* @example
* var v = entropy( 1.5, 2.0 );
* // returns NaN
* @example
* var v = entropy( 1, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( ( 1-k ) * digamma( k ) ) + ln( gamma( k ) / lambda ) + k;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-positive-integer":140,"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/ln":1679}],515:[function(require,module,exports){
'use strict';

/**
* Erlang distribution differential entropy.
*
* @module @stdlib/math/base/dists/erlang/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/erlang/entropy' );
*
* var v = entropy( 1, 1.0 );
* // returns ~-0.154
*
* v = entropy( 4, 12.0 );
* // returns ~9.587
*
* v = entropy( 8, 2.0 );
* // returns ~33.973
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":514}],516:[function(require,module,exports){
'use strict';

/**
* Erlang distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/erlang/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/erlang/kurtosis' );
*
* var v = kurtosis( 1, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4, 12.0 );
* // returns 1.5
*
* v = kurtosis( 8, 2.0 );
* // returns 0.75
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":517}],517:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 1, 1.0 );
* // returns 6.0
* @example
* var v = kurtosis( 4, 12.0 );
* // returns 1.5
* @example
* var v = kurtosis( 8, 2.0 );
* // returns 0.75
* @example
* var v = kurtosis( 1.5, 2.0 );
* // returns NaN
* @example
* var v = kurtosis( 1, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return 6.0 / k;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-positive-integer":140}],518:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace erlang
*/
var erlang = {};

/**
* @name cdf
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/cdf}
*/
setReadOnly( erlang, 'cdf', require( '@stdlib/math/base/dists/erlang/cdf' ) );

/**
* @name entropy
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/entropy}
*/
setReadOnly( erlang, 'entropy', require( '@stdlib/math/base/dists/erlang/entropy' ) );

/**
* @name Erlang
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/ctor}
*/
setReadOnly( erlang, 'Erlang', require( '@stdlib/math/base/dists/erlang/ctor' ) );

/**
* @name kurtosis
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/kurtosis}
*/
setReadOnly( erlang, 'kurtosis', require( '@stdlib/math/base/dists/erlang/kurtosis' ) );

/**
* @name logpdf
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/logpdf}
*/
setReadOnly( erlang, 'logpdf', require( '@stdlib/math/base/dists/erlang/logpdf' ) );

/**
* @name mean
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/mean}
*/
setReadOnly( erlang, 'mean', require( '@stdlib/math/base/dists/erlang/mean' ) );

/**
* @name mgf
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/mgf}
*/
setReadOnly( erlang, 'mgf', require( '@stdlib/math/base/dists/erlang/mgf' ) );

/**
* @name mode
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/mode}
*/
setReadOnly( erlang, 'mode', require( '@stdlib/math/base/dists/erlang/mode' ) );

/**
* @name pdf
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/pdf}
*/
setReadOnly( erlang, 'pdf', require( '@stdlib/math/base/dists/erlang/pdf' ) );

/**
* @name quantile
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/quantile}
*/
setReadOnly( erlang, 'quantile', require( '@stdlib/math/base/dists/erlang/quantile' ) );

/**
* @name skewness
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/skewness}
*/
setReadOnly( erlang, 'skewness', require( '@stdlib/math/base/dists/erlang/skewness' ) );

/**
* @name stdev
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/stdev}
*/
setReadOnly( erlang, 'stdev', require( '@stdlib/math/base/dists/erlang/stdev' ) );

/**
* @name variance
* @memberof erlang
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/erlang/variance}
*/
setReadOnly( erlang, 'variance', require( '@stdlib/math/base/dists/erlang/variance' ) );


// EXPORTS //

module.exports = erlang;

},{"@stdlib/math/base/dists/erlang/cdf":511,"@stdlib/math/base/dists/erlang/ctor":513,"@stdlib/math/base/dists/erlang/entropy":515,"@stdlib/math/base/dists/erlang/kurtosis":516,"@stdlib/math/base/dists/erlang/logpdf":520,"@stdlib/math/base/dists/erlang/mean":522,"@stdlib/math/base/dists/erlang/mgf":525,"@stdlib/math/base/dists/erlang/mode":527,"@stdlib/math/base/dists/erlang/pdf":530,"@stdlib/math/base/dists/erlang/quantile":533,"@stdlib/math/base/dists/erlang/skewness":535,"@stdlib/math/base/dists/erlang/stdev":537,"@stdlib/math/base/dists/erlang/variance":539,"@stdlib/utils/define-read-only-property":1937}],519:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var factoryGamma = require( '@stdlib/math/base/dists/gamma/logpdf' ).factory;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} logPDF
*
* @example
* var myLogPDF = factory( 6.0, 7.0 );
* var y = myLogPDF( 7.0 );
* // returns ~-1.864
*/
function factory( k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return constantFunction( NaN );
	}
	return factoryGamma( k, lambda );
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/gamma/logpdf":652,"@stdlib/utils/constant-function":1933}],520:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability density function (PDF) for an Erlang distribution.
*
* @module @stdlib/math/base/dists/erlang/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/erlang/logpdf' );
*
* var y = logpdf( 0.5, 2, 2.5 );
* // returns ~-0.111
*
* var myLogPDF = logpdf.factory( 6, 7.0 );
* y = myLogPDF( 7.0 );
* // returns ~-1.864
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":519,"./logpdf.js":521,"@stdlib/utils/define-read-only-property":1937}],521:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var gammaLogPDF = require( '@stdlib/math/base/dists/gamma/logpdf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.1, 1, 1.0 );
* // returns ~-0.1
*
* @example
* var y = logpdf( 0.5, 2, 2.5 );
* // returns ~-0.111
*
* @example
* var y = logpdf( -1.0, 4, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, -2, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 0.5, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 0.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.0, 0.0, 2.0 );
* // returns Infinity
*
* @example
* var y = logpdf( 2.0, 1, 0.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function logpdf( x, k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return NaN;
	}
	return gammaLogPDF( x, k, lambda );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/gamma/logpdf":652}],522:[function(require,module,exports){
'use strict';

/**
* Erlang distribution expected value.
*
* @module @stdlib/math/base/dists/erlang/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/erlang/mean' );
*
* var v = mean( 1, 1.0 );
* // returns 1.0
*
* v = mean( 4, 12.0 );
* // returns ~0.333
*
* v = mean( 8, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":523}],523:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 1, 1.0 );
* // returns 1.0
* @example
* var v = mean( 4, 12.0 );
* // returns ~0.333
* @example
* var v = mean( 8, 2.0 );
* // returns 4.0
* @example
* var v = mean( 1.5, 2.0 );
* // returns NaN
* @example
* var v = mean( 1, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return k / lambda;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-positive-integer":140}],524:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2, 0.5 );
*
* var y = mgf( 0.2 );
* // returns ~2.778
*
* y = mgf( -0.5 );
* // returns 0.25
*/
function factory( k, lambda ) {
	if (
		!isNonNegativeInteger( k ) ||
		isnan( lambda ) ||
		lambda < 0.0
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for an Erlang distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) || t >= lambda ) {
			return NaN;
		}
		return pow( 1.0 - (t/lambda), -k );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],525:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for an Erlang distribution.
*
* @module @stdlib/math/base/dists/erlang/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/erlang/mgf' );
*

* var myMGF = mgf.factory( 2, 0.5 );
*
* y = myMGF( 0.2 );
* // returns ~2.778
*
* y = myMGF( -0.5 );
* // returns 0.25
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":524,"./mgf.js":526,"@stdlib/utils/define-read-only-property":1937}],526:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.3, 1, 1.0 );
* // returns ~1.429
*
* @example
* var y = mgf( 2.0, 2, 3.0 );
* // returns ~8.999
*
* @example
* var y = mgf( -1.0, 2, 2.0 );
* // returns ~0.444
*
* @example
* var y = mgf( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 1, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.2, -2, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 0.5, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 1, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 1, -5.0 );
* // returns NaN
*/
function mgf( t, k, lambda ) {
	if (
		isnan( t ) ||
		!isNonNegativeInteger( k ) ||
		isnan( lambda )||
		lambda < 0.0 ||
		t >= lambda
	) {
		return NaN;
	}
	return pow( 1.0 - (t/lambda), -k );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/pow":1743}],527:[function(require,module,exports){
'use strict';

/**
* Erlang distribution mode.
*
* @module @stdlib/math/base/dists/erlang/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/erlang/mode' );
*
* var v = mode( 1, 1.0 );
* // returns 0.0
*
* v = mode( 4, 12.0 );
* // returns 0.25
*
* v = mode( 8, 2.0 );
* // returns 3.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":528}],528:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1, 1.0 );
* // returns 0.0
* @example
* var v = mode( 4, 12.0 );
* // returns 0.25
* @example
* var v = mode( 8, 2.0 );
* // returns 3.5
* @example
* var v = mode( 1.5, 2.0 );
* // returns NaN
* @example
* var v = mode( 1, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( k - 1 ) / lambda;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-positive-integer":140}],529:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var factoryGamma = require( '@stdlib/math/base/dists/gamma/pdf' ).factory;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} PDF
*
* @example
* var myPDF = factory( 6.0, 7.0 );
* var y = myPDF( 7.0 );
* // returns ~0.155
*/
function factory( k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return constantFunction( NaN );
	}
	return factoryGamma( k, lambda );
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/gamma/pdf":664,"@stdlib/utils/constant-function":1933}],530:[function(require,module,exports){
'use strict';

/**
* Erlang distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/erlang/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/erlang/pdf' );
*
* var y = pdf( 0.5, 2, 2.5 );
* // returns ~0.895
*
* var myPDF = pdf.factory( 6, 7.0 );
* y = myPDF( 7.0 );
* // returns ~0.155
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":529,"./pdf.js":531,"@stdlib/utils/define-read-only-property":1937}],531:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var gammaPDF = require( '@stdlib/math/base/dists/gamma/pdf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.1, 1, 1.0 );
* // returns ~0.904
*
* @example
* var y = pdf( 0.5, 2, 2.5 );
* // returns 0.895
*
* @example
* var y = pdf( -1.0, 4, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, -2, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.5, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, 0.0, 2.0 );
* // returns Infinity
*
* @example
* var y = pdf( 2.0, 1, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function pdf( x, k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return NaN;
	}
	return gammaPDF( x, k, lambda );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/gamma/pdf":664}],532:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var factoryGamma = require( '@stdlib/math/base/dists/gamma/quantile' ).factory;


// MAIN //

/**
* Returns a function for evaluating the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2, 0.5 );
* var y = quantile( 0.5 );
* // returns ~3.357
*
* y = quantile( 0.8 );
* // returns ~5.989
*/
function factory( k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return constantFunction( NaN );
	}
	return factoryGamma( k, lambda );
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/gamma/quantile":668,"@stdlib/utils/constant-function":1933}],533:[function(require,module,exports){
'use strict';

/**
* Erlang distribution quantile function.
*
* @module @stdlib/math/base/dists/erlang/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/erlang/quantile' );
*
* var y = quantile( 0.8, 1, 1.0 );
* // returns ~1.609
*
* var myQuantile = quantile.factory( 10, 2.0 );
* y = myQuantile( 0.4 );
* // returns ~4.452
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":532,"./quantile.js":534,"@stdlib/utils/define-read-only-property":1937}],534:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var quantileGamma = require( '@stdlib/math/base/dists/gamma/quantile' );


// MAIN //

/**
* Evaluates the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2, 1.0 );
* // returns ~2.994
*
* @example
* var y = quantile( 0.5, 4, 2.0 );
* // returns ~1.836
*
* @example
* var y = quantile( 1.1, 1, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 1, NaN );
* // returns NaN
*
* @example
* // Non-integer shape parameter:
* var y = quantile( 0.5, 0.5, 1.0 );
* // returns NaN
*
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1, 1.0 );
* // returns NaN
*
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1, -1.0 );
* // returns NaN
*/
function quantile( p, k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return NaN;
	}
	return quantileGamma( p, k, lambda );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/gamma/quantile":668}],535:[function(require,module,exports){
'use strict';

/**
* Erlang distribution skewness.
*
* @module @stdlib/math/base/dists/erlang/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/erlang/skewness' );
*
* var v = skewness( 1, 1.0 );
* // returns 2.0
*
* v = skewness( 4, 12.0 );
* // returns 1.0
*
* v = skewness( 8, 2.0 );
* // returns ~0.707
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":536}],536:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 1, 1.0 );
* // returns 2.0
* @example
* var v = skewness( 4, 12.0 );
* // returns 1.0
* @example
* var v = skewness( 8, 2.0 );
* // returns ~0.707
* @example
* var v = skewness( 1.5, 2.0 );
* // returns NaN
* @example
* var v = skewness( 1, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return 2.0 / sqrt( k );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-positive-integer":140,"@stdlib/math/base/special/sqrt":1826}],537:[function(require,module,exports){
'use strict';

/**
* Erlang distribution standard deviation.
*
* @module @stdlib/math/base/dists/erlang/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/erlang/stdev' );
*
* var v = stdev( 1, 1.0 );
* // returns 1.0
*
* v = stdev( 4, 12.0 );
* // returns ~0.167
*
* v = stdev( 8, 2.0 );
* // returns ~1.414
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":538}],538:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 1, 1.0 );
* // returns 1.0
* @example
* var v = stdev( 4, 12.0 );
* // returns ~0.167
* @example
* var v = stdev( 8, 2.0 );
* // returns ~1.414
* @example
* var v = stdev( 1.5, 2.0 );
* // returns NaN
* @example
* var v = stdev( 1, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return sqrt( k ) / lambda;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-positive-integer":140,"@stdlib/math/base/special/sqrt":1826}],539:[function(require,module,exports){
'use strict';

/**
* Erlang distribution variance.
*
* @module @stdlib/math/base/dists/erlang/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/erlang/variance' );
*
* var v = variance( 1, 1.0 );
* // returns 1.0
*
* v = variance( 4, 12.0 );
* // returns ~0.028
*
* v = variance( 8, 2.0 );
* // returns 2.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":540}],540:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 1, 1.0 );
* // returns 1.0
* @example
* var v = variance( 4, 12.0 );
* // returns ~0.028
* @example
* var v = variance( 8, 2.0 );
* // returns 2.0
* @example
* var v = variance( 1.5, 2.0 );
* // returns NaN
* @example
* var v = variance( 1, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( k, lambda ) {
	if (
		!isPositiveInteger( k ) ||
		isnan( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return k / ( lambda*lambda );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-positive-integer":140}],541:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.181
*
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.865
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, lambda ) {
	if (
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	return 1.0 - exp( -lambda * x );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],542:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.777
*
* y = cdf( 1.0 );
* // returns ~0.393
*/
function factory( lambda ) {
	if (
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( x < 0.0 ) {
			return 0.0;
		}
		return 1.0 - exp( -lambda * x );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],543:[function(require,module,exports){
'use strict';

/**
* Exponential distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/exponential/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/exponential/cdf' );
*
* var y = cdf( 2.0, 0.1 );
* // returns ~0.181
*
* var myCDF = cdf.factory( 0.5 );
* y = myCDF( 3.0 );
* // returns ~0.777
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":541,"./factory.js":542,"@stdlib/utils/define-read-only-property":1937}],544:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/exponential/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/exponential/kurtosis' );
var mean = require( '@stdlib/math/base/dists/exponential/mean' );
var median = require( '@stdlib/math/base/dists/exponential/median' );
var mode = require( '@stdlib/math/base/dists/exponential/mode' );
var skewness = require( '@stdlib/math/base/dists/exponential/skewness' );
var stdev = require( '@stdlib/math/base/dists/exponential/stdev' );
var variance = require( '@stdlib/math/base/dists/exponential/variance' );
var cdf = require( '@stdlib/math/base/dists/exponential/cdf' );
var logcdf = require( '@stdlib/math/base/dists/exponential/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/exponential/logpdf' );
var mgf = require( '@stdlib/math/base/dists/exponential/mgf' );
var pdf = require( '@stdlib/math/base/dists/exponential/pdf' );
var quantile = require( '@stdlib/math/base/dists/exponential/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function exponentialCDF( x ) {
	return cdf( x, this.lambda );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function exponentialLogCDF( x ) {
	return logcdf( x, this.lambda );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function exponentialLogPDF( x ) {
	return logpdf( x, this.lambda );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function exponentialMGF( t ) {
	return mgf( t, this.lambda );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function exponentialPDF( x ) {
	return pdf( x, this.lambda );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function exponentialQuantile( p ) {
	return quantile( p, this.lambda );
}


// MAIN //

/**
* Exponential distribution constructor.
*
* @constructor
* @param {PositiveNumber} [lambda=1.0] - rate parameter
* @throws {TypeError} `lambda` must be a positive number
* @returns {Exponential} distribution instance
*
* @example
* var exponential = new Exponential( 1.0 );
*
* var y = exponential.cdf( 0.8 );
* // returns ~0.551
*
* var mode = exponential.mode;
* // returns 0.0
*/
function Exponential() {
	var lambda;
	if ( !(this instanceof Exponential) ) {
		if ( arguments.length === 0 ) {
			return new Exponential();
		}
		return new Exponential( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		lambda = arguments[ 0 ];
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		lambda = 1.0;
	}
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
}

/**
* Exponential distribution differential entropy.
*
* @name entropy
* @memberof Exponential.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.entropy;
* // returns ~-0.386
*/
Object.defineProperty( Exponential.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.lambda );
	}
});

/**
* Exponential distribution excess kurtosis.
*
* @name kurtosis
* @memberof Exponential.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.kurtosis;
* // returns 6.0
*/
Object.defineProperty( Exponential.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.lambda );
	}
});

/**
* Exponential distribution expected value.
*
* @name mean
* @memberof Exponential.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.mean;
* // returns 0.25
*/
Object.defineProperty( Exponential.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.lambda );
	}
});

/**
* Exponential distribution median.
*
* @name median
* @memberof Exponential.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.median;
* // returns ~0.173
*/
Object.defineProperty( Exponential.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.lambda );
	}
});

/**
* Exponential distribution mode.
*
* @name mode
* @memberof Exponential.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.mode;
* // returns 0.0
*/
Object.defineProperty( Exponential.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.lambda );
	}
});

/**
* Exponential distribution skewness.
*
* @name skewness
* @memberof Exponential.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.skewness;
* // returns 2.0
*/
Object.defineProperty( Exponential.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.lambda );
	}
});

/**
* Exponential distribution standard deviation.
*
* @name stdev
* @memberof Exponential.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.stdev;
* // returns ~0.251
*/
Object.defineProperty( Exponential.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.lambda );
	}
});

/**
* Exponential distribution variance.
*
* @name variance
* @memberof Exponential.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.variance;
* // returns ~0.063
*/
Object.defineProperty( Exponential.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.cdf( 0.5 );
* // returns ~0.632
*/
setReadOnly( Exponential.prototype, 'cdf', exponentialCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.logcdf( 0.5 );
* // returns ~-0.459
*/
setReadOnly( Exponential.prototype, 'logcdf', exponentialLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.logpdf( 0.8 );
* // returns ~-0.906
*/
setReadOnly( Exponential.prototype, 'logpdf', exponentialLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.mgf( 0.5 );
* // returns ~1.333
*/
setReadOnly( Exponential.prototype, 'mgf', exponentialMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.pdf( 0.8 );
* // returns ~0.404
*/
setReadOnly( Exponential.prototype, 'pdf', exponentialPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Exponential.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.quantile( 0.5 );
* // returns ~3.347
*/
setReadOnly( Exponential.prototype, 'quantile', exponentialQuantile );


// EXPORTS //

module.exports = Exponential;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/exponential/cdf":543,"@stdlib/math/base/dists/exponential/entropy":547,"@stdlib/math/base/dists/exponential/kurtosis":548,"@stdlib/math/base/dists/exponential/logcdf":552,"@stdlib/math/base/dists/exponential/logpdf":555,"@stdlib/math/base/dists/exponential/mean":557,"@stdlib/math/base/dists/exponential/median":559,"@stdlib/math/base/dists/exponential/mgf":562,"@stdlib/math/base/dists/exponential/mode":564,"@stdlib/math/base/dists/exponential/pdf":567,"@stdlib/math/base/dists/exponential/quantile":570,"@stdlib/math/base/dists/exponential/skewness":572,"@stdlib/math/base/dists/exponential/stdev":574,"@stdlib/math/base/dists/exponential/variance":576,"@stdlib/utils/define-read-only-property":1937}],545:[function(require,module,exports){
'use strict';

/**
* Exponential distribution constructor.
*
* @module @stdlib/math/base/dists/exponential/ctor
*
* @example
* var Exponential = require( '@stdlib/math/base/dists/exponential/ctor' );
*
* var exponential = new Exponential( 1.0 );
*
* var y = exponential.cdf( 0.8 );
* // returns ~0.551
*
* var mode = exponential.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":544}],546:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the entropy of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~-1.197
* @example
* var v = entropy( 1.0 );
* // returns 1.0
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 - ln( lambda );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],547:[function(require,module,exports){
'use strict';

/**
* Exponential distribution differential entropy.
*
* @module @stdlib/math/base/dists/exponential/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/exponential/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~-1.398
*
* v = entropy( 4.5 );
* // returns ~-0.504
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":546}],548:[function(require,module,exports){
'use strict';

/**
* Exponential distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/exponential/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/exponential/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns 6.0
*
* v = kurtosis( 4.5 );
* // returns 6.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":549}],549:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns 6.0
* @example
* var v = kurtosis( 1.0 );
* // returns 6.0
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 6.0;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],550:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace exponential
*/
var exponential = {};

/**
* @name cdf
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/cdf}
*/
setReadOnly( exponential, 'cdf', require( '@stdlib/math/base/dists/exponential/cdf' ) );

/**
* @name entropy
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/entropy}
*/
setReadOnly( exponential, 'entropy', require( '@stdlib/math/base/dists/exponential/entropy' ) );

/**
* @name Exponential
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/ctor}
*/
setReadOnly( exponential, 'Exponential', require( '@stdlib/math/base/dists/exponential/ctor' ) );

/**
* @name kurtosis
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/kurtosis}
*/
setReadOnly( exponential, 'kurtosis', require( '@stdlib/math/base/dists/exponential/kurtosis' ) );

/**
* @name logcdf
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/logcdf}
*/
setReadOnly( exponential, 'logcdf', require( '@stdlib/math/base/dists/exponential/logcdf' ) );

/**
* @name logpdf
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/logpdf}
*/
setReadOnly( exponential, 'logpdf', require( '@stdlib/math/base/dists/exponential/logpdf' ) );

/**
* @name mean
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/mean}
*/
setReadOnly( exponential, 'mean', require( '@stdlib/math/base/dists/exponential/mean' ) );

/**
* @name median
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/median}
*/
setReadOnly( exponential, 'median', require( '@stdlib/math/base/dists/exponential/median' ) );

/**
* @name mgf
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/mgf}
*/
setReadOnly( exponential, 'mgf', require( '@stdlib/math/base/dists/exponential/mgf' ) );

/**
* @name mode
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/mode}
*/
setReadOnly( exponential, 'mode', require( '@stdlib/math/base/dists/exponential/mode' ) );

/**
* @name pdf
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/pdf}
*/
setReadOnly( exponential, 'pdf', require( '@stdlib/math/base/dists/exponential/pdf' ) );

/**
* @name quantile
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/quantile}
*/
setReadOnly( exponential, 'quantile', require( '@stdlib/math/base/dists/exponential/quantile' ) );

/**
* @name skewness
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/skewness}
*/
setReadOnly( exponential, 'skewness', require( '@stdlib/math/base/dists/exponential/skewness' ) );

/**
* @name stdev
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/stdev}
*/
setReadOnly( exponential, 'stdev', require( '@stdlib/math/base/dists/exponential/stdev' ) );

/**
* @name variance
* @memberof exponential
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/exponential/variance}
*/
setReadOnly( exponential, 'variance', require( '@stdlib/math/base/dists/exponential/variance' ) );


// EXPORTS //

module.exports = exponential;

},{"@stdlib/math/base/dists/exponential/cdf":543,"@stdlib/math/base/dists/exponential/ctor":545,"@stdlib/math/base/dists/exponential/entropy":547,"@stdlib/math/base/dists/exponential/kurtosis":548,"@stdlib/math/base/dists/exponential/logcdf":552,"@stdlib/math/base/dists/exponential/logpdf":555,"@stdlib/math/base/dists/exponential/mean":557,"@stdlib/math/base/dists/exponential/median":559,"@stdlib/math/base/dists/exponential/mgf":562,"@stdlib/math/base/dists/exponential/mode":564,"@stdlib/math/base/dists/exponential/pdf":567,"@stdlib/math/base/dists/exponential/quantile":570,"@stdlib/math/base/dists/exponential/skewness":572,"@stdlib/math/base/dists/exponential/stdev":574,"@stdlib/math/base/dists/exponential/variance":576,"@stdlib/utils/define-read-only-property":1937}],551:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5 );
* var y = logcdf( 3.0 );
* // returns ~-0.252
*
* y = logcdf( 1.0 );
* // returns ~-0.933
*/
function factory( lambda ) {
	if (
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( x < 0.0 ) {
			return NINF;
		}
		return log1p( -exp( -lambda * x ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/log1p":1690,"@stdlib/utils/constant-function":1933}],552:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the cumulative distribution function (CDF) for an exponential distribution.
*
* @module @stdlib/math/base/dists/exponential/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/exponential/logcdf' );
*
* var y = logcdf( 2.0, 0.1 );
* // returns ~-1.708
*
* var mylogCDF = logcdf.factory( 0.5 );
* y = mylogCDF( 3.0 );
* // returns ~-0.252
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":551,"./logcdf.js":553,"@stdlib/utils/define-read-only-property":1937}],553:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.1 );
* // returns ~-1.708
*
* @example
* var y = logcdf( 1.0, 2.0 );
* // returns ~-0.145
*
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = logcdf( 2.0, -1.0 );
* // returns NaN
*/
function logcdf( x, lambda ) {
	if (
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	return log1p( -exp( -lambda * x ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/log1p":1690}],554:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an exponential distribution with parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} logarithm of probability density function (logPDF)
*
* @example
* var logpdf = factory( 0.5 );
* var y = logpdf( 3.0 );
* // returns ~-2.913
*
* y = logpdf( 1.0 );
* // returns ~-1.193
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 || lambda === PINF ) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return NINF;
		}
		return -( x*lambda ) + ln( lambda );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],555:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability density function (PDF) for an exponential distribution.
*
* @module @stdlib/math/base/dists/exponential/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/exponential/logpdf' );
*
* var y = logpdf( 0.3, 4.0 );
* // returns ~0.186
*
* var mylogPDF = logpdf.factory( 0.5 );
*
* y = mylogPDF( 3.0 );
* // returns ~-2.193
*
* y = mylogPDF( 1.0 );
* // returns ~-1.193
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":554,"./logpdf.js":556,"@stdlib/utils/define-read-only-property":1937}],556:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 4.0 );
* // returns ~0.186
*
* @example
* var y = logpdf( 2.0, 0.7 );
* // returns ~-1.757
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative rate:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function logpdf( x, lambda ) {
	if (
		isnan( x ) ||
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	return ( -x*lambda ) + ln( lambda );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],557:[function(require,module,exports){
'use strict';

/**
* Exponential distribution expected value.
*
* @module @stdlib/math/base/dists/exponential/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/exponential/mean' );
*
* var v = mean( 11.0 );
* // returns ~0.091
*
* v = mean( 4.5 );
* // returns ~0.222
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":558}],558:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~0.111
* @example
* var v = mean( 1.0 );
* // returns 1.0
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],559:[function(require,module,exports){
'use strict';

/**
* Exponential distribution median.
*
* @module @stdlib/math/base/dists/exponential/median
*
* @example
* var median = require( '@stdlib/math/base/dists/exponential/median' );
*
* var v = median( 11.0 );
* // returns ~0.063
*
* v = median( 4.5 );
* // returns ~0.154
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":560}],560:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Returns the median of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns ~0.077
* @example
* var v = median( 1.0 );
* // returns ~0.693
* @example
* var v = median( -0.2 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return ( 1.0 / lambda ) * LN2;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-nan":128}],561:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0 );
* var y = mgf( 3.0 );
* // returns 4.0
*
* y = mgf( 0.5 );
* // returns ~1.143
*/
function factory( lambda ) {
	if (
		isnan( lambda ) ||
		lambda <= 0.0 ||
		lambda === PINF
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for an exponential distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) || t >= lambda ) {
			return NaN;
		}
		return lambda / ( lambda - t );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],562:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for an exponential distribution.
*
* @module @stdlib/math/base/dists/exponential/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/exponential/mgf' );
*
* var v = mgf( 2.0, 3.0 );
* // returns 3.0
*
* var mymgf = mgf.factory( 4.0 );
* v = mymgf( 3.0 );
* // returns 4.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":561,"./mgf.js":563,"@stdlib/utils/define-read-only-property":1937}],563:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for an exponential distribution with rate parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var v = mgf( 2.0, 3.0 )
* // returns 3.0
*
* @example
* var v = mgf( 0.4, 1.2 )
* // returns 1.5
*
* @example
* var v = mgf( 0.8, 1.6 )
* // returns 2.0
*
* @example
* var v = mgf( 4.0, 3.0 )
* // returns NaN
*
* @example
* var v = mgf( NaN, 3.0 )
* // returns NaN
*
* @example
* var v = mgf( 2.0, NaN )
* // returns NaN
*/
function mgf( t, lambda ) {
	if (
		isnan( t ) ||
		isnan( lambda ) ||
		lambda <= 0.0 ||
		lambda === PINF ||
		t >= lambda
	) {
		return NaN;
	}
	return lambda / ( lambda - t );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],564:[function(require,module,exports){
'use strict';

/**
* Exponential distribution mode.
*
* @module @stdlib/math/base/dists/exponential/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/exponential/mode' );
*
* var v = mode( 11.0 );
* // returns 0.0
*
* v = mode( 4.5 );
* // returns 0.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":565}],565:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 0.0
* @example
* var v = mode( 1.0 );
* // returns 0.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],566:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an exponential distribution with parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} probability density function (PDF)
*
* @example
* var pdf = factory( 0.5 );
* var y = pdf( 3.0 );
* // returns ~0.112
*
* y = pdf( 1.0 );
* // returns ~0.303
*/
function factory( lambda ) {
	var scale;
	if ( isnan( lambda ) || lambda < 0.0 || lambda === PINF ) {
		return constantFunction( NaN );
	}
	scale = 1.0 / lambda;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return exp( -x / scale ) / scale;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],567:[function(require,module,exports){
'use strict';

/**
* Exponential distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/exponential/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/exponential/pdf' );
*
* var y = pdf( 0.3, 4.0 );
* // returns ~1.205
*
* var myPDF = pdf.factory( 0.5 );
*
* y = myPDF( 3.0 );
* // returns ~0.112
*
* y = myPDF( 1.0 );
* // returns ~0.303
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":566,"./pdf.js":568,"@stdlib/utils/define-read-only-property":1937}],568:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~1.205
*
* @example
* var y = pdf( 2.0, 0.7 );
* // returns ~0.173
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative rate:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, lambda ) {
	var scale;
	if (
		isnan( x ) ||
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	scale = 1.0 / lambda;
	return exp( -x / scale ) / scale;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],569:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the quantile function of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns ~1.277
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function factory( lambda ) {
	if ( lambda < 0.0 || lambda === PINF || isnan( lambda ) ) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for an exponential distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return -ln( 1.0 - p ) / lambda;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],570:[function(require,module,exports){
'use strict';

/**
* Exponential distribution quantile function.
*
* @module @stdlib/math/base/dists/exponential/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/exponential/quantile' );
*
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
*
* var myQuantile = quantile.factory( 0.4 );
*
* y = myQuantile( 0.4 );
* // returns ~1.277
*
* y = myQuantile( 1.0 );
* // returns Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":569,"./quantile.js":571,"@stdlib/utils/define-read-only-property":1937}],571:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the quantile function for an exponential distribution with rate parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.609
*
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
*
* @example
* var y = quantile( 0.5, 0.1 );
* // returns ~6.931
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, lambda ) {
	if (
		isnan( lambda ) ||
		lambda < 0.0 ||
		lambda === PINF ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return -ln( 1.0 - p ) / lambda;
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],572:[function(require,module,exports){
'use strict';

/**
* Exponential distribution skewness.
*
* @module @stdlib/math/base/dists/exponential/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/exponential/skewness' );
*
* var v = skewness( 11.0 );
* // returns 2.0
*
* v = skewness( 4.5 );
* // returns 2.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":573}],573:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns 2.0
* @example
* var v = skewness( 1.0 );
* // returns 2.0
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 2.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128}],574:[function(require,module,exports){
'use strict';

/**
* Exponential distribution standard deviation.
*
* @module @stdlib/math/base/dists/exponential/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/exponential/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~0.089
*
* v = stdev( 4.5 );
* // returns ~0.221
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":575}],575:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the standard deviation of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~0.11
* @example
* var v = stdev( 1.0 );
* // returns 1.0
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128}],576:[function(require,module,exports){
'use strict';

/**
* Exponential distribution variance.
*
* @module @stdlib/math/base/dists/exponential/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/exponential/variance' );
*
* var v = variance( 11.0 );
* // returns ~0.008
*
* v = variance( 4.5 );
* // returns ~0.049
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":577}],577:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~0.012
* @example
* var v = variance( 1.0 );
* // returns 1.0
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / ( lambda*lambda );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],578:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.608
*
* @example
* var y = cdf( 2.0, 8.0, 4.0 );
* // returns ~0.737
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*/
function cdf( x, d1, d2 ) {
	if (
		isnan( x ) ||
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	if ( d1 * x > d2 ) {
		return betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2 /2.0, true, false );
	}
	return betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363}],579:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.906
*
* y = cdf( 8.0 );
* // returns ~0.884
*/
function factory( d1, d2 ) {
	if (
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		if ( d1 * x > d2 ) {
			return betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2/2.0, true, false );
		}
		return betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/utils/constant-function":1933}],580:[function(require,module,exports){
'use strict';

/**
* Evaluates the cumulative distribution function (CDF) for a F distribution.
*
* @module @stdlib/math/base/dists/f/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/f/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.608
*
* y = cdf( 2.0, 8.0, 4.0 );
* // returns ~0.737
*
* y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 10.0, 2.0 );
*
* y = mycdf( 10.0 );
* // returns ~0.906
*
* y = mycdf( 8.0 );
* // returns ~0.884
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":578,"./factory.js":579,"@stdlib/utils/define-read-only-property":1937}],581:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/f/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/f/kurtosis' );
var mean = require( '@stdlib/math/base/dists/f/mean' );
var mode = require( '@stdlib/math/base/dists/f/mode' );
var skewness = require( '@stdlib/math/base/dists/f/skewness' );
var stdev = require( '@stdlib/math/base/dists/f/stdev' );
var variance = require( '@stdlib/math/base/dists/f/variance' );
var cdf = require( '@stdlib/math/base/dists/f/cdf' );
var pdf = require( '@stdlib/math/base/dists/f/pdf' );
var quantile = require( '@stdlib/math/base/dists/f/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function fCDF( x ) {
	return cdf( x, this.d1, this.d2 );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function fPDF( x ) {
	return pdf( x, this.d1, this.d2 );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function fQuantile( p ) {
	return quantile( p, this.d1, this.d2 );
}


// MAIN //

/**
* F distribution constructor.
*
* @constructor
* @param {PositiveNumber} [d1=1.0] - numerator degrees of freedom
* @param {PositiveNumber} [d2=1.0] - denominator degrees of freedom
* @throws {TypeError} `d1` must be a positive number
* @throws {TypeError} `d2` must be a positive number
* @returns {F} distribution instance
*
* @example
* var f = new F( 1.0, 1.0 );
*
* var y = f.cdf( 0.8 );
* // returns ~0.465
*
* var mode = f.mode;
* // returns NaN
*/
function F() {
	var d1;
	var d2;
	if ( !(this instanceof F) ) {
		if ( arguments.length === 0 ) {
			return new F();
		}
		return new F( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		d1 = arguments[ 0 ];
		d2 = arguments[ 1 ];
		if ( !isPositive( d1 ) ) {
			throw new TypeError( 'invalid input argument. Numerator degrees of freedom `d1` must be a positive number. Value: `' + d1 + '`' );
		}
		if ( !isPositive( d2 ) ) {
			throw new TypeError( 'invalid input argument. Denominator degrees of freedom `d2` must be a positive number. Value: `' + d2 + '`' );
		}
	} else {
		d1 = 1.0;
		d2 = 1.0;
	}
	Object.defineProperty( this, 'd1', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return d1;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			d1 = value;
		}
	});
	Object.defineProperty( this, 'd2', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return d2;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			d2 = value;
		}
	});
	return this;
}

/**
* F distribution differential entropy.
*
* @name entropy
* @memberof F.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.entropy;
* // returns ~1.12
*/
Object.defineProperty( F.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.d1, this.d2 );
	}
});

/**
* F distribution excess kurtosis.
*
* @name kurtosis
* @memberof F.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.kurtosis;
* // returns ~26.143
*/
Object.defineProperty( F.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.d1, this.d2 );
	}
});

/**
* F distribution expected value.
*
* @name mean
* @memberof F.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.mean;
* // returns 1.2
*/
Object.defineProperty( F.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.d1, this.d2 );
	}
});

/**
* F distribution mode.
*
* @name mode
* @memberof F.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.mode;
* // returns ~0.429
*/
Object.defineProperty( F.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.d1, this.d2 );
	}
});

/**
* F distribution skewness.
*
* @name skewness
* @memberof F.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.skewness;
* // returns ~3.207
*/
Object.defineProperty( F.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.d1, this.d2 );
	}
});

/**
* F distribution standard deviation.
*
* @name stdev
* @memberof F.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.stdev;
* // returns ~1.122
*/
Object.defineProperty( F.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.d1, this.d2 );
	}
});

/**
* F distribution variance.
*
* @name variance
* @memberof F.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.variance;
* // returns 1.26
*/
Object.defineProperty( F.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.d1, this.d2 );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof F.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.cdf( 0.5 );
* // returns ~0.36
*/
setReadOnly( F.prototype, 'cdf', fCDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof F.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.pdf( 2.0 );
* // returns ~0.125
*/
setReadOnly( F.prototype, 'pdf', fPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof F.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.quantile( 0.5 );
* // returns ~0.828
*/
setReadOnly( F.prototype, 'quantile', fQuantile );


// EXPORTS //

module.exports = F;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/f/cdf":580,"@stdlib/math/base/dists/f/entropy":584,"@stdlib/math/base/dists/f/kurtosis":585,"@stdlib/math/base/dists/f/mean":588,"@stdlib/math/base/dists/f/mode":590,"@stdlib/math/base/dists/f/pdf":595,"@stdlib/math/base/dists/f/quantile":598,"@stdlib/math/base/dists/f/skewness":600,"@stdlib/math/base/dists/f/stdev":602,"@stdlib/math/base/dists/f/variance":604,"@stdlib/utils/define-read-only-property":1937}],582:[function(require,module,exports){
'use strict';

/**
* F distribution constructor.
*
* @module @stdlib/math/base/dists/f/ctor
*
* @example
* var F = require( '@stdlib/math/base/dists/f/ctor' );
*
* var f = new F( 1.0, 1.0 );
*
* var y = f.cdf( 0.8 );
* // returns ~0.465
*
* var mode = f.mode;
* // returns NaN
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":581}],583:[function(require,module,exports){
'use strict';

// MODULES //

var digamma = require( '@stdlib/math/base/special/digamma' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 3.0, 7.0 );
* // returns ~1.298
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.12
* @example
* var v = entropy( 8.0, 7.0 );
* // returns ~1.193
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( d1, d2 ) {
	var half;
	var hd1;
	var hd2;
	var out;

	if (
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return NaN;
	}
	half = ( d1 + d2 ) / 2.0;
	hd1 = d1 / 2.0;
	hd2 = d2 / 2.0;
	out = ln( d2 / d1 ) + gammaln( hd1 ) + gammaln( hd2 ) - gammaln( half );
	out += ( 1.0-hd1 ) * digamma( hd1 );
	out += ( -1.0-hd2 ) * digamma( hd2 );
	out += half * digamma( half );
	return out;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679}],584:[function(require,module,exports){
'use strict';

/**
* F distribution differential entropy.
*
* @module @stdlib/math/base/dists/f/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/f/entropy' );
*
* var v = entropy( 3.0, 7.0 );
* // returns ~1.298
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.12
*
* v = entropy( 8.0, 7.0 );
* // returns ~1.193
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":583}],585:[function(require,module,exports){
'use strict';

/**
* F distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/f/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/f/kurtosis' );
*
* var v = kurtosis( 3.0, 9.0 );
* // returns ~124.667
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~26.143
*
* v = kurtosis( 8.0, 9.0 );
* // returns ~100.167
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":586}],586:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the excess kurtosis of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 3.0, 9.0 );
* // returns ~124.667
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~26.143
* @example
* var v = kurtosis( 8.0, 9.0 );
* // returns ~100.167
* @example
* var v = kurtosis( 1.0, 8.0 );
* // returns NaN
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( d1, d2 ) {
	var denom;
	var num;

	if ( d1 <= 0.0 || d2 <= 8.0 ) {
		return NaN;
	}
	num = ( d1 * ( ( 5.0*d2 ) - 22.0 ) * ( d1+d2-2.0 ) ) +
		( ( d2-4.0 ) * pow( d2-2.0, 2.0 ) );
	denom = d1 * ( d2-6.0 ) * ( d2-8.0 ) * ( d1+d2-2.0 );
	return 12.0 * num / denom;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/special/pow":1743}],587:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace f
*/
var f = {};

/**
* @name cdf
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/cdf}
*/
setReadOnly( f, 'cdf', require( '@stdlib/math/base/dists/f/cdf' ) );

/**
* @name entropy
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/entropy}
*/
setReadOnly( f, 'entropy', require( '@stdlib/math/base/dists/f/entropy' ) );

/**
* @name F
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/ctor}
*/
setReadOnly( f, 'F', require( '@stdlib/math/base/dists/f/ctor' ) );

/**
* @name kurtosis
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/kurtosis}
*/
setReadOnly( f, 'kurtosis', require( '@stdlib/math/base/dists/f/kurtosis' ) );

/**
* @name mean
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/mean}
*/
setReadOnly( f, 'mean', require( '@stdlib/math/base/dists/f/mean' ) );

/**
* @name mode
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/mode}
*/
setReadOnly( f, 'mode', require( '@stdlib/math/base/dists/f/mode' ) );

/**
* @name pdf
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/pdf}
*/
setReadOnly( f, 'pdf', require( '@stdlib/math/base/dists/f/pdf' ) );

/**
* @name quantile
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/quantile}
*/
setReadOnly( f, 'quantile', require( '@stdlib/math/base/dists/f/quantile' ) );

/**
* @name skewness
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/skewness}
*/
setReadOnly( f, 'skewness', require( '@stdlib/math/base/dists/f/skewness' ) );

/**
* @name stdev
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/stdev}
*/
setReadOnly( f, 'stdev', require( '@stdlib/math/base/dists/f/stdev' ) );

/**
* @name variance
* @memberof f
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/f/variance}
*/
setReadOnly( f, 'variance', require( '@stdlib/math/base/dists/f/variance' ) );


// EXPORTS //

module.exports = f;

},{"@stdlib/math/base/dists/f/cdf":580,"@stdlib/math/base/dists/f/ctor":582,"@stdlib/math/base/dists/f/entropy":584,"@stdlib/math/base/dists/f/kurtosis":585,"@stdlib/math/base/dists/f/mean":588,"@stdlib/math/base/dists/f/mode":590,"@stdlib/math/base/dists/f/pdf":595,"@stdlib/math/base/dists/f/quantile":598,"@stdlib/math/base/dists/f/skewness":600,"@stdlib/math/base/dists/f/stdev":602,"@stdlib/math/base/dists/f/variance":604,"@stdlib/utils/define-read-only-property":1937}],588:[function(require,module,exports){
'use strict';

/**
* F distribution expected value.
*
* @module @stdlib/math/base/dists/f/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/f/mean' );
*
* var v = mean( 3.0, 5.0 );
* // returns ~1.667
*
* v = mean( 4.0, 12.0 );
* // returns ~1.2
*
* v = mean( 8.0, 4.0 );
* // returns 2.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":589}],589:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 3.0, 5.0 );
* // returns ~1.667
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~1.2
* @example
* var v = mean( 8.0, 4.0 );
* // returns 2.0
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN~1.2
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( d1, d2 ) {
	if (
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 2.0
	) {
		return NaN;
	}
	return d2 / ( d2 - 2.0 );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],590:[function(require,module,exports){
'use strict';

/**
* F distribution mode.
*
* @module @stdlib/math/base/dists/f/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/f/mode' );
*
* var v = mode( 3.0, 5.0 );
* // returns ~0.238
*
* v = mode( 4.0, 12.0 );
* // returns ~0.429
*
* v = mode( 8.0, 4.0 );
* // returns 0.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":591}],591:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 3.0, 5.0 );
* // returns ~0.238
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.429
* @example
* var v = mode( 8.0, 4.0 );
* // returns 0.5
* @example
* var v = mode( 3.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 3.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( d1, d2 ) {
	if ( d1 <= 2.0 || d2 <= 0.0 ) {
		return NaN;
	}
	return ( ( d1-2.0 ) / d1 ) * ( d2 / ( d2+2.0 ) );
}


// EXPORTS //

module.exports = mode;

},{}],592:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var ibetaDerivative = require( './ibeta_derivative.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 6.0, 7.0 );
* var y = pdf( 7.0 );
* // returns ~0.004
*
* y = pdf( 2.0 );
* // returns ~0.166
*/
function factory( d1, d2 ) {
	var d1d2;
	var d1by2;
	var d2by2;
	var zeroVal;
	if (
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return constantFunction( NaN );
	}
	d1d2 = d1 * d2;
	d1by2 = d1 / 2.0;
	d2by2 = d2 / 2.0;
	zeroVal = 0.0;
	if ( d1 < 2.0 ) {
		zeroVal = PINF;
	}
	else if ( d1 === 2.0 ) {
		zeroVal = 1.0;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var v1x;
		var y;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return 0.0;
		}
		if ( x === 0.0 ) {
			return zeroVal;
		}
		v1x = d1 * x;
		if ( v1x > d2 ) {
			y = d1d2 / ( ( d2 + v1x ) * ( d2 + v1x ) );
			return y * ibetaDerivative( d2 / ( d2 + v1x ), d2by2, d1by2 );
		}
		z = d2 + v1x;
		y = ((z * d1) - (x * d1 * d1)) / ( z * z );
		return y * ibetaDerivative( d1 * x / ( d2 + v1x ), d1by2, d2by2 );
	}
}


// EXPORTS //

module.exports = factory;

},{"./ibeta_derivative.js":593,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],593:[function(require,module,exports){
'use strict';

// MODULES //

var ibetaPowerTerms = require( './ibeta_power_terms.js' );


// MAIN //

/**
* Computes the partial derivative with respect to x of the incomplete beta function.
*
* @private
* @param {Probability} x - input value (not equal to 0.0 or 1.0)
* @param {PositiveNumber} a - first parameter
* @param {PositiveNumber} b - second parameter
* @returns {number} value of the partial derivative
*/
function ibetaDerivative( x, a, b ) {
	var f1;
	var y;

	f1 = ibetaPowerTerms( a, b, x, 1.0 - x, true );
	y = ( 1.0 - x ) * x;
	f1 /= y;
	return f1;
}


// EXPORTS //

module.exports = ibetaDerivative;

},{"./ibeta_power_terms.js":594}],594:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var lanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
var G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
var E = require( '@stdlib/constants/math/float64-e' );


// MAIN //

/**
* Computes the leading power terms in the incomplete beta function.
*
* When normalized,
*
* ```tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ```tex
* x^a y^b
* ```
*
* ## Notes
*
* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.
*
* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.
*
* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*     ```tex
*     (1 + l_1)^a \cdot (1 + l_2)^b \\
*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*     = (1 + l_1 + l_3 + l_1*l_3)^a
*     ```
*
*     and
*
*     ```tex
*     l_3 = (1 + l_2)^(b/a) - 1 \\
*     = \exp((b/a) * \ln(1 + l_2)) - 1
*     ```
*
*     The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/
function ibetaPowerTerms( a, b, x, y, normalized ) {
	var result;
	var smallA;
	var ratio;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var l3;
	var p1;
	var b1;
	var b2;
	var c;
	var l;

	if ( !normalized ) {
		// Can we do better here?
		return pow( x, a ) * pow( y, b );
	}
	c = a + b;

	// Combine power terms with Lanczos approximation:
	agh = a + G - 0.5;
	bgh = b + G - 0.5;
	cgh = c + G - 0.5;
	result = lanczosSumExpGScaled( c );
	result /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );

	// Combine with the leftover terms from the Lanczos approximation:
	result *= sqrt( bgh / E );
	result *= sqrt( agh / cgh );

	// `l1` and `l2` are the base of the exponents minus one:
	l1 = ( ( x * b ) - ( y * agh ) ) / agh;
	l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
	if ( min( abs(l1), abs(l2) ) < 0.2 ) {
		// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
		if ( l1 * l2 > 0 || min( a, b ) < 1 ) {
			if ( abs(l1) < 0.1 ) {
				result *= exp( a * log1p( l1 ) );
			} else {
				result *= pow( ( x*cgh ) / agh, a );
			}
			if ( abs(l2) < 0.1 ) {
				result *= exp( b * log1p( l2 ) );
			} else {
				result *= pow((y * cgh) / bgh, b);
			}
		}
		else if ( max( abs(l1), abs(l2) ) < 0.5 ) {
			smallA = a < b;
			ratio = b / a;
			if (
				(smallA && (ratio * l2 < 0.1)) ||
				(!smallA && (l1 / ratio > 0.1))
			) {
				l3 = expm1( ratio * log1p( l2 ) );
				l3 = l1 + l3 + ( l3 * l1 );
				l3 = a * log1p( l3 );
				result *= exp( l3 );
			}
			else {
				l3 = expm1( log1p( l1 ) / ratio );
				l3 = l2 + l3 + ( l3 * l2 );
				l3 = b * log1p( l3 );
				result *= exp( l3 );
			}
		}
		else if ( abs(l1) < abs(l2) ) {
			// First base near 1 only:
			l = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );
			if ( l <= MIN_LN || l >= MAX_LN ) {
				l += ln(result);
				if ( l >= MAX_LN ) {
					return NaN;
				}
				result = exp( l );
			} else {
				result *= exp( l );
			}
		}
		else {
			// Second base near 1 only:
			l = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );
			if ( l <= MIN_LN || l >= MAX_LN ) {
				l += ln(result);
				if ( l >= MAX_LN ) {
					return NaN;
				}
				result = exp( l );
			} else {
				result *= exp( l );
			}
		}
	}
	else {
		// General case:
		b1 = (x * cgh) / agh;
		b2 = (y * cgh) / bgh;
		l1 = a * ln(b1);
		l2 = b * ln(b2);
		if (
			l1 >= MAX_LN ||
			l1 <= MIN_LN ||
			l2 >= MAX_LN ||
			l2 <= MIN_LN
		) {
			// Oops, under/overflow, sidestep if we can:
			if ( a < b ) {
				p1 = pow( b2, b / a );
				l3 = a * ( ln(b1) + ln(p1) );
				if ( l3 < MAX_LN && l3 > MIN_LN ) {
					result *= pow( p1 * b1, a );
				} else {
					l2 += l1 + ln(result);
					if ( l2 >= MAX_LN ) {
						return NaN;
					}
					result = exp( l2 );
				}
			}
			else {
				p1 = pow( b1, a / b );
				l3 = ( ln(p1) + ln(b2) ) * b;
				if ( l3 < MAX_LN && l3 > MIN_LN ) {
					result *= pow( p1 * b2, b );
				} else {
					l2 += l1 + ln( result );
					if (l2 >= MAX_LN) {
						return NaN;
					}
					result = exp( l2 );
				}
			}
		}
		else {
			// Finally the normal case:
			result *= pow( b1, a ) * pow( b2, b );
		}
	}
	return result;
}


// EXPORTS //

module.exports = ibetaPowerTerms;

},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],595:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for a F distribution.
*
* @module @stdlib/math/base/dists/f/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/f/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.057
*
* y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.915
*
* var mypdf = pdf.factory( 6.0, 7.0 );
* y = mypdf( 7.0 );
* // returns ~0.004
*
* y = mypdf( 2.0 );
* // returns ~0.166
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":592,"./pdf.js":596,"@stdlib/utils/define-read-only-property":1937}],596:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var ibetaDerivative = require( './ibeta_derivative.js' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.057
*
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.915
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
*/
function pdf( x, d1, d2 ) {
	var v1x;
	var y;
	var z;
	if (
		isnan( x ) ||
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x === PINF ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		if ( d1 < 2.0 ) {
			return PINF;
		}
		if ( d1 === 2.0 ) {
			return 1.0;
		}
		return 0.0;
	}
	v1x = d1 * x;
	if ( v1x > d2 ) {
		y = ( d2 * d1 ) / ( ( d2 + v1x ) * ( d2 + v1x ) );
		return y * ibetaDerivative( d2 / ( d2+v1x ), d2/2.0, d1/2.0 );
	}
	z = d2 + v1x;
	y = ((z * d1) - (x * d1 * d1)) / ( z * z );
	return y * ibetaDerivative( v1x / ( d2+v1x ), d1/2.0, d2/2.0 );
}


// EXPORTS //

module.exports = pdf;

},{"./ibeta_derivative.js":593,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],597:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.4 );
* // returns ~0.994
*
* y = quantile( 0.8 );
* // returns ~4.382
*/
function factory( d1, d2 ) {
	if (
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a F distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var xs;
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		xs = kernelBetaincinv( d1/2.0, d2/2.0, p, 1.0 - p );
		return d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/kernel-betaincinv":1629,"@stdlib/utils/constant-function":1933}],598:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for a F distribution.
*
* @module @stdlib/math/base/dists/f/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/f/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~9.472
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.207
*
* var myquantile = quantile.factory( 10.0, 2.0 );
*
* y = myquantile( 0.2 );
* // returns ~0.527
*
* y = myquantile( 0.8 );
* // returns ~4.382
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":597,"./quantile.js":599,"@stdlib/utils/define-read-only-property":1937}],599:[function(require,module,exports){
'use strict';

// MODULES //

var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~9.472
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.207
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, d1, d2 ) {
	var xs;
	if (
		isnan( p ) ||
		isnan( d1 ) ||
		isnan( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	xs = kernelBetaincinv( d1/2.0, d2/2.0, p, 1.0 - p );
	return d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/kernel-betaincinv":1629}],600:[function(require,module,exports){
'use strict';

/**
* F distribution skewness.
*
* @module @stdlib/math/base/dists/f/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/f/skewness' );
*
* var v = skewness( 3.0, 7.0 );
* // returns 11.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~3.207
*
* v = skewness( 8.0, 7.0 );
* // returns ~10.088
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":601}],601:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 3.0, 7.0 );
* // returns 11.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~3.207
* @example
* var v = skewness( 8.0, 7.0 );
* // returns ~10.088
* @example
* var v = skewness( 1.0, 4.0 );
* // returns NaN
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 6.0 ) {
		return NaN;
	}
	out = ( ( 2.0*d1 ) + d2 - 2.0 ) * sqrt( 8.0 * ( d2-4.0 ) );
	out /= ( d2-6.0 ) * sqrt( d1 * ( d1+d2-2.0 ) );
	return out;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/special/sqrt":1826}],602:[function(require,module,exports){
'use strict';

/**
* F distribution standard deviation.
*
* @module @stdlib/math/base/dists/f/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/f/stdev' );
*
* var v = stdev( 3.0, 5.0 );
* // returns ~3.333
*
* v = stdev( 4.0, 12.0 );
* // returns ~1.122
*
* v = stdev( 8.0, 5.0 );
* // returns ~2.764
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":603}],603:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );


// MAIN //

/**
* Returns the standard deviation of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 3.0, 5.0 );
* // returns ~3.333
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~1.122
* @example
* var v = stdev( 8.0, 5.0 );
* // returns ~2.764
* @example
* var v = stdev( 1.0, 4.0 );
* // returns NaN
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 4.0 ) {
		return NaN;
	}
	out = SQRT2 * ( d2 / ( d2-2.0 ) );
	out *= sqrt( ( d1+d2-2.0 ) / ( d1*(d2-4.0) ) );
	return out;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/special/sqrt":1826}],604:[function(require,module,exports){
'use strict';

/**
* F distribution variance.
*
* @module @stdlib/math/base/dists/f/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/f/variance' );
*
* var v = variance( 3.0, 5.0 );
* // returns ~11.111
*
* v = variance( 4.0, 12.0 );
* // returns ~1.26
*
* v = variance( 8.0, 5.0 );
* // returns ~7.639
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":605}],605:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of a F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 3.0, 5.0 );
* // returns ~11.111
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~1.26
* @example
* var v = variance( 8.0, 5.0 );
* // returns ~7.639
* @example
* var v = variance( 1.0, 4.0 );
* // returns NaN
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 4.0 ) {
		return NaN;
	}
	out = 2.0 * d2 * d2 * ( d1 + d2 - 2.0 );
	out /= d1 * pow( d2 - 2.0, 2.0 ) * ( d2 - 4.0 );
	return out;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/special/pow":1743}],606:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~0.869
*
* @example
* var y = cdf( -0.2, 1.0, 3.0, -1.0 );
* // returns ~0.024
*
* @example
* var y = cdf( 1.5, 2.0, 1.0, 1.0 );
* // returns ~0.018
*
* @example
* var y = cdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function cdf( x, alpha, s, m ) {
	var z;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( x <= m ) {
		return 0.0;
	}
	z = ( x - m ) / s;
	return exp( -pow( z, -alpha ) );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],607:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 3.0, 5.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.806
*
* y = cdf( 7.0 );
* // returns ~0.034
*/
function factory( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( -2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= m ) {
			return 0.0;
		}
		z = ( x - m ) / s;
		return exp( -pow( z, -alpha ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],608:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/frechet/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/frechet/cdf' );
*
* var y = cdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~0.698
*
* y = cdf( 0.0, 2.0, 3.0, 2.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/frechet/cdf' ).factory;
* var cdf = factory( 3.0, 3.0, 5.0 );
* var y = cdf( 10.0 );
* // returns ~0.806
*
* y = cdf( 7.0 );
* // returns ~0.034
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":606,"./factory.js":607,"@stdlib/utils/define-read-only-property":1937}],609:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/frechet/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/frechet/kurtosis' );
var mean = require( '@stdlib/math/base/dists/frechet/mean' );
var median = require( '@stdlib/math/base/dists/frechet/median' );
var mode = require( '@stdlib/math/base/dists/frechet/mode' );
var skewness = require( '@stdlib/math/base/dists/frechet/skewness' );
var stdev = require( '@stdlib/math/base/dists/frechet/stdev' );
var variance = require( '@stdlib/math/base/dists/frechet/variance' );
var cdf = require( '@stdlib/math/base/dists/frechet/cdf' );
var logcdf = require( '@stdlib/math/base/dists/frechet/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/frechet/logpdf' );
var pdf = require( '@stdlib/math/base/dists/frechet/pdf' );
var quantile = require( '@stdlib/math/base/dists/frechet/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function frechetCDF( x ) {
	return cdf( x, this.alpha, this.s, this.m );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function frechetLogCDF( x ) {
	return logcdf( x, this.alpha, this.s, this.m );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function frechetLogPDF( x ) {
	return logpdf( x, this.alpha, this.s, this.m );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function frechetPDF( x ) {
	return pdf( x, this.alpha, this.s, this.m );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function frechetQuantile( p ) {
	return quantile( p, this.alpha, this.s, this.m );
}


// MAIN //

/**
* Fréchet distribution constructor.
*
* @constructor
* @param {number} [alpha=0.0] - shape parameter
* @param {number} [s=1.0] - scale parameter
* @param {number} [m=0.0] - location parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `s` must be a positive number
* @returns {Frechet} distribution instance
*
* @example
* var frechet = new Frechet( 1.0, 1.0, 0.25 );
*
* var y = frechet.cdf( 0.8 );
* // returns ~0.162
*
* var mu = frechet.mean;
* // returns Infinity
*/
function Frechet() {
	var alpha;
	var s;
	var m;
	if ( !(this instanceof Frechet) ) {
		if ( arguments.length === 0 ) {
			return new Frechet();
		}
		return new Frechet( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		s = arguments[ 1 ];
		m = arguments[ 2 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( s ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `s` must be a number primitive. Value: `' + s + '`' );
		}
		if ( !isNumber( m ) || isnan( m ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `m` must be a number primitive. Value: `' + m + '`' );
		}
	} else {
		alpha = 1.0;
		s = 1.0;
		m = 0.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	Object.defineProperty( this, 'm', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return m;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			m = value;
		}
	});
	return this;
}

/**
* Fréchet distribution differential entropy.
*
* @name entropy
* @memberof Frechet.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.entropy;
* // returns ~2.82
*/
Object.defineProperty( Frechet.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution excess kurtosis.
*
* @name kurtosis
* @memberof Frechet.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.kurtosis;
* // returns Infinity
*/
Object.defineProperty( Frechet.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution expected value.
*
* @name mean
* @memberof Frechet.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.mean;
* // returns ~16.705
*/
Object.defineProperty( Frechet.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution median.
*
* @name median
* @memberof Frechet.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.median;
* // returns ~15.151
*/
Object.defineProperty( Frechet.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution mode.
*
* @name mode
* @memberof Frechet.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.mode;
* // returns ~13.349
*/
Object.defineProperty( Frechet.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution skewness.
*
* @name skewness
* @memberof Frechet.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.skewness;
* // returns ~5.605
*/
Object.defineProperty( Frechet.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution standard deviation.
*
* @name stdev
* @memberof Frechet.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.stdev;
* // returns ~6.245
*/
Object.defineProperty( Frechet.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.s, this.m );
	}
});

/**
* Fréchet distribution variance.
*
* @name variance
* @memberof Frechet.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.variance;
* // returns ~38.996
*/
Object.defineProperty( Frechet.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.s, this.m );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Frechet.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.cdf( 12.0 );
* // returns ~0.821
*/
setReadOnly( Frechet.prototype, 'cdf', frechetCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Frechet.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.logcdf( 12.0 );
* // returns ~-0.197
*/
setReadOnly( Frechet.prototype, 'logcdf', frechetLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Frechet.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.logpdf( 2.0 );
* // returns -Infinity
*/
setReadOnly( Frechet.prototype, 'logpdf', frechetLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Frechet.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.pdf( 5.5 );
* // returns ~0.158
*/
setReadOnly( Frechet.prototype, 'pdf', frechetPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Frechet.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.quantile( 0.5 );
* // returns ~7.804
*/
setReadOnly( Frechet.prototype, 'quantile', frechetQuantile );


// EXPORTS //

module.exports = Frechet;

},{"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/frechet/cdf":608,"@stdlib/math/base/dists/frechet/entropy":612,"@stdlib/math/base/dists/frechet/kurtosis":613,"@stdlib/math/base/dists/frechet/logcdf":617,"@stdlib/math/base/dists/frechet/logpdf":620,"@stdlib/math/base/dists/frechet/mean":622,"@stdlib/math/base/dists/frechet/median":624,"@stdlib/math/base/dists/frechet/mode":626,"@stdlib/math/base/dists/frechet/pdf":629,"@stdlib/math/base/dists/frechet/quantile":632,"@stdlib/math/base/dists/frechet/skewness":634,"@stdlib/math/base/dists/frechet/stdev":636,"@stdlib/math/base/dists/frechet/variance":638,"@stdlib/utils/define-read-only-property":1937}],610:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution constructor.
*
* @module @stdlib/math/base/dists/frechet/ctor
*
* @example
* var Frechet = require( '@stdlib/math/base/dists/frechet/ctor' );
*
* var frechet = new Frechet( 1.0, 1.0, 0.5 );
*
* var y = frechet.cdf( 0.8 );
* // returns ~0.036
*
* var mu = frechet.mean;
* // returns Infinity
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":609}],611:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );


// MAIN //

/**
* Returns the differential entropy for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} entropy
*
* @example
* var y = entropy( 1.0, 1.0, 0.0 );
* // returns ~2.154
* @example
* var y = entropy( 5.0, 2.0, 0.0 );
* // returns ~0.776
* @example
* var y = entropy( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = entropy( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = entropy( 1.0, 1.0, NaN );
* // returns NaN
*/
function entropy( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return 1.0 + ( GAMMA / alpha ) + GAMMA + ln( s / alpha );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-eulergamma":71,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],612:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution differential entropy.
*
* @module @stdlib/math/base/dists/frechet/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/frechet/entropy' );
*
* var y = entropy( 1.0, 1.0, 0.0 );
* // returns ~2.154
*
* y = entropy( 4.0, 2.0, 0.0 );
* // returns ~1.028
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":611}],613:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/frechet/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/frechet/kurtosis' );
*
* var y = kurtosis( 8.0, 2.0, 0.0 );
* // returns ~11.166
*
* y = kurtosis( 8.0, 16.0, 3.0 );
* // returns ~11.166
*
* y = kurtosis( 1.0, 1.0, -3.0 );
* // returns Infinity
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":614}],614:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the excess kurtosis for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 5.0, 2.0, 0.0 );
* // returns ~45.092
* @example
* var y = kurtosis( 5.0, 2.0, -5.0 );
* // returns ~45.092
* @example
* var y = kurtosis( 3.8, 1.0, 0.0 );
* // returns Infinity
* @example
* var y = kurtosis( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = kurtosis( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = kurtosis( 1.0, 1.0, NaN );
* // returns NaN
*/
function kurtosis( alpha, s, m ) {
	var out;
	var g1;
	var g2;
	var g3;
	var g4;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 4.0 ) {
		// Case: 0 < alpha <= 4
		return PINF;
	}
	g1 = gamma( 1.0 - ( 1.0/alpha ) );
	g2 = gamma( 1.0 - ( 2.0/alpha ) );
	g3 = gamma( 1.0 - ( 3.0/alpha ) );
	g4 = gamma( 1.0 - ( 4.0/alpha ) );
	out = ( g4 - ( 4.0*g3*g1 ) + ( 3.0*g2*g2 ) ) / pow( g2 - ( g1*g1 ), 2.0 );
	out -= 6.0;
	return out;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/pow":1743}],615:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace frechet
*/
var frechet = {};

/**
* @name cdf
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/cdf}
*/
setReadOnly( frechet, 'cdf', require( '@stdlib/math/base/dists/frechet/cdf' ) );

/**
* @name entropy
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/entropy}
*/
setReadOnly( frechet, 'entropy', require( '@stdlib/math/base/dists/frechet/entropy' ) );

/**
* @name Frechet
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/ctor}
*/
setReadOnly( frechet, 'Frechet', require( '@stdlib/math/base/dists/frechet/ctor' ) );

/**
* @name kurtosis
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/kurtosis}
*/
setReadOnly( frechet, 'kurtosis', require( '@stdlib/math/base/dists/frechet/kurtosis' ) );

/**
* @name logcdf
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/logcdf}
*/
setReadOnly( frechet, 'logcdf', require( '@stdlib/math/base/dists/frechet/logcdf' ) );

/**
* @name logpdf
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/logpdf}
*/
setReadOnly( frechet, 'logpdf', require( '@stdlib/math/base/dists/frechet/logpdf' ) );

/**
* @name mean
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/mean}
*/
setReadOnly( frechet, 'mean', require( '@stdlib/math/base/dists/frechet/mean' ) );

/**
* @name median
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/median}
*/
setReadOnly( frechet, 'median', require( '@stdlib/math/base/dists/frechet/median' ) );

/**
* @name mode
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/mode}
*/
setReadOnly( frechet, 'mode', require( '@stdlib/math/base/dists/frechet/mode' ) );

/**
* @name pdf
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/pdf}
*/
setReadOnly( frechet, 'pdf', require( '@stdlib/math/base/dists/frechet/pdf' ) );

/**
* @name quantile
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/quantile}
*/
setReadOnly( frechet, 'quantile', require( '@stdlib/math/base/dists/frechet/quantile' ) );

/**
* @name skewness
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/skewness}
*/
setReadOnly( frechet, 'skewness', require( '@stdlib/math/base/dists/frechet/skewness' ) );

/**
* @name stdev
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/stdev}
*/
setReadOnly( frechet, 'stdev', require( '@stdlib/math/base/dists/frechet/stdev' ) );

/**
* @name variance
* @memberof frechet
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/frechet/variance}
*/
setReadOnly( frechet, 'variance', require( '@stdlib/math/base/dists/frechet/variance' ) );


// EXPORTS //

module.exports = frechet;

},{"@stdlib/math/base/dists/frechet/cdf":608,"@stdlib/math/base/dists/frechet/ctor":610,"@stdlib/math/base/dists/frechet/entropy":612,"@stdlib/math/base/dists/frechet/kurtosis":613,"@stdlib/math/base/dists/frechet/logcdf":617,"@stdlib/math/base/dists/frechet/logpdf":620,"@stdlib/math/base/dists/frechet/mean":622,"@stdlib/math/base/dists/frechet/median":624,"@stdlib/math/base/dists/frechet/mode":626,"@stdlib/math/base/dists/frechet/pdf":629,"@stdlib/math/base/dists/frechet/quantile":632,"@stdlib/math/base/dists/frechet/skewness":634,"@stdlib/math/base/dists/frechet/stdev":636,"@stdlib/math/base/dists/frechet/variance":638,"@stdlib/utils/define-read-only-property":1937}],616:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 3.0, 5.0 );
*
* var y = logcdf( 10.0 );
* // returns ~-0.216
*
* y = logcdf( 7.0 );
* // returns ~-3.381
*/
function factory( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( -2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= m ) {
			return NINF;
		}
		z = ( x - m ) / s;
		return -pow( z, -alpha );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],617:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution logarithm of the cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/frechet/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/frechet/logcdf' );
*
* var y = logcdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~-0.36
*
* y = logcdf( 3.8, 2.0, 3.0, 2.0 );
* // returns ~-2.778
*
* @example
* var factory = require( '@stdlib/math/base/dists/frechet/logcdf' ).factory;
* var logcdf = factory( 3.0, 3.0, 5.0 );
* var y = logcdf( 10.0 );
* // returns ~-0.216
*
* y = logcdf( 7.0 );
* // returns ~-3.381
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":616,"./logcdf.js":618,"@stdlib/utils/define-read-only-property":1937}],618:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~-0.141
*
* @example
* var y = logcdf( -2.5, 1.0, 3.0, -3.0 );
* // returns -6.0
*
* @example
* var y = logcdf( 0.0, 2.0, 1.0, -1.0 );
* // returns -1.0
*
* @example
* var y = logcdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function logcdf( x, alpha, s, m ) {
	var z;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( x <= m ) {
		return NINF;
	}
	z = ( x - m ) / s;
	return -pow( z, -alpha );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],619:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 3.0, 3.0, 5.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-2.259
*
* y = logpdf( 7.0 );
* // returns ~-1.753
*/
function factory( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= m ) {
			return NINF;
		}
		z = ( x - m ) / s;
		return ln( alpha/s ) - ( ( 1.0+alpha ) * ln( z ) ) - pow( z, -alpha );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],620:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution logarithm of probability density function (logpdf).
*
* @module @stdlib/math/base/dists/frechet/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/frechet/logpdf' );
*
* var y = logpdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~-2.298
*
* y = logpdf( 0.0, 2.0, 3.0, 2.0 );
* // returns -Infinity
*
* @example
* var factory = require( '@stdlib/math/base/dists/frechet/logpdf' ).factory;
* var logpdf = factory( 3.0, 3.0, 5.0 );
* var y = logpdf( 10.0 );
* // returns ~-2.259
*
* y = logpdf( 7.0 );
* // returns ~-1.753
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":619,"./logpdf.js":621,"@stdlib/utils/define-read-only-property":1937}],621:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~-3.489
*
* @example
* var y = logpdf( -2.0, 1.0, 3.0, -3.0 );
* // returns ~-1.901
*
* @example
* var y = logpdf( 0.0, 2.0, 1.0, 1.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function logpdf( x, alpha, s, m ) {
	var z;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( x <= m ) {
		return NINF;
	}
	z = ( x - m ) / s;
	return ln( alpha/s ) - ( ( 1.0+alpha ) * ln( z ) ) - pow( z, -alpha );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],622:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution expected value.
*
* @module @stdlib/math/base/dists/frechet/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/frechet/mean' );
*
* var y = mean( 4.0, 2.0, 0.0 );
* // returns ~2.451
*
* y = mean( 1.0, 1.0, 0.0 );
* // returns Infinity
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":623}],623:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the expected value for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} mean
*
* @example
* var y = mean( 5.0, 2.0, 0.0 );
* // returns ~2.328
* @example
* var y = mean( 5.0, 2.0, -4.0 );
* // returns ~-1.672
* @example
* var y = mean( 1.0, 1.0, 0.0 );
* // returns Infinity
* @example
* var y = mean( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = mean( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = mean( 1.0, 1.0, NaN );
* // returns NaN
*/
function mean( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 1.0 ) {
		// Case: 0 < alpha <= 1
		return PINF;
	}
	return m + ( s * gamma( 1.0 - (1.0/alpha) ) );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525}],624:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution median.
*
* @module @stdlib/math/base/dists/frechet/median
*
* @example
* var median = require( '@stdlib/math/base/dists/frechet/median' );
*
* var y = median( 4.0, 2.0, 0.0 );
* // returns ~2.192
*
* y = median( 1.0, 1.0, -3.0 );
* // returns ~-1.557
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":625}],625:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Returns the median for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} median
*
* @example
* var y = median( 5.0, 2.0, 0.0 );
* // returns ~2.152
* @example
* var y = median( 5.0, 2.0, -5.0 );
* // returns ~-2.848
* @example
* var y = median( 1.0, 1.0, 0.0 );
* // returns ~1.443
* @example
* var y = median( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = median( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = median( 1.0, 1.0, NaN );
* // returns NaN
*/
function median( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return m + ( s * pow( LN2, -1.0/alpha ) );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],626:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution mode.
*
* @module @stdlib/math/base/dists/frechet/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/frechet/mode' );
*
* var y = mode( 4.0, 2.0, 0.0 );
* // returns ~1.891
*
* y = mode( 1.0, 1.0, -3.0 );
* // returns ~-2.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":627}],627:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the mode for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} mode
*
* @example
* var y = mode( 5.0, 2.0, 0.0 );
* // returns ~1.928
* @example
* var y = mode( 5.0, 2.0, -5.0 );
* // returns ~-3.072
* @example
* var y = mode( 1.0, 1.0, 0.0 );
* // returns ~0.5
* @example
* var y = mode( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = mode( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = mode( 1.0, 1.0, NaN );
* // returns NaN
*/
function mode( alpha, s, m ) {
	var ainv;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	ainv = 1.0 / alpha;
	return m + ( s * pow( 1.0+ainv, -ainv ) );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],628:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var ldfrechet = require( '@stdlib/math/base/dists/frechet/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 3.0, 5.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.806
*
* y = pdf( 7.0 );
* // returns ~0.034
*/
function factory( alpha, s, m ) {
	var logpdf;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return constantFunction( NaN );
	}
	logpdf = ldfrechet( alpha, s, m );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return exp( logpdf( x, alpha, s, m ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/frechet/logpdf":620,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],629:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/frechet/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/frechet/pdf' );
*
* var y = pdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~0.698
*
* y = pdf( 0.0, 2.0, 3.0, 2.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/math/base/dists/frechet/pdf' ).factory;
* var pdf = factory( 3.0, 3.0, 5.0 );
* var y = pdf( 10.0 );
* // returns ~0.806
*
* y = pdf( 7.0 );
* // returns ~0.034
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":628,"./pdf.js":630,"@stdlib/utils/define-read-only-property":1937}],630:[function(require,module,exports){
'use strict';

// MODULES //

var logpdf = require( '@stdlib/math/base/dists/frechet/logpdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~0.965
*
* @example
* var y = pdf( -2.0, 1.0, 3.0, -1.0 );
* // returns ~0.143
*
* @example
* var y = pdf( 0.0, 2.0, 1.0, 1.0 );
* // returns ~0.368
*
* @example
* var y = pdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function pdf( x, alpha, s, m ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return exp( logpdf( x, alpha, s, m ) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/frechet/logpdf":620,"@stdlib/math/base/special/exp":1456}],631:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 3.0, 3.0, 5.0 );
*
* var y = quantile( 0.8 );
* // returns ~9.946
*
* y = quantile( 0.2 );
* // returns ~7.56
*/
function factory( alpha, s, m ) {
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Fréchet distribution.
	*
	* @private
	* @param {number} p - input probability
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( -2.0 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return m + ( s * ( pow( -ln( p ), -1.0/alpha ) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],632:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution quantile function.
*
* @module @stdlib/math/base/dists/frechet/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/frechet/quantile' );
*
* var y = quantile( 0.3, 2.0, 3.0, 5.0 );
* // returns ~7.734
*
* y = quantile( 0.8, 2.0, 3.0, 2.0 );
* // returns ~8.351
*
* @example
* var factory = require( '@stdlib/math/base/dists/frechet/quantile' ).factory;
* var quantile = factory( 3.0, 3.0, 5.0 );
* var y = quantile( 0.1 );
* // returns ~7.272
*
* y = quantile( 0.8 );
* // returns ~9.946
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":631,"./quantile.js":633,"@stdlib/utils/define-read-only-property":1937}],633:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the quantile function for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a probability `p`.
*
* @param {number} p - input probability
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0, 3.0, 2.0 );
* // returns ~5.603
* @example
* var y = quantile( 0.2, 1.0, 3.0, -1.0 );
* // returns ~0.864
* @example
* var y = quantile( 0.3, 2.0, 1.0, 1.0 );
* // returns ~1.911
* @example
* var y = quantile( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, NaN, 1.0, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, 2.0, NaN, -1.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, 2.0, 1.0, NaN );
* // returns NaN
* @example
* var y = quantile( 0.1, -1.0, 1.0, 0.0 );
* // returns NaN
* @example
* var y = quantile( 0.1, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function quantile( p, alpha, s, m ) {
	if (
		isnan( p ) ||
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		p < 0.0 ||
		p > 1.0 ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return m + ( s * ( pow( -ln( p ), -1.0/alpha ) ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],634:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution skewness.
*
* @module @stdlib/math/base/dists/frechet/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/frechet/skewness' );
*
* var y = skewness( 4.0, 2.0, 0.0 );
* // returns ~1.083
*
* y = skewness( 1.0, 1.0, -3.0 );
* // returns Infinity
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":635}],635:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the skewness for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} skewness
*
* @example
* var y = skewness( 5.0, 2.0, 0.0 );
* // returns ~0.535
* @example
* var y = skewness( 5.0, 2.0, -5.0 );
* // returns ~0.535
* @example
* var y = skewness( 1.0, 1.0, 0.0 );
* // returns Infinity
* @example
* var y = skewness( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = skewness( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = skewness( 1.0, 1.0, NaN );
* // returns NaN
*/
function skewness( alpha, s, m ) {
	var g1s;
	var g1;
	var g2;
	var g3;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 3.0 ) {
		// Case: 0 < alpha <= 3
		return PINF;
	}
	g1 = gamma( 1.0 - ( 1.0/alpha ) );
	g1s = g1*g1;
	g2 = gamma( 1.0 - ( 2.0/alpha ) );
	g3 = gamma( 1.0 - ( 3.0/alpha ) );
	return ( g3 - ( 3.0*g2*g1 ) + ( 2.0*g1s*g1 ) ) / pow( g2 - g1s, 1.5 );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/pow":1743}],636:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution standard deviation.
*
* @module @stdlib/math/base/dists/frechet/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/frechet/stdev' );
*
* var y = stdev( 4.0, 2.0, 0.0 );
* // returns ~1.041
*
* y = stdev( 1.0, 1.0, -3.0 );
* // returns Infinity
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":637}],637:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 5.0, 2.0, 0.0 );
* // returns ~0.535
* @example
* var y = stdev( 5.0, 2.0, -5.0 );
* // returns ~0.535
* @example
* var y = stdev( 1.0, 1.0, 0.0 );
* // returns Infinity
* @example
* var y = stdev( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = stdev( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = stdev( 1.0, 1.0, NaN );
* // returns NaN
*/
function stdev( alpha, s, m ) {
	var g1;
	var g2;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 2.0 ) {
		// Case: 0 < alpha <= 2
		return PINF;
	}
	g1 = gamma( 1.0 - ( 1.0/alpha ) );
	g2 = gamma( 1.0 - ( 2.0/alpha ) );
	return s * sqrt( g2 - ( g1*g1 ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/sqrt":1826}],638:[function(require,module,exports){
'use strict';

/**
* Fréchet distribution variance.
*
* @module @stdlib/math/base/dists/frechet/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/frechet/variance' );
*
* var y = variance( 4.0, 2.0, 0.0 );
* // returns ~1.083
*
* y = variance( 1.0, 1.0, -3.0 );
* // returns Infinity
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":639}],639:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the variance for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 5.0, 2.0, 0.0 );
* // returns ~0.535
* @example
* var y = variance( 5.0, 2.0, -5.0 );
* // returns ~0.535
* @example
* var y = variance( 1.0, 1.0, 0.0 );
* // returns Infinity
* @example
* var y = variance( NaN, 1.0, 0.0 );
* // returns NaN
* @example
* var y = variance( 1.0, NaN, 0.0 );
* // returns NaN
* @example
* var y = variance( 1.0, 1.0, NaN );
* // returns NaN
*/
function variance( alpha, s, m ) {
	var g1;
	var g2;
	if (
		isnan( alpha ) ||
		isnan( s ) ||
		isnan( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 2.0 ) {
		// Case: 0 < alpha <= 2
		return PINF;
	}
	g1 = gamma( 1.0 - ( 1.0/alpha ) );
	g2 = gamma( 1.0 - ( 2.0/alpha ) );
	return ( s*s ) * ( g2 - ( g1*g1 ) );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525}],640:[function(require,module,exports){
'use strict';

// MODULES //

var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
*
* @example
* var y = cdf( 2.0, 3.0, 1.0 );
* // returns ~0.323
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( alpha === 0.0 ) {
		return x <= 0 ? 0.0 : 1.0;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	return gammainc( x * beta, alpha );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammainc":1541}],641:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/cdf' ).factory;
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.1 );
* var y = cdf( 12.0 );
* // returns ~0.879
* y = cdf( 8.0 );
* // returns ~0.794
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	if ( alpha === 0.0 ) {
		return degenerate( 0.0 );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		return gammainc( x * beta, alpha );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/cdf":451,"@stdlib/math/base/special/gammainc":1541,"@stdlib/utils/constant-function":1933}],642:[function(require,module,exports){
'use strict';

/**
* Gamma distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/gamma/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/gamma/cdf' );
*
* var y = cdf( 2.0, 8.0, 3.0 );
* // returns ~0.256
*
* y = cdf( 0.0, 1.0, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2.0, 0.5 );
* y = mycdf( 6.0 );
* // returns ~0.801
*
* y = mycdf( 2.0 );
* // returns ~0.264
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":640,"./factory.js":641,"@stdlib/utils/define-read-only-property":1937}],643:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/gamma/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/gamma/kurtosis' );
var mean = require( '@stdlib/math/base/dists/gamma/mean' );
var mode = require( '@stdlib/math/base/dists/gamma/mode' );
var quantile = require( '@stdlib/math/base/dists/gamma/quantile' );
var skewness = require( '@stdlib/math/base/dists/gamma/skewness' );
var stdev = require( '@stdlib/math/base/dists/gamma/stdev' );
var variance = require( '@stdlib/math/base/dists/gamma/variance' );
var cdf = require( '@stdlib/math/base/dists/gamma/cdf' );
var logpdf = require( '@stdlib/math/base/dists/gamma/logpdf' );
var mgf = require( '@stdlib/math/base/dists/gamma/mgf' );
var pdf = require( '@stdlib/math/base/dists/gamma/pdf' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function gammaCDF( x ) {
	return cdf( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function gammaLogPDF( x ) {
	return logpdf( x, this.alpha, this.beta );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function gammaMGF( t ) {
	return mgf( t, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function gammaPDF( x ) {
	return pdf( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function gammaQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
}


// MAIN //

/**
* Gamma distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - rate parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Gamma} distribution instance
*
* @example
* var gamma = new Gamma( 1.0, 1.0 );
*
* var y = gamma.cdf( 0.8 );
* // returns ~0.551
*
* var mode = gamma.mode;
* // returns 0.0
*/
function Gamma() {
	var alpha;
	var beta;
	if ( !(this instanceof Gamma) ) {
		if ( arguments.length === 0 ) {
			return new Gamma();
		}
		return new Gamma( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Gamma distribution differential entropy.
*
* @name entropy
* @memberof Gamma.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.entropy;
* // returns ~-0.462
*/
Object.defineProperty( Gamma.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.beta );
	}
});

/**
* Gamma distribution excess kurtosis.
*
* @name kurtosis
* @memberof Gamma.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.kurtosis;
* // returns 1.5
*/
Object.defineProperty( Gamma.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Gamma distribution expected value.
*
* @name mean
* @memberof Gamma.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.mean;
* // returns ~0.333
*/
Object.defineProperty( Gamma.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Gamma distribution mode.
*
* @name mode
* @memberof Gamma.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.mode;
* // returns 0.25
*/
Object.defineProperty( Gamma.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Gamma distribution skewness.
*
* @name skewness
* @memberof Gamma.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.skewness;
* // returns 1.0
*/
Object.defineProperty( Gamma.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Gamma distribution standard deviation.
*
* @name stdev
* @memberof Gamma.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.stdev;
* // returns ~0.028
*/
Object.defineProperty( Gamma.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.beta );
	}
});

/**
* Gamma distribution variance.
*
* @name variance
* @memberof Gamma.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.variance;
* // returns ~0.028
*/
Object.defineProperty( Gamma.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Gamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.cdf( 0.5 );
* // returns ~0.594
*/
setReadOnly( Gamma.prototype, 'cdf', gammaCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Gamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.logpdf( 0.8 );
* // returns ~-0.651
*/
setReadOnly( Gamma.prototype, 'logpdf', gammaLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Gamma.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.mgf( 0.5 );
* // returns ~1.306
*/
setReadOnly( Gamma.prototype, 'mgf', gammaMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Gamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.pdf( 0.8 );
* // returns ~0.522
*/
setReadOnly( Gamma.prototype, 'pdf', gammaPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Gamma.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.quantile( 0.5 );
* // returns ~0.42
*/
setReadOnly( Gamma.prototype, 'quantile', gammaQuantile );


// EXPORTS //

module.exports = Gamma;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/gamma/cdf":642,"@stdlib/math/base/dists/gamma/entropy":646,"@stdlib/math/base/dists/gamma/kurtosis":647,"@stdlib/math/base/dists/gamma/logpdf":652,"@stdlib/math/base/dists/gamma/mean":655,"@stdlib/math/base/dists/gamma/mgf":658,"@stdlib/math/base/dists/gamma/mode":660,"@stdlib/math/base/dists/gamma/pdf":664,"@stdlib/math/base/dists/gamma/quantile":668,"@stdlib/math/base/dists/gamma/skewness":670,"@stdlib/math/base/dists/gamma/stdev":672,"@stdlib/math/base/dists/gamma/variance":674,"@stdlib/utils/define-read-only-property":1937}],644:[function(require,module,exports){
'use strict';

/**
* Gamma distribution constructor.
*
* @module @stdlib/math/base/dists/gamma/ctor
*
* @example
* var Gamma = require( '@stdlib/math/base/dists/gamma/ctor' );
*
* var gamma = new Gamma( 1.0, 1.0 );
*
* var y = gamma.cdf( 0.8 );
* // returns ~0.551
*
* var mode = gamma.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":643}],645:[function(require,module,exports){
'use strict';

// MODULES //

var digamma = require( '@stdlib/math/base/special/digamma' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~-0.462
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~1.723
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = alpha - ln( beta );
	out += gammaln( alpha );
	out += ( 1.0-alpha ) * digamma( alpha );
	return out;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679}],646:[function(require,module,exports){
'use strict';

/**
* Gamma distribution differential entropy.
*
* @module @stdlib/math/base/dists/gamma/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/gamma/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~-0.462
*
* v = entropy( 8.0, 2.0 );
* // returns ~1.723
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":645}],647:[function(require,module,exports){
'use strict';

/**
* Gamma distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/gamma/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/gamma/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4.0, 12.0 );
* // returns 1.5
*
* v = kurtosis( 8.0, 2.0 );
* // returns 0.75
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":648}],648:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns 1.5
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns 0.75
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 6.0 / alpha;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],649:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace gamma
*/
var gamma = {};

/**
* @name cdf
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/cdf}
*/
setReadOnly( gamma, 'cdf', require( '@stdlib/math/base/dists/gamma/cdf' ) );

/**
* @name entropy
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/entropy}
*/
setReadOnly( gamma, 'entropy', require( '@stdlib/math/base/dists/gamma/entropy' ) );

/**
* @name Gamma
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/ctor}
*/
setReadOnly( gamma, 'Gamma', require( '@stdlib/math/base/dists/gamma/ctor' ) );

/**
* @name kurtosis
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/kurtosis}
*/
setReadOnly( gamma, 'kurtosis', require( '@stdlib/math/base/dists/gamma/kurtosis' ) );

/**
* @name logpdf
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/logpdf}
*/
setReadOnly( gamma, 'logpdf', require( '@stdlib/math/base/dists/gamma/logpdf' ) );

/**
* @name mean
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/mean}
*/
setReadOnly( gamma, 'mean', require( '@stdlib/math/base/dists/gamma/mean' ) );

/**
* @name mgf
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/mgf}
*/
setReadOnly( gamma, 'mgf', require( '@stdlib/math/base/dists/gamma/mgf' ) );

/**
* @name mode
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/mode}
*/
setReadOnly( gamma, 'mode', require( '@stdlib/math/base/dists/gamma/mode' ) );

/**
* @name pdf
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/pdf}
*/
setReadOnly( gamma, 'pdf', require( '@stdlib/math/base/dists/gamma/pdf' ) );

/**
* @name quantile
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/quantile}
*/
setReadOnly( gamma, 'quantile', require( '@stdlib/math/base/dists/gamma/quantile' ) );

/**
* @name skewness
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/skewness}
*/
setReadOnly( gamma, 'skewness', require( '@stdlib/math/base/dists/gamma/skewness' ) );

/**
* @name stdev
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/stdev}
*/
setReadOnly( gamma, 'stdev', require( '@stdlib/math/base/dists/gamma/stdev' ) );

/**
* @name variance
* @memberof gamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gamma/variance}
*/
setReadOnly( gamma, 'variance', require( '@stdlib/math/base/dists/gamma/variance' ) );


// EXPORTS //

module.exports = gamma;

},{"@stdlib/math/base/dists/gamma/cdf":642,"@stdlib/math/base/dists/gamma/ctor":644,"@stdlib/math/base/dists/gamma/entropy":646,"@stdlib/math/base/dists/gamma/kurtosis":647,"@stdlib/math/base/dists/gamma/logpdf":652,"@stdlib/math/base/dists/gamma/mean":655,"@stdlib/math/base/dists/gamma/mgf":658,"@stdlib/math/base/dists/gamma/mode":660,"@stdlib/math/base/dists/gamma/pdf":664,"@stdlib/math/base/dists/gamma/quantile":668,"@stdlib/math/base/dists/gamma/skewness":670,"@stdlib/math/base/dists/gamma/stdev":672,"@stdlib/math/base/dists/gamma/variance":674,"@stdlib/utils/define-read-only-property":1937}],650:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var gammaDeriv = require( './gamma_p_derivative.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 3.0, 1.5 );
*
* var y = logpdf( 1.0 );
* // returns ~-0.977
*
* y = logpdf( 4.0 );
* // returns ~-2.704
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	if ( alpha === 0.0 ) {
		return degenerate( 0.0 );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return NINF;
		}
		return ln( gammaDeriv( alpha, x * beta ) ) + ln( beta );
	}
}


// EXPORTS //

module.exports = factory;

},{"./gamma_p_derivative.js":651,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logpdf":457,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],651:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_58_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14
* Copyright Christopher Kormanyos 2013-14
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
var regularisedGammaPrefix = require( './regularised_gamma_prefix.js' );


// MAIN //

/**
* Calculates the partial derivative with respect to x of the incomplete gamma function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {NonNegativeNumber} x - function parameter
* @returns {number} function value
*/
function gammaPDerivative( a, x ) {
	var f1;
	if ( a <= 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( a > 1.0 ) {
			return 0.0;
		}
		return a === 1.0 ? 1.0 : PINF;
	}
	f1 = regularisedGammaPrefix( a, x );
	if ( x < 1.0 && ( FLOAT64_MAX * x < f1 ) ) {
		return PINF;
	}
	if ( f1 === 0.0 ) {
		// Underflow in calculation, use logs instead:
		f1 = (a * ln( x )) - x - gammaln( a ) - ln( x );
		f1 = exp( f1 );
	} else {
		f1 /= x;
	}
	return f1;
}


// EXPORTS //

module.exports = gammaPDerivative;

},{"./regularised_gamma_prefix.js":654,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679}],652:[function(require,module,exports){
'use strict';

/**
* Gamma distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/gamma/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/gamma/logpdf' );
*
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.919
*
* @example
* var factory = require( '@stdlib/math/base/dists/gamma/logpdf' ).factory;
*
* var logpdf = factory( 6.0, 7.0 );
* var y = logpdf( 2.0 );
* // returns ~-3.646
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":650,"./logpdf.js":653,"@stdlib/utils/define-read-only-property":1937}],653:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var gammaDeriv = require( './gamma_p_derivative.js' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.919
*
* @example
* var y = logpdf( 0.1, 1.0, 1.0 );
* // returns ~-0.1
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.6, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative shape parameter:
* var y = logpdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = logpdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function logpdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x === PINF ) {
		return NINF;
	}
	if ( alpha === 0.0 ) {
		// Point mass at 0...
		return x === 0.0 ? PINF : NINF;
	}
	return ln( gammaDeriv( alpha, x * beta ) ) + ln( beta );
}


// EXPORTS //

module.exports = logpdf;

},{"./gamma_p_derivative.js":651,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],654:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var lanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
var G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
var E = require( '@stdlib/constants/math/float64-e' );


// MAIN //

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/
function regularisedGammaPrefix( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + G - 0.5;
	d = ( (z - a) - G + 0.5 ) / agh;
	if ( a < 1.0 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= MIN_LN ) {
			// Use logs, so should be free of cancellation errors:
			return exp( ( a * ln(z) ) - z - gammaln( a ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return pow( z, a ) * exp( -z ) / gamma( a );
	}
	else if ( abs(d*d*a) <= 100.0 && a > 150.0 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );
		prefix = exp( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * ln(z / agh);
		amz = a - z;
		if (
			min(alz, amz) <= MIN_LN ||
			max(alz, amz) >= MAX_LN
		) {
			amza = amz / a;
			if (
				min(alz, amz)/2.0 > MIN_LN &&
				max(alz, amz)/2.0 < MAX_LN
			) {
				// Compute square root of the result and then square it:
				sq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );
				prefix = sq * sq;
			}
			else if (
				min(alz, amz)/4.0 > MIN_LN &&
				max(alz, amz)/4.0 < MAX_LN &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > MIN_LN &&
				amza < MAX_LN
			) {
				prefix = pow( (z * exp(amza)) / agh, a );
			}
			else {
				prefix = exp( alz + amz );
			}
		}
		else
		{
			prefix = pow( z / agh, a ) * exp( amz );
		}
	}
	prefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );
	return prefix;
}


// EXPORTS //

module.exports = regularisedGammaPrefix;

},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],655:[function(require,module,exports){
'use strict';

/**
* Gamma distribution expected value.
*
* @module @stdlib/math/base/dists/gamma/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/gamma/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~0.333
*
* v = mean( 8.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":656}],656:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.333
* @example
* var v = mean( 8.0, 2.0 );
* // returns 4.0
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / beta;
}


// EXPORTS //

module.exports = mean;

},{}],657:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a gamma distribution with shape `alpha` and rate `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 3.0, 1.5 );
*
* var y = mgf( 1.0 );
* // returns ~26.999
*
* y = mgf( 0.5 );
* // returns ~3.375
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a gamma distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var base;
		if ( t >= beta ) {
			return NaN;
		}
		base = 1.0 - (t / beta);
		return pow( base, -alpha );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],658:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) of a gamma distribution.
*
* @module @stdlib/math/base/dists/gamma/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/gamma/mgf' );
*
* var y = mgf( 0.5, 0.5, 1.0 );
* // returns ~1.414
*
* y = mgf( 0.1, 1.0, 1.0 );
* // returns ~1.111
*
* y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.198
*
* var mymgf = mgf.factory( 3.0, 1.5 );
*
* y = mymgf( 1.0 );
* // returns ~26.999
*
* y = mymgf( 0.5 );
* // returns ~3.375
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":657,"./mgf.js":659,"@stdlib/utils/define-read-only-property":1937}],659:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a gamma distribution.
*
* @param {number} t - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.5, 1.0 );
* // returns ~1.414
*
* @example
* var y = mgf( 0.1, 1.0, 1.0 );
* // returns ~1.111
*
* @example
* var y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.198
*
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 4.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, -0.5, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function mgf( t, alpha, beta ) {
	var base;
	if (
		isnan( t ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0 ||
		t >= beta
	) {
		return NaN;
	}
	base = 1.0 - (t / beta);
	return pow( base, -alpha );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],660:[function(require,module,exports){
'use strict';

/**
* Gamma distribution mode.
*
* @module @stdlib/math/base/dists/gamma/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/gamma/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns 0.25
*
* v = mode( 8.0, 2.0 );
* // returns 3.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":661}],661:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns 0.25
* @example
* var v = mode( 8.0, 2.0 );
* // returns 3.5
* @example
* var v = mode( 0.5, 2.0 );
* // returns NaN
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if ( alpha < 1.0 || beta <= 0.0 ) {
		return NaN;
	}
	return ( alpha-1.0 ) / beta;
}


// EXPORTS //

module.exports = mode;

},{}],662:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var gammaDeriv = require( './gamma_p_derivative.js' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 1.5 );
*
* var y = pdf( 1.0 );
* // returns ~0.377
*
* y = pdf( 4.0 );
* // returns ~0.067
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	if ( alpha === 0.0 ) {
		return degenerate( 0.0 );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return 0.0;
		}
		return gammaDeriv( alpha, x * beta ) * beta;
	}
}


// EXPORTS //

module.exports = factory;

},{"./gamma_p_derivative.js":663,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/pdf":466,"@stdlib/utils/constant-function":1933}],663:[function(require,module,exports){
arguments[4][651][0].apply(exports,arguments)
},{"./regularised_gamma_prefix.js":666,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"dup":651}],664:[function(require,module,exports){
'use strict';

/**
* Gamma distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/gamma/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/gamma/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.054
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 2.0 );
* // returns ~0.026
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":662,"./pdf.js":665,"@stdlib/utils/define-read-only-property":1937}],665:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var gammaDeriv = require( './gamma_p_derivative.js' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.054
*
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.904
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.6, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative shape parameter:
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x === PINF ) {
		return 0.0;
	}
	if ( alpha === 0.0 ) {
		// Point mass at 0...
		return x === 0.0 ? PINF : 0.0;
	}
	return gammaDeriv( alpha, x * beta ) * beta;
}


// EXPORTS //

module.exports = pdf;

},{"./gamma_p_derivative.js":663,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],666:[function(require,module,exports){
arguments[4][654][0].apply(exports,arguments)
},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"dup":654}],667:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/quantile' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~4.351
*
* y = quantile( 0.8 );
* // returns ~7.289
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	if ( alpha === 0.0 ) {
		return degenerate( 0.0 );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a gamma distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return ( 1.0 / beta ) * gammaincinv( p, alpha );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/quantile":472,"@stdlib/math/base/special/gammaincinv":1566,"@stdlib/utils/constant-function":1933}],668:[function(require,module,exports){
'use strict';

/**
* Gamma distribution quantile function.
*
* @module @stdlib/math/base/dists/gamma/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/gamma/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
*
* var myquantile = quantile.factory( 2.0, 2.0 );
* y = myquantile( 0.8 );
* // returns ~1.497
*
* y = myquantile( 0.4 );
* // returns ~0.688
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":667,"./quantile.js":669,"@stdlib/utils/define-read-only-property":1937}],669:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );


// MAIN //

/**
* Evaluates the quantile function for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.994
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.836
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		isnan( p ) ||
		alpha < 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( alpha === 0.0 ) {
		return 0.0;
	}
	return ( 1.0 / beta ) * gammaincinv( p, alpha );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammaincinv":1566}],670:[function(require,module,exports){
'use strict';

/**
* Gamma distribution skewness.
*
* @module @stdlib/math/base/dists/gamma/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/gamma/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
*
* v = skewness( 4.0, 12.0 );
* // returns 1.0
*
* v = skewness( 8.0, 2.0 );
* // returns ~0.707
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":671}],671:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 1.0
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~0.707
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 2.0 / sqrt( alpha );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],672:[function(require,module,exports){
'use strict';

/**
* Gamma distribution standard deviation.
*
* @module @stdlib/math/base/dists/gamma/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/gamma/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.167
*
* v = stdev( 8.0, 2.0 );
* // returns ~1.414
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":673}],673:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.167
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~1.414
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return sqrt( alpha ) / beta;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1826}],674:[function(require,module,exports){
'use strict';

/**
* Gamma distribution variance.
*
* @module @stdlib/math/base/dists/gamma/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/gamma/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns 1.0
*
* v = variance( 4.0, 12.0 );
* // returns ~0.028
*
* v = variance( 8.0, 2.0 );
* // returns 2.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":675}],675:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the variance of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.028
* @example
* var v = variance( 8.0, 2.0 );
* // returns 2.0
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / ( beta*beta );
}


// EXPORTS //

module.exports = variance;

},{}],676:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.5 );
* // returns 0.875
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.271
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Invalid probability
* var y = cdf( 2.0, 1.4 );
* // returns NaN
*/
function cdf( x, p ) {
	if (
		isnan( x ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	x = floor( x );
	return 1.0 - pow( 1.0 - p, x + 1.0 );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/pow":1743}],677:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns 0.9375
*
* y = cdf( 1.0 );
* // returns 0.75
*/
function factory( p ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		x = floor( x );
		return 1.0 - pow( 1.0 - p, x + 1.0 );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],678:[function(require,module,exports){
'use strict';

/**
* Geometric distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/geometric/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/geometric/cdf' );
*
* var y = cdf( 2.0, 0.5 );
* // returns 0.875
*
* y = cdf( 2.0, 0.1 );
* // returns ~0.271
*
* var mycdf = cdf.factory( 0.5 );
* y = mycdf( 3.0 );
* // returns 0.9375
*
* y = mycdf( 1.0 );
* // returns 0.75
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":676,"./factory.js":677,"@stdlib/utils/define-read-only-property":1937}],679:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/geometric/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/geometric/kurtosis' );
var mean = require( '@stdlib/math/base/dists/geometric/mean' );
var median = require( '@stdlib/math/base/dists/geometric/median' );
var mode = require( '@stdlib/math/base/dists/geometric/mode' );
var skewness = require( '@stdlib/math/base/dists/geometric/skewness' );
var stdev = require( '@stdlib/math/base/dists/geometric/stdev' );
var variance = require( '@stdlib/math/base/dists/geometric/variance' );
var cdf = require( '@stdlib/math/base/dists/geometric/cdf' );
var logcdf = require( '@stdlib/math/base/dists/geometric/logcdf' );
var logpmf = require( '@stdlib/math/base/dists/geometric/logpmf' );
var mgf = require( '@stdlib/math/base/dists/geometric/mgf' );
var pmf = require( '@stdlib/math/base/dists/geometric/pmf' );
var quantile = require( '@stdlib/math/base/dists/geometric/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function geometricCDF( x ) {
	return cdf( x, this.p );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function geometricLogCDF( x ) {
	return logcdf( x, this.p );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function geometricLogPMF( x ) {
	return logpmf( x, this.p );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function geometricMGF( t ) {
	return mgf( t, this.p );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function geometricPMF( x ) {
	return pmf( x, this.p );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function geometricQuantile( p ) {
	return quantile( p, this.p );
}


// MAIN //

/**
* Geometric distribution constructor.
*
* @constructor
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `p` must be a probability
* @returns {Geometric} distribution instance
*
* @example
* var geometric = new Geometric();
*
* var y = geometric.cdf( 1.8 );
* // returns 0.75
*
* var mode = geometric.mode;
* // returns 0.0
*/
function Geometric() {
	var p;
	if ( !(this instanceof Geometric) ) {
		if ( arguments.length === 0 ) {
			return new Geometric();
		}
		return new Geometric( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		p = arguments[ 0 ];
		if ( !isProbability( p ) ) {
			throw new TypeError( 'invalid input argument. Mean parameter `p` must be a probability. Value: `' + p + '`' );
		}
	} else {
		p = 0.5;
	}
	Object.defineProperty( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !isProbability( value ) ) {
				throw new TypeError( 'invalid value. Must be a probability. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
}

/**
* Geometric distribution differential entropy.
*
* @name entropy
* @memberof Geometric.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.entropy;
* // returns ~1.683
*/
Object.defineProperty( Geometric.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.p );
	}
});

/**
* Geometric distribution excess kurtosis.
*
* @name kurtosis
* @memberof Geometric.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.kurtosis;
* // returns ~6.267
*/
Object.defineProperty( Geometric.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.p );
	}
});

/**
* Geometric distribution expected value.
*
* @name mean
* @memberof Geometric.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.mean;
* // returns ~1.5
*/
Object.defineProperty( Geometric.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.p );
	}
});

/**
* Geometric distribution median.
*
* @name median
* @memberof Geometric.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.median;
* // returns 1.0
*/
Object.defineProperty( Geometric.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.p );
	}
});

/**
* Geometric distribution mode.
*
* @name mode
* @memberof Geometric.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.mode;
* // returns 0.0
*/
Object.defineProperty( Geometric.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.p );
	}
});

/**
* Geometric distribution skewness.
*
* @name skewness
* @memberof Geometric.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.skewness;
* // returns ~2.066
*/
Object.defineProperty( Geometric.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.p );
	}
});

/**
* Geometric distribution standard deviation.
*
* @name stdev
* @memberof Geometric.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.stdev;
* // returns ~1.936
*/
Object.defineProperty( Geometric.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.p );
	}
});

/**
* Geometric distribution variance.
*
* @name variance
* @memberof Geometric.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.variance;
* // returns ~3.75
*/
Object.defineProperty( Geometric.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.p );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.cdf( 1.5 );
* // returns ~0.36
*/
setReadOnly( Geometric.prototype, 'cdf', geometricCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.logcdf( 1.5 );
* // returns ~-1.022
*/
setReadOnly( Geometric.prototype, 'logcdf', geometricLogCDF );

/**
* Evaluates the natural logarithm of the probability mass function (logPMF).
*
* @name logpdf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.logpmf( 2.0 );
* // returns ~-2.056
*/
setReadOnly( Geometric.prototype, 'logpmf', geometricLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.mgf( 0.1 );
* // returns ~1.908
*/
setReadOnly( Geometric.prototype, 'mgf', geometricMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.pmf( 2.0 );
* // returns ~0.128
*
* v = geometric.pmf( 0.8 );
* // returns 0.0
*/
setReadOnly( Geometric.prototype, 'pmf', geometricPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Geometric.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Geometric.prototype, 'quantile', geometricQuantile );


// EXPORTS //

module.exports = Geometric;

},{"@stdlib/assert/is-probability":56,"@stdlib/math/base/dists/geometric/cdf":678,"@stdlib/math/base/dists/geometric/entropy":682,"@stdlib/math/base/dists/geometric/kurtosis":683,"@stdlib/math/base/dists/geometric/logcdf":687,"@stdlib/math/base/dists/geometric/logpmf":690,"@stdlib/math/base/dists/geometric/mean":692,"@stdlib/math/base/dists/geometric/median":694,"@stdlib/math/base/dists/geometric/mgf":697,"@stdlib/math/base/dists/geometric/mode":699,"@stdlib/math/base/dists/geometric/pmf":702,"@stdlib/math/base/dists/geometric/quantile":705,"@stdlib/math/base/dists/geometric/skewness":707,"@stdlib/math/base/dists/geometric/stdev":709,"@stdlib/math/base/dists/geometric/variance":711,"@stdlib/utils/define-read-only-property":1937}],680:[function(require,module,exports){
'use strict';

/**
* Geometric distribution constructor.
*
* @module @stdlib/math/base/dists/geometric/ctor
*
* @example
* var Geometric = require( '@stdlib/math/base/dists/geometric/ctor' );
*
* var geometric = new Geometric( 0.3 );
*
* var y = geometric.cdf( 3.0 );
* // returns ~0.76
*
* var mode = geometric.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":679}],681:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the entropy of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 0.1 );
* // returns ~3.251
* @example
* var v = entropy( 0.5 );
* // returns ~1.386
* @example
* var v = entropy( 0.9 );
* // returns ~0.361
* @example
* var v = entropy( 1.1 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( p ) {
	var q;
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	q = 1.0 - p;
	return ( -( p*ln(p) ) - ( q*ln(q) ) ) / p;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],682:[function(require,module,exports){
'use strict';

/**
* Geometric distribution entropy.
*
* @module @stdlib/math/base/dists/geometric/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/geometric/entropy' );
*
* var v = entropy( 0.1 );
* // returns ~3.251
*
* v = entropy( 0.5 );
* // returns ~1.386
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":681}],683:[function(require,module,exports){
'use strict';

/**
* Geometric distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/geometric/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/geometric/kurtosis' );
*
* var v = kurtosis( 0.1 );
* // returns ~6.011
*
* v = kurtosis( 0.5 );
* // returns 6.5
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":684}],684:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 0.1 );
* // returns ~6.011
* @example
* var v = kurtosis( 0.5 );
* // returns 6.5
* @example
* var v = kurtosis( 1.1 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( p ) {
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return 6.0 + ( ( p*p ) / ( 1.0-p ) );
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],685:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace geometric
*/
var geometric = {};

/**
* @name cdf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/cdf}
*/
setReadOnly( geometric, 'cdf', require( '@stdlib/math/base/dists/geometric/cdf' ) );

/**
* @name entropy
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/entropy}
*/
setReadOnly( geometric, 'entropy', require( '@stdlib/math/base/dists/geometric/entropy' ) );

/**
* @name Geometric
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/ctor}
*/
setReadOnly( geometric, 'Geometric', require( '@stdlib/math/base/dists/geometric/ctor' ) );

/**
* @name kurtosis
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/kurtosis}
*/
setReadOnly( geometric, 'kurtosis', require( '@stdlib/math/base/dists/geometric/kurtosis' ) );

/**
* @name logcdf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/logcdf}
*/
setReadOnly( geometric, 'logcdf', require( '@stdlib/math/base/dists/geometric/logcdf' ) );

/**
* @name logpmf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/logpmf}
*/
setReadOnly( geometric, 'logpmf', require( '@stdlib/math/base/dists/geometric/logpmf' ) );

/**
* @name mean
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/mean}
*/
setReadOnly( geometric, 'mean', require( '@stdlib/math/base/dists/geometric/mean' ) );

/**
* @name median
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/median}
*/
setReadOnly( geometric, 'median', require( '@stdlib/math/base/dists/geometric/median' ) );

/**
* @name mgf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/mgf}
*/
setReadOnly( geometric, 'mgf', require( '@stdlib/math/base/dists/geometric/mgf' ) );

/**
* @name mode
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/mode}
*/
setReadOnly( geometric, 'mode', require( '@stdlib/math/base/dists/geometric/mode' ) );

/**
* @name pmf
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/pmf}
*/
setReadOnly( geometric, 'pmf', require( '@stdlib/math/base/dists/geometric/pmf' ) );

/**
* @name quantile
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/quantile}
*/
setReadOnly( geometric, 'quantile', require( '@stdlib/math/base/dists/geometric/quantile' ) );

/**
* @name skewness
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/skewness}
*/
setReadOnly( geometric, 'skewness', require( '@stdlib/math/base/dists/geometric/skewness' ) );

/**
* @name stdev
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/stdev}
*/
setReadOnly( geometric, 'stdev', require( '@stdlib/math/base/dists/geometric/stdev' ) );

/**
* @name variance
* @memberof geometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/geometric/variance}
*/
setReadOnly( geometric, 'variance', require( '@stdlib/math/base/dists/geometric/variance' ) );


// EXPORTS //

module.exports = geometric;

},{"@stdlib/math/base/dists/geometric/cdf":678,"@stdlib/math/base/dists/geometric/ctor":680,"@stdlib/math/base/dists/geometric/entropy":682,"@stdlib/math/base/dists/geometric/kurtosis":683,"@stdlib/math/base/dists/geometric/logcdf":687,"@stdlib/math/base/dists/geometric/logpmf":690,"@stdlib/math/base/dists/geometric/mean":692,"@stdlib/math/base/dists/geometric/median":694,"@stdlib/math/base/dists/geometric/mgf":697,"@stdlib/math/base/dists/geometric/mode":699,"@stdlib/math/base/dists/geometric/pmf":702,"@stdlib/math/base/dists/geometric/quantile":705,"@stdlib/math/base/dists/geometric/skewness":707,"@stdlib/math/base/dists/geometric/stdev":709,"@stdlib/math/base/dists/geometric/variance":711,"@stdlib/utils/define-read-only-property":1937}],686:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5 );
* var y = logcdf( 3.0 );
* // returns ~-0.065
*
* y = logcdf( 1.0 );
* // returns ~-0.288
*/
function factory( p ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return NINF;
		}
		if ( x === PINF ) {
			return 0.0;
		}
		x = floor( x );
		return log1p( -pow( 1.0 - p, x + 1.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],687:[function(require,module,exports){
'use strict';

/**
* Geometric distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/geometric/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/geometric/logcdf' );
*
* var y = logcdf( 2.0, 0.5 );
* // returns ~-0.134
*
* y = logcdf( 2.0, 0.1 );
* // returns ~-1.306
*
* var mylogcdf = logcdf.factory( 0.5 );
* y = mylogcdf( 3.0 );
* // returns ~-0.065
*
* y = mylogcdf( 1.0 );
* // returns ~-0.288
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":686,"./logcdf.js":688,"@stdlib/utils/define-read-only-property":1937}],688:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.5 );
* // returns ~-0.134
*
* @example
* var y = logcdf( 2.0, 0.1 );
* // returns ~-1.306
*
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Invalid probability
* var y = logcdf( 2.0, 1.4 );
* // returns NaN
*/
function logcdf( x, p ) {
	if (
		isnan( x ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	if ( x === PINF ) {
		return 0.0;
	}
	x = floor( x );
	return log1p( -pow( 1.0 - p, x + 1.0 ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743}],689:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 0.5 );
* var y = logpmf( 3.0 );
* // returns ~-2.773
*
* y = logpmf( 1.0 );
* // returns ~-1.386
*/
function factory( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	return logpmf;

	/**
	* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {NonPositiveNumber} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		var q;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) ) {
			q = 1.0 - p;
			return ln( p ) + (x * ln( q ));
		}
		return NINF;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],690:[function(require,module,exports){
'use strict';

/**
* Geometric distribution logarithm of probability mass function (PMF).
*
* @module @stdlib/math/base/dists/geometric/logpmf
*
* @example
* var logpmf = require( '@stdlib/math/base/dists/geometric/logpmf' );
*
* var y = logpmf( 4.0, 0.3 );
* // returns ~-2.631
*
* y = logpmf( 2.0, 0.7 );
* // returns ~-2.765
*
* var mylogpmf = logpmf.factory( 0.5 );
* y = mylogpmf( 3.0 );
* // returns ~-2.773
*
* y = mylogpmf( 1.0 );
* // returns ~-1.386
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpmf = require( './logpmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpmf, 'factory', factory );


// EXPORTS //

module.exports = logpmf;

},{"./factory.js":689,"./logpmf.js":691,"@stdlib/utils/define-read-only-property":1937}],691:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {NonPositiveNumber} logarithm of PMF
*
* @example
* var y = logpmf( 4.0, 0.3 );
* // returns ~-2.631
*
* @example
* var y = logpmf( 2.0, 0.7 );
* // returns ~-2.765
*
* @example
* var y = logpmf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid success probability:
* var y = logpmf( 2.0, 1.5 );
* // returns NaN
*/
function logpmf( x, p ) {
	var q;
	if ( isnan( x ) || isnan( p ) ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( isNonNegativeInteger( x ) ) {
		q = 1.0 - p;
		return ln( p ) + (x * ln( q ));
	}
	return NINF;
}


// EXPORTS //

module.exports = logpmf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/ln":1679}],692:[function(require,module,exports){
'use strict';

/**
* Geometric distribution expected value.
*
* @module @stdlib/math/base/dists/geometric/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/geometric/mean' );
*
* var v = mean( 0.1 );
* // returns 9.0
*
* v = mean( 0.5 );
* // returns 1.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":693}],693:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 0.1 );
* // returns 9
* @example
* var v = mean( 0.5 );
* // returns 1
* @example
* var v = mean( 1.1 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 1.0 - p ) / p;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],694:[function(require,module,exports){
'use strict';

/**
* Geometric distribution median.
*
* @module @stdlib/math/base/dists/geometric/median
*
* @example
* var median = require( '@stdlib/math/base/dists/geometric/median' );
*
* var v = median( 0.1 );
* // returns 6
*
* v = median( 0.5 );
* // returns 0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":695}],695:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var log2 = require( '@stdlib/math/base/special/log2' );


// MAIN //

/**
* Returns the median of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 0.1 );
* // returns 6
* @example
* var v = median( 0.5 );
* // returns 0
* @example
* var v = median( 1.1 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ceil( -1.0 / ( log2( 1.0-p ) ) ) - 1.0;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/log2":1693}],696:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isProbability = require( '@stdlib/math/base/assert/is-probability' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.8 );
* var y = mgf( -0.2 );
* // returns ~0.783
*/
function factory( p ) {
	if ( !isProbability( p ) ) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a geometric distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var et;
		var q;
		if ( isnan( t ) ) {
			return NaN;
		}
		q = 1.0 - p;
		if ( t >= -ln( q ) ) {
			return NaN;
		}
		et = exp( t );
		return ( p * et ) / ( 1.0 - (q * et ));
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-probability":144,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],697:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a geometric distribution.
*
* @module @stdlib/math/base/dists/geometric/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/geometric/mgf' );
*
* var y = mgf( 0.2, 0.5 );
* // returns ~1.569
*
* y = mgf( 0.4, 0.5 );
* // returns ~2.936
*
* var mymgf = mgf.factory( 0.8 );
* y = mymgf( -0.2 );
* // returns ~0.783
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":696,"./mgf.js":698,"@stdlib/utils/define-read-only-property":1937}],698:[function(require,module,exports){
'use strict';

// MODULES //

var isProbability = require( '@stdlib/math/base/assert/is-probability' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a geometric distribution with success probability `p` at a value `t`.
*
* @param {number} t - input value
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.2, 0.5 );
* // returns ~1.569
*
* @example
* var y = mgf( 0.4, 0.5 );
* // returns ~2.936
*
* @example
* // Case: t >= -ln(1-p)
* var y = mgf( 0.8, 0.5 )
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( -2.0, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 2.0 );
* // returns NaN
*/
function mgf( t, p ) {
	var et;
	var q;
	if ( isnan( t ) || !isProbability( p ) ) {
		return NaN;
	}
	q = 1.0 - p;
	if ( t >= -ln( q ) ) {
		return NaN;
	}
	et = exp( t );
	return ( p * et ) / ( 1.0 - (q * et) );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-probability":144,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679}],699:[function(require,module,exports){
'use strict';

/**
* Geometric distribution mode.
*
* @module @stdlib/math/base/dists/geometric/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/geometric/mode' );
*
* var v = mode( 0.1 );
* // returns 0
*
* v = mode( 0.5 );
* // returns 0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":700}],700:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 0.1 );
* // returns 0
* @example
* var v = mode( 0.5 );
* // returns 0
* @example
* var v = mode( 1.1 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return 0;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],701:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 0.5 );
* var y = pmf( 3.0 );
* // returns 0.0625
*
* y = pmf( 1.0 );
* // returns 0.25
*/
function factory( p ) {
	if (
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var q;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) ) {
			q = 1.0 - p;
			return p * pow( q, x );
		}
		return 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],702:[function(require,module,exports){
'use strict';

/**
* Geometric distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dists/geometric/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dists/geometric/pmf' );
*
* var y = pmf( 4.0, 0.3 );
* // returns ~0.072
*
* y = pmf( 2.0, 0.7 );
* // returns ~0.063
*
* y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* var mypmf = pmf.factory( 0.5 );
* y = mypmf( 3.0 );
* // returns 0.0625
*
* y = mypmf( 1.0 );
* // returns 0.25
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":701,"./pmf.js":703,"@stdlib/utils/define-read-only-property":1937}],703:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 4.0, 0.3 );
* // returns ~0.072
*
* @example
* var y = pmf( 2.0, 0.7 );
* // returns ~0.063
*
* @example
* var y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid success probability:
* var y = pmf( 2.0, 1.5 );
* // returns NaN
*/
function pmf( x, p ) {
	var q;
	if (
		isnan( x ) ||
		isnan( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( isNonNegativeInteger( x ) ) {
		q = 1.0 - p;
		return p * pow( q, x );
	}
	return 0.0;
}


// EXPORTS //

module.exports = pmf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/pow":1743}],704:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var max = require( '@stdlib/math/base/special/max' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns 0
*
* y = quantile( 0.8 );
* // returns 3
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function factory( p ) {
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a geometric distribution.
	*
	* @private
	* @param {Probability} r - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( r ) {
		if ( isnan( r ) || r < 0.0 || r > 1.0 ) {
			return NaN;
		}
		if ( r === 1.0 ) {
			return PINF;
		}
		return max( 0.0, ceil( (ln(1.0-r) / log1p(-p)) - (1.0 + 1e-12) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/utils/constant-function":1933}],705:[function(require,module,exports){
'use strict';

/**
* Geometric distribution quantile function.
*
* @module @stdlib/math/base/dists/geometric/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/geometric/quantile' );
*
*
* var myquantile = quantile.factory( 0.4 );
* y = myquantile( 0.4 );
* // returns 0
*
* y = myquantile( 0.8 );
* // returns 3
*
* y = myquantile( 1.0 );
* // returns Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":704,"./quantile.js":706,"@stdlib/utils/define-read-only-property":1937}],706:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var max = require( '@stdlib/math/base/special/max' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the quantile function for a geometric distribution with success probability `p` at a probability `r`.
*
* @param {Probability} r - input value
* @param {Probability} p - success probability
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.4 );
* // returns 3
*
* @example
* var y = quantile( 0.5, 0.4 );
* // returns 1
*
* @example
* var y = quantile( 0.9, 0.1 );
* // returns 21
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.8 );
* // returns NaN
*
* @example
* var y = quantile( 0.4, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.5 );
* // returns NaN
*/
function quantile( r, p ) {
	if (
		isnan( p ) ||
		isnan( r ) ||
		p < 0.0 ||
		p > 1.0 ||
		r < 0.0 ||
		r > 1.0
	) {
		return NaN;
	}
	if ( r === 1.0 ) {
		return PINF;
	}
	return max( 0.0, ceil( (ln(1.0-r) / log1p(-p))- ( 1 + 1e-12 ) ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703}],707:[function(require,module,exports){
'use strict';

/**
* Geometric distribution skewness.
*
* @module @stdlib/math/base/dists/geometric/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/geometric/skewness' );
*
* var v = skewness( 0.1 );
* // returns ~2.003
*
* v = skewness( 0.5 );
* // returns ~2.121
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":708}],708:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 0.1 );
* // returns 9
* @example
* var v = skewness( 0.5 );
* // returns 1
* @example
* var v = skewness( 1.1 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( p ) {
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return ( 2.0-p ) / sqrt( 1.0-p );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],709:[function(require,module,exports){
'use strict';

/**
* Geometric distribution standard deviation.
*
* @module @stdlib/math/base/dists/geometric/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/geometric/stdev' );
*
* var v = stdev( 0.1 );
* // returns ~9.487
*
* v = stdev( 0.5 );
* // returns ~1.414
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":710}],710:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.1 );
* // returns ~9.487
* @example
* var v = stdev( 0.5 );
* // returns ~1.414
* @example
* var v = stdev( 1.1 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( p ) {
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return sqrt( 1.0-p ) / p;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],711:[function(require,module,exports){
'use strict';

/**
* Geometric distribution variance.
*
* @module @stdlib/math/base/dists/geometric/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/geometric/variance' );
*
* var v = variance( 0.1 );
* // returns ~90.0
*
* v = variance( 0.5 );
* // returns 2.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":712}],712:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.1 );
* // returns ~90.0
* @example
* var v = variance( 0.5 );
* // returns 2.0
* @example
* var v = variance( 1.1 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( p ) {
	if (
		isnan( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return ( 1.0-p ) / ( p*p );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],713:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.965
*
* @example
* var y = cdf( -2.0, 0.0, 3.0 );
* // returns ~0.143
*
* @example
* var y = cdf( 0.0, 0.0, 1.0 );
* // returns ~0.368
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = cdf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, mu, beta ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / beta;
	return exp( -exp( -z ) );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],714:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 3.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.965
*
* y = cdf( -2.0 );
* // returns ~0.143
*/
function factory( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( -2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / beta;
		return exp( -exp( -z ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],715:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/gumbel/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/gumbel/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.965
*
* y = cdf( 0.0, 0.0, 3.0 );
* // returns ~0.368
*
* var myCDF = cdf.factory( 2.0, 3.0 );
* y = myCDF( 10.0 );
* // returns ~0.933
*
* y = myCDF( 2.0 );
* // returns ~0.368
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":713,"./factory.js":714,"@stdlib/utils/define-read-only-property":1937}],716:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/gumbel/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/gumbel/kurtosis' );
var mean = require( '@stdlib/math/base/dists/gumbel/mean' );
var median = require( '@stdlib/math/base/dists/gumbel/median' );
var mode = require( '@stdlib/math/base/dists/gumbel/mode' );
var skewness = require( '@stdlib/math/base/dists/gumbel/skewness' );
var stdev = require( '@stdlib/math/base/dists/gumbel/stdev' );
var variance = require( '@stdlib/math/base/dists/gumbel/variance' );
var cdf = require( '@stdlib/math/base/dists/gumbel/cdf' );
var logcdf = require( '@stdlib/math/base/dists/gumbel/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/gumbel/logpdf' );
var mgf = require( '@stdlib/math/base/dists/gumbel/mgf' );
var pdf = require( '@stdlib/math/base/dists/gumbel/pdf' );
var quantile = require( '@stdlib/math/base/dists/gumbel/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function gumbelCDF( x ) {
	return cdf( x, this.mu, this.beta );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function gumbelLogCDF( x ) {
	return logcdf( x, this.mu, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function gumbelLogPDF( x ) {
	return logpdf( x, this.mu, this.beta );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function gumbelMGF( t ) {
	return mgf( t, this.mu, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function gumbelPDF( x ) {
	return pdf( x, this.mu, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function gumbelQuantile( p ) {
	return quantile( p, this.mu, this.beta );
}


// MAIN //

/**
* Gumbel distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `beta` must be a positive number
* @returns {Gumbel} distribution instance
*
* @example
* var gumbel = new Gumbel( 1.0, 1.0 );
*
* var y = gumbel.cdf( 0.8 );
* // returns 0.8
*
* var mu = gumbel.mean;
* // returns 0.5
*/
function Gumbel() {
	var beta;
	var mu;
	if ( !(this instanceof Gumbel) ) {
		if ( arguments.length === 0 ) {
			return new Gumbel();
		}
		return new Gumbel( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		mu = 0.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Gumbel distribution differential entropy.
*
* @name entropy
* @memberof Gumbel.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.entropy;
* // returns ~-0.869
*/
Object.defineProperty( Gumbel.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.beta );
	}
});

/**
* Gumbel distribution excess kurtosis.
*
* @name kurtosis
* @memberof Gumbel.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.kurtosis;
* // returns ~0.082
*/
Object.defineProperty( Gumbel.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.beta );
	}
});

/**
* Gumbel distribution expected value.
*
* @name mean
* @memberof Gumbel.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.mean;
* // returns 0.25
*/
Object.defineProperty( Gumbel.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.beta );
	}
});

/**
* Gumbel distribution median.
*
* @name median
* @memberof Gumbel.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.median;
* // returns ~0.239
*/
Object.defineProperty( Gumbel.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.beta );
	}
});

/**
* Gumbel distribution mode.
*
* @name mode
* @memberof Gumbel.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.mode;
* // returns 0.25
*/
Object.defineProperty( Gumbel.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.beta );
	}
});

/**
* Gumbel distribution skewness.
*
* @name skewness
* @memberof Gumbel.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.skewness;
* // returns ~0.011
*/
Object.defineProperty( Gumbel.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.beta );
	}
});

/**
* Gumbel distribution standard deviation.
*
* @name stdev
* @memberof Gumbel.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.stdev;
* // returns ~0.105
*/
Object.defineProperty( Gumbel.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.beta );
	}
});

/**
* Gumbel distribution variance.
*
* @name variance
* @memberof Gumbel.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.variance;
* // returns ~0.011
*/
Object.defineProperty( Gumbel.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.cdf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Gumbel.prototype, 'cdf', gumbelCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.logcdf( 0.8 );
* // returns ~-2.0557
*/
setReadOnly( Gumbel.prototype, 'logcdf', gumbelLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.logpdf( 0.8 );
* // returns ~-2.0557
*/
setReadOnly( Gumbel.prototype, 'logpdf', gumbelLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.mgf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Gumbel.prototype, 'mgf', gumbelMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.pdf( 0.8 );
* // returns ~0.013
*/
setReadOnly( Gumbel.prototype, 'pdf', gumbelPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Gumbel.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.quantile( 0.5 );
* // returns ~0.314
*/
setReadOnly( Gumbel.prototype, 'quantile', gumbelQuantile );


// EXPORTS //

module.exports = Gumbel;

},{"@stdlib/assert/is-nan":32,"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/gumbel/cdf":715,"@stdlib/math/base/dists/gumbel/entropy":719,"@stdlib/math/base/dists/gumbel/kurtosis":720,"@stdlib/math/base/dists/gumbel/logcdf":724,"@stdlib/math/base/dists/gumbel/logpdf":727,"@stdlib/math/base/dists/gumbel/mean":729,"@stdlib/math/base/dists/gumbel/median":731,"@stdlib/math/base/dists/gumbel/mgf":734,"@stdlib/math/base/dists/gumbel/mode":736,"@stdlib/math/base/dists/gumbel/pdf":739,"@stdlib/math/base/dists/gumbel/quantile":742,"@stdlib/math/base/dists/gumbel/skewness":744,"@stdlib/math/base/dists/gumbel/stdev":746,"@stdlib/math/base/dists/gumbel/variance":748,"@stdlib/utils/define-read-only-property":1937}],717:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution constructor.
*
* @module @stdlib/math/base/dists/gumbel/ctor
*
* @example
* var Gumbel = require( '@stdlib/math/base/dists/gumbel/ctor' );
*
* var gumbel = new Gumbel( 1.0, 1.0 );
*
* var y = gumbel.cdf( 0.8 );
* // returns ~0.295
*
* var mean = gumbel.mean;
* // returns ~1.578
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":716}],718:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );


// MAIN //

/**
* Returns the differential entropy for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.577
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.27
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ln( beta ) + GAMMA + 1.0;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-eulergamma":71,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],719:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution differential entropy.
*
* @module @stdlib/math/base/dists/gumbel/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/gumbel/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.577
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.27
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":718}],720:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/gumbel/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/gumbel/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 2.4
*
* y = kurtosis( 4.0, 2.0 );
* // returns 2.4
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":721}],721:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 2.4
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 2.4
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 12.0 / 5.0;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],722:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace gumbel
*/
var gumbel = {};

/**
* @name cdf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/cdf}
*/
setReadOnly( gumbel, 'cdf', require( '@stdlib/math/base/dists/gumbel/cdf' ) );

/**
* @name entropy
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/entropy}
*/
setReadOnly( gumbel, 'entropy', require( '@stdlib/math/base/dists/gumbel/entropy' ) );

/**
* @name Gumbel
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/ctor}
*/
setReadOnly( gumbel, 'Gumbel', require( '@stdlib/math/base/dists/gumbel/ctor' ) );

/**
* @name kurtosis
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/kurtosis}
*/
setReadOnly( gumbel, 'kurtosis', require( '@stdlib/math/base/dists/gumbel/kurtosis' ) );

/**
* @name logcdf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/logcdf}
*/
setReadOnly( gumbel, 'logcdf', require( '@stdlib/math/base/dists/gumbel/logcdf' ) );

/**
* @name logpdf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/logpdf}
*/
setReadOnly( gumbel, 'logpdf', require( '@stdlib/math/base/dists/gumbel/logpdf' ) );

/**
* @name mean
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/mean}
*/
setReadOnly( gumbel, 'mean', require( '@stdlib/math/base/dists/gumbel/mean' ) );

/**
* @name median
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/median}
*/
setReadOnly( gumbel, 'median', require( '@stdlib/math/base/dists/gumbel/median' ) );

/**
* @name mgf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/mgf}
*/
setReadOnly( gumbel, 'mgf', require( '@stdlib/math/base/dists/gumbel/mgf' ) );

/**
* @name mode
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/mode}
*/
setReadOnly( gumbel, 'mode', require( '@stdlib/math/base/dists/gumbel/mode' ) );

/**
* @name pdf
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/pdf}
*/
setReadOnly( gumbel, 'pdf', require( '@stdlib/math/base/dists/gumbel/pdf' ) );

/**
* @name quantile
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/quantile}
*/
setReadOnly( gumbel, 'quantile', require( '@stdlib/math/base/dists/gumbel/quantile' ) );

/**
* @name skewness
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/skewness}
*/
setReadOnly( gumbel, 'skewness', require( '@stdlib/math/base/dists/gumbel/skewness' ) );

/**
* @name stdev
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/stdev}
*/
setReadOnly( gumbel, 'stdev', require( '@stdlib/math/base/dists/gumbel/stdev' ) );

/**
* @name variance
* @memberof gumbel
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/gumbel/variance}
*/
setReadOnly( gumbel, 'variance', require( '@stdlib/math/base/dists/gumbel/variance' ) );


// EXPORTS //

module.exports = gumbel;

},{"@stdlib/math/base/dists/gumbel/cdf":715,"@stdlib/math/base/dists/gumbel/ctor":717,"@stdlib/math/base/dists/gumbel/entropy":719,"@stdlib/math/base/dists/gumbel/kurtosis":720,"@stdlib/math/base/dists/gumbel/logcdf":724,"@stdlib/math/base/dists/gumbel/logpdf":727,"@stdlib/math/base/dists/gumbel/mean":729,"@stdlib/math/base/dists/gumbel/median":731,"@stdlib/math/base/dists/gumbel/mgf":734,"@stdlib/math/base/dists/gumbel/mode":736,"@stdlib/math/base/dists/gumbel/pdf":739,"@stdlib/math/base/dists/gumbel/quantile":742,"@stdlib/math/base/dists/gumbel/skewness":744,"@stdlib/math/base/dists/gumbel/stdev":746,"@stdlib/math/base/dists/gumbel/variance":748,"@stdlib/utils/define-read-only-property":1937}],723:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 3.0 );
*
* var y = logcdf( 10.0 );
* // returns ~-0.036
*
* y = logcdf( -2.0 );
* // returns ~-1.945
*/
function factory( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logarithm of CDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / beta;
		return -exp( -z );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],724:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution logarithm of the cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/gumbel/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/gumbel/logcdf' );
*
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.036
*
* y = logcdf( 0.0, 0.0, 3.0 );
* // returns ~-1
*
* var myLCDF = logcdf.factory( 2.0, 3.0 );
* y = myLCDF( 10.0 );
* // returns ~-0.069
*
* y = myLCDF( 2.0 );
* // returns ~-1
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":723,"./logcdf.js":725,"@stdlib/utils/define-read-only-property":1937}],725:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logarithm of CDF
*
* @example
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.036
*
* @example
* var y = logcdf( -2.0, 0.0, 3.0 );
* // returns ~-1.945
*
* @example
* var y = logcdf( 0.0, 0.0, 1.0 );
* // returns ~-1.0
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logcdf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function logcdf( x, mu, beta ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / beta;
	return -exp( -z );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],726:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logPDF
*/
function factory( mu, beta ) {
	var lbeta;
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	lbeta = ln( beta );
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === NINF ) {
			return 0.0;
		}
		z = ( x - mu ) / beta;
		return -z - exp( -z ) - lbeta;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],727:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/gumbel/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/gumbel/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.137
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-1.693
*
* y = mylogpdf( 12.0 );
* // returns ~-2.064
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":726,"./logpdf.js":728,"@stdlib/utils/define-read-only-property":1937}],728:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logarithm of PDF
*
* @example
* var y = logpdf( 0.0, 0.0, 2.0 );
* // returns ~-1.693
*
* @example
* var y = logpdf( 0.0, 0.0, 1.0 );
* // returns ~-1.0
*
* @example
* var y = logpdf( 1.0, 3.0, 2.0 );
* // returns ~-2.408
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, mu, beta ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	z = ( x - mu ) / beta;
	return -z - exp( -z ) - ln( beta );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679}],729:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution mean.
*
* @module @stdlib/math/base/dists/gumbel/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/gumbel/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns ~0.577
*
* y = mean( 4.0, 2.0 );
* // returns ~5.154
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":730}],730:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );


// MAIN //

/**
* Returns the mean for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} mean
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns ~0.577
* @example
* var y = mean( 5.0, 2.0 );
* // returns ~6.154
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu + ( beta * GAMMA );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/constants/math/float64-eulergamma":71,"@stdlib/math/base/assert/is-nan":128}],731:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution median.
*
* @module @stdlib/math/base/dists/gumbel/median
*
* @example
* var median = require( '@stdlib/math/base/dists/gumbel/median' );
*
* var y = median( 0.0, 1.0 );
* // returns ~0.367
*
* y = median( 4.0, 2.0 );
* // returns ~4.733
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":732}],732:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// VARIABLES //

var LLN2 = ln( LN2 );


// MAIN //

/**
* Returns the median for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns ~0.367
* @example
* var y = median( 5.0, 2.0 );
* // returns ~5.733
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu - ( beta * LLN2 );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],733:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Gumbel distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.0, 3.0 );
*
* var y = mgf( 1.5 );
* // returns ~0.27
*
* y = mgf( -1.0 );
* // returns 6.0
*/
function factory( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Gumbel distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( t >= 1.0/beta ) {
			return NaN;
		}
		return gamma( 1.0 - (beta * t) ) * exp( mu * t );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/utils/constant-function":1933}],734:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Gumbel distribution.
*
* @module @stdlib/math/base/dists/gumbel/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/gumbel/mgf' );
*
* var y = mgf( -1.0, 0.0, 3.0 );
* // returns 6.0
*
* y = mgf( 0.1, 0.0, 3.0 );
* // returns ~1.298
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* var myMGF = mgf.factory( 0.0, 3.0 );
*
* y = myMGF( -1.5 );
* // returns ~52.343
*
* y = myMGF( -1.0 );
* // returns 6.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":733,"./mgf.js":735,"@stdlib/utils/define-read-only-property":1937}],735:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Gumbel distribution with location parameter `mu` and scale parameter `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( -1.0, 0.0, 3.0 );
* // returns 6.0
*
* @example
* var y = mgf( 0.1, 0.0, 3.0 );
* // returns ~1.298
*
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Non-positive scale parameter:
* var y = mgf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function mgf( t, mu, beta ) {
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0 ||
		t >= 1.0/beta
	) {
		return NaN;
	}
	return gamma( 1.0 - (beta * t) ) * exp( mu * t );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525}],736:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution mode.
*
* @module @stdlib/math/base/dists/gumbel/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/gumbel/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":737}],737:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],738:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*/
function factory( mu, beta ) {
	if ( isnan( mu ) || isnan( beta ) || beta <= 0.0 ) {
		return constantFunction( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*/
	function pdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === NINF ) {
			return 0.0;
		}
		z = ( x - mu ) / beta;
		return ( 1.0 / beta ) * exp( -z - exp( -z ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],739:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/gumbel/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/gumbel/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.118
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns ~0.184
*
* y = myPDF( 12.0 );
* // returns ~0.127
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":738,"./pdf.js":740,"@stdlib/utils/define-read-only-property":1937}],740:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.0, 0.0, 2.0 );
* // returns ~0.184
*
* @example
* var y = pdf( 0.0, 0.0, 1.0 );
* // returns ~0.368
*
* @example
* var y = pdf( 1.0, 3.0, 2.0 );
* // returns ~0.09
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, mu, beta ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	z = ( x - mu ) / beta;
	return ( 1.0 / beta ) * exp( -z - exp( -z ) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],741:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*/
function factory( mu, beta ) {
	if ( isnan( mu ) || isnan( beta ) || beta <= 0.0 ) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Gumbel distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu - (beta * ln( -ln( p ) ));
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],742:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution quantile function.
*
* @module @stdlib/math/base/dists/gumbel/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/gumbel/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.4999
*
* var myQuantile = quantile.factory( 8.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns ~8.733
*
* y = myQuantile( 0.7 );
* // returns ~10.062
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":741,"./quantile.js":743,"@stdlib/utils/define-read-only-property":1937}],743:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the quantile function for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.5
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~4.733
*
* @example
* var y = quantile( 0.5, 4.0, 4.0 );
* // returns ~5.466
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		isnan( p ) ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return mu - ( beta * ln( -ln( p ) ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],744:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution skewness.
*
* @module @stdlib/math/base/dists/gumbel/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/gumbel/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns ~1.14
*
* y = skewness( 4.0, 2.0 );
* // returns ~1.14
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":745}],745:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

var SKEWNESS = 12.0 * sqrt( 6.0 ) * zeta( 3.0 ) / ( PI*PI*PI );


// MAIN //

/**
* Returns the skewness for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns ~1.14
* @example
* var y = skewness( 5.0, 2.0 );
* // returns ~1.14
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return SKEWNESS;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/riemann-zeta":1766,"@stdlib/math/base/special/sqrt":1826}],746:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution standard deviation.
*
* @module @stdlib/math/base/dists/gumbel/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/gumbel/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.283
*
* y = stdev( 4.0, 2.0 );
* // returns ~2.565
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":747}],747:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

var SQRT6 = sqrt( 6.0 );


// MAIN //

/**
* Returns the standard deviation for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.283
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~2.565
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( PI / SQRT6 ) * beta;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],748:[function(require,module,exports){
'use strict';

/**
* Gumbel distribution variance.
*
* @module @stdlib/math/base/dists/gumbel/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/gumbel/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~1.645
*
* y = variance( 4.0, 2.0 );
* // returns ~6.58
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":749}],749:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );


// MAIN //

/**
* Returns the variance for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~1.645
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~6.58
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, beta ) {
	if (
		isnan( mu ) ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( PI_SQUARED / 6.0 ) * beta * beta;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/assert/is-nan":128}],750:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var pmf = require( '@stdlib/math/base/dists/hypergeometric/pmf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var sum = require( './sum.js' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 1.0, 8, 4, 2 );
* // returns ~0.786
*
* @example
* var y = cdf( 1.5, 8, 4, 2 );
* // returns ~0.786
*
* @example
* var y = cdf( 2.0, 8, 4, 2 );
* // returns 1.0
*
* @example
* var y = cdf( 0, 8, 4, 2 );
* // returns ~0.214
*
* @example
* var y = cdf( NaN, 10, 5, 2 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 5, 2 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 10, NaN, 2 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 10, 5, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 10.5, 5, 2 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 10, 1.5, 2 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 10, 5, -2.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 10, 5, 12 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 8, 3, 9 );
* // returns NaN
*/
function cdf( x, N, K, n ) {
	var denom;
	var probs;
	var num;
	var ret;
	var i;

	if (
		isnan( x ) ||
		isnan( N ) ||
		isnan( K ) ||
		isnan( n ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	x = trunc( x );
	if ( x < max( 0, n + K - N ) ) {
		return 0.0;
	}
	if ( x >= min( n, K ) ) {
		return 1.0;
	}

	probs = new Array( x + 1 );
	probs[ x ] = pmf( x, N, K, n );

	/*
	* Use recurrence relation:
	* (x+1)( N - K - (n-x-1))P(X=x+1)=(K-x)(n-x)P(X=x)
	*/
	for ( i = x - 1; i >= 0; i-- ) {
		num = ( i + 1 ) * ( N - K - (n-i-1) );
		denom = ( K - i ) * ( n - i );
		probs[ i ] = ( num / denom ) * probs[ i + 1 ];
	}
	ret = sum( probs );
	return min( ret, 1.0 );
}


// EXPORTS //

module.exports = cdf;

},{"./sum.js":753,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/hypergeometric/pmf":767,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/trunc":1841}],751:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var pmf = require( '@stdlib/math/base/dists/hypergeometric/pmf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var sum = require( './sum.js' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} CDF
*
* @example
* var mycdf = factory( 30, 20, 5 );
* var y = mycdf( 4.0 );
* // returns ~0.891
*
* y = mycdf( 1.0 );
* // returns ~0.031
*/
function factory( N, K, n ) {
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var denom;
		var probs;
		var num;
		var ret;
		var i;

		if ( isnan( x ) ) {
			return NaN;
		}
		x = trunc( x );
		if ( x < max( 0, n + K - N ) ) {
			return 0.0;
		}
		if ( x >= min( n, K ) ) {
			return 1.0;
		}

		probs = new Array( x + 1 );
		probs[ x ] = pmf( x, N, K, n );

		/*
		* Use recurrence relation:
		* (x+1)( N - K - (n-x-1) )P(X=x+1)=(K-x)(n-x)P(X=x)
		*/
		for ( i = x - 1; i >= 0; i-- ) {
			num = ( i + 1 ) * ( N - K - (n-i-1) );
			denom = ( K - i ) * ( n - i );
			probs[ i ] = ( num / denom ) * probs[ i + 1 ];
		}
		ret = sum( probs );
		return min( ret, 1.0 );
	}
}


// EXPORTS //

module.exports = factory;

},{"./sum.js":753,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/hypergeometric/pmf":767,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/trunc":1841,"@stdlib/utils/constant-function":1933}],752:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/hypergeometric/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/hypergeometric/cdf' );
*
* var y = cdf( 1.0, 8, 4, 2 );
* // returns ~0.786
*
* y = cdf( 1.5, 8, 4, 2 );
* // returns ~0.786
*
* y = cdf( 2.0, 8, 4, 2 );
* // returns 1.0
*
* y = cdf( 0.0, 8, 4, 2 );
* // returns ~0.214
*
* var mycdf = factory( 30, 20, 5 );
* y = mycdf( 4.0 );
* // returns ~0.891
*
* y = mycdf( 1.0 );
* // returns ~0.031
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":750,"./factory.js":751,"@stdlib/utils/define-read-only-property":1937}],753:[function(require,module,exports){
'use strict';

/**
* Computes the sum of elements in an array.
*
* @private
* @param {Array} arr - input array
* @returns {number} sum
*/
function sum( arr ) {
	var len;
	var s;
	var i;
	len = arr.length;
	s = 0;
	for ( i = 0; i < len; i++ ) {
		s += arr[ i ];
	}
	return s;
}


// EXPORTS //

module.exports = sum;

},{}],754:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var kurtosis = require( '@stdlib/math/base/dists/hypergeometric/kurtosis' );
var mean = require( '@stdlib/math/base/dists/hypergeometric/mean' );
var mode = require( '@stdlib/math/base/dists/hypergeometric/mode' );
var skewness = require( '@stdlib/math/base/dists/hypergeometric/skewness' );
var stdev = require( '@stdlib/math/base/dists/hypergeometric/stdev' );
var variance = require( '@stdlib/math/base/dists/hypergeometric/variance' );
var cdf = require( '@stdlib/math/base/dists/hypergeometric/cdf' );
var logpmf = require( '@stdlib/math/base/dists/hypergeometric/logpmf' );
var pmf = require( '@stdlib/math/base/dists/hypergeometric/pmf' );
var quantile = require( '@stdlib/math/base/dists/hypergeometric/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function hypergeometricCDF( x ) {
	return cdf( x, this.N, this.K, this.n );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated PMF
*/
function hypergeometricLogPMF( x ) {
	return logpmf( x, this.N, this.K, this.n );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated PMF
*/
function hypergeometricPMF( x ) {
	return pmf( x, this.N, this.K, this.n );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {NonNegativeInteger} evaluated quantile function
*/
function hypergeometricQuantile( p ) {
	return quantile( p, this.N, this.K, this.n );
}


// MAIN //

/**
* Hypergeometric distribution constructor.
*
* @constructor
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @throws {TypeError} `N` must be a non-negative integer
* @throws {TypeError} `K` must be a non-negative integer
* @throws {TypeError} `n` must be a non-negative integer
* @throws {RangeError} `K` must not exceed `N`
* @throws {RangeError} `n` must not exceed `N`
* @returns {Hypergeometric} distribution instance
*
* @example
* var hypergeometric = new Hypergeometric( 10, 5, 7 );
*
* var y = hypergeometric.cdf( 0.8 );
* // returns 0.0
*
* var mode = hypergeometric.mode;
* // returns 4.0
*/
function Hypergeometric( N, K, n ) {
	if ( !(this instanceof Hypergeometric) ) {
		return new Hypergeometric( N, K, n );
	}
	if ( !isNonNegativeInteger( N ) ) {
		throw new TypeError( 'invalid input argument. Population size `N` must be a non-negative integer. Value: `' + N + '`' );
	}
	if ( !isNonNegativeInteger( K ) ) {
		throw new TypeError( 'invalid input argument. Subpopulation size `K` must be a non-negative integer. Value: `' + K + '`' );
	}
	if ( !isNonNegativeInteger( n ) ) {
		throw new TypeError( 'invalid input argument. Number of draws `n` must be a non-negative integer. Value: `' + n + '`' );
	}
	if ( K > N ) {
		throw new RangeError( 'invalid input arguments. Subpopulation size `K` must be smaller than or equal to `N`.' );
	}
	if ( n > N ) {
		throw new RangeError( 'invalid input arguments. Number of draws `n` must be smaller than or equal to `N`.' );
	}
	Object.defineProperty( this, 'N', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return N;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( K > value ) {
				throw new RangeError( 'invalid value. Must be larger than or equal to `K`. Value: `' + value + '`' );
			}
			if ( n > value ) {
				throw new RangeError( 'invalid value. Must be larger than or equal to `n`. Value: `' + value + '`' );
			}
			N = value;
		}
	});
	Object.defineProperty( this, 'K', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return K;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( value > N ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );
			}
			K = value;
		}
	});
	Object.defineProperty( this, 'n', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return n;
		},
		'set': function set( value ) {
			if ( !isNonNegativeInteger( value ) ) {
				throw new TypeError( 'invalid value. Must be a non-negative integer. Value: `' + value + '`' );
			}
			if ( value > N ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );
			}
			n = value;
		}
	});
	return this;
}

/**
* Hypergeometric distribution excess kurtosis.
*
* @name kurtosis
* @memberof Hypergeometric.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.kurtosis;
* // returns ~-0.276
*/
Object.defineProperty( Hypergeometric.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution expected value.
*
* @name mean
* @memberof Hypergeometric.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.mean;
* // returns 3.75
*/
Object.defineProperty( Hypergeometric.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution mode.
*
* @name mode
* @memberof Hypergeometric.prototype
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.mode;
* // returns 4.0
*/
Object.defineProperty( Hypergeometric.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution skewness.
*
* @name skewness
* @memberof Hypergeometric.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.skewness;
* // returns ~-0.323
*/
Object.defineProperty( Hypergeometric.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution standard deviation.
*
* @name stdev
* @memberof Hypergeometric.prototype
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.stdev;
* // returns ~0.86
*/
Object.defineProperty( Hypergeometric.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.N, this.K, this.n );
	}
});

/**
* Hypergeometric distribution variance.
*
* @name variance
* @memberof Hypergeometric.prototype
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.variance;
* // returns ~0.74
*/
Object.defineProperty( Hypergeometric.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.N, this.K, this.n );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Hypergeometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {Probability} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.cdf( 0.5 );
* // returns ~0.214
*/
setReadOnly( Hypergeometric.prototype, 'cdf', hypergeometricCDF );

/**
* Evaluates the natural logarithm of the probability density function (PMF).
*
* @name logpmf
* @memberof Hypergeometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.logpmf( 2.0 );
* // returns ~-1.542
*/
setReadOnly( Hypergeometric.prototype, 'logpmf', hypergeometricLogPMF );

/**
* Evaluates the probability density function (PMF).
*
* @name pmf
* @memberof Hypergeometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.pmf( 2.0 );
* // returns ~0.214
*/
setReadOnly( Hypergeometric.prototype, 'pmf', hypergeometricPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Hypergeometric.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {NonNegativeInteger} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.quantile( 0.8 );
* // returns 2.0
*/
setReadOnly( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );


// EXPORTS //

module.exports = Hypergeometric;

},{"@stdlib/assert/is-nonnegative-integer":36,"@stdlib/math/base/dists/hypergeometric/cdf":752,"@stdlib/math/base/dists/hypergeometric/kurtosis":756,"@stdlib/math/base/dists/hypergeometric/logpmf":760,"@stdlib/math/base/dists/hypergeometric/mean":762,"@stdlib/math/base/dists/hypergeometric/mode":764,"@stdlib/math/base/dists/hypergeometric/pmf":767,"@stdlib/math/base/dists/hypergeometric/quantile":770,"@stdlib/math/base/dists/hypergeometric/skewness":772,"@stdlib/math/base/dists/hypergeometric/stdev":774,"@stdlib/math/base/dists/hypergeometric/variance":776,"@stdlib/utils/define-read-only-property":1937}],755:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution constructor.
*
* @module @stdlib/math/base/dists/hypergeometric/ctor
*
* @example
* var Hypergeometric = require( '@stdlib/math/base/dists/hypergeometric/ctor' );
*
* var hypergeometric = new Hypergeometric( 40, 10, 8 );
*
* var y = hypergeometric.cdf( 2.8 );
* // returns ~0.688
*
* var mode = hypergeometric.mode;
* // returns 2.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":754}],756:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/hypergeometric/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/hypergeometric/kurtosis' );
*
* var v = kurtosis( 16, 11, 4 );
* // returns ~-0.326
*
* v = kurtosis( 4, 2, 2 );
* // returns 0.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":757}],757:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the excess kurtosis of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 16, 11, 4 );
* // returns ~-0.326
* @example
* var v = kurtosis( 4, 2, 2 );
* // returns 0.0
* @example
* var v = kurtosis( 10, 5, 12 );
* // returns NaN
* @example
* var v = kurtosis( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = kurtosis( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = kurtosis( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = kurtosis( NaN, 10, 4 );
* // returns NaN
* @example
* var v = kurtosis( 20, NaN, 4 );
* // returns NaN
* @example
* var v = kurtosis( 20, 10, NaN );
* // returns NaN
*/
function kurtosis( N, K, n ) {
	var p;
	var q;
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	p = ( N-1 ) * ( N*N ) * ( ( N*(N+1) ) - ( 6*K*(N-K) ) - ( 6*n*(N-n) ) );
	p += 6 * n * K * ( N-K ) * ( N-n ) * ( (5*N) - 6 );
	q = n * K * ( N-K ) * ( N-n ) * ( N-2 ) * ( N-3 );
	return p / q;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nonnegative-integer":134}],758:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace hypergeometric
*/
var hypergeometric = {};

/**
* @name cdf
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/cdf}
*/
setReadOnly( hypergeometric, 'cdf', require( '@stdlib/math/base/dists/hypergeometric/cdf' ) );

/**
* @name Hypergeometric
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/ctor}
*/
setReadOnly( hypergeometric, 'Hypergeometric', require( '@stdlib/math/base/dists/hypergeometric/ctor' ) );

/**
* @name kurtosis
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/kurtosis}
*/
setReadOnly( hypergeometric, 'kurtosis', require( '@stdlib/math/base/dists/hypergeometric/kurtosis' ) );

/**
* @name logpmf
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/logpmf}
*/
setReadOnly( hypergeometric, 'logpmf', require( '@stdlib/math/base/dists/hypergeometric/logpmf' ) );

/**
* @name mean
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/mean}
*/
setReadOnly( hypergeometric, 'mean', require( '@stdlib/math/base/dists/hypergeometric/mean' ) );

/**
* @name mode
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/mode}
*/
setReadOnly( hypergeometric, 'mode', require( '@stdlib/math/base/dists/hypergeometric/mode' ) );

/**
* @name pmf
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/pmf}
*/
setReadOnly( hypergeometric, 'pmf', require( '@stdlib/math/base/dists/hypergeometric/pmf' ) );

/**
* @name quantile
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/quantile}
*/
setReadOnly( hypergeometric, 'quantile', require( '@stdlib/math/base/dists/hypergeometric/quantile' ) );

/**
* @name skewness
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/skewness}
*/
setReadOnly( hypergeometric, 'skewness', require( '@stdlib/math/base/dists/hypergeometric/skewness' ) );

/**
* @name stdev
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/stdev}
*/
setReadOnly( hypergeometric, 'stdev', require( '@stdlib/math/base/dists/hypergeometric/stdev' ) );

/**
* @name variance
* @memberof hypergeometric
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/hypergeometric/variance}
*/
setReadOnly( hypergeometric, 'variance', require( '@stdlib/math/base/dists/hypergeometric/variance' ) );


// EXPORTS //

module.exports = hypergeometric;

},{"@stdlib/math/base/dists/hypergeometric/cdf":752,"@stdlib/math/base/dists/hypergeometric/ctor":755,"@stdlib/math/base/dists/hypergeometric/kurtosis":756,"@stdlib/math/base/dists/hypergeometric/logpmf":760,"@stdlib/math/base/dists/hypergeometric/mean":762,"@stdlib/math/base/dists/hypergeometric/mode":764,"@stdlib/math/base/dists/hypergeometric/pmf":767,"@stdlib/math/base/dists/hypergeometric/quantile":770,"@stdlib/math/base/dists/hypergeometric/skewness":772,"@stdlib/math/base/dists/hypergeometric/stdev":774,"@stdlib/math/base/dists/hypergeometric/variance":776,"@stdlib/utils/define-read-only-property":1937}],759:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var fln = require( '@stdlib/math/base/special/factorialln' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} logPMF
*
* @example
* var mylogpmf = factory( 30, 20, 5 );
* var y = mylogpmf( 4.0 );
* // returns ~0.34
*
* y = mylogpmf( 1.0 );
* // returns ~0.029
*/
function factory( N, K, n ) {
	var maxs;
	var mins;
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return constantFunction( NaN );
	}

	mins = max( 0, n + K - N );
	maxs = min( K, n );
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*/
	function logpmf( x ) {
		var ldenom;
		var lnum;
		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			isNonNegativeInteger( x ) &&
			mins <= x &&
			x <= maxs
		) {
			lnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );
			ldenom = fln( N ) + fln( x ) + fln( n - x );
			ldenom += fln( K - x ) + fln( N - K + x - n );
			return lnum - ldenom;
		}
		return NINF;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/utils/constant-function":1933}],760:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.
*
* @module @stdlib/math/base/dists/hypergeometric/logpmf
*
* @example
* var logpmf = require( '@stdlib/math/base/dists/hypergeometric/logpmf' );
*
* var y = logpmf( 1.0, 8, 4, 2 );
* // returns ~-0.56
*
* y = logpmf( 2.0, 8, 4, 2 );
* // returns ~-1.54
*
* y = logpmf( 0.0, 8, 4, 2 );
* // returns ~-1.54
*
* y = logpmf( 1.5, 8, 4, 2 );
* // returns -Infinity
*
* var mylogpmf = logpmf.factory( 30, 20, 5 );
* y = mylogpmf( 4.0 );
* // returns ~-1.079
*
* y = mylogpmf( 1.0 );
* // returns ~-3.54
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpmf = require( './logpmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpmf, 'factory', factory );


// EXPORTS //

module.exports = logpmf;

},{"./factory.js":759,"./logpmf.js":761,"@stdlib/utils/define-read-only-property":1937}],761:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var fln = require( '@stdlib/math/base/special/factorialln' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 1.0, 8, 4, 2 );
* // returns ~-0.56
*
* @example
* var y = logpmf( 2.0, 8, 4, 2 );
* // returns ~-1.54
*
* @example
* var y = logpmf( 0.0, 8, 4, 2 );
* // returns ~-1.54
*
* @example
* var y = logpmf( 1.5, 8, 4, 2 );
* // returns -Infinity
*
* @example
* var y = logpmf( NaN, 10, 5, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN, 5, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 10, NaN, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 10, 5, NaN );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 10.5, 5, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 5, 1.5, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 10, 5, -2.0 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 10, 5, 12 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 8, 3, 9 );
* // returns NaN
*/
function logpmf( x, N, K, n ) {
	var ldenom;
	var lnum;
	var maxs;
	var mins;

	if (
		isnan( x ) ||
		isnan( N ) ||
		isnan( K ) ||
		isnan( n ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	mins = max( 0, n + K - N );
	maxs = min( K, n );
	if (
		isNonNegativeInteger( x ) &&
		mins <= x &&
		x <= maxs
	) {
		lnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );
		ldenom = fln( N ) + fln( x ) + fln( n - x );
		ldenom += fln( K - x ) + fln( N - K + x - n );
		return lnum - ldenom;
	}
	return NINF;
}


// EXPORTS //

module.exports = logpmf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707}],762:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution expected value.
*
* @module @stdlib/math/base/dists/hypergeometric/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/hypergeometric/mean' );
*
* var v = mean( 16, 11, 4 );
* // returns 2.75
*
* v = mean( 2, 1, 1 );
* // returns 0.5
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":763}],763:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the expected value of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 16, 11, 4 );
* // returns 2.75
* @example
* var v = mean( 2, 1, 1 );
* // returns 0.5
* @example
* var v = mean( 10, 5, 12 );
* // returns NaN
* @example
* var v = mean( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = mean( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = mean( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = mean( NaN, 10, 4 );
* // returns NaN
* @example
* var v = mean( 20, NaN, 4 );
* // returns NaN
* @example
* var v = mean( 20, 10, NaN );
* // returns NaN
*/
function mean( N, K, n ) {
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n )
	) {
		return NaN;
	}
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return n * ( K / N );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134}],764:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution mode.
*
* @module @stdlib/math/base/dists/hypergeometric/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/hypergeometric/mode' );
*
* var v = mode( 16, 11, 4 );
* // returns 3
*
* v = mode( 2, 1, 1 );
* // returns 1
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":765}],765:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the mode of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 16, 11, 4 );
* // returns 3
* @example
* var v = mode( 2, 1, 1 );
* // returns 1
* @example
* var v = mode( 10, 5, 12 );
* // returns NaN
* @example
* var v = mode( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = mode( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = mode( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = mode( NaN, 10, 4 );
* // returns NaN
* @example
* var v = mode( 20, NaN, 4 );
* // returns NaN
* @example
* var v = mode( 20, 10, NaN );
* // returns NaN
*/
function mode( N, K, n ) {
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return floor( ( n+1 ) * ( K+1 ) / ( N+2 ) );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/floor":1484}],766:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var exp = require( '@stdlib/math/base/special/exp' );
var fln = require( '@stdlib/math/base/special/factorialln' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} PMF
*
* @example
* var mypmf = factory( 30, 20, 5 );
* var y = mypmf( 4.0 );
* // returns ~0.34
*
* y = mypmf( 1.0 );
* // returns ~0.029
*/
function factory( N, K, n ) {
	var maxs;
	var mins;
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return constantFunction( NaN );
	}

	mins = max( 0, n + K - N );
	maxs = min( K, n );
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*/
	function pmf( x ) {
		var ldenom;
		var lnum;
		var lpmf;
		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			isNonNegativeInteger( x ) &&
			mins <= x &&
			x <= maxs
		) {
			lnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );
			ldenom = fln( N ) + fln( x ) + fln( n - x );
			ldenom += fln( K - x ) + fln( N - K + x - n );
			lpmf = lnum - ldenom;
			return exp( lpmf );
		}
		return 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/utils/constant-function":1933}],767:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dists/hypergeometric/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dists/hypergeometric/pmf' );
*
* var y = pmf( 1.0, 8, 4, 2 );
* // returns ~0.571
*
* y = pmf( 2.0, 8, 4, 2 );
* // returns ~0.214
*
* y = pmf( 0.0, 8, 4, 2 );
* // returns ~0.214
*
* y = pmf( 1.5, 8, 4, 2 );
* // returns 0.0
*
* var mypmf = pmf.factory( 30, 20, 5 );
* y = mypmf( 4.0 );
* // returns ~0.34
*
* y = mypmf( 1.0 );
* // returns ~0.029
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":766,"./pmf.js":768,"@stdlib/utils/define-read-only-property":1937}],768:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var fln = require( '@stdlib/math/base/special/factorialln' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 1.0, 8, 4, 2 );
* // returns ~0.571
*
* @example
* var y = pmf( 2.0, 8, 4, 2 );
* // returns ~0.214
*
* @example
* var y = pmf( 0.0, 8, 4, 2 );
* // returns ~0.214
*
* @example
* var y = pmf( 1.5, 8, 4, 2 );
* // returns 0.0
*
* @example
* var y = pmf( NaN, 10, 5, 2 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 5, 2 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 10, NaN, 2 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 10, 5, NaN );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 10.5, 5, 2 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 5, 1.5, 2 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 10, 5, -2.0 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 10, 5, 12 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 8, 3, 9 );
* // returns NaN
*/
function pmf( x, N, K, n ) {
	var ldenom;
	var lnum;
	var lpmf;
	var maxs;
	var mins;

	if (
		isnan( x ) ||
		isnan( N ) ||
		isnan( K ) ||
		isnan( n ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	mins = max( 0, n + K - N );
	maxs = min( K, n );
	if (
		isNonNegativeInteger( x ) &&
		mins <= x &&
		x <= maxs
	) {
		lnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );
		ldenom = fln( N ) + fln( x ) + fln( n - x );
		ldenom += fln( K - x ) + fln( N - K + x - n );
		lpmf = lnum - ldenom;
		return exp( lpmf );
	}
	return 0.0;
}


// EXPORTS //

module.exports = pmf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707}],769:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var cdf = require( '@stdlib/math/base/dists/hypergeometric/cdf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 100, 20, 10 );
* var y = quantile( 0.2 );
* // returns 1
*
* y = quantile( 0.9 );
* // returns 4
*/
function factory( N, K, n ) {
	if (
		isnan( N ) ||
		isnan( K ) ||
		isnan( n ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a hypergeometric distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*/
	function quantile( p ) {
		var prob;
		var x;

		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p === 0.0 ) {
			return max( 0, n + K - N );
		}
		if ( p === 1.0 ) {
			return min( n, K );
		}
		x = max( 0, n + K - N );
		while ( true ) {
			prob = cdf( x, N, K, n );
			if ( prob > p ) {
				break;
			}
			x += 1;
		}
		return x;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/hypergeometric/cdf":752,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/utils/constant-function":1933}],770:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution quantile function.
*
* @module @stdlib/math/base/dists/hypergeometric/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/hypergeometric/quantile' );
*
* var y = quantile( 0.4, 40, 20, 10 );
* // returns 5
*
* y = quantile( 0.8, 60, 40, 20 );
* // returns 15
*
* y = quantile( 0.5, 100, 10, 10 );
* // returns 1
*
* y = quantile( 0.0, 100, 40, 20 );
* // returns 0
*
* y = quantile( 1.0, 100, 40, 20 );
* // returns 20
*
* var myquantile = factory( 100, 20, 10 );
* y = myquantile( 0.2 );
* // returns 1
*
* y = myquantile( 0.9 );
* // returns 4
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":769,"./quantile.js":771,"@stdlib/utils/define-read-only-property":1937}],771:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var cdf = require( '@stdlib/math/base/dists/hypergeometric/cdf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.4, 40, 20, 10 );
* // returns 5
*
* @example
* var y = quantile( 0.8, 60, 40, 20 );
* // returns 15
*
* @example
* var y = quantile( 0.5, 100, 10, 10 );
* // returns 1
*
* @example
* var y = quantile( 0.0, 100, 40, 20 );
* // returns 0
*
* @example
* var y = quantile( 1.0, 100, 40, 20 );
* // returns 20
*
* @example
* var y = quantile( NaN, 40, 20, 10 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, NaN, 20, 10 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, 40, NaN, 10 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, 40, 20, NaN );
* // returns NaN
*/
function quantile( p, N, K, n ) {
	var prob;
	var x;

	if (
		isnan( p ) ||
		isnan( N ) ||
		isnan( K ) ||
		isnan( n ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return max( 0, n + K - N );
	}
	if ( p === 1.0 ) {
		return min( n, K );
	}
	x = max( 0, n + K - N );
	while ( true ) {
		prob = cdf( x, N, K, n );
		if ( prob > p ) {
			break;
		}
		x += 1;
	}
	return x;
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/hypergeometric/cdf":752,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707}],772:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution skewness.
*
* @module @stdlib/math/base/dists/hypergeometric/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/hypergeometric/skewness' );
*
* var v = skewness( 16, 11, 4 );
* // returns ~-0.258
*
* v = skewness( 4, 2, 2 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":773}],773:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the skewness of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {number} skewness
*
* @example
* var v = skewness( 16, 11, 4 );
* // returns ~-0.258
* @example
* var v = skewness( 4, 2, 2 );
* // returns 0.0
* @example
* var v = skewness( 10, 5, 12 );
* // returns NaN
* @example
* var v = skewness( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = skewness( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = skewness( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = skewness( NaN, 10, 4 );
* // returns NaN
* @example
* var v = skewness( 20, NaN, 4 );
* // returns NaN
* @example
* var v = skewness( 20, 10, NaN );
* // returns NaN
*/
function skewness( N, K, n ) {
	var p;
	var q;
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	p = ( N - (2*K) ) * sqrt( N - 1 ) * ( N - (2*n) );
	q = sqrt( n * K * ( N-K ) * ( N-n ) ) * ( N - 2 );
	return p / q;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/sqrt":1826}],774:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution standard deviation.
*
* @module @stdlib/math/base/dists/hypergeometric/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/hypergeometric/stdev' );
*
* var v = stdev( 16, 11, 4 );
* // returns ~0.829
*
* v = stdev( 2, 1, 1 );
* // returns 0.5
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":775}],775:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 16, 11, 4 );
* // returns ~0.829
* @example
* var v = stdev( 2, 1, 1 );
* // returns 0.5
* @example
* var v = stdev( 10, 5, 12 );
* // returns NaN
* @example
* var v = stdev( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = stdev( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = stdev( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = stdev( NaN, 10, 4 );
* // returns NaN
* @example
* var v = stdev( 20, NaN, 4 );
* // returns NaN
* @example
* var v = stdev( 20, 10, NaN );
* // returns NaN
*/
function stdev( N, K, n ) {
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return sqrt( n * ( K/N ) * ( (N-K)/N ) * ( (N-n)/(N-1) ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/sqrt":1826}],776:[function(require,module,exports){
'use strict';

/**
* Hypergeometric distribution variance.
*
* @module @stdlib/math/base/dists/hypergeometric/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/hypergeometric/variance' );
*
* var v = variance( 16, 11, 4 );
* // returns ~0.688
*
* v = variance( 2, 1, 1 );
* // returns 0.25
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":777}],777:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the variance of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 16, 11, 4 );
* // returns ~0.688
* @example
* var v = variance( 2, 1, 1 );
* // returns 0.25
* @example
* var v = variance( 10, 5, 12 );
* // returns NaN
* @example
* var v = variance( 10.3, 10, 4 );
* // returns NaN
* @example
* var v = variance( 10, 5.5, 4 );
* // returns NaN
* @example
* var v = variance( 10, 5, 4.5 );
* // returns NaN
* @example
* var v = variance( NaN, 10, 4 );
* // returns NaN
* @example
* var v = variance( 20, NaN, 4 );
* // returns NaN
* @example
* var v = variance( 20, 10, NaN );
* // returns NaN
*/
function variance( N, K, n ) {
	if (
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( K ) ||
		!isNonNegativeInteger( n ) ||
		N === PINF ||
		K === PINF ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return n * ( K/N ) * ( (N-K)/N ) * ( (N-n)/(N-1) );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nonnegative-integer":134}],778:[function(require,module,exports){
'use strict';

// MODULES //

var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.607
*
* @example
* var y = cdf( 2.0, 3.0, 1.0 );
* // returns ~0.986
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return gammainc( beta / x, alpha, true, true );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammainc":1541}],779:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.809
*
* y = cdf( 2.0 );
* // returns ~0.96
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0 ) {
			return 0;
		}
		return gammainc( beta / x, alpha, true, true );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammainc":1541,"@stdlib/utils/constant-function":1933}],780:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/invgamma/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/invgamma/cdf' );
*
* var y = cdf( 1.0, 8.0, 3.0 );
* // returns ~0.988
*
* y = cdf( 0.0, 1.0, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2.0, 0.5 );
* y = mycdf( 0.5 );
* // returns ~0.736
*
* y = mycdf( 2.0 );
* // returns ~0.973
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":778,"./factory.js":779,"@stdlib/utils/define-read-only-property":1937}],781:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/invgamma/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/invgamma/kurtosis' );
var mean = require( '@stdlib/math/base/dists/invgamma/mean' );
var mode = require( '@stdlib/math/base/dists/invgamma/mode' );
var quantile = require( '@stdlib/math/base/dists/invgamma/quantile' );
var logpdf = require( '@stdlib/math/base/dists/invgamma/logpdf' );
var skewness = require( '@stdlib/math/base/dists/invgamma/skewness' );
var stdev = require( '@stdlib/math/base/dists/invgamma/stdev' );
var variance = require( '@stdlib/math/base/dists/invgamma/variance' );
var cdf = require( '@stdlib/math/base/dists/invgamma/cdf' );
var pdf = require( '@stdlib/math/base/dists/invgamma/pdf' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function invgammaCDF( x ) {
	return cdf( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function invgammaLogPDF( x ) {
	return logpdf( x, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function invgammaPDF( x ) {
	return pdf( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function invgammaQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
}


// MAIN //

/**
* Inverse gamma distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {InvGamma} distribution instance
*
* @example
* var invgamma = new InvGamma( 1.0, 1.0 );
*
* var y = invgamma.cdf( 0.8 );
* // returns ~0.287
*
* var mode = invgamma.mode;
* // returns 0.5
*/
function InvGamma() {
	var alpha;
	var beta;
	if ( !(this instanceof InvGamma) ) {
		if ( arguments.length === 0 ) {
			return new InvGamma();
		}
		return new InvGamma( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Inverse gamma distribution differential entropy.
*
* @name entropy
* @memberof InvGamma.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.entropy;
* // returns ~1.966
*/
Object.defineProperty( InvGamma.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution excess kurtosis.
*
* @name kurtosis
* @memberof InvGamma.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var invgamma = new InvGamma( 6.0, 12.0 );
*
* var v = invgamma.kurtosis;
* // returns 19.0
*/
Object.defineProperty( InvGamma.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution expected value.
*
* @name mean
* @memberof InvGamma.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.mean;
* // returns 4.0
*/
Object.defineProperty( InvGamma.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution mode.
*
* @name mode
* @memberof InvGamma.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.mode;
* // returns 2.4
*/
Object.defineProperty( InvGamma.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution skewness.
*
* @name skewness
* @memberof InvGamma.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.skewness;
* // returns ~5.657
*/
Object.defineProperty( InvGamma.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution standard deviation.
*
* @name stdev
* @memberof InvGamma.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.stdev;
* // returns ~2.828
*/
Object.defineProperty( InvGamma.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.alpha, this.beta );
	}
});

/**
* Inverse gamma distribution variance.
*
* @name variance
* @memberof InvGamma.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.variance;
* // returns 8.0
*/
Object.defineProperty( InvGamma.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof InvGamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.cdf( 0.5 );
* // returns ~0.003
*/
setReadOnly( InvGamma.prototype, 'cdf', invgammaCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof InvGamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.logpdf( 0.8 );
* // returns ~-1.556
*/
setReadOnly( InvGamma.prototype, 'logpdf', invgammaLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof InvGamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.pdf( 0.8 );
* // returns ~0.211
*/
setReadOnly( InvGamma.prototype, 'pdf', invgammaPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof InvGamma.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.quantile( 0.5 );
* // returns ~2.383
*/
setReadOnly( InvGamma.prototype, 'quantile', invgammaQuantile );


// EXPORTS //

module.exports = InvGamma;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/invgamma/cdf":780,"@stdlib/math/base/dists/invgamma/entropy":784,"@stdlib/math/base/dists/invgamma/kurtosis":785,"@stdlib/math/base/dists/invgamma/logpdf":789,"@stdlib/math/base/dists/invgamma/mean":791,"@stdlib/math/base/dists/invgamma/mode":793,"@stdlib/math/base/dists/invgamma/pdf":796,"@stdlib/math/base/dists/invgamma/quantile":799,"@stdlib/math/base/dists/invgamma/skewness":801,"@stdlib/math/base/dists/invgamma/stdev":803,"@stdlib/math/base/dists/invgamma/variance":805,"@stdlib/utils/define-read-only-property":1937}],782:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution constructor.
*
* @module @stdlib/math/base/dists/invgamma/ctor
*
* @example
* var InvGamma = require( '@stdlib/math/base/dists/invgamma/ctor' );
*
* var invgamma = new InvGamma( 1.0, 1.0 );
*
* var y = invgamma.cdf( 0.8 );
* // returns ~0.287
*
* var mode = invgamma.mode;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":781}],783:[function(require,module,exports){
'use strict';

// MODULES //

var digamma = require( '@stdlib/math/base/special/digamma' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns ~2.154
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.996
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.922
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = alpha + ln( beta*gamma( alpha ) );
	out -= ( 1.0+alpha ) * digamma( alpha );
	return out;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/ln":1679}],784:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution differential entropy.
*
* @module @stdlib/math/base/dists/invgamma/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/invgamma/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns ~2.154
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.996
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.922
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":783}],785:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/invgamma/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/invgamma/kurtosis' );
*
* var v = kurtosis( 7.0, 5.0 );
* // returns 12.0
*
* v = kurtosis( 6.0, 12.0 );
* // returns 19.0
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~8.7
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":786}],786:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 6.0, 1.0 );
* // returns 19.0
* @example
* var v = kurtosis( 5.0, 12.0 );
* // returns 42.0
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~8.7
* @example
* var v = kurtosis( 5.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( 6.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 4.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( ( 30.0*alpha ) - 66.0 ) / ( ( alpha-3.0 ) * ( alpha-4.0 ) );
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],787:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace invgamma
*/
var invgamma = {};

/**
* @name cdf
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/cdf}
*/
setReadOnly( invgamma, 'cdf', require( '@stdlib/math/base/dists/invgamma/cdf' ) );

/**
* @name entropy
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/entropy}
*/
setReadOnly( invgamma, 'entropy', require( '@stdlib/math/base/dists/invgamma/entropy' ) );

/**
* @name InvGamma
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/ctor}
*/
setReadOnly( invgamma, 'InvGamma', require( '@stdlib/math/base/dists/invgamma/ctor' ) );

/**
* @name kurtosis
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/kurtosis}
*/
setReadOnly( invgamma, 'kurtosis', require( '@stdlib/math/base/dists/invgamma/kurtosis' ) );

/**
* @name logpdf
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/logpdf}
*/
setReadOnly( invgamma, 'logpdf', require( '@stdlib/math/base/dists/invgamma/logpdf' ) );

/**
* @name mean
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/mean}
*/
setReadOnly( invgamma, 'mean', require( '@stdlib/math/base/dists/invgamma/mean' ) );

/**
* @name mode
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/mode}
*/
setReadOnly( invgamma, 'mode', require( '@stdlib/math/base/dists/invgamma/mode' ) );

/**
* @name pdf
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/pdf}
*/
setReadOnly( invgamma, 'pdf', require( '@stdlib/math/base/dists/invgamma/pdf' ) );

/**
* @name quantile
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/quantile}
*/
setReadOnly( invgamma, 'quantile', require( '@stdlib/math/base/dists/invgamma/quantile' ) );

/**
* @name skewness
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/skewness}
*/
setReadOnly( invgamma, 'skewness', require( '@stdlib/math/base/dists/invgamma/skewness' ) );

/**
* @name stdev
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/stdev}
*/
setReadOnly( invgamma, 'stdev', require( '@stdlib/math/base/dists/invgamma/stdev' ) );

/**
* @name variance
* @memberof invgamma
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/invgamma/variance}
*/
setReadOnly( invgamma, 'variance', require( '@stdlib/math/base/dists/invgamma/variance' ) );


// EXPORTS //

module.exports = invgamma;

},{"@stdlib/math/base/dists/invgamma/cdf":780,"@stdlib/math/base/dists/invgamma/ctor":782,"@stdlib/math/base/dists/invgamma/entropy":784,"@stdlib/math/base/dists/invgamma/kurtosis":785,"@stdlib/math/base/dists/invgamma/logpdf":789,"@stdlib/math/base/dists/invgamma/mean":791,"@stdlib/math/base/dists/invgamma/mode":793,"@stdlib/math/base/dists/invgamma/pdf":796,"@stdlib/math/base/dists/invgamma/quantile":799,"@stdlib/math/base/dists/invgamma/skewness":801,"@stdlib/math/base/dists/invgamma/stdev":803,"@stdlib/math/base/dists/invgamma/variance":805,"@stdlib/utils/define-read-only-property":1937}],788:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 3.0, 1.5 );
*
* var y = logpdf( 1.0 );
* // returns ~-0.977
*
* y = logpdf( 2.0 );
* // returns ~-3.0
*/
function factory( alpha, beta ) {
	var firstTerm;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	firstTerm = ( alpha * ln( beta ) ) - gammaln( alpha );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for an inverse gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return NINF;
		}
		out = firstTerm - ( ( alpha + 1.0 ) * ln( x ) ) - ( beta / x );
		return out;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],789:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability density function (PDF) for an inverse gamma distribution.
*
* @module @stdlib/math/base/dists/invgamma/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/invgamma/logpdf' );
*
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.112
*
* var mylogPDF = logpdf.factory( 6.0, 7.0 );
* y = mylogPDF( 2.0 );
* // returns ~-1.464
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":788,"./logpdf.js":790,"@stdlib/utils/define-read-only-property":1937}],790:[function(require,module,exports){
'use strict';

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.112
*
* @example
* var y = logpdf( 0.2, 1.0, 1.0 );
* // returns ~-1.781
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative shape parameter:
* var y = logpdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function logpdf( x, alpha, beta ) {
	var out;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return NINF;
	}
	out = (alpha * ln( beta )) - gammaln( alpha );
	out -= (alpha + 1.0) * ln( x );
	out -= beta / x;
	return out;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679}],791:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution expected value.
*
* @module @stdlib/math/base/dists/invgamma/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/invgamma/mean' );
*
* var v = mean( 4.0, 12.0 );
* // returns 4.0
*
* v = mean( 8.0, 2.0 );
* // returns ~0.286
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":792}],792:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 4.0
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~0.286
* @example
* var v = mean( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 1.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( alpha - 1.0 );
}


// EXPORTS //

module.exports = mean;

},{}],793:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution mode.
*
* @module @stdlib/math/base/dists/invgamma/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/invgamma/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.5
*
* v = mode( 4.0, 12.0 );
* // returns 2.4
*
* v = mode( 8.0, 2.0 );
* // returns ~0.222
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":794}],794:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the mode of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.5
* @example
* var v = mode( 4.0, 12.0 );
* // returns 2.4
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~0.222
* @example
* var v = mode( 0.5, 2.0 );
* // returns NaN
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( alpha + 1.0 );
}


// EXPORTS //

module.exports = mode;

},{}],795:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 1.5 );
*
* var y = pdf( 1.0 );
* // returns ~0.377
*
* y = pdf( 2.0 );
* // returns ~0.05
*/
function factory( alpha, beta ) {
	var firstTerm;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	firstTerm = ( alpha * ln( beta ) ) - gammaln( alpha );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an inverse gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var lnl;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		lnl = firstTerm - (( alpha + 1.0 ) * ln( x )) - (beta / x);
		return exp( lnl );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],796:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/invgamma/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/invgamma/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.121
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 2.0 );
* // returns ~0.231
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":795,"./pdf.js":797,"@stdlib/utils/define-read-only-property":1937}],797:[function(require,module,exports){
'use strict';

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.121
*
* @example
* var y = pdf( 0.2, 1.0, 1.0 );
* // returns ~0.168
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative shape parameter:
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	var lnl;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	lnl = (alpha * ln( beta )) - gammaln( alpha );
	lnl -= (alpha + 1.0) * ln( x );
	lnl -= beta / x;
	return exp( lnl );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679}],798:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.229
*
* y = quantile( 0.8 );
* // returns ~0.427
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for an inverse gamma distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return beta / gammaincinv( p, alpha, true );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammaincinv":1566,"@stdlib/utils/constant-function":1933}],799:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution quantile function.
*
* @module @stdlib/math/base/dists/invgamma/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/invgamma/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~4.481
*
* var myquantile = quantile.factory( 2.0, 2.0 );
* y = myquantile( 0.8 );
* // returns ~2.426
*
* y = myquantile( 0.4 );
* // returns ~0.989
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":798,"./quantile.js":800,"@stdlib/utils/define-read-only-property":1937}],800:[function(require,module,exports){
'use strict';

// MODULES //

var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a Inverse Gamma distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~1.213
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.545
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1.0, 1.0 );
*
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		isnan( p ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return beta / gammaincinv( p, alpha, true );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gammaincinv":1566}],801:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution skewness.
*
* @module @stdlib/math/base/dists/invgamma/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/invgamma/skewness' );
*
* var v = skewness( 4.0, 12.0 );
* // returns ~5.657
*
* v = skewness( 8.0, 2.0 );
* // returns ~1.96
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":802}],802:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~5.657
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~1.96
* @example
* var v = skewness( 2.0, 1.0 );
* // returns NaN
* @example
* var v = skewness( 4.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 4.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 3.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 4.0 * sqrt( alpha - 2.0 ) / ( alpha - 3.0 );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],803:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution standard deviation.
*
* @module @stdlib/math/base/dists/invgamma/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/invgamma/stdev' );
*
* var v = stdev( 5.0, 7.0 );
* // returns ~1.01
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.118
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":804}],804:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 3.0, 5.0 );
* // returns ~2.5
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.828
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.118
* @example
* var v = stdev( 3.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( 1.5, 1.0 );
* // returns NaN
* @example
* var v = stdev( 3.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( alpha, beta ) {
	if ( alpha <= 2.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( ( alpha-1.0 ) * sqrt( alpha-2.0 ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1826}],805:[function(require,module,exports){
'use strict';

/**
* Inverse gamma distribution variance.
*
* @module @stdlib/math/base/dists/invgamma/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/invgamma/variance' );
*
* var v = variance( 5.0, 7.0 );
* // returns ~1.021
*
* v = variance( 4.0, 12.0 );
* // returns 8.0
*
* v = variance( 8.0, 2.0 );
* // returns ~0.014
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":806}],806:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 3.0, 5.0 );
* // returns ~6.25
* @example
* var v = variance( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.014
* @example
* var v = variance( 3.0, -0.1 );
* // returns NaN
* @example
* var v = variance( 1.5, 1.0 );
* // returns NaN
* @example
* var v = variance( 3.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	if ( alpha <= 2.0 || beta <= 0.0 ) {
		return NaN;
	}
	return ( beta*beta ) / ( pow( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/special/pow":1743}],807:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.5
*
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.684
*
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.078
*
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.878
*
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( 1.5, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function cdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x >= 1.0 ) {
		return 1.0;
	}
	return 1.0 - pow( 1.0 - pow( x, a ), b );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],808:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.675
*
* y = cdf( 0.3 );
* // returns ~0.327
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x >= 1.0 ) {
			return 1.0;
		}
		return 1.0 - pow( 1.0 - pow( x, a ), b );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],809:[function(require,module,exports){
'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/math/base/dists/kumaraswamy/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/kumaraswamy/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.684
*
* @example
* var factory = require( '@stdlib/math/base/dists/kumaraswamy/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.675
*
* y = cdf( 0.3 );
* // returns ~0.327
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":807,"./factory.js":808,"@stdlib/utils/define-read-only-property":1937}],810:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var kurtosis = require( '@stdlib/math/base/dists/kumaraswamy/kurtosis' );
var mean = require( '@stdlib/math/base/dists/kumaraswamy/mean' );
var mode = require( '@stdlib/math/base/dists/kumaraswamy/mode' );
var skewness = require( '@stdlib/math/base/dists/kumaraswamy/skewness' );
var stdev = require( '@stdlib/math/base/dists/kumaraswamy/stdev' );
var variance = require( '@stdlib/math/base/dists/kumaraswamy/variance' );
var cdf = require( '@stdlib/math/base/dists/kumaraswamy/cdf' );
var logcdf = require( '@stdlib/math/base/dists/kumaraswamy/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/kumaraswamy/logpdf' );
var pdf = require( '@stdlib/math/base/dists/kumaraswamy/pdf' );
var quantile = require( '@stdlib/math/base/dists/kumaraswamy/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function kumaraswamyCDF( x ) {
	return cdf( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function kumaraswamyLogCDF( x ) {
	return logcdf( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function kumaraswamyLogPDF( x ) {
	return logpdf( x, this.a, this.b );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function kumaraswamyPDF( x ) {
	return pdf( x, this.a, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function kumaraswamyQuantile( p ) {
	return quantile( p, this.a, this.b );
}


// MAIN //

/**
* Kumaraswamy's double bounded distribution constructor.
*
* @constructor
* @param {PositiveNumber} [a=1.0] - first shape parameter
* @param {PositiveNumber} [b=1.0] - second shape parameter
* @throws {TypeError} `a` must be a positive number
* @throws {TypeError} `b` must be a positive number
* @returns {Kumaraswamy} distribution instance
*
* @example
* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );
*
* var y = kumaraswamy.cdf( 0.8 );
* // returns 0.8
*
* var mode = kumaraswamy.mode;
* // returns NaN
*/
function Kumaraswamy() {
	var a;
	var b;
	if ( !(this instanceof Kumaraswamy) ) {
		if ( arguments.length === 0 ) {
			return new Kumaraswamy();
		}
		return new Kumaraswamy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isPositive( a ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `a` must be a positive number. Value: `' + a + '`' );
		}
		if ( !isPositive( b ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `b` must be a positive number. Value: `' + b + '`' );
		}
	} else {
		a = 1.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Kumaraswamy's double bounded distribution excess kurtosis.
*
* @name kurtosis
* @memberof Kumaraswamy.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.kurtosis;
* // returns ~2.704
*/
Object.defineProperty( Kumaraswamy.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution expected value.
*
* @name mean
* @memberof Kumaraswamy.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.mean;
* // returns ~0.481
*/
Object.defineProperty( Kumaraswamy.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution mode.
*
* @name mode
* @memberof Kumaraswamy.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.mode;
* // returns ~0.503
*/
Object.defineProperty( Kumaraswamy.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution skewness.
*
* @name skewness
* @memberof Kumaraswamy.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.skewness;
* // returns ~-0.201
*/
Object.defineProperty( Kumaraswamy.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution standard deviation.
*
* @name stdev
* @memberof Kumaraswamy.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.stdev;
* // returns ~0.13
*/
Object.defineProperty( Kumaraswamy.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b );
	}
});

/**
* Kumaraswamy's double bounded distribution variance.
*
* @name variance
* @memberof Kumaraswamy.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.variance;
* // returns ~0.017
*/
Object.defineProperty( Kumaraswamy.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.cdf( 0.5 );
* // returns ~0.684
*/
setReadOnly( Kumaraswamy.prototype, 'cdf', kumaraswamyCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.logcdf( 0.5 );
* // returns ~-0.38
*/
setReadOnly( Kumaraswamy.prototype, 'logcdf', kumaraswamyLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.logpdf( 0.9 );
* // returns ~-3.016
*/
setReadOnly( Kumaraswamy.prototype, 'logpdf', kumaraswamyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.pdf( 0.9 );
* // returns ~0.049
*/
setReadOnly( Kumaraswamy.prototype, 'pdf', kumaraswamyPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.quantile( 0.5 );
* // returns ~0.399
*/
setReadOnly( Kumaraswamy.prototype, 'quantile', kumaraswamyQuantile );


// EXPORTS //

module.exports = Kumaraswamy;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/kumaraswamy/cdf":809,"@stdlib/math/base/dists/kumaraswamy/kurtosis":812,"@stdlib/math/base/dists/kumaraswamy/logcdf":816,"@stdlib/math/base/dists/kumaraswamy/logpdf":819,"@stdlib/math/base/dists/kumaraswamy/mean":821,"@stdlib/math/base/dists/kumaraswamy/mode":825,"@stdlib/math/base/dists/kumaraswamy/pdf":828,"@stdlib/math/base/dists/kumaraswamy/quantile":831,"@stdlib/math/base/dists/kumaraswamy/skewness":833,"@stdlib/math/base/dists/kumaraswamy/stdev":835,"@stdlib/math/base/dists/kumaraswamy/variance":837,"@stdlib/utils/define-read-only-property":1937}],811:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution constructor.
*
* @module @stdlib/math/base/dists/kumaraswamy/ctor
*
* @example
* var Kumaraswamy = require( '@stdlib/math/base/dists/kumaraswamy/ctor' );
*
* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );
*
* var y = kumaraswamy.cdf( 0.8 );
* // returns 0.8
*
* var mode = kumaraswamy.mode;
* // returns NaN
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":810}],812:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/kumaraswamy/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/kumaraswamy/kurtosis' );
*
* var v = kurtosis( 2.0, 1.0 );
* // returns ~2.4
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~2.704
*
* v = kurtosis( 16.0, 8.0 );
* // returns ~4.311
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":813}],813:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );


// MAIN //

/**
* Returns the excess kurtosis of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.5, 1.0 );
* // returns ~2.143
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~2.704
* @example
* var v = kurtosis( 12.0, 2.0 );
* // returns ~4.817
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( a, b ) {
	var sigma2;
	var out;
	var mu2;
	var m1;
	var m2;
	var m3;
	var m4;
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * beta( 1.0 + ( 1.0/a ), b );
	m2 = b * beta( 1.0 + ( 2.0/a ), b );
	m3 = b * beta( 1.0 + ( 3.0/a ), b );
	m4 = b * beta( 1.0 + ( 4.0/a ), b );
	sigma2 = m2 - ( m1*m1 );
	mu2 = m1 * m1;
	out = ( m4 - ( 4.0*m3*m1 ) + ( 6.0*m2*mu2 ) - ( 3.0*mu2*mu2 ) );
	out /= sigma2*sigma2;
	return out;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/beta":1360}],814:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace kumaraswamy
*/
var kumaraswamy = {};

/**
* @name cdf
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/cdf}
*/
setReadOnly( kumaraswamy, 'cdf', require( '@stdlib/math/base/dists/kumaraswamy/cdf' ) );

/**
* @name Kumaraswamy
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/ctor}
*/
setReadOnly( kumaraswamy, 'Kumaraswamy', require( '@stdlib/math/base/dists/kumaraswamy/ctor' ) );

/**
* @name kurtosis
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/kurtosis}
*/
setReadOnly( kumaraswamy, 'kurtosis', require( '@stdlib/math/base/dists/kumaraswamy/kurtosis' ) );

/**
* @name logcdf
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/logcdf}
*/
setReadOnly( kumaraswamy, 'logcdf', require( '@stdlib/math/base/dists/kumaraswamy/logcdf' ) );

/**
* @name logpdf
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/logpdf}
*/
setReadOnly( kumaraswamy, 'logpdf', require( '@stdlib/math/base/dists/kumaraswamy/logpdf' ) );

/**
* @name mean
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/mean}
*/
setReadOnly( kumaraswamy, 'mean', require( '@stdlib/math/base/dists/kumaraswamy/mean' ) );

/**
* @name median
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/median}
*/
setReadOnly( kumaraswamy, 'median', require( '@stdlib/math/base/dists/kumaraswamy/median' ) );

/**
* @name mode
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/mode}
*/
setReadOnly( kumaraswamy, 'mode', require( '@stdlib/math/base/dists/kumaraswamy/mode' ) );

/**
* @name pdf
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/pdf}
*/
setReadOnly( kumaraswamy, 'pdf', require( '@stdlib/math/base/dists/kumaraswamy/pdf' ) );

/**
* @name quantile
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/quantile}
*/
setReadOnly( kumaraswamy, 'quantile', require( '@stdlib/math/base/dists/kumaraswamy/quantile' ) );

/**
* @name skewness
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/skewness}
*/
setReadOnly( kumaraswamy, 'skewness', require( '@stdlib/math/base/dists/kumaraswamy/skewness' ) );

/**
* @name stdev
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/stdev}
*/
setReadOnly( kumaraswamy, 'stdev', require( '@stdlib/math/base/dists/kumaraswamy/stdev' ) );

/**
* @name variance
* @memberof kumaraswamy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy/variance}
*/
setReadOnly( kumaraswamy, 'variance', require( '@stdlib/math/base/dists/kumaraswamy/variance' ) );


// EXPORTS //

module.exports = kumaraswamy;

},{"@stdlib/math/base/dists/kumaraswamy/cdf":809,"@stdlib/math/base/dists/kumaraswamy/ctor":811,"@stdlib/math/base/dists/kumaraswamy/kurtosis":812,"@stdlib/math/base/dists/kumaraswamy/logcdf":816,"@stdlib/math/base/dists/kumaraswamy/logpdf":819,"@stdlib/math/base/dists/kumaraswamy/mean":821,"@stdlib/math/base/dists/kumaraswamy/median":823,"@stdlib/math/base/dists/kumaraswamy/mode":825,"@stdlib/math/base/dists/kumaraswamy/pdf":828,"@stdlib/math/base/dists/kumaraswamy/quantile":831,"@stdlib/math/base/dists/kumaraswamy/skewness":833,"@stdlib/math/base/dists/kumaraswamy/stdev":835,"@stdlib/math/base/dists/kumaraswamy/variance":837,"@stdlib/utils/define-read-only-property":1937}],815:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} CDF
*
* @example
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.393
*
* y = logcdf( 0.3 );
* // returns ~-1.118
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return NINF;
		}
		if ( x >= 1.0 ) {
			return 0.0;
		}
		return ln( 1.0 - pow( 1.0 - pow( x, a ), b ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],816:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/math/base/dists/kumaraswamy/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/kumaraswamy/logcdf' );
*
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-0.693
*
* y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.38
*
* @example
* var factory = require( '@stdlib/math/base/dists/kumaraswamy/logcdf' ).factory;
*
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.393
*
* y = logcdf( 0.3 );
* // returns ~-1.118
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":815,"./logcdf.js":817,"@stdlib/utils/define-read-only-property":1937}],817:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-0.693
*
* @example
* var y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.38
*
* @example
* var y = logcdf( 0.2, 2.0, 2.0 );
* // returns ~-2.546
*
* @example
* var y = logcdf( 0.8, 4.0, 4.0 );
* // returns ~-0.13
*
* @example
* var y = logcdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = logcdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function logcdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return NINF;
	}
	if ( x >= 1.0 ) {
		return 0.0;
	}
	return ln( 1.0 - pow( 1.0 - pow( x, a ), b ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],818:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.151
*
* y = logpdf( 0.3 );
* // returns ~-0.387
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;

		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 || x >= 1.0 ) {
			return NINF;
		}
		out = ln( a*b );
		out += ( a - 1.0 ) * ln( x );
		out += ( b - 1.0 ) * ln( 1.0 - pow( x, a ) );
		return out;
	}
}


// EXPORTS //

module.exports = factory;


},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],819:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/math/base/dists/kumaraswamy/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/kumaraswamy/logpdf' );
*
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.523
*
* @example
* var factory = require( '@stdlib/math/base/dists/kumaraswamy/logpdf' ).factory;
*
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.151
*
* y = logpdf( 0.3 );
* // returns ~-0.387
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":818,"./logpdf.js":820,"@stdlib/utils/define-read-only-property":1937}],820:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* @example
* var y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.523
*
* @example
* var y = logpdf( 0.2, 2.0, 2.0 );
* // returns ~-0.264
*
* @example
* var y = logpdf( 0.8, 4.0, 4.0 );
* // returns ~0.522
*
* @example
* var y = logpdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 1.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function logpdf( x, a, b ) {
	var out;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 || x >= 1.0 ) {
		return NINF;
	}
	out = ln( a*b );
	out += ( a - 1.0 ) * ln( x );
	out += ( b - 1.0 ) * ln( 1.0 - pow( x, a ) );
	return out;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],821:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution mean.
*
* @module @stdlib/math/base/dists/kumaraswamy/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/kumaraswamy/mean' );
*
* var v = mean( 2.0, 1.5 );
* // returns ~0.589
*
* v = mean( 4.0, 12.0 );
* // returns ~0.481
*
* v = mean( 16.0, 8.0 );
* // returns ~0.846
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":822}],822:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );


// MAIN //

/**
* Returns the expected value of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.5, 1.5 );
* // returns ~0.512
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.481
* @example
* var v = mean( 12.0, 2.0 );
* // returns ~0.886
* @example
* var v = mean( 1.5, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.5 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( a, b ) {
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return b * beta( 1.0 + ( 1.0/a ), b );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/beta":1360}],823:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution median.
*
* @module @stdlib/math/base/dists/kumaraswamy/median
*
* @example
* var median = require( '@stdlib/math/base/dists/kumaraswamy/median' );
*
* var v = median( 2.0, 1.0 );
* // returns ~0.707
*
* v = median( 4.0, 12.0 );
* // returns ~0.487
*
* v = median( 16.0, 8.0 );
* // returns ~0.856
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":824}],824:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the median of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 0.5, 1.0 );
* // returns 0.25
* @example
* var v = median( 4.0, 12.0 );
* // returns ~0.487
* @example
* var v = median( 12.0, 2.0 );
* // returns ~0.903
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( a, b ) {
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return pow( 1.0 - pow( 2.0, -1.0/b ), 1.0/a );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],825:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution mode.
*
* @module @stdlib/math/base/dists/kumaraswamy/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/kumaraswamy/mode' );
*
* var v = mode( 2.0, 1.5 );
* // returns ~0.707
*
* v = mode( 4.0, 12.0 );
* // returns ~0.503
*
* v = mode( 16.0, 8.0 );
* // returns ~0.875
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":826}],826:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the mode of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.5, 1.5 );
* // returns ~0.543
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.503
* @example
* var v = mode( 12.0, 2.0 );
* // returns ~0.94
* @example
* var v = mode( 1.0, 1.0 );
* // returns NaN
* @example
* var v = mode( 1.5, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.5 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( a, b ) {
	if (
		isnan( a ) ||
		a < 1.0 ||
		isnan( b ) ||
		b < 1.0 ||
		( a === 1.0 && b === 1.0 )
	) {
		return NaN;
	}
	return pow( ( a-1.0 ) / ( (a*b) - 1.0 ), 1.0/a );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],827:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.86
*
* y = pdf( 0.3 );
* // returns ~0.679
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 || x >= 1.0 ) {
			return 0.0;
		}
		return ( a*b ) * pow( x, a - 1.0 ) * pow( 1.0 - pow( x, a ), b - 1.0 );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],828:[function(require,module,exports){
'use strict';

/**
* Evaluate the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/math/base/dists/kumaraswamy/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/kumaraswamy/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns ~1.688
*
* @example
* var factory = require( '@stdlib/math/base/dists/kumaraswamy/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.86
*
* y = pdf( 0.3 );
* // returns ~0.679
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":827,"./pdf.js":829,"@stdlib/utils/define-read-only-property":1937}],829:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Kumaraswamy's double bounded distribution distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns ~1.688
*
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.768
*
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~1.686
*
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function pdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 || x >= 1.0 ) {
		return 0.0;
	}
	return ( a*b ) * pow( x, a - 1.0 ) * pow( 1.0 - pow( x, a ), b - 1.0 );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],830:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.5, 0.5 );
*
* var y = quantile( 0.8 );
* // returns ~0.64
*
* y = quantile( 0.3 );
* // returns ~0.09
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {Probability} p - input probability
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 2.0 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return pow( 1.0 - pow( 1.0-p, 1.0/b ), 1.0/a );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],831:[function(require,module,exports){
'use strict';

/**
* Evaluate the quantile function for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/math/base/dists/kumaraswamy/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/kumaraswamy/quantile' );
*
* var y = quantile( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = quantile( 0.5, 2.0, 4.0 );
* // returns ~0.399
*
* @example
* var factory = require( '@stdlib/math/base/dists/kumaraswamy/quantile' ).factory;
*
* var quantile = factory( 0.5, 0.5 );
*
* var y = quantile( 0.8 );
* // returns ~0.922
*
* y = quantile( 0.3 );
* // returns ~0.26
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":830,"./quantile.js":832,"@stdlib/utils/define-read-only-property":1937}],832:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the quantile function for a Kumaraswamy's double bounded distribution distribution with first shape parameter `a` and second shape parameter `b` at a probability `p`.
*
* @param {Probability} p - input probability
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* @example
* var y = quantile( 0.5, 2.0, 4.0 );
* // returns ~0.399
*
* @example
* var y = quantile( 0.2, 2.0, 2.0 );
* // returns ~0.325
*
* @example
* var y = quantile( 0.8, 4.0, 4.0 );
* // returns ~0.759
*
* @example
* var y = quantile( -0.5, 4.0, 2.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5 4.0, 2.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.8, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.8, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.1, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.1, 1.0, NaN );
* // returns NaN
*/
function quantile( p, a, b ) {
	if (
		isnan( p ) ||
		isnan( a ) ||
		isnan( b ) ||
		a <= 0.0 ||
		b <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return pow( 1.0 - pow( 1.0-p, 1.0/b ), 1.0/a );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],833:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution skewness.
*
* @module @stdlib/math/base/dists/kumaraswamy/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/kumaraswamy/skewness' );
*
* var v = skewness( 2.0, 1.0 );
* // returns ~-0.566
*
* v = skewness( 4.0, 12.0 );
* // returns ~-0.201
*
* v = skewness( 16.0, 8.0 );
* // returns ~-0.94
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":834}],834:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the skewness of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 0.5, 1.0 );
* // returns ~0.639
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~-0.201
* @example
* var v = skewness( 12.0, 2.0 );
* // returns ~-1.2
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( a, b ) {
	var sigma2;
	var m1;
	var m2;
	var m3;
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * beta( 1.0 + ( 1.0/a ), b );
	m2 = b * beta( 1.0 + ( 2.0/a ), b );
	m3 = b * beta( 1.0 + ( 3.0/a ), b );
	sigma2 = m2 - ( m1*m1 );
	return ( m3 - ( 3.0*m1*sigma2 ) - ( m1*m1*m1 ) ) / pow( sigma2, 1.5 );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/beta":1360,"@stdlib/math/base/special/pow":1743}],835:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution standard deviation.
*
* @module @stdlib/math/base/dists/kumaraswamy/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/kumaraswamy/stdev' );
*
* var v = stdev( 2.0, 1.0 );
* // returns ~0.237
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.13
*
* v = stdev( 16.0, 8.0 );
* // returns ~0.063
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":836}],836:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.5, 1.0 );
* // returns ~0.298
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.13
* @example
* var v = stdev( 12.0, 2.0 );
* // returns ~0.077
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( a, b ) {
	var m1;
	var m2;
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * beta( 1.0 + ( 1.0/a ), b );
	m2 = b * beta( 1.0 + ( 2.0/a ), b );
	return sqrt( m2 - ( m1*m1 ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/beta":1360,"@stdlib/math/base/special/sqrt":1826}],837:[function(require,module,exports){
'use strict';

/**
* Kumaraswamy's double bounded distribution variance.
*
* @module @stdlib/math/base/dists/kumaraswamy/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/kumaraswamy/variance' );
*
* var v = variance( 2.0, 1.0 );
* // returns ~0.056
*
* v = variance( 4.0, 12.0 );
* // returns ~0.017
*
* v = variance( 16.0, 8.0 );
* // returns ~0.004
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":838}],838:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );


// MAIN //

/**
* Returns the variance of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.5, 1.0 );
* // returns ~0.089
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.017
* @example
* var v = variance( 12.0, 2.0 );
* // returns ~0.006
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( a, b ) {
	var m1;
	var m2;
	if (
		isnan( a ) ||
		a <= 0.0 ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * beta( 1.0 + ( 1.0/a ), b );
	m2 = b * beta( 1.0 + ( 2.0/a ), b );
	return m2 - ( m1*m1 );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/beta":1360}],839:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.932
*
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.094
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, mu, b ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / b;
	if ( x < mu ) {
		return 0.5 * exp( z );
	}
	return 1.0 - ( 0.5 * exp( -z ) );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],840:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.132
*
* y = cdf( 4.0 );
* // returns ~0.743
*/
function factory( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		if ( x < mu ) {
			return 0.5 * exp( z );
		}
		return 1.0 - (0.5 * exp( -z ));
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],841:[function(require,module,exports){
'use strict';

/**
* Laplace distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/laplace/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/laplace/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.982
*
* y = cdf( 0.0, 0.0, 3.0 );
* // returns 0.5
*
* var myCDF = cdf.factory( 2.0, 3.0 );
* y = myCDF( 10.0 );
* // returns ~0.965
*
* y = myCDF( 2.0 );
* // returns 0.5
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":839,"./factory.js":840,"@stdlib/utils/define-read-only-property":1937}],842:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/laplace/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/laplace/kurtosis' );
var mean = require( '@stdlib/math/base/dists/laplace/mean' );
var median = require( '@stdlib/math/base/dists/laplace/median' );
var mode = require( '@stdlib/math/base/dists/laplace/mode' );
var skewness = require( '@stdlib/math/base/dists/laplace/skewness' );
var stdev = require( '@stdlib/math/base/dists/laplace/stdev' );
var variance = require( '@stdlib/math/base/dists/laplace/variance' );
var cdf = require( '@stdlib/math/base/dists/laplace/cdf' );
var logcdf = require( '@stdlib/math/base/dists/laplace/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/laplace/logpdf' );
var mgf = require( '@stdlib/math/base/dists/laplace/mgf' );
var pdf = require( '@stdlib/math/base/dists/laplace/pdf' );
var quantile = require( '@stdlib/math/base/dists/laplace/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function laplaceCDF( x ) {
	return cdf( x, this.mu, this.b );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function laplaceLogCDF( x ) {
	return logcdf( x, this.mu, this.b );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function laplaceLogPDF( x ) {
	return logpdf( x, this.mu, this.b );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function laplaceMGF( t ) {
	return mgf( t, this.mu, this.b );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function laplacePDF( x ) {
	return pdf( x, this.mu, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function laplaceQuantile( p ) {
	return quantile( p, this.mu, this.b );
}


// MAIN //

/**
* Laplace distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [b=1.0] - scale parameter
* @throws {TypeError} `b` must be a positive number
* @returns {Laplace} distribution instance
*
* @example
* var laplace = new Laplace( 1.0, 1.0 );
*
* var y = laplace.cdf( 1.5 );
* // returns ~0.697
*
* var mu = laplace.mean;
* // returns 1.0
*/
function Laplace() {
	var mu;
	var b;
	if ( !(this instanceof Laplace) ) {
		if ( arguments.length === 0 ) {
			return new Laplace();
		}
		return new Laplace( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( b ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `b` must be a positive number. Value: `' + b + '`' );
		}
	} else {
		mu = 0.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Laplace distribution differential entropy.
*
* @name entropy
* @memberof Laplace.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.entropy;
* // returns ~4.178
*/
Object.defineProperty( Laplace.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.b );
	}
});

/**
* Laplace distribution excess kurtosis.
*
* @name kurtosis
* @memberof Laplace.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.kurtosis;
* // returns 3.0
*/
Object.defineProperty( Laplace.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.b );
	}
});

/**
* Laplace distribution expected value.
*
* @name mean
* @memberof Laplace.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.mean;
* // returns 4.0
*/
Object.defineProperty( Laplace.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.b );
	}
});

/**
* Laplace distribution median.
*
* @name median
* @memberof Laplace.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.median;
* // returns 4.0
*/
Object.defineProperty( Laplace.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.b );
	}
});

/**
* Laplace distribution mode.
*
* @name mode
* @memberof Laplace.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.mode;
* // returns 4.0
*/
Object.defineProperty( Laplace.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.b );
	}
});

/**
* Laplace distribution skewness.
*
* @name skewness
* @memberof Laplace.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.skewness;
* // returns 0.0
*/
Object.defineProperty( Laplace.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.b );
	}
});

/**
* Laplace distribution standard deviation.
*
* @name stdev
* @memberof Laplace.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.stdev;
* // returns ~16.971
*/
Object.defineProperty( Laplace.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.b );
	}
});

/**
* Laplace distribution variance.
*
* @name variance
* @memberof Laplace.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.variance;
* // returns 288.0
*/
Object.defineProperty( Laplace.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.cdf( 0.5 );
* // returns ~0.374
*/
setReadOnly( Laplace.prototype, 'cdf', laplaceCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.logcdf( 0.9 );
* // returns ~-0.951
*/
setReadOnly( Laplace.prototype, 'logcdf', laplaceLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.logpdf( 0.8 );
* // returns ~-3.444
*/
setReadOnly( Laplace.prototype, 'logpdf', laplaceLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.mgf( 0.01 );
* // returns ~1.056
*/
setReadOnly( Laplace.prototype, 'mgf', laplaceMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.pdf( 0.8 );
* // returns ~0.032
*/
setReadOnly( Laplace.prototype, 'pdf', laplacePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Laplace.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Laplace.prototype, 'quantile', laplaceQuantile );


// EXPORTS //

module.exports = Laplace;

},{"@stdlib/assert/is-nan":32,"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/laplace/cdf":841,"@stdlib/math/base/dists/laplace/entropy":845,"@stdlib/math/base/dists/laplace/kurtosis":846,"@stdlib/math/base/dists/laplace/logcdf":850,"@stdlib/math/base/dists/laplace/logpdf":853,"@stdlib/math/base/dists/laplace/mean":855,"@stdlib/math/base/dists/laplace/median":857,"@stdlib/math/base/dists/laplace/mgf":860,"@stdlib/math/base/dists/laplace/mode":862,"@stdlib/math/base/dists/laplace/pdf":865,"@stdlib/math/base/dists/laplace/quantile":868,"@stdlib/math/base/dists/laplace/skewness":870,"@stdlib/math/base/dists/laplace/stdev":872,"@stdlib/math/base/dists/laplace/variance":874,"@stdlib/utils/define-read-only-property":1937}],843:[function(require,module,exports){
'use strict';

/**
* Laplace distribution constructor.
*
* @module @stdlib/math/base/dists/laplace/ctor
*
* @example
* var Laplace = require( '@stdlib/math/base/dists/laplace/ctor' );
*
* var laplace = new Laplace( 1.0, 1.0 );
*
* var y = laplace.cdf( 1.5 );
* // returns ~0.697
*
* var mu = laplace.mean;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":842}],844:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var E = require( '@stdlib/constants/math/float64-e' );


// MAIN //

/**
* Returns the differential entropy for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.693
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.386
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return ln( 2.0 * b * E );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-e":69,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],845:[function(require,module,exports){
'use strict';

/**
* Laplace distribution differential entropy.
*
* @module @stdlib/math/base/dists/laplace/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/laplace/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.693
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.386
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":844}],846:[function(require,module,exports){
'use strict';

/**
* Laplace distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/laplace/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/laplace/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 3.0
*
* y = kurtosis( 4.0, 2.0 );
* // returns 3.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":847}],847:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 3.0
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 3.0
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 3.0;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],848:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace laplace
*/
var laplace = {};

/**
* @name cdf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/cdf}
*/
setReadOnly( laplace, 'cdf', require( '@stdlib/math/base/dists/laplace/cdf' ) );

/**
* @name entropy
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/entropy}
*/
setReadOnly( laplace, 'entropy', require( '@stdlib/math/base/dists/laplace/entropy' ) );

/**
* @name kurtosis
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/kurtosis}
*/
setReadOnly( laplace, 'kurtosis', require( '@stdlib/math/base/dists/laplace/kurtosis' ) );

/**
* @name Laplace
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/ctor}
*/
setReadOnly( laplace, 'Laplace', require( '@stdlib/math/base/dists/laplace/ctor' ) );

/**
* @name logcdf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/logcdf}
*/
setReadOnly( laplace, 'logcdf', require( '@stdlib/math/base/dists/laplace/logcdf' ) );

/**
* @name logpdf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/logpdf}
*/
setReadOnly( laplace, 'logpdf', require( '@stdlib/math/base/dists/laplace/logpdf' ) );

/**
* @name mean
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/mean}
*/
setReadOnly( laplace, 'mean', require( '@stdlib/math/base/dists/laplace/mean' ) );

/**
* @name median
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/median}
*/
setReadOnly( laplace, 'median', require( '@stdlib/math/base/dists/laplace/median' ) );

/**
* @name mgf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/mgf}
*/
setReadOnly( laplace, 'mgf', require( '@stdlib/math/base/dists/laplace/mgf' ) );

/**
* @name mode
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/mode}
*/
setReadOnly( laplace, 'mode', require( '@stdlib/math/base/dists/laplace/mode' ) );

/**
* @name pdf
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/pdf}
*/
setReadOnly( laplace, 'pdf', require( '@stdlib/math/base/dists/laplace/pdf' ) );

/**
* @name quantile
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/quantile}
*/
setReadOnly( laplace, 'quantile', require( '@stdlib/math/base/dists/laplace/quantile' ) );

/**
* @name skewness
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/skewness}
*/
setReadOnly( laplace, 'skewness', require( '@stdlib/math/base/dists/laplace/skewness' ) );

/**
* @name stdev
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/stdev}
*/
setReadOnly( laplace, 'stdev', require( '@stdlib/math/base/dists/laplace/stdev' ) );

/**
* @name variance
* @memberof laplace
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/laplace/variance}
*/
setReadOnly( laplace, 'variance', require( '@stdlib/math/base/dists/laplace/variance' ) );


// EXPORTS //

module.exports = laplace;

},{"@stdlib/math/base/dists/laplace/cdf":841,"@stdlib/math/base/dists/laplace/ctor":843,"@stdlib/math/base/dists/laplace/entropy":845,"@stdlib/math/base/dists/laplace/kurtosis":846,"@stdlib/math/base/dists/laplace/logcdf":850,"@stdlib/math/base/dists/laplace/logpdf":853,"@stdlib/math/base/dists/laplace/mean":855,"@stdlib/math/base/dists/laplace/median":857,"@stdlib/math/base/dists/laplace/mgf":860,"@stdlib/math/base/dists/laplace/mode":862,"@stdlib/math/base/dists/laplace/pdf":865,"@stdlib/math/base/dists/laplace/quantile":868,"@stdlib/math/base/dists/laplace/skewness":870,"@stdlib/math/base/dists/laplace/stdev":872,"@stdlib/math/base/dists/laplace/variance":874,"@stdlib/utils/define-read-only-property":1937}],849:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var LNHALF = require( '@stdlib/constants/math/float64-ln-half' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.0 );
* // returns ~-2.025
*
* y = logcdf( 4.0 );
* // returns ~-0.297
*/
function factory( mu, b ) {
	if ( isnan( mu ) || isnan( b ) || b <= 0.0 ) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		if ( x < mu ) {
			return LNHALF + z;
		}
		return LNHALF + log1p( -expm1( -z ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-half":79,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/log1p":1690,"@stdlib/utils/constant-function":1933}],850:[function(require,module,exports){
'use strict';

/**
* Laplace distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/laplace/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/laplace/logcdf' );
*
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.018
*
* y = logcdf( 0.0, 0.0, 3.0 );
* // returns ~-0.693
*
* var mylogcdf = logcdf.factory( 2.0, 3.0 );
* y = mylogcdf( 10.0 );
* // returns ~-0.036
*
* y = mylogcdf( 2.0 );
* // returns ~-0.693
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":849,"./logcdf.js":851,"@stdlib/utils/define-read-only-property":1937}],851:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var LNHALF = require( '@stdlib/constants/math/float64-ln-half' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated logarithm of CDF
*
* @example
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.07
*
* @example
* var y = logcdf( 5.0, 10.0, 3.0 );
* // returns ~-2.364
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logcdf( x, mu, b ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / b;
	if ( x < mu ) {
		return LNHALF + z;
	}
	return LNHALF + log1p( -expm1( -z ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ln-half":79,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/log1p":1690}],852:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns -1.386
*
* y = logpdf( 5.0 );
* // returns ~-3.863
*
* y = logpdf( 12.0 );
* // returns ~-2.386
*/
function factory( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logarithm of PDF
	*
	* @example
	* var y = logpdf( -3.14 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		return -( abs( z ) + ln( 2.0 * b ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],853:[function(require,module,exports){
'use strict';

/**
* Laplace distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/laplace/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/laplace/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.688
*
* var mylogPDF = logpdf.factory( 10.0, 2.0 );
* y = mylogPDF( 10.0 );
* // returns -1.386
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":852,"./logpdf.js":854,"@stdlib/utils/define-read-only-property":1937}],854:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.688
*
* @example
* var y = logpdf( -1.0, 2.0, 3.0 );
* // returns ~-2.797
*
* @example
* var y = logpdf( 2.5, 2.0, 3.0 );
* // returns ~-1.959
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, mu, b ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / b;
	return -( abs( z ) + ln( 2.0 * b ) );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ln":1679}],855:[function(require,module,exports){
'use strict';

/**
* Laplace distribution expected value.
*
* @module @stdlib/math/base/dists/laplace/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/laplace/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":856}],856:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],857:[function(require,module,exports){
'use strict';

/**
* Laplace distribution median.
*
* @module @stdlib/math/base/dists/laplace/median
*
* @example
* var median = require( '@stdlib/math/base/dists/laplace/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":858}],858:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128}],859:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Laplace (double exponential) distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} b - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0, 2.0 );
*
* var y = mgf( 0.2 );
* // returns ~2.649
*
* y = mgf( 0.4 );
* // returns ~13.758
*/
function factory( mu, b ) {
	if ( isnan( mu ) || isnan( b ) || b <= 0.0 ) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Laplace (double exponential) distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var bt;
		if ( abs( t ) >= 1.0/b ) {
			return NaN;
		}
		bt = b * t;
		return exp( mu * t ) / ( 1.0 - pow( bt, 2.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],860:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Laplace (double exponential) distribution.
*
* @module @stdlib/math/base/dists/laplace/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/laplace/mgf' );
*
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.333
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* y = mgf( -1.0, 4.0, 0.2 );
* // returns ~0.019
*
* var mymgf = mgf.factory( 4.0, 2.0 );
*
* y = mymgf( 0.2 );
* // returns ~2.649
*
* y = mymgf( 0.4 );
* // returns ~13.758
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":859,"./mgf.js":861,"@stdlib/utils/define-read-only-property":1937}],861:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Laplace (double exponential) distribution with location parameter `mu` and scale parameter `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} b - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.333
*
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = mgf( -1.0, 4.0, 0.2 );
* // returns ~0.019
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 1.0, 0.0, 2.0 );
* // returns NaN
*
* @example
* var y = mgf( -0.5, 0.0, 4.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.0, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function mgf( t, mu, b ) {
	var bt;
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0 ||
		abs( t ) >= 1.0/b
	) {
		return NaN;
	}
	bt = b * t;
	return exp( mu * t ) / ( 1.0 - pow( bt, 2.0 ) );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],862:[function(require,module,exports){
'use strict';

/**
* Laplace distribution mode.
*
* @module @stdlib/math/base/dists/laplace/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/laplace/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":863}],863:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],864:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns 0.25
*
* y = pdf( 5.0 );
* // returns ~0.021
*
* y = pdf( 12.0 );
* // returns ~0.092
*/
function factory( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* var y = pdf( -3.14 );
	* // returns <number>
	*/
	function pdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		return 0.5 * exp( -abs( z ) ) / b;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],865:[function(require,module,exports){
'use strict';

/**
* Laplace distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/laplace/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/laplace/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.068
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns 0.25
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":864,"./pdf.js":866,"@stdlib/utils/define-read-only-property":1937}],866:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.068
*
* @example
* var y = pdf( -1.0, 2.0, 3.0 );
* // returns ~0.061
*
* @example
* var y = pdf( 2.5, 2.0, 3.0 );
* // returns ~0.141
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, mu, b ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / b;
	return 0.5 * exp( -abs( z ) ) / b;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456}],867:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var signum = require( '@stdlib/math/base/special/signum' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~11.833
*/
function factory( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Laplace distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu - ( b * signum( p-0.5 ) * ln( 1.0 - (2.0 * abs( p-0.5 )) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/signum":1804,"@stdlib/utils/constant-function":1933}],868:[function(require,module,exports){
'use strict';

/**
* Laplace distribution quantile function.
*
* @module @stdlib/math/base/dists/laplace/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/laplace/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.916
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*
* y = myQuantile( 0.8 );
* // returns ~11.833
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":867,"./quantile.js":869,"@stdlib/utils/define-read-only-property":1937}],869:[function(require,module,exports){
'use strict';

// MODULES //

var signum = require( '@stdlib/math/base/special/signum' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.916
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		isnan( p ) ||
		b <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return mu - ( b * signum( p-0.5 ) * ln( 1.0 - ( 2.0 * abs( p-0.5 ) ) ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/signum":1804}],870:[function(require,module,exports){
'use strict';

/**
* Laplace distribution skewness.
*
* @module @stdlib/math/base/dists/laplace/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/laplace/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":871}],871:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128}],872:[function(require,module,exports){
'use strict';

/**
* Laplace distribution standard deviation.
*
* @module @stdlib/math/base/dists/laplace/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/laplace/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.414
*
* y = stdev( 4.0, 2.0 );
* // returns ~2.828
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":873}],873:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );


// MAIN //

/**
* Returns the standard deviation for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.414
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~2.828
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return SQRT2 * b;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128}],874:[function(require,module,exports){
'use strict';

/**
* Laplace distribution variance.
*
* @module @stdlib/math/base/dists/laplace/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/laplace/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns 2.0
*
* y = variance( 4.0, 2.0 );
* // returns 8.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":875}],875:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns 2.0
* @example
* var y = variance( 5.0, 2.0 );
* // returns 8.0
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, b ) {
	if (
		isnan( mu ) ||
		isnan( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 2.0 * b * b;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],876:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.48
*
* @example
* var y = cdf( 12.0, 10.0, 3.0 );
* // returns ~0.221
*
* @example
* var y = cdf( 9.0, 10.0, 3.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, mu, c ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x < mu ) {
		return 0.0;
	}
	z = sqrt( c / ( 2.0 * ( x-mu ) ) );
	return erfc( z );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/sqrt":1826}],877:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 4.0 );
* // returns ~0.22
*
* y = cdf( 2.0 );
* // returns 0.0
*/
function factory( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < mu ) {
			return 0.0;
		}
		z = sqrt( c / ( 2.0 * ( x-mu ) ) );
		return erfc( z );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],878:[function(require,module,exports){
'use strict';

/**
* Lévy distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/levy/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/levy/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.584
*
* y = cdf( 0.3, 0.0, 3.0 );
* // returns ~0.002
*
* @example
* var factory = require( '@stdlib/math/base/dists/levy/cdf' ).factory;

* var myCDF = factory( 2.0, 3.0 );
* var y = myCDF( 100.0 );
* // returns ~0.861
*
* y = myCDF( 10.0 );
* // returns ~0.54
*
* y = myCDF( 2.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":876,"./factory.js":877,"@stdlib/utils/define-read-only-property":1937}],879:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/levy/entropy' );
var mean = require( '@stdlib/math/base/dists/levy/mean' );
var median = require( '@stdlib/math/base/dists/levy/median' );
var mode = require( '@stdlib/math/base/dists/levy/mode' );
var stdev = require( '@stdlib/math/base/dists/levy/stdev' );
var variance = require( '@stdlib/math/base/dists/levy/variance' );
var cdf = require( '@stdlib/math/base/dists/levy/cdf' );
var logcdf = require( '@stdlib/math/base/dists/levy/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/levy/logpdf' );
var pdf = require( '@stdlib/math/base/dists/levy/pdf' );
var quantile = require( '@stdlib/math/base/dists/levy/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function levyCDF( x ) {
	return cdf( x, this.mu, this.c );
}

/**
* Evaluates the logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function levyLogCDF( x ) {
	return logcdf( x, this.mu, this.c );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function levyLogPDF( x ) {
	return logpdf( x, this.mu, this.c );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function levyPDF( x ) {
	return pdf( x, this.mu, this.c );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function levyQuantile( p ) {
	return quantile( p, this.mu, this.c );
}


// MAIN //

/**
* Lévy distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [c=1.0] - scale parameter
* @throws {TypeError} `c` must be a positive number
* @returns {Levy} distribution instance
*
* @example
* var levy = new Levy( 1.0, 1.0 );
*
* var y = levy.cdf( 3.0 );
* // returns ~0.48
*
* var mode = levy.mode;
* // returns ~1.333
*/
function Levy() {
	var mu;
	var c;
	if ( !(this instanceof Levy) ) {
		if ( arguments.length === 0 ) {
			return new Levy();
		}
		return new Levy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		c = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( c ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `c` must be a positive number. Value: `' + c + '`' );
		}
	} else {
		mu = 0.0;
		c = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'c', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return c;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			c = value;
		}
	});
	return this;
}

/**
* Lévy distribution differential entropy.
*
* @name entropy
* @memberof Levy.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.entropy;
* // returns ~5.809
*/
Object.defineProperty( Levy.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.c );
	}
});

/**
* Lévy distribution expected value.
*
* @name mean
* @memberof Levy.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.mean;
* // returns Infinity
*/
Object.defineProperty( Levy.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.c );
	}
});

/**
* Lévy distribution median.
*
* @name median
* @memberof Levy.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.median;
* // returns ~30.377
*/
Object.defineProperty( Levy.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.c );
	}
});

/**
* Lévy distribution mode.
*
* @name mode
* @memberof Levy.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.mode;
* // returns 8.0
*/
Object.defineProperty( Levy.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.c );
	}
});

/**
* Lévy distribution standard deviation.
*
* @name stdev
* @memberof Levy.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.stdev;
* // returns Infinity
*/
Object.defineProperty( Levy.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.c );
	}
});

/**
* Lévy distribution variance.
*
* @name variance
* @memberof Levy.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.variance;
* // returns Infinity
*/
Object.defineProperty( Levy.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.c );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Levy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.cdf( 2.5 );
* // returns ~0.005
*/
setReadOnly( Levy.prototype, 'cdf', levyCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Levy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.logcdf( 2.5 );
* // returns ~-5.3
*/
setReadOnly( Levy.prototype, 'logcdf', levyLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Levy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.logpdf( 2.5 );
* // returns ~-3.186
*/
setReadOnly( Levy.prototype, 'logpdf', levyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Levy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.pdf( 2.5 );
* // returns ~0.041
*/
setReadOnly( Levy.prototype, 'pdf', levyPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Levy.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.quantile( 0.5 );
* // returns ~10.792
*/
setReadOnly( Levy.prototype, 'quantile', levyQuantile );


// EXPORTS //

module.exports = Levy;

},{"@stdlib/assert/is-nan":32,"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/levy/cdf":878,"@stdlib/math/base/dists/levy/entropy":882,"@stdlib/math/base/dists/levy/logcdf":885,"@stdlib/math/base/dists/levy/logpdf":888,"@stdlib/math/base/dists/levy/mean":890,"@stdlib/math/base/dists/levy/median":892,"@stdlib/math/base/dists/levy/mode":894,"@stdlib/math/base/dists/levy/pdf":897,"@stdlib/math/base/dists/levy/quantile":900,"@stdlib/math/base/dists/levy/stdev":902,"@stdlib/math/base/dists/levy/variance":904,"@stdlib/utils/define-read-only-property":1937}],880:[function(require,module,exports){
'use strict';

/**
* Lévy distribution constructor.
*
* @module @stdlib/math/base/dists/levy/ctor
*
* @example
* var Levy = require( '@stdlib/math/base/dists/levy/ctor' );
*
* var levy = new Levy( 1.0, 1.0 );
*
* var y = levy.cdf( 1.0 );
* // returns 0.0
*
* var mean = levy.mean;
* // returns Infinity
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":879}],881:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

var THREE_GAMMA = 3.0 * GAMMA;


// MAIN //

/**
* Returns the differential entropy for a Lévy distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~3.324
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~4.018
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return ( 1.0 + THREE_GAMMA + ln( 16.0*c*c*PI ) ) / 2.0;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-eulergamma":71,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],882:[function(require,module,exports){
'use strict';

/**
* Lévy distribution differential entropy.
*
* @module @stdlib/math/base/dists/levy/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/levy/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~3.324
*
* y = entropy( 4.0, 2.0 );
* // returns ~4.018
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":881}],883:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace levy
*/
var levy = {};

/**
* @name cdf
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/cdf}
*/
setReadOnly( levy, 'cdf', require( '@stdlib/math/base/dists/levy/cdf' ) );

/**
* @name entropy
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/entropy}
*/
setReadOnly( levy, 'entropy', require( '@stdlib/math/base/dists/levy/entropy' ) );

/**
* @name Levy
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/ctor}
*/
setReadOnly( levy, 'Levy', require( '@stdlib/math/base/dists/levy/ctor' ) );

/**
* @name logcdf
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/logcdf}
*/
setReadOnly( levy, 'logcdf', require( '@stdlib/math/base/dists/levy/logcdf' ) );

/**
* @name logpdf
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/logpdf}
*/
setReadOnly( levy, 'logpdf', require( '@stdlib/math/base/dists/levy/logpdf' ) );

/**
* @name mean
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/mean}
*/
setReadOnly( levy, 'mean', require( '@stdlib/math/base/dists/levy/mean' ) );

/**
* @name median
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/median}
*/
setReadOnly( levy, 'median', require( '@stdlib/math/base/dists/levy/median' ) );

/**
* @name mode
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/mode}
*/
setReadOnly( levy, 'mode', require( '@stdlib/math/base/dists/levy/mode' ) );

/**
* @name pdf
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/pdf}
*/
setReadOnly( levy, 'pdf', require( '@stdlib/math/base/dists/levy/pdf' ) );

/**
* @name quantile
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/quantile}
*/
setReadOnly( levy, 'quantile', require( '@stdlib/math/base/dists/levy/quantile' ) );

/**
* @name stdev
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/stdev}
*/
setReadOnly( levy, 'stdev', require( '@stdlib/math/base/dists/levy/stdev' ) );

/**
* @name variance
* @memberof levy
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/levy/variance}
*/
setReadOnly( levy, 'variance', require( '@stdlib/math/base/dists/levy/variance' ) );


// EXPORTS //

module.exports = levy;

},{"@stdlib/math/base/dists/levy/cdf":878,"@stdlib/math/base/dists/levy/ctor":880,"@stdlib/math/base/dists/levy/entropy":882,"@stdlib/math/base/dists/levy/logcdf":885,"@stdlib/math/base/dists/levy/logpdf":888,"@stdlib/math/base/dists/levy/mean":890,"@stdlib/math/base/dists/levy/median":892,"@stdlib/math/base/dists/levy/mode":894,"@stdlib/math/base/dists/levy/pdf":897,"@stdlib/math/base/dists/levy/quantile":900,"@stdlib/math/base/dists/levy/stdev":902,"@stdlib/math/base/dists/levy/variance":904,"@stdlib/utils/define-read-only-property":1937}],884:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 4.0 );
* // returns ~-1.514
*
* y = logcdf( 2.0 );
* // returns -Infinity
*/
function factory( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < mu ) {
			return NINF;
		}
		z = sqrt( c / ( 2.0 * ( x-mu ) ) );
		return ln( erfc( z ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],885:[function(require,module,exports){
'use strict';

/**
* Lévy distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/levy/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/levy/logcdf' );
*
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.538
*
* y = logcdf( 0.3, 0.0, 3.0 );
* // returns ~-6.215
*
* @example
* var factory = require( '@stdlib/math/base/dists/levy/logcdf' ).factory;

* var mylogcdf = factory( 2.0, 3.0 );
* var y = mylogcdf( 100.0 );
* // returns ~-0.15
*
* y = mylogcdf( 10.0 );
* // returns ~-0.616
*
* y = mylogcdf( 2.0 );
* // returns -Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":884,"./logcdf.js":886,"@stdlib/utils/define-read-only-property":1937}],886:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.734
*
* @example
* var y = logcdf( 12.0, 10.0, 3.0 );
* // returns ~-1.51
*
* @example
* var y = logcdf( 9.0, 10.0, 3.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logcdf( x, mu, c ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x < mu ) {
		return NINF;
	}
	z = sqrt( c / ( 2.0 * ( x-mu ) ) );
	return ln( erfc( z ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826}],887:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_TWO_PI = require( '@stdlib/constants/math/float64-ln-two-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 11.0 );
* // returns ~-1.572
*
* y = logpdf( 10.0 );
* // returns -Infinity
*/
function factory( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= mu ) {
			return NINF;
		}
		z = x - mu;
		return 0.5 * ( ln( c ) - LN_TWO_PI - ( c/z ) - ( 3.0*ln( z ) ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-two-pi":82,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],888:[function(require,module,exports){
'use strict';

/**
* Lévy distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/levy/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/levy/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.209
*
* @example
* var factory = require( '@stdlib/math/base/dists/levy/logpdf' ).factory;
*
* var logpdf = factory( 10.0, 2.0 );
* y = logpdf( 11.0 );
* // returns ~-1.572
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":887,"./logpdf.js":889,"@stdlib/utils/define-read-only-property":1937}],889:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_TWO_PI = require( '@stdlib/constants/math/float64-ln-two-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.209
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, mu, c ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x <= mu ) {
		return NINF;
	}
	z = x - mu;
	return 0.5 * ( ln( c ) - LN_TWO_PI - ( c/z ) - ( 3.0*ln( z ) ) );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ln-two-pi":82,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],890:[function(require,module,exports){
'use strict';

/**
* Lévy distribution expected value.
*
* @module @stdlib/math/base/dists/levy/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/levy/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns Infinity
*
* y = mean( 4.0, 2.0 );
* // returns Infinity
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":891}],891:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the expected value for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns Infinity
* @example
* var y = mean( 5.0, 2.0 );
* // returns Infinity
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return PINF;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],892:[function(require,module,exports){
'use strict';

/**
* Lévy distribution median.
*
* @module @stdlib/math/base/dists/levy/median
*
* @example
* var median = require( '@stdlib/math/base/dists/levy/median' );
*
* var y = median( 0.0, 1.0 );
* // returns ~2.198
*
* y = median( 4.0, 2.0 );
* // returns ~8.396
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":893}],893:[function(require,module,exports){
'use strict';

// MODULES //

var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// VARIABLES //

var DENOM = 2.0 * pow( erfcinv( 0.5 ), 2.0 );


// MAIN //

/**
* Returns the median for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns ~2.198
* @example
* var y = median( 5.0, 2.0 );
* // returns ~9.396
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return mu + ( c / DENOM );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/pow":1743}],894:[function(require,module,exports){
'use strict';

/**
* Lévy distribution mode.
*
* @module @stdlib/math/base/dists/levy/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/levy/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns ~0.333
*
* y = mode( 4.0, 2.0 );
* // returns ~4.667
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":895}],895:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns ~0.333
* @example
* var y = mode( 5.0, 2.0 );
* // returns ~5.667
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return mu + ( c / 3.0 );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],896:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 11.0 );
* // returns ~0.208
*
* y = pdf( 10.0 );
* // returns 0.0
*/
function factory( mu, c ) {
	if ( isnan( mu ) || isnan( c ) || c <= 0.0 ) {
		return constantFunction( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= mu ) {
			return 0.0;
		}
		return sqrt( c/TWO_PI ) * exp( -c / ( 2.0*(x-mu) ) ) / pow( x-mu, 1.5 );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-two-pi":111,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],897:[function(require,module,exports){
'use strict';

/**
* Lévy distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/levy/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/levy/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.11
*
* @example
* var factory = require( '@stdlib/math/base/dists/levy/pdf' ).factory;
*
* var pdf = factory( 10.0, 2.0 );
* y = pdf( 11.0 );
* // returns ~0.208
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":896,"./pdf.js":898,"@stdlib/utils/define-read-only-property":1937}],898:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.11
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, mu, c ) {
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x <= mu ) {
		return 0.0;
	}
	return sqrt( c/TWO_PI ) * exp( -c / ( 2.0*(x-mu) ) ) / pow( x-mu, 1.5 );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-two-pi":111,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],899:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} c - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~14.396
*
* y = quantile( 0.8 );
* // returns ~41.16
*/
function factory( mu, c ) {
	if ( isnan( mu ) || isnan( c ) || c <= 0.0 ) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Lévy distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var fval;
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		fval = erfcinv( p );
		return mu + ( c / ( 2.0*fval*fval ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/utils/constant-function":1933}],900:[function(require,module,exports){
'use strict';

/**
* Lévy distribution quantile function.
*
* @module @stdlib/math/base/dists/levy/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/levy/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
*
* @example
* var factory = require( '@stdlib/math/base/dists/levy/quantile' ).factory;
* var quantile = factory( 10.0, 2.0 );
*
* var y = quantile( 0.5 );
* // returns ~14.396
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":899,"./quantile.js":901,"@stdlib/utils/define-read-only-property":1937}],901:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );


// MAIN //

/**
* Evaluates the quantile function for a Lévy distribution with location parameter `mu` and scale parameter `c` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} c - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~15.58
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~8.396
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, c ) {
	var fval;
	if (
		isnan( mu ) ||
		isnan( c ) ||
		isnan( p ) ||
		c <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	fval = erfcinv( p );
	return mu + ( c / ( 2.0*fval*fval ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfcinv":1441}],902:[function(require,module,exports){
'use strict';

/**
* Lévy distribution standard deviation.
*
* @module @stdlib/math/base/dists/levy/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/levy/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns Infinity
*
* y = stdev( 4.0, 2.0 );
* // returns Infinity
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":903}],903:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns Infinity
* @example
* var y = stdev( 5.0, 2.0 );
* // returns Infinity
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return PINF;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],904:[function(require,module,exports){
'use strict';

/**
* Lévy distribution variance.
*
* @module @stdlib/math/base/dists/levy/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/levy/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns Infinity
*
* y = variance( 4.0, 2.0 );
* // returns Infinity
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":905}],905:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the variance for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns Infinity
* @example
* var y = variance( 5.0, 2.0 );
* // returns Infinity
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, c ) {
	if (
		isnan( mu ) ||
		isnan( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return PINF;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],906:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace dist
*/
var dist = {};

/**
* @name arcsine
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/arcsine}
*/
setReadOnly( dist, 'arcsine', require( '@stdlib/math/base/dists/arcsine' ) );

/**
* @name beta
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/beta}
*/
setReadOnly( dist, 'beta', require( '@stdlib/math/base/dists/beta' ) );

/**
* @name betaprime
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/betaprime}
*/
setReadOnly( dist, 'betaprime', require( '@stdlib/math/base/dists/betaprime' ) );

/**
* @name binomial
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/binomial}
*/
setReadOnly( dist, 'binomial', require( '@stdlib/math/base/dists/binomial' ) );

/**
* @name cauchy
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/cauchy}
*/
setReadOnly( dist, 'cauchy', require( '@stdlib/math/base/dists/cauchy' ) );

/**
* @name chi
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/chi}
*/
setReadOnly( dist, 'chi', require( '@stdlib/math/base/dists/chi' ) );

/**
* @name chisquare
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/chisquare}
*/
setReadOnly( dist, 'chisquare', require( '@stdlib/math/base/dists/chisquare' ) );

/**
* @name cosine
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/cosine}
*/
setReadOnly( dist, 'cosine', require( '@stdlib/math/base/dists/cosine' ) );

/**
* @name degenerate
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/degenerate}
*/
setReadOnly( dist, 'degenerate', require( '@stdlib/math/base/dists/degenerate' ) );

/**
* @name discreteUniform
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/discrete-uniform}
*/
setReadOnly( dist, 'discreteUniform', require( '@stdlib/math/base/dists/discrete-uniform' ) );

/**
* @name erlang
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/erlang}
*/
setReadOnly( dist, 'erlang', require( '@stdlib/math/base/dists/erlang' ) );

/**
* @name exponential
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/exponential}
*/
setReadOnly( dist, 'exponential', require( '@stdlib/math/base/dists/exponential' ) );

/**
* @name f
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/f}
*/
setReadOnly( dist, 'f', require( '@stdlib/math/base/dists/f' ) );

/**
* @name frechet
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/frechet}
*/
setReadOnly( dist, 'frechet', require( '@stdlib/math/base/dists/frechet' ) );

/**
* @name gamma
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/gamma}
*/
setReadOnly( dist, 'gamma', require( '@stdlib/math/base/dists/gamma' ) );

/**
* @name geometric
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/geometric}
*/
setReadOnly( dist, 'geometric', require( '@stdlib/math/base/dists/geometric' ) );

/**
* @name gumbel
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/gumbel}
*/
setReadOnly( dist, 'gumbel', require( '@stdlib/math/base/dists/gumbel' ) );

/**
* @name hypergeometric
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/hypergeometric}
*/

setReadOnly( dist, 'hypergeometric', require( '@stdlib/math/base/dists/hypergeometric' ) );

/**
* @name invgamma
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/invgamma}
*/
setReadOnly( dist, 'invgamma', require( '@stdlib/math/base/dists/invgamma' ) );

/**
* @name kumaraswamy
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/kumaraswamy}
*/
setReadOnly( dist, 'kumaraswamy', require( '@stdlib/math/base/dists/kumaraswamy' ) );

/**
* @name laplace
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/laplace}
*/
setReadOnly( dist, 'laplace', require( '@stdlib/math/base/dists/laplace' ) );

/**
* @name levy
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/levy}
*/
setReadOnly( dist, 'levy', require( '@stdlib/math/base/dists/levy' ) );

/**
* @name logistic
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/logistic}
*/
setReadOnly( dist, 'logistic', require( '@stdlib/math/base/dists/logistic' ) );

/**
* @name lognormal
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/lognormal}
*/
setReadOnly( dist, 'lognormal', require( '@stdlib/math/base/dists/lognormal' ) );

/**
* @name negativeBinomial
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/negative-binomial}
*/
setReadOnly( dist, 'negativeBinomial', require( '@stdlib/math/base/dists/negative-binomial' ) );

/**
* @name normal
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/normal}
*/
setReadOnly( dist, 'normal', require( '@stdlib/math/base/dists/normal' ) );

/**
* @name pareto1
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/pareto-type1}
*/
setReadOnly( dist, 'pareto1', require( '@stdlib/math/base/dists/pareto-type1' ) );

/**
* @name poisson
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/poisson}
*/
setReadOnly( dist, 'poisson', require( '@stdlib/math/base/dists/poisson' ) );

/**
* @name rayleigh
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/rayleigh}
*/
setReadOnly( dist, 'rayleigh', require( '@stdlib/math/base/dists/rayleigh' ) );

/**
* @name t
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/t}
*/
setReadOnly( dist, 't', require( '@stdlib/math/base/dists/t' ) );

/**
* @name triangular
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/triangular}
*/
setReadOnly( dist, 'triangular', require( '@stdlib/math/base/dists/triangular' ) );

/**
* @name truncatedNormal
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/truncated-normal}
*/
setReadOnly( dist, 'truncatedNormal', require( '@stdlib/math/base/dists/truncated-normal' ) );

/**
* @name uniform
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/uniform}
*/
setReadOnly( dist, 'uniform', require( '@stdlib/math/base/dists/uniform' ) );

/**
* @name weibull
* @memberof dist
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists/weibull}
*/
setReadOnly( dist, 'weibull', require( '@stdlib/math/base/dists/weibull' ) );


// EXPORTS //

module.exports = dist;

},{"@stdlib/math/base/dists/arcsine":199,"@stdlib/math/base/dists/beta":233,"@stdlib/math/base/dists/betaprime":269,"@stdlib/math/base/dists/binomial":301,"@stdlib/math/base/dists/cauchy":335,"@stdlib/math/base/dists/chi":361,"@stdlib/math/base/dists/chisquare":390,"@stdlib/math/base/dists/cosine":420,"@stdlib/math/base/dists/degenerate":452,"@stdlib/math/base/dists/discrete-uniform":483,"@stdlib/math/base/dists/erlang":518,"@stdlib/math/base/dists/exponential":550,"@stdlib/math/base/dists/f":587,"@stdlib/math/base/dists/frechet":615,"@stdlib/math/base/dists/gamma":649,"@stdlib/math/base/dists/geometric":685,"@stdlib/math/base/dists/gumbel":722,"@stdlib/math/base/dists/hypergeometric":758,"@stdlib/math/base/dists/invgamma":787,"@stdlib/math/base/dists/kumaraswamy":814,"@stdlib/math/base/dists/laplace":848,"@stdlib/math/base/dists/levy":883,"@stdlib/math/base/dists/logistic":916,"@stdlib/math/base/dists/lognormal":954,"@stdlib/math/base/dists/negative-binomial":983,"@stdlib/math/base/dists/normal":1020,"@stdlib/math/base/dists/pareto-type1":1054,"@stdlib/math/base/dists/poisson":1086,"@stdlib/math/base/dists/rayleigh":1121,"@stdlib/math/base/dists/t":1158,"@stdlib/math/base/dists/triangular":1192,"@stdlib/math/base/dists/truncated-normal":1220,"@stdlib/math/base/dists/uniform":1233,"@stdlib/math/base/dists/weibull":1268,"@stdlib/utils/define-read-only-property":1937}],907:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.881
*
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.159
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function cdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x < mu ? 0.0 : 1.0;
	}
	z = ( x - mu ) / s;
	return 1.0 / ( 1.0 + exp( -z ) );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],908:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.209
*
* y = cdf( 4.0 );
* // returns ~0.661
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / s;
		return 1.0 / ( 1.0 + exp( -z ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/cdf":451,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],909:[function(require,module,exports){
'use strict';

/**
* Logistic distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/logistic/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/logistic/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.881
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 1.0 );
* // returns ~0.209
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":907,"./factory.js":908,"@stdlib/utils/define-read-only-property":1937}],910:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/logistic/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/logistic/kurtosis' );
var mean = require( '@stdlib/math/base/dists/logistic/mean' );
var median = require( '@stdlib/math/base/dists/logistic/median' );
var mode = require( '@stdlib/math/base/dists/logistic/mode' );
var skewness = require( '@stdlib/math/base/dists/logistic/skewness' );
var stdev = require( '@stdlib/math/base/dists/logistic/stdev' );
var variance = require( '@stdlib/math/base/dists/logistic/variance' );
var cdf = require( '@stdlib/math/base/dists/logistic/cdf' );
var logcdf = require( '@stdlib/math/base/dists/logistic/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/logistic/logpdf' );
var mgf = require( '@stdlib/math/base/dists/logistic/mgf' );
var pdf = require( '@stdlib/math/base/dists/logistic/pdf' );
var quantile = require( '@stdlib/math/base/dists/logistic/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function logisticCDF( x ) {
	return cdf( x, this.mu, this.s );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function logisticLogCDF( x ) {
	return logcdf( x, this.mu, this.s );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function logisticLogPDF( x ) {
	return logpdf( x, this.mu, this.s );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function logisticMGF( t ) {
	return mgf( t, this.mu, this.s );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function logisticPDF( x ) {
	return pdf( x, this.mu, this.s );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function logisticQuantile( p ) {
	return quantile( p, this.mu, this.s );
}


// MAIN //

/**
* Logistic distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [s=1.0] - scale parameter
* @throws {TypeError} `s` must be a positive number
* @returns {Logistic} distribution instance
*
* @example
* var logistic = new Logistic( 1.0, 1.0 );
*
* var y = logistic.cdf( 1.5 );
* // returns ~0.622
*
* var mu = logistic.mean;
* // returns 1.0
*/
function Logistic() {
	var mu;
	var s;
	if ( !(this instanceof Logistic) ) {
		if ( arguments.length === 0 ) {
			return new Logistic();
		}
		return new Logistic( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		s = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( s ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `s` must be a positive number. Value: `' + s + '`' );
		}
	} else {
		mu = 0.0;
		s = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	return this;
}

/**
* Logistic distribution differential entropy.
*
* @name entropy
* @memberof Logistic.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.entropy;
* // returns ~4.485
*/
Object.defineProperty( Logistic.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.s );
	}
});

/**
* Logistic distribution excess kurtosis.
*
* @name kurtosis
* @memberof Logistic.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.kurtosis;
* // returns 1.2
*/
Object.defineProperty( Logistic.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.s );
	}
});

/**
* Logistic distribution expected value.
*
* @name mean
* @memberof Logistic.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.mean;
* // returns 4.0
*/
Object.defineProperty( Logistic.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.s );
	}
});

/**
* Logistic distribution median.
*
* @name median
* @memberof Logistic.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.median;
* // returns 4.0
*/
Object.defineProperty( Logistic.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.s );
	}
});

/**
* Logistic distribution mode.
*
* @name mode
* @memberof Logistic.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.mode;
* // returns 4.0
*/
Object.defineProperty( Logistic.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.s );
	}
});

/**
* Logistic distribution skewness.
*
* @name skewness
* @memberof Logistic.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.skewness;
* // returns 0.0
*/
Object.defineProperty( Logistic.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.s );
	}
});

/**
* Logistic distribution standard deviation.
*
* @name stdev
* @memberof Logistic.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.stdev;
* // returns ~21.766
*/
Object.defineProperty( Logistic.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.s );
	}
});

/**
* Logistic distribution variance.
*
* @name variance
* @memberof Logistic.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.variance;
* // returns ~473.741
*/
Object.defineProperty( Logistic.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.s );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.cdf( 0.5 );
* // returns ~0.407
*/
setReadOnly( Logistic.prototype, 'cdf', logisticCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.logcdf( 0.5 );
* // returns ~-0.898
*/
setReadOnly( Logistic.prototype, 'logcdf', logisticLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.logpdf( 0.8 );
* // returns ~-2.795
*/
setReadOnly( Logistic.prototype, 'logpdf', logisticLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.mgf( 0.2 );
* // returns ~6.379
*/
setReadOnly( Logistic.prototype, 'mgf', logisticMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.pdf( 0.8 );
* // returns 0.0625
*/
setReadOnly( Logistic.prototype, 'pdf', logisticPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Logistic.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Logistic.prototype, 'quantile', logisticQuantile );


// EXPORTS //

module.exports = Logistic;

},{"@stdlib/assert/is-nan":32,"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/logistic/cdf":909,"@stdlib/math/base/dists/logistic/entropy":913,"@stdlib/math/base/dists/logistic/kurtosis":914,"@stdlib/math/base/dists/logistic/logcdf":918,"@stdlib/math/base/dists/logistic/logpdf":922,"@stdlib/math/base/dists/logistic/mean":924,"@stdlib/math/base/dists/logistic/median":926,"@stdlib/math/base/dists/logistic/mgf":929,"@stdlib/math/base/dists/logistic/mode":931,"@stdlib/math/base/dists/logistic/pdf":934,"@stdlib/math/base/dists/logistic/quantile":937,"@stdlib/math/base/dists/logistic/skewness":939,"@stdlib/math/base/dists/logistic/stdev":941,"@stdlib/math/base/dists/logistic/variance":943,"@stdlib/utils/define-read-only-property":1937}],911:[function(require,module,exports){
'use strict';

/**
* Logistic distribution constructor.
*
* @module @stdlib/math/base/dists/logistic/ctor
*
* @example
* var Logistic = require( '@stdlib/math/base/dists/logistic/ctor' );
*
* var logistic = new Logistic( 1.0, 1.0 );
*
* var y = logistic.cdf( 1.5 );
* // returns ~0.622
*
* var mu = logistic.mean;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":910}],912:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns 2.0
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.693
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return ln( s ) + 2.0;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],913:[function(require,module,exports){
'use strict';

/**
* Logistic distribution differential entropy.
*
* @module @stdlib/math/base/dists/logistic/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/logistic/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns 2.0
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.693
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":912}],914:[function(require,module,exports){
'use strict';

/**
* Logistic distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/logistic/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/logistic/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 1.2
*
* y = kurtosis( 4.0, 2.0 );
* // returns 1.2
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":915}],915:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 1.2
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 1.2
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 1.2;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],916:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace logistic
*/
var logistic = {};

/**
* @name cdf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/cdf}
*/
setReadOnly( logistic, 'cdf', require( '@stdlib/math/base/dists/logistic/cdf' ) );

/**
* @name entropy
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/entropy}
*/
setReadOnly( logistic, 'entropy', require( '@stdlib/math/base/dists/logistic/entropy' ) );

/**
* @name kurtosis
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/kurtosis}
*/
setReadOnly( logistic, 'kurtosis', require( '@stdlib/math/base/dists/logistic/kurtosis' ) );

/**
* @name logcdf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/logcdf}
*/
setReadOnly( logistic, 'logcdf', require( '@stdlib/math/base/dists/logistic/logcdf' ) );

/**
* @name Logistic
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/ctor}
*/
setReadOnly( logistic, 'Logistic', require( '@stdlib/math/base/dists/logistic/ctor' ) );

/**
* @name logpdf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/logpdf}
*/
setReadOnly( logistic, 'logpdf', require( '@stdlib/math/base/dists/logistic/logpdf' ) );

/**
* @name mean
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/mean}
*/
setReadOnly( logistic, 'mean', require( '@stdlib/math/base/dists/logistic/mean' ) );

/**
* @name median
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/median}
*/
setReadOnly( logistic, 'median', require( '@stdlib/math/base/dists/logistic/median' ) );

/**
* @name mgf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/mgf}
*/
setReadOnly( logistic, 'mgf', require( '@stdlib/math/base/dists/logistic/mgf' ) );

/**
* @name mode
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/mode}
*/
setReadOnly( logistic, 'mode', require( '@stdlib/math/base/dists/logistic/mode' ) );

/**
* @name pdf
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/pdf}
*/
setReadOnly( logistic, 'pdf', require( '@stdlib/math/base/dists/logistic/pdf' ) );

/**
* @name quantile
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/quantile}
*/
setReadOnly( logistic, 'quantile', require( '@stdlib/math/base/dists/logistic/quantile' ) );

/**
* @name skewness
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/skewness}
*/
setReadOnly( logistic, 'skewness', require( '@stdlib/math/base/dists/logistic/skewness' ) );

/**
* @name stdev
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/stdev}
*/
setReadOnly( logistic, 'stdev', require( '@stdlib/math/base/dists/logistic/stdev' ) );

/**
* @name variance
* @memberof logistic
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/logistic/variance}
*/
setReadOnly( logistic, 'variance', require( '@stdlib/math/base/dists/logistic/variance' ) );


// EXPORTS //

module.exports = logistic;

},{"@stdlib/math/base/dists/logistic/cdf":909,"@stdlib/math/base/dists/logistic/ctor":911,"@stdlib/math/base/dists/logistic/entropy":913,"@stdlib/math/base/dists/logistic/kurtosis":914,"@stdlib/math/base/dists/logistic/logcdf":918,"@stdlib/math/base/dists/logistic/logpdf":922,"@stdlib/math/base/dists/logistic/mean":924,"@stdlib/math/base/dists/logistic/median":926,"@stdlib/math/base/dists/logistic/mgf":929,"@stdlib/math/base/dists/logistic/mode":931,"@stdlib/math/base/dists/logistic/pdf":934,"@stdlib/math/base/dists/logistic/quantile":937,"@stdlib/math/base/dists/logistic/skewness":939,"@stdlib/math/base/dists/logistic/stdev":941,"@stdlib/math/base/dists/logistic/variance":943,"@stdlib/utils/define-read-only-property":1937}],917:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logcdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1pexp = require( './log1pexp.js' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.0 );
* // returns ~-1.565
*
* y = logcdf( 4.0 );
* // returns ~-0.414
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / s;
		return -log1pexp( -z );
	}
}


// EXPORTS //

module.exports = factory;

},{"./log1pexp.js":919,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logcdf":454,"@stdlib/utils/constant-function":1933}],918:[function(require,module,exports){
'use strict';

/**
* Logistic distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/logistic/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/logistic/logcdf' );
*
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.127
*
* var mylogcdf = logcdf.factory( 3.0, 1.5 );
*
* var y = mylogcdf( 1.0 );
* // returns ~-1.565
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":917,"./logcdf.js":920,"@stdlib/utils/define-read-only-property":1937}],919:[function(require,module,exports){
'use strict';

/*
* This function has been adapted from [StatsFuns.jl]{@link https://github.com/JuliaStats/StatsFuns.jl/blob/master/src/basicfuns.jl} Julia package.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
The StatsFuns.jl package is licensed under the MIT "Expat" License:
Copyright (c) 2015: Dahua Lin.
*/

// MODULES //

var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Compute ln( 1 + exp(x) ) without overflow.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function log1pexp( x ) {
	if ( x <= 18.0 ) {
		return log1p( exp(x) );
	}
	if ( x > 33.3 ) {
		return x;
	}
	// Case: 18.0 < x <= 33.3
	return x + exp( -x );
}


// EXPORTS //

module.exports = log1pexp;

},{"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/log1p":1690}],920:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var log1pexp = require( './log1pexp.js' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.127
*
* @example
* var y = logcdf( 5.0, 10.0, 3.0 );
* // returns ~-1.839
*
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function logcdf( x, mu, s ) {
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return x < mu ? NINF : 0.0;
	}
	z = ( x - mu ) / s;
	return -log1pexp( -z );
}


// EXPORTS //

module.exports = logcdf;

},{"./log1pexp.js":919,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128}],921:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns -2.079
*
* y = logpdf( 5.0 );
* // returns ~-3.352
*/
function factory( mu, s ) {
	var ls;
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	ls = ln( s );
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var az;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === NINF ) {
			return NINF;
		}
		z = ( x - mu ) / s;
		az = -abs( z );
		return az - (2.0 * log1p( exp( az ) )) - ls;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logpdf":457,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/utils/constant-function":1933}],922:[function(require,module,exports){
'use strict';

/**
* Logistic distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/logistic/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/logistic/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns -2.079
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":921,"./logpdf.js":923,"@stdlib/utils/define-read-only-property":1937}],923:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns ~-3.352
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 8.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function logpdf( x, mu, s ) {
	var az;
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( x === NINF ) {
		return NINF;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : NINF;
	}
	z = ( x - mu ) / s;
	az = -abs( z );
	return az - (2.0 * log1p( exp( az ) )) - ln( s );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690}],924:[function(require,module,exports){
'use strict';

/**
* Logistic distribution expected value.
*
* @module @stdlib/math/base/dists/logistic/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/logistic/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":925}],925:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],926:[function(require,module,exports){
'use strict';

/**
* Logistic distribution median.
*
* @module @stdlib/math/base/dists/logistic/median
*
* @example
* var median = require( '@stdlib/math/base/dists/logistic/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":927}],927:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128}],928:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/mgf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinc = require( '@stdlib/math/base/special/sinc' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a logistic distribution with mean `mu` and scale parameter `s`.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 10.0, 0.5 );
*
* var y = mgf( 0.5 );
* // returns ~164.846
*
* y = mgf( 2.0 );
* // returns Infinity
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a logistic distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var st = s * t;
		return exp( mu * t ) / sinc( st );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/mgf":463,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sinc":1808,"@stdlib/utils/constant-function":1933}],929:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a logistic distribution.
*
* @module @stdlib/math/base/dists/logistic/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/logistic/mgf' );
*
* var y = mgf( 0.9, 0.0, 1.0 );
* // returns ~9.15
*
* y = mgf( 0.1, 4.0, 4.0 );
* // returns ~1.971
*
* y = mgf( -0.2, 4.0, 4.0 );
* // returns ~1.921
*
* var mymgf = mgf.factory( 10.0, 0.5 );
*
* y = mymgf( 0.5 );
* // returns ~164.846
*
* y = mymgf( 2.0 );
* // returns Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":928,"./mgf.js":930,"@stdlib/utils/define-read-only-property":1937}],930:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sinc = require( '@stdlib/math/base/special/sinc' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a logistic distribution with mean `mu` and scale parameter `s` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.9, 0.0, 1.0 );
* // returns ~9.15
*
* @example
* var y = mgf( 0.1, 4.0, 4.0 );
* // returns ~1.971
*
* @example
* var y = mgf( -0.2, 4.0, 4.0 );
* // returns ~1.921
*
* @example
* var y = mgf( 0.5, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 0.0, 4.0 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*/
function mgf( t, mu, s ) {
	var st;
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	st = s * t;
	return exp( mu * t ) / sinc( st );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sinc":1808}],931:[function(require,module,exports){
'use strict';

/**
* Logistic distribution mode.
*
* @module @stdlib/math/base/dists/logistic/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/logistic/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":932}],932:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],933:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 10.0 );
* // returns 0.125
*
* y = pdf( 5.0 );
* // returns ~0.035
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var ez;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === NINF ) {
			return 0.0;
		}
		z = abs( ( x - mu ) / s );
		ez = exp( -z );
		return ez / ( s * pow( 1.0 + ez, 2.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/pdf":466,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],934:[function(require,module,exports){
'use strict';

/**
* Logistic distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/logistic/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/logistic/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.105
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns 0.125
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":933,"./pdf.js":935,"@stdlib/utils/define-read-only-property":1937}],935:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.105
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns ~0.035
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function pdf( x, mu, s ) {
	var ez;
	var z;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	if ( s === 0.0 ) {
		return x === mu ? PINF : 0.0;
	}
	z = abs( ( x - mu ) / s );
	ez = exp( -z );
	return ez / ( s * pow( 1.0 + ez, 2.0 ) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],936:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/quantile' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~12.773
*/
function factory( mu, s ) {
	if ( isnan( mu ) || isnan( s ) || s < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( s === 0.0 ) {
		return degenerate( mu );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a logistic distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu + (s * ln( p / ( 1.0 - p ) ));
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/quantile":472,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],937:[function(require,module,exports){
'use strict';

/**
* Logistic distribution quantile function.
*
* @module @stdlib/math/base/dists/logistic/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/logistic/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":936,"./quantile.js":938,"@stdlib/utils/define-read-only-property":1937}],938:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the quantile function for a logistic distribution with location parameter `mu` and scale parameter `s` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		isnan( p ) ||
		s < 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return mu;
	}
	return mu + ( s * ln( p / ( 1.0-p ) ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],939:[function(require,module,exports){
'use strict';

/**
* Logistic distribution skewness.
*
* @module @stdlib/math/base/dists/logistic/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/logistic/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":940}],940:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128}],941:[function(require,module,exports){
'use strict';

/**
* Logistic distribution standard deviation.
*
* @module @stdlib/math/base/dists/logistic/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/logistic/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.814
*
* y = stdev( 4.0, 2.0 );
* // returns ~3.628
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":942}],942:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var SQRT3 = require( '@stdlib/constants/math/float64-sqrt-three' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns the standard deviation for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.814
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~3.628
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return s * PI / SQRT3;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-sqrt-three":108,"@stdlib/math/base/assert/is-nan":128}],943:[function(require,module,exports){
'use strict';

/**
* Logistic distribution variance.
*
* @module @stdlib/math/base/dists/logistic/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/logistic/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~3.29
*
* y = variance( 4.0, 2.0 );
* // returns ~13.159
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":944}],944:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );


// MAIN //

/**
* Returns the variance for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~3.29
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~13.159
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, s ) {
	if (
		isnan( mu ) ||
		isnan( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return ( s*s ) * PI_SQUARED / 3.0;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/assert/is-nan":128}],945:[function(require,module,exports){
'use strict';

// MODULES //

var normalCDF = require( '@stdlib/math/base/dists/normal/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.756
*
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.003
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function cdf( x, mu, sigma ) {
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return normalCDF( ln(x), mu, sigma );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/normal/cdf":1013,"@stdlib/math/base/special/ln":1679}],946:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var normalCDF = require( '@stdlib/math/base/dists/normal/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.023
*
* y = cdf( 4.0 );
* // returns ~0.141
*/
function factory( mu, sigma ) {
	if ( isnan( mu ) || isnan( sigma ) || sigma <= 0.0 ) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		return normalCDF( ln(x), mu, sigma );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/normal/cdf":1013,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],947:[function(require,module,exports){
'use strict';

/**
* Evaluates the lognormal distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/lognormal/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/lognormal/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.756
*
* y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.003
*
* var mycdf = factory( 3.0, 1.5 );
*
* y = mycdf( 1.0 );
* // returns ~0.023
*
* y = mycdf( 4.0 );
* // returns ~0.141
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":945,"./factory.js":946,"@stdlib/utils/define-read-only-property":1937}],948:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/lognormal/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/lognormal/kurtosis' );
var mean = require( '@stdlib/math/base/dists/lognormal/mean' );
var median = require( '@stdlib/math/base/dists/lognormal/median' );
var mode = require( '@stdlib/math/base/dists/lognormal/mode' );
var skewness = require( '@stdlib/math/base/dists/lognormal/skewness' );
var stdev = require( '@stdlib/math/base/dists/lognormal/stdev' );
var variance = require( '@stdlib/math/base/dists/lognormal/variance' );
var cdf = require( '@stdlib/math/base/dists/lognormal/cdf' );
var logpdf = require( '@stdlib/math/base/dists/lognormal/logpdf' );
var pdf = require( '@stdlib/math/base/dists/lognormal/pdf' );
var quantile = require( '@stdlib/math/base/dists/lognormal/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function lognormalCDF( x ) {
	return cdf( x, this.mu, this.sigma );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function lognormalLogPDF( x ) {
	return logpdf( x, this.mu, this.sigma );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function lognormalPDF( x ) {
	return pdf( x, this.mu, this.sigma );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function lognormalQuantile( p ) {
	return quantile( p, this.mu, this.sigma );
}


// MAIN //

/**
* Lognormal distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {LogNormal} distribution instance
*
* @example
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var mean = lognormal.mean;
* // returns ~4.482
*/
function LogNormal() {
	var sigma;
	var mu;
	if ( !(this instanceof LogNormal) ) {
		if ( arguments.length === 0 ) {
			return new LogNormal();
		}
		return new LogNormal( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		mu = 0.0;
		sigma = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
}

/**
* Lognormal distribution differential entropy.
*
* @name entropy
* @memberof LogNormal.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.entropy;
* // returns ~7.904
*/
Object.defineProperty( LogNormal.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution excess kurtosis.
*
* @name kurtosis
* @memberof LogNormal.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.kurtosis;
* // returns 1.4243659274306933e+250
*/
Object.defineProperty( LogNormal.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution expected value.
*
* @name mean
* @memberof LogNormal.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mean;
* // returns 1.0148003881138887e+33
*/
Object.defineProperty( LogNormal.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution median.
*
* @name median
* @memberof LogNormal.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.median;
* // returns ~54.598
*/
Object.defineProperty( LogNormal.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution mode.
*
* @name mode
* @memberof LogNormal.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mode;
* // returns 1.580420060273613e-61
*/
Object.defineProperty( LogNormal.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution skewness.
*
* @name skewness
* @memberof LogNormal.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.skewness;
* // returns 6.421080152185613e+93
*/
Object.defineProperty( LogNormal.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution standard deviation.
*
* @name stdev
* @memberof LogNormal.prototype
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.stdev;
* // returns 1.886180808490652e+64
*/
Object.defineProperty( LogNormal.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.sigma );
	}
});

/**
* Lognormal distribution variance.
*
* @name variance
* @memberof LogNormal.prototype
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.variance;
* // returns 3.55767804231845e+128
*/
Object.defineProperty( LogNormal.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.sigma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.cdf( 0.5 );
* // returns ~0.25
*/
setReadOnly( LogNormal.prototype, 'cdf', lognormalCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.logpdf( 0.8 );
* // returns ~-2.235
*/
setReadOnly( LogNormal.prototype, 'logpdf', lognormalLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.pdf( 0.8 );
* // returns ~0.107
*/
setReadOnly( LogNormal.prototype, 'pdf', lognormalPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof LogNormal.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.quantile( 0.5 );
* // returns ~7.389
*/
setReadOnly( LogNormal.prototype, 'quantile', lognormalQuantile );


// EXPORTS //

module.exports = LogNormal;

},{"@stdlib/assert/is-nan":32,"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/lognormal/cdf":947,"@stdlib/math/base/dists/lognormal/entropy":951,"@stdlib/math/base/dists/lognormal/kurtosis":952,"@stdlib/math/base/dists/lognormal/logpdf":956,"@stdlib/math/base/dists/lognormal/mean":958,"@stdlib/math/base/dists/lognormal/median":960,"@stdlib/math/base/dists/lognormal/mode":962,"@stdlib/math/base/dists/lognormal/pdf":965,"@stdlib/math/base/dists/lognormal/quantile":968,"@stdlib/math/base/dists/lognormal/skewness":970,"@stdlib/math/base/dists/lognormal/stdev":972,"@stdlib/math/base/dists/lognormal/variance":974,"@stdlib/utils/define-read-only-property":1937}],949:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution constructor.
*
* @module @stdlib/math/base/dists/lognormal/ctor
*
* @example
* var LogNormal = require( '@stdlib/math/base/dists/lognormal/ctor' );
*
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var mean = lognormal.mean;
* // returns ~4.482
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":948}],950:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );


// MAIN //

/**
* Returns the differential entropy for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~7.112
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return ln( sigma * exp( mu + 0.5 ) * SQRT_TWO_PI );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-sqrt-two-pi":109,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679}],951:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution entropy.
*
* @module @stdlib/math/base/dists/lognormal/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/lognormal/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* y = entropy( 4.0, 2.0 );
* // returns ~6.112
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":950}],952:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/lognormal/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/lognormal/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns ~110.936
*
* y = kurtosis( 4.0, 2.0 );
* // returns ~9220556.977
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":953}],953:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the excess kurtosis for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns ~110.936
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns ~9220556.977
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, sigma ) {
	var out;
	var s2;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma * sigma;
	out = exp( 4.0*s2 );
	out += 2.0 * exp( 3.0*s2 );
	out += 3.0 * exp( 2.0*s2 );
	out -= 6.0;
	return out;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],954:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace lognormal
*/
var lognormal = {};

/**
* @name cdf
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/cdf}
*/
setReadOnly( lognormal, 'cdf', require( '@stdlib/math/base/dists/lognormal/cdf' ) );

/**
* @name entropy
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/entropy}
*/
setReadOnly( lognormal, 'entropy', require( '@stdlib/math/base/dists/lognormal/entropy' ) );

/**
* @name kurtosis
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/kurtosis}
*/
setReadOnly( lognormal, 'kurtosis', require( '@stdlib/math/base/dists/lognormal/kurtosis' ) );

/**
* @name logpdf
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/logpdf}
*/
setReadOnly( lognormal, 'logpdf', require( '@stdlib/math/base/dists/lognormal/logpdf' ) );

/**
* @name LogNormal
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/ctor}
*/
setReadOnly( lognormal, 'LogNormal', require( '@stdlib/math/base/dists/lognormal/ctor' ) );

/**
* @name mean
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/mean}
*/
setReadOnly( lognormal, 'mean', require( '@stdlib/math/base/dists/lognormal/mean' ) );

/**
* @name median
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/median}
*/
setReadOnly( lognormal, 'median', require( '@stdlib/math/base/dists/lognormal/median' ) );

/**
* @name mode
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/mode}
*/
setReadOnly( lognormal, 'mode', require( '@stdlib/math/base/dists/lognormal/mode' ) );

/**
* @name pdf
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/pdf}
*/
setReadOnly( lognormal, 'pdf', require( '@stdlib/math/base/dists/lognormal/pdf' ) );

/**
* @name quantile
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/quantile}
*/
setReadOnly( lognormal, 'quantile', require( '@stdlib/math/base/dists/lognormal/quantile' ) );

/**
* @name skewness
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/skewness}
*/
setReadOnly( lognormal, 'skewness', require( '@stdlib/math/base/dists/lognormal/skewness' ) );

/**
* @name stdev
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/stdev}
*/
setReadOnly( lognormal, 'stdev', require( '@stdlib/math/base/dists/lognormal/stdev' ) );

/**
* @name variance
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/lognormal/variance}
*/
setReadOnly( lognormal, 'variance', require( '@stdlib/math/base/dists/lognormal/variance' ) );


// EXPORTS //

module.exports = lognormal;

},{"@stdlib/math/base/dists/lognormal/cdf":947,"@stdlib/math/base/dists/lognormal/ctor":949,"@stdlib/math/base/dists/lognormal/entropy":951,"@stdlib/math/base/dists/lognormal/kurtosis":952,"@stdlib/math/base/dists/lognormal/logpdf":956,"@stdlib/math/base/dists/lognormal/mean":958,"@stdlib/math/base/dists/lognormal/median":960,"@stdlib/math/base/dists/lognormal/mode":962,"@stdlib/math/base/dists/lognormal/pdf":965,"@stdlib/math/base/dists/lognormal/quantile":968,"@stdlib/math/base/dists/lognormal/skewness":970,"@stdlib/math/base/dists/lognormal/stdev":972,"@stdlib/math/base/dists/lognormal/variance":974,"@stdlib/utils/define-read-only-property":1937}],955:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 4.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-4.269
*
* y = logpdf( 2.0 );
* // returns ~-3.689
*/
function factory( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return constantFunction( NaN );
	}
	s2 = pow( sigma, 2.0 );
	A = -0.5 * ln( 2.0 * s2 * PI );
	B = -1.0 / ( 2.0 * s2 );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.5 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return x <= 0.0 ? NINF : A - ln( x ) + ( B * pow( ln(x) - mu, 2.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],956:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the probability density function (PDF) for a lognormal distribution.
*
* @module @stdlib/math/base/dists/lognormal/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/lognormal/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-1.852
*
* y = logpdf( 1.0, 0.0, 1.0 );
* // returns ~-0.919
*
* y = logpdf( 1.0, 3.0, 1.0 );
* // returns ~-5.419
*
* var mylogpdf = factory( 4.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-4.269
*
* y = mylogpdf( 2.0 );
* // returns ~-3.689
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":955,"./logpdf.js":957,"@stdlib/utils/define-read-only-property":1937}],957:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-1.852
*
* @example
* var y = logpdf( 1.0, 0.0, 1.0 );
* // returns ~-0.919
*
* @example
* var y = logpdf( 1.0, 3.0, 1.0 );
* // returns ~-5.419
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return NINF;
	}
	s2 = pow( sigma, 2.0 );
	A = -0.5 * ln( 2.0 * s2 * PI );
	B = -1.0 / ( 2.0 * s2 );
	return A - ln( x ) + ( B * pow( ln(x) - mu, 2.0 ) );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],958:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution expected value.
*
* @module @stdlib/math/base/dists/lognormal/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/lognormal/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns ~1.649
*
* y = mean( 4.0, 2.0 );
* // returns ~403.429
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":959}],959:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the expected value for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns ~1.649
* @example
* var y = mean( 5.0, 2.0 );
* // returns ~1096.633
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return exp( mu + ( ( sigma*sigma ) / 2.0 ) );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],960:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution median.
*
* @module @stdlib/math/base/dists/lognormal/median
*
* @example
* var median = require( '@stdlib/math/base/dists/lognormal/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 1.0
*
* y = median( 4.0, 2.0 );
* // returns ~54.598
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":961}],961:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the median for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 1.0
* @example
* var y = median( 5.0, 2.0 );
* // returns ~148.413
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return exp( mu );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],962:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution mode.
*
* @module @stdlib/math/base/dists/lognormal/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/lognormal/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns ~0.368
*
* y = mode( 4.0, 2.0 );
* // returns 1.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":963}],963:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the mode for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns ~0.368
* @example
* var y = mode( 5.0, 2.0 );
* // returns ~2.718
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return exp( mu - ( sigma*sigma ) );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],964:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 4.0, 2.0 );
* var y = pdf( 10.0 );
* // returns ~0.014
*
* y = pdf( 2.0 );
* // returns ~0.025
*/
function factory( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return constantFunction( NaN );
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / ( sqrt( 2.0 * s2 * PI ) );
	B = -1.0 / ( 2.0 * s2 );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.5 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return x <= 0.0 ? 0.0 : (1.0/x) * A * exp( B * pow( ln(x) - mu, 2.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],965:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for a lognormal distribution.
*
* @module @stdlib/math/base/dists/lognormal/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/lognormal/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.157
*
* y = pdf( 1.0, 0.0, 1.0 );
* // returns ~0.399
*
* y = pdf( 1.0, 3.0, 1.0 );
* // returns ~0.004
*
* var mypdf = factory( 4.0, 2.0 );
* y = mypdf( 10.0 );
* // returns ~0.014
*
* y = mypdf( 2.0 );
* // returns ~0.025
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":964,"./pdf.js":966,"@stdlib/utils/define-read-only-property":1937}],966:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.157
*
* @example
* var y = pdf( 1.0, 0.0, 1.0 );
* // returns ~0.399
*
* @example
* var y = pdf( 1.0, 3.0, 1.0 );
* // returns ~0.004
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / ( sqrt( 2.0 * s2 * PI ) );
	B = -1.0 / ( 2.0 * s2 );
	return (1.0/x) * A * exp( B * pow( ln(x) - mu, 2.0 ) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],967:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var qnormal = require( '@stdlib/math/base/dists/normal/quantile' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 4.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~54.598
*
* y = quantile( 0.8 );
* // returns ~293.901
*/
function factory( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a lognormal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return exp( mu + (sigma * qnormal( p, 0.0, 1.0 )) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/normal/quantile":1037,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],968:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for a lognormal distribution.
*
* @module @stdlib/math/base/dists/lognormal/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/lognormal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~2.32
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~54.598
*
* var myquantile = quantile.factory( 4.0, 2.0 );
*
* y = myquantile( 0.2 );
* // returns ~10.143
*
* y = myquantile( 0.8 );
* // returns ~293.901
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":967,"./quantile.js":969,"@stdlib/utils/define-read-only-property":1937}],969:[function(require,module,exports){
'use strict';

// MODULES //

var qnormal = require( '@stdlib/math/base/dists/normal/quantile' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~2.32
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~54.598
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		isnan( p ) ||
		sigma <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return exp( mu + (sigma * qnormal( p, 0.0, 1.0 )) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/normal/quantile":1037,"@stdlib/math/base/special/exp":1456}],970:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution skewness.
*
* @module @stdlib/math/base/dists/lognormal/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/lognormal/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns ~6.185
*
* y = skewness( 4.0, 2.0 );
* // returns ~414.359
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":971}],971:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the skewness for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns ~6.185
* @example
* var y = skewness( 5.0, 2.0 );
* // returns ~414.359
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, sigma ) {
	var es2;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	es2 = exp( sigma*sigma );
	return ( es2 + 2.0 ) * sqrt( es2 - 1.0 );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sqrt":1826}],972:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution standard deviation.
*
* @module @stdlib/math/base/dists/lognormal/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/lognormal/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~2.161
*
* y = stdev( 4.0, 2.0 );
* // returns ~2953.533
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":973}],973:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the standard deviation for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~2.161
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~8028.534
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, sigma ) {
	var s2;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma*sigma;
	return sqrt( ( exp( s2 ) - 1.0 ) * exp( ( 2.0*mu ) + s2 ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sqrt":1826}],974:[function(require,module,exports){
'use strict';

/**
* Lognormal distribution variance.
*
* @module @stdlib/math/base/dists/lognormal/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/lognormal/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~4.671
*
* y = variance( 4.0, 2.0 );
* // returns ~8723355.729
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":975}],975:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns the variance for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~4.671
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~64457364.853
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, sigma ) {
	var s2;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma*sigma;
	return ( exp( s2 ) - 1.0 ) * exp( ( 2.0*mu ) + s2 );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],976:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 5.0, 20.0, 0.8 );
* // returns ~0.617
*
* @example
* var y = cdf( 21.0, 20.0, 0.5 );
* // returns ~0.622
*
* @example
* var y = cdf( 5.0, 10.0, 0.4 );
* // returns ~0.034
*
* @example
* var y = cdf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* @example
* var y = cdf( 21.0, 15.5, 0.5 );
* // returns ~0.859
*
* @example
* var y = cdf( 5.0, 7.4, 0.4 );
* // returns ~0.131
*
* @example
* var y = cdf( 2.0, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 20.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, 1.5 );
* // returns NaN
*/
function cdf( x, r, p ) {
	var xint;
	if (
		isnan( x ) ||
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	// Ensure left-continuity:
	xint = floor( x + 1e-7 );
	return betainc( p, r, xint + 1.0 );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/floor":1484}],977:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} CDF
*/
function factory( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	function cdf( x ) {
		var xint;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		// Ensure left-continuity:
		xint = floor( x + 1e-7 );
		return betainc( p, r, xint + 1.0 );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/floor":1484,"@stdlib/utils/constant-function":1933}],978:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/negative-binomial/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/negative-binomial/cdf' );
*
* var y = cdf( 5.0, 20.0, 0.8 );
* // returns ~0.617
*
* y = cdf( 21.0, 20.0, 0.5 );
* // returns ~0.622
*
* y = cdf( 5.0, 10.0, 0.4 );
* // returns ~0.034
*
* y = cdf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* var y = cdf( 21.0, 15.5, 0.5 );
* // returns ~0.859
*
* y = cdf( 5.0, 7.4, 0.4 );
* // returns ~0.131
*
* var mycdf = cdf.factory( 10, 0.5 );
* y = mycdf( 3.0 );
* // returns ~0.046
*
* y = mycdf( 11.0 );
* // returns ~0.668
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":976,"./factory.js":977,"@stdlib/utils/define-read-only-property":1937}],979:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var kurtosis = require( '@stdlib/math/base/dists/negative-binomial/kurtosis' );
var mean = require( '@stdlib/math/base/dists/negative-binomial/mean' );
var mode = require( '@stdlib/math/base/dists/negative-binomial/mode' );
var skewness = require( '@stdlib/math/base/dists/negative-binomial/skewness' );
var stdev = require( '@stdlib/math/base/dists/negative-binomial/stdev' );
var variance = require( '@stdlib/math/base/dists/negative-binomial/variance' );
var cdf = require( '@stdlib/math/base/dists/negative-binomial/cdf' );
var logpmf = require( '@stdlib/math/base/dists/negative-binomial/logpmf' );
var mgf = require( '@stdlib/math/base/dists/negative-binomial/mgf' );
var pmf = require( '@stdlib/math/base/dists/negative-binomial/pmf' );
var quantile = require( '@stdlib/math/base/dists/negative-binomial/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function negativeBinomialCDF( x ) {
	return cdf( x, this.r, this.p );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function negativeBinomialLogPMF( x ) {
	return logpmf( x, this.r, this.p );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function negativeBinomialMGF( t ) {
	return mgf( t, this.r, this.p );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function negativeBinomialPMF( x ) {
	return pmf( x, this.r, this.p );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function negativeBinomialQuantile( p ) {
	return quantile( p, this.r, this.p );
}


// MAIN //

/**
* Negative binomial distribution constructor.
*
* @constructor
* @param {PositiveNumber} [r=1.0] - number of successes until experiment is stopped
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `r` must be a positive number
* @throws {TypeError} `p` must be a number between 0 and 1
* @returns {NegativeBinomial} distribution instance
*
* @example
* var nbinomial = new NegativeBinomial( 5.0, 0.1 );
*
* var y = nbinomial.cdf( 10.0 );
* // returns ~0.013
*
* var mode = nbinomial.mode;
* // returns 36.0
*/
function NegativeBinomial() {
	var r;
	var p;
	if ( !(this instanceof NegativeBinomial) ) {
		if ( arguments.length === 0 ) {
			return new NegativeBinomial();
		}
		return new NegativeBinomial( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		r = arguments[ 0 ];
		p = arguments[ 1 ];
		if ( !isPositive( r ) ) {
			throw new TypeError( 'invalid input argument. Number of trials until experiment is stopped `r` must be a positive number. Value: `' + r + '`' );
		}
		if ( !isProbability( p ) ) {
			throw new TypeError( 'invalid input argument. Success probability `p` must be a number between 0 and 1. Value: `' + p + '`' );
		}
	} else {
		r = 1.0;
		p = 0.5;
	}
	Object.defineProperty( this, 'r', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return r;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			r = value;
		}
	});
	Object.defineProperty( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !isProbability( value ) ) {
				throw new TypeError( 'invalid value. Must be a number between 0 and 1. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
}

/**
* Negative binomial distribution excess kurtosis.
*
* @name kurtosis
* @memberof NegativeBinomial.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.kurtosis;
* // returns ~0.522
*/
Object.defineProperty( NegativeBinomial.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.r, this.p );
	}
});

/**
* Negative binomial distribution expected value.
*
* @name mean
* @memberof NegativeBinomial.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.mean;
* // returns ~18.0
*/
Object.defineProperty( NegativeBinomial.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.r, this.p );
	}
});

/**
* Negative binomial distribution mode.
*
* @name mode
* @memberof NegativeBinomial.prototype
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.mode;
* // returns 16.0
*/
Object.defineProperty( NegativeBinomial.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.r, this.p );
	}
});

/**
* Negative binomial distribution skewness.
*
* @name skewness
* @memberof NegativeBinomial.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.skewness;
* // returns ~0.596
*/
Object.defineProperty( NegativeBinomial.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.r, this.p );
	}
});

/**
* Negative binomial distribution standard deviation.
*
* @name stdev
* @memberof NegativeBinomial.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.stdev;
* // returns ~6.708
*/
Object.defineProperty( NegativeBinomial.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.r, this.p );
	}
});

/**
* Negative binomial distribution variance.
*
* @name variance
* @memberof NegativeBinomial.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.variance;
* // returns ~45.0
*/
Object.defineProperty( NegativeBinomial.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.r, this.p );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.cdf( 3.0 );
* // returns ~0.033
*/
setReadOnly( NegativeBinomial.prototype, 'cdf', negativeBinomialCDF );

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @name logpmf
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.logpmf( 9.0 );
* // returns ~-3.508
*/
setReadOnly( NegativeBinomial.prototype, 'logpmf', negativeBinomialLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.mgf( 0.1 );
* // returns ~1.66
*/
setReadOnly( NegativeBinomial.prototype, 'mgf', negativeBinomialMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.pmf( 9.0 );
* // returns ~0.047
*/
setReadOnly( NegativeBinomial.prototype, 'pmf', negativeBinomialPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.quantile( 0.5 );
* // returns 15.0
*/
setReadOnly( NegativeBinomial.prototype, 'quantile', negativeBinomialQuantile );


// EXPORTS //

module.exports = NegativeBinomial;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/assert/is-probability":56,"@stdlib/math/base/dists/negative-binomial/cdf":978,"@stdlib/math/base/dists/negative-binomial/kurtosis":981,"@stdlib/math/base/dists/negative-binomial/logpmf":987,"@stdlib/math/base/dists/negative-binomial/mean":989,"@stdlib/math/base/dists/negative-binomial/mgf":992,"@stdlib/math/base/dists/negative-binomial/mode":994,"@stdlib/math/base/dists/negative-binomial/pmf":999,"@stdlib/math/base/dists/negative-binomial/quantile":1002,"@stdlib/math/base/dists/negative-binomial/skewness":1005,"@stdlib/math/base/dists/negative-binomial/stdev":1007,"@stdlib/math/base/dists/negative-binomial/variance":1009,"@stdlib/utils/define-read-only-property":1937}],980:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution constructor.
*
* @module @stdlib/math/base/dists/negative-binomial/ctor
*
* @example
* var NegativeBinomial = require( '@stdlib/math/base/dists/negative-binomial/ctor' );
*
* var nbinomial = new NegativeBinomial( 7.5, 0.2 );
*
* var y = nbinomial.cdf( 12.0 );
* // returns ~0.047
*
* var mode = nbinomial.mode;
* // returns 26.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":979}],981:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/negative-binomial/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/negative-binomial/kurtosis' );
*
* var v = kurtosis( 100, 0.2 );
* // returns ~0.061
*
* v = kurtosis( 20, 0.5 );
* // returns ~0.325
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":982}],982:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 100, 0.2 );
* // returns ~0.061
* @example
* var v = kurtosis( 20, 0.5 );
* // returns ~0.325
* @example
* var v = kurtosis( 10.3, 0.8 );
* // returns ~0.893
* @example
* var v = kurtosis( -2, 0.5 );
* // returns NaN
* @example
* var v = kurtosis( 20, 1.1 );
* // returns NaN
* @example
* var v = kurtosis( 20, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 0.5 );
* // returns NaN
*/
function kurtosis( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 6.0/r ) + ( ( p*p ) / ( ( 1.0-p ) * r ) );
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],983:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace negativeBinomial
*/
var negativeBinomial = {};

/**
* @name cdf
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/cdf}
*/
setReadOnly( negativeBinomial, 'cdf', require( '@stdlib/math/base/dists/negative-binomial/cdf' ) );

/**
* @name kurtosis
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/kurtosis}
*/
setReadOnly( negativeBinomial, 'kurtosis', require( '@stdlib/math/base/dists/negative-binomial/kurtosis' ) );

/**
* @name logpmf
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/logpmf}
*/
setReadOnly( negativeBinomial, 'logpmf', require( '@stdlib/math/base/dists/negative-binomial/logpmf' ) );

/**
* @name mean
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/mean}
*/
setReadOnly( negativeBinomial, 'mean', require( '@stdlib/math/base/dists/negative-binomial/mean' ) );

/**
* @name mgf
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/mgf}
*/
setReadOnly( negativeBinomial, 'mgf', require( '@stdlib/math/base/dists/negative-binomial/mgf' ) );

/**
* @name mode
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/mode}
*/
setReadOnly( negativeBinomial, 'mode', require( '@stdlib/math/base/dists/negative-binomial/mode' ) );

/**
* @name NegativeBinomial
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/ctor}
*/
setReadOnly( negativeBinomial, 'NegativeBinomial', require( '@stdlib/math/base/dists/negative-binomial/ctor' ) );

/**
* @name pmf
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/pmf}
*/
setReadOnly( negativeBinomial, 'pmf', require( '@stdlib/math/base/dists/negative-binomial/pmf' ) );

/**
* @name quantile
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/quantile}
*/
setReadOnly( negativeBinomial, 'quantile', require( '@stdlib/math/base/dists/negative-binomial/quantile' ) );

/**
* @name skewness
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/skewness}
*/
setReadOnly( negativeBinomial, 'skewness', require( '@stdlib/math/base/dists/negative-binomial/skewness' ) );

/**
* @name stdev
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/stdev}
*/
setReadOnly( negativeBinomial, 'stdev', require( '@stdlib/math/base/dists/negative-binomial/stdev' ) );

/**
* @name variance
* @memberof negativeBinomial
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/negative-binomial/variance}
*/
setReadOnly( negativeBinomial, 'variance', require( '@stdlib/math/base/dists/negative-binomial/variance' ) );


// EXPORTS //

module.exports = negativeBinomial;

},{"@stdlib/math/base/dists/negative-binomial/cdf":978,"@stdlib/math/base/dists/negative-binomial/ctor":980,"@stdlib/math/base/dists/negative-binomial/kurtosis":981,"@stdlib/math/base/dists/negative-binomial/logpmf":987,"@stdlib/math/base/dists/negative-binomial/mean":989,"@stdlib/math/base/dists/negative-binomial/mgf":992,"@stdlib/math/base/dists/negative-binomial/mode":994,"@stdlib/math/base/dists/negative-binomial/pmf":999,"@stdlib/math/base/dists/negative-binomial/quantile":1002,"@stdlib/math/base/dists/negative-binomial/skewness":1005,"@stdlib/math/base/dists/negative-binomial/stdev":1007,"@stdlib/math/base/dists/negative-binomial/variance":1009,"@stdlib/utils/define-read-only-property":1937}],984:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var ibetaDerivative = require( './ibeta_derivative.js' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 10, 0.5 );
* var y = logpmf( 3.0 );
* // returns ~-3.612
*
* y = logpmf( 5.0 );
* // returns ~-2.797
*/
function factory( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( !isNonNegativeInteger( x ) ) {
			return NINF;
		}
		return ln( p ) - ln( r + x ) + ln( ibetaDerivative( p, r, x + 1.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"./ibeta_derivative.js":985,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],985:[function(require,module,exports){
'use strict';

// MODULES //

var ibetaPowerTerms = require( './ibeta_power_terms.js' );


// MAIN //

/**
* Computes the partial derivative with respect to x of the incomplete beta function.
*
* @private
* @param {Probability} x - input value (0 < x <= 1)
* @param {PositiveNumber} a - first parameter
* @param {PositiveNumber} b - second parameter (must be greater than 1)
* @returns {number} value of the partial derivative
*/
function ibetaDerivative( x, a, b ) {
	var f1;
	var y;
	if ( x === 1.0 ) {
		return 0.0;
	}
	// Regular cases:
	f1 = ibetaPowerTerms( a, b, x, 1.0 - x, true );
	y = ( 1.0 - x ) * x;
	f1 /= y;
	return f1;
}


// EXPORTS //

module.exports = ibetaDerivative;

},{"./ibeta_power_terms.js":986}],986:[function(require,module,exports){
arguments[4][594][0].apply(exports,arguments)
},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"dup":594}],987:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a negative binomial distribution.
*
* @module @stdlib/math/base/dists/negative-binomial/logpmf
*
* @example
* var logpmf = require( '@stdlib/math/base/dists/negative-binomial/logpmf' );
*
* var y = logpmf( 5.0, 20.0, 0.8 );
* // returns ~-1.853
*
* y = logpmf( 21.0, 20.0, 0.5 );
* // returns ~-2.818
*
* y = logpmf( 5.0, 10.0, 0.4 );
* // returns ~-4.115
*
* y = logpmf( 0.0, 10.0, 0.9 );
* // returns ~-1.054
*
* y = logpmf( 21.0, 15.5, 0.5 );
* // returns ~-3.292
*
* y = logpmf( 5.0, 7.4, 0.4 );
* // returns ~-2.976
*
* var mylogpmf = logpmf.factory( 10, 0.5 );
* y = mylogpmf( 3.0 );
* // returns ~-3.612
*
* y = mylogpmf( 5.0 );
* // returns ~-2.797
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpmf = require( './logpmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpmf, 'factory', factory );


// EXPORTS //

module.exports = logpmf;

},{"./factory.js":984,"./logpmf.js":988,"@stdlib/utils/define-read-only-property":1937}],988:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var ibetaDerivative = require( './ibeta_derivative.js' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 5.0, 20.0, 0.8 );
* // returns ~-1.853
*
* @example
* var y = logpmf( 21.0, 20.0, 0.5 );
* // returns ~-2.818
*
* @example
* var y = logpmf( 5.0, 10.0, 0.4 );
* // returns ~-4.115
*
* @example
* var y = logpmf( 0.0, 10.0, 0.9 );
* // returns ~-1.054
*
* @example
* var y = logpmf( 21.0, 15.5, 0.5 );
* // returns ~-3.292
*
* @example
* var y = logpmf( 5.0, 7.4, 0.4 );
* // returns ~-2.976
*
* @example
* var y = logpmf( 2.0, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 20, 1.5 );
* // returns NaN
*
* @example
* var y = logpmf( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 20.0, NaN );
* // returns NaN
*/
function logpmf( x, r, p ) {
	if (
		isnan( x ) ||
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( !isNonNegativeInteger( x ) || p === 0.0 ) {
		return NINF;
	}
	return ln( p ) - ln( r + x ) + ln( ibetaDerivative( p, r, x + 1.0 ) );
}


// EXPORTS //

module.exports = logpmf;

},{"./ibeta_derivative.js":985,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/ln":1679}],989:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution expected value.
*
* @module @stdlib/math/base/dists/negative-binomial/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/negative-binomial/mean' );
*
* var v = mean( 100, 0.2 );
* // returns 400
*
* v = mean( 20, 0.5 );
* // returns 20
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":990}],990:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 100, 0.2 );
* // returns 400
* @example
* var v = mean( 20, 0.5 );
* // returns 20
* @example
* var v = mean( 10.3, 0.8 );
* // returns ~2.575
* @example
* var v = mean( -2, 0.5 );
* // returns NaN
* @example
* var v = mean( 20, 1.1 );
* // returns NaN
* @example
* var v = mean( 20, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 0.5 );
* // returns NaN
*/
function mean( r, p ) {
	if (
		isnan( r ) ||
		isnan( p )
	) {
		return NaN;
	}
	if (
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( (1.0-p) * r ) / p;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],991:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.3, 0.4 );
* var y = mgf( 0.2 );
* // returns ~4.696
*/
function factory( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a negative binomial distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( t >= -ln( p ) ) {
			return NaN;
		}
		return pow( ( (1.0 - p) * exp( t ) ) / ( 1.0 - (p * exp( t )) ), r );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],992:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a negative binomial distribution.
*
* @module @stdlib/math/base/dists/negative-binomial/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/negative-binomial/mgf' );
*
* var y = mgf( 0.05, 20.0, 0.8 );
* // returns ~267.839
*
* y = mgf( 0.1, 20.0, 0.1 );
* // returns ~9.347
*
* y = mgf( 0.5, 10.0, 0.4 );
* // returns ~42822.023
*
* var myMGF = mgf.factory( 4.3, 0.4 );
* y = myMGF( 0.2 );
* // returns ~4.696
*
* y = myMGF( 0.4 );
* // returns ~30.83
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":991,"./mgf.js":993,"@stdlib/utils/define-read-only-property":1937}],993:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a negative binomial distribution.
*
* @param {number} t - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.05, 20.0, 0.8 );
* // returns ~267.839
*
* @example
* var y = mgf( 0.1, 20.0, 0.1 );
* // returns ~9.347
*
* @example
* var y = mgf( 0.5, 10.0, 0.4 );
* // returns ~42822.023
*
* @example
* var y = mgf( 0.1, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.1, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 20.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 20, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 20, 1.5 );
* // returns NaN
*/
function mgf( t, r, p ) {
	if (
		isnan( t ) ||
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0 ||
		t >= -ln( p )
	) {
		return NaN;
	}
	return pow( ( (1.0 - p) * exp( t ) ) / ( 1.0 - (p * exp( t )) ), r );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],994:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution mode.
*
* @module @stdlib/math/base/dists/negative-binomial/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/negative-binomial/mode' );
*
* var v = mode( 100, 0.2 );
* // returns 396
*
* v = mode( 20, 0.5 );
* // returns 19
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":995}],995:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns the mode of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 100, 0.2 );
* // returns 396
* @example
* var v = mode( 20, 0.5 );
* // returns 19
* @example
* var v = mode( 10.3, 0.8 );
* // returns 2
* @example
* var v = mode( -2, 0.5 );
* // returns NaN
* @example
* var v = mode( 20, 1.1 );
* // returns NaN
* @example
* var v = mode( 20, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 0.5 );
* // returns NaN
*/
function mode( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return floor( ( 1.0-p ) * ( r-1.0 ) / p );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484}],996:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ibetaDerivative = require( './ibeta_derivative.js' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 10, 0.5 );
* var y = pmf( 3.0 );
* // returns ~0.027
*
* y = pmf( 5.0 );
* // returns ~0.061
*/
function factory( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( !isNonNegativeInteger( x ) ) {
			return 0.0;
		}
		return ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );
	}
}


// EXPORTS //

module.exports = factory;

},{"./ibeta_derivative.js":997,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/utils/constant-function":1933}],997:[function(require,module,exports){
arguments[4][985][0].apply(exports,arguments)
},{"./ibeta_power_terms.js":998,"dup":985}],998:[function(require,module,exports){
arguments[4][594][0].apply(exports,arguments)
},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"dup":594}],999:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dists/negative-binomial/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dists/negative-binomial/pmf' );
*
* var y = pmf( 5.0, 20.0, 0.8 );
* // returns ~0.157
*
* y = pmf( 21.0, 20.0, 0.5 );
* // returns ~0.06
*
* y = pmf( 5.0, 10.0, 0.4 );
* // returns ~0.016
*
* y = pmf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* y = pmf( 21.0, 15.5, 0.5 );
* // returns ~0.037
*
* y = pmf( 5.0, 7.4, 0.4 );
* // returns ~0.051
*
* var mypmf = pmf.factory( 10, 0.5 );
* y = mypmf( 3.0 );
* // returns ~0.027
*
* y = mypmf( 5.0 );
* // returns ~0.061
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":996,"./pmf.js":1000,"@stdlib/utils/define-read-only-property":1937}],1000:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var ibetaDerivative = require( './ibeta_derivative.js' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 5.0, 20.0, 0.8 );
* // returns ~0.157
*
* @example
* var y = pmf( 21.0, 20.0, 0.5 );
* // returns ~0.06
*
* @example
* var y = pmf( 5.0, 10.0, 0.4 );
* // returns ~0.016
*
* @example
* var y = pmf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* @example
* var y = pmf( 21.0, 15.5, 0.5 );
* // returns ~0.037
*
* @example
* var y = pmf( 5.0, 7.4, 0.4 );
* // returns ~0.051
*
* @example
* var y = pmf( 2.0, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, 1.5 );
* // returns NaN
*
* @example
* var y = pmf( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 20.0, NaN );
* // returns NaN
*/
function pmf( x, r, p ) {
	if (
		isnan( x ) ||
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( !isNonNegativeInteger( x ) || p === 0.0 ) {
		return 0.0;
	}
	return ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );
}


// EXPORTS //

module.exports = pmf;

},{"./ibeta_derivative.js":997,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134}],1001:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var cdf = require( '@stdlib/math/base/dists/negative-binomial/cdf' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var search = require( './search.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 0.5 );
* var y = quantile( 0.1 );
* // returns 5
*
* y = quantile( 0.9 );
* // returns 16
*/
function factory( r, p ) {
	var sigmaInv;
	var sigma;
	var mu;
	var q;
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return constantFunction( NaN );
	}
	q = 1.0 - p;
	mu = ( r * q ) / p;
	sigma = sqrt( r * q ) / p;
	sigmaInv = ( (2.0/p) - 1.0 ) / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a negative binomial distribution.
	*
	* @private
	* @param {Probability} k - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( k ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( isnan( k ) || k < 0.0 || k > 1.0 ) {
			return NaN;
		}
		if ( k === 0.0 ) {
			return 0.0;
		}
		if ( k === 1.0 ) {
			return PINF;
		}

		// Cornish-Fisher expansion:
		if ( k < 0.5 ) {
			x = -erfcinv( 2.0 * k ) * SQRT2;
		} else {
			x = erfcinv( 2.0 * (1.0-k) ) * SQRT2;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
		guess = round( mu + (sigma * corr) );
		return cdf( guess, r, p ) >= k ?
			search.left( guess, k, r, p ) :
			search.right( guess, k, r, p );
	}
}


// EXPORTS //

module.exports = factory;

},{"./search.js":1004,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/negative-binomial/cdf":978,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1002:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution quantile function.
*
* @module @stdlib/math/base/dists/negative-binomial/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/negative-binomial/quantile' );
*
* var y = quantile( 0.9, 20.0, 0.2 );
* // returns 106
*
* y = quantile( 0.9, 20.0, 0.8 );
* // returns 8
*
* var myquantile = quantile.factory( 10.0, 0.5 );
* y = myquantile( 0.1 );
* // returns 5
*
* y = myquantile( 0.9 );
* // returns 16
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1001,"./quantile.js":1003,"@stdlib/utils/define-read-only-property":1937}],1003:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dists/negative-binomial/cdf' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var search = require( './search.js' );


// MAIN //

/**
* Evaluates the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a probability `k`.
*
* @param {Probability} k - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.9, 20.0, 0.2 );
* // returns 106
*
* @example
* var y = quantile( 0.9, 20.0, 0.8 );
* // returns 8
*
* @example
* var y = quantile( 0.5, 10.0, 0.4 );
* // returns 14
*
* @example
* var y = quantile( 0.0, 10.0, 0.9 );
* // returns 0
*
* @example
* var y = quantile( 1.1, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( -0.1, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 21.0, 15.5, 0.5 );
* // returns 12
*
* @example
* var y = quantile( 5.0, 7.4, 0.4 );
* // returns 10
*
* @example
* var y = quantile( 0.5, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 20.0, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 20.0, 1.5 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 20.0, NaN );
* // returns NaN
*/
function quantile( k, r, p ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var mu;
	var x2;
	var x;
	var q;

	if (
		isnan( r ) ||
		isnan( p ) ||
		isnan( k ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0 ||
		k < 0.0 ||
		k > 1.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		return 0.0;
	}
	if ( k === 1.0 ) {
		return PINF;
	}
	q = 1.0 - p;
	mu = ( r * q ) / p;
	sigma = sqrt( r * q ) / p;
	sigmaInv = 1.0 / sigma;

	// Cornish-Fisher expansion:
	if ( k < 0.5 ) {
		x = -erfcinv( 2.0 * k ) * SQRT2;
	} else {
		x = erfcinv( 2.0 * (1.0-k) ) * SQRT2;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
	guess = round( mu + (sigma * corr) );
	return cdf( guess, r, p ) >= k ?
		search.left( guess, k, r, p ) :
		search.right( guess, k, r, p );
}


// EXPORTS //

module.exports = quantile;

},{"./search.js":1004,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/negative-binomial/cdf":978,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/sqrt":1826}],1004:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dists/negative-binomial/cdf' );


// VARIABLES //

var methods;


// FUNCTIONS //

/**
* Performs a search to the left.
*
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} k - probability
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `k` quantile of the specified distribution
*/
function searchLeft( x, k, r, p ) {
	while ( true ) {
		if ( x === 0 || cdf( x - 1.0, r, p ) < k ) {
			return x;
		}
		x -= 1;
	}
}

/**
* Performs a search to the right.
*
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} k - probability
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `k` quantile of the specified distribution
*/
function searchRight( x, k, r, p ) {
	while ( true ) {
		x += 1;
		if ( cdf( x, r, p ) >= k ) {
			return x;
		}
	}
}


// MAIN //

methods = {
	'left': searchLeft,
	'right': searchRight
};


// EXPORTS //

module.exports = methods;

},{"@stdlib/math/base/dists/negative-binomial/cdf":978}],1005:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution skewness.
*
* @module @stdlib/math/base/dists/negative-binomial/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/negative-binomial/skewness' );
*
* var v = skewness( 100, 0.2 );
* // returns ~0.201
*
* v = skewness( 20, 0.5 );
* // returns ~0.474
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1006}],1006:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 100, 0.2 );
* // returns ~0.201
* @example
* var v = skewness( 20, 0.5 );
* // returns ~0.474
* @example
* var v = skewness( 10.3, 0.8 );
* // returns ~0.836
* @example
* var v = skewness( -2, 0.5 );
* // returns NaN
* @example
* var v = skewness( 20, 1.1 );
* // returns NaN
* @example
* var v = skewness( 20, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 0.5 );
* // returns NaN
*/
function skewness( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 2.0-p ) / sqrt( ( 1.0-p ) * r );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1007:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution standard deviation.
*
* @module @stdlib/math/base/dists/negative-binomial/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/negative-binomial/stdev' );
*
* var v = stdev( 100, 0.2 );
* // returns ~44.721
*
* v = stdev( 20, 0.5 );
* // returns ~6.325
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1008}],1008:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 100, 0.2 );
* // returns ~44.721
* @example
* var v = stdev( 20, 0.5 );
* // returns ~6.325
* @example
* var v = stdev( 10.3, 0.8 );
* // returns ~1.794
* @example
* var v = stdev( -2, 0.5 );
* // returns NaN
* @example
* var v = stdev( 20, 1.1 );
* // returns NaN
* @example
* var v = stdev( 20, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 0.5 );
* // returns NaN
*/
function stdev( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return sqrt( ( 1.0-p ) * r ) / p;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1009:[function(require,module,exports){
'use strict';

/**
* Negative binomial distribution variance.
*
* @module @stdlib/math/base/dists/negative-binomial/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/negative-binomial/variance' );
*
* var v = variance( 100, 0.2 );
* // returns 2000.0
*
* v = variance( 20, 0.5 );
* // returns 40.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1010}],1010:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 100, 0.2 );
* // returns 2000.0
* @example
* var v = variance( 20, 0.5 );
* // returns 40.0
* @example
* var v = variance( 10.3, 0.8 );
* // returns ~3.219
* @example
* var v = variance( -2, 0.5 );
* // returns NaN
* @example
* var v = variance( 20, 1.1 );
* // returns NaN
* @example
* var v = variance( 20, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 0.5 );
* // returns NaN
*/
function variance( r, p ) {
	if (
		isnan( r ) ||
		isnan( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( ( 1.0-p ) * r ) / ( p*p );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],1011:[function(require,module,exports){
'use strict';

// MODULES //

var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.977
*
* @example
* var y = cdf( -1.0, -1.0, 2.0 );
* // returns 0.5
*
* @example
* var y = cdf( -1.0, 4.0, 2.0 );
* // returns ~0.006
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, mu, sigma ) {
	var denom;
	var xc;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return (x < mu) ? 0.0 : 1.0;
	}
	denom = sigma * sqrt( 2.0 );
	xc = x - mu;
	return 0.5 * erfc( -xc/denom );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/sqrt":1826}],1012:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var erfc = require( '@stdlib/math/base/special/erfc' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 10.0, 2.0 );
* var y = cdf( 10.0 );
* // returns 0.5
*
* y = cdf( 12.0 );
* // returns ~0.841
*/
function factory( mu, sigma ) {
	var denom;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		return degenerate( mu );
	}
	denom = sigma * sqrt( 2.0 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var xc;
		if ( isnan( x ) ) {
			return NaN;
		}
		xc = x - mu;
		return 0.5 * erfc( -xc / denom );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/cdf":451,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1013:[function(require,module,exports){
'use strict';

/**
* Normal distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/normal/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/normal/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.977
*
* var myCDF = cdf.factory( 10.0, 2.0 );
* y = myCDF( 10.0 );
* // returns 0.5
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1011,"./factory.js":1012,"@stdlib/utils/define-read-only-property":1937}],1014:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/normal/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/normal/kurtosis' );
var mean = require( '@stdlib/math/base/dists/normal/mean' );
var median = require( '@stdlib/math/base/dists/normal/median' );
var mode = require( '@stdlib/math/base/dists/normal/mode' );
var skewness = require( '@stdlib/math/base/dists/normal/skewness' );
var stdev = require( '@stdlib/math/base/dists/normal/stdev' );
var variance = require( '@stdlib/math/base/dists/normal/variance' );
var cdf = require( '@stdlib/math/base/dists/normal/cdf' );
var logpdf = require( '@stdlib/math/base/dists/normal/logpdf' );
var mgf = require( '@stdlib/math/base/dists/normal/mgf' );
var pdf = require( '@stdlib/math/base/dists/normal/pdf' );
var quantile = require( '@stdlib/math/base/dists/normal/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function normalCDF( x ) {
	return cdf( x, this.mu, this.sigma );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function normalLogPDF( x ) {
	return logpdf( x, this.mu, this.sigma );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function normalMGF( t ) {
	return mgf( t, this.mu, this.sigma );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function normalPDF( x ) {
	return pdf( x, this.mu, this.sigma );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function normalQuantile( p ) {
	return quantile( p, this.mu, this.sigma );
}


// MAIN //

/**
* Normal distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {Normal} distribution instance
*
* @example
* var normal = new Normal( 1.0, 1.0 );
*
* var y = normal.cdf( 1.5 );
* // returns ~0.691
*
* var mu = normal.mean;
* // returns 1.0
*/
function Normal() {
	var sigma;
	var mu;
	if ( !(this instanceof Normal) ) {
		if ( arguments.length === 0 ) {
			return new Normal();
		}
		return new Normal( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		if ( !isNumber( mu ) || isnan( mu ) ) {
			throw new TypeError( 'invalid input argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		mu = 0.0;
		sigma = 1.0;
	}
	Object.defineProperty( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	Object.defineProperty( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
}

/**
* Normal distribution differential entropy.
*
* @name entropy
* @memberof Normal.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.entropy;
* // returns ~3.904
*/
Object.defineProperty( Normal.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.mu, this.sigma );
	}
});

/**
* Normal distribution excess kurtosis.
*
* @name kurtosis
* @memberof Normal.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.kurtosis;
* // returns 0.0
*/
Object.defineProperty( Normal.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.mu, this.sigma );
	}
});

/**
* Normal distribution expected value.
*
* @name mean
* @memberof Normal.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.mean;
* // returns 4.0
*/
Object.defineProperty( Normal.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.mu, this.sigma );
	}
});

/**
* Normal distribution median.
*
* @name median
* @memberof Normal.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.median;
* // returns 4.0
*/
Object.defineProperty( Normal.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.mu, this.sigma );
	}
});

/**
* Normal distribution mode.
*
* @name mode
* @memberof Normal.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.mode;
* // returns 4.0
*/
Object.defineProperty( Normal.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.mu, this.sigma );
	}
});

/**
* Normal distribution skewness.
*
* @name skewness
* @memberof Normal.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.skewness;
* // returns 0.0
*/
Object.defineProperty( Normal.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.mu, this.sigma );
	}
});

/**
* Normal distribution standard deviation.
*
* @name stdev
* @memberof Normal.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.stdev;
* // returns 12.0
*/
Object.defineProperty( Normal.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.mu, this.sigma );
	}
});

/**
* Normal distribution variance.
*
* @name variance
* @memberof Normal.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.variance;
* // returns 144.0
*/
Object.defineProperty( Normal.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.mu, this.sigma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Normal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.cdf( 0.5 );
* // returns ~0.354
*/
setReadOnly( Normal.prototype, 'cdf', normalCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Normal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.logpdf( 0.8 );
* // returns ~-2.354
*/
setReadOnly( Normal.prototype, 'logpdf', normalLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Normal.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.mgf( 0.01 );
* // returns ~1.021
*/
setReadOnly( Normal.prototype, 'mgf', normalMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Normal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.pdf( 0.8 );
* // returns ~0.095
*/
setReadOnly( Normal.prototype, 'pdf', normalPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Normal.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Normal.prototype, 'quantile', normalQuantile );


// EXPORTS //

module.exports = Normal;

},{"@stdlib/assert/is-nan":32,"@stdlib/assert/is-number":40,"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/normal/cdf":1013,"@stdlib/math/base/dists/normal/entropy":1017,"@stdlib/math/base/dists/normal/kurtosis":1018,"@stdlib/math/base/dists/normal/logpdf":1022,"@stdlib/math/base/dists/normal/mean":1024,"@stdlib/math/base/dists/normal/median":1026,"@stdlib/math/base/dists/normal/mgf":1029,"@stdlib/math/base/dists/normal/mode":1031,"@stdlib/math/base/dists/normal/pdf":1034,"@stdlib/math/base/dists/normal/quantile":1037,"@stdlib/math/base/dists/normal/skewness":1039,"@stdlib/math/base/dists/normal/stdev":1041,"@stdlib/math/base/dists/normal/variance":1043,"@stdlib/utils/define-read-only-property":1937}],1015:[function(require,module,exports){
'use strict';

/**
* Normal distribution constructor.
*
* @module @stdlib/math/base/dists/normal/ctor
*
* @example
* var Normal = require( '@stdlib/math/base/dists/normal/ctor' );
*
* var normal = new Normal( 1.0, 1.0 );
*
* var y = normal.cdf( 1.5 );
* // returns ~0.691
*
* var mu = normal.mean;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1014}],1016:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
var E = require( '@stdlib/constants/math/float64-e' );


// MAIN //

/**
* Returns the differential entropy for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
* @example
* var y = entropy( 5.0, 3.0 );
* // returns ~2.518
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function entropy( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.5 * ln( TWO_PI * E * sigma*sigma );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-two-pi":111,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1017:[function(require,module,exports){
'use strict';

/**
* Normal distribution differential entropy.
*
* @module @stdlib/math/base/dists/normal/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/normal/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* y = entropy( 4.0, 3.0 );
* // returns ~2.518
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1016}],1018:[function(require,module,exports){
'use strict';

/**
* Normal distribution kurtosis.
*
* @module @stdlib/math/base/dists/normal/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/normal/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 0.0
*
* y = kurtosis( 4.0, 3.0 );
* // returns 0.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1019}],1019:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = kurtosis( 5.0, 3.0 );
* // returns 0.0
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function kurtosis( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],1020:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace normal
*/
var normal = {};

/**
* @name cdf
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/cdf}
*/
setReadOnly( normal, 'cdf', require( '@stdlib/math/base/dists/normal/cdf' ) );

/**
* @name entropy
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/entropy}
*/
setReadOnly( normal, 'entropy', require( '@stdlib/math/base/dists/normal/entropy' ) );

/**
* @name kurtosis
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/kurtosis}
*/
setReadOnly( normal, 'kurtosis', require( '@stdlib/math/base/dists/normal/kurtosis' ) );

/**
* @name logpdf
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/logpdf}
*/
setReadOnly( normal, 'logpdf', require( '@stdlib/math/base/dists/normal/logpdf' ) );

/**
* @name mean
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/mean}
*/
setReadOnly( normal, 'mean', require( '@stdlib/math/base/dists/normal/mean' ) );

/**
* @name median
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/median}
*/
setReadOnly( normal, 'median', require( '@stdlib/math/base/dists/normal/median' ) );

/**
* @name mgf
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/mgf}
*/
setReadOnly( normal, 'mgf', require( '@stdlib/math/base/dists/normal/mgf' ) );

/**
* @name mode
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/mode}
*/
setReadOnly( normal, 'mode', require( '@stdlib/math/base/dists/normal/mode' ) );

/**
* @name Normal
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/ctor}
*/
setReadOnly( normal, 'Normal', require( '@stdlib/math/base/dists/normal/ctor' ) );

/**
* @name pdf
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/pdf}
*/
setReadOnly( normal, 'pdf', require( '@stdlib/math/base/dists/normal/pdf' ) );

/**
* @name quantile
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/quantile}
*/
setReadOnly( normal, 'quantile', require( '@stdlib/math/base/dists/normal/quantile' ) );

/**
* @name skewness
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/skewness}
*/
setReadOnly( normal, 'skewness', require( '@stdlib/math/base/dists/normal/skewness' ) );

/**
* @name stdev
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/stdev}
*/
setReadOnly( normal, 'stdev', require( '@stdlib/math/base/dists/normal/stdev' ) );

/**
* @name variance
* @memberof normal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/normal/variance}
*/
setReadOnly( normal, 'variance', require( '@stdlib/math/base/dists/normal/variance' ) );


// EXPORTS //

module.exports = normal;

},{"@stdlib/math/base/dists/normal/cdf":1013,"@stdlib/math/base/dists/normal/ctor":1015,"@stdlib/math/base/dists/normal/entropy":1017,"@stdlib/math/base/dists/normal/kurtosis":1018,"@stdlib/math/base/dists/normal/logpdf":1022,"@stdlib/math/base/dists/normal/mean":1024,"@stdlib/math/base/dists/normal/median":1026,"@stdlib/math/base/dists/normal/mgf":1029,"@stdlib/math/base/dists/normal/mode":1031,"@stdlib/math/base/dists/normal/pdf":1034,"@stdlib/math/base/dists/normal/quantile":1037,"@stdlib/math/base/dists/normal/skewness":1039,"@stdlib/math/base/dists/normal/stdev":1041,"@stdlib/math/base/dists/normal/variance":1043,"@stdlib/utils/define-read-only-property":1937}],1021:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logpdf' ).factory;
var LN_TWO_PI = require( '@stdlib/constants/math/float64-ln-two-pi' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-1.612
*
* y = logpdf( 5.0 );
* // returns ~-4.737
*/
function factory( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		return degenerate( mu );
	}
	s2 = pow( sigma, 2.0 );
	A = (-0.5) * ( ( 2.0*ln( sigma ) ) + LN_TWO_PI );
	B = -1.0 / ( 2.0*s2 );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -3.14 );
	* // returns <number>
	*/
	function logpdf( x ) {
		return A + ( B * pow( x-mu, 2.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-two-pi":82,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logpdf":457,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1022:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability density function (PDF) for a normal distribution.
*
* @module @stdlib/math/base/dists/normal/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/normal/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.919
*
* var myLogPDF = logpdf.factory( 10.0, 2.0 );
* y = myLogPDF( 10.0 );
* // returns ~-1.612
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1021,"./logpdf.js":1023,"@stdlib/utils/define-read-only-property":1937}],1023:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var LN_TWO_PI = require( '@stdlib/constants/math/float64-ln-two-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.919
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns ~-4.737
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 8.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function logpdf( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x === mu ? PINF : NINF;
	}
	s2 = pow( sigma, 2.0 );
	A = (-0.5) * ( ( 2.0*ln( sigma ) ) + LN_TWO_PI );
	B = -1.0 / ( 2.0*s2 );
	return A + ( B * pow( x-mu, 2.0 ) );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ln-two-pi":82,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],1024:[function(require,module,exports){
'use strict';

/**
* Normal distribution expected value.
*
* @module @stdlib/math/base/dists/normal/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/normal/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1025}],1025:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function mean( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],1026:[function(require,module,exports){
'use strict';

/**
* Normal distribution median.
*
* @module @stdlib/math/base/dists/normal/median
*
* @example
* var median = require( '@stdlib/math/base/dists/normal/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1027}],1027:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
* @example
* var y = median( 0.0, NaN );
* // returns NaN
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function median( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128}],1028:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0, 2.0 );
*
* var y = mgf( 1.0 );
* // returns ~403.429
*
* y = mgf( 0.5 );
* // returns ~12.182
*/
function factory( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a normal distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( isnan( t ) ) {
			return NaN;
		}
		return exp( (mu * t) + (0.5 * pow( sigma * t, 2.0 )) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1029:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a normal distribution.
*
* @module @stdlib/math/base/dists/normal/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/normal/mgf' );
*
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~7.389
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.1353
*
* var mymgf = mgf.factory( 4.0, 2.0 );
*
* y = mymgf( 1.0 );
* // returns ~403.429
*
* y = mymgf( 0.5 );
* // returns ~12.182
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1028,"./mgf.js":1030,"@stdlib/utils/define-read-only-property":1937}],1030:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~7.389
*
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.1353
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.0, 0.0 );
* // returns NaN
*/
function mgf( t, mu, sigma ) {
	if (
		isnan( t ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return exp( (mu * t) + (0.5 * pow( sigma * t, 2.0 )) );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],1031:[function(require,module,exports){
'use strict';

/**
* Normal distribution mode.
*
* @module @stdlib/math/base/dists/normal/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/normal/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1032}],1032:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function mode( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],1033:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 10.0 );
* // returns ~0.199
*
* y = pdf( 5.0 );
* // returns ~0.009
*/
function factory( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		return degenerate( mu );
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / sqrt( s2*TWO_PI );
	B = -1.0 / ( 2.0*s2 );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated probability density function
	*
	* @example
	* var y = pdf( -3.14 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return A * exp( B * pow(x-mu, 2.0) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-two-pi":111,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/pdf":466,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1034:[function(require,module,exports){
'use strict';

/**
* Normal distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/normal/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/normal/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.054
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns ~0.199
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1033,"./pdf.js":1035,"@stdlib/utils/define-read-only-property":1937}],1035:[function(require,module,exports){
'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.054
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns ~0.009
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function pdf( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		isnan( x ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x === mu ? PINF : 0.0;
	}
	s2 = pow( sigma, 2.0 );
	A = 1.0 / sqrt( s2*TWO_PI );
	B = -1.0 / ( 2.0*s2 );
	return A * exp( B * pow(x-mu, 2.0) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-two-pi":111,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1036:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/quantile' ).factory;
var erfinv = require( '@stdlib/math/base/special/erfinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns a function for evaluating the quantile function of a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~11.683
*/
function factory( mu, sigma ) {
	var A;
	var B;
	if ( isnan( mu ) || isnan( sigma ) || sigma < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		degenerate( mu );
	}
	A = mu;
	B = sigma * sqrt( 2.0 );
	return quantile;

	/**
	* Evaluates the quantile function for a normal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return A + ( B * erfinv( (2.0*p) - 1.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/quantile":472,"@stdlib/math/base/special/erfinv":1448,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1037:[function(require,module,exports){
'use strict';

/**
* Normal distribution quantile function.
*
* @module @stdlib/math/base/dists/normal/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/normal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1036,"./quantile.js":1038,"@stdlib/utils/define-read-only-property":1937}],1038:[function(require,module,exports){
'use strict';

// MODULES //

var erfinv = require( '@stdlib/math/base/special/erfinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a normal distribution with mean `mu` and standard deviation `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function quantile( p, mu, sigma ) {
	var A;
	var B;

	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		isnan( p ) ||
		sigma < 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return mu;
	}
	A = mu;
	B = sigma * sqrt( 2.0 );
	return A + (B * erfinv( (2.0*p) - 1.0 ));
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erfinv":1448,"@stdlib/math/base/special/sqrt":1826}],1039:[function(require,module,exports){
'use strict';

/**
* Normal distribution skewness.
*
* @module @stdlib/math/base/dists/normal/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/normal/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 3.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1040}],1040:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var y = skewness( 5.0, 3.0 );
* // returns 0.0
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function skewness( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128}],1041:[function(require,module,exports){
'use strict';

/**
* Normal distribution standard deviation.
*
* @module @stdlib/math/base/dists/normal/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/normal/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns 1.0
*
* y = stdev( 4.0, 3.0 );
* // returns 3.0
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1042}],1042:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the standard deviation for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns 1.0
* @example
* var y = stdev( 5.0, 3.0 );
* // returns 3.0
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function stdev( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return sigma;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128}],1043:[function(require,module,exports){
'use strict';

/**
* Normal distribution variance.
*
* @module @stdlib/math/base/dists/normal/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/normal/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns 1.0
*
* y = variance( 4.0, 3.0 );
* // returns 9.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1044}],1044:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns 1.0
* @example
* var y = variance( 5.0, 3.0 );
* // returns 9.0
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function variance( mu, sigma ) {
	if (
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return sigma*sigma;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],1045:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns 0.5
*
* @example
* var y = cdf( 5.0, 2.0, 4.0 );
* // returns ~0.36
*
* @example
* var y = cdf( 4.0, 2.0, 2.0 );
* // returns 0.75
*
* @example
* var y = cdf( 1.9, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function cdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < beta ) {
		return 0.0;
	}
	return 1.0 - pow( beta / x, alpha );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1046:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
*var cdf = factory( 10.0, 2.0 );
* var y = cdf( 3.0 );
* // returns ~0.983
*
* y = cdf( 2.5 );
* // returns ~0.893
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Pareto distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < beta ) {
			return 0.0;
		}
		return 1.0 - pow( beta / x, alpha );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1047:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/pareto-type1/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/pareto-type1/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 5.0, 2.0, 4.0 );
* // returns ~0.36
*
* y = cdf( 4.0, 2.0, 2.0 );
* // returns 0.75
*
* y = cdf( 1.9, 2.0, 2.0 );
* // returns 0.0
*
* y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 10.0, 2.0 );
* y = mycdf( 3.0 );
* // returns ~0.983
*
* y = mycdf( 2.5 );
* // returns ~0.893
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1045,"./factory.js":1046,"@stdlib/utils/define-read-only-property":1937}],1048:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/pareto-type1/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/pareto-type1/kurtosis' );
var mean = require( '@stdlib/math/base/dists/pareto-type1/mean' );
var median = require( '@stdlib/math/base/dists/pareto-type1/median' );
var mode = require( '@stdlib/math/base/dists/pareto-type1/mode' );
var skewness = require( '@stdlib/math/base/dists/pareto-type1/skewness' );
var variance = require( '@stdlib/math/base/dists/pareto-type1/variance' );
var cdf = require( '@stdlib/math/base/dists/pareto-type1/cdf' );
var logcdf = require( '@stdlib/math/base/dists/pareto-type1/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/pareto-type1/logpdf' );
var pdf = require( '@stdlib/math/base/dists/pareto-type1/pdf' );
var quantile = require( '@stdlib/math/base/dists/pareto-type1/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function paretoCDF( x ) {
	return cdf( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated logCDF
*/
function paretoLogCDF( x ) {
	return logcdf( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function paretoLogPDF( x ) {
	return logpdf( x, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function paretoPDF( x ) {
	return pdf( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function paretoQuantile( p ) {
	return quantile( p, this.alpha, this.beta );
}


// MAIN //

/**
* Pareto (Type I) distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Pareto1} distribution instance
*
* @example
* var pareto1 = new Pareto1( 1.0, 1.0 );
*
* var y = pareto1.cdf( 0.8 );
* // returns 0.0
*
* var mu = pareto1.mean;
* // returns Infinity
*/
function Pareto1() {
	var alpha;
	var beta;
	if ( !(this instanceof Pareto1) ) {
		if ( arguments.length === 0 ) {
			return new Pareto1();
		}
		return new Pareto1( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid input argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid input argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	Object.defineProperty( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	Object.defineProperty( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Pareto (Type I) distribution differential entropy.
*
* @name entropy
* @memberof Pareto1.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.entropy;
* // returns ~2.349
*/
Object.defineProperty( Pareto1.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution excess kurtosis.
*
* @name kurtosis
* @memberof Pareto1.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.kurtosis;
* // returns NaN
*/
Object.defineProperty( Pareto1.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution expected value.
*
* @name mean
* @memberof Pareto1.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.mean;
* // returns 16.0
*/
Object.defineProperty( Pareto1.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution median.
*
* @name median
* @memberof Pareto1.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.median;
* // returns ~14.27
*/
Object.defineProperty( Pareto1.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution mode.
*
* @name mode
* @memberof Pareto1.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.mode;
* // returns 12.0
*/
Object.defineProperty( Pareto1.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution skewness.
*
* @name skewness
* @memberof Pareto1.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.skewness;
* // returns ~7.071
*/
Object.defineProperty( Pareto1.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.alpha, this.beta );
	}
});

/**
* Pareto (Type I) distribution variance.
*
* @name variance
* @memberof Pareto1.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.variance;
* // returns 32.0
*/
Object.defineProperty( Pareto1.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.alpha, this.beta );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Pareto1.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.cdf( 4.0 );
* // returns 0.0
*/
setReadOnly( Pareto1.prototype, 'cdf', paretoCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Pareto1.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.logcdf( 4.0 );
* // returns -Infinity
*/
setReadOnly( Pareto1.prototype, 'logcdf', paretoLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Pareto1.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.logpdf( 5.0 );
* // returns ~-1.363
*/
setReadOnly( Pareto1.prototype, 'logpdf', paretoLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Pareto1.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.pdf( 5.0 );
* // returns ~0.256
*/
setReadOnly( Pareto1.prototype, 'pdf', paretoPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Pareto1.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.quantile( 0.5 );
* // returns ~5.657
*/
setReadOnly( Pareto1.prototype, 'quantile', paretoQuantile );


// EXPORTS //

module.exports = Pareto1;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/pareto-type1/cdf":1047,"@stdlib/math/base/dists/pareto-type1/entropy":1051,"@stdlib/math/base/dists/pareto-type1/kurtosis":1052,"@stdlib/math/base/dists/pareto-type1/logcdf":1056,"@stdlib/math/base/dists/pareto-type1/logpdf":1059,"@stdlib/math/base/dists/pareto-type1/mean":1061,"@stdlib/math/base/dists/pareto-type1/median":1063,"@stdlib/math/base/dists/pareto-type1/mode":1065,"@stdlib/math/base/dists/pareto-type1/pdf":1068,"@stdlib/math/base/dists/pareto-type1/quantile":1071,"@stdlib/math/base/dists/pareto-type1/skewness":1073,"@stdlib/math/base/dists/pareto-type1/variance":1075,"@stdlib/utils/define-read-only-property":1937}],1049:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution constructor.
*
* @module @stdlib/math/base/dists/pareto-type1/ctor
*
* @example
* var Pareto1 = require( '@stdlib/math/base/dists/pareto-type1/ctor' );
*
* var pareto1 = new Pareto1( 1.0, 1.0 );
*
* var y = pareto1.cdf( 10.0 );
* // returns 0.9
*
* var mu = pareto1.mean;
* // returns Infinity
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1048}],1050:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} differential entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 2.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.349
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.261
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ln( ( beta/alpha ) * exp( 1.0 + ( 1.0/alpha ) ) );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679}],1051:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution differential entropy.
*
* @module @stdlib/math/base/dists/pareto-type1/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/pareto-type1/entropy' );
*
* var v = entropy( 0.8, 1.0 );
* // returns ~2.473
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.349
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.261
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1050}],1052:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/pareto-type1/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/pareto-type1/kurtosis' );
*
* var v = kurtosis( 5.0, 1.0 );
* // returns ~70.8
*
* v = kurtosis( 4.2, 12.0 );
* // returns ~384.095
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~19.725
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1053}],1053:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the excess kurtosis of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 5.0, 1.0 );
* // returns ~70.8
* @example
* var v = kurtosis( 7.0, 12.0 );
* // returns ~24.857
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~19.725
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( alpha, beta ) {
	var out;
	if (
		isnan( alpha ) ||
		alpha <= 4.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	out = 6.0 * ( pow( alpha, 3.0 ) + pow( alpha, 2.0 ) - ( 6.0*alpha ) - 2.0 );
	out /= alpha * ( alpha-3.0 ) * ( alpha-4.0 );
	return out;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1054:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace pareto1
*/
var pareto = {};

/**
* @name cdf
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/cdf}
*/
setReadOnly( pareto, 'cdf', require( '@stdlib/math/base/dists/pareto-type1/cdf' ) );

/**
* @name entropy
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/entropy}
*/
setReadOnly( pareto, 'entropy', require( '@stdlib/math/base/dists/pareto-type1/entropy' ) );

/**
* @name kurtosis
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/kurtosis}
*/
setReadOnly( pareto, 'kurtosis', require( '@stdlib/math/base/dists/pareto-type1/kurtosis' ) );

/**
* @name logcdf
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/logcdf}
*/
setReadOnly( pareto, 'logcdf', require( '@stdlib/math/base/dists/pareto-type1/logcdf' ) );

/**
* @name logpdf
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/logpdf}
*/
setReadOnly( pareto, 'logpdf', require( '@stdlib/math/base/dists/pareto-type1/logpdf' ) );

/**
* @name mean
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/mean}
*/
setReadOnly( pareto, 'mean', require( '@stdlib/math/base/dists/pareto-type1/mean' ) );

/**
* @name median
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/median}
*/
setReadOnly( pareto, 'median', require( '@stdlib/math/base/dists/pareto-type1/median' ) );

/**
* @name mode
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/mode}
*/
setReadOnly( pareto, 'mode', require( '@stdlib/math/base/dists/pareto-type1/mode' ) );

/**
* @name Pareto1
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/ctor}
*/
setReadOnly( pareto, 'Pareto1', require( '@stdlib/math/base/dists/pareto-type1/ctor' ) );

/**
* @name pdf
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/pdf}
*/
setReadOnly( pareto, 'pdf', require( '@stdlib/math/base/dists/pareto-type1/pdf' ) );

/**
* @name quantile
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/quantile}
*/
setReadOnly( pareto, 'quantile', require( '@stdlib/math/base/dists/pareto-type1/quantile' ) );

/**
* @name skewness
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/skewness}
*/
setReadOnly( pareto, 'skewness', require( '@stdlib/math/base/dists/pareto-type1/skewness' ) );

/**
* @name variance
* @memberof pareto1
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/pareto-type1/variance}
*/
setReadOnly( pareto, 'variance', require( '@stdlib/math/base/dists/pareto-type1/variance' ) );


// EXPORTS //

module.exports = pareto;

},{"@stdlib/math/base/dists/pareto-type1/cdf":1047,"@stdlib/math/base/dists/pareto-type1/ctor":1049,"@stdlib/math/base/dists/pareto-type1/entropy":1051,"@stdlib/math/base/dists/pareto-type1/kurtosis":1052,"@stdlib/math/base/dists/pareto-type1/logcdf":1056,"@stdlib/math/base/dists/pareto-type1/logpdf":1059,"@stdlib/math/base/dists/pareto-type1/mean":1061,"@stdlib/math/base/dists/pareto-type1/median":1063,"@stdlib/math/base/dists/pareto-type1/mode":1065,"@stdlib/math/base/dists/pareto-type1/pdf":1068,"@stdlib/math/base/dists/pareto-type1/quantile":1071,"@stdlib/math/base/dists/pareto-type1/skewness":1073,"@stdlib/math/base/dists/pareto-type1/variance":1075,"@stdlib/utils/define-read-only-property":1937}],1055:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logCDF
*
* @example
*var logcdf = factory( 10.0, 2.0 );
* var y = logcdf( 3.0 );
* // returns ~-0.017
*
* y = logcdf( 2.5 );
* // returns ~-0.113
*/
function factory( alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Pareto distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < beta ) {
			return NINF;
		}
		return log1p( -pow( beta / x, alpha ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1056:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the cumulative distribution function (CDF) for a Pareto (Type I) distribution.
*
* @module @stdlib/math/base/dists/pareto-type1/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/pareto-type1/logcdf' );
*
* var y = logcdf( 2.0, 1.0, 1.0 );
* // returns ~-0.693
*
* y = logcdf( 5.0, 2.0, 4.0 );
* // returns ~-1.022
*
* y = logcdf( 4.0, 2.0, 2.0 );
* // returns ~-0.288
*
* y = logcdf( 1.9, 2.0, 2.0 );
* // returns -Infinity
*
* y = logcdf( +Infinity, 4.0, 2.0 );
* // returns 0.0
*
* var mylogcdf = logcdf.factory( 10.0, 2.0 );
* y = mylogcdf( 3.0 );
* // returns ~-0.017
*
* y = mylogcdf( 2.5 );
* // returns ~-0.113
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":1055,"./logcdf.js":1057,"@stdlib/utils/define-read-only-property":1937}],1057:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 1.0, 1.0 );
* // returns ~-0.693
*
* @example
* var y = logcdf( 5.0, 2.0, 4.0 );
* // returns ~-1.022
*
* @example
* var y = logcdf( 4.0, 2.0, 2.0 );
* // returns ~-0.288
*
* @example
* var y = logcdf( 1.9, 2.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( +Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = logcdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function logcdf( x, alpha, beta ) {
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < beta ) {
		return NINF;
	}
	return log1p( -pow( beta / x, alpha ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743}],1058:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logPDF
*
* @example
* var mylogpdf = factory( 0.5, 0.5 );
*
* var y = mylogpdf( 0.8 );
* // returns ~-0.705
*
* y = mypdf( 2.0 );
* // returns ~-2.079
*/
function factory( alpha, beta ) {
	var num;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	num = ln( alpha ) + ( alpha * ln( beta ) );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Pareto distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 4.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x >= beta ) {
			return num - ( ( alpha + 1.0 ) * ln( x ) );
		}
		return NINF;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],1059:[function(require,module,exports){
'use strict';

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution.
*
* @module @stdlib/math/base/dists/pareto-type1/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/pareto-type1/logpdf' );
*
* var y = logpdf( 4.0, 1.0, 1.0 );
* // returns ~-2.773
*
* y = logpdf( 20.0, 1.0, 10.0 );
* // returns ~-3.689
*
* y = logpdf( 7.0, 2.0, 6.0 );
* // returns ~-1.561
*
* var mylogpdf = logpdf.factory( 0.5, 0.5 );
*
* y = mylogpdf( 0.8 );
* // returns ~-0.705
*
* y = mylogpdf( 2.0 );
* // returns ~-2.079
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1058,"./logpdf.js":1060,"@stdlib/utils/define-read-only-property":1937}],1060:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 4.0, 1.0, 1.0 );
* // returns ~-2.773
*
* @example
* var y = logpdf( 20.0, 1.0, 10.0 );
* // returns ~-3.689
*
* @example
* var y = logpdf( 7.0, 2.0, 6.0 );
* // returns ~-1.561
*
* @example
* var y = logpdf( 7.0, 6.0, 3.0 );
* // returns ~-5.238
*
* @example
* var y = logpdf( 1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 1.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function logpdf( x, alpha, beta ) {
	var denom;
	var num;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x >= beta ) {
		num = ln( alpha ) + ( alpha * ln( beta ) );
		denom = ( alpha + 1.0 ) * ln( x );
		return num - denom;
	}
	return NINF;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1061:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution expected value.
*
* @module @stdlib/math/base/dists/pareto-type1/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/pareto-type1/mean' );
*
* var v = mean( 0.8, 1.0 );
* // returns Infinity
*
* v = mean( 4.0, 12.0 );
* // returns 16.0
*
* v = mean( 8.0, 2.0 );
* // returns ~2.286
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1062}],1062:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the expected value of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns Infinity
* @example
* var v = mean( 4.0, 12.0 );
* // returns 16.0
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~2.286
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( alpha <= 1.0 ) {
		return PINF;
	}
	return ( alpha*beta ) / ( alpha-1.0 );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/constants/math/float64-pinf":102}],1063:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution median.
*
* @module @stdlib/math/base/dists/pareto-type1/median
*
* @example
* var median = require( '@stdlib/math/base/dists/pareto-type1/median' );
*
* var v = median( 0.8, 1.0 );
* // returns ~2.378
*
* v = median( 4.0, 12.0 );
* // returns ~14.27
*
* v = median( 8.0, 2.0 );
* // returns ~2.181
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1064}],1064:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the median of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns 2.0
* @example
* var v = median( 4.0, 12.0 );
* // returns ~14.27
* @example
* var v = median( 8.0, 2.0 );
* // returns ~2.181
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta * pow( 2.0, 1.0/alpha );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/special/pow":1743}],1065:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution mode.
*
* @module @stdlib/math/base/dists/pareto-type1/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/pareto-type1/mode' );
*
* var v = mode( 0.8, 1.0 );
* // returns 1.0
*
* v = mode( 4.0, 12.0 );
* // returns 12.0
*
* v = mode( 8.0, 2.0 );
* // returns 2.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1066}],1066:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns 12.0
* @example
* var v = mode( 8.0, 2.0 );
* // returns 2.0
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return beta;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],1067:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Pareto distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*
* @example
* var mypdf = factory( 0.5, 0.5 );
*
* var y = mypdf( 0.8 );
* // returns ~0.494
*
* y = mypdf( 2.0 );
* // returns ~0.125
*/
function factory( alpha, beta ) {
	var num;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	num = alpha * pow( beta, alpha );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Pareto distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 4.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		var denom;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x >= beta ) {
			denom = pow( x, alpha + 1.0 );
			return num / denom;
		}
		return 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1068:[function(require,module,exports){
'use strict';

/**
* Evaluates the probability density function (PDF) for a Pareto (Type I) distribution.
*
* @module @stdlib/math/base/dists/pareto-type1/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/pareto-type1/pdf' );
*
* var y = pdf( 4.0, 1.0, 1.0 );
* // returns ~0.044
*
* y = pdf( 20.0, 1.0, 10.0 );
* // returns 0.025
*
* y = pdf( 7.0, 2.0, 6.0 );
* // returns ~0.21
*
* var mypdf = pdf.factory( 0.5, 0.5 );
*
* y = mypdf( 0.8 );
* // returns ~0.494
*
* y = mypdf( 2.0 );
* // returns ~0.125
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1067,"./pdf.js":1069,"@stdlib/utils/define-read-only-property":1937}],1069:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 4.0, 1.0, 1.0 );
* // returns ~0.044
*
* @example
* var y = pdf( 20.0, 1.0, 10.0 );
* // returns 0.025
*
* @example
* var y = pdf( 7.0, 2.0, 6.0 );
* // returns ~0.21
*
* @example
* var y = pdf( 7.0, 6.0, 3.0 );
* // returns ~0.005
*
* @example
* var y = pdf( 1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function pdf( x, alpha, beta ) {
	var denom;
	var num;
	if (
		isnan( x ) ||
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x >= beta ) {
		num = alpha * pow( beta, alpha );
		denom = pow( x, alpha + 1.0 );
		return num / denom;
	}
	return 0.0;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1070:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.66
*
* y = quantile( 0.8 );
* // returns ~0.952
*/
function factory( alpha, beta ) {
	var alphaInv;
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return constantFunction( NaN );
	}
	alphaInv = 1.0 / alpha;
	return quantile;

	/**
	* Evaluates the quantile function for a Pareto (Type I) distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return beta / pow( 1.0 - p, alphaInv );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1071:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution quantile function.
*
* @module @stdlib/math/base/dists/pareto-type1/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/pareto-type1/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.236
*
* y = quantile( 0.8, 1.0, 10.0 );
* // returns ~50.0
*
* y = quantile( 0.1, 1.0, 10.0 );
* // returns ~10.541
*
* var myquantile = quantile.factory( 2.5, 0.5 );
* y = myquantile( 0.5 );
* // returns ~0.66
*
* y = myquantile( 0.8 );
* // returns ~0.952
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1070,"./quantile.js":1072,"@stdlib/utils/define-read-only-property":1937}],1072:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the quantile function for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.236
*
* @example
* var y = quantile( 0.8, 1.0, 10.0 );
* // returns ~50.0
*
* @example
* var y = quantile( 0.1, 1.0, 10.0 );
* // returns ~10.541
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, alpha, beta ) {
	if (
		isnan( alpha ) ||
		isnan( beta ) ||
		isnan( p ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return beta / pow( 1.0 - p, 1.0/alpha );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1073:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution skewness.
*
* @module @stdlib/math/base/dists/pareto-type1/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/pareto-type1/skewness' );
*
* var v = skewness( 3.5, 1.0 );
* // returns ~11.784
*
* v = skewness( 4.0, 12.0 );
* // returns ~7.071
*
* v = skewness( 8.0, 2.0 );
* // returns ~3.118
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1074}],1074:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 3.5, 1.0 );
* // returns ~11.784
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~7.071
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~3.118
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 3.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 2.0 * ( 1.0+alpha ) / ( alpha-3.0 ) * sqrt( ( alpha-2.0 ) / alpha );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1075:[function(require,module,exports){
'use strict';

/**
* Pareto (Type I) distribution variance.
*
* @module @stdlib/math/base/dists/pareto-type1/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/pareto-type1/variance' );
*
* var v = variance( 4.0, 12.0 );
* // returns 32.0
*
* v = variance( 8.0, 2.0 );
* // returns ~0.109
*
* v = variance( 0.8, 1.0 );
* // returns Infinity
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1076}],1076:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the variance of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns 32.0
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.109
* @example
* var v = variance( 1.0, 1.0 );
* // returns Infinity
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( alpha < 2.0 ) {
		return PINF;
	}
	return ( beta*beta * alpha ) / ( pow( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1077:[function(require,module,exports){
'use strict';

// MODULES //

var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.5 );
* // returns ~0.986
*
* @example
* var y = cdf( 2.0, 10.0 );
* // returns ~0.003
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative mean parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, lambda ) {
	if ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( lambda === 0.0 ) {
		return 1.0;
	}
	if ( x === PINF ) {
		return 1.0;
	}
	return gammainc( lambda, floor( x ) + 1.0, true, true );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/gammainc":1541}],1078:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/cdf' ).factory;
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 5.0 );
* var y = cdf( 3.0 );
* // returns ~0.265
*
* y = cdf( 8.0 );
* // returns ~0.932
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Poisson distribution.
	*
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF ) {
			return 1.0;
		}
		return gammainc( lambda, floor( x ) + 1.0, true, true );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/cdf":451,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/gammainc":1541,"@stdlib/utils/constant-function":1933}],1079:[function(require,module,exports){
'use strict';

/**
* Poisson distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/poisson/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/poisson/cdf' );
*
* var y = cdf( 2.0, 0.5 );
* // returns ~0.986
*
* y = cdf( 2.0, 10.0 );
* // returns ~0.003
*
* y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 5.0 );
* y = mycdf( 3.0 );
* // returns ~0.265
*
* y = mycdf( 8.0 );
* // returns ~0.932
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1077,"./factory.js":1078,"@stdlib/utils/define-read-only-property":1937}],1080:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/poisson/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/poisson/kurtosis' );
var mean = require( '@stdlib/math/base/dists/poisson/mean' );
var median = require( '@stdlib/math/base/dists/poisson/median' );
var mode = require( '@stdlib/math/base/dists/poisson/mode' );
var skewness = require( '@stdlib/math/base/dists/poisson/skewness' );
var stdev = require( '@stdlib/math/base/dists/poisson/stdev' );
var variance = require( '@stdlib/math/base/dists/poisson/variance' );
var cdf = require( '@stdlib/math/base/dists/poisson/cdf' );
var logpmf = require( '@stdlib/math/base/dists/poisson/logpmf' );
var mgf = require( '@stdlib/math/base/dists/poisson/mgf' );
var pmf = require( '@stdlib/math/base/dists/poisson/pmf' );
var quantile = require( '@stdlib/math/base/dists/poisson/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function poissonCDF( x ) {
	return cdf( x, this.lambda );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function poissonLogPMF( x ) {
	return logpmf( x, this.lambda );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function poissonMGF( t ) {
	return mgf( t, this.lambda );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function poissonPMF( x ) {
	return pmf( x, this.lambda );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function poissonQuantile( p ) {
	return quantile( p, this.lambda );
}


// MAIN //

/**
* Poisson distribution constructor.
*
* @constructor
* @param {PositiveNumber} [lambda=1.0] - mean parameter
* @throws {TypeError} `lambda` must be a positive number
* @returns {Poisson} distribution instance
*
* @example
* var poisson = new Poisson( 1.0 );
*
* var y = poisson.cdf( 0.8 );
* // returns ~0.551
*
* var mode = poisson.mode;
* // returns 0.0
*/
function Poisson() {
	var lambda;
	if ( !(this instanceof Poisson) ) {
		if ( arguments.length === 0 ) {
			return new Poisson();
		}
		return new Poisson( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		lambda = arguments[ 0 ];
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Mean parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		lambda = 1.0;
	}
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
}

/**
* Poisson distribution differential entropy.
*
* @name entropy
* @memberof Poisson.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.entropy;
* // returns ~2.087
*/
Object.defineProperty( Poisson.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.lambda );
	}
});

/**
* Poisson distribution excess kurtosis.
*
* @name kurtosis
* @memberof Poisson.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.kurtosis;
* // returns 0.25
*/
Object.defineProperty( Poisson.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.lambda );
	}
});

/**
* Poisson distribution expected value.
*
* @name mean
* @memberof Poisson.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.mean;
* // returns 4.0
*/
Object.defineProperty( Poisson.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.lambda );
	}
});

/**
* Poisson distribution median.
*
* @name median
* @memberof Poisson.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.median;
* // returns 4.0
*/
Object.defineProperty( Poisson.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.lambda );
	}
});

/**
* Poisson distribution mode.
*
* @name mode
* @memberof Poisson.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.mode;
* // returns 4.0
*/
Object.defineProperty( Poisson.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.lambda );
	}
});

/**
* Poisson distribution skewness.
*
* @name skewness
* @memberof Poisson.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.skewness;
* // returns 0.5
*/
Object.defineProperty( Poisson.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.lambda );
	}
});

/**
* Poisson distribution standard deviation.
*
* @name stdev
* @memberof Poisson.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.stdev;
* // returns 2.0
*/
Object.defineProperty( Poisson.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.lambda );
	}
});

/**
* Poisson distribution variance.
*
* @name variance
* @memberof Poisson.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.variance;
* // returns 4.0
*/
Object.defineProperty( Poisson.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Poisson.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.cdf( 1.5 );
* // returns ~0.406
*/
setReadOnly( Poisson.prototype, 'cdf', poissonCDF );

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @name logpmf
* @memberof Poisson.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.logpmf( 2.0 );
* // returns ~-1.306
*
* v = poisson.logpmf( 0.8 );
* // returns -Infinity
*/
setReadOnly( Poisson.prototype, 'logpmf', poissonLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Poisson.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.mgf( 0.5 );
* // returns ~3.66
*/
setReadOnly( Poisson.prototype, 'mgf', poissonMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof Poisson.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.pmf( 2.0 );
* // returns ~0.271
*
* v = poisson.pmf( 0.8 );
* // returns 0.0
*/
setReadOnly( Poisson.prototype, 'pmf', poissonPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Poisson.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.quantile( 0.5 );
* // returns 2.0
*/
setReadOnly( Poisson.prototype, 'quantile', poissonQuantile );


// EXPORTS //

module.exports = Poisson;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/poisson/cdf":1079,"@stdlib/math/base/dists/poisson/entropy":1083,"@stdlib/math/base/dists/poisson/kurtosis":1084,"@stdlib/math/base/dists/poisson/logpmf":1088,"@stdlib/math/base/dists/poisson/mean":1090,"@stdlib/math/base/dists/poisson/median":1092,"@stdlib/math/base/dists/poisson/mgf":1095,"@stdlib/math/base/dists/poisson/mode":1097,"@stdlib/math/base/dists/poisson/pmf":1100,"@stdlib/math/base/dists/poisson/quantile":1103,"@stdlib/math/base/dists/poisson/skewness":1106,"@stdlib/math/base/dists/poisson/stdev":1108,"@stdlib/math/base/dists/poisson/variance":1110,"@stdlib/utils/define-read-only-property":1937}],1081:[function(require,module,exports){
'use strict';

/**
* Poisson distribution constructor.
*
* @module @stdlib/math/base/dists/poisson/ctor
*
* @example
* var Poisson = require( '@stdlib/math/base/dists/poisson/ctor' );
*
* var poisson = new Poisson( 1.0 );
*
* var y = poisson.cdf( 1.5 );
* // returns ~0.736
*
* var mode = poisson.mode;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1080}],1082:[function(require,module,exports){
'use strict';

// MODULES //

var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var factorial = require( '@stdlib/math/base/special/factorial' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );


// FUNCTIONS //

/**
* Returns a function to retrieve elements of the series \\( \sum_{k=0}^{\infty} \frac{ \lambda^k \log(k!) }{ k! } \\).
*
* @private
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} function to retrieve series elements
*/
function seriesClosure( lambda ) { // eslint-disable-line 
	var lk;
	var k;
	k = 1;
	lk = lambda;
	return function seriesElement() { // eslint-disable-line 
		k += 1;
		lk *= lambda;
		return lk * factorialln( k ) / factorial( k );
	}; // end FUNCTION seriesElement()
}


// MAIN //

/**
* Returns the entropy of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~2.508
* @example
* var v = entropy( 1.0 );
* // returns ~1.305
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( lambda ) {
	var gen;
	var out;
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return 0.0;
	}
	gen = seriesClosure( lambda );
	out = lambda * ( 1.0-ln(lambda) );
	out += exp( -lambda ) * sumSeries( gen );
	return out;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/factorial":1471,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/tools/sum-series":1886}],1083:[function(require,module,exports){
'use strict';

/**
* Poisson distribution entropy.
*
* @module @stdlib/math/base/dists/poisson/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/poisson/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~2.61
*
* v = entropy( 4.5 );
* // returns ~2.149
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1082}],1084:[function(require,module,exports){
'use strict';

/**
* Poisson distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/poisson/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/poisson/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.091
*
* v = kurtosis( 4.5 );
* // returns ~0.222
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1085}],1085:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.111
* @example
* var v = kurtosis( 1.0 );
* // returns 1.0
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],1086:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace poisson
*/
var poisson = {};

/**
* @name cdf
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/cdf}
*/
setReadOnly( poisson, 'cdf', require( '@stdlib/math/base/dists/poisson/cdf' ) );

/**
* @name kurtosis
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/kurtosis}
*/
setReadOnly( poisson, 'kurtosis', require( '@stdlib/math/base/dists/poisson/kurtosis' ) );

/**
* @name logpmf
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/logpmf}
*/
setReadOnly( poisson, 'logpmf', require( '@stdlib/math/base/dists/poisson/logpmf' ) );

/**
* @name mean
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/mean}
*/
setReadOnly( poisson, 'mean', require( '@stdlib/math/base/dists/poisson/mean' ) );

/**
* @name median
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/median}
*/
setReadOnly( poisson, 'median', require( '@stdlib/math/base/dists/poisson/median' ) );

/**
* @name mgf
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/mgf}
*/
setReadOnly( poisson, 'mgf', require( '@stdlib/math/base/dists/poisson/mgf' ) );

/**
* @name mode
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/mode}
*/
setReadOnly( poisson, 'mode', require( '@stdlib/math/base/dists/poisson/mode' ) );

/**
* @name pmf
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/pmf}
*/
setReadOnly( poisson, 'pmf', require( '@stdlib/math/base/dists/poisson/pmf' ) );

/**
* @name Poisson
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/ctor}
*/
setReadOnly( poisson, 'Poisson', require( '@stdlib/math/base/dists/poisson/ctor' ) );

/**
* @name quantile
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/quantile}
*/
setReadOnly( poisson, 'quantile', require( '@stdlib/math/base/dists/poisson/quantile' ) );

/**
* @name skewness
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/skewness}
*/
setReadOnly( poisson, 'skewness', require( '@stdlib/math/base/dists/poisson/skewness' ) );

/**
* @name stdev
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/stdev}
*/
setReadOnly( poisson, 'stdev', require( '@stdlib/math/base/dists/poisson/stdev' ) );

/**
* @name variance
* @memberof poisson
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/poisson/variance}
*/
setReadOnly( poisson, 'variance', require( '@stdlib/math/base/dists/poisson/variance' ) );


// EXPORTS //

module.exports = poisson;

},{"@stdlib/math/base/dists/poisson/cdf":1079,"@stdlib/math/base/dists/poisson/ctor":1081,"@stdlib/math/base/dists/poisson/kurtosis":1084,"@stdlib/math/base/dists/poisson/logpmf":1088,"@stdlib/math/base/dists/poisson/mean":1090,"@stdlib/math/base/dists/poisson/median":1092,"@stdlib/math/base/dists/poisson/mgf":1095,"@stdlib/math/base/dists/poisson/mode":1097,"@stdlib/math/base/dists/poisson/pmf":1100,"@stdlib/math/base/dists/poisson/quantile":1103,"@stdlib/math/base/dists/poisson/skewness":1106,"@stdlib/math/base/dists/poisson/stdev":1108,"@stdlib/math/base/dists/poisson/variance":1110,"@stdlib/utils/define-read-only-property":1937}],1087:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logpmf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 1.0 );
* var y = logpmf( 3.0 );
* // returns ~-2.797
*
* y = logpmf( 1.0 );
* // returns ~-1.0
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) && x !== PINF ) {
			return ( x * ln( lambda ) ) - lambda - factorialln( x );
		}
		return NINF;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/degenerate/logpmf":460,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],1088:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a Poisson distribution.
*
* @module @stdlib/math/base/dists/poisson/logpmf
*
* @example
* var logpmf = require( '@stdlib/math/base/dists/poisson/logpmf' );
*
* var y = logpmf( 4.0, 3.0 );
* // returns ~-1.784
*
* y = logpmf( 1.0, 3.0 );
* // returns ~-1.901
*
* y = logpmf( -1.0, 2.0 );
* // returns -Infinity
*
* var mylogpmf = logpmf.factory( 1.0 );
* y = mylogpmf( 3.0 );
* // returns ~-2.797
*
* y = mylogpmf( 1.0 );
* // returns ~-1.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpmf = require( './logpmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpmf, 'factory', factory );


// EXPORTS //

module.exports = logpmf;

},{"./factory.js":1087,"./logpmf.js":1089,"@stdlib/utils/define-read-only-property":1937}],1089:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 4.0, 3.0 );
* // returns ~-1.784
*
* @example
* var y = logpmf( 1.0, 3.0 );
* // returns ~-1.901
*
* @example
* var y = logpmf( -1.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid mean parameter:
* var y = logpmf( 2.0, -0.5 );
* // returns NaN
*/
function logpmf( x, lambda ) {
	if ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return ( x === 0.0 ) ? 0.0 : NINF;
	}
	if ( isNonNegativeInteger( x ) && x !== PINF ) {
		return ( x * ln( lambda ) ) - lambda - factorialln( x );
	}
	return NINF;
}


// EXPORTS //

module.exports = logpmf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/ln":1679}],1090:[function(require,module,exports){
'use strict';

/**
* Poisson distribution expected value.
*
* @module @stdlib/math/base/dists/poisson/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/poisson/mean' );
*
* var v = mean( 11.0 );
* // returns 11.0
*
* v = mean( 4.5 );
* // returns 4.5
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1091}],1091:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 9.0
* @example
* var v = mean( 1.0 );
* // returns 1.0
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return lambda;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],1092:[function(require,module,exports){
'use strict';

/**
* Poisson distribution median.
*
* @module @stdlib/math/base/dists/poisson/median
*
* @example
* var median = require( '@stdlib/math/base/dists/poisson/median' );
*
* var v = median( 11.0 );
* // returns 11
*
* v = median( 4.5 );
* // returns 4
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1093}],1093:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns the median of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 9.0 );
* // returns 9
* @example
* var v = median( 1.0 );
* // returns 1
* @example
* var v = median( -0.2 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return floor( lambda + ( 1.0/3.0 ) - ( 0.02/lambda ) );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484}],1094:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Poisson distribution with mean parameter `lambda`.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2.0 );
* var y = mgf( 0.1 );
* // returns ~1.234
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Poisson distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		return exp( lambda * ( exp(t) - 1.0 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],1095:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Poisson distribution.
*
* @module @stdlib/math/base/dists/poisson/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/poisson/mgf' );
*
* var v = mgf( 0.5, 0.5 );
* // returns ~1.383
*
* var mymgf = mgf.factory( 2.0 );
* y = mymgf( 0.1 );
* // returns ~1.234
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1094,"./mgf.js":1096,"@stdlib/utils/define-read-only-property":1937}],1096:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Poisson distribution with mean parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} lambda - mean parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.5 );
* // returns ~13.163
*
* @example
* var y = mgf( 0.5, 0.5 );
* // returns ~1.383
*
* @example
* var y = mgf( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( -2.0, -1.0 );
* // returns NaN
*/
function mgf( t, lambda ) {
	if ( isnan( t ) || isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return exp( lambda * ( exp(t) - 1.0 ) );
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],1097:[function(require,module,exports){
'use strict';

/**
* Poisson distribution mode.
*
* @module @stdlib/math/base/dists/poisson/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/poisson/mode' );
*
* var v = mode( 11.0 );
* // returns 11
*
* v = mode( 4.5 );
* // returns 4
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1098}],1098:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns the mode of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 9.0 );
* // returns 9
* @example
* var v = mode( 1.0 );
* // returns 1
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return floor( lambda );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484}],1099:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/pmf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} PMF
*
* @example
* var pmf = factory( 1.0 );
* var y = pmf( 3.0 );
* // returns ~0.061
*
* y = pmf( 1.0 );
* // returns ~0.368
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a Poisson distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var lnl;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) && x !== PINF ) {
			lnl = (x * ln( lambda )) - lambda - factorialln( x );
			return exp( lnl );
		}
		return 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/dists/degenerate/pmf":469,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],1100:[function(require,module,exports){
'use strict';

/**
* Poisson distribution probability mass function (PMF).
*
* @module @stdlib/math/base/dists/poisson/pmf
*
* @example
* var pmf = require( '@stdlib/math/base/dists/poisson/pmf' );
*
* var y = pmf( 4.0, 3.0 );
* // returns ~0.168
*
* y = pmf( 1.0, 3.0 );
* // returns ~0.149
*
* y = pmf( -1.0, 2.0 );
* // returns 0.0
*
* var mypmf = pmf.factory( 1.0 );
* y = mypmf( 3.0 );
* // returns ~0.061
*
* y = mypmf( 1.0 );
* // returns ~0.368
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pmf = require( './pmf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pmf, 'factory', factory );


// EXPORTS //

module.exports = pmf;

},{"./factory.js":1099,"./pmf.js":1101,"@stdlib/utils/define-read-only-property":1937}],1101:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 4.0, 3.0 );
* // returns ~0.168
*
* @example
* var y = pmf( 1.0, 3.0 );
* // returns ~0.149
*
* @example
* var y = pmf( -1.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid mean parameter:
* var y = pmf( 2.0, -0.5 );
* // returns NaN
*/
function pmf( x, lambda ) {
	var lnl;
	if ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return x === 0.0 ? 1.0 : 0.0;
	}
	if ( isNonNegativeInteger( x ) && x !== PINF ) {
		lnl = (x * ln( lambda )) - lambda - factorialln( x );
		return exp( lnl );
	}
	return 0.0;
}


// EXPORTS //

module.exports = pmf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/ln":1679}],1102:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/quantile' ).factory;
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dists/poisson/cdf' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var search = require( './search.js' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 5.0 );
* var y = quantile( 0.4 );
* // returns 4
*
* y = quantile( 0.8 );
* // returns 7
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function factory( lambda ) {
	var sigmaInv;
	var sigma;

	if ( isnan( lambda ) || lambda < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	sigma = sqrt( lambda );
	sigmaInv = 1.0 / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a Poisson distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p === 0.0 ) {
			return 0.0;
		}
		if ( p === 1.0 ) {
			return PINF;
		}
		// Cornish-Fisher expansion:
		if ( p < 0.5 ) {
			x = -erfcinv( 2.0 * p ) * SQRT2;
		} else {
			x = erfcinv( 2.0 * ( 1.0 - p ) ) * SQRT2;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
		guess = round( lambda + (sigma * corr) );
		return ( cdf( guess, lambda ) >= p ) ?
			search.left( guess, p, lambda ) :
			search.right( guess, p, lambda );
	}
}

// EXPORTS //

module.exports = factory;

},{"./search.js":1105,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/quantile":472,"@stdlib/math/base/dists/poisson/cdf":1079,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1103:[function(require,module,exports){
'use strict';

/**
* Poisson distribution quantile function.
*
* @module @stdlib/math/base/dists/poisson/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/poisson/quantile' );
*
* var y = quantile( 0.5, 2.0 );
* // returns 2
*
* y = quantile( 0.9, 4.0 );
* // returns 7
*
* y = quantile( 0.1, 200.0 );
* // returns 182
*
* var myquantile = quantile.factory( 5.0 );
* y = myquantile( 0.4 );
* // returns 4
*
* y = myquantile( 0.8 );
* // returns 7
*
* y = myquantile( 1.0 );
* // returns Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1102,"./quantile.js":1104,"@stdlib/utils/define-read-only-property":1937}],1104:[function(require,module,exports){
'use strict';

// MODULES //

var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var round = require( '@stdlib/math/base/special/round' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var cdf = require( '@stdlib/math/base/dists/poisson/cdf' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var search = require( './search.js' );


// MAIN //

/**
* Evaluates the quantile function for a Poisson distribution with mean parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0 );
* // returns 2
*
* @example
* var y = quantile( 0.9, 4.0 );
* // returns 7
*
* @example
* var y = quantile( 0.1, 200.0 );
* // returns 182
*
* @example
* var y = quantile( 1.1, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*/
function quantile( p, lambda ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var x2;
	var x;
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return 0.0;
	}
	if ( p === 0.0 ) {
		return 0.0;
	}
	if ( p === 1.0 ) {
		return PINF;
	}
	// Cornish-Fisher expansion:
	sigma = sqrt( lambda );
	sigmaInv = 1.0 / sigma;
	if ( p < 0.5 ) {
		x = -erfcinv( 2.0 * p ) * SQRT2;
	} else {
		x = erfcinv( 2.0 * ( 1.0 - p ) ) * SQRT2;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
	guess = round( lambda + (sigma * corr) );
	return ( cdf( guess, lambda ) >= p ) ?
		search.left( guess, p, lambda ) :
		search.right( guess, p, lambda );
}


// EXPORTS //

module.exports = quantile;

},{"./search.js":1105,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/poisson/cdf":1079,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/sqrt":1826}],1105:[function(require,module,exports){
'use strict';

// MODULES //

var cdf = require( '@stdlib/math/base/dists/poisson/cdf' );


// VARIABLES //

var methods;


// FUNCTIONS //

/**
* Performs a search to the left.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} p - probability
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} `p` quantile of the specified distribution
*/
function searchLeft( x, p, lambda ) {
	while ( true ) {
		if ( x === 0 || cdf( x - 1.0, lambda ) < p ) {
			return x;
		}
		x -= 1;
	}
}

/**
* Performs a search to the right.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} p - probability
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} `p` quantile of the specified distribution
*/
function searchRight( x, p, lambda ) {
	while ( true ) {
		x += 1;
		if ( cdf( x, lambda ) >= p ) {
			return x;
		}
	}
}


// MAIN //

methods = {
	'left': searchLeft,
	'right': searchRight
};


// EXPORTS //

module.exports = methods;

},{"@stdlib/math/base/dists/poisson/cdf":1079}],1106:[function(require,module,exports){
'use strict';

/**
* Poisson distribution skewness.
*
* @module @stdlib/math/base/dists/poisson/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/poisson/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.302
*
* v = skewness( 4.5 );
* // returns ~0.471
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1107}],1107:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the skewness of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.33
* @example
* var v = skewness( 1.0 );
* // returns 1.0
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return 1.0 / sqrt( lambda );
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1108:[function(require,module,exports){
'use strict';

/**
* Poisson distribution standard deviation.
*
* @module @stdlib/math/base/dists/poisson/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/poisson/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~3.317
*
* v = stdev( 4.5 );
* // returns ~2.121
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1109}],1109:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns 3.0
* @example
* var v = stdev( 1.0 );
* // returns 1.0
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return sqrt( lambda );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1110:[function(require,module,exports){
'use strict';

/**
* Poisson distribution variance.
*
* @module @stdlib/math/base/dists/poisson/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/poisson/variance' );
*
* var v = variance( 11.0 );
* // returns 11.0
*
* v = variance( 4.5 );
* // returns 4.5
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1111}],1111:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns 9.0
* @example
* var v = variance( 1.0 );
* // returns 1.0
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( lambda ) {
	if ( isnan( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return lambda;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],1112:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.199
*
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.118
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, sigma ) {
	var s2;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x < 0.0 ? 0.0 : 1.0;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	s2 = pow( sigma, 2.0 );
	return 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],1113:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/cdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2.0 );
* var y = cdf( 3.0 );
* // returns ~0.675
*
* y = cdf( 1.0 );
* // returns ~0.118
*/
function factory( sigma ) {
	var s2;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/cdf":451,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1114:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/rayleigh/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/rayleigh/cdf' );
*
* var y = cdf( 2.0, 5.0 );
* // returns ~0.077
*
* var myCDF = cdf.factory( 0.5 );
* y = myCDF( 1.0 );
* // returns ~0.865
*
* y = myCDF( 0.5 );
* // returns ~0.393
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1112,"./factory.js":1113,"@stdlib/utils/define-read-only-property":1937}],1115:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/rayleigh/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/rayleigh/kurtosis' );
var mean = require( '@stdlib/math/base/dists/rayleigh/mean' );
var median = require( '@stdlib/math/base/dists/rayleigh/median' );
var mode = require( '@stdlib/math/base/dists/rayleigh/mode' );
var skewness = require( '@stdlib/math/base/dists/rayleigh/skewness' );
var stdev = require( '@stdlib/math/base/dists/rayleigh/stdev' );
var variance = require( '@stdlib/math/base/dists/rayleigh/variance' );
var cdf = require( '@stdlib/math/base/dists/rayleigh/cdf' );
var logcdf = require( '@stdlib/math/base/dists/rayleigh/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/rayleigh/logpdf' );
var mgf = require( '@stdlib/math/base/dists/rayleigh/mgf' );
var pdf = require( '@stdlib/math/base/dists/rayleigh/pdf' );
var quantile = require( '@stdlib/math/base/dists/rayleigh/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function rayleighCDF( x ) {
	return cdf( x, this.sigma );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function rayleighLogCDF( x ) {
	return logcdf( x, this.sigma );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function rayleighLogPDF( x ) {
	return logpdf( x, this.sigma );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function rayleighMGF( t ) {
	return mgf( t, this.sigma );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function rayleighPDF( x ) {
	return pdf( x, this.sigma );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function rayleighQuantile( p ) {
	return quantile( p, this.sigma );
}


// MAIN //

/**
* Rayleigh distribution constructor.
*
* @constructor
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {Rayleigh} distribution instance
*
* @example
* var rayleigh = new Rayleigh( 1.0 );
*
* var y = rayleigh.cdf( 0.8 );
* // returns ~0.274
*
* var mode = rayleigh.mode;
* // returns 1.0
*/
function Rayleigh() {
	var sigma;
	if ( !(this instanceof Rayleigh) ) {
		if ( arguments.length === 0 ) {
			return new Rayleigh();
		}
		return new Rayleigh( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		sigma = arguments[ 0 ];
		if ( !isPositive( sigma ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		sigma = 1.0;
	}
	Object.defineProperty( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
}

/**
* Rayleigh distribution differential entropy.
*
* @name entropy
* @memberof Rayleigh.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.entropy;
* // returns ~2.328
*/
Object.defineProperty( Rayleigh.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.sigma );
	}
});

/**
* Rayleigh distribution excess kurtosis.
*
* @name kurtosis
* @memberof Rayleigh.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.kurtosis;
* // returns ~0.245
*/
Object.defineProperty( Rayleigh.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.sigma );
	}
});

/**
* Rayleigh distribution expected value.
*
* @name mean
* @memberof Rayleigh.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.mean;
* // returns ~5.013
*/
Object.defineProperty( Rayleigh.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.sigma );
	}
});

/**
* Rayleigh distribution median.
*
* @name median
* @memberof Rayleigh.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.median;
* // returns ~4.71
*/
Object.defineProperty( Rayleigh.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.sigma );
	}
});

/**
* Rayleigh distribution mode.
*
* @name mode
* @memberof Rayleigh.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.mode;
* // returns 4.0
*/
Object.defineProperty( Rayleigh.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.sigma );
	}
});

/**
* Rayleigh distribution skewness.
*
* @name skewness
* @memberof Rayleigh.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.skewness;
* // returns ~0.631
*/
Object.defineProperty( Rayleigh.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k, this.sigma );
	}
});

/**
* Rayleigh distribution standard deviation.
*
* @name stdev
* @memberof Rayleigh.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.stdev;
* // returns ~2.62
*/
Object.defineProperty( Rayleigh.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.sigma );
	}
});

/**
* Rayleigh distribution variance.
*
* @name variance
* @memberof Rayleigh.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.variance;
* // returns ~6.867
*/
Object.defineProperty( Rayleigh.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.sigma );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.cdf( 0.5 );
* // returns ~0.031
*/
setReadOnly( Rayleigh.prototype, 'cdf', rayleighCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.logcdf( 0.5 );
* // returns ~-3.481
*/
setReadOnly( Rayleigh.prototype, 'logcdf', rayleighLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name pdf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.logpdf( 0.8 );
* // returns ~-1.689
*/
setReadOnly( Rayleigh.prototype, 'logpdf', rayleighLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.mgf( 0.5 );
* // returns ~5.586
*/
setReadOnly( Rayleigh.prototype, 'mgf', rayleighMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.pdf( 4.0 );
* // returns ~0.135
*/
setReadOnly( Rayleigh.prototype, 'pdf', rayleighPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Rayleigh.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.quantile( 0.5 );
* // returns ~2.355
*/
setReadOnly( Rayleigh.prototype, 'quantile', rayleighQuantile );


// EXPORTS //

module.exports = Rayleigh;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/rayleigh/cdf":1114,"@stdlib/math/base/dists/rayleigh/entropy":1118,"@stdlib/math/base/dists/rayleigh/kurtosis":1119,"@stdlib/math/base/dists/rayleigh/logcdf":1123,"@stdlib/math/base/dists/rayleigh/logpdf":1126,"@stdlib/math/base/dists/rayleigh/mean":1128,"@stdlib/math/base/dists/rayleigh/median":1130,"@stdlib/math/base/dists/rayleigh/mgf":1133,"@stdlib/math/base/dists/rayleigh/mode":1135,"@stdlib/math/base/dists/rayleigh/pdf":1138,"@stdlib/math/base/dists/rayleigh/quantile":1141,"@stdlib/math/base/dists/rayleigh/skewness":1143,"@stdlib/math/base/dists/rayleigh/stdev":1145,"@stdlib/math/base/dists/rayleigh/variance":1147,"@stdlib/utils/define-read-only-property":1937}],1116:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution constructor.
*
* @module @stdlib/math/base/dists/rayleigh/ctor
*
* @example
* var Rayleigh = require( '@stdlib/math/base/dists/rayleigh/ctor' );
*
* var rayleigh = new Rayleigh( 1.0 );
*
* var y = rayleigh.cdf( 0.8 );
* // returns ~0.274
*
* var mode = rayleigh.mode;
* // returns 1.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1115}],1117:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );


// MAIN //

/**
* Returns the differential entropy of a Rayleigh distribution.
*
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~3.139
* @example
* var v = entropy( 2.0 );
* // returns ~1.635
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( sigma ) {
	if ( isnan( sigma ) || sigma <= 0.0 ) {
		return NaN;
	}
	return 1.0 + ln( sigma / SQRT2 ) + ( 0.5 * GAMMA );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-eulergamma":71,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1118:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution differential entropy.
*
* @module @stdlib/math/base/dists/rayleigh/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/rayleigh/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~3.34
*
* v = entropy( 4.5 );
* // returns ~2.446
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1117}],1119:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/rayleigh/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/rayleigh/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.245
*
* v = kurtosis( 4.5 );
* // returns ~0.245
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1120}],1120:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

var KURTOSIS = -( ( 6.0*PI*PI ) - ( 24.0*PI ) + 16.0 ) / ( (4.0-PI)*(4.0-PI) );


// MAIN //

/**
* Returns the excess kurtosis of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.245
* @example
* var v = kurtosis( 5.0 );
* // returns ~0.245
* @example
* var v = kurtosis( 3.0 );
* // returns ~0.245
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return KURTOSIS;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128}],1121:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace rayleigh
*/
var rayleigh = {};

/**
* @name cdf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/cdf}
*/
setReadOnly( rayleigh, 'cdf', require( '@stdlib/math/base/dists/rayleigh/cdf' ) );

/**
* @name entropy
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/entropy}
*/
setReadOnly( rayleigh, 'entropy', require( '@stdlib/math/base/dists/rayleigh/entropy' ) );

/**
* @name kurtosis
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/kurtosis}
*/
setReadOnly( rayleigh, 'kurtosis', require( '@stdlib/math/base/dists/rayleigh/kurtosis' ) );

/**
* @name logcdf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/logcdf}
*/
setReadOnly( rayleigh, 'logcdf', require( '@stdlib/math/base/dists/rayleigh/logcdf' ) );

/**
* @name logpdf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/logpdf}
*/
setReadOnly( rayleigh, 'logpdf', require( '@stdlib/math/base/dists/rayleigh/logpdf' ) );

/**
* @name mean
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/mean}
*/
setReadOnly( rayleigh, 'mean', require( '@stdlib/math/base/dists/rayleigh/mean' ) );

/**
* @name median
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/median}
*/
setReadOnly( rayleigh, 'median', require( '@stdlib/math/base/dists/rayleigh/median' ) );

/**
* @name mgf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/mgf}
*/
setReadOnly( rayleigh, 'mgf', require( '@stdlib/math/base/dists/rayleigh/mgf' ) );

/**
* @name mode
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/mode}
*/
setReadOnly( rayleigh, 'mode', require( '@stdlib/math/base/dists/rayleigh/mode' ) );

/**
* @name pdf
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/pdf}
*/
setReadOnly( rayleigh, 'pdf', require( '@stdlib/math/base/dists/rayleigh/pdf' ) );

/**
* @name Rayleigh
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/ctor}
*/
setReadOnly( rayleigh, 'Rayleigh', require( '@stdlib/math/base/dists/rayleigh/ctor' ) );

/**
* @name quantile
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/quantile}
*/
setReadOnly( rayleigh, 'quantile', require( '@stdlib/math/base/dists/rayleigh/quantile' ) );

/**
* @name skewness
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/skewness}
*/
setReadOnly( rayleigh, 'skewness', require( '@stdlib/math/base/dists/rayleigh/skewness' ) );

/**
* @name variance
* @memberof rayleigh
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/rayleigh/variance}
*/
setReadOnly( rayleigh, 'variance', require( '@stdlib/math/base/dists/rayleigh/variance' ) );


// EXPORTS //

module.exports = rayleigh;

},{"@stdlib/math/base/dists/rayleigh/cdf":1114,"@stdlib/math/base/dists/rayleigh/ctor":1116,"@stdlib/math/base/dists/rayleigh/entropy":1118,"@stdlib/math/base/dists/rayleigh/kurtosis":1119,"@stdlib/math/base/dists/rayleigh/logcdf":1123,"@stdlib/math/base/dists/rayleigh/logpdf":1126,"@stdlib/math/base/dists/rayleigh/mean":1128,"@stdlib/math/base/dists/rayleigh/median":1130,"@stdlib/math/base/dists/rayleigh/mgf":1133,"@stdlib/math/base/dists/rayleigh/mode":1135,"@stdlib/math/base/dists/rayleigh/pdf":1138,"@stdlib/math/base/dists/rayleigh/quantile":1141,"@stdlib/math/base/dists/rayleigh/skewness":1143,"@stdlib/math/base/dists/rayleigh/variance":1147,"@stdlib/utils/define-read-only-property":1937}],1122:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logcdf' ).factory;
var expm1 = require( '@stdlib/math/base/special/expm1' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/constants/math/float64-ln-half' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 2.0 );
* var y = logcdf( 3.0 );
* // returns ~-0.393
*
* y = logcdf( 1.0 );
* // returns ~-2.137
*/
function factory( sigma ) {
	var s2;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var p;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return NINF;
		}
		p = -pow( x, 2.0 ) / ( 2.0 * s2 );
		return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-half":79,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logcdf":454,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1123:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/rayleigh/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/rayleigh/logcdf' );
*
* var y = logcdf( 2.0, 5.0 );
* // returns ~-2.564
*
* var mylogcdf = logcdf.factory( 0.5 );
* y = mylogcdf( 1.0 );
* // returns ~-0.145
*
* y = mylogcdf( 0.5 );
* // returns ~-0.934
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":1122,"./logcdf.js":1124,"@stdlib/utils/define-read-only-property":1937}],1124:[function(require,module,exports){
'use strict';

// MODULES //

var expm1 = require( '@stdlib/math/base/special/expm1' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/constants/math/float64-ln-half' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 3.0 );
* // returns ~-1.614
*
* @example
* var y = logcdf( 1.0, 2.0 );
* // returns ~-2.137
*
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, -1.0 );
* // returns NaN
*/
function logcdf( x, sigma ) {
	var s2;
	var p;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x < 0.0 ? NINF : 0.0;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	s2 = pow( sigma, 2.0 );
	p = -pow( x, 2.0 ) / ( 2.0 * s2 );
	return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ln-half":79,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743}],1125:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/logpdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5 );
* var y = logpdf( 1.0 );
* // returns ~-0.614
* y = logpdf( 0.1 );
* // returns ~-0.936
*/
function factory( sigma ) {
	var s2;
	var s2i;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return NINF;
		}
		return ln( s2i * x ) - (pow( x, 2.0 ) / ( 2.0 * s2 ));
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/logpdf":457,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1126:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/rayleigh/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/rayleigh/logpdf' );
*
* var y = logpdf( 2.0, 4.0 );
* // returns ~-2.207
*
* var mylogpdf = logpdf.factory( 4.0 );
*
* y = mylogpdf( 6.0 );
* // returns ~-2.104
*
* y = mylogpdf( 4.0 );
* // returns ~-1.884
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1125,"./logpdf.js":1127,"@stdlib/utils/define-read-only-property":1937}],1127:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 1.0 );
* // returns ~-1.248
*
* @example
* var y = logpdf( 2.0, 0.8 );
* // returns ~-1.988
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function logpdf( x, sigma ) {
	var s2;
	var s2i;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x === 0.0 ? PINF : NINF;
	}
	if ( x < 0.0 || x === PINF ) {
		return NINF;
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	return ln( s2i * x ) - (pow( x, 2.0 ) / ( 2.0 * s2 ));
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],1128:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution expected value.
*
* @module @stdlib/math/base/dists/rayleigh/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/rayleigh/mean' );
*
* var v = mean( 11.0 );
* // returns ~13.786
*
* v = mean( 4.5 );
* // returns ~5.64
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1129}],1129:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var SQRT_HALF_PI = require( '@stdlib/constants/math/float64-sqrt-half-pi' );


// MAIN //

/**
* Returns the expected value of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~11.28
* @example
* var v = mean( 2.0 );
* // returns ~2.507
* @example
* var v = mean( 0.5 );
* // returns NaN
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma * SQRT_HALF_PI;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/constants/math/float64-sqrt-half-pi":106,"@stdlib/math/base/assert/is-nan":128}],1130:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution median.
*
* @module @stdlib/math/base/dists/rayleigh/median
*
* @example
* var median = require( '@stdlib/math/base/dists/rayleigh/median' );
*
* var v = median( 11.0 );
* // returns ~12.952
*
* v = median( 4.5 );
* // returns ~5.298
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1131}],1131:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// VARIABLES //

var SQRT2LN2 = sqrt( 2.0 * LN2 );


// MAIN //

/**
* Returns the median of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns ~10.597
* @example
* var v = median( 2.0 );
* // returns ~2.355
* @example
* var v = median( -0.2 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma * SQRT2LN2;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1132:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var erf = require( '@stdlib/math/base/special/erf' );
var SQRT_HALF_PI = require( '@stdlib/constants/math/float64-sqrt-half-pi' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.5 );
* var y = mgf( 1.0 );
* // returns ~2.715
*
* y = mgf( 0.5 );
* // returns ~1.888
*/
function factory( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var sigmat;
		var ret;

		if ( isnan( t ) ) {
			return NaN;
		}
		sigmat = t * sigma;
		ret = 1.0 + (sigmat * exp( sigmat*sigmat / 2.0 ));
		ret *= SQRT_HALF_PI * ( erf( sigmat / SQRT2 ) + 1.0 );
		return ret;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-sqrt-half-pi":106,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erf":1421,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],1133:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Rayleigh distribution.
*
* @module @stdlib/math/base/dists/rayleigh/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/rayleigh/mgf' );
*
* var y = mgf( 1.0, 3.0 );
* // returns ~678.508
*
* y = mgf( 1.0, 2.0 );
* // returns ~38.65
*
* y = mgf( -1.0, 4.0 );
* // returns ~-0.947
*
* var myMGF = mgf.factory( 0.5 );
*
* y = myMGF( 1.0 );
* // returns ~2.715
*
* y = myMGF( 0.5 );
* // returns ~1.888
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1132,"./mgf.js":1134,"@stdlib/utils/define-read-only-property":1937}],1134:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var erf = require( '@stdlib/math/base/special/erf' );
var SQRT_HALF_PI = require( '@stdlib/constants/math/float64-sqrt-half-pi' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Rayleigh distribution with scale parameter `sigma` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 3.0 );
* // returns ~678.508
*
* @example
* var y = mgf( 1.0, 2.0 );
* // returns ~38.65
*
* @example
* var y = mgf( -1.0, 4.0 );
* // returns ~-0.947
*
* @example
* var y = mgf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.5, -1.0 );
* // returns NaN
*/
function mgf( t, sigma ) {
	var sigmat;
	var out;
	if (
		isnan( t ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	sigmat = t * sigma;
	out = 1.0 + (sigmat * exp( sigmat*sigmat / 2.0 ));
	out *= SQRT_HALF_PI * ( erf( sigmat / SQRT2 ) + 1.0 );
	return out;
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/constants/math/float64-sqrt-half-pi":106,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/erf":1421,"@stdlib/math/base/special/exp":1456}],1135:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution mode.
*
* @module @stdlib/math/base/dists/rayleigh/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/rayleigh/mode' );
*
* var v = mode( 11.0 );
* // returns 11.0
*
* v = mode( 4.5 );
* // returns 4.5
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1136}],1136:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 9.0
* @example
* var v = mode( 2.0 );
* // returns 2.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],1137:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/pdf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
* var y = pdf( 1.0 );
* // returns ~0.541
*
* y = pdf( 0.1 );
* // returns ~0.392
*/
function factory( sigma ) {
	var s2;
	var s2i;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === PINF ) {
			return 0.0;
		}
		return s2i * x * exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/pdf":466,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1138:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/rayleigh/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/rayleigh/pdf' );
*
* var y = pdf( 2.0, 4.0 );
* // returns ~0.11
*
* var myPDF = pdf.factory( 4.0 );
*
* y = myPDF( 6.0 );
* // returns ~0.122
*
* y = myPDF( 4.0 );
* // returns ~0.152
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1137,"./pdf.js":1139,"@stdlib/utils/define-read-only-property":1937}],1139:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 1.0 );
* // returns ~0.287
*
* @example
* var y = pdf( 2.0, 0.8 );
* // returns ~0.137
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, sigma ) {
	var s2;
	var s2i;
	if (
		isnan( x ) ||
		isnan( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return x === 0.0 ? PINF : 0.0;
	}
	if ( x < 0.0 || x === PINF ) {
		return 0.0;
	}
	s2 = pow( sigma, 2.0 );
	s2i = 1.0 / s2;
	return s2i * x * exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],1140:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var degenerate = require( '@stdlib/math/base/dists/degenerate/quantile' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0 );
* var y = quantile( 0.5 );
* // returns ~11.774
*
* y = quantile( 0.8 );
* // returns ~17.941
*/
function factory( sigma ) {
	var s2;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( sigma === 0.0 ) {
		return degenerate( 0.0 );
	}
	s2 = sigma * sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a Rayleigh distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return sqrt( -2.0 * s2 * log1p( -p ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/degenerate/quantile":472,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1141:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution quantile function.
*
* @module @stdlib/math/base/dists/rayleigh/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/rayleigh/quantile' );
*
* var y = quantile( 0.5, 4.0 );
* // returns ~4.71
*
* var myQuantile = quantile.factory( 0.4 );
*
* y = myQuantile( 0.4 );
* // returns ~0.404
*
* y = myQuantile( 1.0 );
* // returns Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1140,"./quantile.js":1142,"@stdlib/utils/define-read-only-property":1937}],1142:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a Rayleigh distribution with scale parameter `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.794
*
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~4.71
*
* @example
* var y = quantile( 1.1, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, sigma ) {
	var s2;
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return 0.0;
	}
	s2 = sigma * sigma;
	return sqrt( -2.0 * s2 * log1p( -p ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/sqrt":1826}],1143:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution skewness.
*
* @module @stdlib/math/base/dists/rayleigh/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/rayleigh/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.631
*
* v = skewness( 4.5 );
* // returns ~0.631
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1144}],1144:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

var SKEWNESS = 2.0 * SQRT_PI * ( PI-3.0 ) / pow( 4.0-PI, 1.5 );


// MAIN //

/**
* Returns the skewness of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.631
* @example
* var v = skewness( 2.0 );
* // returns ~0.631
* @example
* var v = skewness( 0.5 );
* // returns NaN
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( sigma ) {
	if ( isnan( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return SKEWNESS;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-sqrt-pi":107,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1145:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution standard deviation.
*
* @module @stdlib/math/base/dists/rayleigh/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/rayleigh/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~7.207
*
* v = stdev( 4.5 );
* // returns ~2.948
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1146}],1146:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

var SQRT4MPI = sqrt( 4.0-PI );


// MAIN //

/**
* Returns the standard deviation of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~5.896
* @example
* var v = stdev( 2.0 );
* // returns ~1.31
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( sigma ) {
	if ( isnan( sigma ) || sigma < 0 ) {
		return NaN;
	}
	return SQRT4MPI * sigma / SQRT2;
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1147:[function(require,module,exports){
'use strict';

/**
* Rayleigh distribution variance.
*
* @module @stdlib/math/base/dists/rayleigh/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/rayleigh/variance' );
*
* var v = variance( 11.0 );
* // returns ~51.934
*
* v = variance( 4.5 );
* // returns ~8.691
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1148}],1148:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns the variance of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~34.765
* @example
* var v = variance( 2.0 );
* // returns ~1.717
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( sigma ) {
	if ( isnan( sigma ) || sigma < 0 ) {
		return NaN;
	}
	return ( 4.0-PI ) * sigma*sigma / 2.0;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128}],1149:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.611
*
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.789
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns ~0.187
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function cdf( x, v ) {
	var x2;
	var p;
	var z;
	if (
		isnan( x ) ||
		isnan( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return 0.5;
	}
	x2 = pow( x, 2.0 );
	if ( v > 2.0*x2 ) {
		z = x2 / ( v + x2 );
		p = betainc( z, 0.5, v/2.0, true, true ) / 2.0;
	} else {
		z = v / ( v + x2 );
		p = betainc( z, v/2.0, 0.5, true, false ) / 2.0;
	}
	return ( x > 0.0 ) ? 1.0 - p : p;
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/pow":1743}],1150:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.816
*
* y = cdf( 1.0 );
* // returns ~0.699
*/
function factory( v ) {
	if ( isnan( v ) || v <= 0.0 ) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var x2;
		var p;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === 0.0 ) {
			return 0.5;
		}
		x2 = pow( x, 2.0 );
		if ( v > 2.0*x2 ) {
			z = x2 / ( v + x2 );
			p = betainc( z, 0.5, v/2.0, true, true ) / 2.0;
		} else {
			z = v / ( v + x2 );
			p = betainc( z, v/2.0, 0.5, true, false ) / 2.0;
		}
		return ( x > 0.0 ) ? 1.0 - p : p;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1151:[function(require,module,exports){
'use strict';

/**
* Student's t distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/t/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/t/cdf' );
*
* var y = cdf( 2.0, 0.1 );
* // returns ~0.611
*
* y = cdf( 1.0, 2.0 );
* // returns ~0.789
*
* y = cdf( -1.0, 4.0 );
* // returns ~0.187
*
* var mycdf = cdf.factory( 0.5 );
* y = mycdf( 3.0 );
* // returns ~0.816
*
* y = mycdf( 1.0 );
* // returns ~0.699
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1149,"./factory.js":1150,"@stdlib/utils/define-read-only-property":1937}],1152:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/t/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/t/kurtosis' );
var mean = require( '@stdlib/math/base/dists/t/mean' );
var median = require( '@stdlib/math/base/dists/t/median' );
var mode = require( '@stdlib/math/base/dists/t/mode' );
var skewness = require( '@stdlib/math/base/dists/t/skewness' );
var stdev = require( '@stdlib/math/base/dists/t/stdev' );
var variance = require( '@stdlib/math/base/dists/t/variance' );
var cdf = require( '@stdlib/math/base/dists/t/cdf' );
var logcdf = require( '@stdlib/math/base/dists/t/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/t/logpdf' );
var pdf = require( '@stdlib/math/base/dists/t/pdf' );
var quantile = require( '@stdlib/math/base/dists/t/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function tCDF( x ) {
	return cdf( x, this.v );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function tLogCDF( x ) {
	return logcdf( x, this.v );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function tLogPDF( x ) {
	return logpdf( x, this.v );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function tPDF( x ) {
	return pdf( x, this.v );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function tQuantile( p ) {
	return quantile( p, this.v );
}


// MAIN //

/**
* Student's t distribution constructor.
*
* @constructor
* @param {PositiveNumber} [v=1.0] - degrees of freedom
* @throws {TypeError} `v` must be a positive number
* @returns {T} distribution instance
*
* @example
* var t = new T( 1.0 );
*
* var y = t.cdf( 0.8 );
* // returns ~0.715
*
* var mode = t.mode;
* // returns 0.0
*/
function T() {
	var v;
	if ( !(this instanceof T) ) {
		if ( arguments.length === 0 ) {
			return new T();
		}
		return new T( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		v = arguments[ 0 ];
		if ( !isPositive( v ) ) {
			throw new TypeError( 'invalid input argument. Rate parameter `v` must be a positive number. Value: `' + v + '`' );
		}
	} else {
		v = 1.0;
	}
	Object.defineProperty( this, 'v', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return v;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			v = value;
		}
	});
	return this;
}

/**
* Student's t distribution differential entropy.
*
* @name entropy
* @memberof T.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.entropy;
* // returns ~1.682
*/
Object.defineProperty( T.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.v );
	}
});

/**
* Student's t distribution excess kurtosis.
*
* @name kurtosis
* @memberof T.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.kurtosis;
* // returns Infinity
*/
Object.defineProperty( T.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.v );
	}
});

/**
* Student's t distribution expected value.
*
* @name mean
* @memberof T.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.mean;
* // returns 0.0
*/
Object.defineProperty( T.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.v );
	}
});

/**
* Student's t distribution median.
*
* @name median
* @memberof T.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.median;
* // returns 0.0
*/
Object.defineProperty( T.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.v );
	}
});

/**
* Student's t distribution mode.
*
* @name mode
* @memberof T.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.mode;
* // returns 0.0
*/
Object.defineProperty( T.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.v );
	}
});

/**
* Student's t distribution skewness.
*
* @name skewness
* @memberof T.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.skewness;
* // returns 0.0
*/
Object.defineProperty( T.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.v );
	}
});

/**
* Student's t distribution standard deviation.
*
* @name stdev
* @memberof T.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.stdev;
* // returns ~1.414
*/
Object.defineProperty( T.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.v );
	}
});

/**
* Student's t distribution variance.
*
* @name variance
* @memberof T.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.variance;
* // returns 2.0
*/
Object.defineProperty( T.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.v );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof T.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.cdf( 0.5 );
* // returns ~0.667
*/
setReadOnly( T.prototype, 'cdf', tCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof T.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.logcdf( 0.5 );
* // returns ~-0.405
*/
setReadOnly( T.prototype, 'logcdf', tLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof T.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.logpdf( 0.8 );
* // returns ~-1.457
*/
setReadOnly( T.prototype, 'logpdf', tLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof T.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.pdf( 0.8 );
* // returns ~0.233
*/
setReadOnly( T.prototype, 'pdf', tPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof T.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.quantile( 0.5 );
* // returns 0.0
*/
setReadOnly( T.prototype, 'quantile', tQuantile );


// EXPORTS //

module.exports = T;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/t/cdf":1151,"@stdlib/math/base/dists/t/entropy":1155,"@stdlib/math/base/dists/t/kurtosis":1156,"@stdlib/math/base/dists/t/logcdf":1160,"@stdlib/math/base/dists/t/logpdf":1163,"@stdlib/math/base/dists/t/mean":1165,"@stdlib/math/base/dists/t/median":1167,"@stdlib/math/base/dists/t/mode":1169,"@stdlib/math/base/dists/t/pdf":1172,"@stdlib/math/base/dists/t/quantile":1175,"@stdlib/math/base/dists/t/skewness":1177,"@stdlib/math/base/dists/t/stdev":1179,"@stdlib/math/base/dists/t/variance":1181,"@stdlib/utils/define-read-only-property":1937}],1153:[function(require,module,exports){
'use strict';

/**
* Student's t distribution constructor.
*
* @module @stdlib/math/base/dists/t/ctor
*
* @example
* var T = require( '@stdlib/math/base/dists/t/ctor' );
*
* var t = new T( 1.0 );
*
* var y = t.cdf( 0.8 );
* // returns ~0.715
*
* var mode = t.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1152}],1154:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var beta = require( '@stdlib/math/base/special/beta' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~1.533
* @example
* var v = entropy( 2.0 );
* // returns ~1.96
* @example
* var v = entropy( -0.2 );
* // returns NaN
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function entropy( v ) {
	var out;
	var vh;
	if ( isnan( v ) || v <= 0.0 ) {
		return NaN;
	}
	vh = v / 2.0;
	out = ( v + 1.0 ) / 2.0;
	out *= digamma( ( 1.0+v ) / 2.0 ) - digamma( vh );
	out += ln( sqrt( v ) * beta( vh, 0.5 ) );
	return out;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/beta":1360,"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826}],1155:[function(require,module,exports){
'use strict';

/**
* Student's t distribution differential entropy.
*
* @module @stdlib/math/base/dists/t/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/t/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~1.512
*
* v = entropy( 4.5 );
* // returns ~1.652
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1154}],1156:[function(require,module,exports){
'use strict';

/**
* Student's t distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/t/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/t/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.857
*
* v = kurtosis( 4.5 );
* // returns 12.0
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1157}],1157:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the excess kurtosis of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns 1.2
* @example
* var v = kurtosis( 5.0 );
* // returns 6.0
* @example
* var v = kurtosis( 3.0 );
* // returns Infinity
* @example
* var v = kurtosis( 0.5 );
* // returns NaN
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function kurtosis( v ) {
	if ( isnan( v ) || v <= 2.0 ) {
		return NaN;
	}
	if ( v <= 4.0 ) {
		return PINF;
	}
	return 6.0 / ( v - 4.0 );
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],1158:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace t
*/
var t = {};

/**
* @name cdf
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/cdf}
*/
setReadOnly( t, 'cdf', require( '@stdlib/math/base/dists/t/cdf' ) );

/**
* @name entropy
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/entropy}
*/
setReadOnly( t, 'entropy', require( '@stdlib/math/base/dists/t/entropy' ) );

/**
* @name kurtosis
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/kurtosis}
*/
setReadOnly( t, 'kurtosis', require( '@stdlib/math/base/dists/t/kurtosis' ) );

/**
* @name logcdf
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/logcdf}
*/
setReadOnly( t, 'logcdf', require( '@stdlib/math/base/dists/t/logcdf' ) );

/**
* @name logpdf
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/logpdf}
*/
setReadOnly( t, 'logpdf', require( '@stdlib/math/base/dists/t/logpdf' ) );

/**
* @name mean
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/mean}
*/
setReadOnly( t, 'mean', require( '@stdlib/math/base/dists/t/mean' ) );

/**
* @name median
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/median}
*/
setReadOnly( t, 'median', require( '@stdlib/math/base/dists/t/median' ) );

/**
* @name mode
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/mode}
*/
setReadOnly( t, 'mode', require( '@stdlib/math/base/dists/t/mode' ) );

/**
* @name pdf
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/pdf}
*/
setReadOnly( t, 'pdf', require( '@stdlib/math/base/dists/t/pdf' ) );

/**
* @name T
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/ctor}
*/
setReadOnly( t, 'T', require( '@stdlib/math/base/dists/t/ctor' ) );

/**
* @name quantile
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/quantile}
*/
setReadOnly( t, 'quantile', require( '@stdlib/math/base/dists/t/quantile' ) );

/**
* @name skewness
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/skewness}
*/
setReadOnly( t, 'skewness', require( '@stdlib/math/base/dists/t/skewness' ) );

/**
* @name stdev
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/stdev}
*/
setReadOnly( t, 'stdev', require( '@stdlib/math/base/dists/t/stdev' ) );

/**
* @name variance
* @memberof t
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/t/variance}
*/
setReadOnly( t, 'variance', require( '@stdlib/math/base/dists/t/variance' ) );


// EXPORTS //

module.exports = t;

},{"@stdlib/math/base/dists/t/cdf":1151,"@stdlib/math/base/dists/t/ctor":1153,"@stdlib/math/base/dists/t/entropy":1155,"@stdlib/math/base/dists/t/kurtosis":1156,"@stdlib/math/base/dists/t/logcdf":1160,"@stdlib/math/base/dists/t/logpdf":1163,"@stdlib/math/base/dists/t/mean":1165,"@stdlib/math/base/dists/t/median":1167,"@stdlib/math/base/dists/t/mode":1169,"@stdlib/math/base/dists/t/pdf":1172,"@stdlib/math/base/dists/t/quantile":1175,"@stdlib/math/base/dists/t/skewness":1177,"@stdlib/math/base/dists/t/stdev":1179,"@stdlib/math/base/dists/t/variance":1181,"@stdlib/utils/define-read-only-property":1937}],1159:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_HALF = require( '@stdlib/constants/math/float64-ln-half' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5 );
* var y = logcdf( 3.0 );
* // returns ~-0.203
*
* y = logcdf( 1.0 );
* // returns ~-0.358
*/
function factory( v ) {
	if ( isnan( v ) || v <= 0.0 ) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var x2;
		var p;
		var z;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x === 0.0 ) {
			return LN_HALF;
		}
		x2 = pow( x, 2.0 );
		if ( v > 2.0*x2 ) {
			z = x2 / ( v + x2 );
			p = betainc( z, 0.5, v/2.0, true, true ) / 2.0;
		} else {
			z = v / ( v + x2 );
			p = betainc( z, v/2.0, 0.5, true, false ) / 2.0;
		}
		return ( x > 0.0 ) ? log1p( -p ) : ln( p );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-half":79,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1160:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution.
*
* @module @stdlib/math/base/dists/t/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/t/logcdf' );
*
* var y = logcdf( 2.0, 0.1 );
* // returns ~-0.493
*
* y = logcdf( 1.0, 2.0 );
* // returns ~-0.237
*
* y = logcdf( -1.0, 4.0 );
* // returns ~-1.677
*
* var mylogcdf = logcdf.factory( 0.5 );
* y = mylogcdf( 3.0 );
* // returns ~-0.203
*
* y = mylogcdf( 1.0 );
* // returns ~-0.358
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":1159,"./logcdf.js":1161,"@stdlib/utils/define-read-only-property":1937}],1161:[function(require,module,exports){
'use strict';

// MODULES //

var betainc = require( '@stdlib/math/base/special/betainc' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_HALF = require( '@stdlib/constants/math/float64-ln-half' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.1 );
* // returns ~-0.493
*
* @example
* var y = logcdf( 1.0, 2.0 );
* // returns ~-0.237
*
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns ~-1.677
*
* @example
* var y = logcdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, -1.0 );
* // returns NaN
*/
function logcdf( x, v ) {
	var x2;
	var p;
	var z;
	if (
		isnan( x ) ||
		isnan( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return LN_HALF;
	}
	x2 = pow( x, 2.0 );
	if ( v > 2.0*x2 ) {
		z = x2 / ( v + x2 );
		p = betainc( z, 0.5, v/2.0, true, true ) / 2.0;
	} else {
		z = v / ( v + x2 );
		p = betainc( z, v/2.0, 0.5, true, false ) / 2.0;
	}
	return ( x > 0.0 ) ? log1p( -p ) : ln( p );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ln-half":79,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743}],1162:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var betaln = require( '@stdlib/math/base/special/betaln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Student's t distribution with `v` degrees of freedom.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 1.0 );
* var y = logpdf( 3.0 );
* // returns ~-3.442
*
* y = logpdf( 1.0 );
* // returns ~-1.839
*/
function factory( v ) {
	var exponent;
	var betaTerm;

	if ( isnan( v ) || v <= 0 ) {
		return constantFunction( NaN );
	}
	betaTerm = ln( sqrt( v ) ) + betaln( v/2.0, 0.5 );
	exponent = ( 1.0 + v ) / 2.0;
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return ( exponent * ln( v / ( v + pow( x, 2.0 ) ) ) ) - betaTerm;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1163:[function(require,module,exports){
'use strict';

/**
* Natural logarithm of the probability density function (PDF) for a Student's t distribution.
*
* @module @stdlib/math/base/dists/t/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/t/logpdf' );
*
* var y = logpdf( 3.0, 1.0 );
* // returns ~-3.442
*
* var mylogPDF = logpdf.factory( 3.0 );
* y = mylogPDF( 1.0 );
* // returns ~-1.575
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1162,"./logpdf.js":1164,"@stdlib/utils/define-read-only-property":1937}],1164:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var betaln = require( '@stdlib/math/base/special/betaln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 4.0 );
* // returns ~-1.036
*
* @example
* var y = logpdf( 2.0, 0.7 );
* // returns ~-2.841
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns ~-2.134
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function logpdf( x, v ) {
	var betaTerm;
	if (
		isnan( x ) ||
		isnan( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	betaTerm = ln( sqrt( v ) ) + betaln( v/2.0, 0.5 );
	return ( ( (1.0+v) / 2.0 ) * ln( v / ( v + pow( x, 2.0 ) ) ) ) - betaTerm;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1165:[function(require,module,exports){
'use strict';

/**
* Student's t distribution expected value.
*
* @module @stdlib/math/base/dists/t/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/t/mean' );
*
* var v = mean( 11.0 );
* // returns 0.0
*
* v = mean( 4.5 );
* // returns 0.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1166}],1166:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 0.0
* @example
* var v = mean( 2.0 );
* // returns 0.0
* @example
* var v = mean( 0.5 );
* // returns NaN
* @example
* var v = mean( -0.2 );
* // returns NaN
* @example
* var v = mean( NaN );
* // returns NaN
*/
function mean( v ) {
	if ( isnan( v ) || v <= 1.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],1167:[function(require,module,exports){
'use strict';

/**
* Student's t distribution median.
*
* @module @stdlib/math/base/dists/t/median
*
* @example
* var median = require( '@stdlib/math/base/dists/t/median' );
*
* var v = median( 11.0 );
* // returns 0.0
*
* v = median( 4.5 );
* // returns 0.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1168}],1168:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the median of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns 0.0
* @example
* var v = median( 2.0 );
* // returns 0.0
* @example
* var v = median( -0.2 );
* // returns NaN
* @example
* var v = median( NaN );
* // returns NaN
*/
function median( v ) {
	if ( isnan( v ) || v < 0.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128}],1169:[function(require,module,exports){
'use strict';

/**
* Student's t distribution mode.
*
* @module @stdlib/math/base/dists/t/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/t/mode' );
*
* var v = mode( 11.0 );
* // returns 0.0
*
* v = mode( 4.5 );
* // returns 0.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1170}],1170:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 0.0
* @example
* var v = mode( 2.0 );
* // returns 0.0
* @example
* var v = mode( -0.2 );
* // returns NaN
* @example
* var v = mode( NaN );
* // returns NaN
*/
function mode( v ) {
	if ( isnan( v ) || v < 0.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],1171:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Student's t distribution with `v` degrees of freedom.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 1.0 );
* var y = pdf( 3.0 );
* // returns ~0.032
*
* y = pdf( 1.0 );
* // returns ~0.159
*/
function factory( v ) {
	var exponent;
	var betaTerm;

	if ( isnan( v ) || v <= 0 ) {
		return constantFunction( NaN );
	}
	betaTerm = sqrt( v ) * beta( v/2.0, 0.5 );
	exponent = ( 1.0 + v ) / 2.0;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		return pow( v / ( v + pow( x, 2.0 ) ), exponent ) / betaTerm;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/beta":1360,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1172:[function(require,module,exports){
'use strict';

/**
* Student's t distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/t/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/t/pdf' );
*
* var y = pdf( 3.0, 1.0 );
* // returns ~0.032
*
* var myPDF = pdf.factory( 3.0 );
* y = myPDF( 1.0 );
* // returns ~0.207
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1171,"./pdf.js":1173,"@stdlib/utils/define-read-only-property":1937}],1173:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.355
*
* @example
* var y = pdf( 2.0, 0.7 );
* // returns ~0.058
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns ~0.139
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function pdf( x, v ) {
	var betaTerm;
	if (
		isnan( x ) ||
		isnan( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	betaTerm = sqrt( v ) * beta( v/2.0, 0.5 );
	return pow( v / ( v + pow( x, 2.0 ) ), (1.0+v) / 2.0 ) / betaTerm;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/beta":1360,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1174:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sign = require( '@stdlib/math/base/special/signum' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.5 );
* var y = quantile( 0.5 );
* // returns 0.0
*
* y = quantile( 0.8 );
* // returns ~2.513
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function factory( v ) {
	if ( isnan( v ) || v <= 0.0 ) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Student's t distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var prob;
		var xs;

		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		prob = ( p > 0.5 ) ? 1.0 - p : p;
		xs = kernelBetaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );
		return sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/kernel-betaincinv":1629,"@stdlib/math/base/special/signum":1804,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1175:[function(require,module,exports){
'use strict';

/**
* Evaluates the quantile function for a Student's t distribution.
*
* @module @stdlib/math/base/dists/t/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/t/quantile' );
*
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
*
* y = quantile( 0.1, 1.0 );
* // returns ~-3.078
*
* y = quantile( 0.5, 0.1 );
* // returns 0.0
*
* var myquantile = quantile.factory( 4.0 );
*
* y = myquantile( 0.2 );
* // returns ~-0.941
*
* y = myquantile( 0.9 );
* // returns ~1.533
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1174,"./quantile.js":1176,"@stdlib/utils/define-read-only-property":1937}],1176:[function(require,module,exports){
'use strict';

// MODULES //

var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sign = require( '@stdlib/math/base/special/signum' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a Student's t distribution with degrees of freedom `v` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
*
* @example
* var y = quantile( 0.1, 1.0 );
* // returns ~-3.078
*
* @example
* var y = quantile( 0.5, 0.1 );
* // returns 0.0
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function quantile( p, v ) {
	var prob;
	var xs;
	if (
		isnan( v ) ||
		isnan( p ) ||
		v <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	prob = ( p > 0.5 ) ? 1.0 - p : p;
	xs = kernelBetaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );
	return sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/kernel-betaincinv":1629,"@stdlib/math/base/special/signum":1804,"@stdlib/math/base/special/sqrt":1826}],1177:[function(require,module,exports){
'use strict';

/**
* Student's t distribution skewness.
*
* @module @stdlib/math/base/dists/t/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/t/skewness' );
*
* var v = skewness( 11.0 );
* // returns 0.0
*
* v = skewness( 4.5 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1178}],1178:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns 0.0
* @example
* var v = skewness( 2.0 );
* // returns 0.0
* @example
* var v = skewness( 0.5 );
* // returns NaN
* @example
* var v = skewness( -0.2 );
* // returns NaN
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function skewness( v ) {
	if ( isnan( v ) || v <= 3.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128}],1179:[function(require,module,exports){
'use strict';

/**
* Student's t distribution standard deviation.
*
* @module @stdlib/math/base/dists/t/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/t/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~1.105
*
* v = stdev( 4.5 );
* // returns ~1.342
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1180}],1180:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the standard deviation of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~1.134
* @example
* var v = stdev( 2.0 );
* // returns Infinity
* @example
* var v = stdev( 0.5 );
* // returns NaN
* @example
* var v = stdev( -0.2 );
* // returns NaN
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function stdev( v ) {
	if ( isnan( v ) || v <= 1.0 ) {
		return NaN;
	}
	if ( v <= 2.0 ) {
		return PINF;
	}
	return sqrt( v / ( v - 2.0 ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1181:[function(require,module,exports){
'use strict';

/**
* Student's t distribution variance.
*
* @module @stdlib/math/base/dists/t/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/t/variance' );
*
* var v = variance( 11.0 );
* // returns ~1.222
*
* v = variance( 4.5 );
* // returns ~1.8
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1182}],1182:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the variance of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~1.286
* @example
* var v = variance( 2.0 );
* // returns Infinity
* @example
* var v = variance( 0.5 );
* // returns NaN
* @example
* var v = variance( -0.2 );
* // returns NaN
* @example
* var v = variance( NaN );
* // returns NaN
*/
function variance( v ) {
	if ( isnan( v ) || v <= 1.0 ) {
		return NaN;
	}
	if ( v <= 2.0 ) {
		return PINF;
	}
	return v / ( v - 2.0 );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],1183:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.875
*
* @example
* var y = cdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.75
*
* @example
* var y = cdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.278
*
* @example
* var y = cdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function cdf( x, a, b, c ) {
	var denom1;
	var denom2;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( x <= a ) {
		return 0.0;
	}
	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );

	// Case: x > a
	if ( x <= c ) {
		return pow( x - a, 2.0 ) / denom1;
	}
	// Case: x > c
	if ( x < b ) {
		return 1.0 - ( pow( b - x, 2.0 ) / denom2 );
	}
	// Case: x >= b
	return 1.0;
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1184:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0, 2.0 );
* var y = cdf( 0.5 );
* // returns 0.0125
*
* y = cdf( 8.0 );
* // returns 0.95
*/
function factory( a, b, c ) {
	var denom1;
	var denom2;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return constantFunction( NaN );
	}
	if ( !( a <= c && c <= b ) ) {
		return constantFunction( NaN );
	}

	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= a ) {
			return 0.0;
		}
		// Case: x > a
		if ( x <= c ) {
			return pow( x - a, 2.0 ) / denom1;
		}
		// Case: x > c
		if ( x < b ) {
			return 1 - ( pow( b - x, 2.0 ) / denom2 );
		}
		// Case: x >= b
		return 1.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1185:[function(require,module,exports){
'use strict';

/**
* Triangular distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/triangular/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/triangular/cdf' );
*
* var y = cdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.875
*
* y = cdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.75
*
* y = cdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.278
*
* y = cdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 0.0, 10.0, 2.0 );
* y = mycdf( 0.5 );
* // returns 0.0125
*
* y = mycdf( 8.0 );
* // returns 0.95
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1183,"./factory.js":1184,"@stdlib/utils/define-read-only-property":1937}],1186:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/triangular/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/triangular/kurtosis' );
var mean = require( '@stdlib/math/base/dists/triangular/mean' );
var median = require( '@stdlib/math/base/dists/triangular/median' );
var mode = require( '@stdlib/math/base/dists/triangular/mode' );
var skewness = require( '@stdlib/math/base/dists/triangular/skewness' );
var stdev = require( '@stdlib/math/base/dists/triangular/stdev' );
var variance = require( '@stdlib/math/base/dists/triangular/variance' );
var cdf = require( '@stdlib/math/base/dists/triangular/cdf' );
var logcdf = require( '@stdlib/math/base/dists/triangular/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/triangular/logpdf' );
var mgf = require( '@stdlib/math/base/dists/triangular/mgf' );
var pdf = require( '@stdlib/math/base/dists/triangular/pdf' );
var quantile = require( '@stdlib/math/base/dists/triangular/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function triangularCDF( x ) {
	return cdf( x, this.a, this.b, this.c );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function triangularLogCDF( x ) {
	return logcdf( x, this.a, this.b, this.c );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function triangularLogPDF( x ) {
	return logpdf( x, this.a, this.b, this.c );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function triangularMGF( t ) {
	return mgf( t, this.a, this.b, this.c );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function triangularPDF( x ) {
	return pdf( x, this.a, this.b, this.c );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function triangularQuantile( p ) {
	return quantile( p, this.a, this.b, this.c );
}


// MAIN //

/**
* Triangular distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @param {number} [c=0.5] - mode
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {TypeError} `c` must be a number primitive
* @throws {RangeError} `a` must be smaller than or equal to `b` and `c`
* @throws {RangeError} `b` must be greater than or equal to `a` and `b`
* @throws {RangeError} `c` must be greater than or equal to `a` and smaller than or equal to `b`
* @returns {Triangular} distribution instance
*
* @example
* var triangular = new Triangular( 0.0, 1.0, 0.25 );
*
* var y = triangular.cdf( 0.8 );
* // returns ~0.947
*
* var mu = triangular.mean;
* // returns ~0.417
*/
function Triangular() {
	var a;
	var b;
	var c;
	if ( !(this instanceof Triangular) ) {
		if ( arguments.length === 0 ) {
			return new Triangular();
		}
		return new Triangular( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		c = arguments[ 2 ];
		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( !isNumber( c ) || isnan( c ) ) {
			throw new TypeError( 'invalid input argument. Mode `c` must be a number primitive. Value: `' + c + '`' );
		}
		if ( !( a <= c && c <= b ) ) {
			throw new RangeError( 'invalid input arguments. Parameters must satisfy `a <= c <= b`. Value: `' + a + ',' + b + ',' + c + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
		c = 0.5;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value > b || value > c ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `b` and `c`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a > value || c > value ) {
				throw new RangeError( 'invalid value. Must be greater than or equal to `a` and `c`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	Object.defineProperty( this, 'c', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return c;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a > value || b < value ) {
				throw new RangeError( 'invalid value. Must be greater than or equal to `a` and smaller than or equal to `b`. Value: `'+ value + '`' );
			}
			c = value;
		}
	});
	return this;
}

/**
* Triangular distribution differential entropy.
*
* @name entropy
* @memberof Triangular.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.entropy;
* // returns ~1.886
*/
Object.defineProperty( Triangular.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution excess kurtosis.
*
* @name kurtosis
* @memberof Triangular.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.kurtosis;
* // returns -0.6
*/
Object.defineProperty( Triangular.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution expected value.
*
* @name mean
* @memberof Triangular.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.mean;
* // returns ~8.667
*/
Object.defineProperty( Triangular.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution median.
*
* @name median
* @memberof Triangular.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.median;
* // returns ~8.899
*/
Object.defineProperty( Triangular.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution mode.
*
* @name mode
* @memberof Triangular.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.mode;
* // returns 10.0
*/
Object.defineProperty( Triangular.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution skewness.
*
* @name skewness
* @memberof Triangular.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.skewness;
* // returns ~-0.422
*/
Object.defineProperty( Triangular.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution standard deviation.
*
* @name stdev
* @memberof Triangular.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.stdev;
* // returns ~1.7
*/
Object.defineProperty( Triangular.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b, this.c );
	}
});

/**
* Triangular distribution variance.
*
* @name variance
* @memberof Triangular.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.variance;
* // returns ~2.889
*/
Object.defineProperty( Triangular.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b, this.c );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} x - input value
* @returns {Probability} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.cdf( 3.0 );
* // returns 0.5
*/
setReadOnly( Triangular.prototype, 'cdf', triangularCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.logcdf( 3.0 );
* // returns ~-0.693
*/
setReadOnly( Triangular.prototype, 'logcdf', triangularLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.logpdf( 2.4 );
* // returns ~-0.916
*/
setReadOnly( Triangular.prototype, 'logpdf', triangularLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.mgf( 0.5 );
* // returns ~4.576
*/
setReadOnly( Triangular.prototype, 'mgf', triangularMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.pdf( 2.4 );
* // returns ~0.40
*/
setReadOnly( Triangular.prototype, 'pdf', triangularPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Triangular.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Triangular.prototype, 'quantile', triangularQuantile );


// EXPORTS //

module.exports = Triangular;

},{"@stdlib/assert/is-number":40,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/triangular/cdf":1185,"@stdlib/math/base/dists/triangular/entropy":1189,"@stdlib/math/base/dists/triangular/kurtosis":1190,"@stdlib/math/base/dists/triangular/logcdf":1194,"@stdlib/math/base/dists/triangular/logpdf":1197,"@stdlib/math/base/dists/triangular/mean":1199,"@stdlib/math/base/dists/triangular/median":1201,"@stdlib/math/base/dists/triangular/mgf":1204,"@stdlib/math/base/dists/triangular/mode":1206,"@stdlib/math/base/dists/triangular/pdf":1209,"@stdlib/math/base/dists/triangular/quantile":1212,"@stdlib/math/base/dists/triangular/skewness":1214,"@stdlib/math/base/dists/triangular/stdev":1216,"@stdlib/math/base/dists/triangular/variance":1218,"@stdlib/utils/define-read-only-property":1937}],1187:[function(require,module,exports){
'use strict';

/**
* Triangular distribution constructor.
*
* @module @stdlib/math/base/dists/triangular/ctor
*
* @example
* var Triangular = require( '@stdlib/math/base/dists/triangular/ctor' );
*
* var triangular = new Triangular( 0.0, 1.0, 0.5 );
*
* var y = triangular.cdf( 0.8 );
* // returns 0.92
*
* var mu = triangular.mean;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1186}],1188:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} entropy
*
* @example
* var v = entropy( 0.0, 1.0, 0.5 );
* // returns ~-0.193
* @example
* var v = entropy( 4.0, 12.0, 9.0 );
* // returns ~1.886
* @example
* var v = entropy( -4.0, 4.0, -1.0 );
* // returns ~1.886
* @example
* var v = entropy( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = entropy( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = entropy( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = entropy( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = entropy( 0.0, 4.0, NaN );
* // returns NaN
*/
function entropy( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return 0.5 + ln( 0.5 * ( b-a ) );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1189:[function(require,module,exports){
'use strict';

/**
* Triangular distribution differential entropy.
*
* @module @stdlib/math/base/dists/triangular/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/triangular/entropy' );
*
* var v = entropy( 0.0, 1.0, 0.5 );
* // returns ~-0.193
*
* v = entropy( 4.0, 12.0, 5.0 );
* // returns ~1.886
*
* v = entropy( 2.0, 8.0, 7.0 );
* // returns ~1.599
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1188}],1190:[function(require,module,exports){
'use strict';

/**
* Triangular distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/triangular/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/triangular/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0, 0.5 );
* // returns -0.6
*
* v = kurtosis( 4.0, 12.0, 5.0 );
* // returns -0.6
*
* v = kurtosis( 2.0, 8.0, 7.0 );
* // returns -0.6
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1191}],1191:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0, 0.5 );
* // returns -0.6
* @example
* var v = kurtosis( 4.0, 12.0, 9.0 );
* // returns -0.6
* @example
* var v = kurtosis( -4.0, 4.0, -1.0 );
* // returns -0.6
* @example
* var v = kurtosis( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = kurtosis( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = kurtosis( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = kurtosis( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = kurtosis( 0.0, 4.0, NaN );
* // returns NaN
*/
function kurtosis( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return -0.6;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],1192:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace triangular
*/
var triangular = {};

/**
* @name cdf
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/cdf}
*/
setReadOnly( triangular, 'cdf', require( '@stdlib/math/base/dists/triangular/cdf' ) );

/**
* @name entropy
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/entropy}
*/
setReadOnly( triangular, 'entropy', require( '@stdlib/math/base/dists/triangular/entropy' ) );

/**
* @name kurtosis
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/kurtosis}
*/
setReadOnly( triangular, 'kurtosis', require( '@stdlib/math/base/dists/triangular/kurtosis' ) );

/**
* @name logcdf
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/logcdf}
*/
setReadOnly( triangular, 'logcdf', require( '@stdlib/math/base/dists/triangular/logcdf' ) );

/**
* @name logpdf
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/logpdf}
*/
setReadOnly( triangular, 'logpdf', require( '@stdlib/math/base/dists/triangular/logpdf' ) );

/**
* @name mean
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/mean}
*/
setReadOnly( triangular, 'mean', require( '@stdlib/math/base/dists/triangular/mean' ) );

/**
* @name median
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/median}
*/
setReadOnly( triangular, 'median', require( '@stdlib/math/base/dists/triangular/median' ) );

/**
* @name mgf
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/mgf}
*/
setReadOnly( triangular, 'mgf', require( '@stdlib/math/base/dists/triangular/mgf' ) );

/**
* @name mode
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/mode}
*/
setReadOnly( triangular, 'mode', require( '@stdlib/math/base/dists/triangular/mode' ) );

/**
* @name pdf
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/pdf}
*/
setReadOnly( triangular, 'pdf', require( '@stdlib/math/base/dists/triangular/pdf' ) );

/**
* @name quantile
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/quantile}
*/
setReadOnly( triangular, 'quantile', require( '@stdlib/math/base/dists/triangular/quantile' ) );

/**
* @name skewness
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/skewness}
*/
setReadOnly( triangular, 'skewness', require( '@stdlib/math/base/dists/triangular/skewness' ) );

/**
* @name stdev
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/stdev}
*/
setReadOnly( triangular, 'stdev', require( '@stdlib/math/base/dists/triangular/stdev' ) );

/**
* @name Triangular
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/ctor}
*/
setReadOnly( triangular, 'Triangular', require( '@stdlib/math/base/dists/triangular/ctor' ) );

/**
* @name variance
* @memberof triangular
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/triangular/variance}
*/
setReadOnly( triangular, 'variance', require( '@stdlib/math/base/dists/triangular/variance' ) );


// EXPORTS //

module.exports = triangular;

},{"@stdlib/math/base/dists/triangular/cdf":1185,"@stdlib/math/base/dists/triangular/ctor":1187,"@stdlib/math/base/dists/triangular/entropy":1189,"@stdlib/math/base/dists/triangular/kurtosis":1190,"@stdlib/math/base/dists/triangular/logcdf":1194,"@stdlib/math/base/dists/triangular/logpdf":1197,"@stdlib/math/base/dists/triangular/mean":1199,"@stdlib/math/base/dists/triangular/median":1201,"@stdlib/math/base/dists/triangular/mgf":1204,"@stdlib/math/base/dists/triangular/mode":1206,"@stdlib/math/base/dists/triangular/pdf":1209,"@stdlib/math/base/dists/triangular/quantile":1212,"@stdlib/math/base/dists/triangular/skewness":1214,"@stdlib/math/base/dists/triangular/stdev":1216,"@stdlib/math/base/dists/triangular/variance":1218,"@stdlib/utils/define-read-only-property":1937}],1193:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 10.0, 2.0 );
* var y = logcdf( 0.5 );
* // returns ~-4.382
*
* y = logcdf( 8.0 );
* // returns ~-0.051
*/
function factory( a, b, c ) {
	var denom1;
	var denom2;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c )
	) {
		return constantFunction( NaN );
	}
	if ( !( a <= c && c <= b ) ) {
		return constantFunction( NaN );
	}

	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x <= a ) {
			return NINF;
		}
		// Case: x > a
		if ( x <= c ) {
			return ( 2.0 * ln( x - a ) ) - ln( denom1 );
		}
		// Case: x > c
		if ( x < b ) {
			return ln( 1.0 - ( pow( b - x, 2.0 ) / denom2 ) );
		}
		// Case: x >= b
		return 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1194:[function(require,module,exports){
'use strict';

/**
* Triangular distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/triangular/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/triangular/logcdf' );
*
* var y = logcdf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~-0.134
*
* y = logcdf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~-0.288
*
* y = logcdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~-1.281
*
* y = logcdf( -2.0, -1.0, 1.0, 0.0 );
* // returns -Infinity
*
* var mylogcdf = logcdf.factory( 0.0, 10.0, 2.0 );
* y = mylogcdf( 0.5 );
* // returns ~-4.382
*
* y = mylogcdf( 8.0 );
* // returns ~-0.051
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":1193,"./logcdf.js":1195,"@stdlib/utils/define-read-only-property":1937}],1195:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~-0.134
*
* @example
* var y = logcdf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~-0.288
*
* @example
* var y = logcdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~-1.281
*
* @example
* var y = logcdf( -2.0, -1.0, 1.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function logcdf( x, a, b, c ) {
	var denom1;
	var denom2;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( x <= a ) {
		return NINF;
	}
	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );

	// Case: x > a
	if ( x <= c ) {
		return ( 2.0 * ln( x - a ) ) - ln( denom1 );
	}
	// Case: x > c
	if ( x < b ) {
		return ln( 1.0 - ( pow( b - x, 2.0 ) / denom2 ) );
	}
	// Case: x >= b
	return 0.0;
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],1196:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 10.0, 5.0 );
* var y = logpdf( 2.0 );
* // returns ~-2.526
*
* y = logpdf( 12.0 );
* // returns -Infinity
*/
function factory( a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return constantFunction( NaN );
	}

	denom1 = ln( b - a ) + ln( c - a );
	denom2 = ln( b - a );
	denom3 = ln( b - a ) + ln( b - c );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 12.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return NINF;
		}
		// Case: x >= a
		if ( x < c ) {
			return LN2 + ln( x - a ) - denom1;
		}
		if ( x === c ) {
			return LN2 - denom2;
		}
		// Case: x > c
		if ( x <= b ) {
			return LN2 + ln( b - x ) - denom3;
		}
		// Case: x > b
		return NINF;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],1197:[function(require,module,exports){
'use strict';

/**
* Triangular distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/triangular/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/triangular/logpdf' );
*
* var y = logpdf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~-0.693
*
* y = logpdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.0
*
* y = logpdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~-2.89
*
* var mylogpdf = logpdf.factory( 0.0, 10.0, 5.0 );
* y = mylogpdf( 2.0 );
* // returns ~-2.526
*
* y = mylogpdf( 12.0 );
* // returns -Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1196,"./logpdf.js":1198,"@stdlib/utils/define-read-only-property":1937}],1198:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~-0.693
*
* @example
* var y = logpdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = logpdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~-2.89
*
* @example
* var y = logpdf( -2.0, -1.0, 1.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function logpdf( x, a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( x < a ) {
		return NINF;
	}
	denom1 = ln( b - a ) + ln( c - a );
	denom2 = ln( b - a );
	denom3 = ln( b - a ) + ln( b - c );

	// Case: x >= a
	if ( x < c ) {
		return LN2 + ln( x - a ) - denom1;
	}
	if ( x === c ) {
		return LN2 - denom2;
	}
	// Case: x > c
	if ( x <= b ) {
		return LN2 + ln( b - x ) - denom3;
	}
	// Case: x > b
	return NINF;
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1199:[function(require,module,exports){
'use strict';

/**
* Triangular distribution expected value.
*
* @module @stdlib/math/base/dists/triangular/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/triangular/mean' );
*
* var v = mean( 0.0, 1.0, 0.5 );
* // returns ~0.5
*
* v = mean( 4.0, 12.0, 5.0 );
* // returns 7.0
*
* v = mean( 2.0, 8.0, 7.0 );
* // returns ~5.667
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1200}],1200:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the expected value of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0, 0.5 );
* // returns ~0.5
* @example
* var v = mean( 4.0, 12.0, 9.0 );
* // returns ~8.333
* @example
* var v = mean( -4.0, 4.0, -1.0 );
* // returns ~-0.333
* @example
* var v = mean( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = mean( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = mean( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = mean( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = mean( 0.0, 4.0, NaN );
* // returns NaN
*/
function mean( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return ( a + b + c ) / 3.0;
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128}],1201:[function(require,module,exports){
'use strict';

/**
* Triangular distribution median.
*
* @module @stdlib/math/base/dists/triangular/median
*
* @example
* var median = require( '@stdlib/math/base/dists/triangular/median' );
*
* var v = median( 0.0, 1.0, 0.5 );
* // returns 0.5
*
* v = median( 4.0, 12.0, 5.0 );
* // returns ~6.708
*
* v = median( 2.0, 8.0, 7.0 );
* // returns ~5.873
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1202}],1202:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the median of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0, 0.5 );
* // returns 0.5
* @example
* var v = median( 4.0, 12.0, 9.0 );
* // returns ~8.472
* @example
* var v = median( -4.0, 4.0, -1.0 );
* // returns ~-0.472
* @example
* var v = median( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = median( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = median( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = median( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = median( 0.0, 4.0, NaN );
* // returns NaN
*/
function median( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	if ( c >= ( a+b ) / 2.0 ) {
		return a + sqrt( 0.5 * ( b-a ) * ( c-a ) );
	}
	return b - sqrt( 0.5 * ( b-a ) * ( b-c ) );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1203:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a triangular distribution with lower limit `a`, upper limit `b`, and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.0, 2.0, 1.0 );
* var y = mgf( -1.0 );
* // returns ~0.3996
*
* y = mgf( 2.0 );
* // returns ~10.205
*/
function factory( a, b, c ) {
	var bmc;
	var bma;
	var cma;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return constantFunction( NaN );
	}
	bmc = b - c;
	bma = b - a;
	cma = c - a;
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a triangular distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var ret;

		if ( isnan( t ) ) {
			return NaN;
		}
		if ( t === 0.0 ) {
			return 1.0;
		}
		ret = (bmc * exp( a * t )) - (bma * exp( c * t ));
		ret += cma * exp( b * t );
		ret *= 2.0;
		ret /= bma * cma * bmc * pow( t, 2.0 );
		return ret;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1204:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a triangular distribution.
*
* @module @stdlib/math/base/dists/triangular/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/triangular/mgf' );
*
* var y = mgf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~1.021
*
* y = mgf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~1.111
*
* y = mgf( -0.3, -20.0, 0.0, -2.0 );
* // returns ~24.334
*
* y = mgf( -2.0, -1.0, 1.0, 0.0 );
* // returns ~1.381
*
* var mymgf = mgf.factory( 0.0, 2.0, 1.0 );
* y = mymgf( -1.0 );
* // returns ~0.3996
*
* y = mymgf( 2.0 );
* // returns ~10.205
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1203,"./mgf.js":1205,"@stdlib/utils/define-read-only-property":1937}],1205:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a triangular distribution with lower limit `a`, upper limit `b`, and mode `c` at a value `t`.
*
* @param {number} t - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~1.021
*
* @example
* var y = mgf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~1.111
*
* @example
* var y = mgf( -0.3, -20.0, 0.0, -2.0 );
* // returns ~24.334
*
* @example
* var y = mgf( -2.0, -1.0, 1.0, 0.0 );
* // returns ~1.381
*
* @example
* var y = mgf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function mgf( t, a, b, c ) {
	var bmc;
	var bma;
	var cma;
	var ret;

	if (
		isnan( t ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( t === 0.0 ) {
		return 1.0;
	}
	bmc = b - c;
	bma = b - a;
	cma = c - a;
	ret = (bmc * exp( a * t )) - (bma * exp( c * t ));
	ret += cma * exp( b * t );
	ret *= 2.0;
	ret /= bma * cma * bmc * pow( t, 2.0 );
	return ret;
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],1206:[function(require,module,exports){
'use strict';

/**
* Triangular distribution mode.
*
* @module @stdlib/math/base/dists/triangular/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/triangular/mode' );
*
* var v = mode( 0.0, 1.0, 0.5 );
* // returns 0.5
*
* v = mode( 4.0, 12.0, 5.0 );
* // returns 5.0
*
* v = mode( 2.0, 8.0, 7.0 );
* // returns 7.0
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1207}],1207:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the mode of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} mode
*
* @example
* var v = mode( 0.0, 1.0, 0.5 );
* // returns 0.5
* @example
* var v = mode( 4.0, 12.0, 9.0 );
* // returns 9.0
* @example
* var v = mode( -4.0, 4.0, -1.0 );
* // returns -1.0
* @example
* var v = mode( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = mode( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = mode( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = mode( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = mode( 0.0, 4.0, NaN );
* // returns NaN
*/
function mode( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return c;
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128}],1208:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0, 5.0 );
* var y = pdf( 2.0 );
* // returns 0.08
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function factory( a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return constantFunction( NaN );
	}

	denom1 = ( b - a ) * ( c - a );
	denom2 = b - a;
	denom3 = ( b - a ) * ( b - c );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 12.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		// Case: x >= a
		if ( x < c ) {
			return 2.0 * ( x - a ) / denom1;
		}
		if ( x === c ) {
			return 2.0 / denom2;
		}
		// Case: x > c
		if ( x <= b ) {
			return 2.0 * ( b - x ) / denom3;
		}
		// Case: x > b
		return 0.0;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],1209:[function(require,module,exports){
'use strict';

/**
* Triangular distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/triangular/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/triangular/pdf' );
*
* var y = pdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.5
*
* y = pdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 1.0
*
* y = pdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.056
*
* var mypdf = pdf.factory( 0.0, 10.0, 5.0 );
* y = mypdf( 2.0 );
* // returns 0.08
*
* y = mypdf( 12.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1208,"./pdf.js":1210,"@stdlib/utils/define-read-only-property":1937}],1210:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.5
*
* @example
* var y = pdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 1.0
*
* @example
* var y = pdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.278
*
* @example
* var y = pdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function pdf( x, a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	denom1 = ( b - a ) * ( c - a );
	denom2 = b - a;
	denom3 = ( b - a ) * ( b - c );

	// Case: x >= a
	if ( x < c ) {
		return 2.0 * ( x - a ) / denom1;
	}
	if ( x === c ) {
		return 2.0 / denom2;
	}
	// Case: x > c
	if ( x <= b ) {
		return 2.0 * ( b - x ) / denom3;
	}
	// Case: x > b
	return 0.0;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128}],1211:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a triangular distribution with lower limit `a`, upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0, 2.5 );
* var y = quantile( 0.4 );
* // returns ~2.658
*
* y = quantile( 0.8 );
* // returns ~3.225
*/
function factory( a, b, c ) {
	var pInflection;
	var fact1;
	var fact2;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b
	) {
		return constantFunction( NaN );
	}

	pInflection = ( c - a ) / ( b - a );
	fact1 = ( b - a ) * ( c - a);
	fact2 = ( b - a ) * ( b - c );
	return quantile;

	/**
	* Evaluates the quantile function for a triangular distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p < pInflection ) {
			return a + sqrt( fact1 * p );
		}
		if ( p > pInflection ) {
			return b - sqrt( fact2 * ( 1.0 - p ) );
		}
		// Case: p = pInflection
		return c;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1212:[function(require,module,exports){
'use strict';

/**
* Triangular distribution quantile function.
*
* @module @stdlib/math/base/dists/triangular/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/triangular/quantile' );
*
* var y = quantile( 0.9, -1.0, 1.0, 0.0 );
* // returns ~0.553
*
* y = quantile( 0.1, -1.0, 1.0, 0.5 );
* // returns ~-0.452
*
* y = quantile( 0.1, -20.0, 0.0, -2.0 );
* // returns -14.0
*
* y = quantile( 0.8, 0.0, 20.0, 0.0 );
* // returns ~11.056
*
* var myquantile = quantile.factory( 2.0, 4.0, 2.5 );
* y = myquantile( 0.4 );
* // returns ~2.658
*
* y = myquantile( 0.8 );
* // returns ~3.225
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1211,"./quantile.js":1213,"@stdlib/utils/define-read-only-property":1937}],1213:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Evaluates the quantile function for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.9, -1.0, 1.0, 0.0 );
* // returns ~0.553
*
* @example
* var y = quantile( 0.1, -1.0, 1.0, 0.5 );
* // returns ~-0.452
*
* @example
* var y = quantile( 0.1, -20.0, 0.0, -2.0 );
* // returns -14.0
*
* @example
* var y = quantile( 0.8, 0.0, 20.0, 0.0 );
* // returns ~11.056
*
* @example
* var y = quantile( 1.1, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.1, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function quantile( p, a, b, c ) {
	var pInflection;
	var fact1;
	var fact2;

	if (
		isnan( p ) ||
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		a > c ||
		c > b ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	pInflection = ( c - a ) / ( b - a );
	fact1 = ( b - a ) * ( c - a);
	fact2 = ( b - a ) * ( b - c );
	if ( p < pInflection ) {
		return a + sqrt( fact1 * p );
	}
	if ( p > pInflection ) {
		return b - sqrt( fact2 * ( 1.0 - p ) );
	}
	// Case: p = pInflection
	return c;
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1214:[function(require,module,exports){
'use strict';

/**
* Triangular distribution skewness.
*
* @module @stdlib/math/base/dists/triangular/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/triangular/skewness' );
*
* var v = skewness( 0.0, 1.0, 0.5 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0, 5.0 );
* // returns ~0.532
*
* v = skewness( 2.0, 8.0, 7.0 );
* // returns ~-0.505
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1215}],1215:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );


// MAIN //

/**
* Returns the skewness of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0, 0.5 );
* // returns 0.0
* @example
* var v = skewness( 4.0, 12.0, 9.0 );
* // returns ~-0.236
* @example
* var v = skewness( -4.0, 4.0, -1.0 );
* // returns ~0.236
* @example
* var v = skewness( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = skewness( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = skewness( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = skewness( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = skewness( 0.0, 4.0, NaN );
* // returns NaN
*/
function skewness( a, b, c ) {
	var out;
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	out = SQRT2 * ( a + b - (2*c) ) * ( (2*a) - b - c ) * ( a - (2*b) + c );
	out /= 5.0 * pow( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c), 1.5 );
	return out;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1216:[function(require,module,exports){
'use strict';

/**
* Triangular distribution standard deviation.
*
* @module @stdlib/math/base/dists/triangular/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/triangular/stdev' );
*
* var v = stdev( 0.0, 1.0, 0.5 );
* // returns ~0.205
*
* v = stdev( 4.0, 12.0, 5.0 );
* // returns ~1.78
*
* v = stdev( 2.0, 8.0, 7.0 );
* // returns ~1.312
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1217}],1217:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0, 0.5 );
* // returns ~0.205
* @example
* var v = stdev( 4.0, 12.0, 9.0 );
* // returns ~1.65
* @example
* var v = stdev( -4.0, 4.0, -1.0 );
* // returns ~1.65
* @example
* var v = stdev( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = stdev( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = stdev( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = stdev( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = stdev( 0.0, 4.0, NaN );
* // returns NaN
*/
function stdev( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return sqrt( ( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c) ) / 18.0 );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1218:[function(require,module,exports){
'use strict';

/**
* Triangular distribution variance.
*
* @module @stdlib/math/base/dists/triangular/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/triangular/variance' );
*
* var v = variance( 0.0, 1.0, 0.5 );
* // returns ~0.042
*
* v = variance( 4.0, 12.0, 5.0 );
* // returns ~3.167
*
* v = variance( 2.0, 8.0, 7.0 );
* // returns ~1.722
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1219}],1219:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the variance of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.0, 1.0, 0.5 );
* // returns ~0.042
* @example
* var v = variance( 4.0, 12.0, 9.0 );
* // returns ~2.722
* @example
* var v = variance( -4.0, 4.0, -1.0 );
* // returns ~2.722
* @example
* var v = variance( 1.0, -0.1, 0.5 );
* // returns NaN
* @example
* var v = variance( 0.0, 1.0, 2.0 );
* // returns NaN
* @example
* var v = variance( NaN, 4.0, 2.0 );
* // returns NaN
* @example
* var v = variance( 0.0, NaN, 2.0 );
* // returns NaN
* @example
* var v = variance( 0.0, 4.0, NaN );
* // returns NaN
*/
function variance( a, b, c ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return ( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c) ) / 18.0;
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128}],1220:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace truncatedNormal
*/
var truncatedNormal = {};

/**
* @name pdf
* @memberof truncatedNormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/truncated-normal/pdf}
*/
setReadOnly( truncatedNormal, 'pdf', require( '@stdlib/math/base/dists/truncated-normal/pdf' ) );


// EXPORTS //

module.exports = truncatedNormal;

},{"@stdlib/math/base/dists/truncated-normal/pdf":1222,"@stdlib/utils/define-read-only-property":1937}],1221:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var normalCDF = require( '@stdlib/math/base/dists/normal/cdf' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, mean `mu` and standard deviation `sigma`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} PDF
*/
function factory( a, b, mu, sigma ) {
	var s2x2;
	var A;
	var B;
	var C;

	if (
		isnan( a ) ||
		isnan( b ) ||
		isnan( mu ) ||
		isnan( sigma ) ||
		sigma <= 0.0 ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	s2x2 = 2.0 * pow( sigma, 2.0 );
	A = 1.0 / ( sqrt( s2x2 * PI ) );
	B = -1.0 / ( s2x2 );
	C = normalCDF( (b-mu)/sigma ) - normalCDF( (a-mu)/sigma );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a truncated normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return 0.0;
		}
		return A * exp( B * pow( x - mu, 2.0 ) ) / C;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/normal/cdf":1013,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/utils/constant-function":1933}],1222:[function(require,module,exports){
'use strict';

/**
* Truncated normal distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/truncated-normal/pdf
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1221,"./pdf.js":1223,"@stdlib/utils/define-read-only-property":1937}],1223:[function(require,module,exports){
'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var normalCDF = require( '@stdlib/math/base/dists/normal/cdf' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*/
function pdf( x, a, b, mu, sigma ) {
	var s2x2;
	var A;
	var B;
	var C;

	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		sigma <= 0.0 ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	s2x2 = 2.0 * pow( sigma, 2.0 );
	A = 1.0 / ( sqrt( s2x2 * PI ) );
	B = -1.0 / ( s2x2 );
	C = normalCDF( (b-mu)/sigma ) - normalCDF( (a-mu)/sigma );
	return A * exp( B * pow( x - mu, 2.0 ) ) / C;
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/normal/cdf":1013,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1224:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns 0.9
*
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns 0.25
*
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function cdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	if ( x >= b ) {
		return 1.0;
	}
	return ( x - a ) / ( b - a );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128}],1225:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns 0.05
*
* y = cdf( 8.0 );
* // returns 0.8
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		if ( x >= b ) {
			return 1.0;
		}
		return ( x - a ) / ( b - a );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],1226:[function(require,module,exports){
'use strict';

/**
* Uniform distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/uniform/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/uniform/cdf' );
*
* var y = cdf( 5.0, 0.0, 4.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 0.0, 10.0 );
* y = mycdf( 0.5 );
* // returns 0.05
*
* y = mycdf( 8.0 );
* // returns 0.8
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1224,"./factory.js":1225,"@stdlib/utils/define-read-only-property":1937}],1227:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var entropy = require( '@stdlib/math/base/dists/uniform/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/uniform/kurtosis' );
var mean = require( '@stdlib/math/base/dists/uniform/mean' );
var median = require( '@stdlib/math/base/dists/uniform/median' );
var skewness = require( '@stdlib/math/base/dists/uniform/skewness' );
var stdev = require( '@stdlib/math/base/dists/uniform/stdev' );
var variance = require( '@stdlib/math/base/dists/uniform/variance' );
var cdf = require( '@stdlib/math/base/dists/uniform/cdf' );
var logcdf = require( '@stdlib/math/base/dists/uniform/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/uniform/logpdf' );
var mgf = require( '@stdlib/math/base/dists/uniform/mgf' );
var pdf = require( '@stdlib/math/base/dists/uniform/pdf' );
var quantile = require( '@stdlib/math/base/dists/uniform/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function uniformCDF( x ) {
	return cdf( x, this.a, this.b );
}

/**
* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated logCDF
*/
function uniformLogCDF( x ) {
	return logcdf( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function uniformLogPDF( x ) {
	return logpdf( x, this.a, this.b );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function uniformMGF( t ) {
	return mgf( t, this.a, this.b );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function uniformPDF( x ) {
	return pdf( x, this.a, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function uniformQuantile( p ) {
	return quantile( p, this.a, this.b );
}


// MAIN //

/**
* Uniform distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {RangeError} `a` must be smaller than `b`
* @returns {Uniform} distribution instance
*
* @example
* var uniform = new Uniform( 0.0, 1.0 );
*
* var y = uniform.cdf( 0.8 );
* // returns ~0.705
*
* var mu = uniform.mean;
* // returns 0.5
*/
function Uniform() {
	var a;
	var b;
	if ( !(this instanceof Uniform) ) {
		if ( arguments.length === 0 ) {
			return new Uniform();
		}
		return new Uniform( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !isNumber( a ) || isnan( a ) ) {
			throw new TypeError( 'invalid input argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !isNumber( b ) || isnan( b ) ) {
			throw new TypeError( 'invalid input argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( a >= b ) {
			throw new RangeError( 'invalid input arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
	}
	Object.defineProperty( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value >= b ) {
				throw new RangeError( 'invalid value. Must be smaller than `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	Object.defineProperty( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !isNumber( value ) || isnan( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a >= value ) {
				throw new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Uniform distribution differential entropy.
*
* @name entropy
* @memberof Uniform.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.entropy;
* // returns ~1.838
*/
Object.defineProperty( Uniform.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.a, this.b );
	}
});

/**
* Uniform distribution excess kurtosis.
*
* @name kurtosis
* @memberof Uniform.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.kurtosis;
* // returns -1.5
*/
Object.defineProperty( Uniform.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.a, this.b );
	}
});

/**
* Uniform distribution expected value.
*
* @name mean
* @memberof Uniform.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.mean;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.a, this.b );
	}
});

/**
* Uniform distribution median.
*
* @name median
* @memberof Uniform.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.median;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.a, this.b );
	}
});

/**
* Uniform distribution skewness.
*
* @name skewness
* @memberof Uniform.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.skewness;
* // returns 0.0
*/
Object.defineProperty( Uniform.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.a, this.b );
	}
});

/**
* Uniform distribution standard deviation.
*
* @name stdev
* @memberof Uniform.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.stdev;
* // returns ~2.828
*/
Object.defineProperty( Uniform.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.a, this.b );
	}
});

/**
* Uniform distribution variance.
*
* @name variance
* @memberof Uniform.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.variance;
* // returns 8.0
*/
Object.defineProperty( Uniform.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.a, this.b );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.cdf( 3.0 );
* // returns ~0.5
*/
setReadOnly( Uniform.prototype, 'cdf', uniformCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.logcdf( 2.5 );
* // returns ~-0.922
*/
setReadOnly( Uniform.prototype, 'logcdf', uniformLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.logpdf( 2.5 );
* // returns ~-0.922
*/
setReadOnly( Uniform.prototype, 'logpdf', uniformLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.mgf( 0.5 );
* // returns ~0.813
*/
setReadOnly( Uniform.prototype, 'mgf', uniformMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.pdf( 2.4 );
* // returns ~0.398
*/
setReadOnly( Uniform.prototype, 'pdf', uniformPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Uniform.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.quantile( 0.5 );
* // returns 3.0
*/
setReadOnly( Uniform.prototype, 'quantile', uniformQuantile );


// EXPORTS //

module.exports = Uniform;

},{"@stdlib/assert/is-number":40,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/uniform/cdf":1226,"@stdlib/math/base/dists/uniform/entropy":1230,"@stdlib/math/base/dists/uniform/kurtosis":1231,"@stdlib/math/base/dists/uniform/logcdf":1235,"@stdlib/math/base/dists/uniform/logpdf":1238,"@stdlib/math/base/dists/uniform/mean":1240,"@stdlib/math/base/dists/uniform/median":1242,"@stdlib/math/base/dists/uniform/mgf":1245,"@stdlib/math/base/dists/uniform/pdf":1248,"@stdlib/math/base/dists/uniform/quantile":1251,"@stdlib/math/base/dists/uniform/skewness":1253,"@stdlib/math/base/dists/uniform/stdev":1255,"@stdlib/math/base/dists/uniform/variance":1257,"@stdlib/utils/define-read-only-property":1937}],1228:[function(require,module,exports){
'use strict';

/**
* Uniform distribution constructor.
*
* @module @stdlib/math/base/dists/uniform/ctor
*
* @example
* var Uniform = require( '@stdlib/math/base/dists/uniform/ctor' );
*
* var uniform = new Uniform( 0.0, 1.0 );
*
* var y = uniform.cdf( 0.8 );
* // returns 0.8
*
* var mu = uniform.mean;
* // returns 0.5
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1227}],1229:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Returns the differential entropy of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} differential entropy
*
* @example
* var v = entropy( 0.0, 1.0 );
* // returns 0.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.079
* @example
* var v = entropy( -4.0, 4.0 );
* // returns ~2.079
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return ln( b-a );
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/math/base/special/ln":1679}],1230:[function(require,module,exports){
'use strict';

/**
* Uniform distribution differential entropy.
*
* @module @stdlib/math/base/dists/uniform/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/uniform/entropy' );
*
* var v = entropy( 0.0, 1.0 );
* // returns 0.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.079
*
* v = entropy( 2.0, 8.0 );
* // returns ~1.792
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1229}],1231:[function(require,module,exports){
'use strict';

/**
* Uniform distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/uniform/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/uniform/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.2
*
* v = kurtosis( 4.0, 12.0 );
* // returns -1.2
*
* v = kurtosis( 2.0, 8.0 );
* // returns -1.2
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1232}],1232:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the excess kurtosis of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.2
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns -1.2
* @example
* var v = kurtosis( -4.0, 4.0 );
* // returns -1.2
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return -1.2;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128}],1233:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace uniform
*/
var uniform = {};

/**
* @name cdf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/cdf}
*/
setReadOnly( uniform, 'cdf', require( '@stdlib/math/base/dists/uniform/cdf' ) );

/**
* @name entropy
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/entropy}
*/
setReadOnly( uniform, 'entropy', require( '@stdlib/math/base/dists/uniform/entropy' ) );

/**
* @name kurtosis
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/kurtosis}
*/
setReadOnly( uniform, 'kurtosis', require( '@stdlib/math/base/dists/uniform/kurtosis' ) );

/**
* @name logcdf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/logcdf}
*/
setReadOnly( uniform, 'logcdf', require( '@stdlib/math/base/dists/uniform/logcdf' ) );

/**
* @name logpdf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/logpdf}
*/
setReadOnly( uniform, 'logpdf', require( '@stdlib/math/base/dists/uniform/logpdf' ) );

/**
* @name mean
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/mean}
*/
setReadOnly( uniform, 'mean', require( '@stdlib/math/base/dists/uniform/mean' ) );

/**
* @name median
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/median}
*/
setReadOnly( uniform, 'median', require( '@stdlib/math/base/dists/uniform/median' ) );

/**
* @name mgf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/mgf}
*/
setReadOnly( uniform, 'mgf', require( '@stdlib/math/base/dists/uniform/mgf' ) );

/**
* @name pdf
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/pdf}
*/
setReadOnly( uniform, 'pdf', require( '@stdlib/math/base/dists/uniform/pdf' ) );

/**
* @name quantile
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/quantile}
*/
setReadOnly( uniform, 'quantile', require( '@stdlib/math/base/dists/uniform/quantile' ) );

/**
* @name skewness
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/skewness}
*/
setReadOnly( uniform, 'skewness', require( '@stdlib/math/base/dists/uniform/skewness' ) );

/**
* @name stdev
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/stdev}
*/
setReadOnly( uniform, 'stdev', require( '@stdlib/math/base/dists/uniform/stdev' ) );

/**
* @name Uniform
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/ctor}
*/
setReadOnly( uniform, 'Uniform', require( '@stdlib/math/base/dists/uniform/ctor' ) );

/**
* @name variance
* @memberof uniform
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/uniform/variance}
*/
setReadOnly( uniform, 'variance', require( '@stdlib/math/base/dists/uniform/variance' ) );


// EXPORTS //

module.exports = uniform;

},{"@stdlib/math/base/dists/uniform/cdf":1226,"@stdlib/math/base/dists/uniform/ctor":1228,"@stdlib/math/base/dists/uniform/entropy":1230,"@stdlib/math/base/dists/uniform/kurtosis":1231,"@stdlib/math/base/dists/uniform/logcdf":1235,"@stdlib/math/base/dists/uniform/logpdf":1238,"@stdlib/math/base/dists/uniform/mean":1240,"@stdlib/math/base/dists/uniform/median":1242,"@stdlib/math/base/dists/uniform/mgf":1245,"@stdlib/math/base/dists/uniform/pdf":1248,"@stdlib/math/base/dists/uniform/quantile":1251,"@stdlib/math/base/dists/uniform/skewness":1253,"@stdlib/math/base/dists/uniform/stdev":1255,"@stdlib/math/base/dists/uniform/variance":1257,"@stdlib/utils/define-read-only-property":1937}],1234:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 10.0 );
* var y = logcdf( 0.5 );
* // returns ~-2.996
*
* y = logcdf( 8.0 );
* // returns ~-0.223
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return NINF;
		}
		if ( x >= b ) {
			return 0.0;
		}
		return ln( ( x - a ) / ( b - a ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],1235:[function(require,module,exports){
'use strict';

/**
* Uniform distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/uniform/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/uniform/logcdf' );
*
* var y = logcdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* var mylogcdf = logcdf.factory( 0.0, 10.0 );
* y = mylogcdf( 0.5 );
* // returns ~-2.996
*
* y = mylogcdf( 8.0 );
* // returns ~-0.223
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":1234,"./logcdf.js":1236,"@stdlib/utils/define-read-only-property":1937}],1236:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 9.0, 0.0, 10.0 );
* // returns ~-0.105
*
* @example
* var y = logcdf( 0.5, 0.0, 2.0 );
* // returns ~-1.386
*
* @example
* var y = logcdf( +Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = logcdf( -Infinity, 2.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function logcdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return NINF;
	}
	if ( x >= b ) {
		return 0.0;
	}
	return ln( ( x - a ) / ( b - a ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1237:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 10.0 );
* var y = logpdf( 2.0 );
* // returns ~-2.303
*
* y = logpdf( 12.0 );
* // returns -Infinity
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return NINF;
		}
		return -ln( b - a );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/utils/constant-function":1933}],1238:[function(require,module,exports){
'use strict';

/**
* Uniform distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/uniform/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/uniform/logpdf' );
*
* var y = logpdf( 3.0, 2.0, 6.0 );
* // returns ~-1.386
*
* var mylogPDF = logpdf.factory( 6.0, 7.0 );
* y = mylogPDF( 7.0 );
* // returns 0.0
*
* y = mylogPDF( 5.0 );
* // returns -Infinity
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1237,"./logpdf.js":1239,"@stdlib/utils/define-read-only-property":1937}],1239:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 4.0 );
* // returns ~-1.386
*
* @example
* var y = logpdf( 5.0, 0.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.25, 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function logpdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return NINF;
	}
	return -ln( b - a );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1240:[function(require,module,exports){
'use strict';

/**
* Uniform distribution expected value.
*
* @module @stdlib/math/base/dists/uniform/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/uniform/mean' );
*
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 8.0
*
* v = mean( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1241}],1241:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the expected value of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0 );
* // returns 0.5
* @example
* var v = mean( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = mean( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
}


// EXPORTS //

module.exports = mean;

},{}],1242:[function(require,module,exports){
'use strict';

/**
* Uniform distribution median.
*
* @module @stdlib/math/base/dists/uniform/median
*
* @example
* var median = require( '@stdlib/math/base/dists/uniform/median' );
*
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns 8.0
*
* v = median( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1243}],1243:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the median of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0 );
* // returns 0.5
* @example
* var v = median( 4.0, 12.0 );
* // returns 8.0
* @example
* var v = median( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
}


// EXPORTS //

module.exports = median;

},{}],1244:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} MGF
*
* @example
* var mgf = factory( 6.0, 7.0 );
* var y = mgf( 0.1 );
* // returns ~1.916
*
* y = mymgf( 1.1 );
* // returns ~1339.321
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a uniform distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var ret;
		if ( isnan( t ) ) {
			return NaN;
		}
		if ( t === 0.0 ) {
			return 1.0;
		}
		// Case: t not equal to zero
		ret = exp( t * b ) - exp( t * a );
		ret /= t * ( b - a );
		return ret;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/utils/constant-function":1933}],1245:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) of a uniform distribution.
*
* @module @stdlib/math/base/dists/uniform/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/uniform/mgf' );
*
* var y = mgf( 2.0, 0.0, 4.0 );
* // returns ~372.495
*
* y = mgf( -0.2, 0.0, 4.0 );
* // returns ~0.688
*
* y = mgf( 2.0, 0.0, 1.0 );
* // returns ~3.195
*
* var mymgf = mgf.factory( 6.0, 7.0 );
* y = mymgf( 0.1 );
* // returns ~1.916
*
* y = mymgf( 1.1 );
* // returns ~1339.321
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1244,"./mgf.js":1246,"@stdlib/utils/define-read-only-property":1937}],1246:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0.0, 4.0 );
* // returns ~372.495
*
* @example
* var y = mgf( -0.2, 0.0, 4.0 );
* // returns ~0.688
*
* @example
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~3.195
*
* @example
* var y = mgf( 0.5, 3.0, 2.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 3.0, 3.0 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*/
function mgf( t, a, b ) {
	var ret;
	if (
		isnan( t ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( t === 0.0 ) {
		return 1.0;
	}
	// Case: t not equal to zero
	ret = exp( t * b ) - exp( t * a );
	ret /= t * ( b - a );
	return ret;
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],1247:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0 );
* var y = pdf( 2.0 );
* // returns 0.1
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return 0.0;
		}
		return 1.0 / ( b - a );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],1248:[function(require,module,exports){
'use strict';

/**
* Uniform distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/uniform/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/uniform/pdf' );
*
* var y = pdf( 3.0, 2.0, 6.0 );
* // returns 0.25
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 7.0 );
* // returns 1.0
*
* y = myPDF( 5.0 );
* // returns 0.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1247,"./pdf.js":1249,"@stdlib/utils/define-read-only-property":1937}],1249:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 4.0 );
* // returns 0.25
*
* @example
* var y = pdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.25, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function pdf( x, a, b ) {
	if (
		isnan( x ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	return 1.0 / ( b - a );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/math/base/assert/is-nan":128}],1250:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a uniform distribution with minimum support `a` an maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0 );
* var y = quantile( 0.4 );
* // returns 2.8
*
* y = quantile( 0.8 );
* // returns 3.6
*/
function factory( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a uniform distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + ( p * ( b - a ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/utils/constant-function":1933}],1251:[function(require,module,exports){
'use strict';

/**
* Uniform distribution quantile function.
*
* @module @stdlib/math/base/dists/uniform/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/uniform/quantile' );
*
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns 5.0
*
* var myQuantile = quantile.factory( 0.0, 4.0 );
* y = myQuantile( 0.8 );
* // returns 3.2
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1250,"./quantile.js":1252,"@stdlib/utils/define-read-only-property":1937}],1252:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns 0.8
*
* @example
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns 5.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 2.0, 1.0 );
* // returns NaN
*/
function quantile( p, a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return a + ( p * ( b - a ) );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128}],1253:[function(require,module,exports){
'use strict';

/**
* Uniform distribution skewness.
*
* @module @stdlib/math/base/dists/uniform/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/uniform/skewness' );
*
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* v = skewness( 2.0, 8.0 );
* // returns 0.0
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1254}],1254:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the skewness of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 0.0
* @example
* var v = skewness( -4.0, 4.0 );
* // returns 0.0
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( a, b ) {
	if (
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128}],1255:[function(require,module,exports){
'use strict';

/**
* Uniform distribution standard deviation.
*
* @module @stdlib/math/base/dists/uniform/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/uniform/stdev' );
*
* var v = stdev( 0.0, 1.0 );
* // returns ~0.288
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.309
*
* v = stdev( 2.0, 8.0 );
* // returns ~1.732
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1256}],1256:[function(require,module,exports){
'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );


// VARIABLES //

var SQRT1O12 = sqrt( 1.0/12.0 );


// MAIN //

/**
* Returns the standard deviation of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0 );
* // returns ~0.288
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.309
* @example
* var v = stdev( -4.0, 4.0 );
* // returns ~2.309
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return SQRT1O12 * ( b-a );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/special/sqrt":1826}],1257:[function(require,module,exports){
'use strict';

/**
* Uniform distribution variance.
*
* @module @stdlib/math/base/dists/uniform/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/uniform/variance' );
*
* var v = variance( 0.0, 1.0 );
* // returns ~0.083
*
* v = variance( 4.0, 12.0 );
* // returns ~5.333
*
* v = variance( 2.0, 8.0 );
* // returns 3.0
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1258}],1258:[function(require,module,exports){
'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the variance of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.0, 1.0 );
* // returns ~0.083
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~5.333
* @example
* var v = variance( -4.0, 4.0 );
* // returns ~5.333
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return (1.0/12.0) * pow( b-a, 2.0 );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/special/pow":1743}],1259:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function cdf( x, k, lambda ) {
	if (
		isnan( x ) ||
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	return -expm1( -pow( x / lambda, k ) );
}


// EXPORTS //

module.exports = cdf;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/pow":1743}],1260:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2.0, 10.0 );
* var y = cdf( 12.0 );
* // returns ~0.763
*
* y = cdf( 8.0 );
* // returns ~0.473
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return constantFunction( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return -expm1( -pow( x / lambda, k ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1261:[function(require,module,exports){
'use strict';

/**
* Weibull distribution cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/weibull/cdf
*
* @example
* var cdf = require( '@stdlib/math/base/dists/weibull/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
*
* var myCDF = factory( 2.0, 10.0 );
* y = myCDF( 12.0 );
* // returns ~0.763
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var cdf = require( './cdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( cdf, 'factory', factory );


// EXPORTS //

module.exports = cdf;

},{"./cdf.js":1259,"./factory.js":1260,"@stdlib/utils/define-read-only-property":1937}],1262:[function(require,module,exports){
/* eslint-disable no-restricted-syntax, no-invalid-this */
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositive = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
var entropy = require( '@stdlib/math/base/dists/weibull/entropy' );
var kurtosis = require( '@stdlib/math/base/dists/weibull/kurtosis' );
var mean = require( '@stdlib/math/base/dists/weibull/mean' );
var median = require( '@stdlib/math/base/dists/weibull/median' );
var mode = require( '@stdlib/math/base/dists/weibull/mode' );
var skewness = require( '@stdlib/math/base/dists/weibull/skewness' );
var stdev = require( '@stdlib/math/base/dists/weibull/stdev' );
var variance = require( '@stdlib/math/base/dists/weibull/variance' );
var cdf = require( '@stdlib/math/base/dists/weibull/cdf' );
var logcdf = require( '@stdlib/math/base/dists/weibull/logcdf' );
var logpdf = require( '@stdlib/math/base/dists/weibull/logpdf' );
var mgf = require( '@stdlib/math/base/dists/weibull/mgf' );
var pdf = require( '@stdlib/math/base/dists/weibull/pdf' );
var quantile = require( '@stdlib/math/base/dists/weibull/quantile' );


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function weibullCDF( x ) {
	return cdf( x, this.k, this.lambda );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function weibullLogCDF( x ) {
	return logcdf( x, this.k, this.lambda );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function weibullLogPDF( x ) {
	return logpdf( x, this.k, this.lambda );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function weibullMGF( t ) {
	return mgf( t, this.k, this.lambda );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function weibullPDF( x ) {
	return pdf( x, this.k, this.lambda );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function weibullQuantile( p ) {
	return quantile( p, this.k, this.lambda );
}


// MAIN //

/**
* Weibull distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - shape parameter
* @param {PositiveNumber} [lambda=1.0] - scale parameter
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @returns {Weibull} distribution instance
*
* @example
* var weibull = new Weibull( 1.0, 1.0 );
*
* var y = weibull.cdf( 0.8 );
* // returns ~0.551
*
* var mode = weibull.mode;
* // returns 0.0
*/
function Weibull() {
	var k;
	var lambda;
	if ( !(this instanceof Weibull) ) {
		if ( arguments.length === 0 ) {
			return new Weibull();
		}
		return new Weibull( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		if ( !isPositive( k ) ) {
			throw new TypeError( 'invalid input argument. Shape parameter `k` must be a positive number. Value: `' + k + '`' );
		}
		if ( !isPositive( lambda ) ) {
			throw new TypeError( 'invalid input argument. Scale parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		k = 1.0;
		lambda = 1.0;
	}
	Object.defineProperty( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	Object.defineProperty( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
}

/**
* Weibull distribution differential entropy.
*
* @name entropy
* @memberof Weibull.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.entropy;
* // returns ~2.531
*/
Object.defineProperty( Weibull.prototype, 'entropy', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return entropy( this.k, this.lambda );
	}
});

/**
* Weibull distribution excess kurtosis.
*
* @name kurtosis
* @memberof Weibull.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.kurtosis;
* // returns ~-0.252
*/
Object.defineProperty( Weibull.prototype, 'kurtosis', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return kurtosis( this.k, this.lambda );
	}
});

/**
* Weibull distribution expected value.
*
* @name mean
* @memberof Weibull.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.mean;
* // returns ~10.877
*/
Object.defineProperty( Weibull.prototype, 'mean', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mean( this.k, this.lambda );
	}
});

/**
* Weibull distribution median.
*
* @name median
* @memberof Weibull.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.median;
* // returns ~10.949
*/
Object.defineProperty( Weibull.prototype, 'median', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return median( this.k, this.lambda );
	}
});

/**
* Weibull distribution mode.
*
* @name mode
* @memberof Weibull.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.mode;
* // returns ~11.167
*/
Object.defineProperty( Weibull.prototype, 'mode', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return mode( this.k, this.lambda );
	}
});

/**
* Weibull distribution skewness.
*
* @name skewness
* @memberof Weibull.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.skewness;
* // returns ~-0.087
*/
Object.defineProperty( Weibull.prototype, 'skewness', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return skewness( this.k, this.lambda );
	}
});

/**
* Weibull distribution standard deviation.
*
* @name stdev
* @memberof Weibull.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.stdev;
* // returns ~3.051
*/
Object.defineProperty( Weibull.prototype, 'stdev', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return stdev( this.k, this.lambda );
	}
});

/**
* Weibull distribution variance.
*
* @name variance
* @memberof Weibull.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.variance;
* // returns ~9.311
*/
Object.defineProperty( Weibull.prototype, 'variance', {
	'configurable': false,
	'enumerable': true,
	'get': function get() {
		return variance( this.k, this.lambda );
	}
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.cdf( 0.5 );
* // returns ~0.016
*/
setReadOnly( Weibull.prototype, 'cdf', weibullCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.logcdf( 0.8 );
* // returns ~-3.239
*/
setReadOnly( Weibull.prototype, 'logcdf', weibullLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.logpdf( 0.8 );
* // returns ~-2.343
*/
setReadOnly( Weibull.prototype, 'logpdf', weibullLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.mgf( 0.5 );
* // returns ~9.878
*/
setReadOnly( Weibull.prototype, 'mgf', weibullMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.pdf( 2.0 );
* // returns ~0.195
*/
setReadOnly( Weibull.prototype, 'pdf', weibullPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Weibull.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.quantile( 0.5 );
* // returns ~3.33
*/
setReadOnly( Weibull.prototype, 'quantile', weibullQuantile );


// EXPORTS //

module.exports = Weibull;

},{"@stdlib/assert/is-positive-number":52,"@stdlib/math/base/dists/weibull/cdf":1261,"@stdlib/math/base/dists/weibull/entropy":1265,"@stdlib/math/base/dists/weibull/kurtosis":1266,"@stdlib/math/base/dists/weibull/logcdf":1270,"@stdlib/math/base/dists/weibull/logpdf":1273,"@stdlib/math/base/dists/weibull/mean":1275,"@stdlib/math/base/dists/weibull/median":1277,"@stdlib/math/base/dists/weibull/mgf":1280,"@stdlib/math/base/dists/weibull/mode":1282,"@stdlib/math/base/dists/weibull/pdf":1285,"@stdlib/math/base/dists/weibull/quantile":1288,"@stdlib/math/base/dists/weibull/skewness":1290,"@stdlib/math/base/dists/weibull/stdev":1292,"@stdlib/math/base/dists/weibull/variance":1294,"@stdlib/utils/define-read-only-property":1937}],1263:[function(require,module,exports){
'use strict';

/**
* Weibull distribution constructor.
*
* @module @stdlib/math/base/dists/weibull/ctor
*
* @example
* var Weibull = require( '@stdlib/math/base/dists/weibull/ctor' );
*
* var weibull = new Weibull( 1.0, 1.0 );
*
* var y = weibull.cdf( 0.8 );
* // returns ~0.551
*
* var mode = weibull.mode;
* // returns 0.0
*/

// MODULES //

var ctor = require( './ctor.js' );


// EXPORTS //

module.exports = ctor;

},{"./ctor.js":1262}],1264:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );


// MAIN //

/**
* Returns the differential entropy of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.532
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~0.119
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( GAMMA * ( 1.0 - (1.0/k) ) ) + ln( lambda/k ) + 1.0;
}


// EXPORTS //

module.exports = entropy;

},{"@stdlib/constants/math/float64-eulergamma":71,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1265:[function(require,module,exports){
'use strict';

/**
* Weibull distribution differential entropy.
*
* @module @stdlib/math/base/dists/weibull/entropy
*
* @example
* var entropy = require( '@stdlib/math/base/dists/weibull/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.532
*
* v = entropy( 8.0, 2.0 );
* // returns ~0.119
*/

// MODULES //

var entropy = require( './entropy.js' );


// EXPORTS //

module.exports = entropy;

},{"./entropy.js":1264}],1266:[function(require,module,exports){
'use strict';

/**
* Weibull distribution excess kurtosis.
*
* @module @stdlib/math/base/dists/weibull/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/math/base/dists/weibull/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~-0.252
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~0.328
*/

// MODULES //

var kurtosis = require( './kurtosis.js' );


// EXPORTS //

module.exports = kurtosis;

},{"./kurtosis.js":1267}],1267:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the excess kurtosis of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~-0.252
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~0.328
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( k, lambda ) {
	var out;
	var g4;
	var g3;
	var g2;
	var g1;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	g1 = gamma( 1.0 + (1.0/k) );
	g2 = gamma( 1.0 + (2.0/k) );
	g3 = gamma( 1.0 + (3.0/k) );
	g4 = gamma( 1.0 + (4.0/k) );
	out = (-6.0*pow(g1, 4.0)) + (12.0*g1*g1*g2) - (3.0*g2*g2)- (4.0*g1*g3) + g4;
	out /= pow( g2 - (g1*g1), 2.0 );
	return out;
}


// EXPORTS //

module.exports = kurtosis;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/pow":1743}],1268:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace weibull
*/
var weibull = {};

/**
* @name cdf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/cdf}
*/
setReadOnly( weibull, 'cdf', require( '@stdlib/math/base/dists/weibull/cdf' ) );

/**
* @name entropy
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/entropy}
*/
setReadOnly( weibull, 'entropy', require( '@stdlib/math/base/dists/weibull/entropy' ) );

/**
* @name kurtosis
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/kurtosis}
*/
setReadOnly( weibull, 'kurtosis', require( '@stdlib/math/base/dists/weibull/kurtosis' ) );

/**
* @name logcdf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/logcdf}
*/
setReadOnly( weibull, 'logcdf', require( '@stdlib/math/base/dists/weibull/logcdf' ) );

/**
* @name logpdf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/logpdf}
*/
setReadOnly( weibull, 'logpdf', require( '@stdlib/math/base/dists/weibull/logpdf' ) );

/**
* @name mean
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/mean}
*/
setReadOnly( weibull, 'mean', require( '@stdlib/math/base/dists/weibull/mean' ) );

/**
* @name median
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/median}
*/
setReadOnly( weibull, 'median', require( '@stdlib/math/base/dists/weibull/median' ) );

/**
* @name mgf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/mgf}
*/
setReadOnly( weibull, 'mgf', require( '@stdlib/math/base/dists/weibull/mgf' ) );

/**
* @name mode
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/mode}
*/
setReadOnly( weibull, 'mode', require( '@stdlib/math/base/dists/weibull/mode' ) );

/**
* @name pdf
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/pdf}
*/
setReadOnly( weibull, 'pdf', require( '@stdlib/math/base/dists/weibull/pdf' ) );

/**
* @name quantile
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/quantile}
*/
setReadOnly( weibull, 'quantile', require( '@stdlib/math/base/dists/weibull/quantile' ) );

/**
* @name skewness
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/skewness}
*/
setReadOnly( weibull, 'skewness', require( '@stdlib/math/base/dists/weibull/skewness' ) );

/**
* @name stdev
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/stdev}
*/
setReadOnly( weibull, 'stdev', require( '@stdlib/math/base/dists/weibull/stdev' ) );

/**
* @name variance
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/variance}
*/
setReadOnly( weibull, 'variance', require( '@stdlib/math/base/dists/weibull/variance' ) );

/**
* @name Weibull
* @memberof weibull
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/dists/weibull/ctor}
*/
setReadOnly( weibull, 'Weibull', require( '@stdlib/math/base/dists/weibull/ctor' ) );


// EXPORTS //

module.exports = weibull;

},{"@stdlib/math/base/dists/weibull/cdf":1261,"@stdlib/math/base/dists/weibull/ctor":1263,"@stdlib/math/base/dists/weibull/entropy":1265,"@stdlib/math/base/dists/weibull/kurtosis":1266,"@stdlib/math/base/dists/weibull/logcdf":1270,"@stdlib/math/base/dists/weibull/logpdf":1273,"@stdlib/math/base/dists/weibull/mean":1275,"@stdlib/math/base/dists/weibull/median":1277,"@stdlib/math/base/dists/weibull/mgf":1280,"@stdlib/math/base/dists/weibull/mode":1282,"@stdlib/math/base/dists/weibull/pdf":1285,"@stdlib/math/base/dists/weibull/quantile":1288,"@stdlib/math/base/dists/weibull/skewness":1290,"@stdlib/math/base/dists/weibull/stdev":1292,"@stdlib/math/base/dists/weibull/variance":1294,"@stdlib/utils/define-read-only-property":1937}],1269:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/constants/math/float64-ln-half' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} logCDF
*
* @example
* var cdf = factory( 2.0, 10.0 );
* var y = cdf( 12.0 );
* // returns ~-0.27
*
* y = cdf( 8.0 );
* // returns ~-0.749
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return constantFunction( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var p;
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return NINF;
		}
		p = -pow( x / lambda, k );
		return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ln-half":79,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1270:[function(require,module,exports){
'use strict';

/**
* Weibull distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/math/base/dists/weibull/logcdf
*
* @example
* var logcdf = require( '@stdlib/math/base/dists/weibull/logcdf' );
*
* var y = logcdf( 2.0, 1.0, 1.0 );
* // returns ~-0.145
*
* var mylogcdf = logcdf.factory( 2.0, 10.0 );
* y = mylogcdf( 12.0 );
* // returns ~-0.27
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logcdf = require( './logcdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logcdf, 'factory', factory );


// EXPORTS //

module.exports = logcdf;

},{"./factory.js":1269,"./logcdf.js":1271,"@stdlib/utils/define-read-only-property":1937}],1271:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var LNHALF = require( '@stdlib/constants/math/float64-ln-half' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {number} natural logarithm of CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~-0.145
*
* @example
* var y = logcdf( -1.0, 2.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( +Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = logcdf( -Infinity, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logcdf( x, k, lambda ) {
	var p;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	p = -pow( x / lambda, k );
	return p < LNHALF ? log1p( -exp( p ) ) : ln( -expm1( p ) );
}


// EXPORTS //

module.exports = logcdf;

},{"@stdlib/constants/math/float64-ln-half":79,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743}],1272:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} function to evaluate the logarithm of the probability density function
*
* @example
* var logpdf = factory( 7.0, 6.0 );
* var y = logpdf( 7.0 );
* // returns ~-1.864
*
* y = logpdf( 5.0 );
* // returns ~-1.217
*/
function factory( k, lambda ) {
	var lnkl;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return constantFunction( NaN );
	}
	lnkl = ln( k / lambda );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var xol;
		if ( x < 0.0 ) {
			return NINF;
		}
		if ( x === PINF || x === NINF ) {
			return NINF;
		}
		if ( x === 0.0 ) {
			return ( k === 1.0 ) ? ln( k / lambda ) : NINF;
		}
		xol = x / lambda;
		return lnkl + ( ( k - 1.0 ) * ln( xol ) ) - pow( xol, k );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1273:[function(require,module,exports){
'use strict';

/**
* Weibull distribution logarithm of probability density function (PDF).
*
* @module @stdlib/math/base/dists/weibull/logpdf
*
* @example
* var logpdf = require( '@stdlib/math/base/dists/weibull/logpdf' );
*
* var y = logpdf( 2.0, 1.0, 0.5 );
* // returns ~-3.297
*
* var mylogpdf = logpdf.factory( 7.0, 6.0 );
* y = mylogpdf( 7.0 );
* // returns ~-1.864
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var logpdf = require( './logpdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( logpdf, 'factory', factory );


// EXPORTS //

module.exports = logpdf;

},{"./factory.js":1272,"./logpdf.js":1274,"@stdlib/utils/define-read-only-property":1937}],1274:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Weibull distribution with shape parameter `k` and scale parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 1.0, 0.5 );
* // returns ~-3.297
*
* @example
* var y = logpdf( 0.1, 1.0, 1.0 );
* // returns ~-0.1
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.6, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function logpdf( x, k, lambda ) {
	var xol;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NINF;
	}
	if ( x === PINF || x === NINF ) {
		return NINF;
	}
	if ( x === 0.0 ) {
		return ( k === 1.0 ) ? ln( k/lambda ): NINF;
	}
	xol = x / lambda;
	return ln( k / lambda ) + ( ( k - 1.0 ) * ln( xol ) ) - pow( xol, k );
}


// EXPORTS //

module.exports = logpdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],1275:[function(require,module,exports){
'use strict';

/**
* Weibull distribution expected value.
*
* @module @stdlib/math/base/dists/weibull/mean
*
* @example
* var mean = require( '@stdlib/math/base/dists/weibull/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~10.877
*
* v = mean( 8.0, 2.0 );
* // returns ~1.883
*/

// MODULES //

var mean = require( './mean.js' );


// EXPORTS //

module.exports = mean;

},{"./mean.js":1276}],1276:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );


// MAIN //

/**
* Returns the expected value of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~10.877
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~1.883
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return lambda * gamma( 1.0 + ( 1.0/k ) );
}


// EXPORTS //

module.exports = mean;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525}],1277:[function(require,module,exports){
'use strict';

/**
* Weibull distribution median.
*
* @module @stdlib/math/base/dists/weibull/median
*
* @example
* var median = require( '@stdlib/math/base/dists/weibull/median' );
*
* var v = median( 1.0, 1.0 );
* // returns ~0.693
*
* v = median( 4.0, 12.0 );
* // returns ~10.949
*
* v = median( 8.0, 2.0 );
* // returns ~1.91
*/

// MODULES //

var median = require( './median.js' );


// EXPORTS //

module.exports = median;

},{"./median.js":1278}],1278:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Returns the median of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns ~0.693
* @example
* var v = median( 4.0, 12.0 );
* // returns ~10.949
* @example
* var v = median( 8.0, 2.0 );
* // returns ~1.91
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
* @example
* var v = median( 2.0, NaN );
* // returns NaN
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return lambda * pow( LN2, 1.0/k );
}


// EXPORTS //

module.exports = median;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1279:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var EPS = require( '@stdlib/constants/math/float64-eps' );


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Weibull distribution with shape `k` and scale `lambda`.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 8.0, 10.0 );
*
* var y = mgf( 0.8 );
* // returns ~3150.149
*
* y = mgf( 0.08 );
* // returns ~2.137s
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return constantFunction( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Weibull distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var summand;
		var sum;
		var c;
		var n;

		if ( isnan( t ) ) {
			return NaN;
		}
		sum = 1.0;
		c = 1.0;
		n = 0;
		do {
			n += 1;
			c *= ( t * lambda ) / n;
			if ( c === 0.0 ) {
				summand = 0.0;
			} else {
				summand = c * gamma( 1.0 + (n / k) );
			}
			sum += summand;
		} while ( summand / sum > EPS );
		return sum;
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525,"@stdlib/utils/constant-function":1933}],1280:[function(require,module,exports){
'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Weibull distribution.
*
* @module @stdlib/math/base/dists/weibull/mgf
*
* @example
* var mgf = require( '@stdlib/math/base/dists/weibull/mgf' );
*
* var y = mgf( 1.0, 1.0, 0.5 );
* // returns ~2.0
*
* y = mgf( -1.0, 4.0, 4.0 );
* // returns ~0.019
*
* var myMGF = mgf.factory( 8.0, 10.0 );
*
* y = myMGF( 0.8 );
* // returns ~3150.149
*
* y = myMGF( 0.08 );
* // returns ~2.137s
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var mgf = require( './mgf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( mgf, 'factory', factory );


// EXPORTS //

module.exports = mgf;

},{"./factory.js":1279,"./mgf.js":1281,"@stdlib/utils/define-read-only-property":1937}],1281:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var EPS = require( '@stdlib/constants/math/float64-eps' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Weibull distribution with shape `k` and scale `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.0, 0.5 );
* // returns ~2.0
*
* @example
* var y = mgf( -1.0, 4.0, 4.0 );
* // returns ~0.019
*
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.2, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 0.5, 0.0 );
* // returns NaN
*/
function mgf( t, k, lambda ) {
	var summand;
	var sum;
	var c;
	var n;

	if (
		isnan( t ) ||
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	sum = 1.0;
	c = 1.0;
	n = 0;
	do {
		n += 1;
		c *= ( t * lambda ) / n;
		if ( c === 0.0 ) {
			summand = 0.0;
		} else {
			summand = c * gamma( 1.0 + (n / k) );
		}
		sum += summand;
	} while ( summand / sum > EPS );
	return sum;
}


// EXPORTS //

module.exports = mgf;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525}],1282:[function(require,module,exports){
'use strict';

/**
* Weibull distribution mode.
*
* @module @stdlib/math/base/dists/weibull/mode
*
* @example
* var mode = require( '@stdlib/math/base/dists/weibull/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns ~11.167
*
* v = mode( 8.0, 2.0 );
* // returns ~1.967
*/

// MODULES //

var mode = require( './mode.js' );


// EXPORTS //

module.exports = mode;

},{"./mode.js":1283}],1283:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the mode of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.0
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~11.167
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~1.967
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( k <= 1.0 ) {
		return 0.0;
	}
	return lambda * pow( ( k-1.0 ) / k, 1.0/k );
}


// EXPORTS //

module.exports = mode;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743}],1284:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 7.0, 6.0 );
* var y = pdf( 7.0 );
* // returns ~0.155
*
* y = pdf( 5.0 );
* // returns ~0.296
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return constantFunction( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var xol;
		var z;
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === PINF || x === NINF ) {
			return 0.0;
		}
		if ( x === 0.0 ) {
			return ( k === 1.0 ) ? k / lambda : 0.0;
		}
		xol = x / lambda;
		z = pow( xol, k - 1.0 );
		return ( k / lambda ) * z * exp( -pow( xol, k ) );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1285:[function(require,module,exports){
'use strict';

/**
* Weibull distribution probability density function (PDF).
*
* @module @stdlib/math/base/dists/weibull/pdf
*
* @example
* var pdf = require( '@stdlib/math/base/dists/weibull/pdf' );
*
* var y = pdf( 2.0, 1.0, 0.5 );
* // returns ~0.037
*
* var myPDF = pdf.factory( 7.0, 6.0 );
* y = myPDF( 7.0 );
* // returns ~0.155
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pdf = require( './pdf.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( pdf, 'factory', factory );


// EXPORTS //

module.exports = pdf;

},{"./factory.js":1284,"./pdf.js":1286,"@stdlib/utils/define-read-only-property":1937}],1286:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Weibull distribution with shape parameter `k` and scale parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 1.0, 0.5 );
* // returns ~0.037
*
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.905
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.6, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function pdf( x, k, lambda ) {
	var xol;
	var z;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === PINF || x === NINF ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return ( k === 1.0 ) ? k/lambda : 0.0;
	}
	xol = x / lambda;
	z = pow( xol, k - 1.0 );
	return ( k / lambda ) * z * exp( -pow( xol, k ) );
}


// EXPORTS //

module.exports = pdf;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],1287:[function(require,module,exports){
'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );
var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 10.0 );
* var y = quantile( 0.4 );
* // returns ~7.147
*
* y = quantile( 0.8 );
* // returns ~12.686
*/
function factory( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return constantFunction( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Weibull distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( isnan( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return lambda * pow( -ln( 1.0 - p ), 1.0/k );
	}
}


// EXPORTS //

module.exports = factory;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/utils/constant-function":1933}],1288:[function(require,module,exports){
'use strict';

/**
* Weibull distribution quantile function.
*
* @module @stdlib/math/base/dists/weibull/quantile
*
* @example
* var quantile = require( '@stdlib/math/base/dists/weibull/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
*
* var myQuantile = quantile.factory( 2.0, 10.0 );
* y = myQuantile( 0.4 );
* // returns ~7.147
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var quantile = require( './quantile.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( quantile, 'factory', factory );


// EXPORTS //

module.exports = quantile;

},{"./factory.js":1287,"./quantile.js":1289,"@stdlib/utils/define-read-only-property":1937}],1289:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the quantile function for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
*
* @example
* var y = quantile( 0.5, 2.0, 4.0 );
* // returns ~3.33
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function quantile( p, k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		isnan( p ) ||
		k <= 0.0 ||
		lambda <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return lambda * pow( -ln( 1.0 - p ), 1.0/k );
}


// EXPORTS //

module.exports = quantile;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],1290:[function(require,module,exports){
'use strict';

/**
* Weibull distribution skewness.
*
* @module @stdlib/math/base/dists/weibull/skewness
*
* @example
* var skewness = require( '@stdlib/math/base/dists/weibull/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~-0.087
*
* v = skewness( 8.0, 2.0 );
* // returns ~-0.534
*/

// MODULES //

var skewness = require( './skewness.js' );


// EXPORTS //

module.exports = skewness;

},{"./skewness.js":1291}],1291:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var variance = require( '@stdlib/math/base/dists/weibull/variance' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var mean = require( '@stdlib/math/base/dists/weibull/mean' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Returns the skewness of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~-0.087
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~-0.534
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( k, lambda ) {
	var sigma2;
	var sigma;
	var out;
	var mu;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	mu = mean( k, lambda );
	sigma2 = variance( k, lambda);
	sigma = sqrt( sigma2 );
	out = gamma( 1.0 + ( 3.0/k ) ) * pow( lambda, 3.0 );
	out -= ( 3.0*mu*sigma2 ) + pow( mu, 3.0 );
	out /= pow( sigma, 3.0 );
	return out;
}


// EXPORTS //

module.exports = skewness;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/weibull/mean":1275,"@stdlib/math/base/dists/weibull/variance":1294,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1292:[function(require,module,exports){
'use strict';

/**
* Weibull distribution standard deviation.
*
* @module @stdlib/math/base/dists/weibull/stdev
*
* @example
* var stdev = require( '@stdlib/math/base/dists/weibull/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
*
* v = stdev( 4.0, 12.0 );
* // returns ~3.051
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.279
*/

// MODULES //

var stdev = require( './stdev.js' );


// EXPORTS //

module.exports = stdev;

},{"./stdev.js":1293}],1293:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns the standard deviation of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~3.051
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.279
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( k, lambda ) {
	var g1k;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	g1k = gamma( 1.0 + ( 1.0/k ) );
	return lambda * sqrt( gamma( 1.0 + ( 2.0/k ) ) - ( g1k*g1k ) );
}


// EXPORTS //

module.exports = stdev;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/sqrt":1826}],1294:[function(require,module,exports){
'use strict';

/**
* Weibull distribution variance.
*
* @module @stdlib/math/base/dists/weibull/variance
*
* @example
* var variance = require( '@stdlib/math/base/dists/weibull/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns 1.0
*
* v = variance( 4.0, 12.0 );
* // returns ~9.311
*
* v = variance( 8.0, 2.0 );
* // returns ~0.078
*/

// MODULES //

var variance = require( './variance.js' );


// EXPORTS //

module.exports = variance;

},{"./variance.js":1295}],1295:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var mean = require( '@stdlib/math/base/dists/weibull/mean' );


// MAIN //

/**
* Returns the variance of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns 1.0
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~9.311
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.078
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( k, lambda ) {
	var mu;
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	mu = mean( k, lambda );
	return ( lambda*lambda * ( gamma( 1.0 + (2.0/k) ) ) ) - ( mu*mu );
}


// EXPORTS //

module.exports = variance;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/dists/weibull/mean":1275,"@stdlib/math/base/special/gamma":1525}],1296:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace ns
*/
var ns = {};

/**
* @name assert
* @memberof ns
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/assert}
*/
setReadOnly( ns, 'assert', require( '@stdlib/math/base/assert' ) );

/**
* @name complex
* @memberof ns
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/complex}
*/
setReadOnly( ns, 'complex', require( '@stdlib/math/base/complex' ) );

/**
* @name dists
* @memberof ns
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/dists}
*/
setReadOnly( ns, 'dists', require( '@stdlib/math/base/dists' ) );

/**
* @name special
* @memberof ns
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/special}
*/
setReadOnly( ns, 'special', require( '@stdlib/math/base/special' ) );

/**
* @name tools
* @memberof ns
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/tools}
*/
setReadOnly( ns, 'tools', require( '@stdlib/math/base/tools' ) );

/**
* @name utils
* @memberof ns
* @readonly
* @type {Namespace}
* @see {@link module:@stdlib/math/base/utils}
*/
setReadOnly( ns, 'utils', require( '@stdlib/math/base/utils' ) );


// EXPORTS //

module.exports = ns;

},{"@stdlib/math/base/assert":148,"@stdlib/math/base/complex":175,"@stdlib/math/base/dists":906,"@stdlib/math/base/special":1678,"@stdlib/math/base/tools":1878,"@stdlib/math/base/utils":1891,"@stdlib/utils/define-read-only-property":1937}],1297:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
}


// EXPORTS //

module.exports = abs;

},{}],1298:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":1297}],1299:[function(require,module,exports){
'use strict';

/**
* Computes the squared absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} squared absolute value
*
* @example
* var v = abs2( -1.0 );
* // returns 1.0
*
* @example
* var v = abs2( 2.0 );
* // returns 4.0
*
* @example
* var v = abs2( 0.0 );
* // returns 0.0
*
* @example
* var v = abs2( -0.0 );
* // returns 0.0
*
* @example
* var v = abs2( NaN );
* // returns NaN
*/
function abs2( x ) {
	return x * x;
}


// EXPORTS //

module.exports = abs2;

},{}],1300:[function(require,module,exports){
'use strict';

/**
* Compute the squared absolute value.
*
* @module @stdlib/math/base/special/abs2
*
* @example
* var abs2 = require( '@stdlib/math/base/special/abs2' );
*
* var v = abs2( -1.0 );
* // returns 1.0
*
* v = abs2( 2.0 );
* // returns 4.0
*
* v = abs2( 0.0 );
* // returns 0.0
*
* v = abs2( -0.0 );
* // returns 0.0
*
* v = abs2( NaN );
* // returns NaN
*/

// MODULES //

var abs2 = require( './abs2.js' );


// EXPORTS //

module.exports = abs2;

},{"./abs2.js":1299}],1301:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PIO4 = require( '@stdlib/constants/math/float64-fourth-pi' );


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.


// MAIN //

/**
* Computes the arccosine of a number.
*
* @param {number} x - input value
* @returns {number} arccosine (in radians)
*
* @example
* var v = acos( 1.0 );
* // returns 0.0
*
* @example
* var v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* @example
* var v = acos( NaN );
* // returns NaN
*/
function acos( x ) {
	var z;
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x > 0.5 ) {
		return 2.0 * asin( sqrt( 0.5 - (0.5*x) ) );
	}
	z = PIO4 - asin( x );
	z += MOREBITS;
	z += PIO4;
	return z;
}


// EXPORTS //

module.exports = acos;

},{"@stdlib/constants/math/float64-fourth-pi":73,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/sqrt":1826}],1302:[function(require,module,exports){
'use strict';

/**
* Compute the arccosine of a number.
*
* @module @stdlib/math/base/special/acos
*
* @example
* var acos = require( '@stdlib/math/base/special/acos' );
*
* var v = acos( 1.0 );
* // returns 0.0
*
* v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* v = acos( NaN );
* // returns NaN
*/

// MODULES //

var acos = require( './acos.js' );


// EXPORTS //

module.exports = acos;

},{"./acos.js":1301}],1303:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_acosh.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var HUGE = 1 << 28; // 2**28


// MAIN //

/**
* Computes the hyperbolic arccosine of a number.
*
* ## Method
*
* Based on
*
* ```tex
* \operatorname{acosh}(x) = \log \left[ x + \sqrt{ x^2 - 1 } \right]
* ```
*
* we have
*
* ```tex
* \operatorname{acosh}(x) = \begin{cases}
* \log(x) + \tfrac{\ln}{2} & \text{ if x is large } \\
* \log \left( 2x-\tfrac{1}{\sqrt{x^2-1}+x} \right) & \text{ if } x > 2 \\
* \operatorname{log1p}\left( x - 1 + \sqrt{ 2 \cdot (x-1) + (x-1)^2 } \right) & \text{ otherwise }
* \end{cases}
* ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{acosh}(x) &= \mathrm{NaN}\ \text{ if } x < 1 \\
* \end{align*}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arccosine (in radians)
*
* @example
* var v = acosh( 1.0 );
* // returns 0.0
*
* @example
* var v = acosh( 2.0 );
* // returns ~1.317
*
* @example
* var v = acosh( NaN );
* // returns NaN
*/
function acosh( x ) {
	var t;
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x < 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x >= HUGE ) {
		return ln( x ) + LN2;
	}
	if ( x > 2.0 ) {
		return ln( (2.0*x) - ( 1.0 / ( x + sqrt( (x*x) - 1.0 ) ) ) );
	}
	// Case: 2 >= x > 1
	t = x - 1.0;
	return log1p( t + sqrt( (2.0*t) + (t*t) ) );
}


// EXPORTS //

module.exports = acosh;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/sqrt":1826}],1304:[function(require,module,exports){
'use strict';

/**
* Compute the hyperbolic arccosine of a number.
*
* @module @stdlib/math/base/special/acosh
*
* @example
* var acosh = require( '@stdlib/math/base/special/acosh' );
*
* var v = acosh( 1.0 );
* // returns 0.0
*
* v = acosh( 2.0 );
* // returns ~1.317
*
* v = acosh( NaN );
* // returns NaN
*/

// MODULES //

var acosh = require( './acosh.js' );


// EXPORTS //

module.exports = acosh;

},{"./acosh.js":1303}],1305:[function(require,module,exports){
'use strict';

// MODULES //

var asin = require( '@stdlib/math/base/special/asin' );


// MAIN //

/**
* Computes the inverse coversed cosine.
*
* @param {number} x - input value
* @returns {number} inverse coversed cosine
*
* @example
* var v = acovercos( 0.0 );
* // returns ~1.5708
*
* @example
* var v = acovercos( -Math.PI/2.0 );
* // returns ~-0.6075
*
* @example
* var v = acovercos( -Math.PI/6.0 );
* // returns ~0.4966
*
* @example
* var v = acovercos( NaN );
* // returns NaN
*/
function acovercos( x ) {
	return asin( 1.0 + x );
}


// EXPORTS //

module.exports = acovercos;

},{"@stdlib/math/base/special/asin":1314}],1306:[function(require,module,exports){
'use strict';

/**
* Compute the inverse coversed cosine.
*
* @module @stdlib/math/base/special/acovercos
*
* @example
* var acovercos = require( '@stdlib/math/base/special/acovercos' );
*
* var v = acovercos( 0.0 );
* // returns ~1.5708
*
* v = acovercos( -Math.PI/2.0 );
* // returns ~-0.6075
*
* v = acovercos( -Math.PI/6.0 );
* // returns ~0.4966
*
* v = acovercos( NaN );
* // returns NaN
*/

// MODULES //

var acovercos = require( './acovercos.js' );


// EXPORTS //

module.exports = acovercos;

},{"./acovercos.js":1305}],1307:[function(require,module,exports){
'use strict';

// MODULES //

var asin = require( '@stdlib/math/base/special/asin' );


// MAIN //

/**
* Computes the inverse coversed sine.
*
* @param {number} x - input value
* @returns {number} inverse coversed sine
*
* @example
* var v = acoversin( 0.0 );
* // returns ~1.5708
*
* @example
* var v = acoversin( Math.PI/2.0 );
* // returns ~-0.6075
*
* @example
* var v = acoversin( Math.PI/6.0 );
* // returns ~0.4966
*
* @example
* var v = acoversin( NaN );
* // returns NaN
*/
function acoversin( x ) {
	return asin( 1.0 - x );
}


// EXPORTS //

module.exports = acoversin;

},{"@stdlib/math/base/special/asin":1314}],1308:[function(require,module,exports){
'use strict';

/**
* Compute the inverse coversed sine.
*
* @module @stdlib/math/base/special/acoversin
*
* @example
* var acoversin = require( '@stdlib/math/base/special/acoversin' );
*
* var v = acoversin( 0.0 );
* // returns ~1.5708
*
* v = acoversin( Math.PI/2.0 );
* // returns ~-0.6075
*
* v = acoversin( Math.PI/6.0 );
* // returns ~0.4966
*
* v = acoversin( NaN );
* // returns NaN
*/

// MODULES //

var acoversin = require( './acoversin.js' );


// EXPORTS //

module.exports = acoversin;

},{"./acoversin.js":1307}],1309:[function(require,module,exports){
'use strict';

// MODULES //

var acos = require( '@stdlib/math/base/special/acos' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Computes the inverse half-value versed cosine.
*
* @param {number} x - input value
* @returns {number} inverse half-value versed cosine
*
* @example
* var v = ahavercos( 0.0 );
* // returns ~3.1416
*
* @example
* var v = ahavercos( 1.0 );
* // returns 0.0
*
* @example
* var v = ahavercos( 0.5 );
* // returns ~1.5708
*
* @example
* var v = ahavercos( NaN );
* // returns NaN
*/
function ahavercos( x ) {
	return 2.0 * acos( sqrt( x ) );
}


// EXPORTS //

module.exports = ahavercos;

},{"@stdlib/math/base/special/acos":1302,"@stdlib/math/base/special/sqrt":1826}],1310:[function(require,module,exports){
'use strict';

/**
* Compute the inverse half-value versed cosine.
*
* @module @stdlib/math/base/special/ahavercos
*
* @example
* var ahavercos = require( '@stdlib/math/base/special/ahavercos' );
*
* var v = ahavercos( 0.0 );
* // returns ~3.1416
*
* v = ahavercos( 1.0 );
* // returns 0.0
*
* v = ahavercos( 0.5 );
* // returns ~1.5707
*
* v = ahavercos( NaN );
* // returns NaN
*/

// MODULES //

var ahavercos = require( './ahavercos.js' );


// EXPORTS //

module.exports = ahavercos;

},{"./ahavercos.js":1309}],1311:[function(require,module,exports){
'use strict';

// MODULES //

var asin = require( '@stdlib/math/base/special/asin' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Computes the inverse half-value versed sine.
*
* @param {number} x - input value
* @returns {number} inverse half-value versed sine
*
* @example
* var v = ahaversin( 0.0 );
* // returns 0.0
*
* @example
* var v = ahaversin( 1.0 );
* // returns ~3.1416
*
* @example
* var v = ahaversin( 0.5 );
* // returns ~1.5708
*
* @example
* var v = ahaversin( NaN );
* // returns NaN
*/
function ahaversin( x ) {
	return 2.0 * asin( sqrt( x ) );
}


// EXPORTS //

module.exports = ahaversin;

},{"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/sqrt":1826}],1312:[function(require,module,exports){
'use strict';

/**
* Compute the inverse half-value versed sine.
*
* @module @stdlib/math/base/special/ahaversin
*
* @example
* var ahaversin = require( '@stdlib/math/base/special/ahaversin' );
*
* var v = ahaversin( 0.0 );
* // returns 0.0
*
* v = ahaversin( 1.0 );
* // returns ~3.1416
*
* v = ahaversin( 0.5 );
* // returns ~1.5708
*
* v = ahaversin( NaN );
* // returns NaN
*/

// MODULES //

var ahaversin = require( './ahaversin.js' );


// EXPORTS //

module.exports = ahaversin;

},{"./ahaversin.js":1311}],1313:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PIO4 = require( '@stdlib/constants/math/float64-fourth-pi' );
var ratevalPQ = require( './rational_pq.js' );
var ratevalRS = require( './rational_rs.js' );


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS


// MAIN //

/**
* Computes the arcsine of a number.
*
* @param {number} x - input value
* @returns {number} arcsine (in radians)
*
* @example
* var v = asin( 0.0 );
* // returns ~0.0
*
* @example
* var v = asin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = asin( -Math.PI/6.0 );
* // returns ~-0.5
*
* @example
* var v = asin( NaN );
* // returns NaN
*/
function asin( x ) {
	var sgn;
	var zz;
	var a;
	var p;
	var z;

	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		a = x;
	} else {
		sgn = true;
		a = -x;
	}
	if ( a > 1.0 ) {
		return NaN;
	}
	if ( a > 0.625 ) {
		// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))
		zz = 1.0 - a;
		p = zz * ratevalRS( zz );
		zz = sqrt( zz + zz );
		z = PIO4 - zz;
		zz = ( zz*p ) - MOREBITS;
		z -= zz;
		z += PIO4;
	} else {
		if ( a < 1.0e-8 ) {
			return x;
		}
		zz = a * a;
		z = zz * ratevalPQ( zz );
		z = ( a*z ) + a;
	}
	return ( sgn ) ? -z : z;
}


// EXPORTS //

module.exports = asin;

},{"./rational_pq.js":1315,"./rational_rs.js":1316,"@stdlib/constants/math/float64-fourth-pi":73,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1314:[function(require,module,exports){
'use strict';

/**
* Compute the arcsine of a number.
*
* @module @stdlib/math/base/special/asin
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* var asin = require( '@stdlib/math/base/special/asin' );
*
* var v = asin( 0.0 );
* // returns 0.0
*
* v = asin( PI/2.0 );
* // returns ~1.0
*
* v = asin( -PI/6.0 );
* // returns ~-0.5
*
* v = asin( NaN );
* // returns NaN
*/

// MODULES //

var asin = require( './asin.js' );


// EXPORTS //

module.exports = asin;

},{"./asin.js":1313}],1315:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.16666666666666713;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -8.198089802484825 + (x * (19.562619833175948 + (x * (-16.262479672107002 + (x * (5.444622390564711 + (x * (-0.6019598008014124 + (x * 0.004253011369004428))))))))); // eslint-disable-line max-len
		s2 = -49.18853881490881 + (x * (139.51056146574857 + (x * (-147.1791292232726 + (x * (70.49610280856842 + (x * (-14.740913729888538 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.004253011369004428 + (x * (-0.6019598008014124 + (x * (5.444622390564711 + (x * (-16.262479672107002 + (x * (19.562619833175948 + (x * -8.198089802484825))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-14.740913729888538 + (x * (70.49610280856842 + (x * (-147.1791292232726 + (x * (139.51056146574857 + (x * -49.18853881490881))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1316:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.08333333333333809;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 28.536655482610616 + (x * (-25.56901049652825 + (x * (6.968710824104713 + (x * (-0.5634242780008963 + (x * 0.002967721961301243))))))); // eslint-disable-line max-len
		s2 = 342.43986579130785 + (x * (-383.8770957603691 + (x * (147.0656354026815 + (x * (-21.947795316429207 + (x * 1.0))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.002967721961301243 + (x * (-0.5634242780008963 + (x * (6.968710824104713 + (x * (-25.56901049652825 + (x * 28.536655482610616))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-21.947795316429207 + (x * (147.0656354026815 + (x * (-383.8770957603691 + (x * 342.43986579130785))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1317:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_asinh.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isinfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
var ln = require( '@stdlib/math/base/special/ln' );


// VARIABLES //

var NEAR_ZERO = 1.0 / (1 << 28); // 2**-28
var HUGE = 1 << 28; // 2**28


// MAIN //

/**
* Computes the hyperbolic arcsine of a number.
*
* ## Method
*
* Based on
*
* ```tex
* \operatorname{asinh}(x) = \operatorname{sgn}(x) \cdot \log \left( |x| + \sqrt{x^2 + 1} \right)
* ```
*
* we have
*
* ```tex
* \operatorname{asinh}(x) = \begin{cases}
* x  & \text{ if }  1+x^2 =1, \\
* \operatorname{sgn}(x) \cdot \left( \log(x) + \tfrac{\ln}{2} \right) & \text{ if large } |x| \\
* \operatorname{sgn}(x) \cdot \log\left( 2 |x| + 1 / ( |x|+ \sqrt{x^2+1} ) \right) & \text{ if } |x| > 2 \\
* \operatorname{sgn}(x) \cdot \operatorname{log1p}\left( |x| + \tfrac{x^2}{1 + \sqrt{1+x^2}} \right) & \text{otherwise}
* \end{cases}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arcsine (in radians)
*
* @example
* var v = asinh( 0.0 );
* // returns 0.0
*
* @example
* var v = asinh( 2.0 );
* // returns ~1.444
*
* @example
* var v = asinh( -2.0 );
* // returns ~-1.444
*
* @example
* var v = asinh( NaN );
* // returns NaN
*/
function asinh( x ) {
	var sgn;
	var xx;
	var t;
	if ( isnan( x ) || isinfinite( x ) ) {
		return x;
	}
	if ( x < 0.0 ) {
		x = -x;
		sgn = true;
	}
	// Case: |x| < 2**-28
	if ( x < NEAR_ZERO ) {
		t = x;
	}
	// Case: |x| > 2**28
	else if ( x > HUGE ) {
		t = ln( x ) + LN2;
	}
	// Case: 2**28 > |x| > 2.0
	else if ( x > 2.0 ) {
		t = ln( (2.0*x) + ( 1.0 / (sqrt( (x*x) + 1.0 ) + x) ) );
	}
	// Case: 2.0 > |x| > 2**-28
	else {
		xx = x * x;
		t = log1p( x + ( xx/(1.0 + sqrt(1.0 + xx)) ) );
	}
	return sgn ? -t : t;
}


// EXPORTS //

module.exports = asinh;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/sqrt":1826}],1318:[function(require,module,exports){
'use strict';

/**
* Compute the hyperbolic arcsine of a number.
*
* @module @stdlib/math/base/special/asinh
*
* @example
* var asinh = require( '@stdlib/math/base/special/asinh' );
*
* var v = asinh( 0.0 );
* // returns 0.0
*
* v = asinh( 2.0 );
* // returns ~1.444
*
* v = asinh( -2.0 );
* // returns ~-1.444
*
* v = asinh( NaN );
* // returns NaN
*/

// MODULES //

var asinh = require( './asinh.js' );


// EXPORTS //

module.exports = asinh;

},{"./asinh.js":1317}],1319:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/cmath.tgz}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var PIO2 = require( '@stdlib/constants/math/float64-half-pi' );
var PIO4 = require( '@stdlib/constants/math/float64-fourth-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var polyvalP = require( './polyval_p.js' );
var polyvalQ = require( './polyval_q.js' );


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.
var T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )


// MAIN //

/**
* Computes the arctangent of a number.
*
* @param {number} x - input value
* @returns {number} arctangent (in radians)
*
* @example
* var v = atan( 0.0 );
* // returns ~0.0
*
* @example
* var v = atan( -Math.PI/4.0 );
* // returns ~-1.0
*
* @example
* var v = atan( Math.PI/4.0 );
* // returns ~1.0
*
* @example
* var v = atan( NaN );
* // returns NaN
*/
function atan( x ) {
	var flg;
	var sgn;
	var y;
	var z;
	if ( isnan( x ) || x === 0.0 ) {
		return x;
	}
	if ( x === PINF ) {
		return PIO2;
	}
	if ( x === NINF ) {
		return -PIO2;
	}
	if ( x < 0.0 ) {
		sgn = true;
		x = -x;
	}
	// Range reduction:
	flg = 0;
	if ( x > T3P8 ) {
		y = PIO2;
		flg = 1;
		x = -( 1.0/x );
	}
	else if ( x <= 0.66 ) {
		y = 0.0;
	}
	else {
		y = PIO4;
		flg = 2;
		x = (x-1.0) / (x+1.0);
	}
	z = x * x;
	z = z*polyvalP( z ) / polyvalQ( z );
	z = ( x*z ) + x;
	if ( flg === 2 ) {
		z += 0.5 * MOREBITS;
	}
	else if ( flg === 1 ) {
		z += MOREBITS;
	}
	y += z;
	return ( sgn ) ? -y : y;
}


// EXPORTS //

module.exports = atan;

},{"./polyval_p.js":1321,"./polyval_q.js":1322,"@stdlib/constants/math/float64-fourth-pi":73,"@stdlib/constants/math/float64-half-pi":76,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],1320:[function(require,module,exports){
'use strict';

/**
* Compute the arctangent of a number.
*
* @module @stdlib/math/base/special/atan
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = atan( 0.0 );
* // returns ~0.0
*
* v = atan( -PI/4.0 );
* // returns ~-1.0
*
* v = atan( PI/4.0 );
* // returns ~1.0
*
* v = atan( NaN );
* // returns NaN
*/

// MODULES //

var atan = require( './atan.js' );


// EXPORTS //

module.exports = atan;

},{"./atan.js":1319}],1321:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -64.85021904942025;
	}
	return -64.85021904942025 + (x * (-122.88666844901361 + (x * (-75.00855792314705 + (x * (-16.157537187333652 + (x * -0.8750608600031904))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1322:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 194.5506571482614;
	}
	return 194.5506571482614 + (x * (485.3903996359137 + (x * (432.88106049129027 + (x * (165.02700983169885 + (x * (24.858464901423062 + (x * 1.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1323:[function(require,module,exports){
'use strict';

/*
* The original code, copyright and license are from [Go]{@link https://golang.org/src/math/atan2.go}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* Copyright (c) 2012 The Go Authors. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following disclaimer
* in the documentation and/or other materials provided with the
* distribution.
* * Neither the name of Google Inc. nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// MODULES //

var isinfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var signbit = require( '@stdlib/number/float64/base/signbit' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var atan = require( '@stdlib/math/base/special/atan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Evaluates the arctangent of a quotient of two numbers.
*
* ## Special Cases
*
* ```tex
* \begin{align}
* \operatorname{atan2}(y,\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atan2}(\mathrm{NaN},x) &= \mathrm{NaN}\\
* \operatorname{atan2}( +0,x \ge 0 ) &= +0 \\
* \operatorname{atan2}( -0, x \ge 0 ) &= -0 \\
* \operatorname{atan2}( +0,x \le -0 ) &= +\Pi \\
* \operatorname{atan2}( -0, x \le -0 ) &= -\Pi \\
* \operatorname{atan2}(+\infty, +\infty) &= +\tfrac{\Pi}{4} \\
* \operatorname{atan2}(-\infty, +\infty) &= -\tfrac{\Pi}{4} \\
* \operatorname{atan2}(+\infty, -\infty) &= +\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(-\infty, -\infty) &= -\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(y, +\infty) &= 0.0 \\
* \operatorname{atan2}(y>0, -\infty) &= +\Pi \\
* \operatorname{atan2}(y<0, -\infty) &= -\Pi \\
* \operatorname{atan2}(+\infty, x ) &= +\tfrac{\Pi}{2} \\
* \operatorname{atan2}(-\infty, x ) &= -\tfrac{\Pi}{2} \\
* \end{align}
* ```
*
* @param {number} y - numerator
* @param {number} x - denominator
* @returns {number} arctangent of `y/x` (in radians)
*
* @example
* var v = atan2( 2.0, 2.0 ); // => atan(1.0)
* // returns ~0.785
*
* @example
* var v = atan2( 6.0, 2.0 ); // => atan(3.0)
* // returns ~1.249
*
* @example
* var v = atan2( -1.0, -1.0 ); // => atan(1.0) - π
* // returns ~-2.356
*
* @example
* var v = atan2( 3.0, 0.0 ); // => π/2
* // returns ~1.571
*
* @example
* var v = atan2( -2.0, 0.0 ); // => -π/2
* // returns ~-1.571
*
* @example
* var v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var v = atan2( 3.0, NaN );
* // returns NaN
*
* @example
* var v = atan2( NaN, 2.0 );
* // returns NaN
*/
function atan2( y, x ) {
	var q;
	if ( isnan( x ) || isnan( y ) ) {
		return NaN;
	}
	if ( isinfinite( x ) ) {
		if ( x === PINF ) {
			if ( isinfinite( y ) ) {
				return copysign( PI / 4.0, y );
			}
			return copysign( 0.0, y );
		}
		// Case: x is -Infinity
		if ( isinfinite( y ) ) {
			return copysign( 3.0*PI/4.0, y );
		}
		return copysign( PI, y );
	}
	if ( isinfinite( y ) ) {
		return copysign( PI / 2.0, y );
	}
	if ( y === 0.0 ) {
		if ( x >= 0.0 && !signbit( x ) ) {
			return copysign( 0.0, y );
		}
		return copysign( PI, y );
	}
	if ( x === 0.0 ) {
		return copysign( PI / 2.0, y );
	}
	q = atan( y / x );
	if ( x < 0.0 ) {
		if ( q <= 0.0 ) {
			return q + PI;
		}
		return q - PI;
	}
	return q;
}


// EXPORTS //

module.exports = atan2;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/atan":1320,"@stdlib/math/base/special/copysign":1394,"@stdlib/number/float64/base/signbit":1923}],1324:[function(require,module,exports){
'use strict';

/**
* Evaluate the arctangent of the quotient of two numbers.
*
* @module @stdlib/math/base/special/atan2
*
* @example
* var v = atan2( 2.0, 2.0 ); // => atan(1.0)
* // returns ~0.785
*
* v = atan2( 6.0, 2.0 ); // => atan(3.0)
* // returns ~1.249
*
* v = atan2( -1.0, -1.0 ); // => atan(1.0) - π
* // returns ~-2.356
*
* v = atan2( 3.0, 0.0 ); // => π/2
* // returns ~1.571
*
* v = atan2( -2.0, 0.0 ); // => -π/2
* // returns ~-1.571
*
* v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* v = atan2( 3.0, NaN );
* // returns NaN
*
* v = atan2( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

var atan2 = require( './atan2.js' );


// EXPORTS //

module.exports = atan2;

},{"./atan2.js":1323}],1325:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_atanh.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// VARIABLES //

var NEAR_ZERO = 1.0 / (1 << 28); // 2**-28


// MAIN //

/**
* Computes the hyperbolic arctangent of a number.
*
* ## Method
*
* 1.  Reduce \\( x \\) to positive by \\( \operatorname{atanh}(-x) = -\operatorname{atanh}(x) \\)
*
* 2.  For \\( x \ge 0.5 \\), we calculate
*
*     ```tex
*     \operatorname{atanh}(x) = \frac{1}{2} \cdot \log\left( 1 + \tfrac{2x}{1-x} \right) = \frac{1}{2} \cdot \operatorname{log1p}\left( 2 \tfrac{x}{1-x} \right)
*     ```
*
*     For \\( x < 0.5 \\), we have
*
*     ```tex
*     \operatorname{atanh}(x) = \frac{1}{2} \cdot \operatorname{log1p}\left( 2x + \tfrac{2x^2}{1-x} \right)
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{atanh}(\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atanh}(1.0) &= \infty \\
* \operatorname{atanh}(-1.0) &= -\infty \\
* \end{align*}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arctangent (in radians)
*
* @example
* var v = atanh( 0.0 );
* // returns 0.0
*
* @example
* var v = atanh( 0.9 );
* // returns ~1.472
*
* @example
* var v = atanh( 1.0 );
* // returns Infinity
*
* @example
* var v = atanh( -1.0 );
* // returns -Infinity
*
* @example
* var v = atanh( NaN );
* // returns NaN
*/
function atanh( x ) {
	var sgn;
	var t;
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return PINF;
	}
	if ( x === -1.0 ) {
		return NINF;
	}
	if ( x < 0.0 ) {
		sgn = true;
		x = -x;
	}
	// Case: |x| < 2**-28
	if ( x < NEAR_ZERO ) {
		return ( sgn ) ? -x : x;
	}
	if ( x < 0.5 ) {
		t = x + x;
		t = 0.5 * log1p( t + ( t*x/(1-x) ) );
	} else {
		t = 0.5 * log1p( (x+x) / (1-x) );
	}
	return ( sgn ) ? -t : t;
}


// EXPORTS //

module.exports = atanh;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/log1p":1690}],1326:[function(require,module,exports){
'use strict';

/**
* Compute the hyperbolic arctangent of a number.
*
* @module @stdlib/math/base/special/atanh
*
* @example
* var atanh = require( '@stdlib/math/base/special/atanh' );
*
* var v = atanh( 0.0 );
* // returns 0.0
*
* v = atanh( 0.9 );
* // returns ~1.472
*
* v = atanh( 1.0 );
* // returns Infinity
*
* v = atanh( -1.0 );
* // returns -Infinity
*
* v = atanh( NaN );
* // returns NaN
*/

// MODULES //

var atanh = require( './atanh.js' );


// EXPORTS //

module.exports = atanh;

},{"./atanh.js":1325}],1327:[function(require,module,exports){
'use strict';

// MODULES //

var acos = require( '@stdlib/math/base/special/acos' );


// MAIN //

/**
* Computes the inverse versed cosine.
*
* @param {number} x - input value
* @returns {number} inverse versed cosine
*
* @example
* var v = avercos( 0.0 );
* // returns 0.0
*
* @example
* var v = avercos( -Math.PI/2.0 );
* // returns ~2.1783
*
* @example
* var v = avercos( -Math.PI/6.0 );
* // returns ~1.0742
*
* @example
* var v = avercos( NaN );
* // returns NaN
*/
function avercos( x ) {
	return acos( 1.0 + x );
}


// EXPORTS //

module.exports = avercos;

},{"@stdlib/math/base/special/acos":1302}],1328:[function(require,module,exports){
'use strict';

/**
* Compute the inverse versed cosine.
*
* @module @stdlib/math/base/special/avercos
*
* @example
* var avercos = require( '@stdlib/math/base/special/avercos' );
*
* var v = avercos( 0.0 );
* // returns 0.0
*
* v = avercos( -Math.PI/2.0 );
* // returns ~2.1783
*
* v = avercos( -Math.PI/6.0 );
* // returns ~1.0742
*
* v = avercos( NaN );
* // returns NaN
*/

// MODULES //

var avercos = require( './avercos.js' );


// EXPORTS //

module.exports = avercos;

},{"./avercos.js":1327}],1329:[function(require,module,exports){
'use strict';

// MODULES //

var acos = require( '@stdlib/math/base/special/acos' );


// MAIN //

/**
* Computes the inverse versed sine.
*
* @param {number} x - input value
* @returns {number} inverse versed sine
*
* @example
* var v = aversin( 0.0 );
* // returns 0.0
*
* @example
* var v = aversin( Math.PI/2.0 );
* // returns ~2.1783
*
* @example
* var v = aversin( Math.PI/6.0 );
* // returns ~1.0742
*
* @example
* var v = aversin( NaN );
* // returns NaN
*/
function aversin( x ) {
	return acos( 1.0 - x );
}


// EXPORTS //

module.exports = aversin;

},{"@stdlib/math/base/special/acos":1302}],1330:[function(require,module,exports){
'use strict';

/**
* Compute the inverse versed sine.
*
* @module @stdlib/math/base/special/aversin
*
* @example
* var aversin = require( '@stdlib/math/base/special/aversin' );
*
* var v = aversin( 0.0 );
* // returns 0.0
*
* v = aversin( Math.PI/2.0 );
* // returns ~2.1783
*
* v = aversin( Math.PI/6.0 );
* // returns ~1.0742
*
* v = aversin( NaN );
* // returns NaN
*/

// MODULES //

var aversin = require( './aversin.js' );


// EXPORTS //

module.exports = aversin;

},{"./aversin.js":1329}],1331:[function(require,module,exports){
module.exports=[
  1.00000000000000000000000000000000000000000,
  0.166666666666666666666666666666666666666667,
  -0.0333333333333333333333333333333333333333333,
  0.0238095238095238095238095238095238095238095,
  -0.0333333333333333333333333333333333333333333,
  0.0757575757575757575757575757575757575757576,
  -0.253113553113553113553113553113553113553114,
  1.16666666666666666666666666666666666666667,
  -7.09215686274509803921568627450980392156863,
  54.9711779448621553884711779448621553884712,
  -529.124242424242424242424242424242424242424,
  6192.12318840579710144927536231884057971014,
  -86580.2531135531135531135531135531135531136,
  1.42551716666666666666666666666666666666667e6,
  -2.72982310678160919540229885057471264367816e7,
  6.01580873900642368384303868174835916771401e8,
  -1.51163157670921568627450980392156862745098e10,
  4.29614643061166666666666666666666666666667e11,
  -1.37116552050883327721590879485616327721591e13,
  4.88332318973593166666666666666666666666667e14,
  -1.92965793419400681486326681448632668144863e16,
  8.41693047573682615000553709856035437430786e17,
  -4.03380718540594554130768115942028985507246e19,
  2.11507486380819916056014539007092198581560e21,
  -1.20866265222965259346027311937082525317819e23,
  7.50086674607696436685572007575757575757576e24,
  -5.03877810148106891413789303052201257861635e26,
  3.65287764848181233351104308429711779448622e28,
  -2.84987693024508822262691464329106781609195e30,
  2.38654274996836276446459819192192149717514e32,
  -2.13999492572253336658107447651910973926742e34,
  2.05009757234780975699217330956723102516667e36,
  -2.09380059113463784090951852900279701847092e38,
  2.27526964884635155596492603527692645814700e40,
  -2.62577102862395760473030497361582020814490e42,
  3.21250821027180325182047923042649852435219e44,
  -4.15982781667947109139170744952623589366896e46,
  5.69206954820352800238834562191210586444805e48,
  -8.21836294197845756922906534686173330145509e50,
  1.25029043271669930167323398297028955241772e53,
  -2.00155832332483702749253291988132987687242e55,
  3.36749829153643742333966769033387530162196e57,
  -5.94709705031354477186604968440515408405791e59,
  1.10119103236279775595641307904376916046305e62,
  -2.13552595452535011886583850190410656789733e64,
  4.33288969866411924196166130593792062184514e66,
  -9.18855282416693282262005552155018971389604e68,
  2.03468967763290744934550279902200200659751e71,
  -4.70038339580357310785752555350060606545967e73,
  1.13180434454842492706751862577339342678904e76,
  -2.83822495706937069592641563364817647382847e78,
  7.40642489796788506297508271409209841768797e80,
  -2.00964548027566044834656196727153631868673e83,
  5.66571700508059414457193460305193569614195e85,
  -1.65845111541362169158237133743199123014950e88,
  5.03688599504923774192894219151801548124424e90,
  -1.58614682376581863693634015729664387827410e93,
  5.17567436175456269840732406825071225612408e95,
  -1.74889218402171173396900258776181591451415e98,
  6.11605199949521852558245252642641677807677e100,
  -2.21227769127078349422883234567129324455732e103,
  8.27227767987709698542210624599845957312047e105,
  -3.19589251114157095835916343691808148735263e108,
  1.27500822233877929823100243029266798669572e111,
  -5.25009230867741338994028246245651754469199e113,
  2.23018178942416252098692981988387281437383e116,
  -9.76845219309552044386335133989802393011669e118,
  4.40983619784529542722726228748131691918758e121,
  -2.05085708864640888397293377275830154864566e124,
  9.82144332797912771075729696020975210414919e126,
  -4.84126007982088805087891967099634127611305e129,
  2.45530888014809826097834674040886903996737e132,
  -1.28069268040847475487825132786017857218118e135,
  6.86761671046685811921018885984644004360924e137,
  -3.78464685819691046949789954163795568144895e140,
  2.14261012506652915508713231351482720966602e143,
  -1.24567271371836950070196429616376072194583e146,
  7.43457875510001525436796683940520613117807e148,
  -4.55357953046417048940633332233212748767721e151,
  2.86121128168588683453638472510172325229190e154,
  -1.84377235520338697276882026536287854875414e157,
  1.21811545362210466995013165065995213558174e160,
  -8.24821871853141215484818457296893447301419e162,
  5.72258779378329433296516498142978615918685e165,
  -4.06685305250591047267679693831158655602196e168,
  2.95960920646420500628752695815851870426379e171,
  -2.20495225651894575090311752273445984836379e174,
  1.68125970728895998058311525151360665754464e177,
  -1.31167362135569576486452806355817153004431e180,
  1.04678940094780380821832853929823089643829e183,
  -8.54328935788337077185982546299082774593270e185,
  7.12878213224865423522884066771438224721245e188,
  -6.08029314555358993000847118686477458461988e191,
  5.29967764248499239300942910043247266228490e194,
  -4.71942591687458626443646229013379911103761e197,
  4.29284137914029810894168296541074669045521e200,
  -3.98767449682322074434477655542938795106651e203,
  3.78197804193588827138944181161393327898220e206,
  -3.66142336836811912436858082151197348755196e209,
  3.61760902723728623488554609298914089477541e212,
  -3.64707726451913543621383088655499449048682e215,
  3.75087554364544090983452410104814189306842e218,
  -3.93458672964390282694891288533713429355657e221,
  4.20882111481900820046571171111494898242731e224,
  -4.59022962206179186559802940573325591059371e227,
  5.10317257726295759279198185106496768539760e230,
  -5.78227623036569554015377271242917142512200e233,
  6.67624821678358810322637794412809363451080e236,
  -7.85353076444504163225916259639312444428230e239,
  9.41068940670587255245443288258762485293948e242,
  -1.14849338734651839938498599206805592548354e246,
  1.42729587428487856771416320087122499897180e249,
  -1.80595595869093090142285728117654560926719e252,
  2.32615353076608052161297985184708876161736e255,
  -3.04957517154995947681942819261542593785327e258,
  4.06858060764339734424012124124937318633684e261,
  -5.52310313219743616252320044093186392324280e264,
  7.62772793964343924869949690204961215533859e267,
  -1.07155711196978863132793524001065396932667e271,
  1.53102008959691884453440916153355334355847e274,
  -2.22448916821798346676602348865048510824835e277,
  3.28626791906901391668189736436895275365183e280,
  -4.93559289559603449020711938191575963496999e283,
  7.53495712008325067212266049779283956727824e286,
  -1.16914851545841777278088924731655041783900e290,
  1.84352614678389394126646201597702232396492e293,
  -2.95368261729680829728014917350525183485207e296,
  4.80793212775015697668878704043264072227967e299,
  -7.95021250458852528538243631671158693036798e302,
  1.33527841873546338750122832017820518292039e306
]

},{}],1332:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isOdd = require( '@stdlib/math/base/assert/is-odd' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var BERNOULLI = require( './bernoulli.json' );


// VARIABLES //

var MAX_BERNOULLI = 258|0; // asm type annotation


// MAIN //

/**
* Computes the nth Bernoulli number.
*
* @param {NonNegativeInteger} n - the Bernoulli number to compute
* @returns {number} Bernoulli number
*
* @example
* var y = bernoulli( 0 );
* // returns 1.0
*
* @example
* var y = bernoulli( 1 );
* // returns 0.0
*
* @example
* var y = bernoulli( 2 );
* // returns ~0.166
*
* @example
* var y = bernoulli( 3 );
* // returns 0.0
*
* @example
* var y = bernoulli( 4 );
* // returns ~-0.033
*
* @example
* var y = bernoulli( 5 );
* // returns 0.0
*
* @example
* var y = bernoulli( 20 );
* // returns ~-529.124
*
* @example
* var y = bernoulli( 260 );
* // returns -Infinity
*
* @example
* var y = bernoulli( 262 );
* // returns Infinity
*
* @example
* var y = bernoulli( NaN );
* // returns NaN
*/
function bernoulli( n ) {
	if ( isnan( n ) || !isNonNegativeInteger( n ) ) {
		return NaN;
	}
	if ( isOdd( n ) ) {
		return 0.0;
	}
	if ( n > MAX_BERNOULLI ) {
		return ( (n/2)&1 ) ? PINF : NINF;
	}
	return BERNOULLI[ n/2 ];
}


// EXPORTS //

module.exports = bernoulli;

},{"./bernoulli.json":1331,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/assert/is-odd":138}],1333:[function(require,module,exports){
'use strict';

/**
* Compute the nth Bernoulli number.
*
* @module @stdlib/math/base/special/bernoulli
*
* @example
* var bernoulli = require( '@stdlib/math/base/special/bernoulli' );
*
* var y = bernoulli( 0 );
* // returns 1.0
*
* y = bernoulli( 1 );
* // returns 0.0
*
* y = bernoulli( 2 );
* // returns ~0.166
*
* y = bernoulli( 3 );
* // returns 0.0
*
* y = bernoulli( 4 );
* // returns ~-0.033
*
* y = bernoulli( 5 );
* // returns 0.0
*
* y = bernoulli( 20 );
* // returns ~-529.124
*/

// MODULES //

var bernoulli = require( './bernoulli.js' );


// EXPORTS //

module.exports = bernoulli;

},{"./bernoulli.js":1332}],1334:[function(require,module,exports){
'use strict';

/**
* Compute the Bessel function of the first kind of order zero.
*
* @module @stdlib/math/base/special/besselj0
*
* @example
* var j0 = require( '@stdlib/math/base/special/besselj0' );
*
* var v = j0( 0.0 );
* // returns 1.0
*
* v = j0( 1.0 );
* // returns ~0.765
*
* v = j0( Infinity );
* // returns 0.0
*
* v = j0( -Infinity );
* // returns 0.0
*
* v = j0( NaN );
* // returns NaN
*/

// MODULES //

var j0 = require( './j0.js' );


// EXPORTS //

module.exports = j0;

},{"./j0.js":1335}],1335:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_j0.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright Xiaogang Zhang, 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var sincos = require( '@stdlib/math/base/special/sincos' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var poly1 = require( './rational_p1q1.js' );
var poly2 = require( './rational_p2q2.js' );
var polyC = require( './rational_pcqc.js' );
var polyS = require( './rational_psqs.js' );


// VARIABLES //

var ONE_DIV_SQRT_PI = 0.5641895835477563;
var x1 = 2.4048255576957727686e+00;
var x2 = 5.5200781102863106496e+00;
var x11 = 6.160e+02;
var x12 = -1.42444230422723137837e-03;
var x21 = 1.4130e+03;
var x22 = 5.46860286310649596604e-04;

// `sincos` workspace:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the first kind of order zero.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = j0( 0.0 );
* // returns 1.0
*
* v = j0( 1.0 );
* // returns ~0.765
*
* v = j0( Infinity );
* // returns 0.0
*
* v = j0( -Infinity );
* // returns 0.0
*
* v = j0( NaN );
* // returns NaN
*/
function j0( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var f;

	if ( x < 0 ) {
		x = -x;
	}
	if ( x === PINF ) {
		return 0.0;
	}
	if ( x === 0 ) {
		return 1.0;
	}
	if ( x <= 4.0 ) {
		y = x * x;
		r = poly1( y );
		f = ( x+x1 ) * ( (x - (x11/256.0)) - x12 );
		return f * r;
	}
	if ( x <= 8.0 ) {
		y = 1.0 - ( ( x*x )/64.0 );
		r = poly2( y );
		f = ( x+x2 ) * ( (x - (x21/256.0)) - x22 );
		return f * r;
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = polyC( y2 );
	rs = polyS( y2 );
	f = ONE_DIV_SQRT_PI / sqrt(x);

	/*
	* What follows is really just:
	*
	* ```
	* var z = x - pi/4;
	* return f * (rc * cos(z) - y * rs * sin(z));
	* ```
	*
	* But using the addition formulae for sin and cos, plus the special values for sin/cos of `π/4`.
	*/
	sincos( sc, x );
	return f * ( ( rc * (sc[1]+sc[0]) ) - ( (y*rs) * (sc[0]-sc[1]) ) );
}


// EXPORTS //

module.exports = j0;

},{"./rational_p1q1.js":1336,"./rational_p2q2.js":1337,"./rational_pcqc.js":1338,"./rational_psqs.js":1339,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/sincos":1810,"@stdlib/math/base/special/sqrt":1826}],1336:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.17291506903064494;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -412986685009.9087 + (x * (27282507878.60594 + (x * (-621407004.2354012 + (x * (6630299.79048338 + (x * (-36629.81465510709 + (x * (103.44222815443189 + (x * -0.12117036164593528))))))))))); // eslint-disable-line max-len
		s2 = 2388378799633.229 + (x * (26328198300.85965 + (x * (139850973.72263435 + (x * (456126.9622421994 + (x * (936.1402239233771 + (x * (1.0 + (x * 0.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.12117036164593528 + (x * (103.44222815443189 + (x * (-36629.81465510709 + (x * (6630299.79048338 + (x * (-621407004.2354012 + (x * (27282507878.60594 + (x * -412986685009.9087))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (1.0 + (x * (936.1402239233771 + (x * (456126.9622421994 + (x * (139850973.72263435 + (x * (26328198300.85965 + (x * 2388378799633.229))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1337:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.005119512965174424;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -1831.9397969392085 + (x * (-12254.07816137899 + (x * (-7287.970246446462 + (x * (10341.910641583727 + (x * (11725.046279757104 + (x * (4417.670702532509 + (x * (743.2119668062425 + (x * 48.5917033559165))))))))))))); // eslint-disable-line max-len
		s2 = -357834.78026152303 + (x * (245991.0226258631 + (x * (-84055.06259116957 + (x * (18680.99000835919 + (x * (-2945.876654550934 + (x * (333.07310774649073 + (x * (-25.258076240801554 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 48.5917033559165 + (x * (743.2119668062425 + (x * (4417.670702532509 + (x * (11725.046279757104 + (x * (10341.910641583727 + (x * (-7287.970246446462 + (x * (-12254.07816137899 + (x * -1831.9397969392085))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-25.258076240801554 + (x * (333.07310774649073 + (x * (-2945.876654550934 + (x * (18680.99000835919 + (x * (-84055.06259116957 + (x * (245991.0226258631 + (x * -357834.78026152303))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1338:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 22779.090197304686 + (x * (41345.38663958076 + (x * (21170.523380864943 + (x * (3480.648644324927 + (x * (153.76201909008356 + (x * 0.8896154842421046))))))))); // eslint-disable-line max-len
		s2 = 22779.090197304686 + (x * (41370.41249551042 + (x * (21215.350561880117 + (x * (3502.8735138235606 + (x * (157.11159858080893 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.8896154842421046 + (x * (153.76201909008356 + (x * (3480.648644324927 + (x * (21170.523380864943 + (x * (41345.38663958076 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (157.11159858080893 + (x * (3502.8735138235606 + (x * (21215.350561880117 + (x * (41370.41249551042 + (x * 22779.090197304686))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1339:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.015625;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -89.22660020080009 + (x * (-185.91953644342993 + (x * (-111.83429920482737 + (x * (-22.300261666214197 + (x * (-1.244102674583564 + (x * -0.008803330304868075))))))))); // eslint-disable-line max-len
		s2 = 5710.502412851206 + (x * (11951.131543434614 + (x * (7264.278016921102 + (x * (1488.7231232283757 + (x * (90.59376959499312 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.008803330304868075 + (x * (-1.244102674583564 + (x * (-22.300261666214197 + (x * (-111.83429920482737 + (x * (-185.91953644342993 + (x * -89.22660020080009))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (90.59376959499312 + (x * (1488.7231232283757 + (x * (7264.278016921102 + (x * (11951.131543434614 + (x * 5710.502412851206))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1340:[function(require,module,exports){
'use strict';

/**
* Compute the Bessel function of the first kind of order one.
*
* @module @stdlib/math/base/special/besselj1
*
* @example
* var j1 = require( '@stdlib/math/base/special/besselj1' );
*
* var v = j1( 0.0 );
* // returns 0.0
*
* v = j1( 1.0 );
* // returns ~0.440
*
* v = j1( Infinity );
* // returns 0.0
*
* v = j1( -Infinity );
* // returns 0.0
*
* v = j1( NaN );
* // returns NaN
*/

// MODULES //

var j1 = require( './j1.js' );


// EXPORTS //

module.exports = j1;

},{"./j1.js":1341}],1341:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_j1.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright Xiaogang Zhang, 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var sincos = require( '@stdlib/math/base/special/sincos' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
var poly1 = require( './rational_p1q1.js' );
var poly2 = require( './rational_p2q2.js' );
var polyC = require( './rational_pcqc.js' );
var polyS = require( './rational_psqs.js' );


// VARIABLES //

var x1 = 3.8317059702075123156e+00;
var x2 = 7.0155866698156187535e+00;
var x11 = 9.810e+02;
var x12 = -3.2527979248768438556e-04;
var x21 = 1.7960e+03;
var x22 = -3.8330184381246462950e-05;

// `sincos` workspace:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the first kind of order one.
*
* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = j1( 0.0 );
* // returns 0.0
*
* v = j1( 1.0 );
* // returns ~0.440
*
* v = j1( Infinity );
* // returns 0.0
*
* v = j1( -Infinity );
* // returns 0.0
*
* v = j1( NaN );
* // returns NaN
*/
function j1( x ) {
	var value;
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var f;
	var w;

	w = abs( x );
	if ( x === 0.0 ) {
		return 0.0;
	}
	if ( w === PINF ) {
		return 0.0;
	}
	if ( w <= 4.0 ) {
		y = x * x;
		r = poly1( y );
		f = w * ( w+x1 ) * ( ( w - (x11/256.0) ) - x12 );
		value = f * r;
	} else if ( w <= 8.0 ) {
		y = x * x;
		r = poly2( y );
		f = w * ( w+x2 ) * ( ( w - (x21/256.0) ) - x22 );
		value = f * r;
	} else {
		y = 8.0 / w;
		y2 = y * y;
		rc = polyC( y2 );
		rs = polyS( y2 );
		f = 1.0 / ( sqrt( w ) * SQRT_PI );

		/*
		* What follows is really just:
		*
		* ```
		* z = w - 0.75 * pi;
		* value = f * ( rc * cos( z ) - y * rs * sin( z ) );
		* ```
		*
		* but using the sin/cos addition rules plus constants for the values of sin/cos of `3π/4` which then cancel out with corresponding terms in "f".
		*/
		sincos( sc, w );
		value = f * ( ( rc * (sc[0]-sc[1]) ) + ( (y*rs) * (sc[0]+sc[1]) ) );
	}
	if ( x < 0.0 ) {
		value *= -1.0;
	}
	return value;
}


// EXPORTS //

module.exports = j1;

},{"./rational_p1q1.js":1342,"./rational_p2q2.js":1343,"./rational_pcqc.js":1344,"./rational_psqs.js":1345,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-pi":107,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/sincos":1810,"@stdlib/math/base/special/sqrt":1826}],1342:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.03405537391318949;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -142585098013.66644 + (x * (6678104126.14924 + (x * (-115486967.64841276 + (x * (980629.0409895825 + (x * (-4461.579298277507 + (x * (10.650724020080236 + (x * -0.010767857011487301))))))))))); // eslint-disable-line max-len
		s2 = 4186860446082.0176 + (x * (42091902282.58013 + (x * (202283751.40097034 + (x * (591176.1449417479 + (x * (1074.227223951738 + (x * (1.0 + (x * 0.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.010767857011487301 + (x * (10.650724020080236 + (x * (-4461.579298277507 + (x * (980629.0409895825 + (x * (-115486967.64841276 + (x * (6678104126.14924 + (x * -142585098013.66644))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (1.0 + (x * (1074.227223951738 + (x * (591176.1449417479 + (x * (202283751.40097034 + (x * (42091902282.58013 + (x * 4186860446082.0176))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1343:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.010158790774176108;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -17527881995806512.0 + (x * (1660853173129901.8 + (x * (-36658018905416.664 + (x * (355806656709.1062 + (x * (-1811393126.9860668 + (x * (5079326.614801118 + (x * (-7502.334222078161 + (x * 4.6179191852758255))))))))))))); // eslint-disable-line max-len
		s2 = 1725390588844768000.0 + (x * (17128800897135812.0 + (x * (84899346165481.42 + (x * (276227772862.44086 + (x * (648725028.9959639 + (x * (1126712.5065029138 + (x * (1388.6978985861358 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 4.6179191852758255 + (x * (-7502.334222078161 + (x * (5079326.614801118 + (x * (-1811393126.9860668 + (x * (355806656709.1062 + (x * (-36658018905416.664 + (x * (1660853173129901.8 + (x * -17527881995806512.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1388.6978985861358 + (x * (1126712.5065029138 + (x * (648725028.9959639 + (x * (276227772862.44086 + (x * (84899346165481.42 + (x * (17128800897135812.0 + (x * 1725390588844768000.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1344:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4435757.816794128 + (x * (-9942246.505077641 + (x * (-6603373.248364939 + (x * (-1523529.3511811374 + (x * (-109824.05543459347 + (x * (-1611.6166443246102 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = -4435757.816794128 + (x * (-9934124.389934586 + (x * (-6585339.4797230875 + (x * (-1511809.5066341609 + (x * (-107263.8599110382 + (x * (-1455.0094401904962 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-1611.6166443246102 + (x * (-109824.05543459347 + (x * (-1523529.3511811374 + (x * (-6603373.248364939 + (x * (-9942246.505077641 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-1455.0094401904962 + (x * (-107263.8599110382 + (x * (-1511809.5066341609 + (x * (-6585339.4797230875 + (x * (-9934124.389934586 + (x * -4435757.816794128))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1345:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.046875;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 33220.913409857225 + (x * (85145.1606753357 + (x * (66178.83658127084 + (x * (18494.262873223866 + (x * (1706.375429020768 + (x * (35.26513384663603 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 708712.8194102874 + (x * (1819458.0422439973 + (x * (1419460.669603721 + (x * (400294.43582266977 + (x * (37890.2297457722 + (x * (863.8367769604992 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (35.26513384663603 + (x * (1706.375429020768 + (x * (18494.262873223866 + (x * (66178.83658127084 + (x * (85145.1606753357 + (x * 33220.913409857225))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (863.8367769604992 + (x * (37890.2297457722 + (x * (400294.43582266977 + (x * (1419460.669603721 + (x * (1819458.0422439973 + (x * 708712.8194102874))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1346:[function(require,module,exports){
'use strict';

/**
* Compute the Bessel function of the second kind of order zero.
*
* @module @stdlib/math/base/special/bessely0
*
* @example
* var y0 = require( '@stdlib/math/base/special/bessely0' );
*
* var v = y0( 0.0 );
* // returns -Infinity
*
* v = y0( 1.0 );
* // returns ~0.088
*
* v = y0( -1.0 );
* // returns NaN
*
* v = y0( Infinity );
* // returns 0.0
*
* v = y0( -Infinity );
* // returns NaN
*
* v = y0( NaN );
* // returns NaN
*/

// MODULES //

var y0 = require( './y0.js' );


// EXPORTS //

module.exports = y0;

},{"./y0.js":1352}],1347:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.18214429522164177;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 107235387820.03177 + (x * (-8371625545.12605 + (x * (204222743.5737662 + (x * (-2128754.84744018 + (x * (10102.532948020907 + (x * -18.402381979244993))))))))); // eslint-disable-line max-len
		s2 = 588738657389.9703 + (x * (8161718777.729036 + (x * (55662956.624278255 + (x * (238893.93209447255 + (x * (664.7598668924019 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -18.402381979244993 + (x * (10102.532948020907 + (x * (-2128754.84744018 + (x * (204222743.5737662 + (x * (-8371625545.12605 + (x * 107235387820.03177))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (664.7598668924019 + (x * (238893.93209447255 + (x * (55662956.624278255 + (x * (8161718777.729036 + (x * 588738657389.9703))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1348:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.051200622130023854;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -22213976967566.19 + (x * (-551074352067.2264 + (x * (43600098638.60306 + (x * (-695904393.9461962 + (x * (4690528.861167863 + (x * (-14566.865832663636 + (x * 17.427031242901595))))))))))); // eslint-disable-line max-len
		s2 = 433861465807072.6 + (x * (5426682441941.234 + (x * (34015103849.97124 + (x * (139602027.7098683 + (x * (406699.82352539554 + (x * (830.3085761207029 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 17.427031242901595 + (x * (-14566.865832663636 + (x * (4690528.861167863 + (x * (-695904393.9461962 + (x * (43600098638.60306 + (x * (-551074352067.2264 + (x * -22213976967566.19))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (830.3085761207029 + (x * (406699.82352539554 + (x * (139602027.7098683 + (x * (34015103849.97124 + (x * (5426682441941.234 + (x * 433861465807072.6))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1349:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.023356489432789604;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -8072872690515021.0 + (x * (670166418691732.4 + (x * (-128299123640.88687 + (x * (-193630512667.72083 + (x * (2195882717.0518103 + (x * (-10085539.923498211 + (x * (21363.5341693139 + (x * -17.439661319197498))))))))))))); // eslint-disable-line max-len
		s2 = 345637246288464600.0 + (x * (3927242556964031.0 + (x * (22598377924042.9 + (x * (86926121104.20982 + (x * (247272194.75672302 + (x * (539247.3920976806 + (x * (879.0336216812844 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -17.439661319197498 + (x * (21363.5341693139 + (x * (-10085539.923498211 + (x * (2195882717.0518103 + (x * (-193630512667.72083 + (x * (-128299123640.88687 + (x * (670166418691732.4 + (x * -8072872690515021.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (879.0336216812844 + (x * (539247.3920976806 + (x * (247272194.75672302 + (x * (86926121104.20982 + (x * (22598377924042.9 + (x * (3927242556964031.0 + (x * 345637246288464600.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1350:[function(require,module,exports){
arguments[4][1338][0].apply(exports,arguments)
},{"dup":1338}],1351:[function(require,module,exports){
arguments[4][1339][0].apply(exports,arguments)
},{"dup":1339}],1352:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y0.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright Xiaogang Zhang, 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var sincos = require( '@stdlib/math/base/special/sincos' );
var besselj0 = require( '@stdlib/math/base/special/besselj0' );
var poly1 = require( './rational_p1q1.js' );
var poly2 = require( './rational_p2q2.js' );
var poly3 = require( './rational_p3q3.js' );
var polyC = require( './rational_pcqc.js' );
var polyS = require( './rational_psqs.js' );


// VARIABLES //

var ONE_DIV_SQRT_PI = 1.0 / SQRT_PI;
var TWO_DIV_PI = 2.0 / PI;

var x1 = 8.9357696627916752158e-01;
var x2 = 3.9576784193148578684e+00;
var x3 = 7.0860510603017726976e+00;
var x11 = 2.280e+02;
var x12 = 2.9519662791675215849e-03;
var x21 = 1.0130e+03;
var x22 = 6.4716931485786837568e-04;
var x31 = 1.8140e+03;
var x32 = 1.1356030177269762362e-04;

// `sincos` workspace:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the second kind of order zero.

* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = y0( 0.0 );
* // returns -Infinity
*
* v = y0( 1.0 );
* // returns ~0.088
*
* v = y0( -1.0 );
* // returns NaN
*
* v = y0( Infinity );
* // returns 0.0
*
* v = y0( -Infinity );
* // returns NaN
*
* v = y0( NaN );
* // returns NaN
*/
function y0( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var z;
	var f;

	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return NINF;
	}
	if ( x === PINF ) {
		return 0.0;
	}
	if ( x <= 3.0 ) {
		y = x * x;
		z = ( ln( x/x1 ) * besselj0( x ) ) * TWO_DIV_PI;
		r = poly1( y );
		f = ( x+x1 ) * ( ( x - (x11/256.0) ) - x12 );
		return z + ( f*r );
	}
	if ( x <= 5.5 ) {
		y = x * x;
		z = ( ln( x/x2 ) * besselj0( x ) ) * TWO_DIV_PI;
		r = poly2( y );
		f = ( x+x2 ) * ( (x - (x21/256.0)) - x22 );
		return z + ( f*r );
	}
	if ( x <= 8.0 ) {
		y = x * x;
		z = ( ln( x/x3 ) * besselj0( x ) ) * TWO_DIV_PI;
		r = poly3( y );
		f = ( x+x3 ) * ( (x - (x31/256.0)) - x32 );
		return z + ( f*r );
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = polyC( y2 );
	rs = polyS( y2 );
	f = ONE_DIV_SQRT_PI / sqrt( x );

	/*
	* The following code is really just:
	*
	* ```
	* z = x - 0.25 * pi;
	* value = f * ( rc * sin( z ) + y * rs * cos( z ) );
	* ```
	*
	* But using the sin/cos addition formulae and constant values for sin/cos of `π/4` which then cancel part of the "f" term as they're all `1/sqrt(2)`:
	*/
	sincos( sc, x );
	return f * ( ( rc * (sc[0]-sc[1]) ) + ( (y*rs) * (sc[1]+sc[0]) ) );
}


// EXPORTS //

module.exports = y0;

},{"./rational_p1q1.js":1347,"./rational_p2q2.js":1348,"./rational_p3q3.js":1349,"./rational_pcqc.js":1350,"./rational_psqs.js":1351,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-pi":107,"@stdlib/math/base/special/besselj0":1334,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sincos":1810,"@stdlib/math/base/special/sqrt":1826}],1353:[function(require,module,exports){
'use strict';

/**
* Compute the Bessel function of the second kind of order zero.
*
* @module @stdlib/math/base/special/bessely1
*
* @example
* var y1 = require( '@stdlib/math/base/special/bessely1' );
*
* var v = y1( 0.0 );
* // returns -Infinity
*
* v = y1( 1.0 );
* // returns ~-0.781
*
* v = y1( -1.0 );
* // returns NaN
*
* v = y1( Infinity );
* // returns 0.0
*
* v = y1( -Infinity );
* // returns NaN
*
* v = y1( NaN );
* // returns NaN
*/

// MODULES //

var y1 = require( './y1.js' );


// EXPORTS //

module.exports = y1;

},{"./y1.js":1358}],1354:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.13187550549740895;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 40535726612579.55 + (x * (5470861171652.543 + (x * (-375959744978.196 + (x * (7214454821.450256 + (x * (-59157479.9974084 + (x * (221579.5322228026 + (x * -317.1442466004613))))))))))); // eslint-disable-line max-len
		s2 = 307378739210792.9 + (x * (4127228620040.646 + (x * (27800352738.690586 + (x * (122504351.22182964 + (x * (381364.70753052575 + (x * (820.7990816839387 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -317.1442466004613 + (x * (221579.5322228026 + (x * (-59157479.9974084 + (x * (7214454821.450256 + (x * (-375959744978.196 + (x * (5470861171652.543 + (x * 40535726612579.55))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (820.7990816839387 + (x * (381364.70753052575 + (x * (122504351.22182964 + (x * (27800352738.690586 + (x * (4127228620040.646 + (x * 307378739210792.9))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1355:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.021593919914419626;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 11514276357909012000.0 + (x * (-5680809457472421000.0 + (x * (-23638408497043136.0 + (x * (4068627528980474.5 + (x * (-59530713129741.984 + (x * (374536739624.3849 + (x * (-1195796191.2070618 + (x * (1915380.6858264203 + (x * -1233.7180442012952))))))))))))))); // eslint-disable-line max-len
		s2 = 533218443133161800000.0 + (x * (5696819882285718000.0 + (x * (30837179548112880.0 + (x * (111870100658569.7 + (x * (302217668529.60406 + (x * (635503180.8708892 + (x * (1045374.8201934079 + (x * (1285.516484932161 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -1233.7180442012952 + (x * (1915380.6858264203 + (x * (-1195796191.2070618 + (x * (374536739624.3849 + (x * (-59530713129741.984 + (x * (4068627528980474.5 + (x * (-23638408497043136.0 + (x * (-5680809457472421000.0 + (x * 11514276357909012000.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1285.516484932161 + (x * (1045374.8201934079 + (x * (635503180.8708892 + (x * (302217668529.60406 + (x * (111870100658569.7 + (x * (30837179548112880.0 + (x * (5696819882285718000.0 + (x * 533218443133161800000.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1356:[function(require,module,exports){
arguments[4][1344][0].apply(exports,arguments)
},{"dup":1344}],1357:[function(require,module,exports){
arguments[4][1345][0].apply(exports,arguments)
},{"dup":1345}],1358:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y1.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright Xiaogang Zhang, 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var sincos = require( '@stdlib/math/base/special/sincos' );
var besselj1 = require( '@stdlib/math/base/special/besselj1' );
var poly1 = require( './rational_p1q1.js' );
var poly2 = require( './rational_p2q2.js' );
var polyC = require( './rational_pcqc.js' );
var polyS = require( './rational_psqs.js' );


// VARIABLES //

var ONE_DIV_SQRT_PI = 1.0 / SQRT_PI;
var TWO_DIV_PI = 2.0 / PI;

var x1 = 2.1971413260310170351e+00;
var x2 = 5.4296810407941351328e+00;
var x11 = 5.620e+02;
var x12 = 1.8288260310170351490e-03;
var x21 = 1.3900e+03;
var x22 = -6.4592058648672279948e-06;

// `sincos` workspace:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Bessel function of the second kind of order zero.
*
* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at `1.0e-308` but trends progressively to zero at `5e-324`. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at `5e-324`.
*
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var v = y1( 0.0 );
* // returns -Infinity
*
* v = y1( 1.0 );
* // returns ~-0.781
*
* v = y1( -1.0 );
* // returns NaN
*
* v = y1( Infinity );
* // returns 0.0
*
* v = y1( -Infinity );
* // returns NaN
*
* v = y1( NaN );
* // returns NaN
*/
function y1( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var z;
	var f;

	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return NINF;
	}
	if ( x === PINF ) {
		return 0.0;
	}
	if ( x <= 4.0 ) {
		y = x * x;
		z = ( ln( x/x1 ) * besselj1( x ) ) * TWO_DIV_PI;
		r = poly1( y );
		f = ( ( x+x1 ) * ( (x - (x11/256.0)) - x12 ) ) / x;
		return z + ( f*r );
	}
	if ( x <= 8.0 ) {
		y = x * x;
		z = ( ln( x/x2 ) * besselj1( x ) ) * TWO_DIV_PI;
		r = poly2( y );
		f = ( ( x+x2 ) * ( (x - (x21/256.0)) - x22 ) ) / x;
		return z + ( f*r );
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = polyC( y2 );
	rs = polyS( y2 );
	f = ONE_DIV_SQRT_PI / sqrt( x );

	/*
	* This code is really just:
	*
	* ```
	* z = x - 0.75 * PI;
	* return f * (rc * sin(z) + y * rs * cos(z));
	* ```
	*
	* But using the sin/cos addition rules, plus constants for sin/cos of `3π/4` which then cancel out with corresponding terms in "f".
	*/
	sincos( sc, x );
	return f * ( ( ( (y*rs) * (sc[0]-sc[1]) ) - ( rc * (sc[0]+sc[1]) ) ) );
}


// EXPORTS //

module.exports = y1;

},{"./rational_p1q1.js":1354,"./rational_p2q2.js":1355,"./rational_pcqc.js":1356,"./rational_psqs.js":1357,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-pi":107,"@stdlib/math/base/special/besselj1":1340,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sincos":1810,"@stdlib/math/base/special/sqrt":1826}],1359:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var E = require( '@stdlib/constants/math/float64-e' );
var EPSILON = require( '@stdlib/constants/math/float64-eps' );
var lanczosSumExpGScaled = require( './lanczos_sum_expg_scaled.js' ); // Lanczos approximation scaled by exp(G)


// VARIABLES //

var G = 10.90051099999999983936049829935654997826;


// MAIN //

/**
* Evaluate the beta function.
*
* @param {NonNegativeNumber} a - input value
* @param {NonNegativeNumber} b - input value
* @returns {number} evaluated beta function
*
* @example
* var v = beta( 0, 0 );
* // returns Infinity
*
* @example
* var v = beta( 1, 1 );
* // returns 1
*
* @example
* var v = beta( -1, 2 );
* // returns NaN
*
* @example
* var v = beta( 5, 0.2 );
* // returns ~3.382
*
* @example
* var v = beta( 4, 1 );
* // returns 0.25
*
* @example
* var v = beta( NaN, 2 );
* // returns NaN
*/
function beta( a, b ) {
	var ambh;
	var agh;
	var bgh;
	var cgh;
	var res;
	var tmp;
	var c;

	if ( isnan( a ) || isnan( b ) ) {
		return NaN;
	}
	if ( a < 0.0 || b < 0.0 ) {
		return NaN;
	}
	if ( b === 1.0 ) {
		return 1.0 / a;
	}
	if ( a === 1.0 ) {
		return 1.0 / b;
	}
	c = a + b;
	if ( c < EPSILON ) {
		res = c / a;
		res /= b;
		return res;
	}

	// Special cases:
	if ( c === a && b < EPSILON ) {
		return 1.0 / b;
	}
	if ( c === b && a < EPSILON ) {
		return 1.0 / a;
	}

	if ( a < b ) {
		// Swap `a` and `b`:
		tmp = b;
		b = a;
		a = tmp;
	}

	// Lanczos calculation:
	agh = a + G - 0.5;
	bgh = b + G - 0.5;
	cgh = c + G - 0.5;
	res = lanczosSumExpGScaled( a ) * ( lanczosSumExpGScaled( b )/lanczosSumExpGScaled( c ) ); // eslint-disable-line max-len
	ambh = a - 0.5 - b;
	if ( ( abs( b*ambh ) < ( cgh*100.0 ) ) && a > 100.0 ) {
		// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:
		res *= exp( ambh * log1p( -b/cgh ) );
	} else {
		res *= pow( agh/cgh, ambh );
	}
	if ( cgh > 1.0e10 ) {
		// This avoids possible overflow, but appears to be marginally less accurate:
		res *= pow( (agh/cgh)*(bgh/cgh), b );
	} else {
		res *= pow( (agh*bgh)/(cgh*cgh), b );
	}
	res *= sqrt( E/bgh);
	return res;
}


// EXPORTS //

module.exports = beta;

},{"./lanczos_sum_expg_scaled.js":1361,"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1360:[function(require,module,exports){
'use strict';

/**
* Evaluate the beta function.
*
* @module @stdlib/math/base/special/beta
*
* @example
* var beta = require( '@stdlib/math/base/special/beta' );
*
* var v = beta( 0.0, 0.0 );
* // returns Infinity
*
* v = beta( 1.0, 1.0 );
* // returns 1.0
*
* v = beta( -1.0, 2.0 );
* // returns NaN
*
* v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* v = beta( 4.0, 1.0 );
* // returns 0.25
*
* v = beta( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

var beta = require( './beta.js' );


// EXPORTS //

module.exports = beta;

},{"./beta.js":1359}],1361:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1362:[function(require,module,exports){
'use strict';

// MODULES //

var kernelBetainc = require( '@stdlib/math/base/special/kernel-betainc' );


// VARIABLES //

var out = new Array( 2 );


// MAIN //

/**
* Evaluates the incomplete beta function.
*
* @param {Probability} x - function parameter
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* @example
* var y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* @example
* var y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*/
function betainc( x, a, b, regularized, upper ) {
	/* eslint-disable no-unneeded-ternary */
	regularized = ( regularized === false ) ? false : true;
	upper = ( upper === true ) ? true : false;
	out = kernelBetainc( out, x, a, b, upper, regularized );
	return out[ 0 ];
}


// EXPORTS //

module.exports = betainc;

},{"@stdlib/math/base/special/kernel-betainc":1621}],1363:[function(require,module,exports){
'use strict';

/**
* Evaluate the incomplete beta function.
*
* @module @stdlib/math/base/special/betainc
*
* @example
* var betainc = require( '@stdlib/math/base/special/betainc' );
*
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*
* y = betainc( 0.2, 1.0, 2.0, true, true );
* // returns 0.64
*/

// MODULES //

var betainc = require( './betainc.js' );


// EXPORTS //

module.exports = betainc;

},{"./betainc.js":1362}],1364:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );


// MAIN //

/**
* Returns a value `p` such that `p = betainc(a, b, x)`.
*
* @param {Probability} p - function parameter
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {boolean} [upper=false] - boolean indicating if the function should return the inverse of the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betaincinv( 0.2, 3.0, 3.0 );
* // returns ~0.327
*
* @example
* var y = betaincinv( 0.4, 3.0, 3.0 );
* // returns ~0.446
*
* @example
* var y = betaincinv( 0.4, 3.0, 3.0, true );
* // returns ~0.554
*
* @example
* var y = betaincinv( 0.4, 1.0, 6.0 );
* // returns ~0.082
*
* @example
* var y = betaincinv( 0.8, 1.0, 6.0 );
* // returns ~0.235
*/
function betaincinv( p, a, b, upper ) {
	if (
		isnan( p ) ||
		isnan( a ) ||
		isnan( b )
	) {
		return NaN;
	}
	if ( a <= 0.0 || b <= 0.0 ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( upper ) {
		return kernelBetaincinv( a, b, 1.0 - p, p )[ 0 ];
	}
	return kernelBetaincinv( a, b, p, 1.0 - p )[ 0 ];
}


// EXPORTS //

module.exports = betaincinv;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/kernel-betaincinv":1629}],1365:[function(require,module,exports){
'use strict';

/**
* Evaluate the inverse of the incomplete beta function.
*
* @module @stdlib/math/base/special/betaincinv
*
* @example
* var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
*
* var y = betaincinv( 0.2, 3.0, 3.0 );
* // returns ~0.327
*
* y = betaincinv( 0.4, 3.0, 3.0 );
* // returns ~0.446
*
* y = betaincinv( 0.4, 3.0, 3.0, true );
* // returns ~0.554
*
* y = betaincinv( 0.4, 1.0, 6.0 );
* // returns ~0.082
*
* y = betaincinv( 0.8, 1.0, 6.0 );
* // returns ~0.235
*/

// MODULES //

var betaincinv = require( './betaincinv.js' );


// EXPORTS //

module.exports = betaincinv;

},{"./betaincinv.js":1364}],1366:[function(require,module,exports){
'use strict';

/*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain software.
*/

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var correction = require( './gamma_correction.js' );


// MAIN //

/**
* Evaluate the natural logarithm of the beta function.
*
* @param {NonNegativeNumber} a - first input value
* @param {NonNegativeNumber} b - second input value
* @returns {number} natural logarithm of beta function
*
* @example
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* @example
* var v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = betaln( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* @example
* var v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* @example
* var v = betaln( NaN, 2.0 );
* // returns NaN
*/
function betaln( a, b ) {
	var corr;
	var p;
	var q;

	p = min( a, b );
	q = max( a, b );

	if ( p < 0.0 ) {
		return NaN;
	}
	else if ( p === 0.0 ) {
		return PINF;
	}
	else if ( q === PINF ) {
		return NINF;
	}
	// Case: p and q are big
	if ( p >= 10.0 ) {
		corr = correction( p ) + correction( q ) - correction( p+q );
		return ( -0.5*ln( q ) ) + LN_SQRT_TWO_PI + corr + ( (p-0.5) * ln( p/(p+q) ) ) + ( q*log1p( -p/(p+q) ) ); // eslint-disable-line max-len
	}
	// Case: p is small, but q is big
	else if ( q >= 10.0 ) {
		corr = correction( q ) - correction( p+q );
		return gammaln( p ) + corr + p - (p*ln( p+q )) + ( (q-0.5)*log1p( -p/(p+q) ) ); // eslint-disable-line max-len
	}
	// Case: p and q are small
	return ln( gamma( p ) * ( gamma( q ) / gamma( p+q ) ) );
}


// EXPORTS //

module.exports = betaln;

},{"./gamma_correction.js":1368,"@stdlib/constants/math/float64-ln-sqrt-two-pi":81,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707}],1367:[function(require,module,exports){
'use strict';

/*
* The code is adapted from the Fortran routine `dcseval` from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.org/slatec/fnlib/}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain software.
*/

// VARIABLES //

var ALGMCS = [
	+0.1276642195630062933333333333333e-30,
	-0.3401102254316748799999999999999e-29,
	+0.1025680058010470912000000000000e-27,
	-0.3547598158101070547199999999999e-26,
	+0.1429227355942498147573333333333e-24,
	-0.6831888753985766870111999999999e-23,
	+0.3962837061046434803679306666666e-21,
	-0.2868042435334643284144622399999e-19,
	+0.2683181998482698748957538846666e-17,
	-0.3399615005417721944303330599666e-15,
	+0.6221098041892605227126015543416e-13,
	-0.1809129475572494194263306266719e-10,
	+0.9810825646924729426157171547487e-8,
	-0.1384948176067563840732986059135e-4,
	+0.1666389480451863247205729650822e+0
];
var LEN = ALGMCS.length;


// MAIN //

/**
* Evaluate the n-term Chebyshev series at `x`.
*
* ## References
*
* -   Broucke, Roger. 1973. "Algorithm: Ten Subroutines for the Manipulation of Chebyshev Series." *Communications of the ACM* 16 (4). New York, NY, USA: ACM: 254–56. doi:[10.1145/362003.362037](https://doi.org/10.1145/362003.362037).
* -   Fox, Leslie, and Ian Bax Parker. 1968. *Chebyshev polynomials in numerical analysis*. Oxford Mathematical Handbooks. London, United Kingdom: Oxford University Press. <https://books.google.com/books?id=F8NzsEtJCD0C>.
*
* @private
* @param {number} x - value at which the series is to be evaluated
* @returns {number} series value
*/
function dcseval( x ) {
	var twox;
	var b2;
	var b1;
	var b0;
	var i;

	if ( x < -1.1 || x > 1.1 ) {
		return NaN;
	}
	b1 = 0.0;
	b0 = 0.0;
	twox = 2.0 * x;
	for ( i = 0; i < LEN; i++ ) {
		b2 = b1;
		b1 = b0;
		b0 = (twox*b1) - b2 + ALGMCS[ i ];
	}
	return ( b0-b2 ) * 0.5;
}


// EXPORTS //

module.exports = dcseval;

},{}],1368:[function(require,module,exports){
'use strict';

/*
* The code is adapted from the Fortran routine from [netlib]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain software.
*/

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );
var dceval = require( './dceval.js' );


// VARIABLES //

var XBIG = 94906265.62425156;
var XMAX = 3.745194030963158e306;


// MAIN //

/**
* Compute the log gamma correction factor for `x >= 10`.
*
* ```tex
* \log(\gamma(x)) = \log(\sqrt{2*\Pi}) + (x-0.5) \cdot \log(x) - x \operatorname{R9LGMC}(x).
* ```
*
* @private
* @param {number} x - input value
* @returns {number} correction value
*/
function gammaCorrection( x ) {
	if ( x < 10.0 ) {
		return NaN;
	}
	// Check for underflow...
	if ( x >= XMAX ) {
		return 0.0;
	}
	if ( x < XBIG ) {
		return dceval( (2.0*pow( 10.0/x, 2.0 )) - 1.0 ) / x;
	}
	return 1.0 / (x * 12.0);
}


// EXPORTS //

module.exports = gammaCorrection;

},{"./dceval.js":1367,"@stdlib/math/base/special/pow":1743}],1369:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the beta function.
*
* @module @stdlib/math/base/special/betaln
*
* @example
* var betaln = require( '@stdlib/math/base/special/betaln' );
*
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* v = betaln( -1.0, 2.0 );
* // returns NaN
*
* v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* v = betaln( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

var betaln = require( './betaln.js' );


// EXPORTS //

module.exports = betaln;

},{"./betaln.js":1366}],1370:[function(require,module,exports){
'use strict';

/**
* Evaluate Binet's formula extended to real numbers.
*
* @module @stdlib/math/base/special/binet
*
* @example
* var binet = require( '@stdlib/math/base/special/binet' );
*
* var y = binet( 0.0 );
* // returns 0.0
*
* y = binet( 1.0 );
* // returns 1.0
*
* y = binet( 2.0 );
* // returns 1.0
*
* y = binet( 3.0 );
* // returns 2.0
*
* y = binet( 4.0 );
* // returns 3.0
*
* y = binet( 5.0 );
* // returns ~5.0
*
* y = binet( 6.0 );
* // returns ~8.0
*/

// MODULES //

var binet = require( './main.js' );


// EXPORTS //

module.exports = binet;

},{"./main.js":1371}],1371:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var pow = require( '@stdlib/math/base/special/pow' );
var PHI = require( '@stdlib/constants/math/float64-phi' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// VARIABLES //

var SQRT_5 = 2.23606797749979;


// MAIN //

/**
* Evaluates Binet's formula extended to real numbers.
*
* ## Notes
*
* -   [Non integer Fibonacci numbers]{@link https://math.stackexchange.com/questions/798190/non-integer-fibonacci-numbers}
* -   [Interpolated Fibonacci numbers - real or complex]{@link https://math.stackexchange.com/questions/589841/interpolated-fibonacci-numbers-real-or-complex}
*
*
* @param {number} x - input value
* @returns {number} real-valued result
*
* @example
* var y = binet( 0.0 );
* // returns 0.0
*
* @example
* var y = binet( 1.0 );
* // returns 1.0
*
* @example
* var y = binet( 2.0 );
* // returns 1.0
*
* @example
* var y = binet( 3.0 );
* // returns 2.0
*
* @example
* var y = binet( 4.0 );
* // returns 3.0
*
* @example
* var y = binet( 5.0 );
* // returns ~5.0
*
* @example
* var y = binet( 6.0 );
* // returns ~8.0
*
* @example
* var y = binet( NaN );
* // returns NaN
*
* @example
* var y = binet( 3.14 );
* // returns ~2.12
*
* @example
* var y = binet( -1.0 );
* // returns 1.0
*/
function binet( x ) {
	var a;
	var b;
	if (
		isnan( x ) ||
		x === PINF ||
		x === NINF
	) {
		return NaN;
	}
	a = pow( PHI, x );
	b = cospi( x ) / a;
	return ( a - b ) / SQRT_5;
}


// EXPORTS //

module.exports = binet;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-phi":99,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/cospi":1403,"@stdlib/math/base/special/pow":1743}],1372:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isOdd = require( '@stdlib/math/base/assert/is-odd' );
var round = require( '@stdlib/math/base/special/round' );


// MAIN //

/**
* Computes the binomial coefficient of two integers.
*
* ## Method
*
* -   Instead of evaluating the factorial form, which is inefficient and prone to overflow for large inputs arguments, this module computes the following multiplicative representation of the binomial coefficient for integer arguments
*
*     ```tex
*     \binom nk = \prod_{i=1}^k \frac{n+1-i}{i}
*     ```
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {number} function value
*
* @example
* var v = binomcoef( 8, 2 );
* // returns 28
*
* @example
* var v = binomcoef( 0, 0 );
* // returns 1
*
* @example
* var v = binomcoef( -4, 2 );
* // returns 10
*
* @example
* var v = binomcoef( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoef( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoef( NaN, NaN );
* // returns NaN
*/
function binomcoef( n, k ) {
	var res;
	var j;
	if ( isnan( n ) || isnan( k ) ) {
		return NaN;
	}
	if ( !isInteger( n ) || !isInteger( k ) ) {
		return NaN;
	}
	if ( k < 0 ) {
		return 0;
	}
	if ( n < 0 ) {
		res = binomcoef( -n + k - 1, k );
		if ( isOdd( k ) ) {
			res = -res;
		}
		return res;
	}
	if ( k > n ) {
		return 0;
	}
	if ( k === 0 || k === n ) {
		return 1;
	}
	if ( k === 1 || k === n - 1 ) {
		return n;
	}
	if ( n - k < k ) {
		k = n - k;
	}
	// Use recursive definition...
	res = n;
	for ( j = 2; j <= k; j++ ) {
		res *= ( n - j + 1 ) / j;
	}
	// Correct for rounding errors...
	return isInteger( res ) ? res : round( res );
}


// EXPORTS //

module.exports = binomcoef;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-odd":138,"@stdlib/math/base/special/round":1777}],1373:[function(require,module,exports){
'use strict';

/**
* Compute the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoef
*
* @example
* var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
*
* var v = binomcoef( 8, 2 );
* // returns 28
*
* v = binomcoef( 0, 0 );
* // returns 1
*
* v = binomcoef( -4, 2 );
* // returns 10
*
* v = binomcoef( 5, 3 );
* // returns 10
*
* v = binomcoef( NaN, 3 );
* // returns NaN
*
* v = binomcoef( 5, NaN );
* // returns NaN
*
* v = binomcoef( NaN, NaN );
* // returns NaN
*/

// MODULES //

var binomcoef = require( './binomcoef.js' );


// EXPORTS //

module.exports = binomcoef;

},{"./binomcoef.js":1372}],1374:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var betaln = require( '@stdlib/math/base/special/betaln' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Computes the natural logarithm of the binomial coefficient of two integers.
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {number} function value
*
* @example
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* @example
* var v = binomcoefln( 0, 0 );
* // returns 0.0
*
* @example
* var v = binomcoefln( -4, 2 );
* // returns ~2.302
*
* @example
* var v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* @example
* var v = binomcoefln( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoefln( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoefln( NaN, NaN );
* // returns NaN
*/
function binomcoefln( n, k ) {
	if ( isnan( n ) || isnan( k ) ) {
		return NaN;
	}
	if ( !isInteger( n ) || !isInteger( k ) ) {
		return NaN;
	}
	if ( n < 0.0 ) {
		return binomcoefln( -n + k - 1.0, k );
	}
	if ( k < 0 ) {
		return NINF;
	}
	if ( k === 0 ) {
		return 0.0;
	}
	if ( k === 1 ) {
		return ln( abs( n ) );
	}
	if ( n < k ) {
		return NINF;
	}
	if ( n - k < 2 ) {
		return binomcoefln( n, n - k );
	}
	// Case: n - k >= 2
	return -ln( n + 1 ) - betaln( n - k + 1, k + 1 );
}


// EXPORTS //

module.exports = binomcoefln;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/ln":1679}],1375:[function(require,module,exports){
'use strict';

/**
* Compute the natural logarithm of the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoefln
*
* @example
* var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
*
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* v = binomcoefln( 0, 0 );
* // returns 0.0
*
* v = binomcoefln( -4, 2 );
* // returns ~2.302
*
* v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* v = binomcoefln( NaN, 3 );
* // returns NaN
*
* v = binomcoefln( 5, NaN );
* // returns NaN
*
* v = binomcoefln( NaN, NaN );
* // returns NaN
*/

// MODULES //

var binomcoefln = require( './binomcoefln.js' );


// EXPORTS //

module.exports = binomcoefln;

},{"./binomcoefln.js":1374}],1376:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cbrt.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var isinfinite = require( '@stdlib/math/base/assert/is-infinite' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var polyval = require( './polyval_p.js' );


// VARIABLES //

// 0x80000000 = 2147483648 => 1 00000000000 00000000000000000000
var SIGN_MASK = 0x80000000|0; // asm type annotation

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// 2**54
var TWO_54 = 18014398509481984;

// 0x00000001 = 1 => 0 00000000000 00000000000000000001
var ONE = 0x00000001|0; // asm type annotation

// B1 = (1023-1023/3-0.03306235651)*2**20
var B1 = 715094163|0; // asm type annotation

// B2 = (1023-1023/3-54/3-0.03306235651)*2**20
var B2 = 696219795|0; // asm type annotation


// MAIN //

/**
* Computes the cube root.
*
* ## Method
*
* 1.  Rough cube root to \\( 5 \\) bits:
*
*     ```tex
*     \sqrt[3]{2^e (1+m)} \approx 2^(e/3) \biggl(1 + \frac{(e \mathrm{mod}\ 3) + m}{3}\biggr)
*     ```
*
*     where \\( e \\) is a nonnegative integer, \\( m \\) is real and in \\( [0, 1) \\), and \\( / \\) and \\( \mathrm{mod} \\) are integer division and modulus with rounding toward \\( -\infty \\).
*
*     The RHS is always greater than or equal to the LHS and has a maximum relative error of about \\( 1 \\) in \\( 16 \\).
*
*     Adding a bias of \\( -0.03306235651 \\) to the \\( (e \mathrm{mod} 3+ m )/ 3 \\) term reduces the error to about \\( 1 \\) in \\( 32 \\).
*
*     With the IEEE floating point representation, for finite positive normal values, ordinary integer division of the value in bits magically gives almost exactly the RHS of the above provided we first subtract the exponent bias (\\( 1023 \\) for doubles) and later add it back.
*
*     We do the subtraction virtually to keep \\( e \geq 0 \\) so that ordinary integer division rounds toward \\( -\infty \\); this is also efficient.
*
* 2.  New cube root to \\( 23 \\) bits:
*
*     ```tex
*     \sqrt[3]{x} = t \cdot \sqrt[3]{x/t^3} \approx t \mathrm{P}(t^3/x)
*     ```
*
*     where \\( \mathrm{P}(r) \\) is a polynomial of degree \\( 4 \\) that approximates \\( 1 / \sqrt[3]{r} \\) to within \\( 2^{-23.5} \\) when \\( |r - 1| < 1/10 \\).
*
*     The rough approximation has produced \\( t \\) such than \\( |t/sqrt[3]{x} - 1| \lesssim 1/32 \\), and cubing this gives us bounds for \\( r = t^3/x \\).
*
* 3.  Round \\( t \\) away from \\( 0 \\) to \\( 23 \\) bits (sloppily except for ensuring that the result is larger in magnitude than \\( \sqrt[3]{x} \\) but not much more than \\( 2 \\) 23-bit ulps larger).
*
*     With rounding toward zero, the error bound would be \\( \approx 5/6 \\) instead of \\( \approx 4/6 \\).
*
*     With a maximum error of \\( 2 \\) 23-bit ulps in the rounded \\( t \\), the infinite-precision error in the Newton approximation barely affects the third digit in the final error \\( 0.667 \\); the error in the rounded \\( t \\) can be up to about \\( 3 \\) 23-bit ulps before the final error is larger than \\( 0.667 \\) ulps.
*
* 4.  Perform one step of a Newton iteration to get \\( 53 \\) bits with an error of \\( < 0.667 \\) ulps.
*
*
* @param {number} x - input value
* @returns {number} cube root
*
* @example
* var v = cbrt( 64.0 );
* // returns 4.0
*
* @example
* var v = cbrt( 27.0 );
* // returns 3.0
*
* @example
* var v = cbrt( 0.0 );
* // returns 0.0
*
* @example
* var v = cbrt( -9.0 );
* // returns ~-2.08
*
* @example
* var v = cbrt( NaN );
* // returns NaN
*/
function cbrt( x ) {
	var high;
	var sgn;
	var hx;
	var r;
	var s;
	var t;
	var w;
	if (
		isnan( x ) ||
		isinfinite( x ) ||
		x === 0.0 // handles `+-0`
	) {
		return x;
	}
	hx = getHighWord( x );
	sgn = hx & SIGN_MASK;
	hx &= ABS_MASK;
	t = 0.0;

	// Rough cbrt...
	if ( x < FLOAT64_SMALLEST_NORMAL ) {
		t = TWO_54;
		t *= x;
		high = getHighWord( t );
		high = ( (high&ABS_MASK)/3 ) + B2;
		t = fromWords( sgn|high, 0 );
	} else {
		high = (hx/3) + B1;
		t = setHighWord( t, sgn|high );
	}
	// New cbrt...
	r = (t*t) * (t/x);
	t *= polyval( r );

	// Round `t` away from `0` to `23` bits...
	high = getHighWord( t );
	t = fromWords( high+ONE, 0 );

	// Newton iteration...
	s = t * t; // `t*t` is exact
	r = x / s; // error `<= 0.5` ulps; `|r| < |t|`
	w = t + t; // `t+t` is exact
	r = (r - t) / (w + r); // `r-t` is exact; `w+r ~= 3*t`
	t += t * r; // error `<= 0.5 + 0.5/3 + eps`

	return t;
}


// EXPORTS //

module.exports = cbrt;

},{"./polyval_p.js":1378,"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/number/float64/base/from-words":1905,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-high-word":1918}],1377:[function(require,module,exports){
'use strict';

/**
* Compute the cube root of a number.
*
* @module @stdlib/math/base/special/cbrt
*
* @example
* var cbrt = require( '@stdlib/math/base/special/cbrt' );
*
* var v = cbrt( 64.0 );
* // returns 4.0
*
* v = cbrt( 27.0 );
* // returns 3.0
*
* v = cbrt( 0.0 );
* // returns 0.0
*
* v = cbrt( -0.0 );
* // returns -0.0
*
* v = cbrt( -9.0 );
* // returns ~-2.08
*
* v = cbrt( NaN );
* // returns NaN
*/

// MODULES //

var cbrt = require( './cbrt.js' );


// EXPORTS //

module.exports = cbrt;

},{"./cbrt.js":1376}],1378:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.87595182427177;
	}
	return 1.87595182427177 + (x * (-1.8849797954337717 + (x * (1.6214297201053545 + (x * (-0.758397934778766 + (x * 0.14599619288661245))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1379:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil( -4.2 );
* // returns -4.0
*
* @example
* var v = ceil( 9.99999 );
* // returns 10.0
*
* @example
* var v = ceil( 0.0 );
* // returns 0.0
*
* @example
* var v = ceil( NaN );
* // returns NaN
*/
var ceil = Math.ceil;


// EXPORTS //

module.exports = ceil;

},{}],1380:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward positive infinity.
*
* @module @stdlib/math/base/special/ceil
*
* @example
* var ceil = require( '@stdlib/math/base/special/ceil' );
*
* var v = ceil( -4.2 );
* // returns -4.0
*
* v = ceil( 9.99999 );
* // returns 10.0
*
* v = ceil( 0.0 );
* // returns 0.0
*
* v = ceil( NaN );
* // returns NaN
*/

// MODULES //

var ceil = require( './ceil.js' );


// EXPORTS //

module.exports = ceil;

},{"./ceil.js":1379}],1381:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var log10 = require( '@stdlib/math/base/special/log10' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base10-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil10( Math.PI );
* // returns 10.0
*
* @example
* var v = ceil10( 9.0 );
* // returns 10.0
*
* @example
* var v = ceil10( -0.314 );
* // returns -0.1
*/
function ceil10( x ) {
	var sign;
	var p;
	if (
		isnan( x ) ||
		isInfinite( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `10^p = x` for `p`:
	p = log10( x );

	// Determine a power of 10 which rounds the input value toward positive infinity:
	if ( sign === -1.0 ) {
		p = floor( p );
	} else {
		p = ceil( p );
	}
	// Handle underflow:
	if ( p <= MIN_EXP_SUBNORMAL ) {
		return sign * 0.0; // sign-preserving
	}
	// Handle overflow:
	if ( p > MAX_EXP ) {
		return PINF;
	}
	return sign * pow( 10.0, p );
}


// EXPORTS //

module.exports = ceil10;

},{"@stdlib/constants/math/float64-max-base10-exponent":84,"@stdlib/constants/math/float64-min-base10-exponent-subnormal":92,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/pow":1743}],1382:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest power of `10` toward positive infinity.
*
* @module @stdlib/math/base/special/ceil10
*
* @example
* var ceil10 = require( '@stdlib/math/base/special/ceil10' );
*
* var v = ceil10( Math.PI );
* // returns 10.0
*
* v = ceil10( 9.0 );
* // returns 10.0
*
* v = ceil10( -0.314 );
* // returns -0.1
*/

// MODULES //

var ceil10 = require( './ceil10.js' );


// EXPORTS //

module.exports = ceil10;

},{"./ceil10.js":1381}],1383:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var log2 = require( '@stdlib/math/base/special/log2' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base2-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Rounds a numeric value to the nearest power of two toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil2( Math.PI );
* // returns 4.0
*
* @example
* var v = ceil2( 9.0 );
* // returns 16.0
*
* @example
* var v = ceil2( -0.314 );
* // returns -0.25
*/
function ceil2( x ) {
	var sign;
	var p;
	if (
		isnan( x ) ||
		isInfinite( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `2^p = x` for `p`:
	p = log2( x );

	// If provided the smallest subnormal, no rounding possible:
	if ( p === MIN_EXP_SUBNORMAL ) {
		return x;
	}
	// Determine a power of two which rounds the input value toward positive infinity:
	if ( sign === -1.0 ) {
		p = floor( p );
	} else {
		p = ceil( p );
	}
	// Handle overflow:
	if ( p > MAX_EXP ) {
		return PINF;
	}
	return sign * pow( 2.0, p );
}


// EXPORTS //

module.exports = ceil2;

},{"@stdlib/constants/math/float64-max-base2-exponent":86,"@stdlib/constants/math/float64-min-base2-exponent-subnormal":94,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log2":1693,"@stdlib/math/base/special/pow":1743}],1384:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest power of two toward positive infinity.
*
* @module @stdlib/math/base/special/ceil2
*
* @example
* var ceil2 = require( '@stdlib/math/base/special/ceil2' );
*
* var v = ceil2( Math.PI );
* // returns 4.0
*
* v = ceil2( 9.0 );
* // returns 16.0
*
* v = ceil2( -0.314 );
* // returns -0.25
*/

// MODULES //

var ceil2 = require( './ceil2.js' );


// EXPORTS //

module.exports = ceil2;

},{"./ceil2.js":1383}],1385:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var ceiln = require( '@stdlib/math/base/special/ceiln' );


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(b^n\\) toward positive infinity.
*
* @param {number} x - input value
* @param {integer} n - integer power
* @param {PositiveInteger} b - base
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = ceilb( Math.PI, -4, 10 );
* // returns 3.1416
*
* @example
* // If n = 0 or b = 1, `ceilb` behaves like `ceil`:
* var v = ceilb( Math.PI, 0, 2 );
* // returns 4.0
*
* @example
* // Round a value to the nearest multiple of two toward positive infinity:
* var v = ceilb( 5.0, 1, 2 );
* // returns 6.0
*/
function ceilb( x, n, b ) {
	var y;
	var s;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( b ) ||
		b <= 0 ||
		isInfinite( n ) ||
		isInfinite( b )
	) {
		return NaN;
	}
	if ( isInfinite( x ) || x === 0.0 ) {
		return x;
	}
	if ( b === 10 ) {
		return ceiln( x, n );
	}
	if ( n === 0 || b === 1 ) {
		return ceil( x );
	}
	s = pow( b, -n );

	// Check for overflow:
	if ( isInfinite( s ) ) {
		return x;
	}
	y = ceil( x * s ) / s;

	// Check for overflow:
	if ( isInfinite( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

module.exports = ceilb;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/ceiln":1388,"@stdlib/math/base/special/pow":1743}],1386:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest multiple of `b^n` toward positive infinity.
*
* @module @stdlib/math/base/special/ceilb
*
* @example
* var ceilb = require( '@stdlib/math/base/special/ceilb' );
*
* // Round a value to 4 decimal places:
* var v = ceilb( Math.PI, -4, 10 );
* // returns 3.1416
*
* // If n = 0 or b = 1, behavior is same as `ceil`:
* v = ceilb( Math.PI, 0, 2 );
* // returns 4.0
*
* // Round a value to the nearest multiple of two toward positive infinity:
* v = ceilb( 5.0, 1, 2 );
* // returns 6.0
*/

// MODULES //

var ceilb = require( './ceilb.js' );


// EXPORTS //

module.exports = ceilb;

},{"./ceilb.js":1385}],1387:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base10-exponent' );
var MIN_EXP = require( '@stdlib/constants/math/float64-min-base10-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// VARIABLES //

var MAX_INT = MAX_SAFE_INTEGER + 1;
var HUGE = 1e+308;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\) toward positive infinity.
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{ceiln}(x,n) = \frac{\operatorname{ceil}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{ceil}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior. For instance, the result of \\(\operatorname{ceiln}(0.2+0.1,-16)\\) is \\(0.3000000000000001\\) and not \\(0.3\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{ceil}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible positive finite number \\(x\\) to the nearest \\(10^n\\) is \\(\infty\\) and any possible negative finite number \\(x\\) is \\(-0\\). To ensure consistent behavior with \\(\operatorname{ceil}(x)\\), if \\(x < 0\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is __always__ an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{ceiln}(x,n) = \frac{\biggl(\frac{\operatorname{ceil}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{ceiln}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{ceiln}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{ceiln}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{ceiln}(\pm\infty, n) &= \pm\infty \\
* \operatorname{ceiln}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @param {integer} n - integer power of 10
* @returns {number} rounded value
*
* @example
* // Round a value to 2 decimal places:
* var v = ceiln( Math.PI, -2 );
* // returns 3.15
*
* @example
* // If n = 0, `ceiln` behaves like `ceil`:
* var v = ceiln( Math.PI, 0 );
* // returns 4.0
*
* @example
* // Round a value to the nearest thousand:
* var v = ceiln( 12368.0, 3 );
* // returns 13000.0
*/
function ceiln( x, n ) {
	var s;
	var y;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isInfinite( n )
	) {
		return NaN;
	}
	if (
		// Handle infinities...
		isInfinite( x ) ||

		// Handle +-0...
		x === 0.0 ||

		// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...
		n < MIN_EXP_SUBNORMAL ||

		// If `|x|` is large enough, no decimals to round...
		( abs( x ) > MAX_INT && n <= 0 )
	) {
		return x;
	}
	// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is infinity and any negative finite `x` is zero.
	if ( n > MAX_EXP ) {
		if ( x <= 0.0 ) {
			return -0.0; // preserve the sign (same behavior as ceil)
		}
		return PINF;
	}
	// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...
	if ( n < MIN_EXP ) {
		s = pow( 10.0, -(n + MAX_EXP) );
		y = (x*HUGE) * s; // order of operation matters!
		if ( isInfinite( y ) ) {
			return x;
		}
		return ( ceil(y)/HUGE ) / s;
	}
	s = pow( 10.0, -n );
	y = x * s;
	if ( isInfinite( y ) ) {
		return x;
	}
	return ceil( y ) / s;
}


// EXPORTS //

module.exports = ceiln;

},{"@stdlib/constants/math/float64-max-base10-exponent":84,"@stdlib/constants/math/float64-max-safe-integer":88,"@stdlib/constants/math/float64-min-base10-exponent":93,"@stdlib/constants/math/float64-min-base10-exponent-subnormal":92,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/pow":1743}],1388:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest multiple of `10^n` toward positive infinity.
*
* @module @stdlib/math/base/special/ceiln
*
* @example
* var ceiln = require( '@stdlib/math/base/special/ceiln' );
*
* // Round a value to 2 decimal places:
* var v = ceiln( Math.PI, -2 );
* // returns 3.15
*
* // If n = 0, `ceiln` behaves like `ceil`:
* v = ceiln( Math.PI, 0 );
* // returns 4.0
*
* // Round a value to the nearest thousand:
* v = ceiln( 12368.0, 3 );
* // returns 13000.0
*/

// MODULES //

var ceiln = require( './ceiln.js' );


// EXPORTS //

module.exports = ceiln;

},{"./ceiln.js":1387}],1389:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var log10 = require( '@stdlib/math/base/special/log10' );
var ln = require( '@stdlib/math/base/special/ln' );
var abs = require( '@stdlib/math/base/special/abs' );
var floor = require( '@stdlib/math/base/special/floor' );
var exponent = require( '@stdlib/number/float64/base/exponent' );
var ceil = require( '@stdlib/math/base/special/ceil' );


// MAIN //

/**
* Rounds a numeric value to the nearest number toward positive infinity with \\(N\\) significant figures.
*
* @param {number} x - input value
* @param {PositiveInteger} n - number of significant figures
* @param {PositiveInteger} [b=10] - base
* @returns {number} rounded value
*
* @example
* var v = ceilsd( Math.PI, 5 );
* // returns 3.1416
*
* @example
* var v = ceilsd( Math.PI, 1 );
* // returns 4.0
*
* @example
* var v = ceilsd( 12368.0, 2 );
* // returns 13000.0
*
* @example
* var v = ceilsd( 0.0313, 2, 2 );
* // returns 0.046875
*/
function ceilsd( x, n, b ) {
	var base;
	var exp;
	var s;
	var y;
	if (
		isnan( x ) ||
		isnan( n ) ||
		n < 1 ||
		isInfinite( n )
	) {
		return NaN;
	}
	if ( arguments.length > 2 ) {
		if (
			isnan( b ) ||
			b <= 0 ||
			isInfinite( b )
		) {
			return NaN;
		}
		base = b;
	} else {
		base = 10;
	}
	if ( isInfinite( x ) || x === 0.0 ) {
		return x;
	}
	if ( base === 10 ) {
		exp = log10( abs( x ) );
	}
	else if ( base === 2 ) {
		exp = exponent( abs( x ) );
	}
	else {
		exp = ln( abs(x) ) / ln( base );
	}
	exp = floor( exp - n + 1.0 );
	s = pow( base, abs( exp ) );

	// Check for overflow:
	if ( isInfinite( s ) ) {
		return x;
	}
	// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.
	if ( exp < 0 ) {
		y = ceil( x * s ) / s;
	} else {
		y = ceil( x / s ) * s;
	}
	// Check for overflow:
	if ( isInfinite( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

module.exports = ceilsd;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/pow":1743,"@stdlib/number/float64/base/exponent":1903}],1390:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest number toward positive infinity with `N` significant figures.
*
* @module @stdlib/math/base/special/ceilsd
*
* @example
* var ceilsd = require( '@stdlib/math/base/special/ceilsd' );
*
* var v = ceilsd( Math.PI, 5 );
* // returns 3.1416
*
* v = ceilsd( Math.PI, 1 );
* // returns 4.0
*
* v = ceilsd( 12368.0, 2 );
* // returns 13000.0
*
* v = ceilsd( 0.0313, 2, 2 );
* // returns 0.046875
*/

// MODULES //

var ceilsd = require( './ceilsd.js' );


// EXPORTS //

module.exports = ceilsd;

},{"./ceilsd.js":1389}],1391:[function(require,module,exports){
'use strict';

/**
* Restrict a value to a specified range.
*
* @module @stdlib/math/base/special/clamp
*
* @example
* var clamp = require( '@stdlib/math/base/special/clamp' );
*
* var v = clamp( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = clamp( -3.14, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 10.0, 0.0, 5.0 );
* // returns 5.0
*
* v = clamp( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = clamp( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = clamp( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = clamp( 3.14, 0.0, NaN );
* // returns NaN
*/

// MODULES //

var clamp = require( './main.js' );


// EXPORTS //

module.exports = clamp;

},{"./main.js":1392}],1392:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );


// MAIN //

/**
* Restricts a value to a specified range.
*
* @param {number} v - input value
* @param {number} min - minimum value
* @param {number} max - maximum value
* @returns {number} value restricted to a specified range
*
* @example
* var v = clamp( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = clamp( -3.14, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 10.0, 0.0, 5.0 );
* // returns 5.0
*
* v = clamp( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = clamp( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = clamp( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = clamp( 3.14, 0.0, NaN );
* // returns NaN
*/
function clamp( v, min, max ) {
	if (
		isnan( v ) ||
		isnan( min ) ||
		isnan( max )
	) {
		return NaN;
	}
	// Simple cases...
	if ( v < min ) {
		return min;
	}
	if ( v > max ) {
		return max;
	}
	// Special cases for handling +-0.0...
	if ( min === 0.0 && isNegativeZero( v ) ) {
		return min; // +-0.0
	}
	if ( v === 0.0 && isNegativeZero( max ) ) {
		return max; // -0.0
	}
	// Case: min <= v <= max
	return v;
}


// EXPORTS //

module.exports = clamp;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-negative-zero":132}],1393:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/number/float64/base/to-words' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000>>>0; // asm type annotation

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	toWords( WORDS, x );
	hx = WORDS[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = copysign;

},{"@stdlib/number/float64/base/from-words":1905,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/to-words":1925}],1394:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":1393}],1395:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// VARIABLES //

// Scratch array for storing temporary values. Note that, in C, this would not be thread safe.
var buffer = new Array( 2 );

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011
var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000
var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( Math.PI/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -Math.PI/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;

	ix = getHighWord( x );
	ix &= HIGH_WORD_ABS_MASK;

	// Case: |x| ~< pi/4
	if ( ix <= HIGH_WORD_PIO4 ) {
		// Case: x < 2**-27
		if ( ix < HIGH_WORD_TWO_NEG_27 ) {
			return 1.0;
		}
		return kernelCos( x, 0.0 );
	}
	// Case: cos(Inf or NaN) is NaN */
	if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = rempio2( x, buffer );
	switch ( n & 3 ) {
	case 0:
		return kernelCos( buffer[ 0 ], buffer[ 1 ] );
	case 1:
		return -kernelSin( buffer[ 0 ], buffer[ 1 ] );
	case 2:
		return -kernelCos( buffer[ 0 ], buffer[ 1 ] );
	default:
		return kernelSin( buffer[ 0 ], buffer[ 1 ] );
	}
}


// EXPORTS //

module.exports = cos;

},{"@stdlib/math/base/special/kernel-cos":1662,"@stdlib/math/base/special/kernel-sin":1666,"@stdlib/math/base/special/rempio2":1760,"@stdlib/number/float64/base/get-high-word":1909}],1396:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( Math.PI/4.0 );
* // returns ~0.707
*
* v = cos( -Math.PI/6.0 );
* // returns ~0.866
*/

// MODULES //

var cos = require( './cos.js' );


// EXPORTS //

module.exports = cos;

},{"./cos.js":1395}],1397:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Computes the hyperbolic cosine of a number.
*
* ## Method
*
* ```tex
* \operatorname{cosh}(x)  =  \frac{ \exp(x) + \exp(-x) }{2}
* ```
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain   | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |
*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |
*
*
* @param {number} x - input value (in radians)
* @returns {number} hyperbolic cosine
*
* @example
* var v = cosh( 0.0 );
* // returns 1.0
*
* @example
* var v = cosh( 2.0 );
* // returns ~3.762
*
* @example
* var v = cosh( -2.0 );
* // returns ~3.762
*
* @example
* var v = cosh( NaN );
* // returns NaN
*/
function cosh( x ) {
	if ( isnan( x ) ) {
		return x;
	}
	if ( x < 0.0 ) {
		x = -x;
	}
	if ( x > 21.0 ) {
		return exp( x ) / 2.0;
	}
	return ( exp(x) + exp(-x) ) / 2.0;
}


// EXPORTS //

module.exports = cosh;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456}],1398:[function(require,module,exports){
'use strict';

/**
* Compute the hyperbolic cosine of a number.
*
* @module @stdlib/math/base/special/cosh
*
* @example
* var cosh = require( '@stdlib/math/base/special/cosh' );
*
* var v = cosh( 0.0 );
* // returns 1.0
*
* v = cosh( 2.0 );
* // returns ~3.762
*
* v = cosh( -2.0 );
* // returns ~3.762
*
* v = cosh( NaN );
* // returns NaN
*/

// MODULES //

var cosh = require( './cosh.js' );


// EXPORTS //

module.exports = cosh;

},{"./cosh.js":1397}],1399:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );
var polyval = require( './polyval_p.js' );


// VARIABLES //

var PIO4 = 7.85398163397448309616e-1; // 4/π


// MAIN //

/**
* Computes the cosine of a number minus one.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine minus one
*
* @example
* var v = cosm1( 0.0 );
* // returns 0.0
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = cosm1( PI/4.0 );
* // returns ~-0.291
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = cosm1( -PI/6.0 );
* // returns ~~-0.134
*
* @example
* var v = cosm1( NaN );
* // returns NaN
*/
function cosm1( x ) {
	var x2;
	if ( x < -PIO4 || x > PIO4 ) {
		return cos( x ) - 1.0;
	}
	x2 = x * x;
	return ( -0.5*x2 ) + ( x2*x2*polyval( x2 ) );
}


// EXPORTS //

module.exports = cosm1;

},{"./polyval_p.js":1401,"@stdlib/math/base/special/cos":1396}],1400:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number minus one.
*
* @module @stdlib/math/base/special/cosm1
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* var cosm1 = require( '@stdlib/math/base/special/cosm1' );
*
* var v = cosm1( 0.0 );
* // returns 0.0
*
* v = cosm1( PI/4.0 );
* // returns ~-0.291
*
* v = cosm1( -PI/6.0 );
* // returns ~-0.134
*/

// MODULES //

var cosm1 = require( './cosm1.js' );


// EXPORTS //

module.exports = cosm1;

},{"./cosm1.js":1399}],1401:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.041666666666666664;
	}
	return 0.041666666666666664 + (x * (-0.0013888888888888872 + (x * (0.00002480158730157055 + (x * (-2.755731921499979e-7 + (x * (2.087675428708152e-9 + (x * (-1.147028484342536e-11 + (x * 4.737750796424621e-14))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1402:[function(require,module,exports){
'use strict';

/*
* Notes:
*	=> cos(-x) = cos(x)
*	=> sin(-x) = -sin(x)
*	=> cos(π/2) = 0
*	=> cos(0) = 1
*	=> cos(π) = -1
*/


// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var abs = require( '@stdlib/math/base/special/abs' );
var cos = require( '@stdlib/math/base/special/cos' );
var sin = require( '@stdlib/math/base/special/sin' );
var floor = require( '@stdlib/math/base/special/floor' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var MAX_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );


// VARIABLES //

MAX_INTEGER += 1;


// MAIN //

/**
* Computes the value of `cos(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = cospi( 0.0 );
* // returns 1.0
*
* @example
* var y = cospi( 0.5 );
* // returns 0.0
*
* @example
* var y = cospi( 0.1 );
* // returns ~0.951
*
* @example
* var y = cospi( NaN );
* // returns NaN
*/
function cospi( x ) {
	var ax;
	var ix;
	var rx;
	var y;
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInfinite( x ) ) {
		return NaN;
	}
	ax = abs( x );
	if ( ax > MAX_INTEGER ) {
		// Always even integer...
		return 1.0;
	}
	// Argument reduction (reduce to [0,1))...
	ix = floor( ax );
	rx = ax - ix;
	if ( rx === 0.5 ) {
		return 0.0;
	}
	if ( rx < 0.25 ) {
		y = cos( PI*rx );
	}
	else if ( rx < 0.75 ) {
		rx = 0.5 - rx;
		y = sin( PI*rx ); // recall sin(-x) = -sin(x), thus returned result will be properly signed
	}
	else {
		rx = 1.0 - rx;
		y = -cos( PI*rx );
	}
	// If the integer of `x` is odd, we need to flip the sign...
	return ( ix%2 === 1 ) ? -y : y;
}


// EXPORTS //

module.exports = cospi;

},{"@stdlib/constants/math/float64-max-safe-integer":88,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/cos":1396,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/sin":1806}],1403:[function(require,module,exports){
'use strict';

/**
* Compute cos(πx).
*
* @module @stdlib/math/base/special/cospi
*
* @example
* var cospi = require( '@stdlib/math/base/special/cospi' );
*
* var y = cospi( 0.0 );
* // returns 1.0
*
* y = cospi( 0.5 );
* // returns 0.0
*
* y = cospi( 0.1 );
* // returns ~0.951
*
* y = cospi( NaN );
* // returns NaN
*/

// MODULES //

var cospi = require( './cospi.js' );


// EXPORTS //

module.exports = cospi;

},{"./cospi.js":1402}],1404:[function(require,module,exports){
'use strict';

// MODULES //

var sin = require( '@stdlib/math/base/special/sin' );


// MAIN //

/**
* Computes the coversed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} coversed cosine
*
* @example
* var v = covercos( 0.0 );
* // returns 1.0
*
* @example
* var v = covercos( Math.PI/2.0 );
* // returns 2.0
*
* @example
* var v = covercos( -Math.PI/6.0 );
* // returns 0.5
*
* @example
* var v = covercos( NaN );
* // returns NaN
*/
function covercos( x ) {
	return 1.0 + sin( x );
}


// EXPORTS //

module.exports = covercos;

},{"@stdlib/math/base/special/sin":1806}],1405:[function(require,module,exports){
'use strict';

/**
* Compute the coversed cosine.
*
* @module @stdlib/math/base/special/covercos
*
* @example
* var covercos = require( '@stdlib/math/base/special/covercos' );
*
* var v = covercos( 0.0 );
* // returns 1.0
*
* v = covercos( Math.PI/2.0 );
* // returns 2.0
*
* v = covercos( -Math.PI/6.0 );
* // returns 0.5
*
* v = covercos( NaN );
* // returns NaN
*/

// MODULES //

var covercos = require( './covercos.js' );


// EXPORTS //

module.exports = covercos;

},{"./covercos.js":1404}],1406:[function(require,module,exports){
'use strict';

// MODULES //

var sin = require( '@stdlib/math/base/special/sin' );


// MAIN //

/**
* Computes the coversed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} coversed sine
*
* @example
* var v = coversin( 0.0 );
* // returns 1.0
*
* @example
* var v = coversin( Math.PI/2.0 );
* // returns 0.0
*
* @example
* var v = coversin( -Math.PI/6.0 );
* // returns 1.5
*
* @example
* var v = coversin( NaN );
* // returns NaN
*/
function coversin( x ) {
	return 1.0 - sin( x );
}


// EXPORTS //

module.exports = coversin;

},{"@stdlib/math/base/special/sin":1806}],1407:[function(require,module,exports){
'use strict';

/**
* Compute the coversed sine.
*
* @module @stdlib/math/base/special/coversin
*
* @example
* var coversin = require( '@stdlib/math/base/special/coversin' );
*
* var v = coversin( 0.0 );
* // returns 1.0
*
* v = coversin( Math.PI/2.0 );
* // returns 0.0
*
* v = coversin( -Math.PI/6.0 );
* // returns 1.5
*
* v = coversin( NaN );
* // returns NaN
*/

// MODULES //

var coversin = require( './coversin.js' );


// EXPORTS //

module.exports = coversin;

},{"./coversin.js":1406}],1408:[function(require,module,exports){
'use strict';

// VARIABLES //

// π / 180.0
var PI_DIV_180 = 1.7453292519943295e-2;


// MAIN //

/**
* Converts an angle from degrees to radians.
*
* @param {number} x - angle in degrees
* @returns {number} angle in radians
*
* @example
* var r = deg2rad( 90.0 );
* // returns ~1.571
* @example
* var r = deg2rad( -45.0 );
* // returns ~-0.785
* @example
* var r = deg2rad( NaN );
* // returns NaN
*/
function deg2rad( x ) {
	return x * PI_DIV_180;
}


// EXPORTS //

module.exports = deg2rad;

},{}],1409:[function(require,module,exports){
'use strict';

/**
* Convert an angle from degrees to radians.
*
* @module @stdlib/math/base/special/deg2rad
*
* @example
* var deg2rad = require( '@stdlib/math/base/special/deg2rad' );
*
* var r = deg2rad( 90.0 );
* // returns ~1.571
*
* r = deg2rad( -45.0 );
* // returns ~-0.785
*
* r = deg2rad( NaN );
* // returns NaN
*/

// MODULES //

var deg2rad = require( './deg2rad.js' );


// EXPORTS //

module.exports = deg2rad;

},{"./deg2rad.js":1408}],1410:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var polyval = require( './polyval_p.js' );


// MAIN //

/**
* Evaluates the digamma function via asymptotic expansion.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function digamma( x ) {
	var y;
	var z;
	x -= 1.0;
	y = ln(x) + ( 1.0 / (2.0*x) );
	z = 1.0 / (x*x);
	return y - ( z*polyval( z ) );
}


// EXPORTS //

module.exports = digamma;

},{"./polyval_p.js":1413,"@stdlib/math/base/special/ln":1679}],1411:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}.
*
* The implementation follows the original but has been reformatted and modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var floor = require( '@stdlib/math/base/special/floor' );
var tan = require( '@stdlib/math/base/special/tan' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var asymptoticApprox = require( './asymptotic_expansion.js' );
var rationalApprox = require( './rational_approximation.js' );


// VARIABLES //

var MIN_SAFE_ASYMPTOTIC = 10.0; // BIG!


// MAIN //

/**
* Evaluates the digamma function.
*
* ## Method
*
* 1.  For \\(x < 0\\), we use the reflection formula
*
*     ```tex
*     \psi(1-x) = \psi(x) + \frac{\pi}{\tan(\pi x)}
*     ```
*
*     to make \\(x\\) positive.
*
* 2.  For \\(x \in [0,1]\\), we use the recurrence relation
*
*     ```tex
*     \psi(x) = \psi(x+1) - \frac{1}{x}
*     ```
*
*     to shift the evaluation range to \\([1,2]\\).
*
* 3.  For \\(x \in [1,2]\\), we use a rational approximation of the form
*
*     ```tex
*     \psi(x) = (x - \mathrm{root})(Y + \operatorname{R}(x-1))
*     ```
*
*     where \\(\mathrm{root}\\) is the location of the positive root of \\(\psi\\), \\(Y\\) is a constant, and \\(R\\) is optimized for low absolute error compared to \\(Y\\).
*
*     <!-- <note>-->
*
*     Note that, since \\(\mathrm{root}\\) is irrational, we need twice as many digits in \\(\mathrm{root}\\) as in \\(x\\) in order to avoid cancellation error during subtraction, assuming \\(x\\) has an exact value. This means that, even if \\(x\\) is rounded to the next representable value, the result of \\(\psi(x)\\) will not be zero.
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     This approach gives 17-digit precision.
*
*     <!-- </note> -->
*
* 4.  For \\(x \in [2,\mathrm{BIG}]\\), we use the recurrence relation
*
*     ```tex
*     \psi(x+1) = \psi(x) + \frac{1}{x}
*     ```
*
*     to shift the evaluation range to \\([1,2]\\).
*
* 5.  For \\(x > \mathrm{BIG}\\), we use the asymptotic expression
*
*     ```tex
*     \psi(x) = \ln(x) + \frac{1}{2x} - \biggl( \frac{B_{21}}{2x^2} + \frac{B_{22}}{4x^4} + \frac{B_{23}}{6x^6} + \ldots \biggr)
*     ```
*
*     This expansion, however, is divergent after a few terms. The number of terms depends on \\(x\\). Accordingly, we must choose a value of \\(\mathrm{BIG}\\) which allows us to truncate the series at a term that is too small to have an effect on the result. Setting \\(\mathrm{BIG} = 10\\), allows us to truncate the series early and evaluate as \\(1/x^2\\).
*
*     <!-- <note> -->
*
*     This approach gives 17-digit precision for \\(x \geq 10\\).
*
*     <!-- </note> -->
*
* ## Notes
*
* -   Maximum deviation found: \\(1.466\\mbox{e-}18\\)
* -   Max error found: \\(2.452\mbox{e-}17\\) (double precision)
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = digamma( -2.5 );
* // returns ~1.103
*
* @example
* var v = digamma( 1.0 );
* // returns ~-0.577
*
* @example
* var v = digamma( 10.0 );
* // returns ~2.252
*
* @example
* var v = digamma( NaN );
* // returns NaN
*
* @example
* var v = digamma( -1.0 );
* // returns NaN
*/
function digamma( x ) {
	var rem;
	var tmp;
	if ( isnan( x ) || x === 0.0 ) {
		return NaN;
	}
	// If `x` is negative, use reflection...
	if ( x <= -1.0 ) {
		// Reflect:
		x = 1.0 - x;

		// Argument reduction for tan:
		rem = x - floor(x);

		// Shift to negative if > 0.5:
		if ( rem > 0.5 ) {
			rem -= 1.0;
		}
		// Check for evaluation at a negative pole:
		if ( rem === 0.0 ) {
			return NaN;
		}
		tmp = PI / tan( PI * rem );
	} else {
		tmp = 0.0;
	}
	// If we're above the lower-limit for the asymptotic expansion, then use it...
	if ( x >= MIN_SAFE_ASYMPTOTIC ) {
		tmp += asymptoticApprox( x );
		return tmp;
	}
	// If x > 2, reduce to the interval [1,2]...
	while ( x > 2.0 ) {
		x -= 1.0;
		tmp += 1.0/x;
	}
	// If x < 1, use recurrence to shift to > 1..
	while ( x < 1.0 ) {
		tmp -= 1.0/x;
		x += 1.0;
	}
	tmp += rationalApprox( x );
	return tmp;
}


// EXPORTS //

module.exports = digamma;

},{"./asymptotic_expansion.js":1410,"./rational_approximation.js":1414,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/tan":1829}],1412:[function(require,module,exports){
'use strict';

/**
* Evaluate the digamma function.
*
* @module @stdlib/math/base/special/digamma
*
* @example
* var digamma = require( '@stdlib/math/base/special/digamma' );
*
* var v = digamma( -2.5 );
* // returns ~1.103
*
* v = digamma( 1.0 );
* // returns ~-0.577
*
* v = digamma( 10.0 );
* // returns ~2.252
*
* v = digamma( NaN );
* // returns NaN
*
* v = digamma( -1.0 );
* // returns NaN
*/

// MODULES //

var digamma = require( './digamma.js' );


// EXPORTS //

module.exports = digamma;

},{"./digamma.js":1411}],1413:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333333;
	}
	return 0.08333333333333333 + (x * (-0.008333333333333333 + (x * (0.003968253968253968 + (x * (-0.004166666666666667 + (x * (0.007575757575757576 + (x * (-0.021092796092796094 + (x * (0.08333333333333333 + (x * -0.4432598039215686))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1414:[function(require,module,exports){
'use strict';

// MODULES //

var rateval = require( './rational_pq.js' );


// VARIABLES //

var root1 = 1569415565.0 / 1073741824.0;
var root2 = ( 381566830.0 / 1073741824.0 ) / 1073741824.0;
var root3 = 0.9016312093258695918615325266959189453125e-19;
var Y = 0.99558162689208984;


// MAIN //

/**
* Evaluates the digamma function over interval `[1,2]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function digamma( x ) {
	var g;
	var r;
	g = x - root1;
	g -= root2;
	g -= root3;
	r = rateval( x-1.0 );
	return (g*Y) + (g*r);
}


// EXPORTS //

module.exports = digamma;

},{"./rational_pq.js":1415}],1415:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.25479851061131553;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.25479851061131553 + (x * (-0.3255503118680449 + (x * (-0.6503185377089651 + (x * (-0.28919126444774784 + (x * (-0.04525132144873906 + (x * (-0.002071332116774595 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (2.076711702373047 + (x * (1.4606242909763516 + (x * (0.43593529692665967 + (x * (0.054151797245674226 + (x * (0.0021284987017821146 + (x * -5.578984132167551e-7))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-0.002071332116774595 + (x * (-0.04525132144873906 + (x * (-0.28919126444774784 + (x * (-0.6503185377089651 + (x * (-0.3255503118680449 + (x * 0.25479851061131553))))))))))); // eslint-disable-line max-len
		s2 = -5.578984132167551e-7 + (x * (0.0021284987017821146 + (x * (0.054151797245674226 + (x * (0.43593529692665967 + (x * (1.4606242909763516 + (x * (2.076711702373047 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1416:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the Dirac delta function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = diracDelta( 0.0 );
* // returns Infinity
*
* @example
* var v = diracDelta( 3.14 );
* // returns 0.0
*
* @example
* var v = diracDelta( NaN );
* // returns NaN
*/
function diracDelta( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return PINF;
	}
	return 0.0;
}


// EXPORTS //

module.exports = diracDelta;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],1417:[function(require,module,exports){
'use strict';

/**
* Evaluate the Dirac delta function.
*
* @module @stdlib/math/base/special/dirac-delta
*
* @example
* var diracDelta = require( '@stdlib/math/base/special/dirac-delta' );
*
* var v = diracDelta( 0.0 );
* // returns Infinity
*
* v = diracDelta( 3.14 );
* // returns 0.0
*
* v = diracDelta( NaN );
* // returns NaN
*/

// MODULES //

var diracDelta = require( './dirac_delta.js' );


// EXPORTS //

module.exports = diracDelta;

},{"./dirac_delta.js":1416}],1418:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var powm1 = require( '@stdlib/math/base/special/powm1' );
var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );


// MAIN //

/**
* Evaluates the Dirichlet eta function.
*
* @param {number} s - input value
* @returns {number} function value
*
* @example
* var v = eta( 0.0 );
* // returns 0.5
*
* @example
* var v = eta( -1.0 );
* // returns 0.25
*
* @example
* var v = eta( 1.0 ); // => ln(2)
* // returns ~0.6931
*
* @example
* var v = eta( 3.14 );
* // returns ~0.9096
*
* @example
* var v = eta( NaN );
* // returns NaN
*/
function eta( s ) {
	if ( isnan( s ) ) {
		return NaN;
	}
	if ( s === 1.0 ) {
		// Alternating harmonic series...
		return LN2;
	}
	return -powm1( 2.0, 1.0-s ) * zeta( s );
}


// EXPORTS //

module.exports = eta;

},{"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/powm1":1754,"@stdlib/math/base/special/riemann-zeta":1766}],1419:[function(require,module,exports){
'use strict';

/**
* Evaluate the Dirichlet eta function.
*
* @module @stdlib/math/base/special/dirchlet-eta
*
* @example
* var eta = require( '@stdlib/math/base/special/dirchlet-eta' );
*
* var v = eta( 0.0 );
* // returns 0.5
*
* v = eta( -1.0 );
* // returns 0.25
*
* v = eta( 1.0 ); // => ln(2)
* // returns ~0.6931
*
* v = eta( 3.14 );
* // returns ~0.9096
*
* v = eta( NaN );
* // returns NaN
*/

// MODULES //

var eta = require( './eta.js' );


// EXPORTS //

module.exports = eta;

},{"./eta.js":1418}],1420:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c?revision=268523&view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var polyvalPP = require( './polyval_pp.js' );
var polyvalQQ = require( './polyval_qq.js' );
var polyvalPA = require( './polyval_pa.js' );
var polyvalQA = require( './polyval_qa.js' );
var polyvalRA = require( './polyval_ra.js' );
var polyvalSA = require( './polyval_sa.js' );
var polyvalRB = require( './polyval_rb.js' );
var polyvalSB = require( './polyval_sb.js' );


// VARIABLES //

var TINY = 1.0e-300;
var VERY_TINY = 2.848094538889218e-306; // 0x00800000, 0x00000000

// 2**-28 = 1/(1<<28) = 1/268435456
var SMALL = 3.725290298461914e-9;

var ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

var EFX = 1.28379167095512586316e-1;  // 0x3FC06EBA, 0x8214DB69
var EFX8 = 1.02703333676410069053;    // 0x3FF06EBA, 0x8214DB69

var PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var QQC = 1.0;

var PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var QAC = 1.0;

var RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var SAC = 1.0;

var RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var SBC = 1.0;


// MAIN //

/**
* Evaluates the error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erf( 2.0 );
* // returns ~0.9953
*
* @example
* var y = erf( -1.0 );
* // returns ~-0.8427
*
* @example
* var y = erf( -0.0 );
* // returns -0.0
*
* @example
* var y = erf( NaN );
* // returns NaN
*/
function erf( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( isnan( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === PINF ) {
		return 1.0;
	}
	// Special case: -infinity
	if ( x === NINF ) {
		return -1.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < SMALL ) {
			if ( ax < VERY_TINY ) {
				// Avoid underflow:
				return 0.125 * ( (8.0*x) + (EFX8*x) );
			}
			return x + (EFX*x);
		}
		z = x * x;
		r = PPC + ( z*polyvalPP( z ) );
		s = QQC + ( z*polyvalQQ( z ) );
		y = r / s;
		return x + (x*y);
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = PAC + ( s*polyvalPA( s ) );
		q = QAC + ( s*polyvalQA( s ) );
		if ( sign ) {
			return -ERX - (p/q);
		}
		return ERX + (p/q);
	}
	// +inf > |x| >= 6
	if ( ax >= 6.0 ) {
		if ( sign ) {
			return TINY - 1.0; // raise inexact
		}
		return 1.0 - TINY; // raise inexact
	}
	s = 1.0 / (ax*ax);

	// |x| < 1/0.35 ~ 2.857143
	if ( ax < 2.857142857142857 ) {
		r = RAC + ( s*polyvalRA( s ) );
		s = SAC + ( s*polyvalSA( s ) );
	}
	// |x| >= 1/0.35 ~ 2.857143
	else {
		r = RBC + ( s*polyvalRB( s ) );
		s = SBC + ( s*polyvalSB( s ) );
	}
	z = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x
	r = exp( -(z*z) - 0.5625 ) * exp( ( (z-ax) * (z+ax) ) + (r/s) );
	if ( sign ) {
		return (r/ax) - 1.0;
	}
	return 1.0 - (r/ax);
}


// EXPORTS //

module.exports = erf;

},{"./polyval_pa.js":1422,"./polyval_pp.js":1423,"./polyval_qa.js":1424,"./polyval_qq.js":1425,"./polyval_ra.js":1426,"./polyval_rb.js":1427,"./polyval_sa.js":1428,"./polyval_sb.js":1429,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/number/float64/base/set-low-word":1920}],1421:[function(require,module,exports){
'use strict';

/**
* Evaluate the error function.
*
* @module @stdlib/math/base/special/erf
*
* @example
* var erf = require( '@stdlib/math/base/special/erf' );
*
* var y = erf( 2.0 );
* // returns ~0.9953
*
* y = erf( -1.0 );
* // returns ~-0.8427
*
* y = erf( -0.0 );
* // returns -0.0
*
* y = erf( NaN );
* // returns NaN
*/

// MODULES //

var erf = require( './erf.js' );


// EXPORTS //

module.exports = erf;

},{"./erf.js":1420}],1422:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.41485611868374833;
	}
	return 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1423:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.3250421072470015;
	}
	return -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1424:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.10642088040084423;
	}
	return 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1425:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.39791722395915535;
	}
	return 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1426:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.6938585727071818;
	}
	return -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1427:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.799283237680523;
	}
	return -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1428:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 19.651271667439257;
	}
	return 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1429:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 30.33806074348246;
	}
	return 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1430:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c?revision=268523&view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var polyvalPP = require( './polyval_pp.js' );
var polyvalQQ = require( './polyval_qq.js' );
var polyvalPA = require( './polyval_pa.js' );
var polyvalQA = require( './polyval_qa.js' );
var polyvalRA = require( './polyval_ra.js' );
var polyvalSA = require( './polyval_sa.js' );
var polyvalRB = require( './polyval_rb.js' );
var polyvalSB = require( './polyval_sb.js' );


// VARIABLES //

var TINY = 1.0e-300;

// 2**-56 = 1/(2**56) = 1/72057594037927940
var SMALL = 1.3877787807814457e-17;

var ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

var PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var QQC = 1.0;

var PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var QAC = 1.0;

var RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var SAC = 1.0;

var RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var SBC = 1.0;


// MAIN //

/**
* Evaluates the complementary error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* @example
* var y = erfc( -1.0 );
* // returns ~-1.8427
*
* @example
* var y = erfc( 0.0 );
* // returns 1.0
*
* @example
* var y = erfc( Infinity );
* // returns 0.0
*
* @example
* var y = erfc( -Infinity );
* // returns 2.0
*
* @example
* var y = erfc( NaN );
* // returns NaN
*/
function erfc( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( isnan( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === PINF ) {
		return 0.0;
	}
	// Special case: -infinity
	if ( x === NINF ) {
		return 2.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < SMALL ) {
			return 1.0 - x; // raise inexact
		}
		z = x * x;
		r = PPC + ( z*polyvalPP( z ) );
		s = QQC + ( z*polyvalQQ( z ) );
		y = r / s;

		// x < 1/4
		if ( x < 0.25 ) {
			return 1.0 - ( x + (x*y) );
		}
		r = x * y;
		r += x - 0.5;
		return 0.5 - r;
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = PAC + ( s*polyvalPA( s ) );
		q = QAC + ( s*polyvalQA( s ) );
		if ( sign ) {
			return 1.0 + ERX + (p/q);
		}
		return 1.0 - ERX - (p/q);
	}
	// |x| < 28
	if ( ax < 28.0 ) {
		s = 1.0 / (ax*ax);

		// |x| < 1/0.35 ~ 2.857143
		if ( ax < 2.857142857142857 ) {
			r = RAC + ( s*polyvalRA( s ) );
			s = SAC + ( s*polyvalSA( s ) );
		}
		// |x| >= 1/0.35 ~ 2.857143
		else {
			// x < -6
			if ( x < -6.0 ) {
				return 2.0 - TINY; // raise inexact
			}
			r = RBC + ( s*polyvalRB( s ) );
			s = SBC + ( s*polyvalSB( s ) );
		}
		z = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x
		r = exp( -(z*z) - 0.5625 ) * exp( ((z-ax)*(z+ax)) + (r/s) );
		if ( sign ) {
			return 2.0 - (r/ax);
		}
		return r/ax;
	}
	if ( sign ) {
		return 2.0 - TINY; // raise inexact; ~2
	}
	return TINY * TINY; // raise inexact; ~0
}


// EXPORTS //

module.exports = erfc;

},{"./polyval_pa.js":1432,"./polyval_pp.js":1433,"./polyval_qa.js":1434,"./polyval_qq.js":1435,"./polyval_ra.js":1436,"./polyval_rb.js":1437,"./polyval_sa.js":1438,"./polyval_sb.js":1439,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/exp":1456,"@stdlib/number/float64/base/set-low-word":1920}],1431:[function(require,module,exports){
'use strict';

/**
* Evaluate the complementary error function.
*
* @module @stdlib/math/base/special/erfc
*
* @example
* var erfc = require( '@stdlib/math/base/special/erfc' );
*
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* y = erfc( -1.0 );
* // returns ~-1.8427
*
* y = erfc( 0.0 );
* // returns 1.0
*
* y = erfc( Infinity );
* // returns 0.0
*
* y = erfc( -Infinity );
* // returns 2.0
*
* y = erfc( NaN );
* // returns NaN
*/

// MODULES //

var erfc = require( './erfc.js' );


// EXPORTS //

module.exports = erfc;

},{"./erfc.js":1430}],1432:[function(require,module,exports){
arguments[4][1422][0].apply(exports,arguments)
},{"dup":1422}],1433:[function(require,module,exports){
arguments[4][1423][0].apply(exports,arguments)
},{"dup":1423}],1434:[function(require,module,exports){
arguments[4][1424][0].apply(exports,arguments)
},{"dup":1424}],1435:[function(require,module,exports){
arguments[4][1425][0].apply(exports,arguments)
},{"dup":1425}],1436:[function(require,module,exports){
arguments[4][1426][0].apply(exports,arguments)
},{"dup":1426}],1437:[function(require,module,exports){
arguments[4][1427][0].apply(exports,arguments)
},{"dup":1427}],1438:[function(require,module,exports){
arguments[4][1428][0].apply(exports,arguments)
},{"dup":1428}],1439:[function(require,module,exports){
arguments[4][1429][0].apply(exports,arguments)
},{"dup":1429}],1440:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}.
*
* This implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var rationalFcnR1 = require( './rational_p1q1.js' );
var rationalFcnR2 = require( './rational_p2q2.js' );
var rationalFcnR3 = require( './rational_p3q3.js' );
var rationalFcnR4 = require( './rational_p4q4.js' );
var rationalFcnR5 = require( './rational_p5q5.js' );


// VARIABLES //

var Y1 = 8.91314744949340820313e-2;
var Y2 = 2.249481201171875;
var Y3 = 8.07220458984375e-1;
var Y4 = 9.3995571136474609375e-1;
var Y5 = 9.8362827301025390625e-1;


// MAIN //

/**
* Evaluates the inverse complementary error function.
*
* Note that
*
* ```tex
* \operatorname{erfc^{-1}}(1-z) = \operatorname{erf^{-1}}(z)
* ```
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfcinv( 0.8 );
* // returns ~-0.1791
*
* @example
* var y = erfcinv( 0.0 );
* // returns Infinity
*
* @example
* var y = erfcinv( 2.0 );
* // returns -Infinity
*
* @example
* var y = erfcinv( NaN );
* // returns NaN
*/
function erfcinv( x ) {
	var sign;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( isnan( x ) ) {
		return NaN;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return PINF;
	}
	// Special case: 2
	if ( x === 2.0 ) {
		return NINF;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x > 2.0 || x < 0.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is outside [0,1], we can take advantage of the complementary error function reflection formula: `erfc(-z) = 2 - erfc(z)`, by negating the result once finished.
	if ( x > 1.0 ) {
		sign = -1.0;
		q = 2.0 - x;
	} else {
		sign = 1.0;
		q = x;
	}
	x = 1.0 - q;

	// x = 1-q <= 0.5
	if ( x <= 0.5 ) {
		g = x * ( x + 10.0 );
		r = rationalFcnR1( x );
		return sign * ( (g*Y1) + (g*r) );
	}
	// q >= 0.25
	if ( q >= 0.25 ) {
		g = sqrt( -2.0 * ln(q) );
		q -= 0.25;
		r = rationalFcnR2( q );
		return sign * ( g / (Y2+r) );
	}
	q = sqrt( -ln( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = rationalFcnR3( qs );
		return sign * ( (Y3*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = rationalFcnR4( qs );
		return sign * ( (Y4*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = rationalFcnR5( qs );
	return sign * ( (Y5*q) + (r*q) );
}


// EXPORTS //

module.exports = erfcinv;

},{"./rational_p1q1.js":1442,"./rational_p2q2.js":1443,"./rational_p3q3.js":1444,"./rational_p4q4.js":1445,"./rational_p5q5.js":1446,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826}],1441:[function(require,module,exports){
'use strict';

/**
* Evaluate the inverse complementary error function.
*
* @module @stdlib/math/base/special/erfcinv
*
* @example
* var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
*
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* y = erfcinv( 0.8 );
* // returns ~-0.1791
*
* y = erfcinv( 0.0 );
* // returns Infinity
*
* y = erfcinv( 2.0 );
* // returns -Infinity
*
* y = erfcinv( NaN );
* // returns NaN
*/

// MODULES //

var erfcinv = require( './erfcinv.js' );


// EXPORTS //

module.exports = erfcinv;

},{"./erfcinv.js":1440}],1442:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0005087819496582806;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1443:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.20243350835593876;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len
		s2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1444:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.1311027816799519;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1445:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0350353787183178;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1446:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.016743100507663373;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1447:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}.
*
* This implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var rationalFcnR1 = require( './rational_p1q1.js' );
var rationalFcnR2 = require( './rational_p2q2.js' );
var rationalFcnR3 = require( './rational_p3q3.js' );
var rationalFcnR4 = require( './rational_p4q4.js' );
var rationalFcnR5 = require( './rational_p5q5.js' );


// VARIABLES //

var Y1 = 8.91314744949340820313e-2;
var Y2 = 2.249481201171875;
var Y3 = 8.07220458984375e-1;
var Y4 = 9.3995571136474609375e-1;
var Y5 = 9.8362827301025390625e-1;


// MAIN //

/**
* Evaluates the inverse error function.
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfinv( 0.8 );
* // returns ~0.9062
*
* @example
* var y = erfinv( 0.0 );
* // returns 0.0
*
* @example
* var y = erfinv( -0.0 );
* // returns -0.0
*
* @example
* var y = erfinv( -1.0 );
* // returns -Infinity
*
* @example
* var y = erfinv( 1.0 );
* // returns Infinity
*
* @example
* var y = erfinv( NaN );
* // returns NaN
*/
function erfinv( x ) {
	var sign;
	var ax;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( isnan( x ) ) {
		return NaN;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return PINF;
	}
	// Special case: -1
	if ( x === -1.0 ) {
		return NINF;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	// Special case: |x| > 1 (range error)
	if ( x > 1.0 || x < -1.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.
	if ( x < 0.0 ) {
		sign = -1.0;
		ax = -x;
	} else {
		sign = 1.0;
		ax = x;
	}
	q = 1.0 - ax;

	// |x| <= 0.5
	if ( ax <= 0.5 ) {
		g = ax * ( ax + 10.0 );
		r = rationalFcnR1( ax );
		return sign * ( (g*Y1) + (g*r) );
	}
	// 1-|x| >= 0.25
	if ( q >= 0.25 ) {
		g = sqrt( -2.0 * ln(q) );
		q -= 0.25;
		r = rationalFcnR2( q );
		return sign * ( g / (Y2+r) );
	}
	q = sqrt( -ln( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = rationalFcnR3( qs );
		return sign * ( (Y3*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = rationalFcnR4( qs );
		return sign * ( (Y4*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = rationalFcnR5( qs );
	return sign * ( (Y5*q) + (r*q) );
}


// EXPORTS //

module.exports = erfinv;

},{"./rational_p1q1.js":1449,"./rational_p2q2.js":1450,"./rational_p3q3.js":1451,"./rational_p4q4.js":1452,"./rational_p5q5.js":1453,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826}],1448:[function(require,module,exports){
'use strict';

/**
* Evaluate the inverse error function.
*
* @module @stdlib/math/base/special/erfinv
*
* @example
* var erfinv = require( '@stdlib/math/base/special/erfinv' );
*
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* y = erfinv( 0.8 );
* // returns ~0.9062
*
* y = erfinv( 0.0 );
* // returns 0.0
*
* y = erfinv( -0.0 );
* // returns -0.0
*
* y = erfinv( -1.0 );
* // returns -Infinity
*
* y = erfinv( 1.0 );
* // returns Infinity
*
* y = erfinv( NaN );
* // returns NaN
*/

// MODULES //

var erfinv = require( './erfinv.js' );


// EXPORTS //

module.exports = erfinv;

},{"./erfinv.js":1447}],1449:[function(require,module,exports){
arguments[4][1442][0].apply(exports,arguments)
},{"dup":1442}],1450:[function(require,module,exports){
arguments[4][1443][0].apply(exports,arguments)
},{"dup":1443}],1451:[function(require,module,exports){
arguments[4][1444][0].apply(exports,arguments)
},{"dup":1444}],1452:[function(require,module,exports){
arguments[4][1445][0].apply(exports,arguments)
},{"dup":1445}],1453:[function(require,module,exports){
arguments[4][1446][0].apply(exports,arguments)
},{"dup":1446}],1454:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var expmulti = require( './expmulti.js' );


// VARIABLES //

var LN2_HI = 6.93147180369123816490e-01;
var LN2_LO = 1.90821492927058770002e-10;
var LOG2_E = 1.44269504088896338700e+00;
var OVERFLOW = 7.09782712893383973096e+02;
var UNDERFLOW = -7.45133219101941108420e+02;
var NEARZERO = 1.0 / (1 << 28); // 2^-28;
var NEG_NEARZERO = -NEARZERO;


// MAIN //

/**
* Evaluates the natural exponential function.
*
* ## Method
*
* 1.  We reduce \\( x \\) to an \\( r \\) so that \\( |r| \leq 0.5 \cdot \ln(2) \approx 0.34658 \\). Given \\( x \\), we find an \\( r \\) and integer \\( k \\) such that
*
*    ```tex
*    \begin{align*}
*    x &= k \cdot \ln(2) + r \\
*    |r| &\leq 0.5 \cdot \ln(2)
*    \end{align*}
*    ```
*
*    <!-- <note> -->
*
*    \\( r \\) can be represented as \\( r = \mathrm{hi} - \mathrm{lo} \\) for better accuracy.
*
*    <!-- </note> -->
*
* 2.  We approximate of \\( e^{r} \\) by a special rational function on the interval \\([0,0.34658]\\):
*
*    ```tex
*    \begin{align*}
*    R\left(r^2\right) &= r \cdot \frac{ e^{r}+1 }{ e^{r}-1 } \\
*    &= 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*    \end{align*}
*    ```
*
*    We use a special Remes algorithm on \\([0,0.34658]\\) to generate a polynomial of degree \\(5\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-59}\\). In other words,
*
*    ```tex
*    R(z) \sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5
*    ```
*
*    where \\( z = r^2 \\) and
*
*    ```tex
*    \left|  2 + P_1 z + \ldots + P_5 z^5  - R(z) \right| \leq 2^{-59}
*    ```
*
*    <!-- <note> -->
*
*    The values of \\( P_1 \\) to \\( P_5 \\) are listed in the source code.
*
*    <!-- </note> -->
*
*    The computation of \\( e^{r} \\) thus becomes
*
*    ```tex
*    \begin{align*}
*    e^{r} &= 1 + \frac{2r}{R-r} \\
*          &= 1 + r + \frac{r \cdot R_1(r)}{2 - R_1(r)}\ \text{for better accuracy}
*    \end{align*}
*    ```
*
*    where
*
*    ```tex
*    R_1(r) = r - P_1\ r^2 + P_2\ r^4 + \ldots + P_5\ r^{10}
*    ```
*
* 3.  We scale back to obtain \\( e^{x} \\). From step 1, we have
*
*    ```tex
*    e^{x} = 2^k e^{r}
*    ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* e^\infty &= \infty \\
* e^{-\infty} &= 0 \\
* e^{\mathrm{NaN}} &= \mathrm{NaN} \\
* e^0 &= 1\ \mathrm{is\ exact\ for\ finite\ argument\ only}
* \end{align*}
* ```
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   For an IEEE double,
*
*     -   if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(e^{x}\\) overflows
*     -   if \\(x < -7.45133219101941108420\mbox{e+}02\\), then \\(e^{x}\\) underflows
*
* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp( 4.0 );
* // returns ~54.5982
*
* @example
* var v = exp( -9.0 );
* // returns ~1.234e-4
*
* @example
* var v = exp( 0.0 );
* // returns 1.0
*
* @example
* var v = exp( NaN );
* // returns NaN
*/
function exp( x ) {
	var hi;
	var lo;
	var k;

	if ( isnan( x ) || x === PINF ) {
		return x;
	}
	if ( x === NINF ) {
		return 0.0;
	}
	if ( x > OVERFLOW ) {
		return PINF;
	}
	if ( x < UNDERFLOW ) {
		return 0.0;
	}
	if (
		x > NEG_NEARZERO &&
		x < NEARZERO
	) {
		return 1.0 + x;
	}
	// Reduce and compute `r = hi - lo` for extra precision.
	if ( x < 0.0 ) {
		k = trunc( (LOG2_E*x) - 0.5 );
	} else {
		k = trunc( (LOG2_E*x) + 0.5 );
	}
	hi = x - (k*LN2_HI);
	lo = k * LN2_LO;

	return expmulti( hi, lo, k );
}


// EXPORTS //

module.exports = exp;

},{"./expmulti.js":1455,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/trunc":1841}],1455:[function(require,module,exports){
'use strict';

// MODULES //

var ldexp = require( '@stdlib/math/base/special/ldexp' );
var polyvalP = require( './polyval_p.js' );


// MAIN //

/**
* Computes \\(e^{r} 2^k\\) where \\(r = \mathrm{hi} - \mathrm{lo}\\) and \\(|r| \leq \ln(2)/2\\).
*
* @private
* @param {number} hi - upper bound
* @param {number} lo - lower bound
* @param {integer} k - power of 2
* @returns {number} function value
*/
function expmulti( hi, lo, k ) {
	var r;
	var t;
	var c;
	var y;

	r = hi - lo;
	t = r * r;
	c = r - ( t*polyvalP( t ) );
	y = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);

	return ldexp( y, k );
}


// EXPORTS //

module.exports = expmulti;

},{"./polyval_p.js":1457,"@stdlib/math/base/special/ldexp":1676}],1456:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural exponential function.
*
* @module @stdlib/math/base/special/exp
*
* @example
* var exp = require( '@stdlib/math/base/special/exp' );
*
* var v = exp( 4.0 );
* // returns ~54.5982
*
* v = exp( -9.0 );
* // returns ~1.234e-4
*
* v = exp( 0.0 );
* // returns 1.0
*
* v = exp( NaN );
* // returns NaN
*/

// MODULES //

var exp = require( './exp.js' );


// EXPORTS //

module.exports = exp;

},{"./exp.js":1454}],1457:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666602;
	}
	return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1458:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var MAXL10 = require( '@stdlib/constants/math/float64-max-base10-exponent' );
var MINL10 = require( '@stdlib/constants/math/float64-min-base10-exponent' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var polyvalP = require( './polyval_p.js' );
var polyvalQ = require( './polyval_q.js' );


// VARIABLES //

var LOG210 = 3.32192809488736234787e0;
var LG102A = 3.01025390625000000000e-1;
var LG102B = 4.60503898119521373889e-6;


// MAIN //

/**
* Returns `10` raised to the `x` power.
*
* ## Method
*
* -   Range reduction is accomplished by expressing the argument as \\( 10^x = 2^n 10^f \\), with \\( |f| < 0.5 log_{10}(2) \\). The Pade' form
*
*     ```tex
*     1 + 2x \frac{P(x^2)}{Q(x^2) - P(x^2)}
*     ```
*
*     is used to approximate \\( 10^f \\).
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain      | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | -307,+307   |  30000   | 2.2e-16 | 5.5e-17 |
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp10( 3.0 );
* // returns 1000.0
*
* @example
* var v = exp10( -9.0 );
* // returns 1.0e-9
*
* @example
* var v = exp10( 0.0 );
* // returns 1.0
*
* @example
* var v = exp10( NaN );
* // returns NaN
*/
function exp10( x ) {
	var px;
	var xx;
	var n;

	if ( isnan( x ) ) {
		return x;
	}
	if ( x > MAXL10 ) {
		return PINF;
	}
	if ( x < MINL10 ) {
		return 0.0;
	}

	// Express 10^x = 10^g 2^n = 10^g 10^( n log10(2) ) = 10^( g + n log10(2) )
	px = floor( (LOG210*x) + 0.5 );
	n = px;
	x -= px * LG102A;
	x -= px * LG102B;

	// Rational approximation for exponential of the fractional part: 10^x = 1 + 2x P(x^2)/( Q(x^2) - P(x^2) )
	xx = x * x;
	px = x * polyvalP( xx );
	x = px / ( polyvalQ( xx ) - px );
	x = 1.0 + ldexp( x, 1 );

	// Multiply by power of 2:
	return ldexp( x, n );
}


// EXPORTS //

module.exports = exp10;

},{"./polyval_p.js":1460,"./polyval_q.js":1461,"@stdlib/constants/math/float64-max-base10-exponent":84,"@stdlib/constants/math/float64-min-base10-exponent":93,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ldexp":1676}],1459:[function(require,module,exports){
'use strict';

/**
* Evaluate the base `10` exponential function.
*
* @module @stdlib/math/base/special/exp10
*
* @example
* var exp10 = require( '@stdlib/math/base/special/exp10' );
*
* var v = exp10( 3.0 );
* // returns 1000.0
*
* v = exp10( -9.0 );
* // returns 1.0e-9
*
* v = exp10( 0.0 );
* // returns 1.0
*
* v = exp10( NaN );
* // returns NaN
*/

// MODULES //

var exp10 = require( './exp10.js' );


// EXPORTS //

module.exports = exp10;

},{"./exp10.js":1458}],1460:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 2394.2374120738828;
	}
	return 2394.2374120738828 + (x * (406.7172899368727 + (x * (11.745273255434405 + (x * 0.040996251979858706))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1461:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 2079.608192860019;
	}
	return 2079.608192860019 + (x * (1272.0927117834513 + (x * (85.09361608493066 + (x * 1.0))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1462:[function(require,module,exports){
'use strict';

// TODO: replace with TOMS (Openlibm) algo

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' ); // eslint-disable-line id-length
var FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-min-base2-exponent' ); // eslint-disable-line id-length
var round = require( '@stdlib/math/base/special/round' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var polyvalP = require( './polyval_p.js' );
var polyvalQ = require( './polyval_q.js' );


// MAIN //

/**
* Evaluates the base `2` exponential function.
*
* ## Method
*
* -   Range reduction is accomplished by separating the argument into an integer \\( k \\) and fraction \\( f \\) such that
*
*     ```tex
*     2^x = 2^k 2^f
*     ```
*
* -   A Pade' approximate
*
*     ```tex
*     1 + 2x \frac{\mathrm{P}\left(x^2\right)}{\mathrm{Q}\left(x^2\right) - x \mathrm{P}\left(x^2\right)}
*     ```
*
*     approximates \\( 2^x \\) in the basic range \\( [-0.5, 0.5] \\).
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain      | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | -1022,+1024 | 30000    | 1.8e-16 | 5.4e-17 |
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp2( 3.0 );
* // returns 8.0
*
* @example
* var v = exp2( -9.0 );
* // returns ~0.002
*
* @example
* var v = exp2( 0.0 );
* // returns 1.0
*
* @example
* var v = exp2( NaN );
* // returns NaN
*/
function exp2( x ) {
	var px;
	var xx;
	var n;
	if ( isnan( x ) ) {
		return x;
	}
	if ( x > FLOAT64_MAX_BASE2_EXPONENT ) {
		return PINF;
	}
	if ( x < FLOAT64_MIN_BASE2_EXPONENT ) {
		return 0.0;
	}
	// Separate into integer and fractional parts...
	n = round( x );
	x -= n;

	xx = x * x;
	px = x * polyvalP( xx );
	x = px / ( polyvalQ( xx ) - px );
	x = 1.0 + ldexp( x, 1 );

	// Scale by power of 2:
	return ldexp( x, n );
}


// EXPORTS //

module.exports = exp2;

},{"./polyval_p.js":1464,"./polyval_q.js":1465,"@stdlib/constants/math/float64-max-base2-exponent":86,"@stdlib/constants/math/float64-min-base2-exponent":95,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ldexp":1676,"@stdlib/math/base/special/round":1777}],1463:[function(require,module,exports){
'use strict';

/**
* Evaluate the base `2` exponential function.
*
* @module @stdlib/math/base/special/exp2
*
* @example
* var exp2 = require( '@stdlib/math/base/special/exp2' );
*
* var v = exp2( 3.0 );
* // returns 8.0
*
* v = exp2( -9.0 );
* // returns ~0.002
*
* v = exp2( 0.0 );
* // returns 1.0
*
* v = exp2( NaN );
* // returns NaN
*/

// MODULES //

var exp2 = require( './exp2.js' );


// EXPORTS //

module.exports = exp2;

},{"./exp2.js":1462}],1464:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1513.906801156151;
	}
	return 1513.906801156151 + (x * (20.202065669316532 + (x * 0.023093347705734523))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1465:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 4368.211668792106;
	}
	return 4368.211668792106 + (x * (233.1842117223149 + (x * 1.0))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1466:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [netlib]{@link http://www.netlib.org/fdlibm/s_expm1.c}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var highWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var LN2_HALF = require( '@stdlib/constants/math/float64-half-ln-two' );
var polyval = require( './polyval_q.js' );


// VARIABLES //

var OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF

// High and low words of ln(2):
var LN2_HI = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000
var LN2_LO = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76

// 1 / ln(2):
var LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE

// ln(2) * 56:
var LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1

// ln(2) * 1.5:
var LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73


// MAIN //

/**
* Computes `exp(x) - 1`.
*
* ## Method
*
* 1.  Given \\(x\\), we use argument reduction to find \\(r\\) and an integer \\(k\\) such that
*
*     ```tex
*     x = k \cdot \ln(2) + r
*     ```
*
*     where
*
*     ```tex
*     |r| \leq \frac{\ln(2)}{2} \approx 0.34658
*     ```
*
*     <!-- <note> -->
*
*     A correction term \\(c\\) will need to be computed to compensate for the error in \\(r\\) when rounded to a floating-point number.
*
*     <!-- </note> -->
*
* 2.  To approximate \\(\operatorname{expm1}(r)\\), we use a special rational function on the interval \\([0,0.34658]\\). Since
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     ```
*
*     we define \\(\operatorname{R1}(r^2)\\) by
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} \operatorname{R1}(r^2)
*     ```
*
*     That is,
*
*     ```tex
*     \begin{align*}
*     \operatorname{R1}(r^2) &= \frac{6}{r} \biggl(\frac{e^r+1}{e^r-1} - \frac{2}{r}\biggr) \\
*     &= \frac{6}{r} \biggl( 1 + 2 \biggl(\frac{1}{e^r-1} - \frac{1}{r}\biggr)\biggr) \\
*     &= 1 - \frac{r^2}{60} + \frac{r^4}{2520} - \frac{r^6}{100800} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\([0,0.347]\\) to generate a polynomial of degree \\(5\\) in \\(r^2\\) to approximate \\(\mathrm{R1}\\). The maximum error of this polynomial approximation is bounded by \\(2^{-61}\\). In other words,
*
*     ```tex
*     \operatorname{R1}(z) \approx 1 + \mathrm{Q1} \cdot z + \mathrm{Q2} \cdot z^2 + \mathrm{Q3} \cdot z^3 + \mathrm{Q4} \cdot z^4 + \mathrm{Q5} \cdot z^5
*     ```
*
*     where
*
*     ```tex
*     \begin{align*}
*     \mathrm{Q1} &= -1.6666666666666567384\mbox{e-}2 \\
*     \mathrm{Q2} &= 3.9682539681370365873\mbox{e-}4 \\
*     \mathrm{Q3} &= -9.9206344733435987357\mbox{e-}6 \\
*     \mathrm{Q4} &= 2.5051361420808517002\mbox{e-}7 \\
*     \mathrm{Q5} &= -6.2843505682382617102\mbox{e-}9
*     \end{align*}
*     ```
*
*     where \\(z = r^2\\) and the values of \\(\mathrm{Q1}\\) to \\(\mathrm{Q5}\\) are listed in the source. The error is bounded by
*
*     ```tex
*     \biggl| 1 + \mathrm{Q1} \cdot z + \ldots + \mathrm{Q5} \cdot z - \operatorname{R1}(z) \biggr| \leq 2^{-61}
*     ```
*
*     \\(\operatorname{expm1}(r) = e^r - 1\\) is then computed by the following specific way which minimizes the accumulated rounding error
*
*     ```tex
*     \operatorname{expm1}(r) = r + \frac{r^2}{2} + \frac{r^3}{2} \biggl( \frac{3 - (\mathrm{R1} + \mathrm{R1} \cdot \frac{r}{2})}{6 - r ( 3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr)
*     ```
*
*     To compensate for the error in the argument reduction, we use
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &= \operatorname{expm1}(r) + c + \operatorname{expm1}(r) \cdot c \\
*     &\approx \operatorname{expm1}(r) + c + rc
*     \end{align*}
*     ```
*
*     Thus, \\(c + rc\\) will be added in as the correction terms for \\(\operatorname{expm1}(r+c)\\). Now, we can rearrange the term to avoid optimization screw up.
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &\approx r - \biggl( \biggl( r + \biggl( \frac{r^2}{2} \biggl( \frac{\mathrm{R1} - (3 - \mathrm{R1} \cdot \frac{r}{2})}{6 - r (3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr) - c \biggr) - c \biggr) - \frac{r^2}{2} \biggr) \\
*     &= r - \mathrm{E}
*     \end{align*}
*     ```
*
* 3.  To scale back to obtain \\(\operatorname{expm1}(x)\\), we have (from step 1)
*
*     ```tex
*     \operatorname{expm1}(x) = \begin{cases}
*     2^k  (\operatorname{expm1}(r) + 1) - 1 \\
*     2^k (\operatorname{expm1}(r) + (1-2^{-k}))
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{expm1}(\infty) &= \infty \\
* \operatorname{expm1}(-\infty) &= -1 \\
* \operatorname{expm1}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   For finite arguments, only \\(\operatorname{expm1}(0) = 0\\) is exact.
*
* -   To save one multiplication, we scale the coefficient \\(\mathrm{Qi}\\) to \\(\mathrm{Qi} \cdot {2^i}\\) and replace \\(z\\) by \\(\frac{x^2}{2}\\).
*
* -   To achieve maximum accuracy, we compute \\(\operatorname{expm1}(x)\\) by
*
*     -   if \\(x < -56 \cdot \ln(2)\\), return \\(-1.0\\) (raise inexact if \\(x\\) does not equal \\(\infty\\))
*
*     -   if \\(k = 0\\), return \\(r-\mathrm{E}\\)
*
*     -   if \\(k = -1\\), return \\(\frac{(r-\mathrm{E})-1}{2}\\)
*
*     -   if \\(k = 1\\),
*
*         -   if \\(r < -0.25\\), return \\(2((r+0.5)- \mathrm{E})\\)
*         -   else return \\(1+2(r-\mathrm{E})\\)
*
*     -   if \\(k < -2\\) or \\(k > 56\\), return \\(2^k(1-(\mathrm{E}-r)) - 1\\) (or \\(e^x-1\\))
*
*     -   if \\(k \leq 20\\), return \\(2^k((1-2^{-k})-(\mathrm{E}-r))\\)
*
*     -   else return \\(2^k(1-((\mathrm{E}+2^{-k})-r))\\)

* -   For IEEE 754 double, if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(\operatorname{expm1}(x)\\) will overflow.
*
* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
*
* ## Accuracy
*
* According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = expm1( 0.2 );
* // returns ~0.221
*
* @example
* var v = expm1( -9.0 );
* // returns ~-0.999
*
* @example
* var v = expm1( 0.0 );
* // returns 0.0
*
* @example
* var v = expm1( NaN );
* // returns NaN
*/
function expm1( x ) {
	var halfX;
	var sign;
	var hi;
	var lo;
	var hx;
	var r1;
	var y;
	var z;
	var c;
	var t;
	var e;
	var k;

	if ( x === PINF || isnan( x ) ) {
		return x;
	}
	if ( x === NINF ) {
		return -1.0;
	}
	if ( x === 0.0 ) {
		return x; // handles +-0 (IEEE 754-2008)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		sign = true;
		y = -x;
	} else {
		sign = false;
		y = x;
	}
	// Filter out huge and non-finite arguments...
	if ( y >= LN2x56 ) { // if |x| >= 56*ln(2)
		if ( sign ) { // if x <= -56*ln(2)
			return -1.0;
		}
		if ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...
			return PINF;
		}
	}
	// Extract the more significant bits from |x|:
	hx = highWord( y )|0; // asm type annotation

	// Argument reduction...
	if ( y > LN2_HALF ) { // if |x| > 0.5*ln(2)
		if ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)
			if ( sign ) {
				hi = x + LN2_HI;
				lo = -LN2_LO;
				k = -1;
			} else {
				hi = x - LN2_HI;
				lo = LN2_LO;
				k = 1;
			}
		} else {
			if ( sign ) {
				k = (LN2_INV*x) - 0.5;
			} else {
				k = (LN2_INV*x) + 0.5;
			}
			k |= 0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)
			t = k;
			hi = x - (t*LN2_HI); // t*ln2_hi is exact here
			lo = t * LN2_LO;
		}
		x = hi - lo;
		c = (hi-x) - lo;
	}
	// if |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54
	else if ( hx < 1016070144 ) {
		return x;
	}
	else {
		k = 0;
	}
	// x is now in primary range...
	halfX = 0.5 * x;
	z = x * halfX;

	r1 = 1.0 + ( z * polyval( z ) );

	t = 3.0 - (r1*halfX);
	e = z * ( (r1-t) / (6.0 - (x*t)) );
	if ( k === 0 ) {
		return x - ( (x*e) - z );	// c is 0
	}
	e = ( x * (e-c) ) - c;
	e -= z;
	if ( k === -1 ) {
		return ( 0.5*(x-e) )- 0.5;
	}
	if ( k === 1 ) {
		if ( x < -0.25 ) {
			return -2.0 * ( e - (x+0.5) );
		}
		return 1 + ( 2.0 * (x-e) );
	}
	if ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1
		y = 1.0 - (e-x);

		// Add k to y's exponent:
		hi = (highWord( y ) + (k<<20))|0; // asm type annotation
		y = setHighWord( y, hi );

		return y - 1.0;
	}
	t = 1.0;
	if ( k < 20 ) {
		// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x200000 = 0 00000000010 00000000000000000000
		hi = (1072693248 - (0x200000>>k))|0; // asm type annotation
		t = setHighWord( t, hi ); // t=1-2^-k
		y = t - (e-x);
	} else {
		hi = ( (BIAS-k)<<20 )|0; // asm type annotation
		t = setHighWord( t, hi ); // t=2^-k
		y = x - (e+t);
		y += 1.0;
	}
	// Add k to y's exponent:
	hi = (highWord( y ) + (k<<20))|0; // asm type annotation
	return setHighWord( y, hi );
}


// EXPORTS //

module.exports = expm1;

},{"./polyval_q.js":1468,"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-half-ln-two":75,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-high-word":1918}],1467:[function(require,module,exports){
'use strict';

/**
* Compute `exp(x) - 1`.
*
* @module @stdlib/math/base/special/expm1
*
* @example
* var expm1 = require( '@stdlib/math/base/special/expm1' );
*
* var v = expm1( 0.2 );
* // returns ~0.221
*
* v = expm1( -9.0 );
* // returns ~-0.999
*
* v = expm1( 0.0 );
* // returns 0.0
*
* v = expm1( NaN );
* // returns NaN
*/

// MODULES //

var expm1 = require( './expm1.js' );


// EXPORTS //

module.exports = expm1;

},{"./expm1.js":1466}],1468:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.03333333333333313;
	}
	return -0.03333333333333313 + (x * (0.0015873015872548146 + (x * (-0.0000793650757867488 + (x * (0.000004008217827329362 + (x * -2.0109921818362437e-7))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1469:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var FACTORIALS = require( './factorials.json' );


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Evaluates the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} factorial
*
* @example
* var v = factorial( 3.0 );
* // returns 6.0
*
* @example
* var v = factorial( -1.5 );
* // returns ~-3.545
*
* @example
* var v = factorial( -0.5 );
* // returns ~1.772
*
* @example
* var v = factorial( 0.5 );
* // returns ~0.886
*
* @example
* var v = factorial( -10.0 );
* // returns NaN
*
* @example
* var v = factorial( 171.0 );
* // returns Infinity
*
* @example
* var v = factorial( NaN );
* // returns NaN
*/
function factorial( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInteger( x ) ) {
		if ( x < 0 ) {
			return NaN;
		}
		if ( x <= MAX_FACTORIAL ) {
			return FACTORIALS[ x ];
		}
		return PINF;
	}
	return gamma( x + 1.0 );
}


// EXPORTS //

module.exports = factorial;

},{"./factorials.json":1470,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gamma":1525}],1470:[function(require,module,exports){
module.exports=[
	1,
	1,
	2,
	6,
	24,
	120,
	720,
	5040,
	40320,
	362880.0,
	3628800.0,
	39916800.0,
	479001600.0,
	6227020800.0,
	87178291200.0,
	1307674368000.0,
	20922789888000.0,
	355687428096000.0,
	6402373705728000.0,
	121645100408832000.0,
	0.243290200817664e19,
	0.5109094217170944e20,
	0.112400072777760768e22,
	0.2585201673888497664e23,
	0.62044840173323943936e24,
	0.15511210043330985984e26,
	0.403291461126605635584e27,
	0.10888869450418352160768e29,
	0.304888344611713860501504e30,
	0.8841761993739701954543616e31,
	0.26525285981219105863630848e33,
	0.822283865417792281772556288e34,
	0.26313083693369353016721801216e36,
	0.868331761881188649551819440128e37,
	0.29523279903960414084761860964352e39,
	0.103331479663861449296666513375232e41,
	0.3719933267899012174679994481508352e42,
	0.137637530912263450463159795815809024e44,
	0.5230226174666011117600072241000742912e45,
	0.203978820811974433586402817399028973568e47,
	0.815915283247897734345611269596115894272e48,
	0.3345252661316380710817006205344075166515e50,
	0.1405006117752879898543142606244511569936e52,
	0.6041526306337383563735513206851399750726e53,
	0.265827157478844876804362581101461589032e55,
	0.1196222208654801945619631614956577150644e57,
	0.5502622159812088949850305428800254892962e58,
	0.2586232415111681806429643551536119799692e60,
	0.1241391559253607267086228904737337503852e62,
	0.6082818640342675608722521633212953768876e63,
	0.3041409320171337804361260816606476884438e65,
	0.1551118753287382280224243016469303211063e67,
	0.8065817517094387857166063685640376697529e68,
	0.427488328406002556429801375338939964969e70,
	0.2308436973392413804720927426830275810833e72,
	0.1269640335365827592596510084756651695958e74,
	0.7109985878048634518540456474637249497365e75,
	0.4052691950487721675568060190543232213498e77,
	0.2350561331282878571829474910515074683829e79,
	0.1386831185456898357379390197203894063459e81,
	0.8320987112741390144276341183223364380754e82,
	0.507580213877224798800856812176625227226e84,
	0.3146997326038793752565312235495076408801e86,
	0.1982608315404440064116146708361898137545e88,
	0.1268869321858841641034333893351614808029e90,
	0.8247650592082470666723170306785496252186e91,
	0.5443449390774430640037292402478427526443e93,
	0.3647111091818868528824985909660546442717e95,
	0.2480035542436830599600990418569171581047e97,
	0.1711224524281413113724683388812728390923e99,
	0.1197857166996989179607278372168909873646e101,
	0.8504785885678623175211676442399260102886e102,
	0.6123445837688608686152407038527467274078e104,
	0.4470115461512684340891257138125051110077e106,
	0.3307885441519386412259530282212537821457e108,
	0.2480914081139539809194647711659403366093e110,
	0.188549470166605025498793226086114655823e112,
	0.1451830920282858696340707840863082849837e114,
	0.1132428117820629783145752115873204622873e116,
	0.8946182130782975286851441715398316520698e117,
	0.7156945704626380229481153372318653216558e119,
	0.5797126020747367985879734231578109105412e121,
	0.4753643337012841748421382069894049466438e123,
	0.3945523969720658651189747118012061057144e125,
	0.3314240134565353266999387579130131288001e127,
	0.2817104114380550276949479442260611594801e129,
	0.2422709538367273238176552320344125971528e131,
	0.210775729837952771721360051869938959523e133,
	0.1854826422573984391147968456455462843802e135,
	0.1650795516090846108121691926245361930984e137,
	0.1485715964481761497309522733620825737886e139,
	0.1352001527678402962551665687594951421476e141,
	0.1243841405464130725547532432587355307758e143,
	0.1156772507081641574759205162306240436215e145,
	0.1087366156656743080273652852567866010042e147,
	0.103299784882390592625997020993947270954e149,
	0.9916779348709496892095714015418938011582e150,
	0.9619275968248211985332842594956369871234e152,
	0.942689044888324774562618574305724247381e154,
	0.9332621544394415268169923885626670049072e156,
	0.9332621544394415268169923885626670049072e158,
	0.9425947759838359420851623124482936749562e160,
	0.9614466715035126609268655586972595484554e162,
	0.990290071648618040754671525458177334909e164,
	0.1029901674514562762384858386476504428305e167,
	0.1081396758240290900504101305800329649721e169,
	0.1146280563734708354534347384148349428704e171,
	0.1226520203196137939351751701038733888713e173,
	0.132464181945182897449989183712183259981e175,
	0.1443859583202493582204882102462797533793e177,
	0.1588245541522742940425370312709077287172e179,
	0.1762952551090244663872161047107075788761e181,
	0.1974506857221074023536820372759924883413e183,
	0.2231192748659813646596607021218715118256e185,
	0.2543559733472187557120132004189335234812e187,
	0.2925093693493015690688151804817735520034e189,
	0.339310868445189820119825609358857320324e191,
	0.396993716080872089540195962949863064779e193,
	0.4684525849754290656574312362808384164393e195,
	0.5574585761207605881323431711741977155627e197,
	0.6689502913449127057588118054090372586753e199,
	0.8094298525273443739681622845449350829971e201,
	0.9875044200833601362411579871448208012564e203,
	0.1214630436702532967576624324188129585545e206,
	0.1506141741511140879795014161993280686076e208,
	0.1882677176888926099743767702491600857595e210,
	0.237217324288004688567714730513941708057e212,
	0.3012660018457659544809977077527059692324e214,
	0.3856204823625804217356770659234636406175e216,
	0.4974504222477287440390234150412680963966e218,
	0.6466855489220473672507304395536485253155e220,
	0.8471580690878820510984568758152795681634e222,
	0.1118248651196004307449963076076169029976e225,
	0.1487270706090685728908450891181304809868e227,
	0.1992942746161518876737324194182948445223e229,
	0.269047270731805048359538766214698040105e231,
	0.3659042881952548657689727220519893345429e233,
	0.5012888748274991661034926292112253883237e235,
	0.6917786472619488492228198283114910358867e237,
	0.9615723196941089004197195613529725398826e239,
	0.1346201247571752460587607385894161555836e242,
	0.1898143759076170969428526414110767793728e244,
	0.2695364137888162776588507508037290267094e246,
	0.3854370717180072770521565736493325081944e248,
	0.5550293832739304789551054660550388118e250,
	0.80479260574719919448490292577980627711e252,
	0.1174997204390910823947958271638517164581e255,
	0.1727245890454638911203498659308620231933e257,
	0.2556323917872865588581178015776757943262e259,
	0.380892263763056972698595524350736933546e261,
	0.571338395644585459047893286526105400319e263,
	0.8627209774233240431623188626544191544816e265,
	0.1311335885683452545606724671234717114812e268,
	0.2006343905095682394778288746989117185662e270,
	0.308976961384735088795856467036324046592e272,
	0.4789142901463393876335775239063022722176e274,
	0.7471062926282894447083809372938315446595e276,
	0.1172956879426414428192158071551315525115e279,
	0.1853271869493734796543609753051078529682e281,
	0.2946702272495038326504339507351214862195e283,
	0.4714723635992061322406943211761943779512e285,
	0.7590705053947218729075178570936729485014e287,
	0.1229694218739449434110178928491750176572e290,
	0.2004401576545302577599591653441552787813e292,
	0.3287218585534296227263330311644146572013e294,
	0.5423910666131588774984495014212841843822e296,
	0.9003691705778437366474261723593317460744e298,
	0.1503616514864999040201201707840084015944e301,
	0.2526075744973198387538018869171341146786e303,
	0.4269068009004705274939251888899566538069e305,
	0.7257415615307998967396728211129263114717e307
]

},{}],1471:[function(require,module,exports){
'use strict';

/**
* Evaluate the factorial function.
*
* @module @stdlib/math/base/special/factorial
*
* @example
* var factorial = require( '@stdlib/math/base/special/factorial' );
*
* var v = factorial( 3.0 );
* // returns 6.0
*
* v = factorial( -1.5 );
* // returns ~-3.545
*
* v = factorial( -0.5 );
* // returns ~1.772
*
* v = factorial( 0.5 );
* // returns ~0.886
*
* v = factorial( -10.0 );
* // returns NaN
*
* v = factorial( 171.0 );
* // returns Infinity
*
* v = factorial( NaN );
* // returns NaN
*/

// MODULES //

var factorial = require( './factorial.js' );


// EXPORTS //

module.exports = factorial;

},{"./factorial.js":1469}],1472:[function(require,module,exports){
'use strict';

// MODULES //

var isNegativeInteger = require( '@stdlib/math/base/assert/is-negative-integer' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );


// MAIN //

/**
* Evaluates the natural logarithm of the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} natural logarithm of factorial of `x`
*
* @example
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* @example
* var v = factorialln( 2.4 );
* // returns ~1.092
*
* @example
* var v = factorialln( -1.0 );
* // returns NaN
*
* @example
* var v = factorialln( -1.5 );
* // returns ~1.266
*
* @example
* var v = factorialln( NaN );
* // returns NaN
*/
function factorialln( x ) {
	if ( isNegativeInteger( x ) ) {
		return NaN;
	}
	return gammaln( x + 1.0 );
}


// EXPORTS //

module.exports = factorialln;

},{"@stdlib/math/base/assert/is-negative-integer":130,"@stdlib/math/base/special/gammaln":1583}],1473:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the factorial function.
*
* @module @stdlib/math/base/special/factorialln
*
* @example
* var factorialln = require( '@stdlib/math/base/special/factorialln' );
*
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* v = factorialln( 2.4 );
* // returns ~1.092
*
* v = factorialln( -1.0 );
* // returns NaN
*
* v = factorialln( -1.5 );
* // returns ~1.266
*
* v = factorialln( NaN );
* // returns NaN
*/

// MODULES //

var factorialln = require( './factorialln.js' );


// EXPORTS //

module.exports = factorialln;

},{"./factorialln.js":1472}],1474:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006, 2010.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
var floor = require( '@stdlib/math/base/special/floor' );
var abs = require( '@stdlib/math/base/special/abs' );
var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider packaging as constant
var risingFactorial;


// MAIN //

/**
* Computes the falling factorial of `x` and `n`.
*
* ## Notes
*
* -   The falling factorial is defined as
*
*     ```tex
*     \operatorname{fallingFactorial}(x, n) = x (x-1) (x-2) (x-3) \ldots (x-n+1)
*     ```
*
* @param {number} x - first function parameter
* @param {NonNegativeInteger} n - second function parameter
* @returns {number} function value
*
* @example
* var v = fallingFactorial( 0.9, 5 );
* // returns ~0.644
*
* @example
* var v = fallingFactorial( -9.0, 3 );
* // returns -990.0
*
* @example
* var v = fallingFactorial( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = fallingFactorial( 3.0, -2 );
* // returns NaN
*/
function fallingFactorial( x, n ) {
	var result;
	var xp1;
	var n2;
	var t1;
	var t2;

	// Lazy-load to avoid undefined reference due to circular dependency...
	if ( !risingFactorial ) {
		risingFactorial = require( '@stdlib/math/base/special/rising-factorial' );
	}
	if ( isnan( x ) || !isNonNegativeInteger( n ) ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return 0.0;
	}
	if ( x < 0.0 ) {
		// For `x < 0`, we really have a rising factorial modulo a possible change of sign:
		return ( n&1 ? -1.0 : 1.0 ) * risingFactorial( -x, n );
	}
	if ( n === 0 ) {
		return 1.0;
	}
	if ( x < 0.5 ) {
		// Computing `1 + x` will throw away digits, so split up calculation...
		if ( n > MAX_FACTORIAL-2 ) {
			// Given a ratio of two very large numbers, we need to split the calculation up into two blocks:
			t1 = x * fallingFactorial( x-1.0, MAX_FACTORIAL-2 );
			t2 = fallingFactorial( x-MAX_FACTORIAL+1.0, n-MAX_FACTORIAL+1 );
			if ( FLOAT64_MAX/abs(t1) < abs(t2) ) {
				return PINF;
			}
			return t1 * t2;
		}
		return x * fallingFactorial( x-1.0, n-1.0 );
	}
	if ( x <= n-1.0 ) {
		// `x+1-n` will be negative and computing the ratio of two gammas will not work, so split the product up into three parts:
		xp1 = x + 1.0;
		n2 = abs( floor( xp1 ) );
		if ( n2 === xp1 ) {
			return 0.0;
		}
		result = gammaDeltaRatio( xp1, -n2 );
		x -= n2;
		result *= x;
		n2 += 1.0;
		if ( n2 < n ) {
			result *= fallingFactorial( x-1.0, n-n2 );
		}
		return result;
	}
	// Simple case: just the ratio of two (positive argument) gamma functions. Note that we don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:
	return gammaDeltaRatio( x+1.0, -n );
}


// EXPORTS //

module.exports = fallingFactorial;

},{"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/gamma-delta-ratio":1517,"@stdlib/math/base/special/rising-factorial":1775}],1475:[function(require,module,exports){
'use strict';

/**
* Compute the falling factorial.
*
* @module @stdlib/math/base/special/falling-factorial
*
* @example
* var fallingFactorial = require( '@stdlib/math/base/special/falling-factorial' );
*
* var v = fallingFactorial( 0.9, 5 );
* // returns ~0.644
*
* v = fallingFactorial( -9.0, 3 );
* // returns -990.0
*
* v = fallingFactorial( 0.0, 2 );
* // returns 0.0
*
* v = fallingFactorial( 3.0, -2 );
* // returns NaN
*/

// MODULES //

var fallingFactorial = require( './falling_factorial.js' );


// EXPORTS //

module.exports = fallingFactorial;

},{"./falling_factorial.js":1474}],1476:[function(require,module,exports){
'use strict';

/**
* Compute the Fibonacci number index.
*
* @module @stdlib/math/base/special/fibonacci-index
*
* @example
* var fibonacciIndex = require( '@stdlib/math/base/special/fibonacci-index' );
*
* var n = fibonacciIndex( 0 );
* // returns NaN
*
* n = fibonacciIndex( 1 );
* // returns NaN
*
* n = fibonacciIndex( 2 );
* // returns 3
*
* n = fibonacciIndex( 3 );
* // returns 4
*
* n = fibonacciIndex( 5 );
* // returns 5
*
* n = fibonacciIndex( 8 );
* // returns 6
*/

// MODULES //

var fibonacciIndex = require( './main.js' );


// EXPORTS //

module.exports = fibonacciIndex;

},{"./main.js":1477}],1477:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var ln = require( '@stdlib/math/base/special/ln' );
var round = require( '@stdlib/math/base/special/round' );
var PHI = require( '@stdlib/constants/math/float64-phi' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// VARIABLES //

var SQRT_5 = 2.23606797749979;
var LN_PHI = ln( PHI );


// MAIN //

/**
* Computes the Fibonacci number index.
*
* ## Notes
*
* -   We use `round` instead of `floor` due to errors introduced by floating-point precision.
*
*
* @param {NonNegativeInteger} F - Fibonacci number
* @returns {NonNegativeInteger} Fibonacci number index
*
* @example
* var n = fibonacciIndex( 0 );
* // returns NaN
*
* @example
* var n = fibonacciIndex( 1 );
* // returns NaN
*
* @example
* var n = fibonacciIndex( 2 );
* // returns 3
*
* @example
* var n = fibonacciIndex( 3 );
* // returns 4
*
* @example
* var n = fibonacciIndex( 5 );
* // returns 5
*
* @example
* var n = fibonacciIndex( 8 );
* // returns 6
*
* @example
* var n = fibonacciIndex( NaN );
* // returns NaN
*
* @example
* var n = fibonacciIndex( 3.14 );
* // returns NaN
*
* @example
* var n = fibonacciIndex( -1 );
* // returns NaN
*/
function fibonacciIndex( F ) {
	var x;
	if (
		isnan( F ) ||
		isInteger( F ) === false ||
		F <= 1 ||
		F === PINF
	) {
		return NaN;
	}
	x = ( F*SQRT_5 ) + 0.5;
	return round( ln( x ) / LN_PHI );
}


// EXPORTS //

module.exports = fibonacciIndex;

},{"@stdlib/constants/math/float64-phi":99,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/round":1777}],1478:[function(require,module,exports){
module.exports=[0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700884757,8944394323791464]

},{}],1479:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var MAX_FIBONACCI = require( '@stdlib/constants/math/float64-max-safe-nth-fibonacci' );
var FIBONACCI = require( './fibonacci.json' );


// MAIN //

/**
* Computes the nth Fibonacci number.
*
* @param {NonNegativeInteger} n - the Fibonacci number to compute
* @returns {NonNegativeInteger} Fibonacci number
*
* @example
* var y = fibonacci( 0 );
* // returns 0
*
* @example
* var y = fibonacci( 1 );
* // returns 1
*
* @example
* var y = fibonacci( 2 );
* // returns 1
*
* @example
* var y = fibonacci( 3 );
* // returns 2
*
* @example
* var y = fibonacci( 4 );
* // returns 3
*
* @example
* var y = fibonacci( 5 );
* // returns 5
*
* @example
* var y = fibonacci( 6 );
* // returns 8
*
* @example
* var y = fibonacci( NaN );
* // returns NaN
*
* @example
* var y = fibonacci( 3.14 );
* // returns NaN
*
* @example
* var y = fibonacci( -1.0 );
* // returns NaN
*/
function fibonacci( n ) {
	if (
		isnan( n ) ||
		isInteger( n ) === false ||
		n < 0 ||
		n > MAX_FIBONACCI
	) {
		return NaN;
	}
	return FIBONACCI[ n ];
}


// EXPORTS //

module.exports = fibonacci;

},{"./fibonacci.json":1478,"@stdlib/constants/math/float64-max-safe-nth-fibonacci":89,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128}],1480:[function(require,module,exports){
'use strict';

/**
* Compute the nth Fibonacci number.
*
* @module @stdlib/math/base/special/fibonacci
*
* @example
* var fibonacci = require( '@stdlib/math/base/special/fibonacci' );
*
* var y = fibonacci( 0 );
* // returns 0
*
* y = fibonacci( 1 );
* // returns 1
*
* y = fibonacci( 2 );
* // returns 1
*
* y = fibonacci( 3 );
* // returns 2
*
* y = fibonacci( 4 );
* // returns 3
*
* y = fibonacci( 5 );
* // returns 5
*
* y = fibonacci( 6 );
* // returns 8
*/

// MODULES //

var fibonacci = require( './fibonacci.js' );


// EXPORTS //

module.exports = fibonacci;

},{"./fibonacci.js":1479}],1481:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/number/float64/base/to-words' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000>>>0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `x*y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = flipsign( -3.14, 10.0 );
* // returns -3.14
*
* @example
* var z = flipsign( -3.14, -1.0 );
* // returns 3.14
*
* @example
* var z = flipsign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = flipsign( -3.14, -0.0 );
* // returns 3.14
*
* @example
* var z = flipsign( -0.0, 1.0 );
* // returns -0.0
*
* @example
* var z = flipsign( 0.0, -1.0 );
* // returns -0.0
*/
function flipsign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	toWords( WORDS, x );
	hx = WORDS[ 0 ];

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on (if on):
	hy &= SIGN_MASK;

	// Flip the sign bit of `x` only when the sign bit of `y` is on:
	hx ^= hy; // 1^1=0 (flipped), 0^1=1 (flipped), 1^0=1 (unchanged), 0^0=0 (unchanged)

	// Return a new value having the same magnitude as `x`, but with the sign of `x*y`:
	return fromWords( hx, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = flipsign;

},{"@stdlib/number/float64/base/from-words":1905,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/to-words":1925}],1482:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `x*y`.
*
* @module @stdlib/math/base/special/flipsign
*
* @example
* var flipsign = require( '@stdlib/math/base/special/flipsign' );
*
* var z = flipsign( -3.14, 10.0 );
* // returns -3.14
*
* z = flipsign( -3.14, -1.0 );
* // returns 3.14
*
* z = flipsign( 1.0, -0.0 );
* // returns -1.0
*
* z = flipsign( -3.14, -0.0 );
* // returns 3.14
*
* z = flipsign( -0.0, 1.0 );
* // returns -0.0
*
* z = flipsign( 0.0, -1.0 );
* // returns -0.0
*/

// MODULES //

var flipsign = require( './flipsign.js' );


// EXPORTS //

module.exports = flipsign;

},{"./flipsign.js":1481}],1483:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],1484:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":1483}],1485:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var log10 = require( '@stdlib/math/base/special/log10' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base10-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor10( Math.PI );
* // returns 1.0
*
* @example
* var v = floor10( 9.0 );
* // returns 1.0
*
* @example
* var v = floor10( -0.314 );
* // returns -1.0
*/
function floor10( x ) {
	var sign;
	var p;
	if (
		isnan( x ) ||
		isInfinite( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `10^p = x` for `p`:
	p = log10( x );

	// Determine a power of 10 which rounds the input value toward negative infinity:
	if ( sign === 1.0 ) {
		p = floor( p );
	} else {
		p = ceil( p );
	}
	// Handle underflow:
	if ( p <= MIN_EXP_SUBNORMAL ) {
		return sign * 0.0; // sign-preserving
	}
	// Handle overflow:
	if ( p > MAX_EXP ) {
		return NINF;
	}
	return sign * pow( 10.0, p );
}


// EXPORTS //

module.exports = floor10;

},{"@stdlib/constants/math/float64-max-base10-exponent":84,"@stdlib/constants/math/float64-min-base10-exponent-subnormal":92,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/pow":1743}],1486:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest power of `10` toward negative infinity.
*
* @module @stdlib/math/base/special/floor10
*
* @example
* var floor10 = require( '@stdlib/math/base/special/floor10' );
*
* var v = floor10( Math.PI );
* // returns 1.0
*
* v = floor10( 9.0 );
* // returns 1.0
*
* v = floor10( -0.314 );
* // returns -1.0
*/

// MODULES //

var floor10 = require( './floor10.js' );


// EXPORTS //

module.exports = floor10;

},{"./floor10.js":1485}],1487:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var log2 = require( '@stdlib/math/base/special/log2' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base2-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Rounds a numeric value to the nearest power of two toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor2( Math.PI );
* // returns 2.0
*
* @example
* var v = floor2( 13.0 );
* // returns 8.0
*
* @example
* var v = floor2( -0.314 );
* // returns -0.5
*/
function floor2( x ) {
	var sign;
	var p;
	if (
		isnan( x ) ||
		isInfinite( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `2^p = x` for `p`:
	p = log2( x );

	// If provided the smallest subnormal, no rounding possible:
	if ( p === MIN_EXP_SUBNORMAL ) {
		return x;
	}
	// Determine a power of two which rounds the input value toward negative infinity:
	if ( sign === 1.0 ) {
		p = floor( p );
	} else {
		p = ceil( p );
	}
	// Handle overflow:
	if ( p > MAX_EXP ) {
		return NINF;
	}
	return sign * pow( 2.0, p );
}


// EXPORTS //

module.exports = floor2;

},{"@stdlib/constants/math/float64-max-base2-exponent":86,"@stdlib/constants/math/float64-min-base2-exponent-subnormal":94,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log2":1693,"@stdlib/math/base/special/pow":1743}],1488:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest power of two toward negative infinity.
*
* @module @stdlib/math/base/special/floor2
*
* @example
* var floor2 = require( '@stdlib/math/base/special/floor2' );
*
* var v = floor2( Math.PI );
* // returns 2.0
*
* v = floor2( 13.0 );
* // returns 8.0
*
* v = floor2( -0.314 );
* // returns -0.5
*/

// MODULES //

var floor2 = require( './floor2.js' );


// EXPORTS //

module.exports = floor2;

},{"./floor2.js":1487}],1489:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var floorn = require( '@stdlib/math/base/special/floorn' );


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(b^n\\) toward negative infinity.
*
* @param {number} x - input value
* @param {integer} n - integer power
* @param {PositiveInteger} b - base
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = floorb( Math.PI, -4, 10 );
* // returns 3.1415
*
* @example
* // If n = 0 or b = 1, `floorb` behaves like `floor`:
* var v = floorb( Math.PI, 0, 2 );
* // returns 3.0
*
* @example
* // Round a value to the nearest multiple of two toward negative infinity:
* var v = floorb( 5.0, 1, 2 );
* // returns 4.0
*/
function floorb( x, n, b ) {
	var y;
	var s;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( b ) ||
		b <= 0 ||
		isInfinite( n ) ||
		isInfinite( b )
	) {
		return NaN;
	}
	if ( isInfinite( x ) || x === 0.0 ) {
		return x;
	}
	if ( b === 10 ) {
		return floorn( x, n );
	}
	if ( n === 0 || b === 1 ) {
		return floor( x );
	}
	s = pow( b, -n );

	// Check for overflow:
	if ( isInfinite( s ) ) {
		return x;
	}
	y = floor( x * s ) / s;

	// Check for overflow:
	if ( isInfinite( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

module.exports = floorb;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/floorn":1492,"@stdlib/math/base/special/pow":1743}],1490:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest multiple of `b^n` toward negative infinity.
*
* @module @stdlib/math/base/special/floorb
*
* @example
* var floorb = require( '@stdlib/math/base/special/floorb' );
*
* // Round a value to 4 decimal places:
* var v = floorb( Math.PI, -4, 10 );
* // returns 3.1415
*
* // If n = 0 or b = 1, behavior is same as `floor`:
* v = floorb( Math.PI, 0, 2 );
* // returns 3.0
*
* // Round a value to the nearest multiple of two toward negative infinity:
* v = floorb( 5.0, 1, 2 );
* // returns 4.0
*/

// MODULES //

var floorb = require( './floorb.js' );


// EXPORTS //

module.exports = floorb;

},{"./floorb.js":1489}],1491:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var floor = require( '@stdlib/math/base/special/floor' );
var MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base10-exponent' );
var MIN_EXP = require( '@stdlib/constants/math/float64-min-base10-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// VARIABLES //

var MAX_INT = MAX_SAFE_INTEGER + 1;
var HUGE = 1.0e+308;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\) toward negative infinity.
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{floorn}(x,n) = \frac{\operatorname{floor}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{floor}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior. For instance, the result of \\(\operatorname{floorn}(-0.2-0.1,-16)\\) is \\(-0.3000000000000001\\) and not \\(-0.3\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{floor}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible negative finite number \\(x\\) to the nearest \\(10^n\\) is \\(-\infty\\) and any possible positive finite number \\(x\\) is \\(+0\\). To ensure consistent behavior with \\(\operatorname{floor}(x)\\), if \\(x > 0\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is __always__ an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{floorn}(x,n) = \frac{\biggl(\frac{\operatorname{floor}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{floorn}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{floorn}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{floorn}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{floorn}(\pm\infty, n) &= \pm\infty \\
* \operatorname{floorn}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @param {integer} n - integer power of 10
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = floorn( Math.PI, -4 );
* // returns 3.1415
*
* @example
* // If n = 0, `floorn` behaves like `floor`:
* var v = floorn( Math.PI, 0 );
* // returns 3.0
*
* @example
* // Round a value to the nearest thousand:
* var v = floorn( 12368.0, 3 );
* // returns 12000.0
*/
function floorn( x, n ) {
	var s;
	var y;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isInfinite( n )
	) {
		return NaN;
	}
	if (
		// Handle infinities...
		isInfinite( x ) ||

		// Handle +-0...
		x === 0.0 ||

		// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...
		n < MIN_EXP_SUBNORMAL ||

		// If `|x|` is large enough, no decimals to round...
		( abs( x ) > MAX_INT && n <= 0 )
	) {
		return x;
	}
	// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is infinity and any negative finite `x` is zero.
	if ( n > MAX_EXP ) {
		if ( x >= 0.0 ) {
			return 0.0; // preserve the sign (same behavior as floor)
		}
		return NINF;
	}
	// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...
	if ( n < MIN_EXP ) {
		s = pow( 10.0, -(n + MAX_EXP) );
		y = (x*HUGE) * s; // order of operation matters!
		if ( isInfinite( y ) ) {
			return x;
		}
		return ( floor(y)/HUGE ) / s;
	}
	s = pow( 10.0, -n );
	y = x * s;
	if ( isInfinite( y ) ) {
		return x;
	}
	return floor( y ) / s;
}


// EXPORTS //

module.exports = floorn;

},{"@stdlib/constants/math/float64-max-base10-exponent":84,"@stdlib/constants/math/float64-max-safe-integer":88,"@stdlib/constants/math/float64-min-base10-exponent":93,"@stdlib/constants/math/float64-min-base10-exponent-subnormal":92,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/pow":1743}],1492:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest multiple of `10^n` toward negative infinity.
*
* @module @stdlib/math/base/special/floorn
*
* @example
* var floorn = require( '@stdlib/math/base/special/floorn' );
*
* // Round a value to 4 decimal places:
* var v = floorn( Math.PI, -4 );
* // returns 3.1415
*
* // If n = 0, `floorn` behaves like `floor`:
* v = floorn( Math.PI, 0 );
* // returns 3.0
*
* // Round a value to the nearest thousand:
* v = floorn( 12368.0, 3 );
* // returns 12000.0
*/

// MODULES //

var floorn = require( './floorn.js' );


// EXPORTS //

module.exports = floorn;

},{"./floorn.js":1491}],1493:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var log10 = require( '@stdlib/math/base/special/log10' );
var ln = require( '@stdlib/math/base/special/ln' );
var abs = require( '@stdlib/math/base/special/abs' );
var floor = require( '@stdlib/math/base/special/floor' );
var exponent = require( '@stdlib/number/float64/base/exponent' );


// MAIN //

/**
* Rounds a numeric value to the nearest number toward negative infinity with \\(N\\) significant figures.
*
* @param {number} x - input value
* @param {PositiveInteger} n - number of significant figures
* @param {PositiveInteger} [b=10] - base
* @returns {number} rounded value
*
* @example
* var v = floorsd( Math.PI, 5 );
* // returns 3.1415
*
* @example
* var v = floorsd( Math.PI, 1 );
* // returns 3.0
*
* @example
* var v = floorsd( 12368.0, 2 );
* // returns 12000.0
*
* @example
* var v = floorsd( 0.0313, 2, 2 );
* // returns 0.03125
*/
function floorsd( x, n, b ) {
	var base;
	var exp;
	var s;
	var y;
	if (
		isnan( x ) ||
		isnan( n ) ||
		n < 1 ||
		isInfinite( n )
	) {
		return NaN;
	}
	if ( arguments.length > 2 ) {
		if (
			isnan( b ) ||
			b <= 0 ||
			isInfinite( b )
		) {
			return NaN;
		}
		base = b;
	} else {
		base = 10;
	}
	if ( isInfinite( x ) || x === 0.0 ) {
		return x;
	}
	if ( base === 10 ) {
		exp = log10( abs( x ) );
	}
	else if ( base === 2 ) {
		exp = exponent( abs( x ) );
	}
	else {
		exp = ln( abs(x) ) / ln( base );
	}
	exp = floor( exp - n + 1.0 );
	s = pow( base, abs( exp ) );

	// Check for overflow:
	if ( isInfinite( s ) ) {
		return x;
	}
	// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.
	if ( exp < 0 ) {
		y = floor( x * s ) / s;
	} else {
		y = floor( x / s ) * s;
	}
	// Check for overflow:
	if ( isInfinite( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

module.exports = floorsd;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/pow":1743,"@stdlib/number/float64/base/exponent":1903}],1494:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest number toward negative infinity with `N` significant figures.
*
* @module @stdlib/math/base/special/floorsd
*
* @example
* var floorsd = require( '@stdlib/math/base/special/floorsd' );
*
* var v = floorsd( Math.PI, 5 );
* // returns 3.1415
*
* v = floorsd( Math.PI, 1 );
* // returns 3.0
*
* v = floorsd( 12368.0, 2 );
* // returns 12000.0
*
* v = floorsd( 0.0313, 2, 2 );
* // returns 0.03125
*/

// MODULES //

var floorsd = require( './floorsd.js' );


// EXPORTS //

module.exports = floorsd;

},{"./floorsd.js":1493}],1495:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.1:  January, 1989
* Copyright 1984, 1987, 1989 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var sincos = require( '@stdlib/math/base/special/sincos' );
var abs = require( '@stdlib/math/base/special/abs' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var polyS = require( './rational_psqs.js' );
var polyC = require( './rational_pcqc.js' );
var polyF = require( './rational_pfqf.js' );
var polyG = require( './rational_pgqg.js' );


// VARIABLES //

// Array for storing sincos evaluation:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Fresnel integrals S(x) and C(x).
*
* ## Method
*
* Evaluates the Fresnel integrals
*
* ```tex
* \begin{align}
* \operatorname{S}(x) &= \int_0^x \sin\left(\frac{\pi}{2} t^2\right)\,\mathrm{d}t, \\
* \operatorname{C}(x) &= \int_0^x \cos\left(\frac{\pi}{2} t^2\right)\,\mathrm{d}t.
* \end{align}
* ```
*
* The integrals are evaluated by a power series for \\( x < 1 \\). For \\( x >= 1 \\) auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
* ```tex
* \begin{align}
* \operatorname{C}(x) &= \frac{1}{2} + f(x) \sin\left( \frac{\pi}{2} x^2 \right) - g(x) \cos\left( \frac{\pi}{2} x^2 \right), \\
* \operatorname{S}(x) &= \frac{1}{2} - f(x) \cos\left( \frac{\pi}{2} x^2 \right) - g(x) \sin\left( \frac{\pi}{2} x^2 \right).
* \end{align}
* ```
*
* ## Notes
*
* -   Relative error on test interval \\( \[0,10\] \\):
*
*     | arithmetic | function | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | IEEE       | S(x)     | 10000    | 2.0e-15 | 3.2e-16 |
*     | IEEE       | C(x)     | 10000    | 1.8e-15 | 3.3e-16 |
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} S(x) and C(x)
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], 0.0 );
* // returns [ 0.0, 0.0 ]
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], 1.0 );
* // returns [ ~0.438, ~0.780 ]
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], Infinity );
* // returns [ ~0.5, ~0.5 ]
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], -Infinity );
* // returns [ ~-0.5, ~-0.5 ]
*
* @example
* var v = fresnel( [ 0.0, 0.0 ], NaN );
* // returns [ NaN, NaN ]
*/
function fresnel( out, x ) {
	var x2;
	var xa;
	var f;
	var g;
	var t;
	var u;

	xa = abs( x );
	x2 = xa * xa;
	if ( x2 < 2.5625 ) {
		t = x2 * x2;
		out[ 0 ] = xa * x2 * polyS( t );
		out[ 1 ] = xa * polyC( t );
	} else if ( xa > 36974.0 ) {
		out[ 1 ] = 0.5;
		out[ 0 ] = 0.5;
	} else {
		// Asymptotic power series auxiliary functions for large arguments...
		x2 = xa * xa;
		t = PI * x2;
		u = 1.0 / (t * t);
		t = 1.0 / t;
		f = 1.0 - ( u * polyF( u ) );
		g = t * polyG( u );
		t = HALF_PI * x2;
		sincos( sc, t );
		t = PI * xa;
		out[ 1 ] = 0.5 + ( ( (f*sc[0]) - (g*sc[1]) ) / t );
		out[ 0 ] = 0.5 - ( ( (f*sc[1]) + (g*sc[0]) ) / t );
	}
	if ( x < 0.0 ) {
		out[ 1 ] = -out[ 1 ];
		out[ 0 ] = -out[ 0 ];
	}
	return out;
}


// EXPORTS //

module.exports = fresnel;

},{"./rational_pcqc.js":1498,"./rational_pfqf.js":1499,"./rational_pgqg.js":1500,"./rational_psqs.js":1501,"@stdlib/constants/math/float64-half-pi":76,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/sincos":1810}],1496:[function(require,module,exports){
'use strict';

/**
* Compute the Fresnel integrals S(x) and C(x).
*
* @module @stdlib/math/base/special/fresnel
*
* @example
* var fresnel = require( '@stdlib/math/base/special/fresnel' );
*
* var v = fresnel( 0.0 );
* // returns [ 0.0, 0.0 ]
*
* v = fresnel( 1.0 );
* // returns [ ~0.438, ~0.780 ]
*
* v = fresnel( Infinity );
* // returns [ ~0.5, ~0.5 ]
*
* v = fresnel( -Infinity );
* // returns [ ~-0.5, ~-0.5 ]
*
* v = fresnel( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var fresnel = require( '@stdlib/math/base/special/fresnel' );
*
* var out = new Float64Array( 2 );
*
* var v = fresnel( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~0.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var fresnel = require( './main.js' );


// EXPORTS //

module.exports = fresnel;

},{"./main.js":1497}],1497:[function(require,module,exports){
'use strict';

// MODULES //

var computeFresnel = require( './fresnel.js' );


// MAIN //

/**
* Computes the Fresnel integrals S(x) and C(x).
*
* @param {(Array|TypedArray|Object)} [out] - destination array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} S(x) and C(x)
*
* @example
* var fresnel = require( '@stdlib/math/base/special/fresnel' );
*
* var v = fresnel( 0.0 );
* // returns [ 0.0, 0.0 ]
*
* v = fresnel( 1.0 );
* // returns [ ~0.438, ~0.780 ]
*
* v = fresnel( Infinity );
* // returns [ ~0.5, ~0.5 ]
*
* v = fresnel( -Infinity );
* // returns [ ~-0.5, ~-0.5 ]
*
* v = fresnel( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var fresnel = require( '@stdlib/math/base/special/fresnel' );
*
* var out = new Float64Array( 2 );
*
* var v = fresnel( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~0.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function fresnel( out, x ) {
	if ( arguments.length === 1 ) {
		return computeFresnel( new Array( 2 ), out );
	}
	return computeFresnel( out, x );
}


// EXPORTS //

module.exports = fresnel;

},{"./fresnel.js":1495}],1498:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.0 + (x * (-0.20552590095501388 + (x * (0.018884331939670384 + (x * (-0.0006451914356839651 + (x * (0.000009504280628298596 + (x * (-4.9884311457357354e-8 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.04121420907221998 + (x * (0.0008680295429417843 + (x * (0.000012226278902417902 + (x * (1.2500186247959882e-7 + (x * (9.154392157746574e-10 + (x * 3.99982968972496e-12))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-4.9884311457357354e-8 + (x * (0.000009504280628298596 + (x * (-0.0006451914356839651 + (x * (0.018884331939670384 + (x * (-0.20552590095501388 + (x * 1.0))))))))))); // eslint-disable-line max-len
		s2 = 3.99982968972496e-12 + (x * (9.154392157746574e-10 + (x * (1.2500186247959882e-7 + (x * (0.000012226278902417902 + (x * (0.0008680295429417843 + (x * (0.04121420907221998 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1499:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 2.999999999999634;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 3.763297112699879e-20 + (x * (1.3428327623306275e-16 + (x * (1.7201074326816183e-13 + (x * (1.0230451416490724e-10 + (x * (3.055689837902576e-8 + (x * (0.0000046361374928786735 + (x * (0.000345017939782574 + (x * (0.011522095507358577 + (x * (0.1434079197807589 + (x * (0.4215435550436775 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.2544323709001127e-20 + (x * (4.5200143407412973e-17 + (x * (5.887545336215784e-14 + (x * (3.6014002958937136e-11 + (x * (1.1269922476399903e-8 + (x * (0.0000018462756734893055 + (x * (0.00015593440916415301 + (x * (0.0064405152650885865 + (x * (0.11688892585919138 + (x * (0.7515863983533789 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.4215435550436775 + (x * (0.1434079197807589 + (x * (0.011522095507358577 + (x * (0.000345017939782574 + (x * (0.0000046361374928786735 + (x * (3.055689837902576e-8 + (x * (1.0230451416490724e-10 + (x * (1.7201074326816183e-13 + (x * (1.3428327623306275e-16 + (x * 3.763297112699879e-20))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7515863983533789 + (x * (0.11688892585919138 + (x * (0.0064405152650885865 + (x * (0.00015593440916415301 + (x * (0.0000018462756734893055 + (x * (1.1269922476399903e-8 + (x * (3.6014002958937136e-11 + (x * (5.887545336215784e-14 + (x * (4.5200143407412973e-17 + (x * 1.2544323709001127e-20))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1500:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.8695871016278324e-22 + (x * (8.363544356306774e-19 + (x * (1.375554606332618e-15 + (x * (1.0826804113902088e-12 + (x * (4.4534441586175015e-10 + (x * (9.828524436884223e-8 + (x * (0.000011513882611188428 + (x * (0.0006840793809153931 + (x * (0.018764858409257526 + (x * (0.1971028335255234 + (x * (0.5044420736433832 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.8695871016278324e-22 + (x * (8.391588162831187e-19 + (x * (1.3879653125957886e-15 + (x * (1.1027321506624028e-12 + (x * (4.6068072814652043e-10 + (x * (1.0431458965757199e-7 + (x * (0.000012754507566772912 + (x * (0.0008146791071843061 + (x * (0.02536037414203388 + (x * (0.33774898912002 + (x * (1.4749575992512833 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.5044420736433832 + (x * (0.1971028335255234 + (x * (0.018764858409257526 + (x * (0.0006840793809153931 + (x * (0.000011513882611188428 + (x * (9.828524436884223e-8 + (x * (4.4534441586175015e-10 + (x * (1.0826804113902088e-12 + (x * (1.375554606332618e-15 + (x * (8.363544356306774e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.4749575992512833 + (x * (0.33774898912002 + (x * (0.02536037414203388 + (x * (0.0008146791071843061 + (x * (0.000012754507566772912 + (x * (1.0431458965757199e-7 + (x * (4.6068072814652043e-10 + (x * (1.1027321506624028e-12 + (x * (1.3879653125957886e-15 + (x * (8.391588162831187e-19 + (x * 1.8695871016278324e-22))))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1501:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.5235987755982989;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 318016297876.5678 + (x * (-44297951805.96978 + (x * (2548908805.7337637 + (x * (-62974148.62058625 + (x * (708840.0452577386 + (x * (-2991.8191940101983 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 607366389490.0846 + (x * (22441179564.534092 + (x * (419320245.8981112 + (x * (5173438.887700964 + (x * (45584.78108065326 + (x * (281.3762688899943 + (x * 1.0))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-2991.8191940101983 + (x * (708840.0452577386 + (x * (-62974148.62058625 + (x * (2548908805.7337637 + (x * (-44297951805.96978 + (x * 318016297876.5678))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (281.3762688899943 + (x * (45584.78108065326 + (x * (5173438.887700964 + (x * (419320245.8981112 + (x * (22441179564.534092 + (x * 607366389490.0846))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1502:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.1:  January, 1989
* Copyright 1984, 1987, 1989 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var sincos = require( '@stdlib/math/base/special/sincos' );
var abs = require( '@stdlib/math/base/special/abs' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var polyC = require( './rational_pcqc.js' );
var polyF = require( './rational_pfqf.js' );
var polyG = require( './rational_pgqg.js' );


// VARIABLES //

// Array for storing sincos evaluation:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Fresnel integral C(x).
*
* ## Method
*
* Evaluates the Fresnel integral
*
* ```tex
* \operatorname{C}(x) = \int_0^x \cos\left(\frac{\pi}{2} t^2\right)\,\mathrm{d}t.
* ```
*
* The integral is evaluated by a power series for \\( x < 1 \\). For \\( x >= 1 \\) auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
* ```tex
* \operatorname{C}(x) = \frac{1}{2} + f(x) \sin\left( \frac{\pi}{2} x^2 \right) - g(x) \cos\left( \frac{\pi}{2} x^2 \right).
* ```
*
* ## Notes
*
* -   Relative error on test interval \\( \[0,10\] \\):
*
*     | arithmetic | function | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | IEEE       | C(x)     | 10000    | 1.8e-15 | 3.3e-16 |
*
*
* @param {number} x - input value
* @returns {number} C(x)
*
* @example
* var v = fresnelc( 0.0 );
* // returns 0.0
*
* @example
* var v = fresnelc( 1.0 );
* // returns ~0.780
*
* @example
* var v = fresnelc( Infinity );
* // returns ~0.5
*
* @example
* var v = fresnelc( -Infinity );
* // returns ~-0.5
*
* @example
* var v = fresnelc( NaN );
* // returns NaN
*/
function fresnelc( x ) {
	var x2;
	var xa;
	var C;
	var f;
	var g;
	var t;
	var u;

	xa = abs( x );
	x2 = xa * xa;
	if ( x2 < 2.5625 ) {
		t = x2 * x2;
		C = xa * polyC( t );
	} else if ( xa > 36974.0 ) {
		C = 0.5;
	} else {
		// Asymptotic power series auxiliary functions for large arguments...
		x2 = xa * xa;
		t = PI * x2;
		u = 1.0 / (t * t);
		t = 1.0 / t;
		f = 1.0 - ( u * polyF( u ) );
		g = t * polyG( u );
		t = HALF_PI * x2;
		sincos( sc, t );
		t = PI * xa;
		C = 0.5 + ( ( (f*sc[0]) - (g*sc[1]) ) / t );
	}
	if ( x < 0.0 ) {
		C = -C;
	}
	return C;
}


// EXPORTS //

module.exports = fresnelc;

},{"./rational_pcqc.js":1504,"./rational_pfqf.js":1505,"./rational_pgqg.js":1506,"@stdlib/constants/math/float64-half-pi":76,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/sincos":1810}],1503:[function(require,module,exports){
'use strict';

/**
* Compute the Fresnel integral C(x).
*
* @module @stdlib/math/base/special/fresnelc
*
* @example
* var fresnelc = require( '@stdlib/math/base/special/fresnelc' );
*
* var v = fresnelc( 0.0 );
* // returns 0.0
*
* v = fresnelc( 1.0 );
* // returns ~0.780
*
* v = fresnelc( Infinity );
* // returns ~0.5
*
* v = fresnelc( -Infinity );
* // returns ~-0.5
*
* v = fresnelc( NaN );
* // returns NaN
*/

// MODULES //

var fresnelc = require( './fresnelc.js' );


// EXPORTS //

module.exports = fresnelc;

},{"./fresnelc.js":1502}],1504:[function(require,module,exports){
arguments[4][1498][0].apply(exports,arguments)
},{"dup":1498}],1505:[function(require,module,exports){
arguments[4][1499][0].apply(exports,arguments)
},{"dup":1499}],1506:[function(require,module,exports){
arguments[4][1500][0].apply(exports,arguments)
},{"dup":1500}],1507:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.1:  January, 1989
* Copyright 1984, 1987, 1989 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var sincos = require( '@stdlib/math/base/special/sincos' );
var abs = require( '@stdlib/math/base/special/abs' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var polyS = require( './rational_psqs.js' );
var polyF = require( './rational_pfqf.js' );
var polyG = require( './rational_pgqg.js' );


// VARIABLES //

// Array for storing sincos evaluation:
var sc = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the Fresnel integral S(x).

* ## Method
*
* Evaluates the Fresnel integral
*
* ```tex
* \operatorname{S}(x) = \int_0^x \sin\left(\frac{\pi}{2} t^2\right)\,\mathrm{d}t
* ```
*
* The integral is evaluated by a power series for \\( x < 1 \\). For \\( x >= 1 \\) auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
* ```tex
* \operatorname{S}(x) = \frac{1}{2} - f(x) \cos\left( \frac{\pi}{2} x^2 \right) - g(x) \sin\left( \frac{\pi}{2} x^2 \right).
* ```
*
* ## Notes
*
* -   Relative error on test interval \\( \[0,10\] \\):
*
*     | arithmetic | function | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:--------:|:-------:|
*     | IEEE       | S(x)     | 10000    | 2.0e-15 | 3.2e-16 |
*
*
* @param {number} x - input value
* @returns {number} S(x)
*
* @example
* var v = fresnels( 0.0 );
* // returns 0.0
*
* @example
* var v = fresnels( 1.0 );
* // returns ~0.438
*
* @example
* var v = fresnels( Infinity );
* // returns ~0.5
*
* @example
* var v = fresnels( -Infinity );
* // returns ~-0.5
*
* @example
* var v = fresnels( NaN );
* // returns NaN
*/
function fresnels( x ) {
	var x2;
	var xa;
	var S;
	var f;
	var g;
	var t;
	var u;

	xa = abs( x );
	x2 = xa * xa;
	if ( x2 < 2.5625 ) {
		t = x2 * x2;
		S = xa * x2 * polyS( t );
	} else if ( xa > 36974.0 ) {
		S = 0.5;
	} else {
		// Asymptotic power series auxiliary functions for large arguments...
		x2 = xa * xa;
		t = PI * x2;
		u = 1.0 / (t * t);
		t = 1.0 / t;
		f = 1.0 - ( u * polyF( u ) );
		g = t * polyG( u );
		t = HALF_PI * x2;
		sincos( sc, t );
		t = PI * xa;
		S = 0.5 - ( ( (f*sc[1]) + (g*sc[0]) ) / t );
	}
	if ( x < 0.0 ) {
		S = -S;
	}
	return S;
}


// EXPORTS //

module.exports = fresnels;

},{"./rational_pfqf.js":1509,"./rational_pgqg.js":1510,"./rational_psqs.js":1511,"@stdlib/constants/math/float64-half-pi":76,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/sincos":1810}],1508:[function(require,module,exports){
'use strict';

/**
* Compute the Fresnel integral S(x).
*
* @module @stdlib/math/base/special/fresnels
*
* @example
* var fresnels = require( '@stdlib/math/base/special/fresnels' );
*
* var v = fresnels( 0.0 );
* // returns 0.0
*
* v = fresnels( 1.0 );
* // returns ~0.438
*
* v = fresnels( Infinity );
* // returns ~0.5
*
* v = fresnels( -Infinity );
* // returns ~-0.5
*
* v = fresnels( NaN );
* // returns NaN
*/

// MODULES //

var fresnels = require( './fresnels.js' );


// EXPORTS //

module.exports = fresnels;

},{"./fresnels.js":1507}],1509:[function(require,module,exports){
arguments[4][1499][0].apply(exports,arguments)
},{"dup":1499}],1510:[function(require,module,exports){
arguments[4][1500][0].apply(exports,arguments)
},{"dup":1500}],1511:[function(require,module,exports){
arguments[4][1501][0].apply(exports,arguments)
},{"dup":1501}],1512:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var normalize = require( '@stdlib/number/float64/base/normalize' );
var floatExp = require( '@stdlib/number/float64/base/exponent' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

// Exponent equal to 1022 (BIAS-1): 0 01111111110 00000000000000000000 => 1071644672
var SET_EXP_MASK = 0x3fe00000|0; // asm type annotation

// Normalization workspace:
var X = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = frexp( new Array( 2 ), 4.0 );
* // returns [ 0.5, 3 ]
*
* @example
* var out = frexp( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), -0.0 );
* // returns [ -0.0, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*
* @example
* var out = frexp( new Array( 2 ), Infinity );
* // returns [ Infinity , 0 ]
*
* @example
* var out = frexp( new Array( 2 ), -Infinity );
* // returns [ -Infinity , 0 ]
*/
function frexp( out, x ) {
	var high;
	var exp;
	if (
		x === 0.0 || // handles -0
		isnan( x ) ||
		isInfinite( x )
	) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	// If `x` is subnormal, normalize it...
	normalize( X, x );

	// Extract the exponent from `x` and add the normalization exponent:
	exp = floatExp( X[0] ) + X[ 1 ] + 1;

	// Break `x` into two unsigned 32-bit integers (higher and lower order words):
	toWords( WORDS, X[ 0 ] );
	high = WORDS[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits within the higher order word to BIAS-1 (1023-1=1022):
	high |= SET_EXP_MASK;

	// Create a new floating-point number:
	x = fromWords( high, WORDS[ 1 ] );

	out[ 0 ] = x;
	out[ 1 ] = exp;
	return out;
}


// EXPORTS //

module.exports = frexp;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/number/float64/base/exponent":1903,"@stdlib/number/float64/base/from-words":1905,"@stdlib/number/float64/base/normalize":1914,"@stdlib/number/float64/base/to-words":1925}],1513:[function(require,module,exports){
'use strict';

/**
* Split a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @module @stdlib/math/base/special/frexp
*
* @example
* var frexp = require( '@stdlib/math/base/special/frexp' );
*
* var out = frexp( 4.0 );
* // returns [ 0.5, 3 ]
*
* out = frexp( 0.0 );
* // returns [ 0.0, 0 ]
*
* out = frexp( -0.0 );
* // returns [ -0.0, 0 ]
*
* out = frexp( NaN );
* // returns [ NaN, 0 ]
*
* out = frexp( Infinity );
* // returns [ Infinity , 0 ]
*
* out = frexp( -Infinity );
* // returns [ -Infinity , 0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var frexp = require( '@stdlib/math/base/special/frexp' );
*
* var out = new Float64Array( 2 );
*
* var y = frexp( out, 4.0 );
* // returns <Float64Array>[ 0.5, 3 ]
*
* var bool = ( y === out );
* // returns true
*/

// MODULES //

var frexp = require( './main.js' );


// EXPORTS //

module.exports = frexp;

},{"./main.js":1514}],1514:[function(require,module,exports){
'use strict';

// MODULES //

var fcn = require( './frexp.js' );


// MAIN //

/**
* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var out = frexp( 4.0 );
* // returns [ 0.5, 3 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var y = frexp( out, 4.0 );
* // returns <Float64Array>[ 0.5, 3 ]
*
* var bool = ( y === out );
* // returns true
*
* @example
* var out = frexp( 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = frexp( -0.0 );
* // returns [ -0.0, 0 ]
*
* @example
* var out = frexp( NaN );
* // returns [ NaN, 0 ]
*
* @example
* var out = frexp( Infinity );
* // returns [ Infinity , 0 ]
*
* @example
* var out = frexp( -Infinity );
* // returns [ -Infinity , 0 ]
*/
function frexp( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0.0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = frexp;

},{"./frexp.js":1512}],1515:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var floor = require( '@stdlib/math/base/special/floor' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var factorial = require( '@stdlib/math/base/special/factorial' );
var gammaDeltaRatioLanczos = require( './gamma_delta_ratio_lanczos.js' );


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider moving to pkg


// MAIN //

/**
* Computes the ratio of two gamma functions.
*
* ## Notes
*
* -   Specifically, the function evaluates
*
*     ```tex
*     \frac{ \Gamma( z ) }{ \Gamma( z + \delta ) }
*     ```
*
* @param {number} z - first gamma parameter
* @param {number} delta - difference
* @returns {number} gamma ratio
*
* @example
* var y = gammaDeltaRatio( 2.0, 3.0 );
* // returns ~0.042
*
* @example
* var y = gammaDeltaRatio( 4.0, 0.5 );
* // returns 2.0
*
* @example
* var y = gammaDeltaRatio( 100.0, 0.0 );
* // returns 1.0
*/
function gammaDeltaRatio( z, delta ) {
	var result;
	var idelta;
	var iz;

	if ( z <= 0.0 || z + delta <= 0.0 ) {
		// This isn't very sophisticated, or accurate, but it does work:
		return gamma( z ) / gamma( z + delta );
	}
	idelta = floor( delta );
	if ( idelta === delta ) {
		iz = floor( z );
		if ( iz === z ) {
			// As both `z` and `delta` are integers, see if we can use a table lookup:
			if ( z <= MAX_FACTORIAL && ( z + delta <= MAX_FACTORIAL ) ) {
				return factorial( iz - 1.0 ) / factorial( idelta + iz - 1.0 ); // eslint-disable-line max-len
			}
		}
		if ( abs(delta) < 20.0 ) {
			// As `delta` is a small integer, we can use a finite product:
			if ( delta === 0.0 ) {
				return 1.0;
			}
			if ( delta < 0.0 ) {
				z -= 1.0;
				result = z;
				delta += 1.0;
				while ( delta !== 0.0 ) {
					z -= 1.0;
					result *= z;
					delta += 1.0;
				}
				return result;
			}
			result = 1.0 / z;
			delta -= 1.0;
			while ( delta !== 0.0 ) {
				z += 1.0;
				result /= z;
				delta -= 1.0;
			}
			return result;
		}
	}
	return gammaDeltaRatioLanczos( z, delta );
}


// EXPORTS //

module.exports = gammaDeltaRatio;

},{"./gamma_delta_ratio_lanczos.js":1516,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/factorial":1471,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/gamma":1525}],1516:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var lanczosSum = require( '@stdlib/math/base/special/gamma-lanczos-sum' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var EPSILON = require( '@stdlib/constants/math/float64-eps' );
var E = require( '@stdlib/constants/math/float64-e' );
var G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider moving to pkg
var FACTORIAL_169 = 4.269068009004705e+304;


/**
* Calculates the ratio of two gamma functions via Lanczos approximation.
*
* ## Notes
*
* -   When \\( z < \epsilon \\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:
*
*     ```tex
*     \begin{align}
*     G(z) / G(L) &= 1 / (z \cdot G(L)) ; z < \eps, L = z + \delta = \delta \\
*     z * G(L) &= z * G(lim) \cdot (G(L)/G(lim)) ; lim = \text{largest factorial}
*     \end{align}
*     ```
*
* @private
* @param {number} z - first gamma parameter
* @param {number} delta - difference
* @returns {number} gamma ratio
*/
function gammaDeltaRatioLanczos( z, delta ) {
	var result;
	var ratio;
	var zgh;

	if ( z < EPSILON ) {
		if ( delta > MAX_FACTORIAL ) {
			ratio = gammaDeltaRatioLanczos( delta, MAX_FACTORIAL-delta );
			ratio *= z;
			ratio *= FACTORIAL_169;
			return 1.0 / ratio;
		}
		return 1.0 / ( z * gamma( z+delta ) );
	}
	zgh = z + G - 0.5;
	if ( z + delta === z ) {
		if ( abs(delta) < 10.0 ) {
			result = exp( ( 0.5-z ) * log1p( delta/zgh ) );
		} else {
			result = 1.0;
		}
	} else {
		if ( abs(delta) < 10.0 ) {
			result = exp( ( 0.5-z ) * log1p( delta/zgh ));
		} else {
			result = pow( zgh / (zgh+delta), z-0.5 );
		}
		// Split up the calculation to avoid spurious overflow:
		result *= lanczosSum( z ) / lanczosSum( z + delta );
	}
	result *= pow( E / ( zgh+delta ), delta );
	return result;
}


// EXPORTS //

module.exports = gammaDeltaRatioLanczos;

},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-eps":70,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gamma-lanczos-sum":1522,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743}],1517:[function(require,module,exports){
'use strict';

/**
* Calculate the ratio of two gamma functions.
*
* @module @stdlib/math/base/special/gamma-delta-ratio
*
* @example
* var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
*
* var y = gammaDeltaRatio( 2.0, 3.0 );
* // returns ~0.042
*
* y = gammaDeltaRatio( 4.0, 0.5 );
* // returns 2.0
*
* y = gammaDeltaRatio( 100.0, 0.0 );
* // returns 1.0
*/

// MODULES //

var gammaDeltaRatio = require( './gamma_delta_ratio.js' );


// EXPORTS //

module.exports = gammaDeltaRatio;

},{"./gamma_delta_ratio.js":1515}],1518:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MAIN //

/**
* Calculates the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
*
* @name gammaLanczosSumExpGScaled
* @type {Function}
* @param {number} x - input value
* @returns {number} Lanczos sum approximation
*
* @example
* var v = gammaLanczosSumExpGScaled( 4.0 );
* // returns ~0.018
*
* @example
* var v = gammaLanczosSumExpGScaled( -1.5 );
* // returns ~25.337
*
* @example
* var v = gammaLanczosSumExpGScaled( -0.5 );
* // returns ~-12.911
*
* @example
* var v = gammaLanczosSumExpGScaled( 0.5 );
* // returns ~1.772
*
* @example
* var v = gammaLanczosSumExpGScaled( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaLanczosSumExpGScaled( NaN );
* // returns NaN
*/
var gammaLanczosSumExpGScaled = require( './rational_pq.js' );


// EXPORTS //

module.exports = gammaLanczosSumExpGScaled;

},{"./rational_pq.js":1520}],1519:[function(require,module,exports){
'use strict';

/**
* Calculate the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
*
* @module @stdlib/math/base/special/gamma-lanczos-sum-expg-scaled
*
* @example
* var gammaLanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
*
* var v = gammaLanczosSumExpGScaled( 4.0 );
* // returns ~0.018
*
* v = gammaLanczosSumExpGScaled( -1.5 );
* // returns ~25.337
*
* v = gammaLanczosSumExpGScaled( -0.5 );
* // returns ~-12.911
*
* v = gammaLanczosSumExpGScaled( 0.5 );
* // returns ~1.772
*
* v = gammaLanczosSumExpGScaled( 0.0 );
* // returns Infinity
*
* v = gammaLanczosSumExpGScaled( NaN );
* // returns NaN
*/

// MODULES //

var gammaLanczosSumExpGScaled = require( './gamma_lanczos_sum_expg_scaled.js' );


// EXPORTS //

module.exports = gammaLanczosSumExpGScaled;

},{"./gamma_lanczos_sum_expg_scaled.js":1518}],1520:[function(require,module,exports){
arguments[4][1361][0].apply(exports,arguments)
},{"dup":1361}],1521:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MAIN //

/**
* Calculates the Lanczos sum approximation.
*
* @name gammaLanczosSum
* @type {Function}
* @param {number} x - input value
* @returns {number} Lanczos sum approximation
*
* @example
* var v = gammaLanczosSum( 4.0 );
* // returns ~950.366
*
* @example
* var v = gammaLanczosSum( -1.5 );
* // returns ~1373366.245
*
* @example
* var v = gammaLanczosSum( -0.5 );
* // returns ~-699841.735
*
* @example
* var v = gammaLanczosSum( 0.5 );
* // returns ~96074.186
*
* @example
* var v = gammaLanczosSum( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaLanczosSum( NaN );
* // returns NaN
*/
var gammaLanczosSum = require( './rational_pq.js' );


// EXPORTS //

module.exports = gammaLanczosSum;

},{"./rational_pq.js":1523}],1522:[function(require,module,exports){
'use strict';

/**
* Calculate the Lanczos sum for the approximation of the gamma function.
*
* @module @stdlib/math/base/special/gamma-lanczos-sum
*
* @example
* var gammaLanczosSum = require( '@stdlib/math/base/special/gamma-lanczos-sum' );
*
* var v = gammaLanczosSum( 4.0 );
* // returns ~950.366
*
* v = gammaLanczosSum( -1.5 );
* // returns ~1373366.245
*
* v = gammaLanczosSum( -0.5 );
* // returns ~-699841.735
*
* v = gammaLanczosSum( 0.5 );
* // returns ~96074.186
*
* v = gammaLanczosSum( 0.0 );
* // returns Infinity
*
* v = gammaLanczosSum( NaN );
* // returns NaN
*/

// MODULES //

var gammaLanczosSum = require( './gamma_lanczos_sum.js' );


// EXPORTS //

module.exports = gammaLanczosSum;

},{"./gamma_lanczos_sum.js":1521}],1523:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 38474670393.31777 + (x * (36857665043.51951 + (x * (15889202453.72942 + (x * (4059208354.298835 + (x * (680547661.1834733 + (x * (78239755.00312005 + (x * (6246580.776401795 + (x * (341986.3488721347 + (x * (12287.194511824551 + (x * (261.61404416416684 + (x * 2.5066282746310007))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.5066282746310007 + (x * (261.61404416416684 + (x * (12287.194511824551 + (x * (341986.3488721347 + (x * (6246580.776401795 + (x * (78239755.00312005 + (x * (680547661.1834733 + (x * (4059208354.298835 + (x * (15889202453.72942 + (x * (36857665043.51951 + (x * 38474670393.31777))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1524:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://netlib.sandia.gov/cephes/cprob/gamma.c}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var abs = require( '@stdlib/math/base/special/abs' );
var floor = require( '@stdlib/math/base/special/floor' );
var sin = require( '@stdlib/math/base/special/sin' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var stirlingApprox = require( './stirling_approximation.js' );
var smallApprox = require( './small_approximation.js' );
var rateval = require( './rational_pq.js' );


// MAIN //

/**
* Evaluates the gamma function.
*
* ## Method
*
* 1.  Arguments \\(|x| \leq 34\\) are reduced by recurrence and the function approximated by a rational function of degree \\(6/7\\) in the interval \\((2,3)\\).
* 2.  Large negative arguments are made positive using a reflection formula.
* 3.  Large arguments are handled by Stirling's formula.
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain    | # trials | peak    | rms     |
*     |:----------:|:---------:|:--------:|:-------:|:-------:|
*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |
*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |
*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |
*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |
*
* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gamma( 4.0 );
* // returns 6.0
*
* @example
* var v = gamma( -1.5 );
* // returns ~2.363
*
* @example
* var v = gamma( -0.5 );
* // returns ~-3.545
*
* @example
* var v = gamma( 0.5 );
* // returns ~1.772
*
* @example
* var v = gamma( 0.0 );
* // returns Infinity
*
* @example
* var v = gamma( -0.0 );
* // returns -Infinity
*
* @example
* var v = gamma( NaN );
* // returns NaN
*/
function gamma( x ) {
	var sign;
	var q;
	var p;
	var z;
	if (
		(isInteger( x ) && x < 0) ||
		x === NINF ||
		isnan( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( isNegativeZero( x ) ) {
			return NINF;
		}
		return PINF;
	}
	if ( x > 171.61447887182298 ) {
		return PINF;
	}
	if ( x < -170.5674972726612 ) {
		return 0.0;
	}
	q = abs( x );
	if ( q > 33.0 ) {
		if ( x >= 0.0 ) {
			return stirlingApprox( x );
		}
		p = floor( q );

		// Check whether `x` is even...
		if ( (p&1) === 0 ) {
			sign = -1.0;
		} else {
			sign = 1.0;
		}
		z = q - p;
		if ( z > 0.5 ) {
			p += 1.0;
			z = q - p;
		}
		z = q * sin( PI * z );
		return sign * PI / ( abs(z)*stirlingApprox(q) );
	}
	// Reduce `x`...
	z = 1.0;
	while ( x >= 3.0 ) {
		x -= 1.0;
		z *= x;
	}
	while ( x < 0.0 ) {
		if ( x > -1.0e-9 ) {
			return smallApprox( x, z );
		}
		z /= x;
		x += 1.0;
	}
	while ( x < 2.0 ) {
		if ( x < 1.0e-9 ) {
			return smallApprox( x, z );
		}
		z /= x;
		x += 1.0;
	}
	if ( x === 2.0 ) {
		return z;
	}
	x -= 2.0;
	return z * rateval( x );
}


// EXPORTS //

module.exports = gamma;

},{"./rational_pq.js":1527,"./small_approximation.js":1528,"./stirling_approximation.js":1529,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-negative-zero":132,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/sin":1806}],1525:[function(require,module,exports){
'use strict';

/**
* Evaluate the gamma function.
*
* @module @stdlib/math/base/special/gamma
*
* @example
* var gamma = require( '@stdlib/math/base/special/gamma' );
*
* var v = gamma( 4.0 );
* // returns 6.0
*
* v = gamma( -1.5 );
* // returns ~2.363
*
* v = gamma( -0.5 );
* // returns ~-3.545
*
* v = gamma( 0.5 );
* // returns ~1.772
*
* v = gamma( 0.0 );
* // returns Infinity
*
* v = gamma( -0.0 );
* // returns -Infinity
*
* v = gamma( NaN );
* // returns NaN
*/

// MODULES //

var gamma = require( './gamma.js' );


// EXPORTS //

module.exports = gamma;

},{"./gamma.js":1524}],1526:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333334822;
	}
	return 0.08333333333334822 + (x * (0.0034722222160545866 + (x * (-0.0026813261780578124 + (x * (-0.00022954996161337813 + (x * 0.0007873113957930937))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1527:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.0 + (x * (0.4942148268014971 + (x * (0.20744822764843598 + (x * (0.04763678004571372 + (x * (0.010421379756176158 + (x * (0.0011913514700658638 + (x * (0.00016011952247675185 + (x * 0.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.0714304917030273 + (x * (-0.23459179571824335 + (x * (0.035823639860549865 + (x * (0.011813978522206043 + (x * (-0.004456419138517973 + (x * (0.0005396055804933034 + (x * -0.000023158187332412014))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.00016011952247675185 + (x * (0.0011913514700658638 + (x * (0.010421379756176158 + (x * (0.04763678004571372 + (x * (0.20744822764843598 + (x * (0.4942148268014971 + (x * 1.0))))))))))))); // eslint-disable-line max-len
		s2 = -0.000023158187332412014 + (x * (0.0005396055804933034 + (x * (-0.004456419138517973 + (x * (0.011813978522206043 + (x * (0.035823639860549865 + (x * (-0.23459179571824335 + (x * (0.0714304917030273 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1528:[function(require,module,exports){
'use strict';

// MODULES //

var EULER = require( '@stdlib/constants/math/float64-eulergamma' );


// MAIN //

/**
* Evaluates the gamma function using a small-value approximation.
*
* @private
* @param {number} x - input value
* @param {number} z - scale factor
* @returns {number} function value
*/
function gamma( x, z ) {
	return z / ( ( 1.0 + ( EULER*x ) ) * x );
}


// EXPORTS //

module.exports = gamma;

},{"@stdlib/constants/math/float64-eulergamma":71}],1529:[function(require,module,exports){
'use strict';

// MODULES //

var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
var pow = require( '@stdlib/math/base/special/pow' );
var exp = require( '@stdlib/math/base/special/exp' );
var polyval = require( './polyval_s.js' );


// VARIABLES //

var MAX_STIRLING = 143.01608;


// MAIN //

/**
* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\(33 \leq x \leq 172\\).
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function gamma( x ) {
	var w;
	var y;
	var v;

	w = 1.0 / x;
	w = 1.0 + ( w * polyval( w ) );
	y = exp( x );

	// Check `x` to avoid `pow()` overflow...
	if ( x > MAX_STIRLING ) {
		v = pow( x, ( 0.5*x ) - 0.25 );
		y = v * (v/y);
	} else {
		y = pow( x, x-0.5 ) / y;
	}
	return SQRT_TWO_PI * y * w;
}


// EXPORTS //

module.exports = gamma;

},{"./polyval_s.js":1526,"@stdlib/constants/math/float64-sqrt-two-pi":109,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/pow":1743}],1530:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Copyright Christopher Kormanyos 2013-14.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gamma = require( '@stdlib/math/base/special/gamma' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var lgammaSmallImp = require( './lgamma_small_imp.js' );


// MAIN //

/**
* Computes `gamma(x+1) - 1`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammap1m1( 0.2 );
* // returns ~-0.082
*
* @example
* var v = gammap1m1( -9.2 );
* // returns -1.0
*
* @example
* var v = gammap1m1( 0.0 );
* // returns 0.0
*
* @example
* var v = gammap1m1( -3.0 );
* // returns NaN
*
* @example
* var v = gammap1m1( NaN );
* // returns NaN
*/
function gammap1m1( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		if ( x < -0.5 ) {
			// Best method is simply to subtract 1 from gamma:
			return gamma( 1.0+x ) - 1.0;
		}
		// Use expm1 on the logarithm of gamma:
		return expm1( -log1p( x ) + lgammaSmallImp( x+2.0, x+1.0, x ) );
	}
	if ( x < 2.0 ) {
		// Use expm1 on the logarithm of gamma:
		return expm1( lgammaSmallImp( x+1.0, x, x-1.0 ) );
	}
	// Best method is simply to subtract 1 from gamma:
	return gamma( 1.0+x ) - 1.0;
}


// EXPORTS //

module.exports = gammap1m1;

},{"./lgamma_small_imp.js":1532,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/log1p":1690}],1531:[function(require,module,exports){
'use strict';

/**
* Compute `gamma(x+1) - 1` without cancellation errors.
*
* @module @stdlib/math/base/special/gamma1pm1
*
* @example
* var gamma1pm1 = require( '@stdlib/math/base/special/gamma1pm1' );
*
* var v = gamma1pm1( 0.2 );
* // returns ~-0.082
*
* v = gamma1pm1( -5.3 );
* // returns ~-1.102
*
* v = gamma1pm1( 0.0 );
* // returns 0.0
*
* v = gamma1pm1( NaN );
* // returns NaN
*/

// MODULES //

var gamma1pm1 = require( './gamma1pm1.js' );


// EXPORTS //

module.exports = gamma1pm1;

},{"./gamma1pm1.js":1530}],1532:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/lgamma_small.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Copyright Christopher Kormanyos 2013-14.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var rateval1 = require( './rational_p1q1.js' );
var rateval2 = require( './rational_p2q2.js' );
var rateval3 = require( './rational_p3q3.js' );


// VARIABLES //

var Y1 = 0.158963680267333984375;
var Y2 = 0.52815341949462890625;
var Y3 = 0.452017307281494140625;


// MAIN //

/**
* Evaluates the natural logarithm of the gamma function for small arguments.
*
* ## Method
*
* 1.  For \\( z > 2 \\), begin by performing argument reduction until \\( z \\) is in \\(\[2,3)\\). Use the following form:
*
*     ```tex
*     \operatorname{gammaln}(z) = (z-2)(z+1)(Y + R(z-2))
*     ```
*
*     where \\( R(z-2) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
* 2.  If \\( z < 1 \\), use recurrence to shift to \\( z \\) in the interval \\(\[1,2\]\\). Then, use one of two approximations: one for \\( z \\) in \\(\[1,1.5\]\\) and one for \\( z \\) in \\(\[1.5,2\]\\):
*
*     -   For \(( z \\) in \\(\[1,1.5\]\\), use
*
*         ```tex
*         \operatorname{gammaln}(z) = (z-1)(z-2)(Y + R(z-1))
*         ```
*
*         where \\( R(z-1) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
*     -   For \\( z \\) in \\(\[1.5,2\]\\), use
*
*         ```tex
*         \operatorname{gammaln}(z) = (2-z)(1-z)(Y + R(2-z))
*         ```
*
*         where \\( R(2-z) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
*
* ## Notes
*
* -   Relative error:
*
*     | function | peak         | maximum deviation |
*     |:--------:|:------------:|:-----------------:|
*     | R(Z-2)   | 4.231e-18    | 5.900e-24         |
*     | R(Z-1)   | 1.230011e-17 | 3.139e-021        |
*     | R(2-Z)   | 1.797565e-17 | 2.151e-021        |
*
*
* @private
* @param {number} z - input value
* @param {number} zm1 - `z` minus one
* @param {number} zm2 - `z` minus two
* @returns {number} function value
*/
function lgammaSmallImp( z, zm1, zm2 ) {
	var prefix;
	var result;
	var r;
	var R;

	if ( z < EPS ) {
		return -ln( z );
	}
	if ( zm1 === 0.0 || zm2 === 0.0 ) {
		return 0.0;
	}
	result = 0.0;
	if ( z > 2.0 ) {
		if ( z >= 3.0 ) {
			do {
				z -= 1.0;
				zm2 -= 1.0;
				result += ln(z);
			} while ( z >= 3.0 );
			zm2 = z - 2.0;
		}
		r = zm2 * ( z+1.0 );
		R = rateval1( zm2 );
		result += ( r*Y1 ) + ( r*R );
		return result;
	}
	if ( z < 1.0 ) {
		result += -ln(z);
		zm2 = zm1;
		zm1 = z;
		z += 1.0;
	}
	if ( z <= 1.5 ) {
		r = rateval2( zm1 );
		prefix = zm1 * zm2;
		result += ( prefix*Y2 ) + ( prefix*r );
		return result;
	}
	// Case: 1.5 < z <= 2
	r = zm2 * zm1;
	R = rateval3( -zm2 );
	result += ( r*Y3 ) + ( r*R );
	return result;
}


// EXPORTS //

module.exports = lgammaSmallImp;

},{"./rational_p1q1.js":1533,"./rational_p2q2.js":1534,"./rational_p3q3.js":1535,"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/special/ln":1679}],1533:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.01803556856784494;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.01803556856784494 + (x * (0.02512664961998968 + (x * (0.049410315156753225 + (x * (0.0172491608709614 + (x * (-0.0002594535632054381 + (x * (-0.0005410098692152044 + (x * (-0.00003245886498259485 + (x * 0.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.962029871977952 + (x * (1.4801966942423133 + (x * (0.5413914320717209 + (x * (0.09885042511280101 + (x * (0.008213096746488934 + (x * (0.00022493629192211576 + (x * -2.2335276320861708e-7))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-0.00003245886498259485 + (x * (-0.0005410098692152044 + (x * (-0.0002594535632054381 + (x * (0.0172491608709614 + (x * (0.049410315156753225 + (x * (0.02512664961998968 + (x * -0.01803556856784494))))))))))))); // eslint-disable-line max-len
		s2 = -2.2335276320861708e-7 + (x * (0.00022493629192211576 + (x * (0.008213096746488934 + (x * (0.09885042511280101 + (x * (0.5413914320717209 + (x * (1.4801966942423133 + (x * (1.962029871977952 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1534:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.04906224540690395;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.04906224540690395 + (x * (-0.09691175301595212 + (x * (-0.4149833583594954 + (x * (-0.4065671242119384 + (x * (-0.1584135863906922 + (x * (-0.024014982064857155 + (x * -0.0010034668769627955))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.0234982984646304 + (x * (3.4873958536072385 + (x * (1.9141558827442668 + (x * (0.5071377386143635 + (x * (0.05770397226904519 + (x * 0.001957681026011072))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.0010034668769627955 + (x * (-0.024014982064857155 + (x * (-0.1584135863906922 + (x * (-0.4065671242119384 + (x * (-0.4149833583594954 + (x * (-0.09691175301595212 + (x * 0.04906224540690395))))))))))); // eslint-disable-line max-len
		s2 = 0.001957681026011072 + (x * (0.05770397226904519 + (x * (0.5071377386143635 + (x * (1.9141558827442668 + (x * (3.4873958536072385 + (x * (3.0234982984646304 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1535:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.029232972183027003;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.029232972183027003 + (x * (0.14421626775719232 + (x * (-0.14244039073863127 + (x * (0.05428096940550536 + (x * (-0.008505359768683364 + (x * (0.0004311713426792973 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-1.5016935605448505 + (x * (0.846973248876495 + (x * (-0.22009515181499575 + (x * (0.02558279715597587 + (x * (-0.0010066679553914337 + (x * -8.271935218912905e-7))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0004311713426792973 + (x * (-0.008505359768683364 + (x * (0.05428096940550536 + (x * (-0.14244039073863127 + (x * (0.14421626775719232 + (x * -0.029232972183027003))))))))))); // eslint-disable-line max-len
		s2 = -8.271935218912905e-7 + (x * (-0.0010066679553914337 + (x * (0.02558279715597587 + (x * (-0.22009515181499575 + (x * (0.846973248876495 + (x * (-1.5016935605448505 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1536:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Calculates normalized Q when a is an integer.
*
* @private
* @param {integer} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/
function finiteGammaQ( a, x ) {
	var term;
	var sum;
	var e;
	var n;

	e = exp( -x );
	sum = e;
	if ( sum !== 0.0 ) {
		term = sum;
		for ( n = 1; n < a; ++n ) {
			term /= n;
			term *= x;
			sum += term;
		}
	}
	return sum;
}


// EXPORTS //

module.exports = finiteGammaQ;

},{"@stdlib/math/base/special/exp":1456}],1537:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Calculates normalized Q when a is a half-integer.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/
function finiteHalfGammaQ( a, x ) {
	var half;
	var term;
	var sum;
	var e;
	var n;

	e = erfc( sqrt(x) );
	if ( e !== 0 && a > 1.0 ) {
		term = exp( -x ) / sqrt( PI * x );
		term *= x;
		half = 0.5;
		term /= half;
		sum = term;
		for ( n = 2; n < a; ++n ) {
			term /= n - half;
			term *= x;
			sum += term;
		}
		e += sum;
	}
	return e;
}


// EXPORTS //

module.exports = finiteHalfGammaQ;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sqrt":1826}],1538:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );


// MAIN //

/**
* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/
function fullIGammaPrefix( a, z ) {
	var prefix;
	var alz;

	alz = a * ln( z );
	if ( z >= 1.0 ) {
		if ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {
			prefix = pow( z, a ) * exp( -z );
		}
		else if ( a >= 1.0 ) {
			prefix = pow( z / exp(z/a), a );
		}
		else {
			prefix = exp( alz - z );
		}
	}
	else {
		/* eslint-disable no-lonely-if */
		if ( alz > MIN_LN ) {
			prefix = pow( z, a ) * exp( -z );
		}
		else if ( z/a < MAX_LN ) {
			prefix = pow( z / exp(z/a), a );
		} else {
			prefix = exp( alz - z );
		}
	}
	return prefix;
}


// EXPORTS //

module.exports = fullIGammaPrefix;

},{"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],1539:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Christopher Kormanyos 2013-14.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var floor = require( '@stdlib/math/base/special/floor' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var SQRT_EPSILON = require( '@stdlib/constants/math/float64-sqrt-eps' );
var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var finiteGammaQ = require( './finite_gamma_q.js' );
var finiteHalfGammaQ = require( './finite_half_gamma_q.js' );
var fullIGammaPrefix = require( './full_igamma_prefix.js' );
var igammaTemmeLarge = require( './igamma_temme_large.js' );
var lowerGammaSeries = require( './lower_gamma_series.js' );
var regularisedGammaPrefix = require( './regularised_gamma_prefix.js' );
var tgammaSmallUpperPart = require( './tgamma_small_upper_part.js' );
var upperGammaFraction = require( './upper_gamma_fraction.js' );


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.
*
*
* ## Notes
*
* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.
*
* @param {NonNegativeNumber} x - function parameter
* @param {PositiveNumber} a - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function
* @returns {number} function value
*/
function gammainc( x, a, regularized, upper ) {
	var optimisedInvert;
	var normalized;
	var evalMethod;
	var initValue;
	var isHalfInt;
	var useTemme;
	var isSmallA;
	var invert;
	var result;
	var isInt;
	var sigma;
	var gam;
	var res;
	var fa;
	var g;

	if ( x < 0.0 || a <= 0.0 ) {
		return NaN;
	}
	normalized = ( regularized === void 0 ) ? true : regularized;
	invert = upper;
	result = 0.0;
	if ( a >= MAX_FACTORIAL && !normalized ) {
		if ( invert && ( a * 4.0 < x ) ) {
			// This is method 4 below, done in logs:
			result = ( a * ln(x) ) - x;
			result += ln( upperGammaFraction( a, x ) );
		}
		else if ( !invert && ( a > 4.0 * x ) ) {
			// This is method 2 below, done in logs:
			result = ( a * ln(x) ) - x;
			initValue = 0;
			result += ln( lowerGammaSeries( a, x, initValue ) / a );
		}
		else {
			result = gammainc( a, x, true, invert );
			if ( result === 0.0 ) {
				if ( invert ) {
					// Try http://functions.wolfram.com/06.06.06.0039.01
					result = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );
					result = ln( result ) - a + ( ( a-0.5 ) * ln(a) );
					result += ln( SQRT_TWO_PI );
				} else {
					// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:
					result = ( a * ln( x ) ) - x;
					initValue = 0.0;
					result += ln( lowerGammaSeries( a, x, initValue ) / a);
				}
			}
			else {
				result = ln( result ) + gammaln( a );
			}
		}
		if ( result > MAX_LN ) {
			return PINF;
		}
		return exp( result );
	}
	isSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < MAX_LN );
	if ( isSmallA ) {
		fa = floor( a );
		isInt = ( fa === a );
		isHalfInt = isInt ? false : ( abs( fa - a ) === 0.5 );
	} else {
		isInt = isHalfInt = false;
	}
	if ( isInt && x > 0.6 ) {
		// Calculate Q via finite sum:
		invert = !invert;
		evalMethod = 0;
	}
	else if ( isHalfInt && x > 0.2 ) {
		// Calculate Q via finite sum for half integer a:
		invert = !invert;
		evalMethod = 1;
	}
	else if ( x < SQRT_EPSILON && a > 1.0 ) {
		evalMethod = 6;
	}
	else if ( x < 0.5 ) {
		// Changeover criterion chosen to give a changeover at Q ~ 0.33:
		if ( -0.4 / ln( x ) < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 3;
		}
	}
	else if ( x < 1.1 ) {
		// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:
		if ( x * 0.75 < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 3;
		}
	}
	else {
		// Begin by testing whether we're in the "bad" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:
		useTemme = false;
		if ( normalized && a > 20 ) {
			sigma = abs( (x-a)/a );
			if ( a > 200 ) {
				// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.
				if ( 20 / a > sigma * sigma ) {
					useTemme = true;
				}
			} else if ( sigma < 0.4 ) {
				useTemme = true;
			}
		}
		if ( useTemme ) {
			evalMethod = 5;
		}
		// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.
		else if ( x - ( 1.0 / (3.0 * x) ) < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 4;
			invert = !invert;
		}
	}

	/* eslint-disable default-case */
	switch ( evalMethod ) {
	case 0:
		result = finiteGammaQ( a, x );
		if (normalized === false ) {
			result *= gamma( a );
		}
		break;
	case 1:
		result = finiteHalfGammaQ( a, x );
		if ( normalized === false ) {
			result *= gamma( a );
		}
		break;
	case 2:
		// Compute P:
		result = normalized ?
			regularisedGammaPrefix( a, x ) :
			fullIGammaPrefix( a, x );
		if ( result !== 0.0 ) {
			initValue = 0.0;
			optimisedInvert = false;
			if ( invert ) {
				initValue = normalized ? 1.0 : gamma(a);
				if (
					normalized ||
					result >= 1.0 ||
					FLOAT64_MAX * result > initValue
				) {
					initValue /= result;
					if (
						normalized ||
						a < 1.0 ||
						( FLOAT64_MAX / a > initValue )
					) {
						initValue *= -a;
						optimisedInvert = true;
					}
					else {
						initValue = 0.0;
					}
				}
				else {
					initValue = 0.0;
				}
			}
		}
		result *= lowerGammaSeries( a, x, initValue ) / a;
		if ( optimisedInvert ) {
			invert = false;
			result = -result;
		}
		break;
	case 3:
		// Compute Q:
		invert = !invert;
		res = tgammaSmallUpperPart( a, x, invert );
		result = res[ 0 ];
		g = res[ 1 ];
		invert = false;
		if ( normalized ) {
			result /= g;
		}
		break;
	case 4:
		// Compute Q:
		result = normalized ?
			regularisedGammaPrefix( a, x ) :
			fullIGammaPrefix( a, x );
		if ( result !== 0 ) {
			result *= upperGammaFraction( a, x );
		}
		break;
	case 5:
		result = igammaTemmeLarge( a, x );
		if ( x >= a ) {
			invert = !invert;
		}
		break;
	case 6:
		// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/
		result = normalized ?
			pow(x, a) / gamma( a + 1.0 ) :
			pow( x, a ) / a;
		result *= 1.0 - ( a * x / ( a + 1.0 ) );
		break;
	}
	if ( normalized && result > 1.0 ) {
		result = 1.0;
	}
	if ( invert ) {
		gam = normalized ? 1.0 : gamma( a );
		result = gam - result;
	}
	return result;
}


// EXPORTS //

module.exports = gammainc;

},{"./finite_gamma_q.js":1536,"./finite_half_gamma_q.js":1537,"./full_igamma_prefix.js":1538,"./igamma_temme_large.js":1540,"./lower_gamma_series.js":1542,"./regularised_gamma_prefix.js":1553,"./tgamma_small_upper_part.js":1555,"./upper_gamma_fraction.js":1556,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-eps":105,"@stdlib/constants/math/float64-sqrt-two-pi":109,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],1540:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var erfc = require( '@stdlib/math/base/special/erfc' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var polyvalC0 = require( './polyval_c0.js' );
var polyvalC1 = require( './polyval_c1.js' );
var polyvalC2 = require( './polyval_c2.js' );
var polyvalC3 = require( './polyval_c3.js' );
var polyvalC4 = require( './polyval_c4.js' );
var polyvalC5 = require( './polyval_c5.js' );
var polyvalC6 = require( './polyval_c6.js' );
var polyvalC7 = require( './polyval_c7.js' );
var polyvalC8 = require( './polyval_c8.js' );


// VARIABLES //

// Pre-allocate workspace array:
var workspace = new Array( 10 ); // WARNING: not thread safe


// MAIN //

/**
* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} value of asymptotic expansion
*/
function igammaTemmeLarge( a, x ) {
	var result;
	var sigma;
	var phi;
	var y;
	var z;

	sigma = ( x - a ) / a;
	phi = -ln( 1 + sigma ) + sigma;
	y = a * phi;
	z = sqrt( 2 * phi );
	if ( x < a ) {
		z = -z;
	}
	workspace[ 0 ] = polyvalC0( z );
	workspace[ 1 ] = polyvalC1( z );
	workspace[ 2 ] = polyvalC2( z );
	workspace[ 3 ] = polyvalC3( z );
	workspace[ 4 ] = polyvalC4( z );
	workspace[ 5 ] = polyvalC5( z );
	workspace[ 6 ] = polyvalC6( z );
	workspace[ 7 ] = polyvalC7( z );
	workspace[ 8 ] = polyvalC8( z );
	workspace[ 9 ] = -0.00059676129019274625;
	result = evalpoly( workspace, 1.0/a );
	result *= exp( -y ) / sqrt( 2.0 * PI * a );
	if ( x < a ) {
		result = -result;
	}
	result += erfc( sqrt(y) ) / 2.0;
	return result;
}


// EXPORTS //

module.exports = igammaTemmeLarge;

},{"./polyval_c0.js":1544,"./polyval_c1.js":1545,"./polyval_c2.js":1546,"./polyval_c3.js":1547,"./polyval_c4.js":1548,"./polyval_c5.js":1549,"./polyval_c6.js":1550,"./polyval_c7.js":1551,"./polyval_c8.js":1552,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/tools/evalpoly":1869}],1541:[function(require,module,exports){
'use strict';

/**
* Evaluate the incomplete gamma function.
*
* @module @stdlib/math/base/special/gammainc
*
* @example
* var gammainc = require( '@stdlib/math/base/special/gammainc' );
*
* var v = gammainc( 6.0, 2.0 );
* // returns ~0.9826
*
* v = gammainc( 1.0, 2.0, true, true );
* // returns ~0.7358
*
* v = gammainc( 7.0, 5.0 );
* // returns ~0.8270
*
* v = gammainc( 7.0, 5.0, false );
* // returns ~19.8482
*
* v = gammainc( NaN, 2.0 );
* // returns NaN
*
* v = gammainc( 6.0, NaN );
* // returns NaN
*/

// MODULES //

var gammainc = require( './gammainc.js' );


// EXPORTS //

module.exports = gammainc;

},{"./gammainc.js":1539}],1542:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
var lowerIncompleteGammaSeries = require( './lower_incomplete_gamma_series' );


// MAIN //

/**
* Sums elements of the series expansion of the lower incomplete gamma function.
*
* ## Method
*
* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.
* -   Divide by `tgamma(a)` to get the normalized value.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @param {number} initialValue - initial value of the resulting sum
* @returns {number} sum of terms of lower gamma series
*/
function lowerGammaSeries( a, z, initialValue ) {
	var result;
	var s;

	initialValue = initialValue || 0.0;
	s = lowerIncompleteGammaSeries( a, z );
	result = sumSeries( s, {
		'initialValue': initialValue
	});
	return result;
}


// EXPORTS //

module.exports = lowerGammaSeries;

},{"./lower_incomplete_gamma_series":1543,"@stdlib/math/base/tools/sum-series":1886}],1543:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MAIN //

/**
* Creates a function to evaluate a series expansion of the incomplete gamma function.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/
function lowerIncompleteGammaSeries( a1, z1 ) {
	var result = 1.0;
	var a = a1;
	var z = z1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		var r = result;
		a += 1.0;
		result *= z/a;
		return r;
	}
}


// EXPORTS //

module.exports = lowerIncompleteGammaSeries;

},{}],1544:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.3333333333333333;
	}
	return -0.3333333333333333 + (x * (0.08333333333333333 + (x * (-0.014814814814814815 + (x * (0.0011574074074074073 + (x * (0.0003527336860670194 + (x * (-0.0001787551440329218 + (x * (0.00003919263178522438 + (x * (-0.0000021854485106799924 + (x * (-0.00000185406221071516 + (x * (8.296711340953087e-7 + (x * (-1.7665952736826078e-7 + (x * (6.707853543401498e-9 + (x * (1.0261809784240309e-8 + (x * (-4.382036018453353e-9 + (x * 9.14769958223679e-10))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1545:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.001851851851851852;
	}
	return -0.001851851851851852 + (x * (-0.003472222222222222 + (x * (0.0026455026455026454 + (x * (-0.0009902263374485596 + (x * (0.00020576131687242798 + (x * (-4.018775720164609e-7 + (x * (-0.000018098550334489977 + (x * (0.00000764916091608111 + (x * (-0.0000016120900894563446 + (x * (4.647127802807434e-9 + (x * (1.378633446915721e-7 + (x * (-5.752545603517705e-8 + (x * 1.1951628599778148e-8))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1546:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.004133597883597883;
	}
	return 0.004133597883597883 + (x * (-0.0026813271604938273 + (x * (0.0007716049382716049 + (x * (0.0000020093878600823047 + (x * (-0.00010736653226365161 + (x * (0.000052923448829120125 + (x * (-0.000012760635188618728 + (x * (3.423578734096138e-8 + (x * (0.0000013721957309062932 + (x * (-6.298992138380055e-7 + (x * 1.4280614206064242e-7))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1547:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0006494341563786008;
	}
	return 0.0006494341563786008 + (x * (0.00022947209362139917 + (x * (-0.0004691894943952557 + (x * (0.00026772063206283885 + (x * (-0.00007561801671883977 + (x * (-2.396505113867297e-7 + (x * (0.000011082654115347302 + (x * (-0.0000056749528269915965 + (x * 0.0000014230900732435883))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1548:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.0008618882909167117;
	}
	return -0.0008618882909167117 + (x * (0.0007840392217200666 + (x * (-0.0002990724803031902 + (x * (-0.0000014638452578843418 + (x * (0.00006641498215465122 + (x * (-0.00003968365047179435 + (x * 0.000011375726970678419))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1549:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.00033679855336635813;
	}
	return -0.00033679855336635813 + (x * (-0.00006972813758365858 + (x * (0.0002772753244959392 + (x * (-0.00019932570516188847 + (x * (0.00006797780477937208 + (x * (1.419062920643967e-7 + (x * (-0.000013594048189768693 + (x * (0.000008018470256334202 + (x * -0.000002291481176508095))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1550:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0005313079364639922;
	}
	return 0.0005313079364639922 + (x * (-0.0005921664373536939 + (x * (0.0002708782096718045 + (x * (7.902353232660328e-7 + (x * (-0.00008153969367561969 + (x * (0.0000561168275310625 + (x * -0.000018329116582843375))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1551:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.00034436760689237765;
	}
	return 0.00034436760689237765 + (x * (0.00005171790908260592 + (x * (-0.00033493161081142234 + (x * (0.0002812695154763237 + (x * -0.00010976582244684731))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1552:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.0006526239185953094;
	}
	return -0.0006526239185953094 + (x * (0.0008394987206720873 + (x * -0.000438297098541721))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1553:[function(require,module,exports){
arguments[4][654][0].apply(exports,arguments)
},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"dup":654}],1554:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

/**
* Series representation for upper fraction when `z` is small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {Function}  series function
*/
function smallGamma2Series( a, x ) {
	var result;
	var apn;
	var n;
	var r;

	result = -x;
	x = -x;
	apn = a + 1.0;
	n = 1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		r = result / apn;
		result *= x;
		n += 1;
		result /= n;
		apn += 1.0;
		return r;
	};
}


// EXPORTS //

module.exports = smallGamma2Series;

},{}],1555:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var powm1 = require( '@stdlib/math/base/special/powm1' );
var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
var gamma1pm1 = require( '@stdlib/math/base/special/gamma1pm1' );
var smallGamma2Series = require( './small_gamma2_series.js' );


// MAIN //

/**
* Compute the full upper fraction (Q) when `a` is very small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated
* @returns {Array} full upper fraction (Q) and pgam
*/
function tgammaSmallUpperPart( a, x, invert ) {
	var initialValue;
	var result;
	var pgam;
	var p;
	var s;

	result = gamma1pm1( a );
	pgam = ( result + 1.0 ) / a;
	p = powm1( x, a );
	result -= p;
	result /= a;
	s = smallGamma2Series( a, x );
	p += 1.0;
	initialValue = invert ? pgam : 0.0;
	result = -p * sumSeries( s, {
		'initialValue': (initialValue - result) / p
	});
	if ( invert ) {
		result = -result;
	}
	return [ result, pgam ];
}


// EXPORTS //

module.exports = tgammaSmallUpperPart;

},{"./small_gamma2_series.js":1554,"@stdlib/math/base/special/gamma1pm1":1531,"@stdlib/math/base/special/powm1":1754,"@stdlib/math/base/tools/sum-series":1886}],1556:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
var upperIncompleteGammaFract = require( './upper_incomplete_gamma_fract' );


// MAIN //

/**
* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} function value
*/
function upperGammaFraction( a, z ) {
	var f = upperIncompleteGammaFract( a, z );
	return 1.0 / ( z - a + 1.0 + continuedFraction( f ) );
}


// EXPORTS //

module.exports = upperGammaFraction;

},{"./upper_incomplete_gamma_fract":1557,"@stdlib/math/base/tools/continued-fraction":1866}],1557:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MAIN //

/**
* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/
function upperIncompleteGammaFract( a1, z1 ) {
	var z = z1 - a1 + 1.0;
	var a = a1;
	var k = 0;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/
	function next() {
		k += 1;
		z += 2.0;
		return [
			k * (a - k),
			z
		];
	}
}


// EXPORTS //

module.exports = upperIncompleteGammaFract;

},{}],1558:[function(require,module,exports){
'use strict';

// VARIABLES //

// Chebyshev polynomial coefficients...
var A = [
	1.996379051590076518221,
	-0.17971032528832887213e-2,
	0.131292857963846713e-4,
	-0.2340875228178749e-6,
	0.72291210671127e-8,
	-0.3280997607821e-9,
	0.198750709010e-10,
	-0.15092141830e-11,
	0.1375340084e-12,
	-0.145728923e-13,
	0.17532367e-14,
	-0.2351465e-15,
	0.346551e-16,
	-0.55471e-17,
	0.9548e-18,
	-0.1748e-18,
	0.332e-19,
	-0.58e-20
];


// MAIN //

/**
* Computes the sum of a Chebyshev polynomial.
*
* @private
* @param {PositiveInteger} n - degree of polynomial
* @param {number} t - input value
* @returns {number} Chebyshev sum
*/
function chepolsum( n, t ) {
	var tt;
	var u0;
	var u1;
	var u2;
	var k;

	u0 = 0.0;
	u1 = 0.0;
	tt = t + t;
	k = n;
	do {
		u2 = u1;
		u1 = u0;
		u0 = ( tt*u1 ) - u2 + A[ k ];
		k -= 1;
	} while ( k >= 0 );
	return ( u0-u2 ) / 2.0;
}


// EXPORTS //

module.exports = chepolsum;

},{}],1559:[function(require,module,exports){
/* eslint-disable max-statements */
'use strict';

// MODULES //

var logger = require( 'debug' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var min = require( '@stdlib/math/base/special/min' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
var MAX_FLOAT32 = require( '@stdlib/constants/math/float32-max' );
var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
var higherNewton = require( './higher_newton.js' );
var lambdaeta = require( './lambdaeta.js' );
var gamstar = require( './gamstar.js' );
var eps1 = require( './eps1.js' );
var eps2 = require( './eps2.js' );
var eps3 = require( './eps3.js' );


// VARIABLES //

var debug = logger( 'gammaincinv:compute' );
var HALF = 0.5;
var ONEO3 = 0.333333333333333333333333333333;
var ONEO4 = 0.25;
var ONEO5 = 0.2;
var ONEO6 = 0.166666666666666666666666666667;
var ONEO12 = 0.0833333333333333333333333333333;
var ONEO24 = 0.0416666666666666666666666666667;

// Coefficient workspace:
var CK = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes `x` in the equations `P(a,xr) = p` and `Q(a,xr) = q`, where `a` is a positive parameter and `p` and `q` satisfy `p+q = 1`.
*
* ## Notes
*
* -   The equation is inverted with `min(p,q)`.
*
* @private
* @param {number} a - scale value of incomplete gamma function
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @returns {number} solution of the equations `P(a,xr) = p` and `Q(a,xr) = q` where `a` is a positive parameter
*/
function compute( a, p, q ) {
	var ap1inv;
	var invfp;
	var lgama;
	var pcase;
	var porq;
	var ainv;
	var logr;
	var ap22;
	var ap14;
	var ap13;
	var ap12;
	var vgam;
	var vmin;
	var xini;
	var ap1;
	var ap2;
	var ap3;
	var eta;
	var p6;
	var p5;
	var x0;
	var a2;
	var L2;
	var L3;
	var L4;
	var b2;
	var b3;
	var p3;
	var a4;
	var fp;
	var p4;
	var p2;
	var a3;
	var xr;
	var ck;
	var b;
	var L;
	var i;
	var k;
	var m;
	var r;
	var s;
	var t;
	var y;

	if ( p < HALF ) {
		pcase = true;
		porq = p;
		s = -1.0;
	} else {
		pcase = false;
		porq = q;
		s = 1.0;
	}
	k = 0;
	if ( abs( a-1.0 ) < 1.0e-4 ) {
		m = 0;
		if ( pcase ) {
			if ( p < 1.0e-3 ) {
				p2 = p * p;
				p3 = p2 * p;
				p4 = p3 * p;
				p5 = p4 * p;
				p6 = p5 * p;
				x0 = p + ( p2*HALF ) + ( p3*(ONEO3) ) + ( p4*ONEO4 ) + ( p5*ONEO5 ) + ( p6*(ONEO6) ); // eslint-disable-line max-len
			} else {
				x0 = -ln( 1.0-p );
			}
		} else {
			x0 = -ln( q );
		}
		if ( a === 1.0 ) {
			k = 2;
			xr = x0;
		} else {
			lgama = gammaln( a );
			k = 1;
		}
	}
	if ( q < 1.0e-30 && a < HALF ) {
		m = 0;
		x0 = -ln( q*gamma(a) ) + ( ( a-1.0 ) * ln( -ln( q*gamma(a) ) ));
		k = 1;
		lgama = gammaln( a );
	}
	if ( a > 1.0 && a < 500.0 && p < 1.0e-80 ) {
		m = 0;
		ainv = 1.0 / a;
		ap1inv = 1.0 / ( a+1.0 );
		x0 = ( gammaln( a+1.0 ) + ln( p ) ) * ainv;
		x0 = exp( x0 );
		xini = x0;
		for ( i = 0; i < 10; i++ ) {
			x0 = xini * exp( x0*ainv ) * pow( 1.0-( x0*ap1inv ), ainv );
		}
		k = 1;
		lgama = gammaln( a );
	}

	logr = (1.0/a) * ( ln(p) + gammaln( a+1.0 ) );
	if ( ( logr < ln( ONEO5 * ( 1.0+a ) ) ) && ( k === 0 ) ) {
		r = exp( logr );
		m = 0;
		a2 = a * a;
		a3 = a2 * a;
		a4 = a3 * a;
		ap1 = a + 1.0;
		ap12 = ap1 * ap1;
		ap13 = ap1 * ap12;
		ap14 = ap12 * ap12;
		ap2 = a + 2.0;
		ap22 = ap2 * ap2;
		ap3 = a + 3.0;
		CK[ 0 ] = 1.0;
		CK[ 1 ] = 1.0 / ap1;
		CK[ 2 ] = HALF * ( ( 3.0*a ) + 5.0 ) / ( ap12*ap2 );
		CK[ 3 ] = ONEO3 * ( 31.0 + (8.0*a2) + (33.0*a) ) / ( ap13*ap2*ap3 );
		CK[ 4 ] = ONEO24 * ( 2888.0 + (1179.0*a3) + (125.0*a4) + (3971.0*a2) +
			(5661.0*a) ) / ( ap14*ap22*ap3*( a+4.0 ) ); // eslint-disable-line max-len
		x0 = r * evalpoly( CK, r );
		lgama = gammaln( a );
		k = 1;
	}
	if ( ( a < 10.0 ) && ( k === 0 ) ) {
		vgam = sqrt( a ) / ( gamstar(a)*SQRT_TWO_PI );
		vmin = min( 0.02, vgam );
		if ( q < vmin ) {
			m = 0;
			b = 1.0 - a;
			b2 = b * b;
			b3 = b2 * b;
			eta = sqrt( -2.0/a * ln( q/vgam ) );
			x0 = a * lambdaeta( eta );
			L = ln( x0 );
			if ( x0 > 5.0 ) {
				L2 = L * L;
				L3 = L2 * L;
				L4 = L3 * L;
				r = 1.0 / x0;
				CK[ 0 ] = L - 1.0;
				CK[ 1 ] = ( (3.0*b) - (2.0*b*L) + L2 - ( 2.0*L ) + 2.0 ) * HALF;
				CK[ 2 ] =( (24.0*b*L) - (11.0*b2) - (24.0*b) - (6.0*L2) + (12.0*L) - 12.0 - (9.0*b*L2) + (6.0*b2*L) + (2.0*L3) ) * ONEO6; // eslint-disable-line max-len
				CK[ 3 ] = ( (-12.0*b3*L) + (8.04*b*L2) - (114.0*b2*L) + (72.0+(36.0*L2)) + (((3.0*L4)-(72.0*L)+162.0) * (b-(168.0*b*L))) - ((12.0*L3)+(25.0*b3)) - ( (22.0*b*L3)+(36.0*b2*L2)+(120.0*b2) ) ) * ONEO12; // eslint-disable-line max-len
				CK[ 4 ] = 0.0;
				x0 = x0 - L + ( b*r*evalpoly( CK, r ) );
			} else {
				r = 1.0 / x0;
				L2 = L * L;
				ck = L - 1.0;
				t = L - (b*r*ck);
				if ( t < x0 ) {
					x0 -= t;
				}
			}
			lgama = gammaln( a );
			k = 1;
		}
	}
	if ( ( abs( porq-HALF ) < 1.0e-5 ) && ( k === 0 ) ) {
		m = 0;
		ainv = 1.0 / a;
		x0 = a - ONEO3 + ( ( 0.0197530864197530864197530864198 +
			( 0.00721144424848128551832255535959*ainv ) ) * ainv );
		lgama = gammaln( a );
		k = 1;
	}
	if ( ( a < 1.0 ) && ( k === 0 ) ) {
		m = 0;
		if (pcase) {
			x0 = exp( (1.0/a) * ( ln(porq) + gammaln(a+1.0) ) );
		} else {
			x0 = exp( (1.0/a) * ( ln(1.0-porq) + gammaln(a+1.0) ) );
		}
		lgama = gammaln( a );
		k = 1;
	}
	if ( k === 0 ) {
		m = 1;
		ainv = 1.0 / a;
		r = erfcinv( 2.0 * porq );
		eta = s * r / sqrt( a*HALF );
		if ( r < MAX_FLOAT32 ) {
			eta += ( eps1(eta) + ( (eps2(eta)+(eps3(eta)*ainv))*ainv ) ) * ainv;
			x0 = a * lambdaeta(eta);
			y = eta;
			fp = -sqrt( a/TWO_PI ) * exp( -HALF*a*y*y ) / ( gamstar(a) );
			invfp = 1.0 / fp;
		} else {
			debug( 'Warning: Overflow problems in one or more steps of the computation.' );
			return NaN;
		}
	}
	if ( k < 2 ) {
		xr = higherNewton( x0, a, m, p, q, lgama, invfp, pcase );
	}
	return xr;
}


// EXPORTS //

module.exports = compute;

},{"./eps1.js":1560,"./eps2.js":1561,"./eps3.js":1562,"./gamstar.js":1564,"./higher_newton.js":1565,"./lambdaeta.js":1567,"@stdlib/constants/math/float32-max":67,"@stdlib/constants/math/float64-sqrt-two-pi":109,"@stdlib/constants/math/float64-two-pi":111,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/tools/evalpoly":1869,"debug":1975}],1560:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );
var lambdaeta = require( './lambdaeta.js' );
var rateval = require( './rational_ak0bk0.js' );


// MAIN //

/**
* Evaluates the `eps1` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps1( eta ) {
	var la;
	if ( abs( eta ) < 1.0 ) {
		return rateval( eta );
	}
	la = lambdaeta( eta );
	return ln( eta / ( la - 1.0 ) ) / eta;
}


// EXPORTS //

module.exports = eps1;

},{"./lambdaeta.js":1567,"./rational_ak0bk0.js":1572,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ln":1679}],1561:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var rateval1 = require( './rational_ak1bk1.js' );
var rateval2 = require( './rational_ak2bk2.js' );
var rateval3 = require( './rational_ak3bk3.js' );


// MAIN //

/**
* Evaluates the `eps2` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps2( eta ) {
	var lnmeta;
	var x;
	if ( eta < -5.0 ) {
		x = eta * eta;
		lnmeta = ln( -eta );
		return ( 12.0 - x - ( 6.0*( lnmeta*lnmeta ) ) ) / ( 12.0*x*eta );
	}
	if ( eta < -2.0 ) {
		return rateval1( eta );
	}
	if ( eta < 2.0 ) {
		return rateval2( eta );
	}
	if ( eta < 1000.0 ) {
		x = 1.0 / eta;
		return rateval3( eta ) / ( -12.0*eta );
	}
	return -1.0 / ( 12.0 * eta );
}


// EXPORTS //

module.exports = eps2;

},{"./rational_ak1bk1.js":1573,"./rational_ak2bk2.js":1574,"./rational_ak3bk3.js":1575,"@stdlib/math/base/special/ln":1679}],1562:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var rational1 = require( './rational_ak4bk4.js' );
var rational2 = require( './rational_ak5bk5.js' );
var rational3 = require( './rational_ak6bk6.js' );
var rational4 = require( './rational_ak7bk7.js' );
var rational5 = require( './rational_ak8bk8.js' );


// MAIN //

/**
* Evaluates the `eps3` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps3( eta ) {
	var x;
	var y;

	if ( eta < -8.0 ) {
		x = eta * eta;
		y = ln( -eta ) / eta;
		return ( -30.0 + ( eta*y*( (6.0*x*y*y)-12.0+x ) ) ) / ( 12.0*eta*x*x );
	}
	if ( eta < -4.0 ) {
		return rational1( eta ) / ( eta*eta );
	}
	if ( eta < -2.0 ) {
		return rational2( eta );
	}
	if ( eta < 2.0 ) {
		return rational3( eta );
	}
	if ( eta < 10.0 ) {
		x = 1.0 / eta;
		return rational4( x ) / ( eta*eta );
	}
	if ( eta < 100.0 ) {
		x = 1.0 / eta;
		return rational5( x ) / ( eta*eta );
	}
	return -ln( eta ) / ( 12.0*eta*eta*eta );
}


// EXPORTS //

module.exports = eps3;

},{"./rational_ak4bk4.js":1576,"./rational_ak5bk5.js":1577,"./rational_ak6bk6.js":1578,"./rational_ak7bk7.js":1579,"./rational_ak8bk8.js":1580,"@stdlib/math/base/special/ln":1679}],1563:[function(require,module,exports){
'use strict';

/*
* Translated from the Fortran module by
* ----------------------------------------------------------------------
* Authors:
*  Amparo Gil    (U. Cantabria, Santander, Spain)
*                 e-mail: amparo.gil@unican.es
*  Javier Segura (U. Cantabria, Santander, Spain)
*                 e-mail: javier.segura@unican.es
*  Nico M. Temme (CWI, Amsterdam, The Netherlands)
*                 e-mail: nico.temme@cwi.nl
* ---------------------------------------------------------------------
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var FLOAT32_SMALLEST = require( '@stdlib/constants/math/float32-smallest-normal' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var compute = require( './compute.js' );


// MAIN //

/**
* Inverts the lower gamma function; i.e., computes `xr` such that `P(a,xr) = p`.
*
* ## Method
*
* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.
*
* ## Notes
*
* -   The claimed accuracy obtained using this inversion routine is near `1e-12`.
*
* ## References
*
* -   A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun
* -   A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981
*
*
* @param {Probability} p - probability value
* @param {number} a - scale parameter
* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead; i.e., compute `xr` such that `Q(a,xr) = p`.
* @returns {number} function value of the inverse
*/
function gammaincinv( p, a, upper ) {
	if ( isnan( p ) || isnan( a ) ) {
		return NaN;
	}
	if ( a < FLOAT32_SMALLEST ) {
		return NaN;
	}
	if ( p > 1.0 || p < 0.0 ) {
		return NaN;
	}
	// Case: invert upper gamma function
	if ( upper === true ) {
		if ( p === 0.0 ) {
			return PINF;
		}
		if ( p === 1.0 ) {
			return 0.0;
		}
		return compute( a, 1.0-p, p );
	}
	// Default: invert lower gamma function
	if ( p === 0.0 ) {
		return 0.0;
	}
	if ( p === 1.0 ) {
		return PINF;
	}
	return compute( a, p, 1.0-p );
}


// EXPORTS //

module.exports = gammaincinv;

},{"./compute.js":1559,"@stdlib/constants/math/float32-smallest-normal":68,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128}],1564:[function(require,module,exports){
'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var ln = require( '@stdlib/math/base/special/ln' );
var FLOAT32_MAX = require( '@stdlib/constants/math/float32-max' );
var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
var stirling = require( './stirling.js' );


// MAIN //

/**
* Computes the regulated gamma function.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function gamstar( x ) {
	if ( x >= 3.0 ) {
		return exp( stirling(x) );
	}
	if ( x > 0.0 ) {
		return gamma(x) / ( exp( -x + ( ( x-0.5 ) * ln(x) ) ) * SQRT_TWO_PI );
	}
	// Case: x <= 0.0
	return FLOAT32_MAX;
}


// EXPORTS //

module.exports = gamstar;

},{"./stirling.js":1581,"@stdlib/constants/math/float32-max":67,"@stdlib/constants/math/float64-sqrt-two-pi":109,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/ln":1679}],1565:[function(require,module,exports){
'use strict';

// MODULES //

var logger = require( 'debug' );
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_FLOAT32 = require( '@stdlib/constants/math/float32-max' );


// VARIABLES //

var debug = logger( 'gammaincinv:higher_newton' );


// MAIN //

/**
* Implementation of the high order Newton-like method.
*
* @private
* @param {number} x0 - initial value
* @param {number} a - scale parameter
* @param {number} m - indicator
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @param {number} lgama - logarithm of scale parameter
* @param {number} invfp - one over `fp`
* @param {boolean} pcase - boolean indicating whether p < 0.5
* @returns {number} function value of the inverse
*/
function higherNewton( x0, a, m, p, q, lgama, invfp, pcase ) {
	var dlnr;
	var xini;
	var ck0;
	var ck1;
	var ck2;
	var a2;
	var x2;
	var px;
	var qx;
	var xr;
	var t;
	var n;
	var r;
	var x;

	x = x0;
	t = 1;
	n = 1;
	a2 = a * a;
	xini = x0;
	do {
		x = x0;
		x2 = x * x;
		if ( m === 0 ) {
			dlnr = ( ( 1.0-a ) * ln( x ) ) + x + lgama;
			if ( dlnr > ln( MAX_FLOAT32 ) ) {
				debug( 'Warning: overflow problems in one or more steps of the computation. The initial approximation to the root is returned.' );
				return xini;
			}
			r = exp( dlnr );
		} else {
			r = -invfp * x;
		}
		if ( pcase ) {
			// gammainc( x, s[, regularized = true ][, upper = false ] )
			px = gammainc( x, a, true, false );
			ck0 = -r * ( px - p );
		} else {
			// gammainc( x, s[, regularized = true ][, upper = true ] )
			qx = gammainc( x, a, true, true );
			ck0 = r * ( qx - q );
		}
		r = ck0;
		if ( ( p > 1e-120 ) || ( n > 1 ) ) {
			ck1 = 0.5 * ( x - a + 1.0 ) / x;
			ck2 = ( (2*x2) - (4*x*a) + (4*x) + (2*a2) - (3*a) + 1 ) / x2;
			ck2 /= 6.0;
			x0 = x + ( r * ( 1.0 + ( r * ( ck1 + (r*ck2) ) ) ) );
		} else {
			x0 = x + r;
		}
		t = abs( ( x/x0 ) - 1.0 );
		n += 1;
		x = x0;
		if ( x < 0 ) {
			x = xini;
			n = 100;
		}
	} while ( ( ( t > 2e-14 ) && ( n < 35 ) ) );
	if ( ( t > 2e-14 ) || ( n > 99 ) ) {
		debug( 'Warning: the number of iterations in the Newton method reached the upper limit N=35. The last value obtained for the root is given as output.' );
	}
	xr = x || 0;
	return xr;
}


// EXPORTS //

module.exports = higherNewton;

},{"@stdlib/constants/math/float32-max":67,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gammainc":1541,"@stdlib/math/base/special/ln":1679,"debug":1975}],1566:[function(require,module,exports){
'use strict';

/**
* Compute the inverse of the lower incomplete gamma function.
*
* @module @stdlib/math/base/special/gammaincinv
*
* @example
* var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
*
* var val = gammaincinv( 0.5, 2.0 );
* // returns ~1.678
*
* val = gammaincinv( 0.1, 10.0 );
* // returns ~6.221
*
* val = gammaincinv( 0.75, 3.0 );
* // returns ~3.92
*
* val = gammaincinv( 0.75, 3.0, true );
* // returns ~1.727
*
* val = gammaincinv( 0.75, NaN );
* // returns NaN
*
* val = gammaincinv( NaN, 3.0 );
* // returns NaN
*/

// MODULES //

var gammaincinv = require( './gammaincinv.js' );


// EXPORTS //

module.exports = gammaincinv;

},{"./gammaincinv.js":1563}],1567:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var polyvalAK1 = require( './polyval_ak1.js' );
var polyvalAK2 = require( './polyval_ak2.js' );


// VARIABLES //

var THRESHOLD = 1.0e-8;
var ONEO12 = 0.0833333333333333333333333333333;
var ONEO120 = 0.00833333333333333333333333333333;

// Polynomial coefficient workspace:
var AK = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns the positive number satisfying \\( \eta^2/2=\lambda-1-\ln(\lambda) \\) with \\( \operatorname{sign}(\lambda-1)=\operatorname{sign}(\eta) \\).
*
* @private
* @param {number} eta - eta value
* @returns {number} value satisfying equation
*/
function lambdaeta( eta ) {
	var L2;
	var L3;
	var L4;
	var L5;
	var la;
	var L;
	var q;
	var r;
	var s;

	s = eta * eta * 0.5;
	if ( eta === 0.0 ) {
		la = 0.0;
	}
	else if ( eta < -1.0 ) {
		r = exp( -1.0 - s );
		la = polyvalAK1( r );
	}
	else if ( eta < 1.0 ) {
		r = eta;
		la = polyvalAK2( r );
	}
	else {
		r = 11.0 + s;
		L = ln( r );
		la = r + L;
		r = 1.0 / r;
		L2 = L * L;
		L3 = L2 * L;
		L4 = L3 * L;
		L5 = L4 * L;
		AK[ 1 ] = ( 2.0-L ) * 0.5;
		AK[ 2 ] = ( ( -9.0*L ) + 6.0 + ( 2.0*L2 ) ) / 6.0;
		AK[ 3 ] = -( (3*L3)+ (36*L) - (22*L2) - 12 ) * ONEO12;
		AK[ 4 ] = ( 60.0 + (350.0*L2) - (300.0*L) - (125.0*L3) + (12.0*L4) ) / 60.0; // eslint-disable-line max-len
		AK[ 5 ] = -(-120 - (274*L4) + (900*L) - (1700*L2) + (1125*L3) + (20*L5)) * ONEO120; // eslint-disable-line max-len
		la += ( L * r * evalpoly( AK, r ) );
	}
	r = 1.0;
	if (
		( eta > -3.5 && eta < -0.03 ) ||
		( eta > 0.03 && eta < 40.0 )
	) {
		r = 1.0;
		q = la;
		do {
			la = q * ( s+ln(q) ) / ( q-1.0 );
			r = abs( ( q/la ) - 1.0 );
			q = la;
		} while ( r > THRESHOLD );
	}
	return la;
}


// EXPORTS //

module.exports = lambdaeta;

},{"./polyval_ak1.js":1568,"./polyval_ak2.js":1569,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/tools/evalpoly":1869}],1568:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0;
	}
	return 0.0 + (x * (1.0 + (x * (1.0 + (x * (1.5 + (x * (2.6666666666666665 + (x * (5.208333333333333 + (x * 10.8))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1569:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (1.0 + (x * (0.3333333333333333 + (x * (0.027777777777777776 + (x * (-0.003703703703703704 + (x * (0.0002314814814814815 + (x * 0.00005878894767783657))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1570:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.025721014990011306;
	}
	return 0.025721014990011306 + (x * (0.08247596616699963 + (x * (-0.0025328157302663564 + (x * (0.0006099292666946337 + (x * (-0.00033543297638406 + (x * 0.000250505279903))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1571:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333333;
	}
	return 0.08333333333333333 + (x * (-0.002777777777777778 + (x * (0.0007936507936507937 + (x * -0.0005952380952380953))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1572:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.3333333333438;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.3333333333438 + (x * (-0.2070740359969 + (x * (-0.05041806657154 + (x * (-0.004923635739372 + (x * -0.00004293658292782))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7045554412463 + (x * (0.2118190062224 + (x * (0.03048648397436 + (x * 0.001605037988091))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00004293658292782 + (x * (-0.004923635739372 + (x * (-0.05041806657154 + (x * (-0.2070740359969 + (x * -0.3333333333438))))))); // eslint-disable-line max-len
		s2 = 0.001605037988091 + (x * (0.03048648397436 + (x * (0.2118190062224 + (x * (0.7045554412463 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1573:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0172847633523;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0172847633523 + (x * (-0.0159372646475 + (x * (-0.00464910887221 + (x * (-0.00060683488776 + (x * -0.00000614830384279))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.764050615669 + (x * (0.297143406325 + (x * (0.0579490176079 + (x * 0.00574558524851))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00000614830384279 + (x * (-0.00060683488776 + (x * (-0.00464910887221 + (x * (-0.0159372646475 + (x * -0.0172847633523))))))); // eslint-disable-line max-len
		s2 = 0.00574558524851 + (x * (0.0579490176079 + (x * (0.297143406325 + (x * (0.764050615669 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1574:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0172839517431;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0172839517431 + (x * (-0.0146362417966 + (x * (-0.00357406772616 + (x * (-0.000391032032692 + (x * 0.00000249634036069))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.690560400696 + (x * (0.249962384741 + (x * (0.0443843438769 + (x * 0.00424073217211))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00000249634036069 + (x * (-0.000391032032692 + (x * (-0.00357406772616 + (x * (-0.0146362417966 + (x * -0.0172839517431))))))); // eslint-disable-line max-len
		s2 = 0.00424073217211 + (x * (0.0443843438769 + (x * (0.249962384741 + (x * (0.690560400696 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1575:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.99994466948;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.99994466948 + (x * (104.649839762 + (x * (857.204033806 + (x * (731.901559577 + (x * 45.5174411671))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (104.526456943 + (x * (823.313447808 + (x * (3119.93802124 + (x * 3970.03311219))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 45.5174411671 + (x * (731.901559577 + (x * (857.204033806 + (x * (104.649839762 + (x * 0.99994466948))))))); // eslint-disable-line max-len
		s2 = 3970.03311219 + (x * (3119.93802124 + (x * (823.313447808 + (x * (104.526456943 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1576:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.0495346498136;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.0495346498136 + (x * (0.0299521337141 + (x * (0.00688296911516 + (x * (0.000512634846317 + (x * -0.0000201411722031))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.759803615283 + (x * (0.261547111595 + (x * (0.0464854522477 + (x * 0.00403751193496))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.0000201411722031 + (x * (0.000512634846317 + (x * (0.00688296911516 + (x * (0.0299521337141 + (x * 0.0495346498136))))))); // eslint-disable-line max-len
		s2 = 0.00403751193496 + (x * (0.0464854522477 + (x * (0.261547111595 + (x * (0.759803615283 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1577:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.00452313583942;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.00452313583942 + (x * (0.00120744920113 + (x * (-0.0000789724156582 + (x * (-0.0000504476066942 + (x * -0.00000535770949796))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.912203410349 + (x * (0.405368773071 + (x * (0.0901638932349 + (x * 0.00948935714996))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00000535770949796 + (x * (-0.0000504476066942 + (x * (-0.0000789724156582 + (x * (0.00120744920113 + (x * 0.00452313583942))))))); // eslint-disable-line max-len
		s2 = 0.00948935714996 + (x * (0.0901638932349 + (x * (0.405368773071 + (x * (0.912203410349 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1578:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.00439937562904;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.00439937562904 + (x * (0.000487225670639 + (x * (-0.000128470657374 + (x * (0.00000529110969589 + (x * 1.5716677175e-7))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.794435257415 + (x * (0.333094721709 + (x * (0.0703527806143 + (x * 0.00806110846078))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 1.5716677175e-7 + (x * (0.00000529110969589 + (x * (-0.000128470657374 + (x * (0.000487225670639 + (x * 0.00439937562904))))))); // eslint-disable-line max-len
		s2 = 0.00806110846078 + (x * (0.0703527806143 + (x * (0.333094721709 + (x * (0.794435257415 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1579:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0011481191232;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0011481191232 + (x * (-0.112850923276 + (x * (1.51623048511 + (x * (-0.218472031183 + (x * 0.0730002451555))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (14.2482206905 + (x * (69.7360396285 + (x * (218.938950816 + (x * 277.067027185))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0730002451555 + (x * (-0.218472031183 + (x * (1.51623048511 + (x * (-0.112850923276 + (x * -0.0011481191232))))))); // eslint-disable-line max-len
		s2 = 277.067027185 + (x * (218.938950816 + (x * (69.7360396285 + (x * (14.2482206905 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1580:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.000145727889667;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.000145727889667 + (x * (-0.290806748131 + (x * (-13.308504545 + (x * (199.722374056 + (x * -11.4311378756))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (139.612587808 + (x * (2189.01116348 + (x * (7115.24019009 + (x * 45574.6081453))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -11.4311378756 + (x * (199.722374056 + (x * (-13.308504545 + (x * (-0.290806748131 + (x * -0.000145727889667))))))); // eslint-disable-line max-len
		s2 = 45574.6081453 + (x * (7115.24019009 + (x * (2189.01116348 + (x * (139.612587808 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1581:[function(require,module,exports){
'use strict';

// MODULES //

var gammaln = require( '@stdlib/math/base/special/gammaln' );
var ln = require( '@stdlib/math/base/special/ln' );
var LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
var SMALLEST_FLOAT32 = require( '@stdlib/constants/math/float32-smallest-normal' );
var MAX_FLOAT32 = require( '@stdlib/constants/math/float32-max' );
var chepolsum = require( './chepolsum.js' );
var polyvalC = require( './polyval_c.js' );
var polyvalD = require( './polyval_d.js' );


// VARIABLES //

var C6 = 0.30865217988013567769;


// MAIN //

/**
* Computes the Stirling series corresponding to asymptotic series for the logarithm of the gamma function.
*
* ```tex
* \frac{1}{12x}-\frac{1}{360x^3}\ldots; x \ge 3
* ```
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function stirling( x ) {
	var z;
	if ( x < SMALLEST_FLOAT32 ) {
		return MAX_FLOAT32;
	}
	if ( x < 1.0 ) {
		return gammaln( x+1.0 ) - ( (x+0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;
	}
	if ( x < 2.0 ) {
		return gammaln( x ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;
	}
	if ( x < 3.0 ) {
		return gammaln( x-1.0 ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI + ln( x-1.0 ); // eslint-disable-line max-len
	}
	if ( x < 12.0 ) {
		z = ( 18.0/( x*x ) ) - 1.0;
		return chepolsum( 17, z ) / ( 12.0*x );
	}
	z = 1.0 / ( x * x );
	if ( x < 1000.0 ) {
		return polyvalC( z ) / ( C6+z ) / x;
	}
	return polyvalD( z ) / x;
}


// EXPORTS //

module.exports = stirling;

},{"./chepolsum.js":1558,"./polyval_c.js":1570,"./polyval_d.js":1571,"@stdlib/constants/math/float32-max":67,"@stdlib/constants/math/float32-smallest-normal":68,"@stdlib/constants/math/float64-ln-sqrt-two-pi":81,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679}],1582:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c?revision=268523&view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var abs = require( '@stdlib/math/base/special/abs' );
var ln = require( '@stdlib/math/base/special/ln' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var polyvalA1 = require( './polyval_a1.js' );
var polyvalA2 = require( './polyval_a2.js' );
var polyvalR = require( './polyval_r.js' );
var polyvalS = require( './polyval_s.js' );
var polyvalT1 = require( './polyval_t1.js' );
var polyvalT2 = require( './polyval_t2.js' );
var polyvalT3 = require( './polyval_t3.js' );
var polyvalU = require( './polyval_u.js' );
var polyvalV = require( './polyval_v.js' );
var polyvalW = require( './polyval_w.js' );


// VARIABLES //

var A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8
var A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD
var RC = 1.0;
var SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2
var T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509
var T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B
var UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var VC = 1.0;
var WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69
var YMIN = 1.461632144968362245;
var TWO52 = 4503599627370496; // 2**52
var TWO58 = 288230376151711744; // 2**58
var TINY = 8.470329472543003e-22;
var TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F
var TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42
var TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)


// MAIN //

/**
* Evaluates the natural logarithm of the gamma function.
*
* ## Method
*
* 1.  Argument reduction for \\(0 < x \leq 8\\). Since \\(\Gamma(1+s) = s \Gamma(s)\\), for \\(x \in [0,8]\\), we may reduce \\(x\\) to a number in \\([1.5,2.5]\\) by
*
*     ```tex
*     \operatorname{lgamma}(1+s) = \ln(s) + \operatorname{lgamma}(s)
*     ```
*
*     For example,
*
*     ```tex
*     \begin{align}
*     \operatorname{lgamma}(7.3) &= \ln(6.3) + \operatorname{lgamma}(6.3) \\
*     &= \ln(6.3 \cdot 5.3) + \operatorname{lgamma}(5.3) \\
*     &= \ln(6.3 \cdot 5.3 \cdot 4.3 \cdot 3.3 \cdot2.3) + \operatorname{lgamma}(2.3)
*     \end{align}
*     ```
*
* 2.  Compute a polynomial approximation of \\(\mathrm{lgamma}\\) around its
minimum (\\(\mathrm{ymin} = 1.461632144968362245\\)) to maintain monotonicity. On the interval \\([\mathrm{ymin} - 0.23, \mathrm{ymin} + 0.27]\\) (i.e., \\([1.23164,1.73163]\\)), we let \\(z = x - \mathrm{ymin}\\) and use
*
*     ```tex
*     \operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \cdot \operatorname{poly}(z)
*     ```
*
*     where \\(\operatorname{poly}(z)\\) is a \\(14\\) degree polynomial.
*
* 3.  Compute a rational approximation in the primary interval \\([2,3]\\). Let \\( s = x - 2.0 \\). We can thus use the approximation
*
*     ```tex
*     \operatorname{lgamma}(x) = \frac{s}{2} + s\frac{\operatorname{P}(s)}{\operatorname{Q}(s)}
*     ```
*
*     with accuracy
*
*     ```tex
*     \biggl|\frac{\mathrm{P}}{\mathrm{Q}} - \biggr(\operatorname{lgamma}(x)-\frac{s}{2}\biggl)\biggl| < 2^{-61.71}
*     ```
*
*     The algorithms are based on the observation
*
*     ```tex
*     \operatorname{lgamma}(2+s) = s(1 - \gamma) + \frac{\zeta(2) - 1}{2} s^2 - \frac{\zeta(3) - 1}{3} s^3 + \ldots
*     ```
*
*     where \\(\zeta\\) is the zeta function and \\(\gamma = 0.5772156649...\\) is the Euler-Mascheroni constant, which is very close to \\(0.5\\).
*
* 3.  For \\(x \geq 8\\),
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr) \ln(x) - x + \frac{\ln(2\pi)}{2} + \frac{1}{12x} - \frac{1}{360x^3} + \ldots
*     ```
*
*     which can be expressed
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)-\frac{\ln(2\pi)-1}{2} + \ldots
*     ```
*
*     Let \\(z = \frac{1}{x}\\). We can then use the approximation
*
*     ```tex
*     f(z) = \operatorname{lgamma}(x) - \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)
*     ```
*
*     by
*
*     ```tex
*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \ldots + w_6 z^{11}
*     ```

*     where
*
*     ```tex
*     |w - f(z)| < 2^{-58.74}
*     ```
*
* 4.  For negative \\(x\\), since
*
*     ```tex
*     -x \Gamma(-x) \Gamma(x) = \frac{\pi}{\sin(\pi x)}
*     ```
*
*     where \\(\Gamma\\) is the gamma function, we have
*
*     ```tex
*     \Gamma(x) = \frac{\pi}{\sin(\pi x)(-x)\Gamma(-x)}
*     ```
*
*     Since \\(\Gamma(-x)\\) is positive,
*
*     ```tex
*     \operatorname{sign}(\Gamma(x)) = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     for \\(x < 0\\). Hence, for \\(x < 0\\),
*
*     ```tex
*     \mathrm{signgam} = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     and
*
*     ```tex
*     \begin{align}
*     \operatorname{lgamma}(x) &= \ln(|\Gamma(x)|) \\
*     &= \ln\biggl(\frac{\pi}{|x \sin(\pi x)|}\biggr) - \operatorname{lgamma}(-x)
*     \end{align}
*     ```
*
*     <!-- <note> -->
*
*     Note that one should avoid computing \\(\pi (-x)\\) directly in the computation of \\(\sin(\pi (-x))\\).
*
*     <!-- </note> -->
*
*
* ## Special Cases
*
* ```tex
* \begin{align}
* \operatorname{lgamma}(2+s) &\approx s (1-\gamma) & \mathrm{for\ tiny\ s} \\
* \operatorname{lgamma}(x) &\approx -\ln(x) & \mathrm{for\ tiny\ x} \\
* \operatorname{lgamma}(1) &= 0 & \\
* \operatorname{lgamma}(2) &= 0 & \\
* \operatorname{lgamma}(0) &= \infty & \\
* \operatorname{lgamma}(\infty) &= \infty & \\
* \operatorname{lgamma}(-\mathrm{integer}) &= \pm \infty
* \end{align}
* ```
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammaln( 1.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 2.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 4.0 );
* // returns ~1.792
*
* @example
* var v = gammaln( -0.5 );
* // returns ~1.266
*
* @example
* var v = gammaln( 0.5 );
* // returns ~0.572
*
* @example
* var v = gammaln( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaln( NaN );
* // returns NaN
*/
function gammaln( x ) {
	var isNegative;
	var nadj;
	var flg;
	var p3;
	var p2;
	var p1;
	var p;
	var q;
	var t;
	var w;
	var y;
	var z;
	var r;

	// Special cases: NaN, +-infinity
	if ( isnan( x ) || isInfinite( x ) ) {
		return x;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return PINF;
	}
	if ( x < 0.0 ) {
		isNegative = true;
		x = -x;
	} else {
		isNegative = false;
	}
	// If |x| < 2**-70, return -ln(|x|)
	if ( x < TINY ) {
		return -ln( x );
	}
	if ( isNegative ) {
		// If |x| >= 2**52, must be -integer
		if ( x >= TWO52 ) {
			return PINF;
		}
		t = sinpi( x );
		if ( t === 0.0 ) {
			return PINF;
		}
		nadj = ln( PI / abs( t*x ) );
	}
	// If x equals 1 or 2, return 0
	if ( x === 1.0 || x === 2.0 ) {
		return 0.0;
	}
	// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)
	if ( x < 2.0 ) {
		if ( x <= 0.9 ) {
			r = -ln( x );

			// 0.7316 <= x <=  0.9
			if ( x >= ( YMIN - 1.0 + 0.27 ) ) {
				y = 1.0 - x;
				flg = 0;
			}
			// 0.2316 <= x < 0.7316
			else if ( x >= (YMIN - 1.0 - 0.27) ) {
				y = x - (TC - 1.0);
				flg = 1;
			}
			// 0 < x < 0.2316
			else {
				y = x;
				flg = 2;
			}
		} else {
			r = 0.0;

			// 1.7316 <= x < 2
			if ( x >= (YMIN + 0.27) ) {
				y = 2.0 - x;
				flg = 0;
			}
			// 1.2316 <= x < 1.7316
			else if ( x >= (YMIN - 0.27) ) {
				y = x - TC;
				flg = 1;
			}
			// 0.9 < x < 1.2316
			else {
				y = x - 1.0;
				flg = 2;
			}
		}
		switch ( flg ) { // eslint-disable-line default-case
		case 0:
			z = y * y;
			p1 = A1C + (z*polyvalA1( z ));
			p2 = z * (A2C + (z*polyvalA2( z )));
			p = (y*p1) + p2;
			r += ( p - (0.5*y) );
			break;
		case 1:
			z = y * y;
			w = z * y;
			p1 = T1C + (w*polyvalT1( w ));
			p2 = T2C + (w*polyvalT2( w ));
			p3 = T3C + (w*polyvalT3( w ));
			p = (z*p1) - (TT - (w*(p2+(y*p3))));
			r += ( TF + p );
			break;
		case 2:
			p1 = y * (UC + (y*polyvalU( y )));
			p2 = VC + (y*polyvalV( y ));
			r += (-0.5*y) + (p1/p2);
			break;
		}
	}
	// 2 <= x < 8
	else if ( x < 8.0 ) {
		flg = trunc( x );
		y = x - flg;
		p = y * (SC + (y*polyvalS( y )));
		q = RC + (y*polyvalR( y ));
		r = (0.5*y) + (p/q);
		z = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)
		switch ( flg ) { // eslint-disable-line default-case
		case 7:
			z *= y + 6.0;

			/* falls through */
		case 6:
			z *= y + 5.0;

			/* falls through */
		case 5:
			z *= y + 4.0;

			/* falls through */
		case 4:
			z *= y + 3.0;

			/* falls through */
		case 3:
			z *= y + 2.0;
			r += ln( z );
		}
	}
	// 8 <= x < 2**58
	else if ( x < TWO58 ) {
		t = ln( x );
		z = 1.0 / x;
		y = z * z;
		w = WC + (z*polyvalW( y ));
		r = ((x-0.5)*(t-1.0)) + w;
	}
	// 2**58 <= x <= Inf
	else {
		r = x * ( ln(x)-1.0 );
	}
	if ( isNegative ) {
		r = nadj - r;
	}
	return r;
}


// EXPORTS //

module.exports = gammaln;

},{"./polyval_a1.js":1584,"./polyval_a2.js":1585,"./polyval_r.js":1586,"./polyval_s.js":1587,"./polyval_t1.js":1588,"./polyval_t2.js":1589,"./polyval_t3.js":1590,"./polyval_u.js":1591,"./polyval_v.js":1592,"./polyval_w.js":1593,"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sinpi":1820,"@stdlib/math/base/special/trunc":1841}],1583:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of the gamma function.
*
* @module @stdlib/math/base/special/gammaln
*
* @example
* var gammaln = require( '@stdlib/math/base/special/gammaln' );
*
* var v = gammaln( 1.0 );
* // returns 0.0
*
* v = gammaln( 2.0 );
* // returns 0.0
*
* v = gammaln( 4.0 );
* // returns ~1.792
*
* v = gammaln( -0.5 );
* // returns ~1.266
*
* v = gammaln( 0.5 );
* // returns ~0.572
*
* v = gammaln( 0.0 );
* // returns Infinity
*
* v = gammaln( NaN );
* // returns NaN
*/

// MODULES //

var gammaln = require( './gammaln.js' );


// EXPORTS //

module.exports = gammaln;

},{"./gammaln.js":1582}],1584:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.06735230105312927;
	}
	return 0.06735230105312927 + (x * (0.007385550860814029 + (x * (0.0011927076318336207 + (x * (0.00022086279071390839 + (x * 0.000025214456545125733))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1585:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.020580808432516733;
	}
	return 0.020580808432516733 + (x * (0.0028905138367341563 + (x * (0.0005100697921535113 + (x * (0.00010801156724758394 + (x * 0.000044864094961891516))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1586:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.3920053346762105;
	}
	return 1.3920053346762105 + (x * (0.7219355475671381 + (x * (0.17193386563280308 + (x * (0.01864591917156529 + (x * (0.0007779424963818936 + (x * 0.000007326684307446256))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1587:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.21498241596060885;
	}
	return 0.21498241596060885 + (x * (0.325778796408931 + (x * (0.14635047265246445 + (x * (0.02664227030336386 + (x * (0.0018402845140733772 + (x * 0.00003194753265841009))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1588:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.032788541075985965;
	}
	return -0.032788541075985965 + (x * (0.006100538702462913 + (x * (-0.0014034646998923284 + (x * 0.00031563207090362595))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1589:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.01797067508118204;
	}
	return 0.01797067508118204 + (x * (-0.0036845201678113826 + (x * (0.000881081882437654 + (x * -0.00031275416837512086))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1590:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -0.010314224129834144;
	}
	return -0.010314224129834144 + (x * (0.0022596478090061247 + (x * (-0.0005385953053567405 + (x * 0.0003355291926355191))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1591:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.6328270640250934;
	}
	return 0.6328270640250934 + (x * (1.4549225013723477 + (x * (0.9777175279633727 + (x * (0.22896372806469245 + (x * 0.013381091853678766))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1592:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 2.4559779371304113;
	}
	return 2.4559779371304113 + (x * (2.128489763798934 + (x * (0.7692851504566728 + (x * (0.10422264559336913 + (x * 0.003217092422824239))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1593:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333297;
	}
	return 0.08333333333333297 + (x * (-0.0027777777772877554 + (x * (0.0007936505586430196 + (x * (-0.00059518755745034 + (x * (0.0008363399189962821 + (x * -0.0016309293409657527))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1594:[function(require,module,exports){
'use strict';

/**
* Computes the greatest common divisor (gcd) using the binary GCD algorithm.
*
* ## References
*
* -   Stein, Josef. 1967. "Computational problems associated with Racah algebra." *Journal of Computational Physics* 1 (3): 397–405. doi:[10.1016/0021-9991(67)90047-2][@stein:1967].
*
* [@stein:1967]: https://doi.org/10.1016/0021-9991(67)90047-2
*
* @private
* @param {integer} a - integer
* @param {integer} b - integer
* @returns {integer} greatest common divisor
*
* @example
* var v = gcd( 1.2676506002282294e+30, 9007199254740992 );
* // returns 9007199254740992
*/
function gcd( a, b ) {
	var k = 1;
	var t;

	// Simple cases:
	if ( a === 0 ) {
		return b;
	}
	if ( b === 0 ) {
		return a;
	}
	// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...
	while ( a%2 === 0 && b%2 === 0 ) {
		a = a / 2; // right shift
		b = b / 2; // right shift
		k = k * 2; // left shift
	}
	// Reduce `a` to an odd number...
	while ( a%2 === 0 ) {
		a = a / 2; // right shift
	}
	// Henceforth, `a` is always odd...
	while ( b ) {
		// Remove all factors of 2 in `b`, as they are not common...
		while ( b%2 === 0 ) {
			b = b / 2; // right shift
		}
		// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...
		if ( a > b ) {
			t = b;
			b = a;
			a = t;
		}
		b = b - a; // b=0 iff b=a
	}
	// Restore common factors of 2...
	return k * a;
}


// EXPORTS //

module.exports = gcd;

},{}],1595:[function(require,module,exports){
'use strict';

/**
* Computes the greatest common divisor (gcd) using the binary GCD algorithm and bitwise operations.
*
* ## References
*
* -   Stein, Josef. 1967. "Computational problems associated with Racah algebra." *Journal of Computational Physics* 1 (3): 397–405. doi:[10.1016/0021-9991(67)90047-2][@stein:1967].
*
* [@stein:1967]: https://doi.org/10.1016/0021-9991(67)90047-2
*
* @private
* @param {integer32} a - integer
* @param {integer32} b - integer
* @returns {integer32} greatest common divisor
*
* @example
* var v = gcd( 48, 18 );
* // returns 6
*/
function gcd( a, b ) {
	var k = 0;
	var t;

	// Simple cases:
	if ( a === 0 ) {
		return b;
	}
	if ( b === 0 ) {
		return a;
	}
	// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...
	while ( (a & 1) === 0 && (b & 1) === 0 ) {
		a >>>= 1; // right shift
		b >>>= 1; // right shift
		k += 1;
	}
	// Reduce `a` to an odd number...
	while ( (a & 1) === 0 ) {
		a >>>= 1; // right shift
	}
	// Henceforth, `a` is always odd...
	while ( b ) {
		// Remove all factors of 2 in `b`, as they are not common...
		while ( (b & 1) === 0 ) {
			b >>>= 1; // right shift
		}
		// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...
		if ( a > b ) {
			t = b;
			b = a;
			a = t;
		}
		b -= a; // b=0 iff b=a
	}
	// Restore common factors of 2...
	return a << k;
}


// EXPORTS //

module.exports = gcd;

},{}],1596:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
var bitwise = require( './bitwise_binary_gcd.js' );
var largeIntegers = require( './binary_gcd.js' );


// MAIN //

/**
* Computes the greatest common divisor (gcd).
*
* @param {integer} a - integer
* @param {integer} b - integer
* @returns {integer} greatest common divisor
*
* @example
* var v = gcd( 48, 18 );
* // returns 6
*
* @example
* var v = gcd( 3.14, 18 );
* // returns NaN
*
* @example
* var v = gcd( NaN, 18 );
* // returns NaN
*/
function gcd( a, b ) {
	if ( isnan( a ) || isnan( b ) ) {
		return NaN;
	}
	if (
		a === PINF ||
		b === PINF ||
		a === NINF ||
		b === NINF
	) {
		return NaN;
	}
	if ( !( isInteger( a ) && isInteger( b ) ) ) {
		return NaN;
	}
	if ( a < 0 ) {
		a = -a;
	}
	if ( b < 0 ) {
		b = -b;
	}
	if ( a <= INT32_MAX && b <= INT32_MAX ) {
		return bitwise( a, b );
	}
	return largeIntegers( a, b );
}


// EXPORTS //

module.exports = gcd;

},{"./binary_gcd.js":1594,"./bitwise_binary_gcd.js":1595,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/int32-max":112,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128}],1597:[function(require,module,exports){
'use strict';

/**
* Compute the greatest common divisor (gcd).
*
* @module @stdlib/math/base/special/gcd
*
* @example
* var gcd = require( '@stdlib/math/base/special/gcd' );
*
* var v = gcd( 48, 18 );
* // returns 6
*/

// MODULES //

var gcd = require( './gcd.js' );


// EXPORTS //

module.exports = gcd;

},{"./gcd.js":1596}],1598:[function(require,module,exports){
'use strict';

// MODULES //

var sin = require( '@stdlib/math/base/special/sin' );


// MAIN //

/**
* Computes the half-value coversed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value coversed cosine
*
* @example
* var v = hacovercos( 0.0 );
* // returns 0.5
*
* @example
* var v = hacovercos( Math.PI/2.0 );
* // returns 1.0
*
* @example
* var v = hacovercos( -Math.PI/6.0 );
* // returns 0.25
*
* @example
* var v = hacovercos( NaN );
* // returns NaN
*/
function hacovercos( x ) {
	return (1.0 + sin( x )) / 2.0;
}


// EXPORTS //

module.exports = hacovercos;

},{"@stdlib/math/base/special/sin":1806}],1599:[function(require,module,exports){
'use strict';

/**
* Compute the half-value coversed cosine.
*
* @module @stdlib/math/base/special/hacovercos
*
* @example
* var hacovercos = require( '@stdlib/math/base/special/hacovercos' );
*
* var v = hacovercos( 0.0 );
* // returns 0.5
*
* v = hacovercos( Math.PI/2.0 );
* // returns 1.0
*
* v = hacovercos( -Math.PI/6.0 );
* // returns 0.25
*
* v = hacovercos( NaN );
* // returns NaN
*/

// MODULES //

var hacovercos = require( './hacovercos.js' );


// EXPORTS //

module.exports = hacovercos;

},{"./hacovercos.js":1598}],1600:[function(require,module,exports){
'use strict';

// MODULES //

var sin = require( '@stdlib/math/base/special/sin' );


// MAIN //

/**
* Computes the half-value coversed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value coversed sine
*
* @example
* var v = hacoversin( 0.0 );
* // returns 0.5
*
* @example
* var v = hacoversin( Math.PI/2.0 );
* // returns 0.0
*
* @example
* var v = hacoversin( -Math.PI/6.0 );
* // returns 0.75
*
* @example
* var v = hacoversin( NaN );
* // returns NaN
*/
function hacoversin( x ) {
	return (1.0 - sin( x )) / 2.0;
}


// EXPORTS //

module.exports = hacoversin;

},{"@stdlib/math/base/special/sin":1806}],1601:[function(require,module,exports){
'use strict';

/**
* Compute the half-value coversed sine.
*
* @module @stdlib/math/base/special/hacoversin
*
* @example
* var hacoversin = require( '@stdlib/math/base/special/hacoversin' );
*
* var v = hacoversin( 0.0 );
* // returns 0.5
*
* v = hacoversin( Math.PI/2.0 );
* // returns 0.0
*
* v = hacoversin( -Math.PI/6.0 );
* // returns 0.75
*
* v = hacoversin( NaN );
* // returns NaN
*/

// MODULES //

var hacoversin = require( './hacoversin.js' );


// EXPORTS //

module.exports = hacoversin;

},{"./hacoversin.js":1600}],1602:[function(require,module,exports){
'use strict';

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );


// MAIN //

/**
* Computes the half-value versed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value versed cosine
*
* @example
* var v = havercos( 0.0 );
* // returns 0.0
*
* @example
* var v = havercos( Math.PI/2.0 );
* // returns 0.5
*
* @example
* var v = havercos( -Math.PI/6.0 );
* // returns ~0.9330
*
* @example
* var v = havercos( NaN );
* // returns NaN
*/
function havercos( x ) {
	return (1.0 + cos( x )) / 2.0;
}


// EXPORTS //

module.exports = havercos;

},{"@stdlib/math/base/special/cos":1396}],1603:[function(require,module,exports){
'use strict';

/**
* Compute the half-value versed cosine.
*
* @module @stdlib/math/base/special/havercos
*
* @example
* var havercos = require( '@stdlib/math/base/special/havercos' );
*
* var v = havercos( 0.0 );
* // returns 0.0
*
* v = havercos( Math.PI/2.0 );
* // returns 0.5
*
* v = havercos( -Math.PI/6.0 );
* // returns ~0.9330
*
* v = havercos( NaN );
* // returns NaN
*/

// MODULES //

var havercos = require( './havercos.js' );


// EXPORTS //

module.exports = havercos;

},{"./havercos.js":1602}],1604:[function(require,module,exports){
'use strict';

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );


// MAIN //

/**
* Computes the half-value versed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value versed sine
*
* @example
* var v = haversin( 0.0 );
* // returns 0.0
*
* @example
* var v = haversin( Math.PI/2.0 );
* // returns ~0.5
*
* @example
* var v = haversin( -Math.PI/6.0 );
* // returns ~0.06699
*
* @example
* var v = haversin( NaN );
* // returns NaN
*/
function haversin( x ) {
	return (1.0 - cos( x )) / 2.0;
}


// EXPORTS //

module.exports = haversin;

},{"@stdlib/math/base/special/cos":1396}],1605:[function(require,module,exports){
'use strict';

/**
* Compute the half-value versed sine.
*
* @module @stdlib/math/base/special/haversin
*
* @example
* var haversin = require( '@stdlib/math/base/special/haversin' );
*
* var v = haversin( 0.0 );
* // returns 0.0
*
* v = haversin( Math.PI/2.0 );
* // returns ~0.5
*
* v = haversin( -Math.PI/6.0 );
* // returns ~0.06699
*
* v = haversin( NaN );
* // returns NaN
*/

// MODULES //

var haversin = require( './haversin.js' );


// EXPORTS //

module.exports = haversin;

},{"./haversin.js":1604}],1606:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the Heaviside function.
*
* @param {number} x - input value
* @param {string} [continuity] - continuity option
* @returns {number} function value
*
* @example
* var v = heaviside( 3.14 );
* // returns 1.0
*
* @example
* var v = heaviside( -3.14 );
* // returns 0.0
*
* @example
* var v = heaviside( 0.0 );
* // returns NaN
*
* @example
* var v = heaviside( 0.0, 'half-maximum' );
* // returns 0.5
*
* @example
* var v = heaviside( 0.0, 'left-continuous' );
* // returns 0.0
*
* @example
* var v = heaviside( 0.0, 'right-continuous' );
* // returns 1.0
*
* @example
* var v = heaviside( NaN );
* // returns NaN
*/
function heaviside( x, continuity ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		return 1.0;
	}
	// Handle `+-0`...
	if ( x === 0.0 ) {
		if ( continuity === 'half-maximum' ) {
			return 0.5;
		}
		if ( continuity === 'left-continuous' ) {
			return 0.0;
		}
		if ( continuity === 'right-continuous' ) {
			return 1.0;
		}
		// Default behavior is discontinuity...
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

module.exports = heaviside;

},{"@stdlib/math/base/assert/is-nan":128}],1607:[function(require,module,exports){
'use strict';

/**
* Evaluate the Heaviside function.
*
* @module @stdlib/math/base/special/heaviside
*
* @example
* var heaviside = require( '@stdlib/math/base/special/heaviside' );
*
* var v = heaviside( 3.14 );
* // returns 1.0
*
* v = heaviside( -3.14 );
* // returns 0.0
*
* v = heaviside( 0.0 );
* // returns NaN
*
* v = heaviside( 0.0, 'half-maximum' );
* // returns 0.5
*
* v = heaviside( 0.0, 'left-continuous' );
* // returns 0.0
*
* v = heaviside( 0.0, 'right-continuous' );
* // returns 1.0
*
* v = heaviside( NaN );
* // returns NaN
*/

// MODULES //

var heaviside = require( './heaviside.js' );


// EXPORTS //

module.exports = heaviside;

},{"./heaviside.js":1606}],1608:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Computes the hypotenuse avoiding overflow and underflow.
*
* @param {number} x - number
* @param {number} y - number
* @returns {number} hypotenuse
*
* @example
* var h = hypot( -5.0, 12.0 );
* // returns 13.0
*
* @example
* var h = hypot( NaN, 12.0 );
* // returns NaN
*
* @example
* var h = hypot( -0.0, -0.0 );
* // returns 0.0
*/
function hypot( x, y ) {
	var tmp;
	if ( isnan( x ) || isnan( y ) ) {
		return NaN;
	}
	if ( isInfinite( x ) || isInfinite( y ) ) {
		return PINF;
	}
	if ( x < 0.0 ) {
		x = -x;
	}
	if ( y < 0.0 ) {
		y = -y;
	}
	if ( x < y ) {
		tmp = y;
		y = x;
		x = tmp;
	}
	if ( x === 0.0 ) {
		return 0.0;
	}
	y /= x;
	return x * sqrt( 1.0 + (y*y) );
}


// EXPORTS //

module.exports = hypot;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sqrt":1826}],1609:[function(require,module,exports){
'use strict';

/**
* Compute the hypotenuse avoiding overflow and underflow.
*
* @module @stdlib/math/base/special/hypot
*
* @example
* var hypot = require( '@stdlib/math/base/special/hypot' );
*
* var h = hypot( -5.0, 12.0 );
* // returns 13.0
*
* h = hypot( NaN, 12.0 );
* // returns NaN
*
* h = hypot( -0.0, -0.0 );
* // returns 0.0
*/

// MODULES //

var hypot = require( './hypot.js' );


// EXPORTS //

module.exports = hypot;

},{"./hypot.js":1608}],1610:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Computes an absolute value of a signed 32-bit integer in two's complement format.
*
* ## Method
*
* -   Assume two's complement format.
* -   Create a mask by applying a sign propagating right-shift. For negative integers, this results in all `1`'s. For nonnegative integers, this results in all `0`'s.
* -   XOR the mask with `x`. For negative integers, this is the equivalent of a NOT. For nonnegative integers, this is a no-op.
* -   Subtract the mask to recover the absolute value. For negative integers, this adds `1`, which is `-x` when using two's complement. For nonnegative integers, this subtracts `0`.
*
* @param {integer32} x - integer
* @returns {integer32} absolute value
*
* @example
* var v = abs( -10|0 );
* // returns 10
*/
function abs( x ) {
	var y = x|0; // asm type annotation
	var mask = ( y >> 31 )|0; // asm type annotation
	return ((y ^ mask) - mask)|0; // asm type annotation
}


// EXPORTS //

module.exports = abs;

},{}],1611:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value of a signed 32-bit integer.
*
* @module @stdlib/math/base/special/int32-abs
*
* @example
* var absInt32 = require( '@stdlib/math/base/special/int32-abs' );
*
* var v = absInt32( -1|0 );
* // returns 1
*
* v = absInt32( 2|0 );
* // returns 2
*
* v = absInt32( 0|0 );
* // returns 0
*/

// MODULES //

var absInt32 = require( './abs.js' );


// EXPORTS //

module.exports = absInt32;

},{"./abs.js":1610}],1612:[function(require,module,exports){
'use strict';

/**
* Compute the multiplicative inverse.
*
* @module @stdlib/math/base/special/inv
*
* @example
* var inv = require( '@stdlib/math/base/special/inv' );
*
* var v = inv( -1.0 );
* // returns -1.0
*
* v = inv( 2.0 );
* // returns 0.5
*
* v = inv( 0.0 );
* // returns Infinity
*
* v = inv( -0.0 );
* // returns -Infinity
*
* v = inv( NaN );
* // returns NaN
*/

// MODULES //

var inv = require( './inv.js' );


// EXPORTS //

module.exports = inv;

},{"./inv.js":1613}],1613:[function(require,module,exports){
'use strict';

/**
* Computes the multiplicative inverse of `x`.
*
* @param {number} x - input value
* @returns {number} multiplicative inverse
*
* @example
* var v = inv( -1.0 );
* // returns -1.0
*
* @example
* var v = inv( 2.0 );
* // returns 0.5
*
* @example
* var v = inv( 0.0 );
* // returns Infinity
*
* @example
* var v = inv( -0.0 );
* // returns -Infinity
*
* @example
* var v = inv( NaN );
* // returns NaN
*/
function inv( x ) {
	return 1.0 / x;
}


// EXPORTS //

module.exports = inv;

},{}],1614:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
var factorial = require( '@stdlib/math/base/special/factorial' );
var gammainc = require( '@stdlib/math/base/special/gammainc' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MIN_VALUE = require( '@stdlib/constants/math/float64-smallest-normal' );
var EPSILON = require( '@stdlib/constants/math/float64-eps' );
var fullIGammaPrefix = require( './full_igamma_prefix.js' );
var regularizedGammaPrefix = require( './regularized_gamma_prefix.js' );


// VARIABLES //

var p = new Array( 30 );


// MAIN //

/**
* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} s0 - initial value
* @param {number} mult - initial value
* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function
* @returns {number} function value
*/
function betaSmallBLargeASeries( a, b, x, y, s0, mult, normalized ) {
	var prefix;
	var tmp1;
	var tnp1;
	var sum;
	var b2n;
	var bm1;
	var lx2;
	var lxp;
	var mbn;
	var lx;
	var t4;
	var h;
	var j;
	var m;
	var n;
	var r;
	var t;
	var u;

	// Some values we'll need later, these are Eq 9.1:
	bm1 = b - 1.0;
	t = a + ( bm1 / 2.0 );
	if ( y < 0.35 ) {
		lx = log1p( -y );
	} else {
		lx = ln( x );
	}
	u = -t * lx;

	// And from from 9.2:
	h = regularizedGammaPrefix( b, u );
	if ( h <= MIN_VALUE ) {
		return s0;
	}
	if ( normalized ) {
		prefix = h / gammaDeltaRatio( a, b );
		prefix /= pow( t, b );
	} else {
		prefix = fullIGammaPrefix( b, u ) / pow( t, b );
	}
	prefix *= mult;

	// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...
	p[ 0 ] = 1;  // see 9.3.

	// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )
	j = gammainc( u, b, true, true );
	j /= h;

	// Now we can start to pull things together and evaluate the sum in Eq 9:
	sum = s0 + ( prefix * j ); // Value at N = 0

	// Some variables we'll need...
	tnp1 = 1.0; // 2*N+1
	lx2 = lx / 2.0;
	lx2 *= lx2;
	lxp = 1.0;
	t4 = 4.0 * t * t;
	b2n = b;
	for ( n = 1; n < p.length; ++n ) {
		// Begin by evaluating the next Pn from Eq 9.4:
		tnp1 += 2.0;
		p[ n ] = 0.0;
		mbn = b - n;
		tmp1 = 3;
		for ( m = 1; m < n; ++m ) {
			mbn = ( m * b ) - n;
			p[ n ] += mbn * p[ n-m ] / factorial( tmp1 );
			tmp1 += 2;
		}
		p[ n ] /= n;
		p[ n ] += bm1 / factorial( tnp1 );

		// Now we want Jn from Jn-1 using Eq 9.6:
		j = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;
		lxp *= lx2;
		b2n += 2.0;

		// Pull it together with Eq 9:
		r = prefix * p[ n ] * j;
		sum += r;
		if ( r > 1.0 ) {
			if ( abs( r ) < abs( EPSILON * sum ) ) {
				break;
			}
		} else if ( abs( r / EPSILON ) < abs( sum ) ) {
			break;
		}
	}
	return sum;
}


// EXPORTS //

module.exports = betaSmallBLargeASeries;

},{"./full_igamma_prefix.js":1616,"./regularized_gamma_prefix.js":1624,"@stdlib/constants/math/float64-eps":70,"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/factorial":1471,"@stdlib/math/base/special/gamma-delta-ratio":1517,"@stdlib/math/base/special/gammainc":1541,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743}],1615:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
var floor = require( '@stdlib/math/base/special/floor' );
var pow = require( '@stdlib/math/base/special/pow' );
var MIN_VALUE = require( '@stdlib/constants/math/float64-smallest-normal' );


// MAIN //

/**
* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.
*
* @private
* @param {NonNegativeInteger} n - number of trials
* @param {NonNegativeInteger} k - function input
* @param {Probability} x - function input
* @param {Probability} y - probability equal to `1-x`
* @returns {number} sum
*/
function binomialCCDF( n, k, x, y ) {
	var startTerm;
	var result;
	var start;
	var term;
	var i;

	result = pow( x, n );
	if ( result > MIN_VALUE ) {
		term = result;
		for ( i = floor( n - 1 ); i > k; i-- ) {
			term *= ((i + 1) * y) / ((n - i) * x);
			result += term;
		}
	} else {
		// First term underflows so we need to start at the mode of the distribution and work outwards:
		start = floor( n * x );
		if ( start <= k + 1 ) {
			start = floor( k + 2 );
		}
		result = pow( x, start ) * pow( y, n - start );
		result *= binomcoef( floor(n), floor(start) );
		if ( result === 0.0 ) {
			// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:
			for ( i = start - 1; i > k; i-- ) {
				result += pow( x, i ) * pow( y, n - i );
				result *= binomcoef( floor(n), floor(i) );
			}
		} else {
			term = result;
			startTerm = result;
			for ( i = start - 1; i > k; i-- ) {
				term *= ((i + 1) * y) / ((n - i) * x);
				result += term;
			}
			term = startTerm;
			for ( i = start + 1; i <= n; i++ ) {
				term *= (n - i + 1) * x / (i * y);
				result += term;
			}
		}
	}
	return result;
}


// EXPORTS //

module.exports = binomialCCDF;

},{"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/special/binomcoef":1373,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/pow":1743}],1616:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );


// MAIN //

/**
* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/
function fullIGammaPrefix( a, z ) {
	var prefix;
	var alz;

	alz = a * ln( z );
	if ( z >= 1.0 ) {
		if ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {
			prefix = pow( z, a ) * exp( -z );
		}
		else if ( a >= 1.0 ) {
			prefix = pow( z / exp(z/a), a );
		}
		else {
			prefix = exp( alz - z );
		}
	}
	else if ( alz > MIN_LN ) {
		prefix = pow( z, a ) * exp( -z );
	}
	else if ( z/a < MAX_LN ) {
		prefix = pow( z / exp(z/a), a );
	}
	else {
		prefix = exp( alz - z );
	}
	return prefix;
}


// EXPORTS //

module.exports = fullIGammaPrefix;

},{"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743}],1617:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ibetaPowerTerms = require( './ibeta_power_terms.js' );


// MAIN //

/**
* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} k - function input
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)
*/
function ibetaAStep( a, b, x, y, k, normalized, out ) {
	var prefix;
	var term;
	var sum;
	var i;

	prefix = ibetaPowerTerms( a, b, x, y, normalized );
	if ( out ) {
		out[ 1 ] = prefix;
	}
	prefix /= a;
	if ( prefix === 0.0 ) {
		return prefix;
	}
	sum = 1.0;
	term = 1.0;

	// Series summation from 0 to k-1:
	for ( i = 0; i < k-1; ++i ) {
		term *= (a+b+i) * x / (a+i+1.0);
		sum += term;
	}
	prefix *= sum;
	return prefix;
}


// EXPORTS //

module.exports = ibetaAStep;

},{"./ibeta_power_terms.js":1619}],1618:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
var ibetaPowerTerms = require( './ibeta_power_terms.js' );


// VARIABLES //

var OPTS = {
	'keep': true,
	'maxIter': 1000
};


// FUNCTIONS //

/**
* Continued fraction for the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @returns {Function} series function
*/
function ibetaFraction2t( a, b, x, y ) {
	var m = 0;
	return next;

	/**
	* Calculate the numerator and denominator of the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/
	function next() {
		var denom;
		var aN;
		var bN;

		aN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;
		denom = a + ( 2.0*m ) - 1.0;
		aN /= denom * denom;
		bN = m;
		bN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );
		bN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) / ( a + (2.0*m) + 1.0 ); // eslint-disable-line max-len
		m += 1;
		return [ aN, bN ];
	}
}


// MAIN //

/**
* Evaluates the incomplete beta via the continued fraction representation.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @returns {number} incomplete beta value
*/
function ibetaFraction2( a, b, x, y, normalized, out ) {
	var result;
	var fract;
	var f;

	result = ibetaPowerTerms( a, b, x, y, normalized );
	if ( out ) {
		out[ 1 ] = result;
	}
	if ( result === 0.0 ) {
		return result;
	}
	f = ibetaFraction2t( a, b, x, y );
	fract = continuedFraction( f, OPTS );
	return result / fract;
}


// EXPORTS //

module.exports = ibetaFraction2;

},{"./ibeta_power_terms.js":1619,"@stdlib/math/base/tools/continued-fraction":1866}],1619:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var lanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
var maxabs = require( '@stdlib/math/base/special/maxabs' );
var minabs = require( '@stdlib/math/base/special/minabs' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
var G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
var E = require( '@stdlib/constants/math/float64-e' );


// MAIN //

/**
* Computes the leading power terms in the incomplete beta function.
*
* When normalized,
*
* ```tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ```tex
* x^a y^b
* ```
*
* ## Notes
*
* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are *hard* though, and using logarithms just leads to horrendous cancellation errors.
*
* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is *very* unlikely since one of the power terms will evaluate to a number close to 1.
*
* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*     ```tex
*     (1 + l_1)^a \cdot (1 + l_2)^b \\
*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*     = (1 + l_1 + l_3 + l_1*l_3)^a
*     ```
*
*     and
*
*     ```tex
*     l_3 = (1 + l_2)^(b/a) - 1 \\
*     = \exp((b/a) * \ln(1 + l_2)) - 1
*     ```
*
*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/
function ibetaPowerTerms( a, b, x, y, normalized ) {
	var result;
	var smallA;
	var ratio;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var l3;
	var p1;
	var b1;
	var b2;
	var c;
	var l;

	if ( !normalized ) {
		// Can we do better here?
		return pow( x, a ) * pow( y, b );
	}
	c = a + b;

	// Combine power terms with Lanczos approximation:
	agh = a + G - 0.5;
	bgh = b + G - 0.5;
	cgh = c + G - 0.5;
	result = lanczosSumExpGScaled( c );
	result /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );

	// Combine with the leftover terms from the Lanczos approximation:
	result *= sqrt( bgh / E );
	result *= sqrt( agh / cgh );

	// `l1` and `l2` are the base of the exponents minus one:
	l1 = ( ( x * b ) - ( y * agh ) ) / agh;
	l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
	if ( minabs( l1, l2 ) < 0.2 ) {
		// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
		if ( l1 * l2 > 0 || min( a, b ) < 1 ) {
			if ( abs(l1) < 0.1 ) {
				result *= exp( a * log1p( l1 ) );
			} else {
				result *= pow( ( x*cgh ) / agh, a );
			}
			if ( abs(l2) < 0.1 ) {
				result *= exp( b * log1p( l2 ) );
			} else {
				result *= pow((y * cgh) / bgh, b);
			}
		}
		else if ( maxabs( l1, l2 ) < 0.5 ) {
			smallA = a < b;
			ratio = b / a;
			if (
				(smallA && (ratio * l2 < 0.1)) ||
				(!smallA && (l1 / ratio > 0.1))
			) {
				l3 = expm1( ratio * log1p( l2 ) );
				l3 = l1 + l3 + ( l3 * l1 );
				l3 = a * log1p( l3 );
				result *= exp( l3 );
			}
			else {
				l3 = expm1( log1p( l1 ) / ratio );
				l3 = l2 + l3 + ( l3 * l2 );
				l3 = b * log1p( l3 );
				result *= exp( l3 );
			}
		}
		else if ( abs(l1) < abs(l2) ) {
			// First base near 1 only:
			l = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );
			if ( l <= MIN_LN || l >= MAX_LN ) {
				l += ln(result);
				if ( l >= MAX_LN ) {
					return NaN;
				}
				result = exp( l );
			} else {
				result *= exp( l );
			}
		}
		else {
			// Second base near 1 only:
			l = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );
			if ( l <= MIN_LN || l >= MAX_LN ) {
				l += ln(result);
				if ( l >= MAX_LN ) {
					return NaN;
				}
				result = exp( l );
			} else {
				result *= exp( l );
			}
		}
	}
	else {
		// General case:
		b1 = (x * cgh) / agh;
		b2 = (y * cgh) / bgh;
		l1 = a * ln(b1);
		l2 = b * ln(b2);
		if (
			l1 >= MAX_LN ||
			l1 <= MIN_LN ||
			l2 >= MAX_LN ||
			l2 <= MIN_LN
		) {
			// Oops, under/overflow, sidestep if we can:
			if ( a < b ) {
				p1 = pow( b2, b / a );
				l3 = a * ( ln(b1) + ln(p1) );
				if ( l3 < MAX_LN && l3 > MIN_LN ) {
					result *= pow( p1 * b1, a );
				} else {
					l2 += l1 + ln(result);
					if ( l2 >= MAX_LN ) {
						return NaN;
					}
					result = exp( l2 );
				}
			}
			else {
				p1 = pow( b1, a / b );
				l3 = ( ln(p1) + ln(b2) ) * b;
				if ( l3 < MAX_LN && l3 > MIN_LN ) {
					result *= pow( p1 * b2, b );
				} else {
					l2 += l1 + ln( result );
					if (l2 >= MAX_LN) {
						return NaN;
					}
					result = exp( l2 );
				}
			}
		}
		else {
			// Finally the normal case:
			result *= pow( b1, a ) * pow( b2, b );
		}
	}
	return result;
}


// EXPORTS //

module.exports = ibetaPowerTerms;

},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/maxabs":1705,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/minabs":1709,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1620:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var lanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MIN_VALUE = require( '@stdlib/constants/math/float64-smallest-normal' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
var G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
var E = require( '@stdlib/constants/math/float64-e' );


// VARIABLES //

var opts = {
	'maxTerms': 100
};


// FUNCTIONS //

/**
* Series approximation to the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {number} result - initial result value
* @returns {Function} series function
*/
function ibetaSeriesT( a, b, x, result ) {
	var poch = 1.0 - b;
	var n = 1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		var r = result / a;
		a += 1.0;
		result *= poch * x / n;
		n += 1;
		poch += 1.0;
		return r;
	}
}


// MAIN //

/**
* Incomplete beta series.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {NonNegativeInteger} s0 - initial value
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @param {Probability} y - probability equal to `1-x`
* @returns {number} function value
*/
function ibetaSeries( a, b, x, s0, normalized, out, y ) {
	var result;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var c;
	var s;

	if ( normalized ) {
		c = a + b;

		// Incomplete beta power term, combined with the Lanczos approximation:
		agh = a + G - 0.5;
		bgh = b + G - 0.5;
		cgh = c + G - 0.5;
		result = lanczosSumExpGScaled( c ) / ( lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b ) ); // eslint-disable-line max-len

		l1 = ln( cgh / bgh ) * ( b - 0.5 );
		l2 = ln( x * cgh / agh ) * a;

		// Check for over/underflow in the power terms:
		if (
			l1 > MIN_LN &&
			l1 < MAX_LN &&
			l2 > MIN_LN &&
			l2 < MAX_LN
		) {
			if ( a * b < bgh * 10.0 ) {
				result *= exp( ( b-0.5 ) * log1p( a / bgh ) );
			} else {
				result *= pow( cgh / bgh, b - 0.5 );
			}
			result *= pow( x * cgh / agh, a );
			result *= sqrt( agh / E );

			if ( out ) {
				out[ 1 ] = result * pow( y, b );
			}
		}
		else {
			// We need logs, and this *will* cancel:
			result = ln( result ) + l1 + l2 + ( ( ln( agh ) - 1.0 ) / 2.0 );
			if ( out ) {
				out[ 1 ] = exp( result + ( b * ln( y ) ) );
			}
			result = exp( result );
		}
	}
	else {
		// Non-normalized, just compute the power:
		result = pow( x, a );
	}
	if ( result < MIN_VALUE ) {
		return s0; // Safeguard: series can't cope with denorms.
	}
	s = ibetaSeriesT( a, b, x, result );
	opts.initialValue = s0;
	return sumSeries( s, opts );
}


// EXPORTS //

module.exports = ibetaSeries;

},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/tools/sum-series":1886}],1621:[function(require,module,exports){
'use strict';

/**
* Evaluate the incomplete beta function and its first derivative.
*
* @module @stdlib/math/base/special/kernel-betainc
*
* @example
* var kernelBetainc = require( '@stdlib/math/base/special/kernel-betainc' );
*
* var out = kernelBetainc( 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* var arr = new Array( 2 );
* out = kernelBetainc( arr, 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*
* var bool = ( arr === out );
* // returns true
*/

// MODULES //

var kernelBetainc = require( './main.js' );


// EXPORTS //

module.exports = kernelBetainc;

},{"./main.js":1623}],1622:[function(require,module,exports){
/* eslint-disable max-statements */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var expm1 = require( '@stdlib/math/base/special/expm1' );
var floor = require( '@stdlib/math/base/special/floor' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var asin = require( '@stdlib/math/base/special/asin' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var MAX_FLOAT64 = require( '@stdlib/constants/math/float64-max' );
var MIN_FLOAT64 = require( '@stdlib/constants/math/float64-smallest-normal' );
var MAX_INT32 = require( '@stdlib/constants/math/int32-max' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var betaSmallBLargeASeries = require( './beta_small_b_large_a_series.js' );
var risingFactorialRatio = require( './rising_factorial_ratio.js' );
var ibetaPowerTerms = require( './ibeta_power_terms.js' );
var ibetaFraction2 = require( './ibeta_fraction2.js');
var binomialCCDF = require( './binomial_ccdf.js' );
var ibetaAStep = require( './ibeta_a_step.js' );
var ibetaSeries = require( './ibeta_series.js' );


// VARIABLES //

var ONE_OVER_PI = 1.0 / PI;


// MAIN //

/**
* Evaluates the incomplete beta function and its first derivative. This function divides up the input range and selects the right implementation method for each domain.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {Probability} x - function input
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalized - boolean indicating if the function should evaluate the regularized boolean beta function
* @returns {(Array|TypedArray|Object)} function value and first derivative
*
* @example
* var out = kernelBetainc( new Array( 2 ), 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* @example
* var out = kernelBetainc( new Array( 2 ), 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* @example
* var out = kernelBetainc( new Array( 2 ), 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*/
function ibetaImp( out, x, a, b, invert, normalized ) {
	var lambda;
	var prefix;
	var fract;
	var bbar;
	var div;
	var tmp;
	var k;
	var n;
	var p;
	var y;
	y = 1.0 - x;

	// Derivative not set...
	out[ 1 ] = -1;
	if ( x < 0.0 || x > 1.0 ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( normalized ) {
		if ( a < 0.0 || b < 0.0 ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		// Extend to a few very special cases...
		if ( a === 0.0 ) {
			if ( b === 0.0 ) {
				out[ 0 ] = NaN;
				out[ 1 ] = NaN;
				return out;
			}
			if ( b > 0.0 ) {
				out[ 0 ] = invert ? 0.0 : 1.0;
				return out;
			}
		} else if ( b === 0.0 ) {
			if ( a > 0.0 ) {
				out[ 0 ] = invert ? 1.0 : 0.0;
				return out;
			}
		}
	} else if ( a <= 0.0 || b <= 0.0 ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( x === 0.0 ) {
		if ( a === 1.0 ) {
			out[ 1 ] = 1.0;
		} else {
			out[ 1 ] = a < 1.0 ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;
		}
		if ( invert ) {
			out[ 0 ] = normalized ? 1.0 : beta( a, b );
			return out;
		}
		out[ 0 ] = 0.0;
		return out;
	}
	if ( x === 1.0 ) {
		if ( b === 1.0 ) {
			out[ 1 ] = 1.0;
		} else {
			out[ 1 ] = b < 1.0 ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;
		}
		if ( invert ) {
			out[ 0 ] = 0.0;
		} else {
			out[ 0 ] = normalized ? 1.0 : beta( a, b );
		}
		return out;
	}
	if ( a === 0.5 && b === 0.5 ) {
		out[ 1 ] = ONE_OVER_PI * sqrt( y * x );

		// We have an arcsine distribution:
		p = invert ? asin( sqrt(y) ) : asin( sqrt(x) );
		p /= HALF_PI;
		if ( !normalized ) {
			p *= PI;
		}
		out[ 0 ] = p;
		return out;
	}
	if ( a === 1.0 ) {
		tmp = b;
		b = a;
		a = tmp;

		tmp = y;
		y = x;
		x = tmp;

		invert = !invert;
	}
	if ( b === 1.0 ) {
		// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/
		if ( a === 1.0 ) {
			out[ 1 ] = 1.0;
			out[ 0 ] = invert ? y : x;
			return out;
		}
		out[ 1 ] = a * pow( x, a - 1.0 );
		if ( y < 0.5 ) {
			p = invert ? -expm1( a * log1p(-y) ) : exp( a * log1p(-y) );
		} else {
			p = invert ? -( pow( x, a ) - 1.0 ) : pow( x, a );
		}
		if ( !normalized ) {
			p /= a;
		}
		out[ 0 ] = p;
		return out;
	}
	if ( min( a, b ) <= 1.0 ) {
		if ( x > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;

			invert = !invert;
		}
		if ( max( a, b ) <= 1.0 ) {
			// Both a,b < 1:
			if ( (a >= min( 0.2, b ) ) || ( pow(x, a) <= 0.9 ) ) {
				if ( invert ) {
					fract = -(normalized ? 1.0 : beta( a, b ) );
					invert = false;
					fract = -ibetaSeries( a, b, x, fract, normalized, out, y );
				} else {
					fract = ibetaSeries( a, b, x, 0, normalized, out, y );
				}
			} else {
				tmp = b;
				b = a;
				a = tmp;

				tmp = y;
				y = x;
				x = tmp;

				invert = !invert;
				if ( y >= 0.3 ) {
					if ( invert ) {
						fract = -( normalized ? 1.0 : beta( a, b ) );
						invert = false;
						fract = -ibetaSeries( a, b, x, fract, normalized, out, y ); // eslint-disable-line max-len
					} else {
						fract = ibetaSeries( a, b, x, 0, normalized, out, y );
					}
				} else {
					// Sidestep on a, and then use the series representation:
					if ( normalized ) {
						prefix = 1;
					} else {
						prefix = risingFactorialRatio( a + b, a, 20 );
					}
					fract = ibetaAStep( a, b, x, y, 20, normalized, out );
					if ( invert ) {
						fract -= ( normalized ? 1 : beta( a, b ) );
						invert = false;
						fract = -betaSmallBLargeASeries(
							a + 20.0, b, x, y, fract, prefix, normalized
						);
					} else {
						fract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
					}
				}
			}
		} else if ( b <= 1.0 || ( x < 0.1 && ( pow( b * x, a ) <= 0.7 ) ) ) {
			if ( invert ) {
				fract = -( normalized ? 1 : beta( a, b ) );
				invert = false;
				fract = -ibetaSeries( a, b, x, fract, normalized, out, y );
			} else {
				fract = ibetaSeries( a, b, x, 0.0, normalized, out, y );
			}
		} else {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;
			invert = !invert;

			if ( y >= 0.3 ) {
				if (invert) {
					fract = -(normalized ? 1.0 : beta( a, b ));
					invert = false;
					fract = -ibetaSeries( a, b, x, fract, normalized, out, y );
				} else {
					fract = ibetaSeries( a, b, x, 0.0, normalized, out, y );
				}
			}
			else if ( a >= 15.0 ) {
				if ( invert ) {
					fract = -(normalized ? 1.0 : beta( a, b ));
					invert = false;
					fract = -betaSmallBLargeASeries( a, b, x, y, fract, 1.0, normalized ); // eslint-disable-line max-len
				} else {
					fract = betaSmallBLargeASeries( a, b, x, y, 0.0, 1.0, normalized ); // eslint-disable-line max-len
				}
			}
			else {
				if ( normalized ) {
					prefix = 1;
				} else {
					// Sidestep to improve errors:
					prefix = risingFactorialRatio( a + b, a, 20.0 );
				}
				fract = ibetaAStep( a, b, x, y, 20.0, normalized, out );
				if ( invert ) {
					fract -= ( normalized ? 1.0 : beta( a, b ) );
					invert = false;
					fract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
				} else {
					fract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
				}
			}
		}
	} else {
		// Both a,b >= 1:
		if ( a < b ) {
			lambda = a - ( (a + b) * x );
		} else {
			lambda = ( (a + b) * y ) - b;
		}
		if ( lambda < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;
			invert = !invert;
		}
		if ( b < 40.0 ) {
			if (
				floor(a) === a &&
				floor(b) === b &&
				a < MAX_INT32 - 100
			) {
				// Relate to the binomial distribution and use a finite sum:
				k = a - 1.0;
				n = b + k;
				fract = binomialCCDF( n, k, x, y );
				if ( !normalized ) {
					fract *= beta( a, b );
				}
			}
			else if ( b * x <= 0.7 ) {
				if ( invert ) {
					fract = -( normalized ? 1.0 : beta( a, b ) );
					invert = false;
					fract = -ibetaSeries( a, b, x, fract, normalized, out, y );
				} else {
					fract = ibetaSeries( a, b, x, 0.0, normalized, out, y );
				}
			}
			else if ( a > 15.0 ) {
				// Sidestep so we can use the series representation:
				n = floor( b );
				if ( n === b ) {
					n -= 1;
				}
				bbar = b - n;
				if ( normalized ) {
					prefix = 1;
				} else {
					prefix = risingFactorialRatio( a + bbar, bbar, n );
				}
				fract = ibetaAStep( bbar, a, y, x, n, normalized );
				fract = betaSmallBLargeASeries( a, bbar, x, y, fract, 1.0, normalized ); // eslint-disable-line max-len
				fract /= prefix;
			}
			else if ( normalized ) {
				n = floor( b );
				bbar = b - n;
				if ( bbar <= 0 ) {
					n -= 1;
					bbar += 1;
				}
				fract = ibetaAStep( bbar, a, y, x, n, normalized );
				fract += ibetaAStep( a, bbar, x, y, 20.0, normalized );
				if ( invert ) {
					fract -= 1;
				}
				fract = betaSmallBLargeASeries( a + 20.0, bbar, x, y, fract, 1, normalized ); // eslint-disable-line max-len
				if ( invert ) {
					fract = -fract;
					invert = false;
				}
			}
			else {
				fract = ibetaFraction2( a, b, x, y, normalized, out );
			}
		} else {
			fract = ibetaFraction2( a, b, x, y, normalized, out );
		}
	}
	if ( out[ 1 ] < 0.0 ) {
		out[ 1 ] = ibetaPowerTerms( a, b, x, y, true );
	}
	div = y * x;
	if ( out[ 1 ] !== 0.0 ) {
		if ( ( MAX_FLOAT64 * div < out[ 1 ] ) ) {
			// Overflow, return an arbitrarily large value:
			out[ 1 ] = MAX_FLOAT64 / 2.0;
		} else {
			out[ 1 ] /= div;
		}
	}
	out[ 0 ] = invert ? ( normalized ? 1.0 : beta( a, b ) ) - fract : fract;
	return out;
}


// EXPORTS //

module.exports = ibetaImp;

},{"./beta_small_b_large_a_series.js":1614,"./binomial_ccdf.js":1615,"./ibeta_a_step.js":1617,"./ibeta_fraction2.js":1618,"./ibeta_power_terms.js":1619,"./ibeta_series.js":1620,"./rising_factorial_ratio.js":1625,"@stdlib/constants/math/float64-half-pi":76,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/constants/math/int32-max":112,"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/beta":1360,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1623:[function(require,module,exports){
'use strict';

// MODULES //

var compute = require( './kernel_betainc.js' );


// MAIN //

/**
* Evaluates the incomplete beta function and its first derivative.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {Probability} x - function input
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalized - boolean indicating if the function should evaluate the regularized boolean beta function
* @returns {(Array|TypedArray|Object)} function value and first derivative
*
* @example
* var out = kernelBetainc( 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* @example
* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* @example
* var arr = new Array( 2 );
* var out = kernelBetainc( arr, 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*
* var bool = ( arr === out );
* // returns true
*/
function kernelBetainc( out, x, a, b, invert, normalized ) {
	if ( arguments.length === 5 ) {
		return compute( new Array( 2 ), out, x, a, b, invert );
	}
	return compute( out, x, a, b, invert, normalized );
}


// EXPORTS //

module.exports = kernelBetainc;


},{"./kernel_betainc.js":1622}],1624:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var lanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
var G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
var E = require( '@stdlib/constants/math/float64-e' );


// MAIN //

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/
function regularizedGammaPrefix( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + G - 0.5;
	d = ( (z - a) - G + 0.5 ) / agh;
	if ( a < 1.0 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= MIN_LN ) {
			// Use logs, so should be free of cancellation errors:
			return exp( ( a * ln(z) ) - z - gammaln( a ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return pow( z, a ) * exp( -z ) / gamma( a );
	}
	else if ( abs(d*d*a) <= 100.0 && a > 150.0 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );
		prefix = exp( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * ln(z / agh);
		amz = a - z;
		if (
			min(alz, amz) <= MIN_LN ||
			max(alz, amz) >= MAX_LN
		) {
			amza = amz / a;
			if (
				min(alz, amz)/2.0 > MIN_LN &&
				max(alz, amz)/2.0 < MAX_LN
			) {
				// Compute square root of the result and then square it:
				sq = pow( z/agh, a/2.0 ) * exp( amz/2.0 );
				prefix = sq * sq;
			}
			else if (
				min(alz, amz)/4.0 > MIN_LN &&
				max(alz, amz)/4.0 < MAX_LN &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = pow( z/agh, a/4.0 ) * exp( amz/4.0 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > MIN_LN &&
				amza < MAX_LN
			) {
				prefix = pow( (z * exp(amza)) / agh, a );
			}
			else {
				prefix = exp( alz + amz );
			}
		}
		else
		{
			prefix = pow( z/agh, a ) * exp( amz );
		}
	}
	prefix *= sqrt( agh/E ) / lanczosSumExpGScaled( a );
	return prefix;
}


// EXPORTS //

module.exports = regularizedGammaPrefix;

},{"@stdlib/constants/math/float64-e":69,"@stdlib/constants/math/float64-gamma-lanczos-g":74,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-min-ln":96,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1625:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MAIN //

/**
* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.
*
* ## Notes
*
* Specifically, the function calculates
*
* ```tex
* \frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }
* ```
*
* The function should only called with small `k`; for large `k`, it is grossly inefficient.
*
* @private
* @param {number} a - input value
* @param {number} b - input value
* @param {NonNegativeInteger} k - input value
* @returns {number} ratio value
*/
function risingFactorialRatio( a, b, k ) {
	var result;
	var i;
	if ( k === 0 ) {
		return 1.0;
	}
	result = 1.0;
	for ( i = 0; i < k; i++ ) {
		result *= ( a + i ) / ( b + i );
	}
	return result;
}


// EXPORTS //

module.exports = risingFactorialRatio;

},{}],1626:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var inverseStudentsT = require( './inverse_students_t.js' );


// MAIN //

/**
* Returns the inverse of the incomplete beta function via the Student t distribution.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {Probability} p - probability value
* @param {Object} py - placeholder object holding one minus the returned value
* @returns {number} function value
*/
function findIBetaInvFromTDist( a, p, py ) {
	var df;
	var u;
	var v;
	var t;

	u = p / 2.0;
	v = 1.0 - u;
	df = a * 2.0;
	t = inverseStudentsT( df, u, v );
	if ( py ) {
		py.value = t * t / ( df + ( t*t ) );
	}
	return df / ( df + ( t*t ) );
}


// EXPORTS //

module.exports = findIBetaInvFromTDist;

},{"./inverse_students_t.js":1630}],1627:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var sign = require( '@stdlib/math/base/special/signum' );
var max = require( '@stdlib/math/base/special/max' );
var MAX_VALUE = require( '@stdlib/constants/math/float64-max' );


// MAIN //

/**
* Performs root finding via third order Halley iteration.
*
* @private
* @param {Array} fun - array of function and its first two derivatives
* @param {number} guess - initial starting value
* @param {number} minimum - minimum possible value for the result, used as initial lower bracket
* @param {number} maximum - maximum possible value for the result, used as initial upper bracket
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/
function halleyIterate( fun, guess, minimum, maximum, digits, maxIter ) {
	var convergence;
	var outOfBounds;
	var delta1;
	var delta2;
	var factor;
	var result;
	var f0Last;
	var count;
	var delta;
	var denom;
	var diff;
	var num;
	var res;
	var f0;
	var f1;
	var f2;

	f0 = 0.0;
	outOfBounds = false;
	result = guess;
	factor = ldexp( 1.0, 1.0-digits );
	delta = max( 10000000*guess, 10000000 );  // Arbitrarily large delta...
	f0Last = 0;
	delta1 = delta;
	delta2 = delta;

	count = maxIter;
	do {
		f0Last = f0;
		delta2 = delta1;
		delta1 = delta;
		res = fun( result);
		f0 = res[ 0 ];
		f1 = res[ 1 ];
		f2 = res[ 2 ];
		count -= 1;

		if ( f0 === 0.0 ) {
			break;
		}
		if ( f1 === 0.0 ) {
			// Oops zero derivative!!!
			if ( f0Last === 0.0 ) {
				// Must be the first iteration, pretend that we had a previous one at either min or max:
				if ( result === minimum ) {
					guess = maximum;
				} else {
					guess = minimum;
				}
				f0Last = fun( guess );
				delta = guess - result;
			}
			if ( sign( f0Last ) * sign( f0 ) < 0 ) {
				// We've crossed over so move in opposite direction to last step:
				if ( delta < 0 ) {
					delta = ( result-minimum ) / 2.0;
				} else {
					delta = ( result-maximum ) / 2.0;
				}
			// Move in same direction as last step:
			} else if ( delta < 0 ) {
				delta = (result-maximum) / 2.0;
			} else {
				delta = (result-minimum) / 2.0;
			}
		} else if ( f2 === 0.0 ) {
			delta = f0 / f1;
		} else {
			denom = 2.0 * f0;
			num = ( 2.0 * f1 ) - ( f0 * ( f2 / f1 ) );
			if ( abs(num) < 1.0 && ( abs(denom) >= abs(num) * MAX_VALUE ) ) {
				// Possible overflow, use Newton step:
				delta = f0 / f1;
			} else {
				delta = denom / num;
			}
			if ( delta * f1 / f0 < 0.0 ) {
				// Probably cancellation error, try a Newton step instead:
				delta = f0 / f1;
				if ( abs(delta) > 2.0 * abs(guess) ) {
					delta = ( delta < 0.0 ? -1.0 : 1.0 ) * 2.0 * abs( guess );
				}
			}
		}
		convergence = abs( delta / delta2 );
		if ( convergence > 0.8 && convergence < 2.0 ) {
			// Last two steps haven't converged, try bisection:
			delta = delta > 0.0 ? ( result-minimum )/2.0 : ( result-maximum )/2.0; // eslint-disable-line max-len
			if ( abs(delta) > result ) {
				delta = sign( delta ) * result; // Protect against huge jumps!
			}
			// Reset delta2 so that this branch will *not* be taken on the next iteration:
			delta2 = delta * 3.0;
		}
		guess = result;
		result -= delta;

		// Check for out of bounds step:
		if ( result < minimum ) {
			if (
				abs(minimum) < 1 &&
				abs(result) > 1 &&
				( MAX_VALUE / abs(result) < abs(minimum) )
			) {
				diff = 1000.0;
			} else {
				diff = result / minimum;
			}
			if ( abs(diff) < 1.0 ) {
				diff = 1.0 / diff;
			}
			if ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {
				// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:
				delta = 0.99 * (guess - minimum);
				result = guess - delta;
				outOfBounds = true; // Only take this branch once!
			} else {
				delta = (guess - minimum) / 2.0;
				result = guess - delta;
				if ( result === minimum || result === maximum ) {
					break;
				}
			}
		} else if ( result > maximum ) {
			if (
				abs(maximum) < 1.0 &&
				abs(result) > 1.0 &&
				MAX_VALUE / abs(result) < abs(maximum)
			) {
				diff = 1000.0;
			} else {
				diff = result / maximum;
			}
			if ( abs(diff) < 1.0 ) {
				diff = 1.0 / diff;
			}
			if ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {
				// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:
				delta = 0.99 * (guess - maximum);
				result = guess - delta;
				outOfBounds = true; // Only take this branch once!
			} else {
				delta = ( guess - maximum ) / 2.0;
				result = guess - delta;
				if ( result === minimum || result === maximum ) {
					break;
				}
			}
		}
		// Update brackets:
		if ( delta > 0.0 ) {
			maximum = guess;
		} else {
			minimum = guess;
		}
	} while ( count && ( abs(result * factor) < abs(delta) ) );

	return result;
}


// EXPORTS //

module.exports = halleyIterate;

},{"@stdlib/constants/math/float64-max":91,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ldexp":1676,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/signum":1804}],1628:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var kernelBetainc = require( '@stdlib/math/base/special/kernel-betainc' );
var abs = require( '@stdlib/math/base/special/abs' );
var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
var FLOAT64_MIN_NORM = require( '@stdlib/constants/math/float64-smallest-normal' );


// VARIABLES //

var out = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a root finding function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} target - probability value
* @param {boolean} invert - boolean indicating whether to find the roots of the upper or lower incomplete beta function
* @returns {Function} root finding function
*/
function ibetaRoots( a, b, target, invert ) {
	return roots;

	/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - input value
	* @returns {Array} roots
	*/
	function roots( x ) {
		var f1;
		var f2;
		var f;
		var y;

		y = 1.0 - x;
		out = kernelBetainc( out, x, a, b, invert, true );
		f = out[ 0 ] - target;
		f1 = out[ 1 ];
		if ( invert ) {
			f1 = -f1;
		}
		if ( y === 0.0 ) {
			y = FLOAT64_MIN_NORM * 64.0;
		}
		if ( x === 0.0 ) {
			x = FLOAT64_MIN_NORM * 64.0;
		}
		f2 = f1 * ( -(y*a) + ( ( b-2.0 ) * x ) + 1.0 );
		if ( abs( f2 ) < y * x * FLOAT64_MAX ) {
			f2 /= (y * x);
		}
		if ( invert ) {
			f2 = -f2;
		}
		// Make sure we don't have a zero derivative:
		if ( f1 === 0.0 ) {
			f1 = (invert ? -1.0 : 1.0) * FLOAT64_MIN_NORM * 64.0;
		}
		return [ f, f1, f2 ];
	}
}


// EXPORTS //

module.exports = ibetaRoots;

},{"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/kernel-betainc":1621}],1629:[function(require,module,exports){
'use strict';

/**
* Evaluate the inverse of the incomplete beta function.
*
* @module @stdlib/math/base/special/kernel-betaincinv
*
* @example
* var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );
*
* var y = kernelBetaincinv( 3.0, 3.0, 0.2, 0.8 );
* // returns [ ~0.327, ~0.673 ]
*
* y = kernelBetaincinv( 3.0, 3.0, 0.4, 0.6 );
* // returns [ ~0.446, ~0.554 ]
*
* y = kernelBetaincinv( 1.0, 6.0, 0.4, 0.6 );
* // returns [ ~0.082, ~0.918 ]
*
* y = kernelBetaincinv( 1.0, 6.0, 0.8, 0.2 );
* // returns [ ~0.235, ~0.765 ]
*/

// MODULES //

var kernelBetaincinv = require( './kernel_betaincinv.js' );


// EXPORTS //

module.exports = kernelBetaincinv;

},{"./kernel_betaincinv.js":1634}],1630:[function(require,module,exports){
/* eslint-disable max-len */
'use strict';

// MODULES //

var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var round = require( '@stdlib/math/base/special/round' );
var acos = require( '@stdlib/math/base/special/acos' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var cos = require( '@stdlib/math/base/special/cos' );
var pow = require( '@stdlib/math/base/special/pow' );
var sin = require( '@stdlib/math/base/special/sin' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var inverseStudentsTBodySeries = require( './inverse_students_t_body_series.js' );
var inverseStudentsTTailSeries = require( './inverse_students_t_tail_series.js' );
var inverseStudentsTHill = require( './inverse_students_t_hill.js' );


// VARIABLES //

var DF_THRESHOLD = 0x10000000; // 2^28
var ONE_THIRD = 1.0 / 3.0;
var EXP = ( 2.0 * 53.0 ) / 3.0;
var C = 0.85498797333834849467655443627193;


// MAIN //

/**
* Evaluates Student's t quantiles.
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @param {Probability} v - probability equal to `1-u`
*@returns {number} function value
*/
function inverseStudentsT( df, u, v ) {
	var crossover;
	var tolerance;
	var rootAlpha;
	var invert;
	var result;
	var alpha;
	var tmp;
	var p0;
	var p2;
	var p4;
	var p5;
	var p;
	var r;
	var x;
	var a;
	var b;

	result = 0;
	if ( u > v ) {
		// Function is symmetric, so invert it:
		tmp = v;
		v = u;
		u = tmp;
		invert = true;
	} else {
		invert = false;
	}
	if ( floor(df) === df && df < 20 ) {
		// We have integer degrees of freedom, try for the special cases first:
		tolerance = ldexp( 1.0, EXP );

		switch ( floor( df ) ) {
		case 1:
			// `df = 1` is the same as the Cauchy distribution, see Shaw Eq 35:
			if ( u === 0.5 ) {
				result = 0.0;
			} else {
				result = -cos( PI * u ) / sin( PI * u );
			}
			break;
		case 2:
			// `df = 2` has an exact result, see Shaw Eq 36:
			result = ( (2.0*u) - 1.0 ) / sqrt( 2.0 * u * v );
			break;
		case 4:
			// `df = 4` has an exact result, see Shaw Eq 38 & 39:
			alpha = 4.0 * u * v;
			rootAlpha = sqrt( alpha );
			r = 4 * cos( acos( rootAlpha ) / 3.0 ) / rootAlpha;
			x = sqrt( r - 4.0 );
			result = ( u - 0.5 < 0.0 ) ? -x : x;
			break;
		case 6:
			// We get numeric overflow in this area:
			if ( u < 1.0e-150 ) {
				return ( invert ? -1 : 1 ) * inverseStudentsTHill( df, u );
			}
			// Newton-Raphson iteration of a polynomial case, choice of seed value is taken from Shaw's online supplement:
			a = 4.0 * ( u - (u*u) );// 1 - 4 * (u - 0.5f) * (u - 0.5f);
			b = pow( a, ONE_THIRD );
			p = 6.0 * ( 1.0 + ( C * ( (1.0/b) - 1.0 ) ) );
			do {
				p2 = p * p;
				p4 = p2 * p2;
				p5 = p * p4;
				p0 = p;

				// Next term is given by Eq 41:
				p = 2.0 * ( (8.0*a*p5) - (270.0*p2) + 2187 ) /
					( 5.0 * ( (4.0*a*p4) - (216.0*p) - 243.0 ) );
			} while ( abs( (p - p0) / p ) > tolerance );

			// Use Eq 45 to extract the result:
			p = sqrt( p - df );
			result = ( u - 0.5 ) < 0.0 ? -p : p;
			break;
		default:
			if ( df > DF_THRESHOLD ) { // 2^28
				result = erfcinv( 2.0 * u ) * SQRT2;
			} else if ( df < 3 ) {
				// Use a roughly linear scheme to choose between Shaw's tail series and body series:
				crossover = 0.2742 - ( df * 0.0242143 );
				if ( u > crossover ) {
					result = inverseStudentsTBodySeries( df, u );
				} else {
					result = inverseStudentsTTailSeries( df, u );
				}
			} else {
				// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:
				crossover = ldexp( 1.0, round( df / -0.654 ) );
				if ( u > crossover ) {
					result = inverseStudentsTHill( df, u );
				} else {
					result = inverseStudentsTTailSeries( df, u );
				}
			}
		}
	} else if ( df > DF_THRESHOLD ) {
		result = -erfcinv( 2.0 * u ) * SQRT2;
	} else if ( df < 3 ) {
		// Use a roughly linear scheme to choose between Shaw's tail series and body series:
		crossover = 0.2742 - ( df * 0.0242143 );
		if ( u > crossover ) {
			result = inverseStudentsTBodySeries( df, u );
		} else {
			result = inverseStudentsTTailSeries( df, u );
		}
	} else {
		// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:
		crossover = ldexp( 1.0, round( df / -0.654 ) );
		if ( u > crossover ) {
			result = inverseStudentsTHill( df, u );
		} else {
			result = inverseStudentsTTailSeries( df, u );
		}
	}
	return invert ? -result : result;
}


// EXPORTS //

module.exports = inverseStudentsT;

},{"./inverse_students_t_body_series.js":1631,"./inverse_students_t_hill.js":1632,"./inverse_students_t_tail_series.js":1633,"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/acos":1302,"@stdlib/math/base/special/cos":1396,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ldexp":1676,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/sin":1806,"@stdlib/math/base/special/sqrt":1826}],1631:[function(require,module,exports){
/* eslint-disable max-len, no-mixed-operators */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var polyval1 = require( './polyval_co14.js' );
var polyval2 = require( './polyval_co15.js' );
var polyval3 = require( './polyval_co16.js' );
var polyval4 = require( './polyval_co17.js' );
var polyval5 = require( './polyval_co18.js' );
var polyval6 = require( './polyval_co19.js' );
var polyval7 = require( './polyval_co20.js' );
var polyval8 = require( './polyval_co21.js' );
var polyval9 = require( './polyval_co22.js' );


// VARIABLES //

var c0 = 0.0;

// Workspace for the polynomial coefficients:
var c = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates Student's t quantiles via a body series expansion. Tail and body series are due to Shaw.
*
* ## References
*
* -   Shaw, William T. 2006. "Sampling Student's T distribution – use of the inverse cumulative distribution function." *Journal of Computational Finance* 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTBodySeries( df, u ) {
	var idf;
	var v;

	// Body series for small N, start with Eq 56 of Shaw:
	v = gammaDeltaRatio( df/2, 0.5 ) * sqrt( df*PI ) * ( u-0.5 );

	// Figure out what the coefficients are. They depend only on the degrees of freedom (Eq 57 of Shaw):
	idf = 1.0 / df;
	c[ 1 ] = polyval1( idf );
	c[ 2 ] = polyval2( idf );
	c[ 3 ] = polyval3( idf );
	c[ 4 ] = polyval4( idf );
	c[ 5 ] = polyval5( idf );
	c[ 6 ] = polyval6( idf );
	c[ 7 ] = polyval7( idf );
	c[ 8 ] = polyval8( idf );
	c[ 9 ] = polyval9( idf );

	// Result is then an odd polynomial in v (see Eq 56 of Shaw)...
	return c0 + ( v*evalpoly( c, v*v ) );
}


// EXPORTS //

module.exports = inverseStudentsTBodySeries;

},{"./polyval_co14.js":1641,"./polyval_co15.js":1642,"./polyval_co16.js":1643,"./polyval_co17.js":1644,"./polyval_co18.js":1645,"./polyval_co19.js":1646,"./polyval_co20.js":1648,"./polyval_co21.js":1649,"./polyval_co22.js":1650,"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/special/gamma-delta-ratio":1517,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/tools/evalpoly":1869}],1632:[function(require,module,exports){
/* eslint-disable no-mixed-operators */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );


// MAIN //

/**
* Evaluates Student's t quantiles via a method due to Hill.
*
* ## References
*
* -   Hill, G. W. 1970. "Algorithm 396: Student's T-Quantiles." *Communications of the ACM* 13 (10). New York, NY, USA: ACM: 619–20. doi:[10.1145/355598.355600](https://doi.org/10.1145/355598.355600).
*
* @private
* @param {PositiveNumber} ndf - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTHill( ndf, u ) {
	var a;
	var b;
	var c;
	var d;
	var q;
	var x;
	var y;

	if ( ndf > 1e20 ) {
		return -erfcinv( 2 * u ) * SQRT2;
	}
	a = 1.0 / ( ndf - 0.5 );
	b = 48.0 / (a * a);
	c = ( ( ( ( (20700.0*a/b) - 98.0 ) * a ) - 16.0 ) * a ) + 96.36;
	d = ( ( ( (94.5/(b+c)) - 3.0 ) / b ) + 1.0 ) * sqrt( a * HALF_PI ) * ndf;
	y = pow( d * 2.0 * u, 2.0 / ndf );

	if ( y > ( 0.05 + a ) ) {
		// Asymptotic inverse expansion about normal:
		x = -erfcinv( 2.0 * u ) * SQRT2;
		y = x * x;

		if ( ndf < 5.0 ) {
			c += 0.3 * ( ndf-4.5 ) * ( x + 0.6 );
		}
		c += ( ( ( ( ( ( (0.05*d*x)-5.0 ) * x ) - 7.0 ) * x )- 2.0 ) * x ) + b;
		y = ((((((0.4*y+6.3)*y)+36.0) * y + 94.5) / c - y - 3.0) / b + 1.0) * x;
		y = expm1( a * y * y );
	} else {
		y = ((1.0 / ( ( (ndf+6.0) / (ndf*y) - 0.089 * d - 0.822 ) *
		(ndf+2.0) * 3.0 ) + 0.5 / (ndf+4.0)) * y - 1.0) *
		(ndf+1.0) / (ndf+2.0) + 1.0 / y;
	}
	q = sqrt( ndf * y );
	return -q;
}


// EXPORTS //

module.exports = inverseStudentsTHill;

},{"@stdlib/constants/math/float64-half-pi":76,"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826}],1633:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// VARIABLES //

// Array for the coefficients d(k), these depend only on the number of degrees of freedom df, so at least in theory we could tabulate these for fixed df, see p15 of Shaw:
var d = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates Student's t quantiles via a tail series expansion. Tail and body series are due to Shaw.
*
* ## References
*
* -   Shaw, William T. 2006. "Sampling Student's T distribution – use of the inverse cumulative distribution function." *Journal of Computational Finance* 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).
*
* @private
* @param {number} df - degrees of freedom
* @param {number} v - function value
* @returns {number} tail value
*/
function inverseStudentsTTailSeries( df, v ) { // eslint-disable-line id-length
	var result;
	var power;
	var div;
	var np2;
	var np4;
	var np6;
	var rn;
	var w;

	// Tail series expansion, see section 6 of Shaw's paper. `w` is calculated using Eq 60:
	w = gammaDeltaRatio( df/2.0, 0.5 ) * sqrt( df*PI ) * v;

	// Define some variables:
	np2 = df + 2.0;
	np4 = df + 4.0;
	np6 = df + 6.0;

	d[ 0 ] = 1.0;
	d[ 1 ] = -(df+1.0) / (2.0*np2);
	np2 *= (df + 2.0);
	d[ 2 ] = -df * (df+1.0) * (df+3.0) / (8.0*np2*np4);
	np2 *= df + 2.0;
	d[ 3 ] = -df * (df+1.0) * (df+5.0) * (((3.0*df) + 7.0) * df - 2.0) / (48.0*np2*np4*np6); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	np4 *= (df + 4.0);
	d[ 4 ] = -df * (df+1.0) * (df+7.0) * ( (((((15.0*df) + 154.0) * df + 465.0) * df + 286.0) * df - 336.0) * df + 64.0) / (384.0*np2*np4*np6*(df+8.0)); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	d[ 5 ] = -df * (df+1.0) * (df+3.0) * (df+9.0) * (((((((35.0 * df + 452.0) * df+1573.0) * df + 600.0) * df - 2020.0) * df) + 928.0) * df - 128.0) / (1280.0*np2*np4*np6*(df+8.0) * (df+10.0)); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	np4 *= (df + 4.0);
	np6 *= (df + 6.0);
	d[ 6 ] = -df * (df+1.0) * (df+11.0) * ((((((((((((945.0*df) + 31506.0) * df + 425858.0) * df + 2980236.0) * df + 11266745.0) * df + 20675018.0) * df + 7747124.0) * df - 22574632.0) * df - 8565600.0) * df + 18108416.0) * df - 7099392.0) * df + 884736.0) / (46080.0*np2*np4*np6*(df+8.0) * (df+10.0) * (df+12.0)); // eslint-disable-line max-len, no-mixed-operators

	// Now bring everything together to provide the result this is Eq 62 of Shaw:
	rn = sqrt( df );
	div = pow( rn*w, 1.0/df );
	power = div * div;
	result = evalpoly( d, power );
	result *= rn;
	result /= div;
	return -result;
}


// EXPORTS //

module.exports = inverseStudentsTTailSeries;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/special/gamma-delta-ratio":1517,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/tools/evalpoly":1869}],1634:[function(require,module,exports){
/* eslint-disable max-statements */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var betainc = require( '@stdlib/math/base/special/betainc' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var asin = require( '@stdlib/math/base/special/asin' );
var beta = require( '@stdlib/math/base/special/beta' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var sin = require( '@stdlib/math/base/special/sin' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var ln = require( '@stdlib/math/base/special/ln' );
var FLOAT64_MIN_NORM = require( '@stdlib/constants/math/float64-smallest-normal' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
var EPSILON = require( '@stdlib/constants/math/float64-eps' );
var findIBetaInvFromTDist = require( './find_ibeta_inv_from_t_dist.js' );
var temme1 = require( './temme1.js' );
var temme2 = require( './temme2.js' );
var temme3 = require( './temme3.js' );
var halleyIterate = require( './halley_iterate.js' );
var ibetaRoots = require( './ibeta_roots.js' );


// VARIABLES //

var DIGITS = 32;
var MAX_ITERATIONS = 1000;

// Workspace for the polynomial coefficients:
var terms = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Calculates the inverse of the incomplete beta function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1 - p`
* @returns {Array} two-element array holding function value `y` and `1-y`
*/
function ibetaInvImp( a, b, p, q ) {
	var digits;
	var invert;
	var lambda;
	var lower;
	var theta;
	var upper;
	var roots;
	var maxv;
	var minv;
	var bet;
	var ppa;
	var tmp;
	var xs2;
	var ap1;
	var bm1;
	var fs;
	var lx;
	var ps;
	var xg;
	var xs;
	var yp;
	var a2;
	var a3;
	var b2;
	var r;
	var l;
	var u;
	var x;
	var y;

	// The flag invert is set to true if we swap a for b and p for q, in which case the result has to be subtracted from 1:
	invert = false;

	// Handle trivial cases first...
	if ( q === 0.0 ) {
		return [ 1.0, 0.0 ];
	}
	else if ( p === 0.0 ) {
		return [ 0.0, 1.0 ];
	}
	else if ( a === 1.0 ) {
		if ( b === 1.0 ) {
			return [ p, 1.0-p ];
		}
		// Change things around so we can handle as b == 1 special case below:
		tmp = b;
		b = a;
		a = tmp;

		tmp = q;
		q = p;
		p = tmp;

		invert = true;
	}
	// Depending upon which approximation method we use, we may end up calculating either x or y initially (where y = 1-x):
	x = 0.0; // Set to a safe zero to avoid a

	// For some of the methods we can put tighter bounds on the result than simply [0,1]:
	lower = 0.0;
	upper = 1.0;

	// Student's T with b = 0.5 gets handled as a special case, swap around if the arguments are in the "wrong" order:
	if ( a === 0.5 ) {
		if ( b === 0.5 ) {
			x = sin( p*HALF_PI );
			x *= x;
			y = sin( q*HALF_PI );
			y *= y;
			return [ x, y ];
		}
		else if ( b > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
		}
	}
	// Select calculation method for the initial estimate:
	if ( b === 0.5 && a >= 0.5 && p !== 1.0 ) {
		// We have a Student's T distribution:
		yp = {};
		x = findIBetaInvFromTDist( a, p, yp );
		y = yp.value;
	}
	else if ( b === 1.0 ) {
		if ( p < q ) {
			if ( a > 1.0 ) {
				x = pow( p, 1.0/a );
				y = -expm1( ln(p) / a );
			} else {
				x = pow( p, 1.0/a );
				y = 1.0 - x;
			}
		} else {
			x = exp( log1p(-q) / a );
			y = -expm1( log1p(-q) / a );
		}
		if ( invert ) {
			tmp = y;
			y = x;
			x = tmp;
		}
		return [ x, y ];
	}
	else if ( a+b > 5.0 ) {
		// When a+b is large then we can use one of Prof Temme's asymptotic expansions, begin by swapping things around so that p < 0.5, we do this to avoid cancellations errors when p is large.
		if ( p > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
		}
		minv = min( a, b );
		maxv = max( a, b );
		if ( ( sqrt(minv) > (maxv-minv) ) && minv > 5.0 ) {
			// When a and b differ by a small amount the curve is quite symmetrical and we can use an error function to approximate the inverse. This is the cheapest of the three Temme expansions, and the calculated value for x will never be much larger than p, so we don't have to worry about cancellation as long as p is small.
			x = temme1( a, b, p );
			y = 1.0 - x;
		} else {
			r = a + b;
			theta = asin( sqrt( a/r ) );
			lambda = minv / r;
			if (
				lambda >= 0.2 &&
				lambda <= 0.8 &&
				r >= 10
			) {
				// The second error function case is the next cheapest to use, it breaks down when the result is likely to be very small, if `a+b` is also small, but we can use a cheaper expansion there in any case. As before `x` won't be much larger than `p`, so as long as `p` is small we should be free of cancellation error.
				ppa = pow( p, 1.0/a );
				if ( ppa < 0.0025 && ( a+b ) < 200.0 ) {
					x = ppa * pow( a*beta( a, b ), 1.0/a );
				} else {
					x = temme2( p, r, theta );
				}
				y = 1.0 - x;
			} else {
				// If we get here then a and b are very different in magnitude and we need to use the third of Temme's methods which involves inverting the incomplete gamma.  This is much more expensive than the other methods.  We also can only use this method when a > b, which can lead to cancellation errors if we really want y (as we will when x is close to 1), so a different expansion is used in that case.
				if ( a < b ) {
					tmp = b;
					b = a;
					a = tmp;

					tmp = q;
					q = p;
					p = tmp;
					invert = !invert;
				}
				// Try and compute the easy way first:
				bet = 0.0;
				if ( b < 2.0 ) {
					bet = beta( a, b );
				}
				if ( bet === 0.0 ) {
					y = 1.0;
				} else {
					y = pow( b*q*bet, 1.0/b );
					x = 1.0 - y;
				}
			}
			if ( y > 1.0e-5 ) {
				x = temme3( a, b, p, q );
				y = 1.0 - x;
			}
		}
	}
	else if ( a < 1.0 && b < 1.0 ) {
		// Both a and b less than 1, there is a point of inflection at xs:
		xs = ( 1.0-a ) / ( 2.0-a-b );

		// Now we need to ensure that we start our iteration from the right side of the inflection point:
		fs = betainc( xs, a, b ) - p;
		if ( abs(fs)/p < EPSILON*3.0 ) {
			// The result is at the point of inflection, best just return it:
			if ( invert ) {
				return [ 1.0-xs, xs ];
			}
			return [ xs, 1.0-xs ];
		}
		if ( fs < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
			xs = 1.0 - xs;
		}
		xg = pow( a*p*beta( a, b ), 1.0/a );
		x = xg / ( 1.0+xg );
		y = 1.0 / ( 1.0+xg );

		// And finally we know that our result is below the inflection point, so set an upper limit on our search:
		if ( x > xs ) {
			x = xs;
		}
		upper = xs;
	}
	else if ( a > 1.0 && b > 1.0 ) {
		// Small a and b, both greater than 1, there is a point of inflection at xs, and it's complement is xs2, we must always start our iteration from the right side of the point of inflection.
		xs = ( a-1.0 ) / ( a+b-2.0 );
		xs2 = ( b-1.0 ) / ( a+b-2.0 );
		ps = betainc( xs, a, b ) - p;

		if ( ps < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			tmp = xs2;
			xs2 = xs;
			xs = tmp;

			invert = !invert;
		}
		// Estimate x and y, using expm1 to get a good estimate for y when it's very small:
		lx = ln( p*a*beta( a, b ) ) / a;
		x = exp( lx );
		y = ( x < 0.9 ) ? 1.0-x : -expm1(lx);

		if ( b < a && x < 0.2 ) {
			// Under a limited range of circumstances we can improve our estimate for x...
			ap1 = a - 1.0;
			bm1 = b - 1.0;
			a2 = a * a;
			a3 = a * a2;
			b2 = b * b;
			terms[ 0 ] = 0.0;
			terms[ 1 ] = 1.0;
			terms[ 2 ] = bm1 / ap1;
			ap1 *= ap1;
			terms[ 3 ] = bm1 * (3.0*a*b + 5.0*b + a2 - a - 4.0) / (2.0 * (a+2.0) * ap1); // eslint-disable-line max-len, no-mixed-operators
			ap1 *= (a + 1.0);
			terms[ 4 ] = bm1 * (33.0*a*b2 + 31.0*b2 + 8.0*a2*b2 - 30.0*a*b - 47.0*b + 11.0*a2*b + 6.0*a3*b + 18.0 + 4.0*a - a3 + a2*a2 - 10.0*a2); // eslint-disable-line max-len, no-mixed-operators
			terms[ 4 ] /= (3.0 * (a+3.0) * (a+2.0) * ap1);
			x = evalpoly( terms, x );
		}
		// Know that result is below the inflection point, so set an upper limit on search...
		if ( x > xs ) {
			x = xs;
		}
		upper = xs;
	} else {
		// Case: ( a <= 1 ) != ( b <= 1 ). If all else fails we get here, only one of a and b is above 1, and a+b is small.  Start by swapping things around so that we have a concave curve with b > a and no points of inflection in [0,1].  As long as we expect x to be small then we can use the simple (and cheap) power term to estimate x, but when we expect x to be large then this greatly underestimates x and leaves us trying to iterate "round the corner" which may take almost forever. We could use Temme's inverse gamma function case in that case, this works really rather well (albeit expensively) even though strictly speaking we're outside it's defined range. However it's expensive to compute, and an alternative approach which models the curve as a distorted quarter circle is much cheaper to compute, and still keeps the number of iterations required down to a reasonable level. With thanks to Prof. Temme for this suggestion.
		if ( b < a ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;
			invert = !invert;
		}
		if ( pow( p, 1.0/a ) < 0.5 ) {
			x = pow( p*a*beta( a, b ), 1.0/a );
			if ( x === 0.0 ) {
				x = FLOAT64_MIN_NORM;
			}
			y = 1.0 - x;
		}
		// Case: pow(q, 1/b) < 0.1
		else {
			// Model a distorted quarter circle:
			y = pow( 1.0-pow( p, b*beta( a, b ) ), 1.0/b );
			if ( y === 0 ) {
				y = FLOAT64_MIN_NORM;
			}
			x = 1.0 - y;
		}
	}
	// Now we have a guess for x (and for y) we can set things up for iteration.  If x > 0.5 it pays to swap things round:
	if ( x > 0.5 ) {
		tmp = b;
		b = a;
		a = tmp;

		tmp = q;
		q = p;
		p = tmp;

		tmp = y;
		y = x;
		x = tmp;

		invert = !invert;
		l = 1.0 - upper;
		u = 1.0 - lower;
		lower = l;
		upper = u;
	}
	// Lower bound for our search:  We're not interested in denormalized answers as these tend to take up lots of iterations, given that we can't get accurate derivatives in this area (they tend to be infinite).
	if ( lower === 0 ) {
		if ( invert ) {
			// We're not interested in answers smaller than machine epsilon:
			lower = EPSILON;
			if ( x < lower ) {
				x = lower;
			}
		} else {
			lower = FLOAT64_MIN_NORM;
		}
		if ( x < lower ) {
			x = lower;
		}
	}
	// Figure out how many digits to iterate towards:
	digits = DIGITS;
	if ( x < 1.0e-50 && ( a < 1.0 || b < 1.0 ) ) {
		// If we're in a region where the first derivative is very large, then we have to take care that the root-finder doesn't terminate prematurely.  We'll bump the precision up to avoid this, but we have to take care not to set the precision too high or the last few iterations will just thrash around and convergence may be slow in this case. Try 3/4 of machine epsilon:
		digits *= 3;
		digits /= 2;
	}
	// Now iterate, we can use either p or q as the target here depending on which is smaller:
	roots = ibetaRoots( a, b, ( (p < q) ? p : q ), p >= q );
	x = halleyIterate( roots, x, lower, upper, digits, MAX_ITERATIONS );

	// Tidy up, if we "lower" was too high then zero is the best answer we have:
	if ( x === lower ) {
		x = 0.0;
	}
	if ( invert ) {
		return [ 1.0-x, x ];
	}
	return [ x, 1.0-x ];
}


// EXPORTS //

module.exports= ibetaInvImp;

},{"./find_ibeta_inv_from_t_dist.js":1626,"./halley_iterate.js":1627,"./ibeta_roots.js":1628,"./temme1.js":1659,"./temme2.js":1660,"./temme3.js":1661,"@stdlib/constants/math/float64-eps":70,"@stdlib/constants/math/float64-half-pi":76,"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/beta":1360,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sin":1806,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/tools/evalpoly":1869}],1635:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var sign = require( '@stdlib/math/base/special/signum' );
var abs = require( '@stdlib/math/base/special/abs' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var MAX_VALUE = require( '@stdlib/constants/math/float64-max' );


// MAIN //

/**
* Performs root finding via second order Newton-Raphson iteration.
*
* @private
* @param {Array} fun - two-element array of the function and its first derivative
* @param {number} guess - initial starting value.
* @param {number} min - minimum possible value for the result,used as initial lower bracket.
* @param {number} max - maximum possible value for the result, used as initial upper bracket.
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/
function newtonRaphsonIterate( fun, guess, min, max, digits, maxIter ) {
	var f0last;
	var delta1;
	var delta2;
	var factor;
	var result;
	var count;
	var delta;
	var res;
	var f0;
	var f1;

	f0 = 0.0;
	f0last = 0.0;
	result = guess;

	factor = ldexp( 1.0, 1.0 - digits );
	delta = MAX_VALUE;
	delta1 = MAX_VALUE;
	delta2 = MAX_VALUE;

	count = maxIter;
	do {
		f0last = f0;
		delta2 = delta1;
		delta1 = delta;
		res = fun(result);
		f0 = res[ 0 ];
		f1 = res[ 1 ];
		count -= 1;
		if ( f0 === 0.0 ) {
			break;
		}
		if ( f1 === 0.0 ) {
			// Oops zero derivative!!!
			if ( f0last === 0.0 ) {
				// Must be the first iteration, pretend that we had a previous one at either min or max:
				if ( result === min ) {
					guess = max;
				} else {
					guess = min;
				}
				f0last = fun( guess );
				delta = guess - result;
			}
			if ( sign(f0last) * sign(f0) < 0 ) {
				// We've crossed over so move in opposite direction to last step:
				if ( delta < 0 ) {
					delta = (result - min) / 2.0;
				} else {
					delta = (result - max) / 2.0;
				}
			} else if ( delta < 0 ) {
				delta = (result - max) / 2.0;
			} else {
				delta = (result - min) / 2.0;
			}
		} else {
			delta = f0 / f1;
		}
		if ( abs(delta * 2.0) > abs(delta2) ) {
			// Last two steps haven't converged, try bisection:
			delta = delta > 0.0 ? (result - min) / 2.0 : (result - max) / 2.0;
		}
		guess = result;
		result -= delta;
		if ( result <= min ) {
			delta = 0.5 * (guess - min);
			result = guess - delta;
			if ( result === min || result === max ) {
				break;
			}
		} else if ( result >= max ) {
			delta = 0.5 * (guess - max);
			result = guess - delta;
			if ( result === min || result === max ) {
				break;
			}
		}
		// Update brackets:
		if ( delta > 0.0 ) {
			max = guess;
		} else {
			min = guess;
		}
	}
	while ( count && ( abs(result * factor) < abs(delta) ) );

	return result;
}


// EXPORTS //

module.exports = newtonRaphsonIterate;

},{"@stdlib/constants/math/float64-max":91,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/ldexp":1676,"@stdlib/math/base/special/signum":1804}],1636:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -1.0;
	}
	return -1.0 + (x * (-5.0 + (x * 5.0))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1637:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 63149.0;
	}
	return 63149.0 + (x * (-151557.0 + (x * (140052.0 + (x * (-727469.0 + (x * (2239932.0 + (x * (-2251437.0 + (x * 750479.0))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1638:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 29233.0;
	}
	return 29233.0 + (x * (-78755.0 + (x * (105222.0 + (x * (146879.0 + (x * (-1602610.0 + (x * (3195183.0 + (x * (-2554139.0 + (x * 729754.0))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1639:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (-13.0 + (x * 13.0))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1640:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1641:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666666;
	}
	return 0.16666666666666666 + (x * 0.16666666666666666); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1642:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.058333333333333334;
	}
	return 0.058333333333333334 + (x * (0.06666666666666667 + (x * 0.008333333333333333))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1643:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0251984126984127;
	}
	return 0.0251984126984127 + (x * (0.026785714285714284 + (x * (0.0017857142857142857 + (x * 0.0001984126984126984))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1644:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.012039792768959435;
	}
	return 0.012039792768959435 + (x * (0.010559964726631394 + (x * (-0.0011078042328042327 + (x * (0.0003747795414462081 + (x * 0.0000027557319223985893))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1645:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.003837005972422639;
	}
	return 0.003837005972422639 + (x * (0.00610392115600449 + (x * (-0.0016095979637646305 + (x * (0.0005945867404200738 + (x * (-0.00006270542728876062 + (x * 2.505210838544172e-8))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1646:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0032177478835464946;
	}
	return 0.0032177478835464946 + (x * (0.0010898206731540065 + (x * (-0.0012579159844784845 + (x * (0.0006908420797309686 + (x * (-0.00016376804137220805 + (x * (0.0000154012654012654 + (x * 1.6059043836821613e-10))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1647:[function(require,module,exports){
arguments[4][1640][0].apply(exports,arguments)
},{"dup":1640}],1648:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.001743826229834001;
	}
	return 0.001743826229834001 + (x * (0.00003353097688001788 + (x * (-0.0007624513544032393 + (x * (0.0006451304695145635 + (x * (-0.000249472580470431 + (x * (0.000049255746366361444 + (x * (-0.0000039851014346715405 + (x * 7.647163731819816e-13))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1649:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0009647274732138864;
	}
	return 0.0009647274732138864 + (x * (-0.0003110108632631878 + (x * (-0.00036307660358786886 + (x * (0.0005140660578834113 + (x * (-0.00029133414466938067 + (x * (0.00009086710793521991 + (x * (-0.000015303004486655377 + (x * (0.0000010914179173496788 + (x * 2.8114572543455206e-15))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1650:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0005422926281312969;
	}
	return 0.0005422926281312969 + (x * (-0.0003694266780000966 + (x * (-0.00010230378073700413 + (x * (0.00035764655430568635 + (x * (-0.00028690924218514614 + (x * (0.00012645437628698076 + (x * (-0.000033202652391372056 + (x * (0.000004890304529197534 + (x * (-3.123956959982987e-7 + (x * 8.22063524662433e-18))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1651:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 7.0;
	}
	return 7.0 + (x * (-2.0 + (x * (33.0 + (x * (-62.0 + (x * 31.0))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1652:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 25.0;
	}
	return 25.0 + (x * (-52.0 + (x * (-17.0 + (x * (88.0 + (x * (-115.0 + (x * 46.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1653:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 7.0;
	}
	return 7.0 + (x * (12.0 + (x * (-78.0 + (x * 52.0))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1654:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -7.0;
	}
	return -7.0 + (x * (2.0 + (x * (183.0 + (x * (-370.0 + (x * 185.0))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1655:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -533.0;
	}
	return -533.0 + (x * (776.0 + (x * (-1835.0 + (x * (10240.0 + (x * (-13525.0 + (x * 5410.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1656:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -1579.0;
	}
	return -1579.0 + (x * (3747.0 + (x * (-3372.0 + (x * (-15821.0 + (x * (45588.0 + (x * (-45213.0 + (x * 15071.0))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1657:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 449.0;
	}
	return 449.0 + (x * (-1259.0 + (x * (-769.0 + (x * (6686.0 + (x * (-9260.0 + (x * 3704.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1658:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var MAX_VALUE = require( '@stdlib/constants/math/float64-max' );


// VARIABLES //

var BIG = MAX_VALUE / 4.0;


// MAIN //

/**
* Helper function used by root finding code to convert `eta` to `x`.
*
* @private
* @param {number} t - first parameter
* @param {number} a - second parameter
* @returns {Function} root function
*/
function temmeRootFinder( t, a ) {
	return roots;

	/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - function value
	* @returns {Array} function roots
	*/
	function roots( x ) {
		var f1;
		var f;
		var y;

		y = 1.0 - x;
		if ( y === 0.0 ) {
			return [ -BIG, -BIG ];
		}
		if ( x === 0.0 ) {
			return [ -BIG, -BIG ];
		}
		f = ln( x ) + ( a * ln( y ) ) + t;
		f1 = ( 1.0 / x ) - ( a / y );
		return [ f, f1 ];
	}
}


// EXPORTS //

module.exports = temmeRootFinder;

},{"@stdlib/constants/math/float64-max":91,"@stdlib/math/base/special/ln":1679}],1659:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var exp = require( '@stdlib/math/base/special/exp' );
var r2 = require( '@stdlib/constants/math/float64-sqrt-two' );


// VARIABLES //

// Workspaces for the polynomial coefficients:
var workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
var terms = [ 0.0, 0.0, 0.0, 0.0 ];


// MAIN //

/**
* Carries out the first method by Temme (described in section 2).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." *Journal of Computational and Applied Mathematics* 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} z - function parameter
* @returns {number} function value
*/
function temme1( a, b, z ) {
	var eta0;
	var eta2;
	var eta;
	var B2;
	var B3;
	var B;
	var c;

	// Get the first approximation for eta from the inverse error function (Eq: 2.9 and 2.10):
	eta0 = erfcinv( 2.0 * z );
	eta0 /= -sqrt( a / 2.0 );

	terms[ 0 ] = eta0;

	// Calculate powers:
	B = b - a;
	B2 = B * B;
	B3 = B2 * B;

	// Calculate correction terms:

	// See eq following 2.15:
	workspace[ 0 ] = -B * r2 / 2;
	workspace[ 1 ] = ( 1 - (2.0*B) ) / 8.0;
	workspace[ 2 ] = -(B * r2 / 48.0);
	workspace[ 3 ] = -1.0 / 192.0;
	workspace[ 4 ] = -B * r2 / 3840.0;
	workspace[ 5 ] = 0.0;
	workspace[ 6 ] = 0.0;
	terms[ 1 ] = evalpoly( workspace, eta0 );

	// Eq Following 2.17:
	workspace[ 0 ] = B * r2 * ( (3.0*B) - 2.0) / 12.0;
	workspace[ 1 ] = ( (20.0*B2) - (12.0*B) + 1.0 ) / 128.0;
	workspace[ 2 ] = B * r2 * ( (20.0*B) - 1.0) / 960.0;
	workspace[ 3 ] = ( (16.0*B2) + (30.0*B) - 15.0) / 4608.0;
	workspace[ 4 ] = B * r2 * ( (21.0*B) + 32) / 53760.0;
	workspace[ 5 ] = (-(32.0*B2) + 63.0) / 368640.0;
	workspace[ 6 ] = -B * r2 * ( (120.0*B) + 17.0) / 25804480.0;
	terms[ 2 ] = evalpoly( workspace, eta0 );

	// Eq Following 2.17:
	workspace[ 0 ] = B * r2 * ( (-75*B2) + (80.0*B) - 16.0) / 480.0;
	workspace[ 1 ] = ( (-1080.0*B3) + (868.0*B2) - (90.0*B) - 45.0) / 9216.0;
	workspace[ 2 ] = B * r2 * ( (-1190.0*B2) + (84.0*B) + 373.0) / 53760.0;
	workspace[ 3 ] = ( (-2240.0*B3)-(2508.0*B2)+(2100.0*B)-165.0 ) / 368640.0;
	workspace[ 4 ] = 0.0;
	workspace[ 5 ] = 0.0;
	workspace[ 6 ] = 0.0;
	terms[ 3 ] = evalpoly( workspace, eta0 );

	// Bring them together to get a final estimate for eta:
	eta = evalpoly( terms, 1.0/a );

	// Now we need to convert eta to the return value `x`, by solving the appropriate quadratic equation:
	eta2 = eta * eta;
	c = -exp( -eta2 / 2.0 );
	if ( eta2 === 0.0 ) {
		return 0.5;
	}
	return ( 1.0 + ( eta * sqrt( ( 1.0+c ) / eta2 ) ) ) / 2.0;
}


// EXPORTS //

module.exports = temme1;

},{"@stdlib/constants/math/float64-sqrt-two":110,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/tools/evalpoly":1869}],1660:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ln = require( '@stdlib/math/base/special/ln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var sin = require( '@stdlib/math/base/special/sin' );
var cos = require( '@stdlib/math/base/special/cos' );
var temmeRootFinder = require( './root_finder.js');
var newtonRaphsonIterate = require( './newton_raphson.js' );
var polyval1 = require( './polyval_co1.js' );
var polyval2 = require( './polyval_co2.js' );
var polyval3 = require( './polyval_co3.js' );
var polyval4 = require( './polyval_co4.js' );
var polyval5 = require( './polyval_co5.js' );
var polyval6 = require( './polyval_co6.js' );
var polyval7 = require( './polyval_co7.js' );
var polyval8 = require( './polyval_co8.js' );
var polyval9 = require( './polyval_co9.js' );
var polyval10 = require( './polyval_co10.js' );
var polyval11 = require( './polyval_co11.js' );
var polyval12 = require( './polyval_co12.js' );
var polyval13 = require( './polyval_co13.js' );


// VARIABLES //

// Workspaces for polynomial coefficients:
var workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
var terms = [ 0.0, 0.0, 0.0, 0.0 ];


// MAIN //

/**
* Carries out the second method by Temme (described in section 3).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." *Journal of Computational and Applied Mathematics* 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {number} z - function parameter
* @param {number} r - function parameter
* @param {number} theta - function parameter
* @returns {number} function value
*/
function temme2( z, r, theta ) {
	var upper;
	var lower;
	var alpha;
	var roots;
	var eta0;
	var eta;
	var sc7;
	var sc6;
	var sc5;
	var sc4;
	var sc3;
	var sc2;
	var sc;
	var lu;
	var s2;
	var c2;
	var c;
	var s;
	var u;
	var x;

	// Get first estimate for eta, see Eq 3.9 and 3.10, but note there is a typo in Eq 3.10:
	eta0 = erfcinv( 2.0*z ) / (-sqrt( r/2.0 ));

	s = sin( theta );
	c = cos( theta );

	// Now we need to perturb eta0 to get eta, which we do by evaluating the polynomial in 1/r at the bottom of page 151, to do this we first need the error terms e1, e2 e3 which we'll fill into the array "terms".  Since these terms are themselves polynomials, we'll need another array "workspace" to calculate those...
	terms[ 0 ] = eta0;

	// Some powers of sin(theta) cos(theta) that we'll need later:
	s2 = s * s;
	c2 = c * c;
	sc = s * c;
	sc2 = sc * sc;
	sc3 = sc2 * sc;
	sc4 = sc2 * sc2;
	sc5 = sc2 * sc3;
	sc6 = sc3 * sc3;
	sc7 = sc4 * sc3;

	// Calculate e1 and put it in terms[1], see the middle of page 151:
	workspace[ 0 ] = ((2.0*s2) - 1.0) / ( 3.0*sc );
	workspace[ 1 ] = -polyval1( s2 ) / (36.0*sc2);
	workspace[ 2 ] = polyval2( s2 ) / (1620.0*sc3);
	workspace[ 3 ] = polyval3( s2 ) / (6480.0*sc4);
	workspace[ 4 ] = polyval4( s2 ) / (90720.0*sc5);
	workspace[ 5 ] = 0.0;
	terms[ 1 ] = evalpoly( workspace, eta0 );

	// Now evaluate e2 and put it in terms[2]:
	workspace[ 0 ] = -polyval5( s2 ) / (405.0*sc3);
	workspace[ 1 ] = polyval6( s2 ) / (2592.0*sc4);
	workspace[ 2 ] = -polyval7( s2 ) / (204120.0*sc5);
	workspace[ 3 ] = -polyval8( s2 ) / (2099520.0*sc6);
	workspace[ 4 ] = 0.0;
	workspace[ 5 ] = 0.0;
	terms[ 2 ] = evalpoly( workspace, eta0 );

	// And e3, and put it in terms[3]:
	workspace[ 0 ] = polyval9( s2 ) / (102060.0*sc5);
	workspace[ 1 ] = -polyval10( s2 ) / (20995200.0*sc6);
	workspace[ 2 ] = polyval11( s2 ) / (36741600.0*sc7);
	workspace[ 3 ] = 0.0;
	workspace[ 4 ] = 0.0;
	workspace[ 5 ] = 0.0;
	terms[ 3 ] = evalpoly( workspace, eta0 );

	// Bring the correction terms together to evaluate eta; this is the last equation on page 151:
	eta = evalpoly( terms, 1.0/r );

	// Now that we have eta we need to back solve for x, we seek the value of x that gives eta in Eq 3.2. The two methods used are described in section 5. Begin by defining a few variables we'll need later:
	alpha = c / s;
	alpha *= alpha;
	lu = ( -( eta*eta )/( 2.0*s2 ) ) + ln(s2) + ( c2*ln(c2)/s2 );

	// Temme doesn't specify what value to switch on here, but this seems to work pretty well:
	if ( abs(eta) < 0.7 ) {
		// Small eta use the expansion Temme gives in the second equation of section 5, it's a polynomial in eta:
		workspace[ 0 ] = s2;
		workspace[ 1 ] = sc;
		workspace[ 2 ] = (1.0-(2.0*s2)) / 3.0;
		workspace[ 3 ] = polyval12( s2 ) / ( 36.0*sc );
		workspace[ 4 ] = polyval13( s2 ) / ( 270.0*sc2 );
		workspace[ 5 ] = 0.0;
		x = evalpoly( workspace, eta );
	} else {
		// If eta is large we need to solve Eq 3.2 more directly, begin by getting an initial approximation for x from the last equation on page 155, this is a polynomial in u:
		u = exp( lu );
		workspace[ 0 ] = u;
		workspace[ 1 ] = alpha;
		workspace[ 2 ] = 0.0;
		workspace[ 3 ] = 3.0 * alpha * ((3.0*alpha)+1.0) / 6.0;
		workspace[ 4 ] = 4.0 * alpha * ((4.0*alpha)+1.0) * ((4.0*alpha)+2.0) / 24.0; // eslint-disable-line max-len
		workspace[ 5 ] = 5.0 * alpha * ((5.0*alpha)+1.0) * ((5.0*alpha)+2.0) * ((5.0*alpha)+3.0) / 120.0; // eslint-disable-line max-len
		x = evalpoly( workspace, u );

		// At this point we may or may not have the right answer, Eq-3.2 has two solutions for x for any given eta, however the mapping in 3.2 is 1:1 with the sign of eta and x-sin^2(theta) being the same. So we can check if we have the right root of 3.2, and if not switch x for 1-x.  This transformation is motivated by the fact that the distribution is *almost* symmetric so 1-x will be in the right ball park for the solution:
		if ( (x-s2)*eta < 0.0 ) {
			x = 1.0 - x;
		}
	}
	// The final step is a few Newton-Raphson iterations to clean up our approximation for x, this is pretty cheap in general, and very cheap compared to an incomplete beta evaluation. The limits set on x come from the observation that the sign of eta and x-sin^2(theta) are the same.
	if ( eta < 0.0 ) {
		lower = 0.0;
		upper = s2;
	} else {
		lower = s2;
		upper = 1.0;
	}
	// If our initial approximation is out of bounds then bisect:
	if ( x < lower || x > upper ) {
		x = (lower+upper) / 2.0;
	}
	roots = temmeRootFinder( -lu, alpha );

	// And iterate:
	x = newtonRaphsonIterate( roots, x, lower, upper, 32, 100 );
	return x;
}


// EXPORTS //

module.exports = temme2;

},{"./newton_raphson.js":1635,"./polyval_co1.js":1636,"./polyval_co10.js":1637,"./polyval_co11.js":1638,"./polyval_co12.js":1639,"./polyval_co13.js":1640,"./polyval_co2.js":1647,"./polyval_co3.js":1651,"./polyval_co4.js":1652,"./polyval_co5.js":1653,"./polyval_co6.js":1654,"./polyval_co7.js":1655,"./polyval_co8.js":1656,"./polyval_co9.js":1657,"./root_finder.js":1658,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/cos":1396,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sin":1806,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/tools/evalpoly":1869}],1661:[function(require,module,exports){
/* eslint-disable max-statements, no-mixed-operators, max-len */
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
var ln = require( '@stdlib/math/base/special/ln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var SMALLEST_SUBNORMAL = require( '@stdlib/constants/math/float64-smallest-subnormal' );
var temmeRootFinder = require( './root_finder.js' );
var newtonRaphsonIterate = require( './newton_raphson.js' );


// MAIN //

/**
* Carries out the third method by Temme (described in section 4).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." *Journal of Computational and Applied Mathematics* 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1-p`
* @returns {number} function value
*/
function temme3( a, b, p, q ) {
	var cross;
	var roots;
	var lower;
	var upper;
	var eta0;
	var eta;
	var w10;
	var w12;
	var w13;
	var w14;
	var e1;
	var e2;
	var e3;
	var mu;
	var d2;
	var d3;
	var d4;
	var w2;
	var w3;
	var w4;
	var w5;
	var w6;
	var w7;
	var w8;
	var w9;
	var w1;
	var d;
	var w;
	var u;
	var x;

	// Begin by getting an initial approximation for the quantity eta from the dominant part of the incomplete beta:
	if ( p < q ) {
		eta0 = gammaincinv( p, b, true );
	} else {
		eta0 = gammaincinv( q, b, false );
	}
	eta0 /= a;

	// Define the variables and powers we'll need later on:
	mu = b / a;
	w = sqrt( 1.0+mu );
	w2 = w * w;
	w3 = w2 * w;
	w4 = w2 * w2;
	w5 = w3 * w2;
	w6 = w3 * w3;
	w7 = w4 * w3;
	w8 = w4 * w4;
	w9 = w5 * w4;
	w10 = w5 * w5;
	d = eta0 - mu;
	d2 = d * d;
	d3 = d2 * d;
	d4 = d2 * d2;
	w1 = w + 1.0;
	w12 = w1 * w1;
	w13 = w1 * w12;
	w14 = w12 * w12;

	// Now we need to compute the perturbation error terms that convert eta0 to eta, these are all polynomials of polynomials. Probably these should be re-written to use tabulated data (see examples above), but it's less of a win in this case as we need to calculate the individual powers for the denominator terms anyway, so we might as well use them for the numerator-polynomials as well. Refer to p154-p155 for the details of these expansions:
	e1 = (w+2.0) * (w-1.0) / (3.0*w);
	e1 += (w3 + 9.0*w2 + 21.0*w + 5.0) * d / (36.0*w2*w1);
	e1 -= (w4 - 13.0*w3 + 69.0*w2 + 167.0*w + 46.0) * d2 / (1620.0*w12*w3);
	e1 -= (7.0*w5 + 21.0*w4 + 70.0*w3 + 26.0*w2 - 93.0*w - 31.0) * d3 / (6480.0*w13*w4);
	e1 -= (75.0*w6 + 202.0*w5 + 188.0*w4 - 888.0*w3 - 1345.0*w2 + 118.0*w + 138.0) * d4 / (272160.0*w14*w5);

	e2 = (28.0*w4 + 131.0*w3 + 402.0*w2 + 581.0*w + 208.0) * (w-1.0) / (1620.0*w1*w3);
	e2 -= (35.0*w6 - 154.0*w5 - 623.0*w4 - 1636.0*w3 - 3983.0*w2 - 3514.0*w - 925.0) * d / (12960.0*w12*w4);
	e2 -= (2132.0*w7 + 7915.0*w6 + 16821.0*w5 + 35066.0*w4 + 87490.0*w3 + 141183.0*w2 + 95993.0*w + 21640.0) * d2 / (816480.0*w5*w13);
	e2 -= (11053.0*w8 + 53308.0*w7 + 117010.0*w6 + 163924.0*w5 + 116188.0*w4 - 258428.0*w3 - 677042.0*w2 - 481940.0*w - 105497.0) * d3 / (14696640.0*w14*w6);

	e3 = -((3592.0*w7 + 8375.0*w6 - 1323.0*w5 - 29198.0*w4 - 89578.0*w3 - 154413.0*w2 - 116063.0*w - 29632.0) * (w-1.0)) / (816480.0*w5*w12);
	e3 -= (442043.0*w9 + 2054169.0*w8 + 3803094.0*w7 + 3470754.0*w6 + 2141568.0*w5 - 2393568.0*w4 - 19904934.0*w3 - 34714674.0*w2 - 23128299.0*w - 5253353.0) * d / (146966400.0*w6*w13);
	e3 -= (116932.0*w10 + 819281.0*w9 + 2378172.0*w8 + 4341330.0*w7 + 6806004.0*w6 + 10622748.0*w5 + 18739500.0*w4 + 30651894.0*w3 + 30869976.0*w2 + 15431867.0*w + 2919016.0) * d2 / (146966400.0*w14*w7);

	// Combine eta0 and the error terms to compute eta (Second equation p155):
	eta = eta0 + (e1/a) + (e2/(a*a)) + (e3/(a*a*a));

	/*
		Now we need to solve Eq 4.2 to obtain x.  For any given value of
		eta there are two solutions to this equation, and since the distribution
		may be very skewed, these are not related by x ~ 1-x we used when
		implementing section 3 above.  However we know that:

			cross < x <= 1       ; iff eta < mu
				x == cross   ; iff eta == mu
				0 <= x < cross    ; iff eta > mu

		Where cross == 1 / (1 + mu)
		Many thanks to Prof Temme for clarifying this point. Therefore we'll just jump straight into Newton iterations to solve Eq 4.2 using these bounds, and simple bisection as the first guess, in practice this converges pretty quickly and we only need a few digits correct anyway:
	*/
	if ( eta <= 0 ) {
		eta = SMALLEST_SUBNORMAL;
	}
	u = eta - ( mu*ln(eta) ) + ( ( 1.0+mu ) * ln( 1.0+mu ) ) - mu;
	cross = 1.0 / ( 1.0+mu );
	lower = (eta < mu) ? cross : 0.0;
	upper = (eta < mu) ? 1.0 : cross;
	x = (lower+upper) / 2.0;
	roots = temmeRootFinder( u, mu );
	return newtonRaphsonIterate( roots, x, lower, upper, 32, 100 );
}


// EXPORTS //

module.exports = temme3;

},{"./newton_raphson.js":1635,"./root_finder.js":1658,"@stdlib/constants/math/float64-smallest-subnormal":104,"@stdlib/math/base/special/gammaincinv":1566,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sqrt":1826}],1662:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

var kernelCos = require( './kernel_cos.js' );


// EXPORTS //

module.exports = kernelCos;

},{"./kernel_cos.js":1663}],1663:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var polyval13 = require( './polyval_c13.js' );
var polyval46 = require( './polyval_c46.js' );


// MAIN //

/**
* Computes the cosine on \\( [-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( [0,\pi/4] \\).
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*     ```
*
*     where the Remez error is
*
*     ```tex
*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*     ```
*
* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*     ```
*
*     Since
*
*     ```tex
*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*     ```

*     a correction term is necessary in \\( \cos(x) \\). Hence,
*
*     ```tex
*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*     ```
*
*     For better accuracy, rearrange to
*
*     ```tex
*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*     ```
*
*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * polyval13( z );
	r += w * w * polyval46( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
}


// EXPORTS //

module.exports = kernelCos;

},{"./polyval_c13.js":1664,"./polyval_c46.js":1665}],1664:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0416666666666666;
	}
	return 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1665:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -2.7557314351390663e-7;
	}
	return -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1666:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

var kernelSin = require( './kernel_sin.js' );


// EXPORTS //

module.exports = kernelSin;

},{"./kernel_sin.js":1667}],1667:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx [-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left[0,\tfrac{pi}{4}\right] \\)
*
*     ```tex
*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*     ```
*
*     where
*
*     ```tex
*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*     ```
*
* -   We have
*
*     ```tex
*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*     ```
*
*     For better accuracy, let
*
*     ```tex
*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*     ```
*
*     then
*
*     ```tex
*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
}


// EXPORTS //

module.exports = kernelSin;

},{}],1668:[function(require,module,exports){
'use strict';

/**
* Compute the tangent of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-tan
*
* @example
* var kernelTan = require( '@stdlib/math/base/special/kernel-tan' );
*
* var out = kernelTan( Math.PI/4.0, 0.0, 1 );
* // returns ~1.0
*
* out = kernelTan( Math.PI/4.0, 0.0, -1 );
* // returns ~-1.0
*
* out = kernelTan( Math.PI/6.0, 0.0, 1 );
* // returns ~0.577
*
* out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*/

// MODULES //

var kernelTan = require( './kernel_tan.js' );


// EXPORTS //

module.exports = kernelTan;

},{"./kernel_tan.js":1669}],1669:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_tan.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright 2004 Sun Microsystems, Inc.  All Rights Reserved.
*
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var polyvalOdd = require( './polyval_t_odd.js' );
var polyvalEven = require( './polyval_t_even.js' );


// VARIABLES //

var PIO4 = 7.85398163397448278999e-01;
var PIO4LO = 3.06161699786838301793e-17;
var T0 = 3.33333333333334091986e-01; // 3FD55555, 55555563

// Absolute value mask: 2147483647 => 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation


// MAIN //

/**
* Computes the tangent on \\( \approx[-\pi/4, \pi/4] \\) (except on -0), \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \tan(-x) = -\tan(x) \\), we need only to consider positive \\( x \\).
*
* -   Callers must return \\( \tan(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\( -0 \\). Callers may do the optimization \\( \tan(x) \approx x \\) for tiny \\( x \\).
*
* -   \\( \tan(x) \\) is approximated by a odd polynomial of degree 27 on \\( [0, 0.67434] \\)
*
*     ```tex
*     \tan(x) \approx x + T_1 x^3 + \ldots + T_{13} x^{27}
*     ```
*     where
*
*     ```tex
*     \left| \frac{\tan(x)}{x} - \left( 1 + T_1 x^2 + T_2 x^4 + \ldots + T_{13} x^{26} \right) \right|  \le 2^{-59.2}
*     ```
*
* -   Note: \\( \tan(x+y) = \tan(x) + \tan'(x) \cdot y \approx \tan(x) + ( 1 + x \cdot x ) \cdot y \\). Therefore, for better accuracy in computing \\( \tan(x+y) \\), let
*
*     ```tex
*     r = x^3 \cdot \left( T_2+x^2 \cdot (T_3+x^2 \cdot (\ldots+x^2 \cdot (T_{12}+x^2 \cdot T_{13}))) \right)
*     ```
*
*     then
*
*     ```tex
*     \tan(x+y) = x^3 + \left( T_1 \cdot x^2 + (x \cdot (r+y)+y) \right)
*     ```
*
* -   For \\( x \\) in \\( [0.67434, \pi/4] \\),  let \\( y = \pi/4 - x \\), then
*
*     ```tex
*     \tan(x) = \tan\left(\tfrac{\pi}{4}-y\right) = \frac{1-\tan(y)}{1+\tan(y)} \\
*     = 1 - 2 \cdot \left( \tan(y) - \tfrac{\tan(y)^2}{1+\tan(y)} \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~π/4 in magnitude)
* @param {number} y - tail of `x`
* @param {integer} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned
* @returns {number} tangent
*
* @example
* var out = kernelTan( Math.PI/4.0, 0.0, 1 );
* // returns ~1.0
*
* @example
* var out = kernelTan( Math.PI/4.0, 0.0, -1 );
* // returns ~-1.0
*
* @example
* var out = kernelTan( Math.PI/6.0, 0.0, 1 );
* // returns ~0.577
*
* @example
* var out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*
* @example
* var out = kernelTan( NaN, 0.0, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( 3.0, NaN, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( NaN, NaN, 1 );
* // returns NaN
*/
function kernelTan( x, y, k ) {
	var hx;
	var ix;
	var a;
	var r;
	var s;
	var t;
	var v;
	var w;
	var z;

	hx = getHighWord( x );

	// High word of |x|:
	ix = (hx & HIGH_WORD_ABS_MASK)|0; // asm type annotation

	// Case: |x| >= 0.6744
	if ( ix >= 0x3FE59428 ) {
		if ( x < 0 ) {
			x = -x;
			y = -y;
		}
		z = PIO4 - x;
		w = PIO4LO - y;
		x = z + w;
		y = 0.0;
	}
	z = x * x;
	w = z * z;

	// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) + x^5(x^2*(T[2]+x^4*T[4]+...+x^22*T[12]))...
	r = polyvalOdd( w );
	v = z * polyvalEven( w );
	s = z * x;
	r = y + (z * ((s * (r + v)) + y));
	r += T0 * s;
	w = x + r;
	if ( ix >= 0x3FE59428 ) {
		v = k;
		return ( 1.0 - ( (hx >> 30) & 2 ) ) * ( v - (2.0 * (x - ((w * w / (w + v)) - r)) )); // eslint-disable-line max-len
	}
	if ( k === 1 ) {
		return w;
	}
	// Compute -1/(x+r) accurately...
	z = w;
	setLowWord( z, 0 );
	v = r - (z - x); // z + v = r + x
	a = -1.0 / w; // a = -1/w
	t = a;
	setLowWord( t, 0 );
	s = 1.0 + (t * z);
	return t + (a * (s + (t * v)));
}


// EXPORTS //

module.exports = kernelTan;

},{"./polyval_t_even.js":1670,"./polyval_t_odd.js":1671,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-low-word":1920}],1670:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.05396825397622605;
	}
	return 0.05396825397622605 + (x * (0.0088632398235993 + (x * (0.0014562094543252903 + (x * (0.0002464631348184699 + (x * (0.00007140724913826082 + (x * 0.00002590730518636337))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1671:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.13333333333320124;
	}
	return 0.13333333333320124 + (x * (0.021869488294859542 + (x * (0.0035920791075913124 + (x * (0.0005880412408202641 + (x * (0.00007817944429395571 + (x * -0.000018558637485527546))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1672:[function(require,module,exports){
'use strict';

/**
* Evaluate the Kronecker delta.
*
* @module @stdlib/math/base/special/kronecker-delta
*
* @example
* var kroneckerDelta = require( '@stdlib/math/base/special/kronecker-delta' );
*
* var v = kroneckerDelta( 3.14, 3.14 );
* // returns 1.0
*
* v = kroneckerDelta( 3.14, 0.0 );
* // returns 0.0
*
* v = kroneckerDelta( NaN, 3.14 );
* // returns NaN
*
* v = kroneckerDelta( 3.14, NaN );
* // returns NaN
*
* v = kroneckerDelta( NaN, NaN );
* // returns NaN
*/

// MODULES //

var kroneckerDelta = require( './kronecker_delta.js' );


// EXPORTS //

module.exports = kroneckerDelta;

},{"./kronecker_delta.js":1673}],1673:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the Kronecker delta.
*
* @param {number} i - input value
* @param {number} j - input value
* @returns {number} function value
*
* @example
* var v = kroneckerDelta( 3.14, 3.14 );
* // returns 1.0
*
* @example
* var v = kroneckerDelta( 3.14, 0.0 );
* // returns 0.0
*
* @example
* var v = kroneckerDelta( NaN, 3.14 );
* // returns NaN
*
* @example
* var v = kroneckerDelta( 3.14, NaN );
* // returns NaN
*
* @example
* var v = kroneckerDelta( NaN, NaN );
* // returns NaN
*/
function kroneckerDelta( i, j ) {
	if ( isnan( i ) || isnan( j ) ) {
		return NaN;
	}
	if ( i === j ) {
		return 1.0;
	}
	return 0.0;
}


// EXPORTS //

module.exports = kroneckerDelta;

},{"@stdlib/math/base/assert/is-nan":128}],1674:[function(require,module,exports){
'use strict';

/**
* Compute the least common multiple (lcm).
*
* @module @stdlib/math/base/special/lcm
*
* @example
* var lcm = require( '@stdlib/math/base/special/lcm' );
*
* var v = lcm( 21, 6 );
* // returns 42
*/

// MODULES //

var lcm = require( './lcm.js' );


// EXPORTS //

module.exports = lcm;

},{"./lcm.js":1675}],1675:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gcd = require( '@stdlib/math/base/special/gcd' );


// MAIN //

/**
* Computes the least common multiple (lcm).
*
* @param {integer} a - integer
* @param {integer} b - integer
* @returns {integer} least common multiple
*
* @example
* var v = lcm( 21, 6 );
* // returns 42
*
* @example
* var v = lcm( 3.14, 6 );
* // returns NaN
*
* @example
* var v = lcm( NaN, 6 );
* // returns NaN
*/
function lcm( a, b ) {
	var d;
	if ( a === 0 || b === 0 ) {
		return 0;
	}
	if ( a < 0 ) {
		a = -a;
	}
	if ( b < 0 ) {
		b = -b;
	}
	// Note: we rely on `gcd` to perform further argument validation...
	d = gcd( a, b );
	if ( isnan( d ) ) {
		return d;
	}
	return (a/d) * b;
}


// EXPORTS //

module.exports = lcm;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/gcd":1597}],1676:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":1677}],1677:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/number/float64/base/normalize' );
var floatExp = require( '@stdlib/number/float64/base/exponent' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

// Normalization workspace:
var FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/
function ldexp( frac, exp ) {
	var high;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	normalize( FRAC, frac );
	frac = FRAC[ 0 ];
	exp += FRAC[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	toWords( WORDS, frac );
	high = WORDS[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-max-base2-exponent":86,"@stdlib/constants/math/float64-max-base2-exponent-subnormal":85,"@stdlib/constants/math/float64-min-base2-exponent-subnormal":94,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/copysign":1394,"@stdlib/number/float64/base/exponent":1903,"@stdlib/number/float64/base/from-words":1905,"@stdlib/number/float64/base/normalize":1914,"@stdlib/number/float64/base/to-words":1925}],1678:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace special
*/
var special = {};

/**
* @name abs
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/abs}
*/
setReadOnly( special, 'abs', require( '@stdlib/math/base/special/abs' ) );

/**
* @name abs2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/abs2}
*/
setReadOnly( special, 'abs2', require( '@stdlib/math/base/special/abs2' ) );

/**
* @name acos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/acos}
*/
setReadOnly( special, 'acos', require( '@stdlib/math/base/special/acos' ) );

/**
* @name acosh
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/acosh}
*/
setReadOnly( special, 'acosh', require( '@stdlib/math/base/special/acosh' ) );

/**
* @name acovercos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/acovercos}
*/
setReadOnly( special, 'acovercos', require( '@stdlib/math/base/special/acovercos' ) );

/**
* @name acoversin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/acoversin}
*/
setReadOnly( special, 'acoversin', require( '@stdlib/math/base/special/acoversin' ) );

/**
* @name ahavercos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ahavercos}
*/
setReadOnly( special, 'ahavercos', require( '@stdlib/math/base/special/ahavercos' ) );

/**
* @name ahaversin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ahaversin}
*/
setReadOnly( special, 'ahaversin', require( '@stdlib/math/base/special/ahaversin' ) );

/**
* @name asin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/asin}
*/
setReadOnly( special, 'asin', require( '@stdlib/math/base/special/asin' ) );

/**
* @name asinh
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/asinh}
*/
setReadOnly( special, 'asinh', require( '@stdlib/math/base/special/asinh' ) );

/**
* @name atan
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/atan}
*/
setReadOnly( special, 'atan', require( '@stdlib/math/base/special/atan' ) );

/**
* @name atan2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/atan2}
*/
setReadOnly( special, 'atan2', require( '@stdlib/math/base/special/atan2' ) );

/**
* @name atanh
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/atanh}
*/
setReadOnly( special, 'atanh', require( '@stdlib/math/base/special/atanh' ) );

/**
* @name avercos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/avercos}
*/
setReadOnly( special, 'avercos', require( '@stdlib/math/base/special/avercos' ) );

/**
* @name aversin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/aversin}
*/
setReadOnly( special, 'aversin', require( '@stdlib/math/base/special/aversin' ) );

/**
* @name bernoulli
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/bernoulli}
*/
setReadOnly( special, 'bernoulli', require( '@stdlib/math/base/special/bernoulli' ) );

/**
* @name besselj0
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/besselj0}
*/
setReadOnly( special, 'besselj0', require( '@stdlib/math/base/special/besselj0' ) );

/**
* @name besselj1
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/besselj1}
*/
setReadOnly( special, 'besselj1', require( '@stdlib/math/base/special/besselj1' ) );

/**
* @name bessely0
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/bessely0}
*/
setReadOnly( special, 'bessely0', require( '@stdlib/math/base/special/bessely0' ) );

/**
* @name bessely1
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/bessely1}
*/
setReadOnly( special, 'bessely1', require( '@stdlib/math/base/special/bessely1' ) );

/**
* @name beta
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/beta}
*/
setReadOnly( special, 'beta', require( '@stdlib/math/base/special/beta' ) );

/**
* @name betainc
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/betainc}
*/
setReadOnly( special, 'betainc', require( '@stdlib/math/base/special/betainc' ) );

/**
* @name betaincinv
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/betaincinv}
*/
setReadOnly( special, 'betaincinv', require( '@stdlib/math/base/special/betaincinv' ) );

/**
* @name betaln
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/betaln}
*/
setReadOnly( special, 'betaln', require( '@stdlib/math/base/special/betaln' ) );

/**
* @name binet
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/binet}
*/
setReadOnly( special, 'binet', require( '@stdlib/math/base/special/binet' ) );

/**
* @name binomcoef
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/binomcoef}
*/
setReadOnly( special, 'binomcoef', require( '@stdlib/math/base/special/binomcoef' ) );

/**
* @name binomcoefln
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/binomcoefln}
*/
setReadOnly( special, 'binomcoefln', require( '@stdlib/math/base/special/binomcoefln' ) );

/**
* @name cbrt
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/cbrt}
*/
setReadOnly( special, 'cbrt', require( '@stdlib/math/base/special/cbrt' ) );

/**
* @name ceil
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ceil}
*/
setReadOnly( special, 'ceil', require( '@stdlib/math/base/special/ceil' ) );

/**
* @name ceil10
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ceil10}
*/
setReadOnly( special, 'ceil10', require( '@stdlib/math/base/special/ceil10' ) );

/**
* @name ceil2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ceil2}
*/
setReadOnly( special, 'ceil2', require( '@stdlib/math/base/special/ceil2' ) );

/**
* @name ceilb
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ceilb}
*/
setReadOnly( special, 'ceilb', require( '@stdlib/math/base/special/ceilb' ) );

/**
* @name ceiln
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ceiln}
*/
setReadOnly( special, 'ceiln', require( '@stdlib/math/base/special/ceiln' ) );

/**
* @name ceilsd
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ceilsd}
*/
setReadOnly( special, 'ceilsd', require( '@stdlib/math/base/special/ceilsd' ) );

/**
* @name clamp
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/clamp}
*/
setReadOnly( special, 'clamp', require( '@stdlib/math/base/special/clamp' ) );

/**
* @name copysign
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/copysign}
*/
setReadOnly( special, 'copysign', require( '@stdlib/math/base/special/copysign' ) );

/**
* @name cos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/cos}
*/
setReadOnly( special, 'cos', require( '@stdlib/math/base/special/cos' ) );

/**
* @name cosh
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/cosh}
*/
setReadOnly( special, 'cosh', require( '@stdlib/math/base/special/cosh' ) );

/**
* @name cosm1
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/cosm1}
*/
setReadOnly( special, 'cosm1', require( '@stdlib/math/base/special/cosm1' ) );

/**
* @name cospi
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/cospi}
*/
setReadOnly( special, 'cospi', require( '@stdlib/math/base/special/cospi' ) );

/**
* @name covercos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/covercos}
*/
setReadOnly( special, 'covercos', require( '@stdlib/math/base/special/covercos' ) );

/**
* @name coversin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/coversin}
*/
setReadOnly( special, 'coversin', require( '@stdlib/math/base/special/coversin' ) );

/**
* @name deg2rad
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/deg2rad}
*/
setReadOnly( special, 'deg2rad', require( '@stdlib/math/base/special/deg2rad' ) );

/**
* @name digamma
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/digamma}
*/
setReadOnly( special, 'digamma', require( '@stdlib/math/base/special/digamma' ) );

/**
* @name diracDelta
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/dirac-delta}
*/
setReadOnly( special, 'diracDelta', require( '@stdlib/math/base/special/dirac-delta' ) );

/**
* @name eta
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/dirichlet-eta}
*/
setReadOnly( special, 'eta', require( '@stdlib/math/base/special/dirichlet-eta' ) );

/**
* @name erf
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/erf}
*/
setReadOnly( special, 'erf', require( '@stdlib/math/base/special/erf' ) );

/**
* @name erfc
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/erfc}
*/
setReadOnly( special, 'erfc', require( '@stdlib/math/base/special/erfc' ) );

/**
* @name erfcinv
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/erfcinv}
*/
setReadOnly( special, 'erfcinv', require( '@stdlib/math/base/special/erfcinv' ) );

/**
* @name erfinv
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/erfinv}
*/
setReadOnly( special, 'erfinv', require( '@stdlib/math/base/special/erfinv' ) );

/**
* @name exp
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/exp}
*/
setReadOnly( special, 'exp', require( '@stdlib/math/base/special/exp' ) );

/**
* @name exp10
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/exp10}
*/
setReadOnly( special, 'exp10', require( '@stdlib/math/base/special/exp10' ) );

/**
* @name exp2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/exp2}
*/
setReadOnly( special, 'exp2', require( '@stdlib/math/base/special/exp2' ) );

/**
* @name expm1
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/expm1}
*/
setReadOnly( special, 'expm1', require( '@stdlib/math/base/special/expm1' ) );

/**
* @name factorial
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/factorial}
*/
setReadOnly( special, 'factorial', require( '@stdlib/math/base/special/factorial' ) );

/**
* @name factorialln
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/factorialln}
*/
setReadOnly( special, 'factorialln', require( '@stdlib/math/base/special/factorialln' ) );

/**
* @name fallingFactorial
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/falling-factorial}
*/
setReadOnly( special, 'fallingFactorial', require( '@stdlib/math/base/special/falling-factorial' ) );

/**
* @name fibonacci
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/fibonacci}
*/
setReadOnly( special, 'fibonacci', require( '@stdlib/math/base/special/fibonacci' ) );

/**
* @name fibonacciIndex
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/fibonacci-index}
*/
setReadOnly( special, 'fibonacciIndex', require( '@stdlib/math/base/special/fibonacci-index' ) );

/**
* @name flipsign
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/flipsign}
*/
setReadOnly( special, 'flipsign', require( '@stdlib/math/base/special/flipsign' ) );

/**
* @name floor
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/floor}
*/
setReadOnly( special, 'floor', require( '@stdlib/math/base/special/floor' ) );

/**
* @name floor10
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/floor10}
*/
setReadOnly( special, 'floor10', require( '@stdlib/math/base/special/floor10' ) );

/**
* @name floor2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/floor2}
*/
setReadOnly( special, 'floor2', require( '@stdlib/math/base/special/floor2' ) );

/**
* @name floorb
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/floorb}
*/
setReadOnly( special, 'floorb', require( '@stdlib/math/base/special/floorb' ) );

/**
* @name floorn
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/floorn}
*/
setReadOnly( special, 'floorn', require( '@stdlib/math/base/special/floorn' ) );

/**
* @name floorsd
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/floorsd}
*/
setReadOnly( special, 'floorsd', require( '@stdlib/math/base/special/floorsd' ) );

/**
* @name fresnel
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/fresnel}
*/
setReadOnly( special, 'fresnel', require( '@stdlib/math/base/special/fresnel' ) );

/**
* @name fresnelc
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/fresnelc}
*/
setReadOnly( special, 'fresnelc', require( '@stdlib/math/base/special/fresnelc' ) );

/**
* @name fresnels
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/fresnels}
*/
setReadOnly( special, 'fresnels', require( '@stdlib/math/base/special/fresnels' ) );

/**
* @name frexp
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/frexp}
*/
setReadOnly( special, 'frexp', require( '@stdlib/math/base/special/frexp' ) );

/**
* @name gamma
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gamma}
*/
setReadOnly( special, 'gamma', require( '@stdlib/math/base/special/gamma' ) );

/**
* @name gammaDeltaRatio
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gamma-delta-ratio}
*/
setReadOnly( special, 'gammaDeltaRatio', require( '@stdlib/math/base/special/gamma-delta-ratio' ) );

/**
* @name gammaLanczosSum
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gamma-lanczos-sum}
*/
setReadOnly( special, 'gammaLanczosSum', require( '@stdlib/math/base/special/gamma-lanczos-sum' ) );

/**
* @name gammaLanczosSumExpGScaled
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled}
*/
setReadOnly( special, 'gammaLanczosSumExpGScaled', require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ) );

/**
* @name gamma1pm1
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gamma1pm1}
*/
setReadOnly( special, 'gamma1pm1', require( '@stdlib/math/base/special/gamma1pm1' ) );

/**
* @name gammainc
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gammainc}
*/
setReadOnly( special, 'gammainc', require( '@stdlib/math/base/special/gammainc' ) );

/**
* @name gammaincinv
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gammaincinv}
*/
setReadOnly( special, 'gammaincinv', require( '@stdlib/math/base/special/gammaincinv' ) );

/**
* @name gammaln
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gammaln}
*/
setReadOnly( special, 'gammaln', require( '@stdlib/math/base/special/gammaln' ) );

/**
* @name gcd
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/gcd}
*/
setReadOnly( special, 'gcd', require( '@stdlib/math/base/special/gcd' ) );

/**
* @name hacovercos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/hacovercos}
*/
setReadOnly( special, 'hacovercos', require( '@stdlib/math/base/special/hacovercos' ) );

/**
* @name hacoversin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/hacoversin}
*/
setReadOnly( special, 'hacoversin', require( '@stdlib/math/base/special/hacoversin' ) );

/**
* @name havercos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/havercos}
*/
setReadOnly( special, 'havercos', require( '@stdlib/math/base/special/havercos' ) );

/**
* @name haversin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/haversin}
*/
setReadOnly( special, 'haversin', require( '@stdlib/math/base/special/haversin' ) );

/**
* @name heaviside
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/heaviside}
*/
setReadOnly( special, 'heaviside', require( '@stdlib/math/base/special/heaviside' ) );

/**
* @name hypot
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/hypot}
*/
setReadOnly( special, 'hypot', require( '@stdlib/math/base/special/hypot' ) );

/**
* @name absInt32
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/int32-abs}
*/
setReadOnly( special, 'absInt32', require( '@stdlib/math/base/special/int32-abs' ) );

/**
* @name inv
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/inv}
*/
setReadOnly( special, 'inv', require( '@stdlib/math/base/special/inv' ) );

/**
* @name kernelBetainc
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/kernel-betainc}
*/
setReadOnly( special, 'kernelBetainc', require( '@stdlib/math/base/special/kernel-betainc' ) );

/**
* @name kernelBetaincinv
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/kernel-betaincinv}
*/
setReadOnly( special, 'kernelBetaincinv', require( '@stdlib/math/base/special/kernel-betaincinv' ) );

/**
* @name kernelCos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/kernel-cos}
*/
setReadOnly( special, 'kernelCos', require( '@stdlib/math/base/special/kernel-cos' ) );

/**
* @name kernelSin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/kernel-sin}
*/
setReadOnly( special, 'kernelSin', require( '@stdlib/math/base/special/kernel-sin' ) );

/**
* @name kernelTan
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/kernel-tan}
*/
setReadOnly( special, 'kernelTan', require( '@stdlib/math/base/special/kernel-tan' ) );

/**
* @name kroneckerDelta
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/kronecker-delta}
*/
setReadOnly( special, 'kroneckerDelta', require( '@stdlib/math/base/special/kronecker-delta' ) );

/**
* @name lcm
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/lcm}
*/
setReadOnly( special, 'lcm', require( '@stdlib/math/base/special/lcm' ) );

/**
* @name ldexp
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ldexp}
*/
setReadOnly( special, 'ldexp', require( '@stdlib/math/base/special/ldexp' ) );

/**
* @name ln
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ln}
*/
setReadOnly( special, 'ln', require( '@stdlib/math/base/special/ln' ) );

/**
* @name log
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/log}
*/
setReadOnly( special, 'log', require( '@stdlib/math/base/special/log' ) );

/**
* @name log10
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/log10}
*/
setReadOnly( special, 'log10', require( '@stdlib/math/base/special/log10' ) );

/**
* @name log1p
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/log1p}
*/
setReadOnly( special, 'log1p', require( '@stdlib/math/base/special/log1p' ) );

/**
* @name log2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/log2}
*/
setReadOnly( special, 'log2', require( '@stdlib/math/base/special/log2' ) );

/**
* @name logit
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/logit}
*/
setReadOnly( special, 'logit', require( '@stdlib/math/base/special/logit' ) );

/**
* @name lucas
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/lucas}
*/
setReadOnly( special, 'lucas', require( '@stdlib/math/base/special/lucas' ) );

/**
* @name max
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/max}
*/
setReadOnly( special, 'max', require( '@stdlib/math/base/special/max' ) );

/**
* @name maxabs
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/maxabs}
*/
setReadOnly( special, 'maxabs', require( '@stdlib/math/base/special/maxabs' ) );

/**
* @name min
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/min}
*/
setReadOnly( special, 'min', require( '@stdlib/math/base/special/min' ) );

/**
* @name minabs
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/minabs}
*/
setReadOnly( special, 'minabs', require( '@stdlib/math/base/special/minabs' ) );

/**
* @name minmax
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/minmax}
*/
setReadOnly( special, 'minmax', require( '@stdlib/math/base/special/minmax' ) );

/**
* @name modf
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/modf}
*/
setReadOnly( special, 'modf', require( '@stdlib/math/base/special/modf' ) );

/**
* @name negafibonacci
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/negafibonacci}
*/
setReadOnly( special, 'negafibonacci', require( '@stdlib/math/base/special/negafibonacci' ) );

/**
* @name negalucas
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/negalucas}
*/
setReadOnly( special, 'negalucas', require( '@stdlib/math/base/special/negalucas' ) );

/**
* @name nonfibonacci
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/nonfibonacci}
*/
setReadOnly( special, 'nonfibonacci', require( '@stdlib/math/base/special/nonfibonacci' ) );

/**
* @name pdiff
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/pdiff}
*/
setReadOnly( special, 'pdiff', require( '@stdlib/math/base/special/pdiff' ) );

/**
* @name polygamma
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/polygamma}
*/
setReadOnly( special, 'polygamma', require( '@stdlib/math/base/special/polygamma' ) );

/**
* @name pow
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/pow}
*/
setReadOnly( special, 'pow', require( '@stdlib/math/base/special/pow' ) );

/**
* @name powm1
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/powm1}
*/
setReadOnly( special, 'powm1', require( '@stdlib/math/base/special/powm1' ) );

/**
* @name rad2deg
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/rad2deg}
*/
setReadOnly( special, 'rad2deg', require( '@stdlib/math/base/special/rad2deg' ) );

/**
* @name ramp
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/ramp}
*/
setReadOnly( special, 'ramp', require( '@stdlib/math/base/special/ramp' ) );

/**
* @name rempio2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/rempio2}
*/
setReadOnly( special, 'rempio2', require( '@stdlib/math/base/special/rempio2' ) );

/**
* @name zeta
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/riemann-zeta}
*/
setReadOnly( special, 'zeta', require( '@stdlib/math/base/special/riemann-zeta' ) );

/**
* @name risingFactorial
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/rising-factorial}
*/
setReadOnly( special, 'risingFactorial', require( '@stdlib/math/base/special/rising-factorial' ) );

/**
* @name round
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/round}
*/
setReadOnly( special, 'round', require( '@stdlib/math/base/special/round' ) );

/**
* @name round10
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/round10}
*/
setReadOnly( special, 'round10', require( '@stdlib/math/base/special/round10' ) );

/**
* @name round2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/round2}
*/
setReadOnly( special, 'round2', require( '@stdlib/math/base/special/round2' ) );

/**
* @name roundb
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/roundb}
*/
setReadOnly( special, 'roundb', require( '@stdlib/math/base/special/roundb' ) );

/**
* @name roundn
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/roundn}
*/
setReadOnly( special, 'roundn', require( '@stdlib/math/base/special/roundn' ) );

/**
* @name roundsd
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/roundsd}
*/
setReadOnly( special, 'roundsd', require( '@stdlib/math/base/special/roundsd' ) );

/**
* @name sici
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sici}
*/
setReadOnly( special, 'sici', require( '@stdlib/math/base/special/sici' ) );

/**
* @name signum
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/signum}
*/
setReadOnly( special, 'signum', require( '@stdlib/math/base/special/signum' ) );

/**
* @name sin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sin}
*/
setReadOnly( special, 'sin', require( '@stdlib/math/base/special/sin' ) );

/**
* @name sinc
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sinc}
*/
setReadOnly( special, 'sinc', require( '@stdlib/math/base/special/sinc' ) );

/**
* @name sincos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sincos}
*/
setReadOnly( special, 'sincos', require( '@stdlib/math/base/special/sincos' ) );

/**
* @name sincospi
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sincospi}
*/
setReadOnly( special, 'sincospi', require( '@stdlib/math/base/special/sincospi' ) );

/**
* @name sinh
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sinh}
*/
setReadOnly( special, 'sinh', require( '@stdlib/math/base/special/sinh' ) );

/**
* @name sinpi
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sinpi}
*/
setReadOnly( special, 'sinpi', require( '@stdlib/math/base/special/sinpi' ) );

/**
* @name spence
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/spence}
*/
setReadOnly( special, 'spence', require( '@stdlib/math/base/special/spence' ) );

/**
* @name sqrt
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sqrt}
*/
setReadOnly( special, 'sqrt', require( '@stdlib/math/base/special/sqrt' ) );

/**
* @name sqrt1pm1
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/sqrt1pm1}
*/
setReadOnly( special, 'sqrt1pm1', require( '@stdlib/math/base/special/sqrt1pm1' ) );

/**
* @name tan
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/tan}
*/
setReadOnly( special, 'tan', require( '@stdlib/math/base/special/tan' ) );

/**
* @name tanh
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/tanh}
*/
setReadOnly( special, 'tanh', require( '@stdlib/math/base/special/tanh' ) );

/**
* @name trigamma
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/trigamma}
*/
setReadOnly( special, 'trigamma', require( '@stdlib/math/base/special/trigamma' ) );

/**
* @name trunc
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/trunc}
*/
setReadOnly( special, 'trunc', require( '@stdlib/math/base/special/trunc' ) );

/**
* @name trunc10
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/trunc10}
*/
setReadOnly( special, 'trunc10', require( '@stdlib/math/base/special/trunc10' ) );

/**
* @name trunc2
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/trunc2}
*/
setReadOnly( special, 'trunc2', require( '@stdlib/math/base/special/trunc2' ) );

/**
* @name truncb
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/truncb}
*/
setReadOnly( special, 'truncb', require( '@stdlib/math/base/special/truncb' ) );

/**
* @name truncn
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/truncn}
*/
setReadOnly( special, 'truncn', require( '@stdlib/math/base/special/truncn' ) );

/**
* @name truncsd
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/truncsd}
*/
setReadOnly( special, 'truncsd', require( '@stdlib/math/base/special/truncsd' ) );

/**
* @name vercos
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/vercos}
*/
setReadOnly( special, 'vercos', require( '@stdlib/math/base/special/vercos' ) );

/**
* @name versin
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/versin}
*/
setReadOnly( special, 'versin', require( '@stdlib/math/base/special/versin' ) );

/**
* @name wrap
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/wrap}
*/
setReadOnly( special, 'wrap', require( '@stdlib/math/base/special/wrap' ) );

/**
* @name xlog1py
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/xlog1py}
*/
setReadOnly( special, 'xlog1py', require( '@stdlib/math/base/special/xlog1py' ) );

/**
* @name xlogy
* @memberof special
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/special/xlogy}
*/
setReadOnly( special, 'xlogy', require( '@stdlib/math/base/special/xlogy' ) );


// EXPORTS //

module.exports = special;

},{"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/abs2":1300,"@stdlib/math/base/special/acos":1302,"@stdlib/math/base/special/acosh":1304,"@stdlib/math/base/special/acovercos":1306,"@stdlib/math/base/special/acoversin":1308,"@stdlib/math/base/special/ahavercos":1310,"@stdlib/math/base/special/ahaversin":1312,"@stdlib/math/base/special/asin":1314,"@stdlib/math/base/special/asinh":1318,"@stdlib/math/base/special/atan":1320,"@stdlib/math/base/special/atan2":1324,"@stdlib/math/base/special/atanh":1326,"@stdlib/math/base/special/avercos":1328,"@stdlib/math/base/special/aversin":1330,"@stdlib/math/base/special/bernoulli":1333,"@stdlib/math/base/special/besselj0":1334,"@stdlib/math/base/special/besselj1":1340,"@stdlib/math/base/special/bessely0":1346,"@stdlib/math/base/special/bessely1":1353,"@stdlib/math/base/special/beta":1360,"@stdlib/math/base/special/betainc":1363,"@stdlib/math/base/special/betaincinv":1365,"@stdlib/math/base/special/betaln":1369,"@stdlib/math/base/special/binet":1370,"@stdlib/math/base/special/binomcoef":1373,"@stdlib/math/base/special/binomcoefln":1375,"@stdlib/math/base/special/cbrt":1377,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/ceil10":1382,"@stdlib/math/base/special/ceil2":1384,"@stdlib/math/base/special/ceilb":1386,"@stdlib/math/base/special/ceiln":1388,"@stdlib/math/base/special/ceilsd":1390,"@stdlib/math/base/special/clamp":1391,"@stdlib/math/base/special/copysign":1394,"@stdlib/math/base/special/cos":1396,"@stdlib/math/base/special/cosh":1398,"@stdlib/math/base/special/cosm1":1400,"@stdlib/math/base/special/cospi":1403,"@stdlib/math/base/special/covercos":1405,"@stdlib/math/base/special/coversin":1407,"@stdlib/math/base/special/deg2rad":1409,"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/dirac-delta":1417,"@stdlib/math/base/special/dirichlet-eta":1419,"@stdlib/math/base/special/erf":1421,"@stdlib/math/base/special/erfc":1431,"@stdlib/math/base/special/erfcinv":1441,"@stdlib/math/base/special/erfinv":1448,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/exp10":1459,"@stdlib/math/base/special/exp2":1463,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/factorial":1471,"@stdlib/math/base/special/factorialln":1473,"@stdlib/math/base/special/falling-factorial":1475,"@stdlib/math/base/special/fibonacci":1480,"@stdlib/math/base/special/fibonacci-index":1476,"@stdlib/math/base/special/flipsign":1482,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/floor10":1486,"@stdlib/math/base/special/floor2":1488,"@stdlib/math/base/special/floorb":1490,"@stdlib/math/base/special/floorn":1492,"@stdlib/math/base/special/floorsd":1494,"@stdlib/math/base/special/fresnel":1496,"@stdlib/math/base/special/fresnelc":1503,"@stdlib/math/base/special/fresnels":1508,"@stdlib/math/base/special/frexp":1513,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gamma-delta-ratio":1517,"@stdlib/math/base/special/gamma-lanczos-sum":1522,"@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled":1519,"@stdlib/math/base/special/gamma1pm1":1531,"@stdlib/math/base/special/gammainc":1541,"@stdlib/math/base/special/gammaincinv":1566,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/gcd":1597,"@stdlib/math/base/special/hacovercos":1599,"@stdlib/math/base/special/hacoversin":1601,"@stdlib/math/base/special/havercos":1603,"@stdlib/math/base/special/haversin":1605,"@stdlib/math/base/special/heaviside":1607,"@stdlib/math/base/special/hypot":1609,"@stdlib/math/base/special/int32-abs":1611,"@stdlib/math/base/special/inv":1612,"@stdlib/math/base/special/kernel-betainc":1621,"@stdlib/math/base/special/kernel-betaincinv":1629,"@stdlib/math/base/special/kernel-cos":1662,"@stdlib/math/base/special/kernel-sin":1666,"@stdlib/math/base/special/kernel-tan":1668,"@stdlib/math/base/special/kronecker-delta":1672,"@stdlib/math/base/special/lcm":1674,"@stdlib/math/base/special/ldexp":1676,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log":1683,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/log2":1693,"@stdlib/math/base/special/logit":1698,"@stdlib/math/base/special/lucas":1700,"@stdlib/math/base/special/max":1703,"@stdlib/math/base/special/maxabs":1705,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/minabs":1709,"@stdlib/math/base/special/minmax":1711,"@stdlib/math/base/special/modf":1714,"@stdlib/math/base/special/negafibonacci":1717,"@stdlib/math/base/special/negalucas":1720,"@stdlib/math/base/special/nonfibonacci":1723,"@stdlib/math/base/special/pdiff":1725,"@stdlib/math/base/special/polygamma":1729,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/powm1":1754,"@stdlib/math/base/special/rad2deg":1756,"@stdlib/math/base/special/ramp":1758,"@stdlib/math/base/special/rempio2":1760,"@stdlib/math/base/special/riemann-zeta":1766,"@stdlib/math/base/special/rising-factorial":1775,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/round10":1779,"@stdlib/math/base/special/round2":1781,"@stdlib/math/base/special/roundb":1783,"@stdlib/math/base/special/roundn":1785,"@stdlib/math/base/special/roundsd":1787,"@stdlib/math/base/special/sici":1789,"@stdlib/math/base/special/signum":1804,"@stdlib/math/base/special/sin":1806,"@stdlib/math/base/special/sinc":1808,"@stdlib/math/base/special/sincos":1810,"@stdlib/math/base/special/sincospi":1814,"@stdlib/math/base/special/sinh":1817,"@stdlib/math/base/special/sinpi":1820,"@stdlib/math/base/special/spence":1822,"@stdlib/math/base/special/sqrt":1826,"@stdlib/math/base/special/sqrt1pm1":1827,"@stdlib/math/base/special/tan":1829,"@stdlib/math/base/special/tanh":1831,"@stdlib/math/base/special/trigamma":1834,"@stdlib/math/base/special/trunc":1841,"@stdlib/math/base/special/trunc10":1843,"@stdlib/math/base/special/trunc2":1845,"@stdlib/math/base/special/truncb":1847,"@stdlib/math/base/special/truncn":1849,"@stdlib/math/base/special/truncsd":1851,"@stdlib/math/base/special/vercos":1853,"@stdlib/math/base/special/versin":1855,"@stdlib/math/base/special/wrap":1857,"@stdlib/math/base/special/xlog1py":1859,"@stdlib/math/base/special/xlogy":1861,"@stdlib/utils/define-read-only-property":1937}],1679:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm.
*
* @module @stdlib/math/base/special/ln
*
* @example
* var ln = require( '@stdlib/math/base/special/ln' );
*
* var v = ln( 4.0 );
* // returns ~1.386
*
* v = ln( 0.0 );
* // returns -Infinity
*
* v = ln( Infinity );
* // returns Infinity
*
* v = ln( NaN );
* // returns NaN
*
* v = ln( -4.0 );
* // returns NaN
*/

// MODULES //

var ln = require( './ln.js' );


// EXPORTS //

module.exports = ln;

},{"./ln.js":1680}],1680:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var polyvalP = require( './polyval_p.js' );
var polyvalQ = require( './polyval_q.js' );


// VARIABLES //

var LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000
var LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76
var TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000
var ONE_THIRD = 0.33333333333333333;

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation


// MAIN //

/**
* Evaluates the natural logarithm.
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = ln( 4.0 );
* // returns ~1.386
*
* @example
* var v = ln( 0.0 );
* // returns -Infinity
*
* @example
* var v = ln( Infinity );
* // returns Infinity
*
* @example
* var v = ln( NaN );
* // returns NaN
*
* @example
* var v = ln( -4.0 );
* // returns NaN
*/
function ln( x ) {
	var hfsq;
	var hx;
	var t2;
	var t1;
	var k;
	var R;
	var f;
	var i;
	var j;
	var s;
	var w;
	var z;

	if ( x === 0.0 ) {
		return NINF;
	}
	if ( isnan( x ) || x < 0.0 ) {
		return NaN;
	}
	hx = getHighWord( x );
	k = 0|0; // asm type annotation
	if ( hx < HIGH_MIN_NORMAL_EXP ) {
		// Case: 0 < x < 2**-1022
		k -= 54|0; // asm type annotation

		// Subnormal number, scale up `x`:
		x *= TWO54;
		hx = getHighWord( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += ( ( hx>>20 ) - BIAS )|0; // asm type annotation
	hx &= HIGH_SIGNIFICAND_MASK;
	i = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation

	// Normalize `x` or `x/2`...
	x = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );
	k += ( i>>20 )|0; // asm type annotation
	f = x - 1.0;
	if ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			if ( k === 0 ) {
				return 0.0;
			}
			return (k * LN2_HI) + (k * LN2_LO);
		}
		R = f * f * ( 0.5 - (ONE_THIRD*f) );
		if ( k === 0 ) {
			return f - R;
		}
		return (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;
	i = ( hx - 0x6147a )|0; // asm type annotation
	w = z * z;
	j = ( 0x6b851 - hx )|0; // asm type annotation
	t1 = w * polyvalP( w );
	t2 = z * polyvalQ( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		if ( k === 0 ) {
			return f - ( hfsq - (s * (hfsq+R)) );
		}
		return (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );
	}
	if ( k === 0 ) {
		return f - (s*(f-R));
	}
	return (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );
}


// EXPORTS //

module.exports = ln;

},{"./polyval_p.js":1681,"./polyval_q.js":1682,"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-high-word":1918}],1681:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1682:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1683:[function(require,module,exports){
'use strict';

/**
* Compute the base `b` logarithm.
*
* @module @stdlib/math/base/special/log
*
* @example
* var log = require( '@stdlib/math/base/special/log' );
*
* var v = log( 100.0, 10.0 );
* // returns 2.0
*
* v = log( 16.0, 2.0 );
* // returns 4.0
*
* v = log( 5.0, 1.0 );
* // returns Infinity
*/

// MODULES //

var log = require( './log.js' );


// EXPORTS //

module.exports = log;

},{"./log.js":1684}],1684:[function(require,module,exports){
'use strict';

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Computes the base `b` logarithm of `x`.
*
* @param {NonNegativeNumber} x - input value
* @param {NonNegativeNumber} b - base
* @returns {number} logarithm (base `b`)
*
* @example
* var v = log( 100.0, 10.0 );
* // returns 2.0
*
* @example
* var v = log( 16.0, 2.0 );
* // returns 4.0
*
* @example
* var v = log( 5.0, 1.0 );
* // returns Infinity
*
* @example
* var v = log( NaN, 2.0 );
* // returns NaN
*
* @example
* var v = log( 1.0, NaN );
* // returns NaN
*
* @example
* var v = log( -4.0, 2.0 );
* // returns NaN
*
* @example
* var v = log( 4.0, -2.0 );
* // returns NaN
*/
function log( x, b ) {
	return ln( x ) / ln( b );
}


// EXPORTS //

module.exports = log;

},{"@stdlib/math/base/special/ln":1679}],1685:[function(require,module,exports){
'use strict';

/**
* Evaluate the common logarithm (base ten).
*
* @module @stdlib/math/base/special/log10
*
* @example
* var log10 = require( '@stdlib/math/base/special/log10' );
*
* var v = log10( 100.0 );
* // returns 2.0
*
* v = log10( 8.0 );
* // returns ~0.903
*
* v = log10( 0.0 );
* // returns -Infinity
*
* v = log10( Infinity );
* // returns Infinity
*
* v = log10( NaN );
* // returns NaN
*
* v = log10( -4.0 );
* // returns NaN
*/

// MODULES //

var log10 = require( './log10.js' );


// EXPORTS //

module.exports = log10;

},{"./log10.js":1687}],1686:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var polyvalP = require( './polyval_p.js' );
var polyvalQ = require( './polyval_q.js' );


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 1/3
var ONE_THIRD = 0.33333333333333333;


// MAIN //

/**
* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function klog( x ) {
	var hfsq;
	var t1;
	var t2;
	var hx;
	var f;
	var s;
	var z;
	var R;
	var w;
	var i;
	var j;

	hx = getHighWord( x );
	f = x - 1.0;
	if ( ( HIGH_SIGNIFICAND_MASK & (2+hx) ) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			return 0.0;
		}
		return f * f * ( (ONE_THIRD*f) - 0.5 );
	}
	s = f / ( 2.0 + f );
	z = s * s;
	hx &= HIGH_SIGNIFICAND_MASK;
	i = (hx - 0x6147a)|0; // asm type annotation
	w = z * z;
	j = (0x6b851 - hx)|0; // asm type annotation
	t1 = w * polyvalP( w );
	t2 = z * polyvalQ( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		return ( s * (hfsq+R) ) - hfsq;
	}
	return s * (R-f);
}


// EXPORTS //

module.exports = klog;

},{"./polyval_p.js":1688,"./polyval_q.js":1689,"@stdlib/number/float64/base/get-high-word":1909}],1687:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log10.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var klog = require( './klog.js' );


// VARIABLES //

var TWO54 = 1.80143985094819840000e+16;     // 0x43500000, 0x00000000
var IVLN10HI = 4.34294481878168880939e-01;  // 0x3fdbcb7b, 0x15200000
var IVLN10LO = 2.50829467116452752298e-11;  // 0x3dbb9438, 0xca9aadd5
var LOG10_2HI = 3.01029995663611771306e-01; // 0x3FD34413, 0x509F6000
var LOG10_2LO = 3.69423907715893078616e-13; // 0x3D59FEF3, 0x11F12B36

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation


// MAIN //

/**
* Evaluates the common logarithm (base ten).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log10( 4.0 );
* // returns 2.0
*
* @example
* var v = log10( 8.0 );
* // returns 3.0
*
* @example
* var v = log10( 0.0 );
* // returns -Infinity
*
* @example
* var v = log10( Infinity );
* // returns Infinity
*
* @example
* var v = log10( NaN );
* // returns NaN
*
* @example
* var v = log10( -4.0 );
* // returns NaN
*/
function log10( x ) {
	var hi;
	var hx;
	var lo;
	var f;
	var i;
	var k;
	var y;
	var z;

	if ( isnan( x ) || x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return NINF;
	}
	hx = getHighWord( x );
	k = 0|0; // asm type annotation

	// Case: 0 < x < 2**-1022
	if ( hx < HIGH_MIN_NORMAL_EXP ) {
		// Subnormal number, scale up `x`...
		k -= 54|0; // asm type annotation
		x *= TWO54;
		hx = getHighWord( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += ((hx>>20) - BIAS)|0; // asm type annotation
	hx &= HIGH_SIGNIFICAND_MASK;
	i = ( (hx+0x95f64)&0x100000 )|0; // asm type annotation

	// Normalize `x` or `x/2`...
	x = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );
	k += (i>>20)|0; // asm type annotation
	y = k;
	f = klog( x );
	x -= 1;
	hi = setLowWord( x, 0.0 );
	lo = x - hi;
	z = (y*LOG10_2LO) + ( (x+f)*IVLN10LO );
	z += ( (lo+f)*IVLN10HI ) + ( hi*IVLN10HI );
	return z + ( y*LOG10_2HI );
}


// EXPORTS //

module.exports = log10;

},{"./klog.js":1686,"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-high-word":1918,"@stdlib/number/float64/base/set-low-word":1920}],1688:[function(require,module,exports){
arguments[4][1681][0].apply(exports,arguments)
},{"dup":1681}],1689:[function(require,module,exports){
arguments[4][1682][0].apply(exports,arguments)
},{"dup":1682}],1690:[function(require,module,exports){
'use strict';

/**
* Evaluate the natural logarithm of \\(1+x\\).
*
* @module @stdlib/math/base/special/log1p
*
* @example
* var log1p = require( '@stdlib/math/base/special/log1p' );
*
* var v = log1p( 4.0 );
* // returns ~1.609
*
* v = log1p( -1.0 );
* // returns -Infinity
*
* v = log1p( 0.0 );
* // returns 0.0
*
* v = log1p( -0.0 );
* // returns -0.0
*
* v = log1p( -2.0 );
* // returns NaN
*
* v = log1p( NaN );
* // returns NaN
*/

// MODULES //

var log1p = require( './log1p.js' );


// EXPORTS //

module.exports = log1p;

},{"./log1p.js":1691}],1691:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [netlib]{http://www.netlib.org/fdlibm/s_log1p.c}.
*
* The long comment and implementation follow the original, but have been reformatted and modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var highWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var polyval = require( './polyval_lp.js' );


// VARIABLES //

// High and low words of ln(2):
var LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000
var LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76

// sqrt(2)-1:
var SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34

// sqrt(2)/2-1:
var SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866

// 2**-29:
var SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000

// 2**-54:
var TINY = 5.551115123125783e-17;

// Max integer (unsafe) => 2**53:
var TWO53 = 9007199254740992;

// 2/3:
var TWO_THIRDS = 6.666666666666666666e-01;


// MAIN //

/**
* Evaluates the natural logarithm of \\(1+x\\).
*
* ## Method
*
* 1.  Argument Reduction: find \\(k\\) and \\(f\\) such that
*
*     ```tex
*     1+x = 2^k (1+f)
*     ```
*
*     where
*
*     ```tex
*     \frac{\sqrt{2}}{2} < 1+f < \sqrt{2}
*     ```
*
*     <!-- <note> -->
*
*     If \\(k=0\\), then \\(f=x\\) is exact. However, if \\(k \neq 0\\), then \\(f\\) may not be representable exactly. In that case, a correction term is needed. Let
*
*     ```tex
*     u = \operatorname{round}(1+x)
*     ```
*
*     and
*
*     ```tex
*     c = (1+x) - u
*     ```
*
*     then
*
*     ```tex
*     \ln (1+x) - \ln u \approx \frac{c}{u}
*     ```
*
*     We can thus proceed to compute \\(\ln(u)\\), and add back the correction term \\(c/u\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     When \\(x > 2^{53}\\), one can simply return \\(\ln(x)\\).
*
*     <!-- </note> -->
*
* 2.  Approximation of \\(\operatorname{log1p}(f)\\). Let
*
*     ```tex
*     s = \frac{f}{2+f}
*     ```
*
*     based on
*
*     ```tex
*     \begin{align*}
*     \ln 1+f &= \ln (1+s) - \ln (1-s) \\
*             &= 2s + \frac{2}{3} s^3 + \frac{2}{5} s^5 + ... \\
*             &= 2s + sR \\
*     \end{align*}
*     ```
*
*     We use a special Reme algorithm on \\(\[0,0.1716\]\\) to generate a polynomial of degree \\(14\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-58.45}\\). In other words,
*
*     ```tex
*     R(z) \approx \mathrm{Lp}_1 s^2 + \mathrm{Lp}_2 s^4 + \mathrm{Lp}_3 s^6 + \mathrm{Lp}_4 s^8 + \mathrm{Lp}_5 s^{10} + \mathrm{Lp}_6 s^{12} + \mathrm{Lp}_7 s^{14}
*     ```
*
*     and
*
*     ```tex
*     | \mathrm{Lp}_1 s^2 + \ldots + \mathrm{Lp}_7 s^14 - R(z) | \leq 2^{-58.45}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\(Lp1\\) to \\(Lp7\\) may be found in the source.
*
*     <!-- </note> -->
*
*     Note that
*
*     ```tex
*     \begin{align*}
*     2s &= f - sf \\
*        &= f - \frac{f^2}{2} + s \frac{f^2}{2} \\
*     \end{align*}
*     ```
*
*     In order to guarantee error in \\(\ln\\) below \\(1\ \mathrm{ulp}\\), we compute the log by
*
*     ```tex
*     \operatorname{log1p}(f) = f - \biggl(\frac{f^2}{2} - s\biggl(\frac{f^2}{2}+R\biggr)\biggr)
*     ```
*
* 3.  Finally,
*
*     ```tex
*     \begin{align*}
*     \operatorname{log1p}(x) &= k \cdot \mathrm{ln2} + \operatorname{log1p}(f) \\
*     &= k \cdot \mathrm{ln2}_{hi}+\biggl(f-\biggl(\frac{f^2}{2}-\biggl(s\biggl(\frac{f^2}{2}+R\biggr)+k \cdot \mathrm{ln2}_{lo}\biggr)\biggr)\biggr) \\
*     \end{align*}
*     ```
*
*     Here \\(\mathrm{ln2}\\) is split into two floating point numbers:
*
*     ```tex
*     \mathrm{ln2}_{hi} + \mathrm{ln2}_{lo}
*     ```
*
*     where \\(n \cdot \mathrm{ln2}_{hi}\\) is always exact for \\(|n| < 2000\\).
*
*
* ## Special Cases
*
* -   \\(\operatorname{log1p}(x) = \mathrm{NaN}\\) with signal if \\(x < -1\\) (including \\(-\infty\\))
* -   \\(\operatorname{log1p}(+\infty) = +\infty\\)
* -   \\(\operatorname{log1p}(-1) = -\infty\\) with signal
* -   \\(\operatorname{log1p}(\mathrm{NaN})= \mathrm{NaN}\\) with no signal
*
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.
*
* -   Assuming \\(\ln(x)\\) is accurate, the following algorithm can be used to evaluate \\(\operatorname{log1p}(x)\\) to within a few ULP:
*
*     ```javascript
*     var u = 1.0 + x;
*     if ( u === 1.0 ) {
*         return x;
*     } else {
*         return ln(u) * (x/(u-1.0));
*     }
*     ```
*
*     See HP-15C Advanced Functions Handbook, p.193.
*
*
* @param {number} x - input value
* @returns {number} the natural logarithm of `1+x`
*
* @example
* var v = log1p( 4.0 );
* // returns ~1.609
*
* @example
* var v = log1p( -1.0 );
* // returns -Infinity
*
* @example
* var v = log1p( 0.0 );
* // returns 0.0
*
* @example
* var v = log1p( -0.0 );
* // returns -0.0
*
* @example
* var v = log1p( -2.0 );
* // returns NaN
*
* @example
* var v = log1p( NaN );
* // returns NaN
*/
function log1p( x ) {
	var hfsq;
	var hu;
	var y;
	var f;
	var c;
	var s;
	var z;
	var R;
	var u;
	var k;

	if ( x < -1.0 || isnan( x ) ) {
		return NaN;
	}
	if ( x === -1.0 ) {
		return NINF;
	}
	if ( x === PINF ) {
		return x;
	}
	if ( x === 0.0 ) {
		return x; // handle +-0 (IEEE 754-2008 spec)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		y = -x;
	} else {
		y = x;
	}
	// Argument reduction...
	k = 1;

	// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...
	if ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422
		if ( y < SMALL ) { // if |x| < 2**-29
			if ( y < TINY ) { // if |x| < 2**-54
				return x;
			}
			// Use a simple two-term Taylor series...
			return x - ( x*x*0.5 );
		}
		// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...
		if ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929
			// => -0.2929 < x < 0.41422
			k = 0;
			f = x; // exact
			hu = 1;
		}
	}
	// Address case where `f` cannot be represented exactly...
	if ( k !== 0 ) {
		if ( y < TWO53 ) {
			u = 1.0 + x;
			hu = highWord( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - BIAS;

			// Correction term...
			if ( k > 0 ) { // positive unbiased exponent
				c = 1.0 - (u-x);
			} else { // nonpositive unbiased exponent
				c = x - (u-1.0);
			}
			c /= u;
		} else {
			u = x;
			hu = highWord( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - BIAS;

			// Correction term is zero:
			c = 0;
		}
		// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:
		hu &= 0x000fffff; // max value => 1048575

		// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110
		if ( hu < 434334 ) {
			// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000
			u = setHighWord( u, hu|0x3ff00000 );
		} else {
			k += 1;

			// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000
			u = setHighWord( u, hu|0x3fe00000 );

			// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576
			hu = (1048576-hu)>>2;
		}
		f = u - 1.0;
	}
	// Approximation of log1p(f)...
	hfsq = 0.5 * f * f;
	if ( hu === 0 ) { // if |f| < 2**-20
		if ( f === 0.0 ) {
			c += k * LN2_LO;
			return ( k * LN2_HI ) + c;
		}
		R = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division
		return ( k*LN2_HI ) - ( (R - ( (k*LN2_LO) + c)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;

	R = z * polyval( z );

	if ( k === 0 ) {
		return f - ( hfsq - ( s*(hfsq+R) ) );
	}
	return ( k*LN2_HI ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*LN2_LO) + c))) - f );
}


// EXPORTS //

module.exports = log1p;

},{"./polyval_lp.js":1692,"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-high-word":1918}],1692:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.3999999999940942 + (x * (0.2857142874366239 + (x * (0.22222198432149784 + (x * (0.1818357216161805 + (x * (0.15313837699209373 + (x * 0.14798198605116586))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1693:[function(require,module,exports){
'use strict';

/**
* Evaluate the binary logarithm (base two).
*
* @module @stdlib/math/base/special/log2
*
* @example
* var log2 = require( '@stdlib/math/base/special/log2' );
*
* var v = log2( 4.0 );
* // returns 2.0
*
* v = log2( 8.0 );
* // returns 3.0
*
* v = log2( 0.0 );
* // returns -Infinity
*
* v = log2( Infinity );
* // returns Infinity
*
* v = log2( NaN );
* // returns NaN
*
* v = log2( -4.0 );
* // returns NaN
*/

// MODULES //

var log2 = require( './log2.js' );


// EXPORTS //

module.exports = log2;

},{"./log2.js":1695}],1694:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var polyvalP = require( './polyval_p.js' );
var polyvalQ = require( './polyval_q.js' );


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 1/3
var ONE_THIRD = 0.33333333333333333;


// MAIN //

/**
* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function klog( x ) {
	var hfsq;
	var t1;
	var t2;
	var hx;
	var f;
	var s;
	var z;
	var R;
	var w;
	var i;
	var j;

	hx = getHighWord( x );
	f = x - 1.0;
	if ( ( HIGH_SIGNIFICAND_MASK & (2+hx) ) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			return 0.0;
		}
		return f * f * ( ( ONE_THIRD*f )- 0.5 );
	}
	s = f / ( 2.0 + f );
	z = s * s;
	hx &= HIGH_SIGNIFICAND_MASK;
	i = ( hx - 0x6147a )|0; // asm type annotation
	w = z * z;
	j = ( 0x6b851 - hx )|0; // asm type annotation
	t1 = w * polyvalP( w );
	t2 = z * polyvalQ( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		return ( s * (hfsq+R) ) - hfsq;
	}
	return s * (R-f);
}


// EXPORTS //

module.exports = klog;

},{"./polyval_p.js":1696,"./polyval_q.js":1697,"@stdlib/number/float64/base/get-high-word":1909}],1695:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log2.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var klog = require( './klog.js' );


// VARIABLES //

var TWO54 = 1.80143985094819840000e+16;   // 0x43500000, 0x00000000
var IVLN2HI = 1.44269504072144627571e+00; // 0x3ff71547, 0x65200000
var IVLN2LO = 1.67517131648865118353e-10; // 0x3de705fc, 0x2eefa200

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0|0, 0|0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the binary logarithm (base two).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log2( 4.0 );
* // returns 2.0
*
* @example
* var v = log2( 8.0 );
* // returns 3.0
*
* @example
* var v = log2( 0.0 );
* // returns -Infinity
*
* @example
* var v = log2( Infinity );
* // returns Infinity
*
* @example
* var v = log2( NaN );
* // returns NaN
*
* @example
* var v = log2( -4.0 );
* // returns NaN
*/
function log2( x ) {
	var hi;
	var lo;
	var hx;
	var lx;
	var f;
	var i;
	var k;

	if ( isnan( x ) || x < 0.0 ) {
		return NaN;
	}
	toWords( WORDS, x );
	hx = WORDS[ 0 ];
	lx = WORDS[ 1 ];
	k = 0|0; // asm type annotation
	if ( hx < HIGH_MIN_NORMAL_EXP ) {
		// Case: x < 2**-1022
		if ( ( (hx&ABS_MASK) | lx ) === 0 ) {
			return NINF;
		}
		k -= 54|0; // asm type annotation

		// Subnormal number, scale up x:
		x *= TWO54;
		hx = getHighWord( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += ( (hx>>20) - BIAS )|0; // asm type annotation
	hx &= HIGH_SIGNIFICAND_MASK;
	i = ( ( hx+0x95f64 ) & 0x100000 )|0; // asm type annotation

	// Normalize x or x/2...
	x = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );
	k += (i>>20)|0; // asm type annotation
	f = klog( x );
	x -= 1;
	hi = setLowWord( x, 0 );
	lo = x - hi;
	return ( (x+f)*IVLN2LO ) + ( (lo+f)*IVLN2HI ) + ( hi*IVLN2HI ) + k;
}


// EXPORTS //

module.exports = log2;

},{"./klog.js":1694,"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-nan":128,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-high-word":1918,"@stdlib/number/float64/base/set-low-word":1920,"@stdlib/number/float64/base/to-words":1925}],1696:[function(require,module,exports){
arguments[4][1681][0].apply(exports,arguments)
},{"dup":1681}],1697:[function(require,module,exports){
arguments[4][1682][0].apply(exports,arguments)
},{"dup":1682}],1698:[function(require,module,exports){
'use strict';

/**
* Evaluate the logit function.
*
* @module @stdlib/math/base/special/logit
*
* @example
* var logit = require( '@stdlib/math/base/special/logit' );
*
* var y = logit( 0.2 );
* // returns ~-1.386
*
* y = logit( 0.9 );
* // returns ~2.197
*
* y = logit( -4.0 );
* // returns NaN
*
* y = logit( 1.5 );
* // returns NaN
*
* y = logit( NaN );
* // returns NaN
*/

// MODULES //

var logit = require( './logit.js' );


// EXPORTS //

module.exports = logit;

},{"./logit.js":1699}],1699:[function(require,module,exports){
'use strict';

// MODULES //

var isProbability = require( '@stdlib/math/base/assert/is-probability' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Evaluates the logit function.
*
* @param {Probability} p - input value
* @returns {number} function value
*
* @example
* var y = logit( 0.2 );
* // returns ~-1.386
*
* @example
* var y = logit( 0.9 );
* // returns ~2.197
*
* @example
* var y = logit( -4.0 );
* // returns NaN
*
* @example
* var y = logit( 1.5 );
* // returns NaN
*
* @example
* var y = logit( NaN );
* // returns NaN
*/
function logit( p ) {
	if ( isnan( p ) ) {
		return p;
	}
	if ( !isProbability( p ) ) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return NINF;
	}
	if ( p === 1.0 ) {
		return PINF;
	}
	return ln( p / ( 1.0-p ) );
}


// EXPORTS //

module.exports = logit;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-probability":144,"@stdlib/math/base/special/ln":1679}],1700:[function(require,module,exports){
'use strict';

/**
* Compute the nth Lucas number.
*
* @module @stdlib/math/base/special/lucas
*
* @example
* var lucas = require( '@stdlib/math/base/special/lucas' );
*
* var y = lucas( 0 );
* // returns 2
*
* y = lucas( 1 );
* // returns 1
*
* y = lucas( 2 );
* // returns 3
*
* y = lucas( 3 );
* // returns 4
*
* y = lucas( 4 );
* // returns 7
*
* y = lucas( 5 );
* // returns 11
*
* y = lucas( 6 );
* // returns 18
*/

// MODULES //

var lucas = require( './main.js' );


// EXPORTS //

module.exports = lucas;

},{"./main.js":1702}],1701:[function(require,module,exports){
module.exports=[2,1,3,4,7,11,18,29,47,76,123,199,322,521,843,1364,2207,3571,5778,9349,15127,24476,39603,64079,103682,167761,271443,439204,710647,1149851,1860498,3010349,4870847,7881196,12752043,20633239,33385282,54018521,87403803,141422324,228826127,370248451,599074578,969323029,1568397607,2537720636,4106118243,6643838879,10749957122,17393796001,28143753123,45537549124,73681302247,119218851371,192900153618,312119004989,505019158607,817138163596,1322157322203,2139295485799,3461452808002,5600748293801,9062201101803,14662949395604,23725150497407,38388099893011,62113250390418,100501350283429,162614600673847,263115950957276,425730551631123,688846502588399,1114577054219522,1803423556807921,2918000611027443,4721424167835364,7639424778862807]

},{}],1702:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var MAX_LUCAS = require( '@stdlib/constants/math/float64-max-safe-nth-lucas' );
var LUCAS = require( './lucas.json' );


// MAIN //

/**
* Computes the nth Lucas number.
*
* @param {NonNegativeInteger} n - the Lucas number to compute
* @returns {NonNegativeInteger} Lucas number
*
* @example
* var y = lucas( 0 );
* // returns 2
*
* @example
* var y = lucas( 1 );
* // returns 1
*
* @example
* var y = lucas( 2 );
* // returns 3
*
* @example
* var y = lucas( 3 );
* // returns 4
*
* @example
* var y = lucas( 4 );
* // returns 7
*
* @example
* var y = lucas( 5 );
* // returns 11
*
* @example
* var y = lucas( 6 );
* // returns 18
*
* @example
* var y = lucas( NaN );
* // returns NaN
*
* @example
* var y = lucas( 3.14 );
* // returns NaN
*
* @example
* var y = lucas( -1.0 );
* // returns NaN
*/
function lucas( n ) {
	if (
		isnan( n ) ||
		isInteger( n ) === false ||
		n < 0 ||
		n > MAX_LUCAS
	) {
		return NaN;
	}
	return LUCAS[ n ];
}


// EXPORTS //

module.exports = lucas;

},{"./lucas.json":1701,"@stdlib/constants/math/float64-max-safe-nth-lucas":90,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128}],1703:[function(require,module,exports){
'use strict';

/**
* Return the maximum value.
*
* @module @stdlib/math/base/special/max
*
* @example
* var max = require( '@stdlib/math/base/special/max' );
*
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = max( 3.14, NaN );
* // returns NaN
*
* v = max( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

var max = require( './max.js' );


// EXPORTS //

module.exports = max;

},{"./max.js":1704}],1704:[function(require,module,exports){
'use strict';

// MODULES //

var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the maximum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum value
*
* @example
* var v = max( 3.14, 4.2 );
* // returns 4.2

* @example
* var v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = max( 3.14, NaN );
* // returns NaN
*
* @example
* var v = max( +0.0, -0.0 );
* // returns +0.0
*/
function max( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( isnan( x ) || isnan( y ) ) {
			return NaN;
		}
		if ( x === PINF || y === PINF ) {
			return PINF;
		}
		if ( x === y && x === 0.0 ) {
			if ( isPositiveZero( x ) ) {
				return x;
			}
			return y;
		}
		if ( x > y ) {
			return x;
		}
		return y;
	}
	m = NINF;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( isnan( v ) || v === PINF ) {
			return v;
		}
		if ( v > m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			isPositiveZero( v )
		) {
			m = v;
		}
	}
	return m;
}


// EXPORTS //

module.exports = max;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-positive-zero":142}],1705:[function(require,module,exports){
'use strict';

/**
* Return the maximum absolute value.
*
* @module @stdlib/math/base/special/maxabs
*
* @example
* var maxabs = require( '@stdlib/math/base/special/maxabs' );
*
* var v = maxabs( 3.14, -4.2 );
* // returns 4.2
*
* v = maxabs( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = maxabs( 3.14, NaN );
* // returns NaN
*
* v = maxabs( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

var maxabs = require( './maxabs.js' );


// EXPORTS //

module.exports = maxabs;

},{"./maxabs.js":1706}],1706:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var max = require( '@stdlib/math/base/special/max' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the maximum absolute value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum absolute value
*
* @example
* var v = maxabs( 3.14, -4.2 );
* // returns 4.2

* @example
* var v = maxabs( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = maxabs( 3.14, NaN );
* // returns NaN
*
* @example
* var v = maxabs( +0.0, -0.0 );
* // returns +0.0
*/
function maxabs( x, y ) {
	var nargs;
	var args;
	var i;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		return PINF;
	}
	if ( nargs === 2 ) {
		return max( abs( x ), abs( y ) );
	}
	args = new Array( nargs );
	for ( i = 0; i < nargs; i++ ) {
		args[ i ] = abs( arguments[ i ] );
	}
	return max.apply( null, args );
}


// EXPORTS //

module.exports = maxabs;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/max":1703}],1707:[function(require,module,exports){
'use strict';

/**
* Return the minimum value.
*
* @module @stdlib/math/base/special/min
*
* @example
* var min = require( '@stdlib/math/base/special/min' );
*
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns -0.0
*/

// MODULES //

var min = require( './min.js' );


// EXPORTS //

module.exports = min;

},{"./min.js":1708}],1708:[function(require,module,exports){
'use strict';

// MODULES //

var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the minimum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum value
*
* @example
* var v = min( 3.14, 4.2 );
* // returns 3.14

* @example
* var v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 3.14, NaN );
* // returns NaN
*
* @example
* var v = min( +0.0, -0.0 );
* // returns -0.0
*/
function min( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( isnan( x ) || isnan( y ) ) {
			return NaN;
		}
		if ( x === NINF || y === NINF ) {
			return NINF;
		}
		if ( x === y && x === 0.0 ) {
			if ( isNegativeZero( x ) ) {
				return x;
			}
			return y;
		}
		if ( x < y ) {
			return x;
		}
		return y;
	}
	m = PINF;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( isnan( v ) || v === NINF ) {
			return v;
		}
		if ( v < m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			isNegativeZero( v )
		) {
			m = v;
		}
	}
	return m;
}


// EXPORTS //

module.exports = min;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-negative-zero":132}],1709:[function(require,module,exports){
'use strict';

/**
* Return the minimum absolute value.
*
* @module @stdlib/math/base/special/minabs
*
* @example
* var minabs = require( '@stdlib/math/base/special/minabs' );
*
* var v = minabs( -3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

var minabs = require( './minabs.js' );


// EXPORTS //

module.exports = minabs;

},{"./minabs.js":1710}],1710:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var min = require( '@stdlib/math/base/special/min' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the minimum absolute value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum absolute value
*
* @example
* var v = minabs( -3.14, 4.2 );
* // returns 3.14

* @example
* var v = minabs( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = minabs( 3.14, NaN );
* // returns NaN
*
* @example
* var v = minabs( +0.0, -0.0 );
* // returns +0.0
*/
function minabs( x, y ) {
	var nargs;
	var args;
	var i;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		return PINF;
	}
	if ( nargs === 2 ) {
		return min( abs( x ), abs( y ) );
	}
	args = new Array( nargs );
	for ( i = 0; i < nargs; i++ ) {
		args[ i ] = abs( arguments[ i ] );
	}
	return min.apply( null, args );
}


// EXPORTS //

module.exports = minabs;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/min":1707}],1711:[function(require,module,exports){
'use strict';

/**
* Return the minimum and maximum values.
*
* @module @stdlib/math/base/special/minmax
*
* @example
* var minmax = require( '@stdlib/math/base/special/minmax' );
*
* var v = minmax( 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* v = minmax( 5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* v = minmax( 3.14, NaN );
* // returns [ NaN, NaN ]
*
* v = minmax( +0.0, -0.0 );
* // returns [ -0.0, +0.0 ]
*
* v = minmax( 3.14 );
* // returns [ 3.14, 3.14 ]
*/

// MODULES //

var minmax = require( './main.js' );


// EXPORTS //

module.exports = minmax;

},{"./main.js":1712}],1712:[function(require,module,exports){
'use strict';

// MODULES //

var compute = require( './minmax.js' );


// MAIN //

/**
* Returns the minimum and maximum values.
*
* @param {(Array|TypedArray|Object)} [out] - output object
* @param {number} x - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {(Array|TypedArray|Object)} minimum and maximum values
*
* @example
* var v = minmax( 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, 5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var v = minmax( 3.14, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var v = minmax( +0.0, -0.0 );
* // returns [ -0.0, +0.0 ]
*/
function minmax( out, x, y ) {
	var bool;
	var args;
	var len;
	var i;
	var j;

	len = arguments.length;
	if ( len === 1 ) {
		return compute( new Array( 2 ), out );
	}
	bool = ( typeof arguments[ 0 ] === 'number' );
	if ( len === 2 ) {
		if ( bool ) {
			return compute( new Array( 2 ), out, x );
		}
		return compute( out, x );
	}
	if ( len === 3 ) {
		if ( bool ) {
			return compute( new Array( 2 ), out, x, y );
		}
		return compute( out, x, y );
	}
	if ( bool ) {
		args = new Array( len+1 );
		args[ 0 ] = new Array( 2 );
		i = 0;
	} else {
		args = new Array( len );
		args[ 0 ] = arguments[ 0 ];
		i = 1;
	}
	j = 1;
	for ( ; i < len; i++ ) {
		args[ j ] = arguments[ i ];
		j += 1;
	}
	return compute.apply( null, args );
}


// EXPORTS //

module.exports = minmax;

},{"./minmax.js":1713}],1713:[function(require,module,exports){
'use strict';

// MODULES //

var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Returns the minimum and maximum values.
*
* @private
* @param {(Array|TypedArray|Object)} out - output object
* @param {number} x - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {(Array|TypedArray|Object)} minimum and maximum values
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, 3.14, 4.2 );
* // returns [ 3.14, 4.2 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, 5.9, 3.14, 4.2 );
* // returns [ 3.14, 5.9 ]
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, 3.14, NaN );
* // returns [ NaN, NaN ]
*
* @example
* var out = new Array( 2 );
* var v = minmax( out, +0.0, -0.0 );
* // returns [ -0.0, +0.0 ]
*/
function minmax( out, x, y ) {
	var len;
	var min;
	var max;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		out[ 0 ] = x;
		out[ 1 ] = x;
		return out;
	}
	if ( len === 3 ) {
		if ( isnan( x ) || isnan( y ) ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		if ( x === y && x === 0.0 ) {
			if ( isNegativeZero( x ) ) {
				out[ 0 ] = x;
				out[ 1 ] = y;
				return out;
			}
			out[ 0 ] = y;
			out[ 1 ] = x;
			return out;
		}
		if ( x < y ) {
			out[ 0 ] = x;
			out[ 1 ] = y;
			return out;
		}
		out[ 0 ] = y;
		out[ 1 ] = x;
		return out;
	}
	min = PINF;
	max = NINF;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( isnan( v ) ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		if ( v < min ) {
			min = v;
		} else if (
			v === 0.0 &&
			v === min &&
			isNegativeZero( v )
		) {
			min = v;
		}
		if ( v > max ) {
			max = v;
		} else if (
			v === 0.0 &&
			v === max &&
			isPositiveZero( v )
		) {
			max = v;
		}
	}
	out[ 0 ] = min;
	out[ 1 ] = max;
	return out;
}


// EXPORTS //

module.exports = minmax;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-negative-zero":132,"@stdlib/math/base/assert/is-positive-zero":142}],1714:[function(require,module,exports){
'use strict';

/**
* Decompose a double-precision floating-point number into integral and fractional parts.
*
* @module @stdlib/math/base/special/modf
*
* @example
* var modf = require( '@stdlib/math/base/special/modf' );
*
* var parts = modf( 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var modf = require( '@stdlib/math/base/special/modf' );
*
* var out = new Float64Array( 2 );
*
* var parts = modf( out, 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*
* var bool = ( parts === out );
* // returns true
*/

// MODULES //

var modf = require( './main.js' );


// EXPORTS //

module.exports = modf;

},{"./main.js":1715}],1715:[function(require,module,exports){
'use strict';

// MODULES //

var fcn = require( './modf.js' );


// MAIN //

/**
* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var parts = modf( 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var parts = modf( out, 3.14 );
* // returns <Float64Array>[ 3.0, 0.14000000000000012 ]
*
* var bool = ( parts === out );
* // returns true
*/
function modf( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0.0, 0.0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = modf;

},{"./modf.js":1716}],1716:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' ); // eslint-disable-line id-length
var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/constants/math/float64-high-word-significand-mask' ); // eslint-disable-line id-length


// VARIABLES //

// 4294967295 => 0xffffffff => 11111111111111111111111111111111
var ALL_ONES = 4294967295>>>0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0|0, 0|0 ]; // WARNING: not thread safe


// MAIN //

/**
* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var parts = modf( new Array( 2 ), 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*/
function modf( out, x ) {
	var high;
	var low;
	var exp;
	var i;

	// Special cases...
	if ( x < 1.0 ) {
		if ( x < 0.0 ) {
			modf( out, -x );
			out[ 0 ] *= -1.0;
			out[ 1 ] *= -1.0;
			return out;
		}
		if ( x === 0.0 ) { // [ +-0, +-0 ]
			out[ 0 ] = x;
			out[ 1 ] = x;
			return out;
		}
		out[ 0 ] = 0.0;
		out[ 1 ] = x;
		return out;
	}
	if ( isnan( x ) ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( x === PINF ) {
		out[ 0 ] = PINF;
		out[ 1 ] = 0.0;
		return out;
	}
	// Decompose |x|...

	// Extract the high and low words:
	toWords( WORDS, x );
	high = WORDS[ 0 ];
	low = WORDS[ 1 ];

	// Extract the unbiased exponent from the high word:
	exp = ((high & FLOAT64_HIGH_WORD_EXPONENT_MASK) >> 20)|0; // asm type annotation
	exp -= FLOAT64_EXPONENT_BIAS|0; // asm type annotation

	// Handle smaller values (x < 2**20 = 1048576)...
	if ( exp < 20 ) {
		i = (FLOAT64_HIGH_WORD_SIGNIFICAND_MASK >> exp)|0; // asm type annotation

		// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...
		if ( ((high&i)|low) === 0 ) {
			out[ 0 ] = x;
			out[ 1 ] = 0.0;
			return out;
		}
		// Turn off all the bits which cannot be exponentiated away:
		high &= (~i);

		// Generate the integral part:
		i = fromWords( high, 0 );

		// The fractional part is whatever is leftover:
		out[ 0 ] = i;
		out[ 1 ] = x - i;
		return out;
	}
	// Check if `x` can even have a fractional part...
	if ( exp > 51 ) {
		// `x` is integral:
		out[ 0 ] = x;
		out[ 1 ] = 0.0;
		return out;
	}
	i = ALL_ONES >>> (exp-20);

	// Determine if `x` is integral by checking for less significant significand bits which cannot be exponentiated away...
	if ( (low&i) === 0 ) {
		out[ 0 ] = x;
		out[ 1 ] = 0.0;
		return out;
	}
	// Turn off all the bits which cannot be exponentiated away:
	low &= (~i);

	// Generate the integral part:
	i = fromWords( high, low );

	// The fractional part is whatever is leftover:
	out[ 0 ] = i;
	out[ 1 ] = x - i;
	return out;
}


// EXPORTS //

module.exports = modf;

},{"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-high-word-exponent-mask":77,"@stdlib/constants/math/float64-high-word-significand-mask":78,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/number/float64/base/from-words":1905,"@stdlib/number/float64/base/to-words":1925}],1717:[function(require,module,exports){
'use strict';

/**
* Compute the nth negaFibonacci number.
*
* @module @stdlib/math/base/special/negafibonacci
*
* @example
* var negafibonacci = require( '@stdlib/math/base/special/negafibonacci' );
*
* var y = negafibonacci( 0 );
* // returns 0
*
* y = negafibonacci( -1 );
* // returns 1
*
* y = negafibonacci( -2 );
* // returns -1
*
* y = negafibonacci( -3 );
* // returns 2
*
* y = negafibonacci( -4 );
* // returns -3
*
* y = negafibonacci( -5 );
* // returns 5
*
* y = negafibonacci( -6 );
* // returns -8
*/

// MODULES //

var negafibonacci = require( './negafibonacci.js' );


// EXPORTS //

module.exports = negafibonacci;

},{"./negafibonacci.js":1719}],1718:[function(require,module,exports){
module.exports=[0,1,-1,2,-3,5,-8,13,-21,34,-55,89,-144,233,-377,610,-987,1597,-2584,4181,-6765,10946,-17711,28657,-46368,75025,-121393,196418,-317811,514229,-832040,1346269,-2178309,3524578,-5702887,9227465,-14930352,24157817,-39088169,63245986,-102334155,165580141,-267914296,433494437,-701408733,1134903170,-1836311903,2971215073,-4807526976,7778742049,-12586269025,20365011074,-32951280099,53316291173,-86267571272,139583862445,-225851433717,365435296162,-591286729879,956722026041,-1548008755920,2504730781961,-4052739537881,6557470319842,-10610209857723,17167680177565,-27777890035288,44945570212853,-72723460248141,117669030460994,-190392490709135,308061521170129,-498454011879264,806515533049393,-1304969544928657,2111485077978050,-3416454622906707,5527939700884757,-8944394323791464]

},{}],1719:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var abs = require( '@stdlib/math/base/special/abs' );
var MAX_FIBONACCI = require( '@stdlib/constants/math/float64-max-safe-nth-fibonacci' );
var NEGAFIBONACCI = require( './negafibonacci.json' );


// MAIN //

/**
* Computes the nth negaFibonacci number.
*
* @param {NonPositiveInteger} n - the negaFibonacci number to compute
* @returns {integer} negaFibonacci number
*
* @example
* var y = negafibonacci( 0 );
* // returns 0
*
* @example
* var y = negafibonacci( -1 );
* // returns 1
*
* @example
* var y = negafibonacci( -2 );
* // returns -1
*
* @example
* var y = negafibonacci( -3 );
* // returns 2
*
* @example
* var y = negafibonacci( -4 );
* // returns -3
*
* @example
* var y = negafibonacci( -5 );
* // returns 5
*
* @example
* var y = negafibonacci( -6 );
* // returns -8
*
* @example
* var y = negafibonacci( NaN );
* // returns NaN
*
* @example
* var y = negafibonacci( -3.14 );
* // returns NaN
*
* @example
* var y = negafibonacci( -1.0 );
* // returns NaN
*/
function negafibonacci( n ) {
	var an;
	if (
		isnan( n ) ||
		isInteger( n ) === false ||
		n > 0
	) {
		return NaN;
	}
	an = abs( n );
	if ( an > MAX_FIBONACCI ) {
		return NaN;
	}
	return NEGAFIBONACCI[ an ];
}


// EXPORTS //

module.exports = negafibonacci;

},{"./negafibonacci.json":1718,"@stdlib/constants/math/float64-max-safe-nth-fibonacci":89,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298}],1720:[function(require,module,exports){
'use strict';

/**
* Compute the nth negaLucas number.
*
* @module @stdlib/math/base/special/negalucas
*
* @example
* var negalucas = require( '@stdlib/math/base/special/negalucas' );
*
* var y = negalucas( 0 );
* // returns 2
*
* y = negalucas( -1 );
* // returns -1
*
* y = negalucas( -2 );
* // returns 3
*
* y = negalucas( -3 );
* // returns -4
*
* y = negalucas( -4 );
* // returns 7
*
* y = negalucas( -5 );
* // returns -11
*
* y = negalucas( -6 );
* // returns 18
*/

// MODULES //

var negalucas = require( './main.js' );


// EXPORTS //

module.exports = negalucas;

},{"./main.js":1721}],1721:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var abs = require( '@stdlib/math/base/special/abs' );
var MAX_LUCAS = require( '@stdlib/constants/math/float64-max-safe-nth-lucas' );
var NEGALUCAS = require( './negalucas.json' );


// MAIN //

/**
* Computes the nth negaLucas number.
*
* @param {NonPositiveInteger} n - the negaLucas number to compute
* @returns {integer} negaLucas number
*
* @example
* var y = negalucas( 0 );
* // returns 2
*
* @example
* var y = negalucas( -1 );
* // returns -1
*
* @example
* var y = negalucas( -2 );
* // returns 3
*
* @example
* var y = negalucas( -3 );
* // returns -4
*
* @example
* var y = negalucas( -4 );
* // returns 7
*
* @example
* var y = negalucas( -5 );
* // returns -11
*
* @example
* var y = negalucas( -6 );
* // returns 18
*
* @example
* var y = negalucas( NaN );
* // returns NaN
*
* @example
* var y = negalucas( -3.14 );
* // returns NaN
*
* @example
* var y = negalucas( -1.0 );
* // returns NaN
*/
function negalucas( n ) {
	var an;
	if (
		isnan( n ) ||
		isInteger( n ) === false ||
		n > 0
	) {
		return NaN;
	}
	an = abs( n );
	if ( an > MAX_LUCAS ) {
		return NaN;
	}
	return NEGALUCAS[ an ];
}


// EXPORTS //

module.exports = negalucas;

},{"./negalucas.json":1722,"@stdlib/constants/math/float64-max-safe-nth-lucas":90,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298}],1722:[function(require,module,exports){
module.exports=[2,-1,3,-4,7,-11,18,-29,47,-76,123,-199,322,-521,843,-1364,2207,-3571,5778,-9349,15127,-24476,39603,-64079,103682,-167761,271443,-439204,710647,-1149851,1860498,-3010349,4870847,-7881196,12752043,-20633239,33385282,-54018521,87403803,-141422324,228826127,-370248451,599074578,-969323029,1568397607,-2537720636,4106118243,-6643838879,10749957122,-17393796001,28143753123,-45537549124,73681302247,-119218851371,192900153618,-312119004989,505019158607,-817138163596,1322157322203,-2139295485799,3461452808002,-5600748293801,9062201101803,-14662949395604,23725150497407,-38388099893011,62113250390418,-100501350283429,162614600673847,-263115950957276,425730551631123,-688846502588399,1114577054219522,-1803423556807921,2918000611027443,-4721424167835364,7639424778862807]

},{}],1723:[function(require,module,exports){
'use strict';

/**
* Compute the nth non-Fibonacci number.
*
* @module @stdlib/math/base/special/nonfibonacci
*
* @example
* var nonfibonacci = require( '@stdlib/math/base/special/nonfibonacci' );
*
* var v = nonfibonacci( 1 );
* // returns 4
*
* v = nonfibonacci( 2 );
* // returns 6
*
* v = nonfibonacci( 3 );
* // returns 7
*/

// MODULES //

var nonfibonacci = require( './main.js' );


// EXPORTS //

module.exports = nonfibonacci;

},{"./main.js":1724}],1724:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var ln = require( '@stdlib/math/base/special/ln' );
var floor = require( '@stdlib/math/base/special/floor' );
var PHI = require( '@stdlib/constants/math/float64-phi' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// VARIABLES //

var SQRT_5 = 2.23606797749979;
var LN_PHI = ln( PHI );


// MAIN //

/**
* Computes the nth non-Fibonacci number.
*
* ## References
*
* -   Gould, H.W. 1965. "Non-Fibonacci Numbers." _Fibonacci Quarterly_, no. 3: 177–83. <http://www.fq.math.ca/Scanned/3-3/gould.pdf>.
* -   Farhi, Bakir. 2011. "An explicit formula generating the non-Fibonacci numbers." _arXiv_ abs/1105.1127 \[Math.NT\] (May): 1–5. <https://arxiv.org/abs/1105.1127>.
*
*
* @param {NonNegativeInteger} n - the non-Fibonacci number to compute
* @returns {NonNegativeInteger} non-Fibonacci number
*
* @example
* var v = nonfibonacci( 1 );
* // returns 4
*
* @example
* var v = nonfibonacci( 2 );
* // returns 6
*
* @example
* var v = nonfibonacci( 3 );
* // returns 7
*
* @example
* var v = nonfibonacci( NaN );
* // returns NaN
*
* @example
* var v = nonfibonacci( 3.14 );
* // returns NaN
*
* @example
* var v = nonfibonacci( -1 );
* // returns NaN
*/
function nonfibonacci( n ) {
	var a;
	var b;
	if (
		isnan( n ) ||
		isInteger( n ) === false ||
		n < 1 ||
		n === PINF
	) {
		return NaN;
	}
	n += 1;
	a = ln( n * SQRT_5 ) / LN_PHI;
	b = ln( (SQRT_5 * (n+a)) - 5.0 + (3.0/n) ) / LN_PHI;
	return floor( n + b - 2.0 );
}


// EXPORTS //

module.exports = nonfibonacci;

},{"@stdlib/constants/math/float64-phi":99,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ln":1679}],1725:[function(require,module,exports){
'use strict';

/**
* Return the positive difference between `x` and `y` if `x > y`; otherwise, return `0`.
*
* @module @stdlib/math/base/special/pdiff
*
* @example
* var pdiff = require( '@stdlib/math/base/special/pdiff' );
*
* var v = pdiff( 5.9, 3.14 );
* // returns 2.76
*
* v = pdiff( 3.14, 4.2 );
* // returns 0.0
*
* v = pdiff( 3.14, NaN );
* // returns NaN
*
* v = pdiff( -0.0, +0.0 );
* // returns +0.0
*/

// MODULES //

var pdiff = require( './pdiff.js' );


// EXPORTS //

module.exports = pdiff;

},{"./pdiff.js":1726}],1726:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Returns the positive difference between `x` and `y` if `x > y`; otherwise, returns `0`.
*
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} positive difference

* @example
* var v = pdiff( 5.9, 3.14 );
* // returns 2.76
*
* @example
* var v = pdiff( 3.14, 4.2 );
* // returns 0.0
*
* @example
* var v = pdiff( 3.14, NaN );
* // returns NaN
*
* @example
* var v = pdiff( -0.0, +0.0 );
* // returns +0.0
*/
function pdiff( x, y ) {
	if ( isnan( x ) || isnan( y ) ) {
		return NaN;
	}
	if ( x > y ) {
		return x - y;
	}
	return 0.0;
}


// EXPORTS //

module.exports = pdiff;

},{"@stdlib/math/base/assert/is-nan":128}],1727:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}.
*
* The implementation follows the original but has been reformatted and modified for JavaScript.
*/

/*
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var logger = require( 'debug' );
var bernoulli = require( '@stdlib/math/base/special/bernoulli' );
var factorial = require( '@stdlib/math/base/special/factorial' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var LN_TWO = require( '@stdlib/constants/math/float64-ln-two' );
var EPS = require( '@stdlib/constants/math/float64-eps' );


// VARIABLES //

var debug = logger( 'polygamma' );
var MAX_SERIES_ITERATIONS = 1000000;
var MAX_FACTORIAL = 172;


// MAIN //

/**
* Evaluates the polygamma function for large values of `x` such as for `x > 400`.
*
* @private
* @see {@link http://functions.wolfram.com/GammaBetaErf/PolyGamma2/06/02/0001/}
* @param {PositiveInteger} n - derivative to evaluate
* @param {number} x - input
* @returns {number} (n+1)'th derivative
*/
function atinfinityplus( n, x ) {
	var partTerm; // Value of current term excluding the Bernoulli number part
	var xsquared;
	var term; // Value of current term to be added to sum
	var sum; // Current value of accumulated sum
	var nlx;
	var k2;
	var k;

	if ( n+x === x ) {
		// If `x` is very large, just concentrate on the first part of the expression and use logs:
		if ( n === 1 ) {
			return 1.0 / x;
		}
		nlx = n * ln( x );
		if ( nlx < MAX_LN && n < MAX_FACTORIAL ) {
			return ( (n & 1) ? 1.0 : -1.0 ) * factorial( n-1 ) * pow( x, -n );
		}
		return ( (n & 1) ? 1.0 : -1.0 ) * exp( gammaln( n ) - ( n*ln(x) ) );
	}
	xsquared = x * x;

	// Start by setting `partTerm` to `(n-1)! / x^(n+1)`, which is common to both the first term of the series (with k = 1) and to the leading part. We can then get to the leading term by: `partTerm * (n + 2 * x) / 2` and to the first term in the series (excluding the Bernoulli number) by: `partTerm n * (n + 1) / (2x)`. If either the factorial would over- or the power term underflow, set `partTerm` to 0 and then we know that we have to use logs for the initial terms:
	if ( n > MAX_FACTORIAL && n*n > MAX_LN ) {
		partTerm = 0.0;
	} else {
		partTerm = factorial( n-1 ) * pow( x, -n-1 );
	}
	if ( partTerm === 0.0 ) {
		// Either `n` is very large, or the power term underflows. Set the initial values of `partTerm`, `term`, and `sum` via logs:
		partTerm = gammaln(n) - ( (n+1) * ln(x) );
		sum = exp( partTerm + ln( n + (2.0*x) ) - LN_TWO );
		partTerm += ln( n*(n+1) ) - LN_TWO - ln(x);
		partTerm = exp( partTerm );
	} else {
		sum = partTerm * ( n+(2.0*x) ) / 2.0;
		partTerm *= ( n*(n+1) ) / 2.0;
		partTerm /= x;
	}
	// If the leading term is 0, so is the result:
	if ( sum === 0.0 ) {
		return sum;
	}
	for ( k = 1; ; ) {
		term = partTerm * bernoulli( k*2 );
		sum += term;

		// Normal termination condition:
		if ( abs( term/sum ) < EPS ) {
			break;
		}

		// Increment our counter, and move `partTerm` on to the next value:
		k += 1;
		k2 = 2 * k;
		partTerm *= ( n+k2-2 ) * ( n-1+k2 );
		partTerm /= ( k2-1 ) * k2;
		partTerm /= xsquared;
		if ( k > MAX_SERIES_ITERATIONS ) {
			debug( 'Series did not converge, closest value was: %d.', sum );
			return NaN;
		}
	}
	if ( ( n-1 ) & 1 ) {
		sum = -sum;
	}
	return sum;
}


// EXPORTS //

module.exports = atinfinityplus;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/constants/math/float64-ln-two":83,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/bernoulli":1333,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/factorial":1471,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"debug":1975}],1728:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}.
*
* The implementation follows the original but has been reformatted and modified for JavaScript.
*/

/*
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var logger = require( 'debug' );
var factorial = require( '@stdlib/math/base/special/factorial' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var atinfinityplus = require( './atinfinityplus.js' );


// VARIABLES //

var debug = logger( 'polygamma' );
var MAX_SERIES_ITERATIONS = 1000000;
var DIGITS_BASE10 = 19;


// MAIN //

/**
* Evaluates the polygamma function.
*
* @private
* @see {@link http://functions.wolfram.com/GammaBetaErf/PolyGamma2/16/01/01/0017/}
* @param {PositiveInteger} n - derivative to evaluate
* @param {number} x - input
* @returns {number} (n+1)'th derivative
*/
function attransitionplus( n, x ) {
	var minusMminus1;
	var lnterm;
	var zpows;
	var iter;
	var sum0;
	var d4d;
	var N;
	var m;
	var k;
	var z;

	// Use N = (0.4 * digits) + (4 * n) for target value for x:
	d4d = 0.4 * DIGITS_BASE10;
	N = d4d + ( 4*n );
	m = n;
	iter = N - trunc( x );

	if ( iter > MAX_SERIES_ITERATIONS ) {
		debug( 'Exceeded maximum series evaluations when evaluated at n = %d and x = %d', n, x );
		return NaN;
	}
	minusMminus1 = -m - 1;
	z = x;
	sum0 = 0.0;
	zpows = 0.0;

	// Forward recursion to larger `x`, need to check for overflow first though:
	if ( ln( z+iter ) * minusMminus1 > -MAX_LN ) {
		for ( k = 1; k <= iter; k++ ) {
			zpows = pow( z, minusMminus1 );
			sum0 += zpows;
			z += 1;
		}
		sum0 *= factorial( n );
	} else {
		for ( k = 1; k <= iter; k++ ) {
			lnterm = ( ln( z ) * minusMminus1 ) + gammaln( n+1 );
			sum0 += exp( lnterm );
			z += 1;
		}
	}
	if ( ( n-1 ) & 1 ) {
		sum0 = -sum0;
	}
	return sum0 + atinfinityplus( n, z );
}


// EXPORTS //

module.exports = attransitionplus;

},{"./atinfinityplus.js":1727,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/factorial":1471,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/trunc":1841,"debug":1975}],1729:[function(require,module,exports){
'use strict';

/**
* Evaluate the polygamma function.
*
* @module @stdlib/math/base/special/polygamma
*
* @example
* var polygamma = require( '@stdlib/math/base/special/polygamma' );
*
* var v = polygamma( 3, 1.2 );
* // returns ~3.245
*
* v = polygamma( 5, 1.2 );
* // returns ~41.39
*
* v = polygamma( 3, -4.9 );
* // returns ~60014.239
*
* v = polygamma( -1, 5.3 );
* // returns NaN
*
* v = polygamma( 2, -1.0 );
* // returns NaN
*/

// MODULES //

var polygamma = require( './polygamma.js' );


// EXPORTS //

module.exports = polygamma;

},{"./polygamma.js":1732}],1730:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}.
*
* The implementation follows the original but has been reformatted and modified for JavaScript.
*/

/*
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var logger = require( 'debug' );
var factorial = require( '@stdlib/math/base/special/factorial' );
var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
var abs = require( '@stdlib/math/base/special/abs' );
var pow = require( '@stdlib/math/base/special/pow' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var MAX = require( '@stdlib/constants/math/float64-max' );


// VARIABLES //

var debug = logger( 'polygamma' );
var MAX_SERIES_ITERATIONS = 1000000;


// MAIN //

/**
* Evaluates the polygamma function near zero.
*
* ## Notes
*
* -   If we take this [expansion][1] for `polygamma` and substitute in this [expression][2] for `polygamma(n, 1)`, we get an alternating series for polygamma when `x` is small in terms of zeta functions of integer arguments (which are easy to evaluate, at least when the integer is even).
*
* [1]: http://functions.wolfram.com/06.15.06.0003.02
* [2]: http://functions.wolfram.com/06.15.03.0009.01
*
*
* @private
* @param {PositiveInteger} n - derivative to evaluate
* @param {number} x - input value
* @returns {number} (n+1)'th derivative
*/
function nearzero( n, x ) {
	var factorialPart;
	var prefix;
	var scale;
	var term;
	var sum;
	var AX;
	var k;

	// In order to avoid spurious overflow, save the `n!` term for later, and rescale at the end:
	scale = factorial( n );

	// "factorialPart" contains everything except the zeta function evaluations in each term:
	factorialPart = 1;

	// "prefix" is what we'll be adding the accumulated sum to, it will be `n! / z^(n+1)`, but since we're scaling by `n!` it is just `1 / z^(n+1)` for now:
	prefix = pow( x, n+1 );
	if ( prefix === 0.0 ) {
		return PINF;
	}
	prefix = 1.0 / prefix;

	// First term in the series is necessarily `< zeta(2) < 2`, so ignore the sum if it will have no effect on the result:
	if ( prefix > 2.0/EPS ) {
		if ( n & 1 ) {
			return ( AX/prefix < scale ) ? PINF : prefix * scale;
		}
		return ( AX/prefix < scale ) ? NINF : -prefix * scale;
	}
	sum = prefix;
	for ( k = 0; ; ) {
		// Get the k'th term:
		term = factorialPart * zeta( k+n+1 );
		sum += term;

		// Termination condition:
		if ( abs( term ) < abs(sum * EPS ) ) {
			break;
		}
		// Move on `k` and `factorialPart`:
		k += 1;
		factorialPart *= (-x * (n+k)) / k;

		// Last chance exit:
		if ( k > MAX_SERIES_ITERATIONS ) {
			debug( 'Series did not converge, best value is %d.', sum );
			return NaN;
		}
	}
	// We need to multiply by the scale, at each stage checking for overflow:
	if ( MAX/scale < sum ) {
		return PINF;
	}
	sum *= scale;
	return ( n & 1 ) ? sum : -sum;
}


// EXPORTS //

module.exports = nearzero;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/factorial":1471,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/riemann-zeta":1766,"debug":1975}],1731:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}.
*
* The implementation follows the original but has been reformatted and modified for JavaScript.
*/

/*
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var logger = require( 'debug' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var signum = require( '@stdlib/math/base/special/signum' );
var cospi = require( '@stdlib/math/base/special/cospi' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var polyval3 = require( './polyval_p3.js' );
var polyval4 = require( './polyval_p4.js' );
var polyval5 = require( './polyval_p5.js' );
var polyval6 = require( './polyval_p6.js' );
var polyval7 = require( './polyval_p7.js' );
var polyval8 = require( './polyval_p8.js' );
var polyval9 = require( './polyval_p9.js' );
var polyval10 = require( './polyval_p10.js' );
var polyval11 = require( './polyval_p11.js' );
var polyval12 = require( './polyval_p12.js' );


// VARIABLES //

var debug = logger( 'polygamma' );
var MAX_SERIES_ITERATIONS = 1000000;

// π raised to powers two to twelve (obtained from Wolfram Alpha):
var PI2 = 9.869604401089358;
var PI3 = 31.00627668029982;
var PI4 = 97.40909103400244;
var PI5 = 306.01968478528147;
var PI6 = 961.3891935753045;
var PI7 = 3020.2932277767923;
var PI8 = 9488.531016070574;
var PI9 = 29809.09933344621;
var PI10 = 93648.04747608303;
var PI11 = 294204.0179738906;
var PI12 = 924269.1815233742;

// Derivative memoization table:
var table = [
	[ -1.0 ]
];


// FUNCTIONS //

/**
* Returns an array of zeros of the specified length.
*
* @private
* @param {NonNegativeInteger} len - array length
* @returns {Array} array of zeros
*/
function zeros( len ) {
	var out;
	var i;

	out = new Array( len );
	for ( i = 0; i < len; i++ ) {
		out[ i ] = 0.0;
	}
	return out;
}

/**
* Updates the derivatives table.
*
* @private
* @param {PositiveInteger} n - derivative
*/
function calculateDerivatives( n ) {
	var noffset; // offset for next row
	var offset; // 1 if the first cos power is 0; otherwise 0
	var ncols; // how many entries there are in the current row
	var mcols; // how many entries there will be in the next row
	var mo; // largest order of the polynomial of cos terms
	var so; // order of the sin term
	var co; // order of the cosine term in entry "j"
	var i;
	var j;
	var k;

	for ( i = table.length-1; i < n-1; i++ ) {
		offset = ( i&1 )|0;
		so = ( i+2 )|0;
		mo = ( so-1 )|0;
		ncols = ( (mo-offset)/2 )|0;
		noffset = offset ? 0 : 1;
		mcols = ( (mo+1-noffset)/2 )|0;
		table.push( zeros( mcols+1 ) );
		for ( j = 0; j <= ncols; j++ ) {
			co = ( (2*j)+offset )|0;
			k = ( (co+1)/2 )|0;
			table[ i+1 ][ k ] += ((co-so)*table[i][j]) / (so-1);
			if ( co ) {
				k = ( (co-1)/2 )|0;
				table[ i+1 ][ k ] += (-co*table[i][j]) / (so-1);
			}
		}
	}
}


// MAIN //

/**
* Returns n'th derivative of \\(\operatorname{cot|(\pi x)\\) at \\(x\\).
*
* ## Notes
*
* -   The derivatives are simply tabulated for up to \\(n = 9\\), beyond that it is possible to calculate coefficients as follows. The general form of each derivative is:
*
*     ```tex
*     \pi^n * \sum_{k=0}^n C[k,n] \cdot \cos^k(\pi \cdot x) \cdot \operatorname{csc}^{(n+1)}(\pi \cdot x)
*     ```
*
*     with constant \\( C\[0,1\] = -1 \\) and all other \\( C\[k,n\] = 0 \)). Then for each \\( k < n+1 \\):
*
*     ```tex
*     \begin{align}
*     C[k-1, n+1]  &-= k * C[k, n]; \\
*     C[k+1, n+1]  &+= (k-n-1) * C[k, n];
*     \end{align}
*     ```
*
* -   Note that there are many different ways of representing this derivative thanks to the many trigonometric identities available. In particular, the sum of powers of cosines could be replaced by a sum of cosine multiple angles, and, indeed, if you plug the derivative into Mathematica, this is the form it will give. The two forms are related via the Chebeshev polynomials of the first kind and \\( T_n(\cos(x)) = \cos(n x) \\). The polynomial form has the great advantage that all the cosine terms are zero at half integer arguments - right where this function has it's minimum - thus avoiding cancellation error in this region.
*
* -   And finally, since every other term in the polynomials is zero, we can save space by only storing the non-zero terms. This greatly increases complexity when subscripting the tables in the calculation, but halves the storage space (and complexity for that matter).
*
*
* @private
* @param {PositiveInteger} n - derivative to evaluate
* @param {number} x - input
* @param {number} xc - one minus `x`
* @returns {number} n'th derivative
*/
function polycotpi( n, x, xc ) {
	var powTerms;
	var idx;
	var out;
	var sum;
	var c;
	var s;

	s = ( abs( x ) < abs( xc ) ) ? sinpi( x ) : sinpi( xc );
	c = cospi( x );
	switch ( n ) { // eslint-disable-line default-case
	case 1:
		return -PI / ( s * s );
	case 2:
		return 2.0 * PI2 * c / pow( s, 3.0 );
	case 3:
		return PI3 * polyval3( c*c ) / pow( s, 4.0 );
	case 4:
		return PI4 * c * polyval4( c*c ) / pow( s, 5.0 );
	case 5:
		return PI5 * polyval5( c*c ) / pow( s, 6.0 );
	case 6:
		return PI6 * c * polyval6( c*c ) / pow( s, 7.0 );
	case 7:
		return PI7 * polyval7( c*c ) / pow( s, 8.0 );
	case 8:
		return PI8 * c * polyval8( c*c ) / pow( s, 9.0 );
	case 9:
		return PI9 * polyval9( c*c ) / pow( s, 10.0 );
	case 10:
		return PI10 * c * polyval10( c*c ) / pow( s, 11.0 );
	case 11:
		return PI11 * polyval11( c*c ) / pow( s, 12.0 );
	case 12:
		return PI12 * c * polyval12( c*c ) / pow( s, 13.0 );
	}
	// We'll have to compute the coefficients up to `n`, complexity is O(n^2) which we don't worry about as the values are computed once and then cached. However, if the final evaluation would have too many terms just bail out right away:
	if ( n/2 > MAX_SERIES_ITERATIONS ) {
		debug( 'The value of `n` is so large that we\'re unable to compute the result in reasonable time.' );
		return NaN;
	}
	idx = n - 1;
	if ( idx >= table.length ) {
		// Lazily calculate derivatives:
		calculateDerivatives( n );
	}
	sum = evalpoly( table[ idx ], c*c );
	if ( idx & 1 ) {
		sum *= c; // First coefficient is order 1, and really an odd polynomial.
	}
	if ( sum === 0.0 ) {
		return sum;
	}
	// The remaining terms are computed using logs since the powers and factorials get real large real quick:
	powTerms = n * LN_PI;
	if ( s === 0.0 ) {
		return ( sum >= 0.0 ) ? PINF : NINF;
	}
	powTerms -= ln( abs( s ) ) * ( n+1 );
	powTerms += gammaln( n ) + ln( abs(sum) );

	if ( powTerms > MAX_LN ) {
		return ( sum >= 0.0 ) ? PINF : NINF;
	}
	out = exp( powTerms ) * signum( sum );
	if ( s < 0.0 && ( (n+1)&1 ) ) {
		out *= -1;
	}
	return out;
}


// EXPORTS //

module.exports = polycotpi;

},{"./polyval_p10.js":1733,"./polyval_p11.js":1734,"./polyval_p12.js":1735,"./polyval_p3.js":1736,"./polyval_p4.js":1737,"./polyval_p5.js":1738,"./polyval_p6.js":1739,"./polyval_p7.js":1740,"./polyval_p8.js":1741,"./polyval_p9.js":1742,"@stdlib/constants/math/float64-ln-pi":80,"@stdlib/constants/math/float64-max-ln":87,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/cospi":1403,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/signum":1804,"@stdlib/math/base/special/sinpi":1820,"@stdlib/math/base/tools/evalpoly":1869,"debug":1975}],1732:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}.
*
* The implementation follows the original but has been reformatted and modified for JavaScript.
*/

/*
* (C) Copyright Nikhar Agrawal 2013.
* (C) Copyright Christopher Kormanyos 2013.
* (C) Copyright John Maddock 2014.
* (C) Copyright Paul Bristow 2013.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var logger = require( 'debug' );
var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var factorial = require( '@stdlib/math/base/special/factorial' );
var trigamma = require( '@stdlib/math/base/special/trigamma' );
var digamma = require( '@stdlib/math/base/special/digamma' );
var signum = require( '@stdlib/math/base/special/signum' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var floor = require( '@stdlib/math/base/special/floor' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
var abs = require( '@stdlib/math/base/special/abs' );
var min = require( '@stdlib/math/base/special/min' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var MAX = require( '@stdlib/constants/math/float64-max' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var attransitionplus = require( './attransitionplus.js' );
var atinfinityplus = require( './atinfinityplus.js' );
var polycotpi = require( './polycotpi.js' );
var nearzero = require( './nearzero.js' );


// VARIABLES //

var debug = logger( 'polygamma' );
var DIGITS_BASE10 = 19;


// MAIN //

/**
* Evaluates the polygamma function.
*
* @param {NonNegativeInteger} n - order of derivative
* @param {number} x - input value
* @returns {number} (n+1)'th derivative
*
* @example
* var v = polygamma( 3, 1.2 );
* // returns ~3.245
*
* @example
* var v = polygamma( 5, 1.2 );
* // returns ~41.39
*
* @example
* var v = polygamma( 3, -4.9 );
* // returns ~60014.239
*
* @example
* var v = polygamma( 2.5, -1.2 );
* // returns NaN
*
* @example
* var v = polygamma( -1, 5.3 );
* // returns NaN
*
* @example
* var v = polygamma( 2, 0.0 );
* // returns NaN
*
* @example
* var v = polygamma( 2, -1.0 );
* // returns NaN
*
* @example
* var v = polygamma( 2, -2.0 );
* // returns NaN
*
* @example
* var v = polygamma( NaN, 2.1 );
* // returns NaN
*
* @example
* var v = polygamma( 1, NaN );
* // returns NaN
*
* @example
* var v = polygamma( NaN, NaN );
* // returns NaN
*/
function polygamma( n, x ) {
	var xSmallLimit;
	var result;
	var z;

	if ( !isNonNegativeInteger( n ) ) {
		return NaN;
	}
	if ( n === 0 ) {
		return digamma( x );
	}
	if ( n === 1 ) {
		return trigamma( x );
	}
	if ( x < 0.0 ) {
		if ( floor(x) === x ) {
			// Result is infinity if `x` is odd, and a pole error if `x` is even.
			if ( trunc( x ) & 1 ) {
				return PINF;
			}
			debug( 'Evaluation at negative integer: %d.', x );
			return NaN;
		}
		z = 1.0 - x;
		result = polygamma( n, z ) + ( PI * polycotpi( n, z, x ) );
		return ( n & 1 ) ? -result : result;
	}
	// Limit for use of small-x series is chosen so that the series doesn't go too divergent in the first few terms. Ordinarily, this would mean setting the limit to `~1/n`, but we can tolerate a small amount of divergence:
	xSmallLimit = min( 5.0/n, 0.25 );
	if ( x < xSmallLimit ) {
		return nearzero( n, x );
	}
	if ( x > ( 0.4 * DIGITS_BASE10 ) + ( 4*n ) ) {
		return atinfinityplus( n, x );
	}
	if ( x === 1.0 ) {
		return ( ( n & 1 ) ? 1.0 : -1.0 ) * factorial( n ) * zeta( n+1 );
	}
	if ( x === 0.5 ) {
		result = ( ( n & 1 ) ? 1.0 : -1.0 ) * factorial( n ) * zeta( n+1 );
		if ( abs( result ) >= ldexp( MAX, -n-1 ) ) {
			return ( signum( result ) === 1 ) ? PINF : NINF;
		}
		result *= ldexp( 1.0, n+1 ) - 1.0;
		return result;
	}
	return attransitionplus( n, x );
}


// EXPORTS //

module.exports = polygamma;

},{"./atinfinityplus.js":1727,"./attransitionplus.js":1728,"./nearzero.js":1730,"./polycotpi.js":1731,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pi":101,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nonnegative-integer":134,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/digamma":1412,"@stdlib/math/base/special/factorial":1471,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ldexp":1676,"@stdlib/math/base/special/min":1707,"@stdlib/math/base/special/riemann-zeta":1766,"@stdlib/math/base/special/signum":1804,"@stdlib/math/base/special/trigamma":1834,"@stdlib/math/base/special/trunc":1841,"debug":1975}],1733:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 353792.0;
	}
	return 353792.0 + (x * (1841152.0 + (x * (1304832.0 + (x * (128512.0 + (x * 512.0))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1734:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -353792.0;
	}
	return -353792.0 + (x * (-9061376.0 + (x * (-21253376.0 + (x * (-8728576.0 + (x * (-518656.0 + (x * -1024.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1735:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 22368256.0;
	}
	return 22368256.0 + (x * (175627264.0 + (x * (222398464.0 + (x * (56520704.0 + (x * (2084864.0 + (x * 2048.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1736:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -2.0;
	}
	return -2.0 + (x * -4.0); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1737:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 16.0;
	}
	return 16.0 + (x * 8.0); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1738:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -16.0;
	}
	return -16.0 + (x * (-88.0 + (x * -16.0))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1739:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 272.0;
	}
	return 272.0 + (x * (416.0 + (x * 32.0))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1740:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -272.0;
	}
	return -272.0 + (x * (-2880.0 + (x * (-1824.0 + (x * -64.0))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1741:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 7936.0;
	}
	return 7936.0 + (x * (24576.0 + (x * (7680.0 + (x * 128.0))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1742:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -7936.0;
	}
	return -7936.0 + (x * (-137216.0 + (x * (-185856.0 + (x * (-31616.0 + (x * -256.0))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1743:[function(require,module,exports){
'use strict';

/**
* Evaluate the exponential function.
*
* @module @stdlib/math/base/special/pow
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* v = pow( 4.0, 0.5 );
* // returns 2.0
*
* v = pow( 100.0, 0.0 );
* // returns 1.0
*
* v = pow( Math.PI, 5.0 );
* // returns ~306.0197
*
* v = pow( Math.PI, -0.2 );
* // returns ~0.7954
*
* v = pow( NaN, 3.0 );
* // returns NaN
*
* v = pow( 5.0, NaN );
* // returns NaN
*
* v = pow( NaN, NaN );
* // returns NaN
*/

// MODULES //

var pow = require( './pow.js' );


// EXPORTS //

module.exports = pow;

},{"./pow.js":1749}],1744:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var polyvalL = require( './polyval_l.js' );


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation

// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023
var HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation

// 0x00080000 = 524288 => 0 00000000000 10000000000000000000
var HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation

// TODO: consider making an external constant
var HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation

var TWO53 = 9007199254740992.0;	// 0x43400000, 0x00000000

// 2/(3*LN2)
var CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD

// (float)CP
var CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000

// Low: CP_HI
var CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5

var BP = [
	1.0,
	1.5
];
var DP_HI = [
	0.0,
	5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000
];
var DP_LO = [
	0.0,
	1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006
];


// MAIN //

/**
* Computes \\(\operatorname{log2}(ax)\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @param {number} ahx - high word of `ax`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]
* // returns [ 3.169923782348633, 0.0000012190936795504075 ]
*/
function log2ax( out, ax, ahx ) {
	var tmp;
	var ss; // `hs + ls`
	var s2; // `ss` squared
	var hs;
	var ls;
	var ht;
	var lt;
	var bp; // `BP` constant
	var dp; // `DP` constant
	var hp;
	var lp;
	var hz;
	var lz;
	var t1;
	var t2;
	var t;
	var r;
	var u;
	var v;
	var n;
	var j;
	var k;

	n = 0|0; // asm type annotation

	// Check if `x` is subnormal...
	if ( ahx < HIGH_MIN_NORMAL_EXP ) {
		ax *= TWO53;
		n -= 53|0; // asm type annotation
		ahx = getHighWord( ax );
	}
	// Extract the unbiased exponent of `x`:
	n += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation

	// Isolate the significand bits of `x`:
	j = (ahx & HIGH_SIGNIFICAND_MASK)|0; // asm type annotation

	// Normalize `ahx` by setting the (biased) exponent to `1023`:
	ahx = (j | HIGH_BIASED_EXP_0)|0; // asm type annotation

	// Determine the interval of `|x|` by comparing significand bits...

	// |x| < sqrt(3/2)
	if ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110
		k = 0;
	}
	// |x| < sqrt(3)
	else if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010
		k = 1;
	}
	// |x| >= sqrt(3)
	else {
		k = 0;
		n += 1|0; // asm type annotation
		ahx -= HIGH_MIN_NORMAL_EXP;
	}
	// Load the normalized high word into `|x|`:
	ax = setHighWord( ax, ahx );

	// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:
	bp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5
	u = ax - bp; // (x-1) || (x-1.5)
	v = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)
	ss = u * v;
	hs = setLowWord( ss, 0 ); // set all low word (less significant significand) bits to 0s

	// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):
	tmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;
	tmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`
	ht = setHighWord( 0.0, tmp );
	lt = ax - (ht - bp);
	ls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );

	// Compute `log(ax)`...

	s2 = ss * ss;
	r = s2 * s2 * polyvalL( s2 );
	r += ls * (hs + ss);
	s2 = hs * hs;
	ht = 3.0 + s2 + r;
	ht = setLowWord( ht, 0 );
	lt = r - ((ht-3.0) - s2);

	// u+v = ss*(1+...):
	u = hs * ht;
	v = ( ls*ht ) + ( lt*ss );

	// 2/(3LN2) * (ss+...):
	hp = u + v;
	hp = setLowWord( hp, 0 );
	lp = v - (hp - u);
	hz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)
	lz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];

	// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz
	dp = DP_HI[ k ];
	t = n;
	t1 = ((hz+lz) + dp) + t; // log2(ax)
	t1 = setLowWord( t1, 0 );
	t2 = lz - (((t1-t) - dp) - hz);

	out[ 0 ] = t1;
	out[ 1 ] = t2;
	return out;
}


// EXPORTS //

module.exports = log2ax;

},{"./polyval_l.js":1746,"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-high-word":1918,"@stdlib/number/float64/base/set-low-word":1920}],1745:[function(require,module,exports){
'use strict';

// MODULES //

var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var polyvalW = require( './polyval_w.js' );


// VARIABLES //

// 1/LN2
var INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE

// High (24 bits): 1/LN2
var INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000

// Low: 1/LN2
var INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44


// MAIN //

/**
* Computes \\(\operatorname{log}(x)\\) assuming \\(|1-x|\\) is small and using the approximation \\(x - x^2/2 + x^3/3 - x^4/4\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]
* // returns [ -1265.7236328125, -0.0008163940840404393 ]
*/
function logx( out, ax ) {
	var t2;
	var t1;
	var t;
	var w;
	var u;
	var v;

	t = ax - 1.0; // `t` has `20` trailing zeros
	w = t * t * polyvalW( t );
	u = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits
	v = ( t*INV_LN2_LO ) - ( w*INV_LN2 );
	t1 = u + v;
	t1 = setLowWord( t1, 0 );
	t2 = v - (t1 - u);

	out[ 0 ] = t1;
	out[ 1 ] = t2;
	return out;
}


// EXPORTS //

module.exports = logx;

},{"./polyval_w.js":1748,"@stdlib/number/float64/base/set-low-word":1920}],1746:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.5999999999999946;
	}
	return 0.5999999999999946 + (x * (0.4285714285785502 + (x * (0.33333332981837743 + (x * (0.272728123808534 + (x * (0.23066074577556175 + (x * 0.20697501780033842))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1747:[function(require,module,exports){
arguments[4][1457][0].apply(exports,arguments)
},{"dup":1457}],1748:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.5;
	}
	return 0.5 + (x * (-0.3333333333333333 + (x * 0.25))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1749:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isOdd = require( '@stdlib/math/base/assert/is-odd' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var xIsZero = require( './x_is_zero.js' );
var yIsHuge = require( './y_is_huge.js' );
var yIsInfinite = require( './y_is_infinite.js' );
var log2ax = require( './log2ax.js' );
var logx = require( './logx.js' );
var pow2 = require( './pow2.js' );


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation

// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31
var HIGH_BIASED_EXP_31 = 0x41e00000|0; // asm type annotation

// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64
var HIGH_BIASED_EXP_64 = 0x43f00000|0; // asm type annotation

// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024
var HIGH_BIASED_EXP_10 = 0x40900000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation

// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000
var HIGH_1075 = 0x4090cc00|0; // asm type annotation

// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000
var HIGH_NEG_1075 = 0xc090cc00>>>0; // asm type annotation

var HIGH_NUM_NONSIGN_BITS = 31|0; // asm type annotation

var HUGE = 1.0e300;
var TINY = 1.0e-300;

// -(1024-log2(ovfl+.5ulp))
var OVT = 8.0085662595372944372e-17;

// High/low words workspace:
var WORDS = [ 0|0, 0|0 ]; // WARNING: not thread safe

// Log workspace:
var LOG_WORKSPACE = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the exponential function.
*
* ## Method
*
* 1.  Let \\(x = 2^n (1+f)\\).
*
* 2.  Compute \\(\operatorname{log2}(x)\\) as
*
*     ```tex
*     \operatorname{log2}(x) = w_1 + w_2
*     ```
*
*     where \\(w_1\\) has \\(53 - 24 = 29\\) bit trailing zeros.
*
* 3.  Compute
*
*     ```tex
*     y \cdot \operatorname{log2}(x) = n + y^\prime
*     ```
*
*     by simulating multi-precision arithmetic, where \\(|y^\prime| \leq 0.5\\).
*
* 4.  Return
*
*     ```tex
*     x^y = 2^n e^{y^\prime \cdot \mathrm{log2}}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* x^{\mathrm{NaN}} &= \mathrm{NaN} & \\
* (\mathrm{NaN})^y &= \mathrm{NaN} & \\
* 1^y &= 1 & \\
* x^0 &= 1 & \\
* x^1 &= x & \\
* (\pm 0)^\infty &= +0 & \\
* (\pm 0)^{-\infty} &= +\infty & \\
* (+0)^y &= +0 & \mathrm{if}\ y > 0 \\
* (+0)^y &= +\infty & \mathrm{if}\ y < 0 \\
* (-0)^y &= -\infty & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= +\infty & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= -0 & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y > 0 \\
* (-0)^y &= +0 & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y > 0 \\
* (-1)^{\pm\infty} &= \mathrm{NaN} & \\
* x^{\infty} &= +\infty & |x| > 1 \\
* x^{\infty} &= +0 & |x| < 1 \\
* x^{-\infty} &= +0 & |x| > 1 \\
* x^{-\infty} &= +\infty & |x| < 1 \\
* (-\infty)^y &= (-0)^y & \\
* \infty^y &= +0 & y < 0 \\
* \infty^y &= +\infty & y > 0 \\
* x^y &= \mathrm{NaN} & \mathrm{if}\ y\ \mathrm{is\ not\ a\ finite\ integer\ and}\ x < 0
* \end{align*}
* ```
*
* ## Notes
*
* -   \\(\operatorname{pow}(x,y)\\) returns \\(x^y\\) nearly rounded. In particular, \\(\operatorname{pow}(<\mathrm{integer}>,<\mathrm{integer}>)\\) **always** returns the correct integer, provided the value is representable.
* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.
*
*
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* @example
* var v = pow( 4.0, 0.5 );
* // returns 2.0
*
* @example
* var v = pow( 100.0, 0.0 );
* // returns 1.0
*
* @example
* var v = pow( Math.PI, 5.0 );
* // returns ~306.0197
*
* @example
* var v = pow( Math.PI, -0.2 );
* // returns ~0.7954
*
* @example
* var v = pow( NaN, 3.0 );
* // returns NaN
*
* @example
* var v = pow( 5.0, NaN );
* // returns NaN
*
* @example
* var v = pow( NaN, NaN );
* // returns NaN
*/
function pow( x, y ) {
	var ahx; // absolute value high word `x`
	var ahy; // absolute value high word `y`
	var ax;  // absolute value `x`
	var hx;  // high word `x`
	var lx;  // low word `x`
	var hy;  // high word `y`
	var ly;  // low word `y`
	var sx;  // sign `x`
	var sy;  // sign `y`
	var y1;
	var hp;
	var lp;
	var t;
	var z;   // y prime
	var j;
	var i;
	if ( isnan( x ) || isnan( y ) ) {
		return NaN;
	}
	// Split `y` into high and low words:
	toWords( WORDS, y );
	hy = WORDS[ 0 ];
	ly = WORDS[ 1 ];

	// Special cases `y`...
	if ( ly === 0 ) {
		if ( y === 0.0 ) {
			return 1.0;
		}
		if ( y === 1.0 ) {
			return x;
		}
		if ( y === -1.0 ) {
			return 1.0 / x;
		}
		if ( y === 0.5 ) {
			return sqrt( x );
		}
		if ( y === -0.5 ) {
			return 1.0 / sqrt( x );
		}
		if ( y === 2.0 ) {
			return x * x;
		}
		if ( y === 3.0 ) {
			return x * x * x;
		}
		if ( y === 4.0 ) {
			x *= x;
			return x * x;
		}
		if ( isInfinite( y ) ) {
			return yIsInfinite( x, y );
		}
	}
	// Split `x` into high and low words:
	toWords( WORDS, x );
	hx = WORDS[ 0 ];
	lx = WORDS[ 1 ];

	// Special cases `x`...
	if ( lx === 0 ) {
		if ( hx === 0 ) {
			return xIsZero( x, y );
		}
		if ( x === 1.0 ) {
			return 1.0;
		}
		if (
			x === -1.0 &&
			isOdd( y )
		) {
			return -1.0;
		}
		if ( isInfinite( x ) ) {
			if ( x === NINF ) {
				// pow( 1/x, -y )
				return pow( -0.0, -y );
			}
			if ( y < 0.0 ) {
				return 0.0;
			}
			return PINF;
		}
	}
	if (
		x < 0.0 &&
		isInteger( y ) === false
	) {
		// signal NaN...
		return (x-x)/(x-x);
	}
	ax = abs( x );

	// Remove the sign bits (i.e., get absolute values):
	ahx = (hx & ABS_MASK)|0; // asm type annotation
	ahy = (hy & ABS_MASK)|0; // asm type annotation

	// Extract the sign bits:
	sx = (hx >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation
	sy = (hy >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation

	// Determine the sign of the result...
	if ( sx && isOdd( y ) ) {
		sx = -1.0;
	} else {
		sx = 1.0;
	}
	// Case 1: `|y|` is huge...

	// |y| > 2^31
	if ( ahy > HIGH_BIASED_EXP_31 ) {
		// `|y| > 2^64`, then must over- or underflow...
		if ( ahy > HIGH_BIASED_EXP_64 ) {
			return yIsHuge( x, y );
		}
		// Over- or underflow if `x` is not close to unity...

		if ( ahx < HIGH_MAX_NEAR_UNITY ) {
			// y < 0
			if ( sy === 1 ) {
				// signal overflow...
				return sx * HUGE * HUGE;
			}
			// signal underflow...
			return sx * TINY * TINY;
		}
		if ( ahx > HIGH_BIASED_EXP_0 ) {
			// y > 0
			if ( sy === 0 ) {
				// signal overflow...
				return sx * HUGE * HUGE;
			}
			// signal underflow...
			return sx * TINY * TINY;
		}
		// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.
		t = logx( LOG_WORKSPACE, ax );
	}
	// Case 2: `|y|` is not huge...
	else {
		t = log2ax( LOG_WORKSPACE, ax, ahx );
	}
	// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...
	y1 = setLowWord( y, 0 );
	lp = ( (y-y1)*t[0] ) + ( y*t[1] );
	hp = y1 * t[0];
	z = lp + hp;

	// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.
	toWords( WORDS, z );
	j = uint32ToInt32( WORDS[0] );
	i = uint32ToInt32( WORDS[1] );

	// z >= 1024
	if ( j >= HIGH_BIASED_EXP_10 ) {
		// z > 1024
		if ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {
			// signal overflow...
			return sx * HUGE * HUGE;
		}
		else if ( (lp+OVT) > (z-hp) ) {
			// signal overflow...
			return sx * HUGE * HUGE;
		}
	}
	// z <= -1075
	else if ( (j&ABS_MASK) >= HIGH_1075 ) {
		// z < -1075
		if ( ((j-HIGH_NEG_1075)|i) !== 0 ) {
			// signal underflow...
			return sx * TINY * TINY;
		}
		else if ( lp <= (z-hp) ) {
			// signal underflow...
			return sx * TINY * TINY;
		}
	}
	// Compute `2^(hp+lp)`...
	z = pow2( j, hp, lp );

	return sx * z;
}


// EXPORTS //

module.exports = pow;

},{"./log2ax.js":1744,"./logx.js":1745,"./pow2.js":1750,"./x_is_zero.js":1751,"./y_is_huge.js":1752,"./y_is_infinite.js":1753,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/assert/is-odd":138,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/sqrt":1826,"@stdlib/number/float64/base/set-low-word":1920,"@stdlib/number/float64/base/to-words":1925,"@stdlib/number/uint32/base/to-int32":1929}],1750:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
var polyvalP = require( './polyval_p.js' );


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation

// TODO: consider making into an external constant
var HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation

// High: LN2
var LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000

// Low: LN2
var LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39


// MAIN //

/**
* Computes \\(2^{\mathrm{hp} + \mathrm{lp}\\).
*
* @private
* @param {number} j - high word of `hp + lp`
* @param {number} hp - first power summand
* @param {number} lp - second power summand
* @returns {number} function value
*
* @example
* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );
* // returns 0.012345679012345678
*/
function pow2( j, hp, lp ) {
	var tmp;
	var t1;
	var t;
	var r;
	var u;
	var v;
	var w;
	var z;
	var n;
	var i;
	var k;

	i = (j & ABS_MASK)|0; // asm type annotation
	k = ((i>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation
	n = 0;

	// `|z| > 0.5`, set `n = z+0.5`
	if ( i > HIGH_BIASED_EXP_NEG_1 ) {
		n = (j + (HIGH_MIN_NORMAL_EXP>>(k+1)))>>>0; // asm type annotation
		k = (((n & ABS_MASK)>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // new k for n
		tmp = ((n & ~(HIGH_SIGNIFICAND_MASK >> k)))>>>0; // asm type annotation
		t = setHighWord( 0.0, tmp );
		n = (((n & HIGH_SIGNIFICAND_MASK)|HIGH_MIN_NORMAL_EXP) >> (HIGH_NUM_SIGNIFICAND_BITS-k))>>>0; // eslint-disable-line max-len
		if ( j < 0 ) {
			n = -n;
		}
		hp -= t;
	}
	t = lp + hp;
	t = setLowWord( t, 0 );
	u = t * LN2_HI;
	v = ( (lp - (t-hp))*LN2 ) + ( t*LN2_LO );
	z = u + v;
	w = v - (z - u);
	t = z * z;
	t1 = z - ( t*polyvalP( t ) );
	r = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );
	z = 1.0 - (r - z);
	j = getHighWord( z );
	j = uint32ToInt32( j );
	j += (n << HIGH_NUM_SIGNIFICAND_BITS)>>>0; // asm type annotation

	// Check for subnormal output...
	if ( (j>>HIGH_NUM_SIGNIFICAND_BITS) <= 0 ) {
		z = ldexp( z, n );
	} else {
		z = setHighWord( z, j );
	}
	return z;
}


// EXPORTS //

module.exports = pow2;

},{"./polyval_p.js":1747,"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-ln-two":83,"@stdlib/math/base/special/ldexp":1676,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/set-high-word":1918,"@stdlib/number/float64/base/set-low-word":1920,"@stdlib/number/uint32/base/to-int32":1929}],1751:[function(require,module,exports){
'use strict';

// MODULES //

var isOdd = require( '@stdlib/math/base/assert/is-odd' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the exponential function when \\(|x| = 0\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = pow( -0.0, -9 );
* // returns -Infinity
*
* @example
* var v = pow( 0.0, -9 );
* // returns Infinity
*
* @example
* var v = pow( -0.0, 9 );
* // returns Infinity
*
* @example
* var v = pow( 0.0, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 0.0, Infinity );
* // returns 0.0
*/
function pow( x, y ) {
	if ( y === NINF ) {
		return PINF;
	}
	if ( y === PINF ) {
		return 0.0;
	}
	if ( y > 0.0 ) {
		if ( isOdd( y ) ) {
			return x; // handles +-0
		}
		return 0.0;
	}
	// y < 0.0
	if ( isOdd( y ) ) {
		return copysign( PINF, x ); // handles +-0
	}
	return PINF;
}


// EXPORTS //

module.exports = pow;

},{"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-odd":138,"@stdlib/math/base/special/copysign":1394}],1752:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation

var HUGE = 1.0e300;
var TINY = 1.0e-300;


// MAIN //

/**
* Evaluates the exponential function when \\(|y| > 2^64\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} overflow or underflow result
*
* @example
* var v = pow( 9.0, 3.6893488147419103e19 );
* // returns Infinity
*
* @example
* var v = pow( -3.14, -3.6893488147419103e19 );
* // returns 0.0
*/
function pow( x, y ) {
	var ahx;
	var hx;

	hx = getHighWord( x );
	ahx = (hx & ABS_MASK);

	if ( ahx <= HIGH_MAX_NEAR_UNITY ) {
		if ( y < 0 ) {
			// signal overflow...
			return HUGE * HUGE;
		}
		// signal underflow...
		return TINY * TINY;
	}
	// `x` has a biased exponent greater than or equal to `0`...

	if ( y > 0 ) {
		// signal overflow...
		return HUGE * HUGE;
	}
	// signal underflow...
	return TINY * TINY;
}


// EXPORTS //

module.exports = pow;

},{"@stdlib/number/float64/base/get-high-word":1909}],1753:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// MAIN //

/**
* Evaluates the exponential function when \\( y = \pm \infty\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( -1.0, Infinity );
* // returns NaN
*
* @example
* var v = pow( -1.0, -Infinity  );
* // returns NaN
*
* @example
* var v = pow( 1.0, Infinity );
* // returns 1.0
*
* @example
* var v = pow( 1.0, -Infinity  );
* // returns 1.0
*
* @example
* var v = pow( 0.5, Infinity );
* // returns 0.0
*
* @example
* var v = pow( 0.5, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 1.5, -Infinity  );
* // returns 0.0
*
* @example
* var v = pow( 1.5, Infinity );
* // returns Infinity
*/
function pow( x, y ) {
	if ( x === -1.0 ) {
		// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.
		return (x-x)/(x-x); // signal NaN
	}
	if ( x === 1.0 ) {
		return 1.0;
	}
	// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)
	if ( (abs(x) < 1.0) === (y === PINF) ) {
		return 0.0;
	}
	// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)
	return PINF;
}


// EXPORTS //

module.exports = pow;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/abs":1298}],1754:[function(require,module,exports){
'use strict';

/**
* Evaluate `bˣ - 1`.
*
* @module @stdlib/math/base/special/powm1
*
* @example
* var powm1 = require( '@stdlib/math/base/special/powm1' );
*
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* y = powm1( Math.PI, 5.0 );
* // returns ~305.0197
*
* y = powm1( NaN, 3.0 );
* // returns NaN
*
* y = powm1( 5.0, NaN );
* // returns NaN
*/

// MODULES //

var powm1 = require( './powm1.js' );


// EXPORTS //

module.exports = powm1;

},{"./powm1.js":1755}],1755:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var ln = require( '@stdlib/math/base/special/ln' );
var pow = require( '@stdlib/math/base/special/pow' );
var trunc = require( '@stdlib/math/base/special/trunc' );


// MAIN //

/**
* Evaluates `bˣ - 1`.
*
* @param {number} b - base
* @param {number} x - exponent
* @returns {number} function value
*
* @example
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* @example
* var y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* @example
* var y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* @example
* var y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( Math.PI, 5.0 );
* // returns ~305.0197
*
* @example
* var y = powm1( NaN, 3.0 );
* // returns NaN
*
* @example
* var y = powm1( 5.0, NaN );
* // returns NaN
*/
function powm1( b, x ) {
	var y;
	if (
		isnan( b ) ||
		isnan( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0
		return 0.0;
	}
	if ( b === 0.0 ) {
		// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1
		return -1.0;
	}
	if ( b < 0.0 && x%2.0 === 0 ) {
		// If `x` is even, recognize that `(-b)**x == (b)**x`...
		b = -b;
	}
	if ( b > 0.0 ) {
		if (
			abs( x*(b-1.0) ) < 0.5 ||
			abs( x ) < 0.2
		) {
			// No good/quick approximation for ln(b)*x, so we have to evaluate...
			y = ln( b ) * x;
			if ( y < 0.5 ) {
				return expm1( y );
			}
		}
	} else if ( trunc( x ) !== x ) {
		// Exponentiation would yield a complex result...
		return NaN;
	}
	return pow( b, x ) - 1.0;
}


// EXPORTS //

module.exports = powm1;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/trunc":1841}],1756:[function(require,module,exports){
'use strict';

/**
* Convert an angle from radians to degrees.
*
* @module @stdlib/math/base/special/rad2deg
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* var rad2deg = require( '@stdlib/math/base/special/rad2deg' );
*
* var d = rad2deg( PI/2.0 );
* // returns 90.0
*
* d = rad2deg( -PI/4.0 );
* // returns -45.0
*
* d = rad2deg( NaN );
* // returns NaN
*/

// MODULES //

var rad2deg = require( './rad2deg.js' );


// EXPORTS //

module.exports = rad2deg;

},{"./rad2deg.js":1757}],1757:[function(require,module,exports){
'use strict';

// VARIABLES //

// 180.0 / π
var CONST_180_DIV_PI = 57.29577951308232;


// MAIN //

/**
* Converts an angle from radians to degrees.
*
* @param {number} x - angle in radians
* @returns {number} angle in degrees
*
* @example
* var d = rad2deg( Math.PI/2.0 );
* // returns 90.0
*
* @example
* var d = rad2deg( -Math.PI/4.0 );
* // returns -45.0
*
* @example
* var d = rad2deg( NaN );
* // returns NaN
*/
function rad2deg( x ) {
	return x * CONST_180_DIV_PI;
}


// EXPORTS //

module.exports = rad2deg;

},{}],1758:[function(require,module,exports){
'use strict';

/**
* Evaluate the ramp function.
*
* @module @stdlib/math/base/special/ramp
*
* @example
* var ramp = require( '@stdlib/math/base/special/ramp' );
*
* var v = ramp( 3.14 );
* // returns 3.14
*
* v = ramp( -3.14 );
* // returns 0.0
*
* v = ramp( NaN );
* // returns NaN
*/

// MODULES //

var ramp = require( './ramp.js' );


// EXPORTS //

module.exports = ramp;

},{"./ramp.js":1759}],1759:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the ramp function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = ramp( 3.14 );
* // returns 3.14
*
* @example
* var v = ramp( -3.14 );
* // returns 0.0
*
* @example
* var v = ramp( NaN );
* // returns NaN
*/
function ramp( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		return x;
	}
	return 0.0; // handles `-0`
}


// EXPORTS //

module.exports = ramp;

},{"@stdlib/math/base/assert/is-nan":128}],1760:[function(require,module,exports){
'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

var rempio2 = require( './rempio2.js' );


// EXPORTS //

module.exports = rempio2;

},{"./rempio2.js":1762}],1761:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ```tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
}

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
}


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
}


// EXPORTS //

module.exports = kernelRempio2;

},{"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ldexp":1676}],1762:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );
var rempio2Kernel = require( './kernel_rempio2.js' );
var rempio2Medium = require( './rempio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb|0; // asm type annotation

// Arrays for storing temporary values:
var TX = new Array( 3 ); // WARNING: not thread safe
var TY = new Array( 2 ); // WARNING: not thread safe


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = (hx & ABS_MASK)|0; // asm type annotation

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return rempio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return rempio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return rempio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return rempio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = rempio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
}


// EXPORTS //

module.exports = rempio2;

},{"./kernel_rempio2.js":1761,"./rempio2_medium.js":1763,"@stdlib/number/float64/base/from-words":1905,"@stdlib/number/float64/base/get-high-word":1909,"@stdlib/number/float64/base/get-low-word":1911}],1763:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff|0; // asm type annotation


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = (ix >> 20)|0; // asm type annotation
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
}


// EXPORTS //

module.exports = rempio2Medium;

},{"@stdlib/math/base/special/round":1777,"@stdlib/number/float64/base/get-high-word":1909}],1764:[function(require,module,exports){
module.exports=[1.00000000000000000000000000000000000000000,
0.166666666666666666666666666666666666666667,
-0.0333333333333333333333333333333333333333333,
0.0238095238095238095238095238095238095238095,
-0.0333333333333333333333333333333333333333333,
0.0757575757575757575757575757575757575757576,
-0.253113553113553113553113553113553113553114,
1.16666666666666666666666666666666666666667,
-7.09215686274509803921568627450980392156863,
54.9711779448621553884711779448621553884712,
-529.124242424242424242424242424242424242424,
6192.12318840579710144927536231884057971014,
-86580.2531135531135531135531135531135531136,
1.42551716666666666666666666666666666666667e6,
-2.72982310678160919540229885057471264367816e7,
6.01580873900642368384303868174835916771401e8,
-1.51163157670921568627450980392156862745098e10,
4.29614643061166666666666666666666666666667e11,
-1.37116552050883327721590879485616327721591e13,
4.88332318973593166666666666666666666666667e14,
-1.92965793419400681486326681448632668144863e16,
8.41693047573682615000553709856035437430786e17,
-4.03380718540594554130768115942028985507246e19,
2.11507486380819916056014539007092198581560e21,
-1.20866265222965259346027311937082525317819e23,
7.50086674607696436685572007575757575757576e24,
-5.03877810148106891413789303052201257861635e26,
3.65287764848181233351104308429711779448622e28,
-2.84987693024508822262691464329106781609195e30,
2.38654274996836276446459819192192149717514e32,
-2.13999492572253336658107447651910973926742e34,
2.05009757234780975699217330956723102516667e36,
-2.09380059113463784090951852900279701847092e38,
2.27526964884635155596492603527692645814700e40,
-2.62577102862395760473030497361582020814490e42,
3.21250821027180325182047923042649852435219e44,
-4.15982781667947109139170744952623589366896e46,
5.69206954820352800238834562191210586444805e48,
-8.21836294197845756922906534686173330145509e50,
1.25029043271669930167323398297028955241772e53,
-2.00155832332483702749253291988132987687242e55,
3.36749829153643742333966769033387530162196e57,
-5.94709705031354477186604968440515408405791e59,
1.10119103236279775595641307904376916046305e62,
-2.13552595452535011886583850190410656789733e64,
4.33288969866411924196166130593792062184514e66,
-9.18855282416693282262005552155018971389604e68,
2.03468967763290744934550279902200200659751e71,
-4.70038339580357310785752555350060606545967e73,
1.13180434454842492706751862577339342678904e76,
-2.83822495706937069592641563364817647382847e78,
7.40642489796788506297508271409209841768797e80,
-2.00964548027566044834656196727153631868673e83,
5.66571700508059414457193460305193569614195e85,
-1.65845111541362169158237133743199123014950e88,
5.03688599504923774192894219151801548124424e90,
-1.58614682376581863693634015729664387827410e93,
5.17567436175456269840732406825071225612408e95,
-1.74889218402171173396900258776181591451415e98,
6.11605199949521852558245252642641677807677e100,
-2.21227769127078349422883234567129324455732e103,
8.27227767987709698542210624599845957312047e105,
-3.19589251114157095835916343691808148735263e108,
1.27500822233877929823100243029266798669572e111,
-5.25009230867741338994028246245651754469199e113,
2.23018178942416252098692981988387281437383e116,
-9.76845219309552044386335133989802393011669e118,
4.40983619784529542722726228748131691918758e121,
-2.05085708864640888397293377275830154864566e124,
9.82144332797912771075729696020975210414919e126,
-4.84126007982088805087891967099634127611305e129,
2.45530888014809826097834674040886903996737e132,
-1.28069268040847475487825132786017857218118e135,
6.86761671046685811921018885984644004360924e137,
-3.78464685819691046949789954163795568144895e140,
2.14261012506652915508713231351482720966602e143,
-1.24567271371836950070196429616376072194583e146,
7.43457875510001525436796683940520613117807e148,
-4.55357953046417048940633332233212748767721e151,
2.86121128168588683453638472510172325229190e154,
-1.84377235520338697276882026536287854875414e157,
1.21811545362210466995013165065995213558174e160,
-8.24821871853141215484818457296893447301419e162,
5.72258779378329433296516498142978615918685e165,
-4.06685305250591047267679693831158655602196e168,
2.95960920646420500628752695815851870426379e171,
-2.20495225651894575090311752273445984836379e174,
1.68125970728895998058311525151360665754464e177,
-1.31167362135569576486452806355817153004431e180,
1.04678940094780380821832853929823089643829e183,
-8.54328935788337077185982546299082774593270e185,
7.12878213224865423522884066771438224721245e188,
-6.08029314555358993000847118686477458461988e191,
5.29967764248499239300942910043247266228490e194,
-4.71942591687458626443646229013379911103761e197,
4.29284137914029810894168296541074669045521e200,
-3.98767449682322074434477655542938795106651e203,
3.78197804193588827138944181161393327898220e206,
-3.66142336836811912436858082151197348755196e209,
3.61760902723728623488554609298914089477541e212,
-3.64707726451913543621383088655499449048682e215,
3.75087554364544090983452410104814189306842e218,
-3.93458672964390282694891288533713429355657e221,
4.20882111481900820046571171111494898242731e224,
-4.59022962206179186559802940573325591059371e227,
5.10317257726295759279198185106496768539760e230,
-5.78227623036569554015377271242917142512200e233,
6.67624821678358810322637794412809363451080e236,
-7.85353076444504163225916259639312444428230e239,
9.41068940670587255245443288258762485293948e242,
-1.14849338734651839938498599206805592548354e246,
1.42729587428487856771416320087122499897180e249,
-1.80595595869093090142285728117654560926719e252,
2.32615353076608052161297985184708876161736e255,
-3.04957517154995947681942819261542593785327e258,
4.06858060764339734424012124124937318633684e261,
-5.52310313219743616252320044093186392324280e264,
7.62772793964343924869949690204961215533859e267,
-1.07155711196978863132793524001065396932667e271,
1.53102008959691884453440916153355334355847e274,
-2.22448916821798346676602348865048510824835e277,
3.28626791906901391668189736436895275365183e280,
-4.93559289559603449020711938191575963496999e283,
7.53495712008325067212266049779283956727824e286,
-1.16914851545841777278088924731655041783900e290,
1.84352614678389394126646201597702232396492e293,
-2.95368261729680829728014917350525183485207e296,
4.80793212775015697668878704043264072227967e299,
-7.95021250458852528538243631671158693036798e302,
1.33527841873546338750122832017820518292039e306]

},{}],1765:[function(require,module,exports){
module.exports=[
	-0.5,
	1.644934066848226436472415166646025189218949901206798437735,
	1.082323233711138191516003696541167902774750951918726907682,
	1.017343061984449139714517929790920527901817490032853561842,
	1.004077356197944339378685238508652465258960790649850020329,
	1.000994575127818085337145958900319017006019531564477517257,
	1.000246086553308048298637998047739670960416088458003404533,
	1.000061248135058704829258545105135333747481696169154549482,
	1.000015282259408651871732571487636722023237388990471531153,
	1.000003817293264999839856461644621939730454697218953331143,
	1.000000953962033872796113152038683449345943794187410595750,
	1.000000238450502727732990003648186752994935041821779658269,
	1.000000059608189051259479612440207935801227503918837302795,
	1.000000014901554828365041234658506630698628864788167885910,
	1.000000003725334024788457054819204018402423232893059295811,
	1.000000000931327432419668182871764735021219813567955136816,
	1.000000000232831183367650549200145597594049502482982284530,
	1.000000000058207720879027008892436859891063054173122604617,
	1.000000000014551921891041984235929632245318420983808894124,
	1.000000000003637979547378651190237236355873273512646028384,
	1.000000000000909494784026388928253311838694908753860000990,
	1.000000000000227373684582465251522682157797869121382982198,
	1.000000000000056843419876275856092771829675240685530571588,
	1.000000000000014210854828031606769834307141739537678698605,
	1.000000000000003552713691337113673298469534059342992145655,
	1.000000000000000888178421093081590309609138639138632560887,
	1.000000000000000222044605079804198399932009420465396423665,
	1.000000000000000055511151248454812437237365905094302816723
]

},{}],1766:[function(require,module,exports){
'use strict';

/**
* Evaluate the Riemann zeta function.
*
* @module @stdlib/math/base/special/riemann-zeta
*
* @example
* var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
*
* var v = zeta( 1.1 );
* // returns ~10.584
*
* v = zeta( -4.0 );
* // returns 0.0
*
* v = zeta( 70.0 );
* // returns 1.0
*
* v = zeta( 0.5 );
* // returns ~-1.46
*
* v = zeta( 1.0 ); // pole
* // returns NaN
*
* v = zeta( NaN );
* // returns NaN
*/

// MODULES //

var zeta = require( './zeta.js' );


// EXPORTS //

module.exports = zeta;

},{"./zeta.js":1774}],1767:[function(require,module,exports){
module.exports=[
	1.202056903159594285399738161511449990764986292340498881792,
	1.036927755143369926331365486457034168057080919501912811974,
	1.008349277381922826839797549849796759599863560565238706417,
	1.002008392826082214417852769232412060485605851394888756548,
	1.000494188604119464558702282526469936468606435758208617119,
	1.000122713347578489146751836526357395714275105895509845136,
	1.000030588236307020493551728510645062587627948706858177506,
	1.000007637197637899762273600293563029213088249090262679095,
	1.000001908212716553938925656957795101353258571144838630235,
	1.000000476932986787806463116719604373045966446694784937600,
	1.000000119219925965311073067788718882326387254997784519858,
	1.000000029803503514652280186063705069366011844730919543312,
	1.000000007450711789835429491981004170604119454719031882565,
	1.000000001862659723513049006403909945416948061665330469200,
	1.000000000465662906503378407298923325122007106269185336947,
	1.000000000116415501727005197759297383545630951652247172763,
	1.000000000029103850444970996869294252278840464106981987433,
	1.000000000007275959835057481014520869012338059264850925555,
	1.000000000001818989650307065947584832100730085030589309618,
	1.000000000000454747378304215402679911202948857033904529911,
	1.000000000000113686840768022784934910483802590643743590284,
	1.000000000000028421709768893018554550737049426620743688265,
	1.000000000000007105427395210852712877354479956800022742043,
	1.000000000000001776356843579120327473349014400279570155508,
	1.000000000000000444089210314381336419777094026812133645960,
	1.000000000000000111022302514106613372054456992138270248322,
	1.000000000000000027755575621361241725816324538540697689849,
	1.000000000000000006938893904544153697446085326249809274836,
	1.000000000000000001734723476047576572048972969937595907478,
	1.000000000000000000433680869002065048749702356590624136125,
	1.000000000000000000108420217249424140630127111654613825894,
	1.000000000000000000027105054312234688319546213119497764319,
	1.000000000000000000006776263578045189097995298741556686206,
	1.000000000000000000001694065894509799165406492747124861940,
	1.000000000000000000000423516473627283334786227048335793441,
	1.000000000000000000000105879118406802338522650015392383985,
	1.000000000000000000000026469779601698529611341166842038716,
	1.000000000000000000000006617444900424404067355245332308220,
	1.000000000000000000000001654361225106075646229923677181049,
	1.000000000000000000000000413590306276516092600938245550814,
	1.000000000000000000000000103397576569128709932840955917459,
	1.000000000000000000000000025849394142282142681277617708450,
	1.000000000000000000000000006462348535570531803438002161122,
	1.000000000000000000000000001615587133892632521206011405705,
	1.000000000000000000000000000403896783473158082562226281299,
	1.000000000000000000000000000100974195868289515336192507001,
	1.000000000000000000000000000025243548967072378244674341938,
	1.000000000000000000000000000006310887241768094495682609394,
	1.000000000000000000000000000001577721810442023616644432783,
	1.000000000000000000000000000000394430452610505903352639355,
	1.000000000000000000000000000000098607613152626475748329968,
	1.000000000000000000000000000000024651903288156618927101395,
	1.000000000000000000000000000000006162975822039154730666338,
	1.000000000000000000000000000000001540743955509788682543361,
	1.000000000000000000000000000000000385185988877447170622149,
	1.000000000000000000000000000000000096296497219361792654016
]

},{}],1768:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.2433929443359375;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.2433929443359375 + (x * (-0.4909247051635357 + (x * (0.055761621477604675 + (x * (-0.003209124988790859 + (x * (0.0004515345286457964 + (x * -0.000009332412703570615))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.27996033431034445 + (x * (0.04196762233099861 + (x * (-0.00413421406552171 + (x * (0.00024978985622317937 + (x * -0.000010185578841856403))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.000009332412703570615 + (x * (0.0004515345286457964 + (x * (-0.003209124988790859 + (x * (0.055761621477604675 + (x * (-0.4909247051635357 + (x * 0.2433929443359375))))))))); // eslint-disable-line max-len
		s2 = -0.000010185578841856403 + (x * (0.00024978985622317937 + (x * (-0.00413421406552171 + (x * (0.04196762233099861 + (x * (-0.27996033431034445 + (x * 1.0))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1769:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.5772156649015329;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.5772156649015329 + (x * (0.24321064694010716 + (x * (0.04173646739882165 + (x * (0.003902520870728433 + (x * (0.0002496063671518772 + (x * 0.00001101084409767329))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.29520127712663174 + (x * (0.043460910607305496 + (x * (0.004349305820858264 + (x * (0.0002557842261404885 + (x * 0.000010991819782396113))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00001101084409767329 + (x * (0.0002496063671518772 + (x * (0.003902520870728433 + (x * (0.04173646739882165 + (x * (0.24321064694010716 + (x * 0.5772156649015329))))))))); // eslint-disable-line max-len
		s2 = 0.000010991819782396113 + (x * (0.0002557842261404885 + (x * (0.004349305820858264 + (x * (0.043460910607305496 + (x * (0.29520127712663174 + (x * 1.0))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1770:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.053725830002359504;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.053725830002359504 + (x * (0.04451634732923656 + (x * (0.012867767353451996 + (x * (0.0009754177045739176 + (x * (0.00007698751015736541 + (x * (0.000003280325100003831 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.3338319455303405 + (x * (0.048779843129140764 + (x * (0.0047903970857355845 + (x * (0.00027077670395633634 + (x * (0.000010695186753205734 + (x * 2.3627662397497864e-8))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.000003280325100003831 + (x * (0.00007698751015736541 + (x * (0.0009754177045739176 + (x * (0.012867767353451996 + (x * (0.04451634732923656 + (x * -0.053725830002359504))))))))))); // eslint-disable-line max-len
		s2 = 2.3627662397497864e-8 + (x * (0.000010695186753205734 + (x * (0.00027077670395633634 + (x * (0.0047903970857355845 + (x * (0.048779843129140764 + (x * (0.3338319455303405 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1771:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -2.497101906022594;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -2.497101906022594 + (x * (-2.600133018094757 + (x * (-0.9392604353771099 + (x * (-0.13844861799574154 + (x * (-0.007017212405498024 + (x * (-0.000022925731059489392 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7060390259377451 + (x * (0.15739599649558628 + (x * (0.010611795097684508 + (x * (-0.000036910273311764616 + (x * (0.0000049340956392759 + (x * (-2.3405548702528722e-7 + (x * (7.188337293654598e-9 + (x * -1.1292001134749475e-10))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (-0.000022925731059489392 + (x * (-0.007017212405498024 + (x * (-0.13844861799574154 + (x * (-0.9392604353771099 + (x * (-2.600133018094757 + (x * -2.497101906022594))))))))))))))); // eslint-disable-line max-len
		s2 = -1.1292001134749475e-10 + (x * (7.188337293654598e-9 + (x * (-2.3405548702528722e-7 + (x * (0.0000049340956392759 + (x * (-0.000036910273311764616 + (x * (0.010611795097684508 + (x * (0.15739599649558628 + (x * (0.7060390259377451 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1772:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -4.785580284951356;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4.785580284951356 + (x * (-1.8919736488197254 + (x * (-0.21140713487441282 + (x * (-0.0001892047582600767 + (x * (0.0011514092388917874 + (x * (0.00006399492042131645 + (x * (0.000001393489324453249 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.24434533737818856 + (x * (0.008733707544922887 + (x * (-0.0011759276533443448 + (x * (-0.00007437436828999331 + (x * (-0.0000021750464515767985 + (x * (4.710012640030765e-9 + (x * (-8.333784406253855e-11 + (x * 6.998415452048457e-13))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (0.000001393489324453249 + (x * (0.00006399492042131645 + (x * (0.0011514092388917874 + (x * (-0.0001892047582600767 + (x * (-0.21140713487441282 + (x * (-1.8919736488197254 + (x * -4.785580284951356))))))))))))))); // eslint-disable-line max-len
		s2 = 6.998415452048457e-13 + (x * (-8.333784406253855e-11 + (x * (4.710012640030765e-9 + (x * (-0.0000021750464515767985 + (x * (-0.00007437436828999331 + (x * (-0.0011759276533443448 + (x * (0.008733707544922887 + (x * (0.24434533737818856 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1773:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -10.39489505733089;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -10.39489505733089 + (x * (-2.858272196711067 + (x * (-0.34772826653924577 + (x * (-0.025115606465534634 + (x * (-0.001194591734169687 + (x * (-0.00003825293235079675 + (x * (-7.855236337967234e-7 + (x * -8.214657090954655e-9))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.2081963335726719 + (x * (0.019568765731720502 + (x * (0.0011107963810248593 + (x * (0.000040850774626603926 + (x * (9.555611230656935e-7 + (x * (1.185071534740229e-8 + (x * 2.226094836273526e-15))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -8.214657090954655e-9 + (x * (-7.855236337967234e-7 + (x * (-0.00003825293235079675 + (x * (-0.001194591734169687 + (x * (-0.025115606465534634 + (x * (-0.34772826653924577 + (x * (-2.858272196711067 + (x * -10.39489505733089))))))))))))); // eslint-disable-line max-len
		s2 = 2.226094836273526e-15 + (x * (1.185071534740229e-8 + (x * (9.555611230656935e-7 + (x * (0.000040850774626603926 + (x * (0.0011107963810248593 + (x * (0.019568765731720502 + (x * (0.2081963335726719 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1774:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/zeta.hpp}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var floor = require( '@stdlib/math/base/special/floor' );
var gamma = require( '@stdlib/math/base/special/gamma' );
var gammaln = require( '@stdlib/math/base/special/gammaln' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var pow = require( '@stdlib/math/base/special/pow' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
var SQRT_EPSILON = require( '@stdlib/constants/math/float64-sqrt-eps' );
var LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
var ODD_POSITIVE_INTEGERS = require( './odd_positive_integers.json' );
var EVEN_NONNEGATIVE_INTEGERS = require( './even_nonnegative_integers.json' );
var BERNOULLI = require( './bernoulli.json' );
var rateval1 = require( './rational_p1q1.js' );
var rateval2 = require( './rational_p2q2.js' );
var rateval3 = require( './rational_p3q3.js' );
var rateval4 = require( './rational_p4q4.js' );
var rateval5 = require( './rational_p5q5.js' );
var rateval6 = require( './rational_p6q6.js' );


// VARIABLES //

var MAX_BERNOULLI_2N = 129;
var MAX_FACTORIAL = 170; // TODO: consider making external constant
var MAX_LN = 709; // TODO: consider making external constant
var Y1 = 1.2433929443359375;
var Y3 = 0.6986598968505859375;


// MAIN //

/**
* Evaluates the Riemann zeta function.
*
* ## Method
*
* 1.  First, we use the reflection formula
*
*     ```tex
*     \zeta(1-s) = 2 \sin\biggl(\frac{\pi(1-s)}{2}\biggr)(2\pi^{-s})\Gamma(s)\zeta(s)
*     ```
*
*     to make \\(s\\) positive.
*
* 2.  For \\(s \in (0,1)\\), we use the approximation
*
*     ```tex
*     \zeta(s) = \frac{C + \operatorname{R}(1-s) - s}{1-s}
*     ```
*
*     with rational approximation \\(\operatorname{R}(1-z)\\) and constant \\(C\\).
*
* 3.  For \\(s \in (1,4)\\), we use the approximation
*
*     ```tex
*     \zeta(s) = C + \operatorname{R}(s-n) + \frac{1}{s-1}
*     ```
*
*     with rational approximation \\(\operatorname{R}(z-n)\\), constant \\(C\\), and integer \\(n\\).
*
* 4.  For \\(s > 4\\), we use the approximation
*
*     ```tex
*     \zeta(s) = 1 + e^{\operatorname{R}(z-n)}
*     ```
*
*     with rational approximation \\(\operatorname{R}(z-n)\\) and integer \\(n\\).
*
* 5.  For negative odd integers, we use the closed form
*
*     ```tex
*     \zeta(-n) = \frac{(-1)^n}{n+1} B_{n+1}
*     ```
*
*     where \\(B_{n+1}\\) is a Bernoulli number.
*
* 6.  For negative even integers, we use the closed form
*
*     ```tex
*     \zeta(-2n) = 0
*     ```
*
* 7.  For nonnegative even integers, we could use the closed form
*
*     ```tex
*     \zeta(2n) = \frac{(-1)^{n-1}2^{2n-1}\pi^{2n}}{(2n)!} B_{2n}
*     ```
*
*     where \\(B_{2n}\\) is a Bernoulli number. However, to speed computation, we use precomputed values (Wolfram Alpha).
*
* 8.  For positive negative integers, we use precomputed values (Wolfram Alpha), as these values are useful for certain infinite series calculations.
*
*
* ## Notes
*
* -   \\(\[\approx 1.5\mbox{e-}8, 1)\\)
*
*     -   max deviation: \\(2.020\mbox{e-}18\\)
*     -   expected error: \\(-2.020\mbox{e-}18\\)
*     -   max error found (double): \\(3.994987\mbox{e-}17\\)
*
* -   \\(\[1,2\]\\)
*
*     -   max deviation: \\(9.007\mbox{e-}20\\)
*     -   expected error: \\(9.007\mbox{e-}20\\)
*
* -   \\((2,4\]\\)
*
*     -   max deviation: \\(5.946\mbox{e-}22\\)
*     -   expected error: \\(-5.946\mbox{e-}22\\)
*
* -   \\((4,7\]\\)
*
*     -   max deviation: \\(2.955\mbox{e-}17\\)
*     -   expected error: \\(2.955\mbox{e-}17\\)
*     -   max error found (double): \\(2.009135\mbox{e-}16\\)
*
* -   \\((7,15)\\)
*
*     -   max deviation: \\(7.117\mbox{e-}16\\)
*     -   expected error: \\(7.117\mbox{e-}16\\)
*     -   max error found (double): \\(9.387771\mbox{e-}16\\)
*
* -   \\(\[15,36)\\)
*
*     -   max error (in interpolated form): \\(1.668\mbox{e-}17\\)
*     -   max error found (long double): \\(1.669714\mbox{e-}17\\)
*
*
* @param {number} s - input value
* @returns {number} function value
*
* @example
* var v = zeta( 1.1 );
* // returns ~10.584
*
* @example
* var v = zeta( -4.0 );
* // returns 0.0
*
* @example
* var v = zeta( 70.0 );
* // returns 1.0
*
* @example
* var v = zeta( 0.5 );
* // returns ~-1.46
*
* @example
* var v = zeta( 1.0 ); // pole
* // returns NaN
*
* @example
* var v = zeta( NaN );
* // returns NaN
*/
function zeta( s ) {
	var tmp;
	var sc;
	var as;
	var is;
	var r;
	var n;

	// Check for `NaN`:
	if ( isnan( s ) ) {
		return NaN;
	}
	// Check for a pole:
	if ( s === 1.0 ) {
		return NaN;
	}
	// Check for large value:
	if ( s >= 56.0 ) {
		return 1.0;
	}
	// Check for a closed form (integers):
	if ( isInteger( s ) ) {
		// Cast `s` to a 32-bit signed integer:
		is = s|0; // asm type annotation

		// Check that `s` does not exceed MAX_INT32:
		if ( is === s ) {
			if ( is < 0 ) {
				as = (-is)|0; // asm type annotation

				// Check if even negative integer:
				if ( (as&1) === 0 ) {
					return 0.0;
				}
				n = ( (as+1) / 2 )|0; // asm type annotation

				// Check if less than max Bernoulli number:
				if ( n <= MAX_BERNOULLI_2N ) {
					return -BERNOULLI[ n ] / (as+1.0);
				}
				// fall through...
			}
			// Check if even nonnegative integer:
			else if ( (is&1) === 0 ) {
				return EVEN_NONNEGATIVE_INTEGERS[ is/2 ];
			}
			// Must be a odd positive integer:
			else {
				return ODD_POSITIVE_INTEGERS[ (is-3)/2 ];
			}
		}
		// fall through...
	}
	if ( abs(s) < SQRT_EPSILON ) {
		return -0.5 - (LN_SQRT_TWO_PI * s);
	}
	sc = 1.0 - s;
	if ( s < 0.0 ) {
		// Check if even negative integer:
		if ( floor(s/2.0) === s/2.0 ) {
			return 0.0;
		}
		// Swap `s` and `sc`:
		tmp = s;
		s = sc;
		sc = tmp;

		// Determine if computation will overflow:
		if ( s > MAX_FACTORIAL ) {
			tmp = sinpi( 0.5*sc ) * 2.0 * zeta( s );
			r = gammaln( s );
			r -= s * ln( TWO_PI );
			if ( r > MAX_LN ) {
				return ( tmp < 0.0 ) ? NINF : PINF;
			}
			return tmp * exp( r );
		}
		return sinpi( 0.5*sc ) * 2.0 * pow( TWO_PI, -s ) * gamma( s ) * zeta( s ); // eslint-disable-line max-len
	}
	if ( s < 1.0 ) {
		tmp = rateval1( sc );
		tmp -= Y1;
		tmp += sc;
		tmp /= sc;
		return tmp;
	}
	if ( s <= 2.0 ) {
		sc = -sc;
		tmp = 1.0 / sc;
		return tmp + rateval2( sc );
	}
	if ( s <= 4.0 ) {
		tmp = Y3 + ( 1.0 / (-sc) );
		return tmp + rateval3( s-2.0 );
	}
	if ( s <= 7.0 ) {
		tmp = rateval4( s-4.0 );
		return 1.0 + exp( tmp );
	}
	if ( s < 15.0 ) {
		tmp = rateval5( s-7.0 );
		return 1.0 + exp( tmp );
	}
	if ( s < 36.0 ) {
		tmp = rateval6( s-15.0 );
		return 1.0 + exp( tmp );
	}
	// s < 56
	return 1.0 + pow( 2.0, -s );
}


// EXPORTS //

module.exports = zeta;

},{"./bernoulli.json":1764,"./even_nonnegative_integers.json":1765,"./odd_positive_integers.json":1767,"./rational_p1q1.js":1768,"./rational_p2q2.js":1769,"./rational_p3q3.js":1770,"./rational_p4q4.js":1771,"./rational_p5q5.js":1772,"./rational_p6q6.js":1773,"@stdlib/constants/math/float64-ln-sqrt-two-pi":81,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/constants/math/float64-sqrt-eps":105,"@stdlib/constants/math/float64-two-pi":111,"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/gamma":1525,"@stdlib/math/base/special/gammaln":1583,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/sinpi":1820}],1775:[function(require,module,exports){
'use strict';

/**
* Compute the rising factorial.
*
* @module @stdlib/math/base/special/rising-factorial
*
* @example
* var risingFactorial = require( '@stdlib/math/base/special/rising-factorial' );
*
* var v = risingFactorial( 0.9, 5 );
* // returns ~94.766
*
* v = risingFactorial( -9.0, 3 );
* // returns -504.0
*
* v = risingFactorial( 0.0, 2 );
* // returns 0.0
*
* v = risingFactorial( 3.0, -2 );
* // returns 0.5
*/

// MODULES //

var risingFactorial = require( './rising_factorial.js' );


// EXPORTS //

module.exports = risingFactorial;

},{"./rising_factorial.js":1776}],1776:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006, 2010.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );


// VARIABLES //

var fallingFactorial;


// MAIN //

/**
* Computes the rising factorial of `x` and `n`.
*
* ## Notes
*
* -   The rising factorial is defined as
*
*     ```tex
*     \operatorname{risingFactorial}(x, n) = x (x-1) (x-2) (x-3) \ldots (x-n+1)
*     ```
*
*     or equivalently
*
*     ```tex
*     \operatorname{risingFactorial}(x, n) = \frac{ \Gamma(x + n) }{ \Gamma(x) };
*     ```
*
* @param {number} x - first function parameter
* @param {integer} n - second function parameter
* @returns {number} function value
*
* @example
* var v = risingFactorial( 0.9, 5 );
* // returns ~94.766
*
* @example
* var v = risingFactorial( -9.0, 3 );
* // returns -504.0
*
* @example
* var v = risingFactorial( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = risingFactorial( 3.0, -2 );
* // returns 0.5
*/
function risingFactorial( x, n ) {
	var result;
	var inv;

	// Lazy-load to avoid undefined reference due to circular dependency...
	if ( !fallingFactorial ) {
		fallingFactorial = require( '@stdlib/math/base/special/falling-factorial' );
	}
	if ( isnan( x ) || !isInteger( n ) ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		// For `x < 0`, we really have a falling factorial, modulo a possible change of sign. Note that the falling factorial isn't defined for negative `n`, so we'll get rid of that case first:
		if ( n < 0.0 ) {
			x += n;
			n = -n;
			inv = true;
		}
		result = ( (n&1) ? -1.0 : 1.0 ) * fallingFactorial( -x, n );
		if ( inv ) {
			result = 1.0 / result;
		}
		return result;
	}
	if ( n === 0 ) {
		return 1.0;
	}
	if ( x === 0.0 ) {
		if ( n < 0 ) {
			return -gammaDeltaRatio( x+1.0, -n );
		}
		return 0.0;
	}
	if ( x < 1.0 && x+n < 0.0 ) {
		result = gammaDeltaRatio( 1.0-x, -n );
		return ( n&1 ) ? -result : result;
	}
	// We don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:
	return 1.0 / gammaDeltaRatio( x, n );
}


// EXPORTS //

module.exports = risingFactorial;

},{"@stdlib/math/base/assert/is-integer":126,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/falling-factorial":1475,"@stdlib/math/base/special/gamma-delta-ratio":1517}],1777:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":1778}],1778:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],1779:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest power of `10` on a linear scale.
*
* @module @stdlib/math/base/special/round10
*
* @example
* var round10 = require( '@stdlib/math/base/special/round10' );
*
* var v = round10( Math.PI );
* // returns 1.0
*
* v = round10( 13.0 );
* // returns 10.0
*
* v = round10( -0.314 );
* // returns -0.1
*/

// MODULES //

var round10 = require( './round10.js' );


// EXPORTS //

module.exports = round10;

},{"./round10.js":1780}],1780:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var log10 = require( '@stdlib/math/base/special/log10' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base10-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );


// VARIABLES //

// 10^308:
var HUGE = 1.0e308;

// 10^-323
var TINY = 1.0e-323;


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` on a linear scale.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = round10( Math.PI );
* // returns 1.0
*
* @example
* var v = round10( 13.0 );
* // returns 10.0
*
* @example
* var v = round10( -0.314 );
* // returns -0.1
*/
function round10( x ) {
	var sign;
	var half;
	var p1;
	var p2;
	var y1;
	var y2;
	var p;
	if (
		isnan( x ) ||
		isInfinite( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `10^p = x` for `p`:
	p = log10( x );

	// Find the previous and next integer powers:
	p1 = floor( p );
	p2 = ceil( p );

	// Handle tiny:
	if ( p1 === MIN_EXP_SUBNORMAL ) {
		return sign * TINY;
	}
	// Handle huge:
	if ( p1 === MAX_EXP ) {
		return sign * HUGE;
	}
	// Compute previous and next powers of 10:
	y1 = pow( 10.0, p1 );
	y2 = pow( 10.0, p2 );

	// Find the closest power of 10:
	half = ( y2 - y1 ) / 2.0;
	if ( y1+half > x ) {
		return sign * y1;
	}
	return sign * y2;
}


// EXPORTS //

module.exports = round10;

},{"@stdlib/constants/math/float64-max-base10-exponent":84,"@stdlib/constants/math/float64-min-base10-exponent-subnormal":92,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/pow":1743}],1781:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest power of two on a linear scale.
*
* @module @stdlib/math/base/special/round2
*
* @example
* var round2 = require( '@stdlib/math/base/special/round2' );
*
* var v = round2( Math.PI );
* // returns 4.0
*
* v = round2( 13.0 );
* // returns 16.0
*
* v = round2( -0.314 );
* // returns -0.25
*/

// MODULES //

var round2 = require( './round2.js' );


// EXPORTS //

module.exports = round2;

},{"./round2.js":1782}],1782:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var log2 = require( '@stdlib/math/base/special/log2' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base2-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// VARIABLES //

// 2^1023:
var HUGE = pow( 2.0, MAX_EXP );
var HALF_HUGE = HUGE / 2.0;


// MAIN //

/**
* Rounds a numeric value to the nearest power of two on a linear scale.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = round2( Math.PI );
* // returns 4.0
*
* @example
* var v = round2( 13.0 );
* // returns 16.0
*
* @example
* var v = round2( -0.314 );
* // returns -0.25
*/
function round2( x ) {
	var sign;
	var half;
	var p1;
	var p2;
	var y1;
	var y2;
	var p;
	if (
		isnan( x ) ||
		isInfinite( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	// Solve the equation `2^p = x` for `p`:
	p = log2( x );

	// If provided the smallest subnormal, no rounding possible:
	if ( p === MIN_EXP_SUBNORMAL ) {
		return x;
	}
	// Find the previous and next integer powers:
	p1 = floor( p );
	p2 = ceil( p );

	// Handle overflow:
	if ( p1 === MAX_EXP ) {
		if ( x - HUGE >= HALF_HUGE ) {
			return sign * PINF; // sign-preserving
		}
		return sign * HUGE;
	}
	// Compute previous and next powers of two:
	y1 = pow( 2.0, p1 );
	y2 = pow( 2.0, p2 );

	// Find the closest power of two:
	half = ( y2 - y1 ) / 2.0;
	if ( y1+half > x ) {
		return sign * y1;
	}
	return sign * y2;
}


// EXPORTS //

module.exports = round2;

},{"@stdlib/constants/math/float64-max-base2-exponent":86,"@stdlib/constants/math/float64-min-base2-exponent-subnormal":94,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log2":1693,"@stdlib/math/base/special/pow":1743}],1783:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest multiple of `b^n`.
*
* @module @stdlib/math/base/special/roundb
*
* @example
* var roundb = require( '@stdlib/math/base/special/roundb' );
*
* // Round a value to 2 decimal places:
* var v = roundb( Math.PI, -2, 10 );
* // returns 3.14
*
* // If n = 0 or b = 1, behavior is same as `round`:
* v = roundb( Math.PI, 0, 2 );
* // returns 3.0
*
* // Round a value to the nearest multiple of two:
* v = roundb( 5.0, 1, 2 );
* // returns 6.0
*/

// MODULES //

var roundb = require( './roundb.js' );


// EXPORTS //

module.exports = roundb;

},{"./roundb.js":1784}],1784:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var round = require( '@stdlib/math/base/special/round' );
var roundn = require( '@stdlib/math/base/special/roundn' );


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(b^n\\) on a linear scale.
*
* @param {number} x - input value
* @param {integer} n - integer power
* @param {PositiveInteger} b - base
* @returns {number} rounded value
*
* @example
* // Round a value to 2 decimal places:
* var v = roundb( Math.PI, -2, 10 );
* // returns 3.14
*
* @example
* // If n = 0 or b = 1, `roundb` behaves like `round`:
* var v = roundb( Math.PI, 0, 2 );
* // returns 3.0
*
* @example
* // Round a value to the nearest multiple of two:
* var v = roundb( 5.0, 1, 2 );
* // returns 6.0
*/
function roundb( x, n, b ) {
	var y;
	var s;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( b ) ||
		b <= 0 ||
		isInfinite( n ) ||
		isInfinite( b )
	) {
		return NaN;
	}
	if ( isInfinite( x ) || x === 0.0 ) {
		return x;
	}
	if ( b === 10 ) {
		return roundn( x, n );
	}
	if ( n === 0 || b === 1 ) {
		return round( x );
	}
	s = pow( b, -n );

	// Check for overflow:
	if ( isInfinite( s ) ) {
		return x;
	}
	y = round( x * s ) / s;

	// Check for overflow:
	if ( isInfinite( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

module.exports = roundb;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/round":1777,"@stdlib/math/base/special/roundn":1785}],1785:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest multiple of `10^n`.
*
* @module @stdlib/math/base/special/roundn
*
* @example
* var roundn = require( '@stdlib/math/base/special/roundn' );
*
* // Round a value to 2 decimal places:
* var v = roundn( Math.PI, -2 );
* // returns 3.14
*
* // If n = 0, `roundn` behaves like `round`:
* v = roundn( Math.PI, 0 );
* // returns 3.0
*
* // Round a value to the nearest thousand:
* v = roundn( 12368.0, 3 );
* // returns 12000.0
*/

// MODULES //

var roundn = require( './roundn.js' );


// EXPORTS //

module.exports = roundn;

},{"./roundn.js":1786}],1786:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var round = require( '@stdlib/math/base/special/round' );
var MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base10-exponent' );
var MIN_EXP = require( '@stdlib/constants/math/float64-min-base10-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );


// VARIABLES //

var MAX_INT = MAX_SAFE_INTEGER + 1;
var HUGE = 1.0e+308;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\).
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{roundn}(x,n) = \frac{\operatorname{round}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{round}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior. For instance, the result of \\(\operatorname{roundn}(0.2+0.1,-16)\\) is \\(0.3000000000000001\\) and not \\(0.3\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{round}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible finite number \\(x\\) to the nearest \\(10^n\\) is \\(0.0\\). To ensure consistent behavior with \\(\operatorname{round}(x)\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is **always** an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{roundn}(x,n) = \frac{\biggl(\frac{\operatorname{round}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{roundn}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{roundn}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{roundn}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{roundn}(\pm\infty, n) &= \pm\infty \\
* \operatorname{roundn}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
* ## Notes
*
* 1.  Alternative algorithms:
*
*     -   Round by [casting][1] \\(x\\) to an exponential string.
*     -   Native Python implementation [1][2] and [2][3].
*
* [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
* [2]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1082
* [3]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1226
*
*
* @param {number} x - input value
* @param {integer} n - integer power of `10`
* @returns {number} rounded value
*
* @example
* // Round a value to 2 decimal places:
* var v = roundn( Math.PI, -2 );
* // returns 3.14
*
* @example
* // If n = 0, `roundn` behaves like `round`:
* var v = roundn( Math.PI, 0 );
* // returns 3.0
*
* @example
* // Round a value to the nearest thousand:
* var v = roundn( 12368.0, 3 );
* // returns 12000.0
*/
function roundn( x, n ) {
	var s;
	var y;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isInfinite( n )
	) {
		return NaN;
	}
	if (
		// Handle infinities...
		isInfinite( x ) ||

		// Handle +-0...
		x === 0.0 ||

		// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...
		n < MIN_EXP_SUBNORMAL ||

		// If `|x|` is large enough, no decimals to round...
		( abs( x ) > MAX_INT && n <= 0 )
	) {
		return x;
	}
	// The maximum absolute double is ~1.8e308. Accordingly, any possible finite `x` rounded to the nearest >=10^309 is 0.0.
	if ( n > MAX_EXP ) {
		return 0.0 * x; // preserve the sign (same behavior as round)
	}
	// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...
	if ( n < MIN_EXP ) {
		s = pow( 10.0, -(n + MAX_EXP) );
		y = (x*HUGE) * s; // order of operation matters!
		if ( isInfinite( y ) ) {
			return x;
		}
		return ( round(y)/HUGE ) / s;
	}
	s = pow( 10.0, -n );
	y = x * s;
	if ( isInfinite( y ) ) {
		return x;
	}
	return round( y ) / s;
}


// EXPORTS //

module.exports = roundn;

},{"@stdlib/constants/math/float64-max-base10-exponent":84,"@stdlib/constants/math/float64-max-safe-integer":88,"@stdlib/constants/math/float64-min-base10-exponent":93,"@stdlib/constants/math/float64-min-base10-exponent-subnormal":92,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/round":1777}],1787:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest number with `N` significant figures.
*
* @module @stdlib/math/base/special/roundsd
*
* @example
* var roundsd = require( '@stdlib/math/base/special/roundsd' );
*
* var v = roundsd( Math.PI, 3 );
* // returns 3.14
*
* v = roundsd( Math.PI, 1 );
* // returns 3.0
*
* v = roundsd( 12368.0, 2 );
* // returns 12000.0
*
* v = roundsd( 0.0313, 2, 2 );
* // returns 0.03125
*/

// MODULES //

var roundsd = require( './roundsd.js' );


// EXPORTS //

module.exports = roundsd;

},{"./roundsd.js":1788}],1788:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var log10 = require( '@stdlib/math/base/special/log10' );
var ln = require( '@stdlib/math/base/special/ln' );
var abs = require( '@stdlib/math/base/special/abs' );
var floor = require( '@stdlib/math/base/special/floor' );
var exponent = require( '@stdlib/number/float64/base/exponent' );
var round = require( '@stdlib/math/base/special/round' );


// MAIN //

/**
* Rounds a numeric value to the nearest number with \\(N\\) significant figures.
*
* @param {number} x - input value
* @param {PositiveInteger} n - number of significant figures
* @param {PositiveInteger} [b=10] - base
* @returns {number} rounded value
*
* @example
* var v = roundsd( Math.PI, 3 );
* // returns 3.14
*
* @example
* var v = roundsd( Math.PI, 1 );
* // returns 3.0
*
* @example
* var v = roundsd( 12368.0, 2 );
* // returns 12000.0
*
* @example
* var v = roundsd( 0.0313, 2, 2 );
* // returns 0.03125
*/
function roundsd( x, n, b ) {
	var base;
	var exp;
	var s;
	var y;
	if (
		isnan( x ) ||
		isnan( n ) ||
		n < 1 ||
		isInfinite( n )
	) {
		return NaN;
	}
	if ( arguments.length > 2 ) {
		if (
			isnan( b ) ||
			b <= 0 ||
			isInfinite( b )
		) {
			return NaN;
		}
		base = b;
	} else {
		base = 10;
	}
	if ( isInfinite( x ) || x === 0.0 ) {
		return x;
	}
	if ( base === 10 ) {
		exp = log10( abs( x ) );
	}
	else if ( base === 2 ) {
		exp = exponent( abs( x ) );
	}
	else {
		exp = ln( abs(x) ) / ln( base );
	}
	exp = floor( exp - n + 1.0 );
	s = pow( base, abs( exp ) );

	// Check for overflow:
	if ( isInfinite( s ) ) {
		return x;
	}
	// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.
	if ( exp < 0 ) {
		y = round( x * s ) / s;
	} else {
		y = round( x / s ) * s;
	}
	// Check for overflow:
	if ( isInfinite( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

module.exports = roundsd;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/round":1777,"@stdlib/number/float64/base/exponent":1903}],1789:[function(require,module,exports){
'use strict';

/**
* Compute the sine and cosine integrals.
*
* @module @stdlib/math/base/special/sici
*
* @example
* var sici = require( '@stdlib/math/base/special/sici' );
*
* var v = sici( 3.0 );
* // returns [ ~1.849, ~0.12 ]
*
* v = sici( 0.0 );
* // returns [ 0.0, -Infinity  ]
*
* v = sici( -9.0 );
* // returns [ ~-1.665, ~0.055 ]
*
* v = sici( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var sici = require( '@stdlib/math/base/special/sici' );
*
* var out = new Float64Array( 2 );
*
* var v = sici( out, 3.0 );
* // returns <Float64Array>[ ~1.849, ~0.12 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var sici = require( './main.js' );


// EXPORTS //

module.exports = sici;

},{"./main.js":1790}],1790:[function(require,module,exports){
'use strict';

// MODULES //

var fcn = require( './sici.js' );


// MAIN //

/**
* Computes the sine and cosine integrals.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = sici( 3.0 );
* // returns [ ~1.849, ~0.12 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
*
* var v = sici( out, 3.0 );
* // returns <Float64Array>[ ~1.849, ~0.12 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var v = sici( 0.0 );
* // returns [ 0.0, -Infinity  ]
*
* @example
* var v = sici( -9.0 );
* // returns [ ~-1.665, ~0.055 ]
*
* @example
* var v = sici( NaN );
* // returns [ NaN, NaN ]
*/
function sici( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0.0, 0.0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = sici;

},{"./sici.js":1803}],1791:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 4.0;
	}
	return 4.0 + (x * (0.051002805623644606 + (x * (0.00031744202477503275 + (x * (0.0000012321035568588342 + (x * (3.067809975818878e-9 + (x * 4.077460400618806e-12))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1792:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -1.0;
	}
	return -1.0 + (x * (0.028915965260755523 + (x * (-0.0004740072068734079 + (x * (0.000003593250514199931 + (x * (-1.3524950491579076e-8 + (x * 2.0252400238910228e-11))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1793:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 5.489002527562557e-7;
	}
	return 5.489002527562557e-7 + (x * (0.00011003435715391573 + (x * (0.007017106683227897 + (x * (0.1787920529631499 + (x * (1.867922579501842 + (x * (7.308288225055645 + (x * (8.16496634205391 + (x * 1.0))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1794:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 9.70507110881952e-14;
	}
	return 9.70507110881952e-14 + (x * (9.437205903502767e-11 + (x * (3.21956939101046e-8 + (x * (0.000004924350643178815 + (x * (0.00035869648188185157 + (x * (0.012225359477197129 + (x * (0.17868554533207454 + (x * (0.9174636118736841 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1795:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 5.489002234213736e-7;
	}
	return 5.489002234213736e-7 + (x * (0.00010893658065032867 + (x * (0.006810201324725182 + (x * (0.16700661183132304 + (x * (1.6208328770153833 + (x * (5.4593771716181285 + (x * 4.236128628922166))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1796:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 9.70507110881952e-14;
	}
	return 9.70507110881952e-14 + (x * (9.41779576128513e-11 + (x * (3.200927900910049e-8 + (x * (0.0000048621543082645475 + (x * (0.00034955644244785906 + (x * (0.01160642294081244 + (x * (0.16030015822231947 + (x * (0.7137152741001467 + (x * 0.4558808734704653))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1797:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 7.825792189335346e-9;
	}
	return 7.825792189335346e-9 + (x * (0.0000020265918208634397 + (x * (0.0001732210814741771 + (x * (0.006223963454417684 + (x * (0.09887717612776888 + (x * (0.666296701268988 + (x * (1.6440220241335535 + (x * 1.0))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1798:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 3.1404009894636335e-15;
	}
	return 3.1404009894636335e-15 + (x * (3.878301660239547e-12 + (x * (1.7269374896631615e-9 + (x * (3.5704322344374083e-7 + (x * (0.00003684755044425611 + (x * (0.0019028442667439953 + (x * (0.04679131942596258 + (x * (0.48785225869530496 + (x * (1.6854889881101165 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1799:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 7.825790407440903e-9;
	}
	return 7.825790407440903e-9 + (x * (0.0000019796387414096365 + (x * (0.00016199979459893403 + (x * (0.005388686814621773 + (x * (0.07485277376284691 + (x * (0.3971802963923375 + (x * (0.6113791099522193 + (x * 0.08710016989731142))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1800:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 3.1404009894636335e-15;
	}
	return 3.1404009894636335e-15 + (x * (3.859459254302766e-12 + (x * (1.7040445278204452e-9 + (x * (3.471311670841167e-7 + (x * (0.000034894116550227946 + (x * (0.001717182390523479 + (x * (0.03848787676499743 + (x * (0.33041097930563207 + (x * 0.6973599534432762))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1801:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (0.01420852393261499 + (x * (0.00009964121220438756 + (x * (4.418278428012189e-7 + (x * (1.279978911799433e-9 + (x * 2.0326926619595193e-12))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1802:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (-0.04134703162294066 + (x * (0.0009769454381704354 + (x * (-0.000009757593038436328 + (x * (4.625917144270128e-8 + (x * -8.391678279103039e-11))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1803:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.1:  January, 1989
* Copyright 1984, 1987, 1989 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cos = require( '@stdlib/math/base/special/cos' );
var sin = require( '@stdlib/math/base/special/sin' );
var ln = require( '@stdlib/math/base/special/ln' );
var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var polyvalFN4 = require( './polyval_fn4.js' );
var polyvalFD4 = require( './polyval_fd4.js' );
var polyvalFN8 = require( './polyval_fn8.js' );
var polyvalFD8 = require( './polyval_fd8.js' );
var polyvalGN4 = require( './polyval_gn4.js' );
var polyvalGD4 = require( './polyval_gd4.js' );
var polyvalGN8 = require( './polyval_gn8.js' );
var polyvalGD8 = require( './polyval_gd8.js' );
var polyvalSN = require( './polyval_sn.js' );
var polyvalSD = require( './polyval_sd.js' );
var polyvalCN = require( './polyval_cn.js' );
var polyvalCD = require( './polyval_cd.js' );


// MAIN //

/**
* Computes the sine and cosine integrals.
*
* ## Method
*
* -   The integrals are approximated by rational functions.
*
* -   For \\( x > 8 \\), auxiliary functions \\( f(x) \\) and \\( g(x) \\) are employed such that
*
*     ```tex
*     \operatorname{Ci}(x) = f(x) \sin(x) - g(x) \cos(x) \\
*     \operatorname{Si}(x) = \pi/2 - f(x) \cos(x) - g(x) \sin(x)
*     ```
*
* ## Notes
*
* -   Absolute error on test interval \\( \[0,50\] \\), except relative when greater than \\( 1 \\):
*
*     | arithmetic | function    | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | Si          | 30000    | 4.4e-16 | 7.3e-17 |
*     | IEEE       | Ci          | 30000    | 6.9e-16 | 5.1e-17 |
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var v = sici( new Array( 2 ), 3.0 );
* // returns [ ~1.849, ~0.12 ]
*
* @example
* var v = sici( new Array( 2 ), 0.0 );
* // returns [ 0.0, -Infinity  ]
*
* @example
* var v = sici( new Array( 2 ), -9.0 );
* // returns [ ~-1.665, ~0.055 ]
*
* @example
* var v = sici( new Array( 2 ), NaN );
* // returns [ NaN, NaN ]
*/
function sici( out, x ) {
	var sgn;
	var si;
	var ci;
	var c;
	var f;
	var g;
	var s;
	var z;

	if ( isnan( x ) ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( x < 0.0 ) {
		sgn = -1;
		x = -x;
	} else {
		sgn = 0;
	}
	if ( x === 0.0 ) {
		out[ 0 ] = 0.0;
		out[ 1 ] = NINF;
		return out;
	}
	if ( x > 1.0e9 ) {
		if ( isInfinite( x ) ) {
			if ( sgn === -1 ) {
				si = -HALF_PI;
				ci = NaN;
			} else {
				si = HALF_PI;
				ci = 0.0;
			}
			out[ 0 ] = si;
			out[ 1 ] = ci;
			return out;
		}
		si = HALF_PI - ( cos( x ) / x );
		ci = sin( x ) / x;
	}
	if ( x > 4.0 ) {
		s = sin( x );
		c = cos( x );
		z = 1.0 / ( x*x );
		if ( x < 8.0 ) {
			f = polyvalFN4( z ) / ( x * polyvalFD4( z ) );
			g = z * polyvalGN4( z ) / polyvalGD4( z );
		} else {
			f = polyvalFN8( z ) / ( x * polyvalFD8( z ) );
			g = z * polyvalGN8( z ) / polyvalGD8( z );
		}
		si = HALF_PI - ( f*c ) - ( g*s );
		if ( sgn ) {
			si = -si;
		}
		ci = ( f*s ) - ( g*c );
		out[ 0 ] = si;
		out[ 1 ] = ci;
		return out;
	}
	z = x * x;
	s = x * polyvalSN( z ) / polyvalSD( z );
	c = z * polyvalCN( z ) / polyvalCD( z );
	if ( sgn ) {
		s = -s;
	}
	si = s;
	ci = GAMMA + ln( x ) + c; // real part if x < 0
	out[ 0 ] = si;
	out[ 1 ] = ci;
	return out;
}


// EXPORTS //

module.exports = sici;

},{"./polyval_cd.js":1791,"./polyval_cn.js":1792,"./polyval_fd4.js":1793,"./polyval_fd8.js":1794,"./polyval_fn4.js":1795,"./polyval_fn8.js":1796,"./polyval_gd4.js":1797,"./polyval_gd8.js":1798,"./polyval_gn4.js":1799,"./polyval_gn8.js":1800,"./polyval_sd.js":1801,"./polyval_sn.js":1802,"@stdlib/constants/math/float64-eulergamma":71,"@stdlib/constants/math/float64-half-pi":76,"@stdlib/constants/math/float64-ninf":98,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/cos":1396,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/sin":1806}],1804:[function(require,module,exports){
'use strict';

/**
* Evaluate the signum function.
*
* @module @stdlib/math/base/special/signum
*
* @example
* var signum = require( '@stdlib/math/base/special/signum' );
*
* var sign = signum( -5.0 );
* // returns -1.0
*
* sign = signum( 5.0 );
* // returns 1.0
*
* sign = signum( -0.0 );
* // returns -0.0
*
* sign = signum( 0.0 );
* // returns 0.0
*
* sign = signum( NaN );
* // returns NaN
*/

// MODULES //

var signum = require( './signum.js' );


// EXPORTS //

module.exports = signum;

},{"./signum.js":1805}],1805:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the signum function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var sign = signum( -5.0 );
* // returns -1.0
*
* @example
* var sign = signum( 5.0 );
* // returns 1.0
*
* @example
* var sign = signum( -0.0 );
* // returns -0.0
*
* @example
* var sign = signum( 0.0 );
* // returns 0.0
*
* @example
* var sign = signum( NaN );
* // returns NaN
*/
function signum( x ) {
	if ( x === 0.0 || isnan( x ) ) {
		return x; // addresses both +-0
	}
	return ( x < 0.0 ) ? -1.0 : 1.0;
}


// EXPORTS //

module.exports = signum;

},{"@stdlib/math/base/assert/is-nan":128}],1806:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

// MODULES //

var sin = require( './sin.js' );


// EXPORTS //

module.exports = sin;

},{"./sin.js":1807}],1807:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
var SMALL_HIGH_WORD = 0x3e500000|0; // asm type annotation

// Array for storing remainder elements:
var Y = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the sine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |   S    |   C    |    T   |
*     | 1 |   C    |  -S    |  -1/T  |
*     | 2 |  -S    |  -C    |    T   |
*     | 3 |  -C    |   S    |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} sine
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;

	ix = getHighWord( x );
	ix &= ABS_MASK;

	// Case: |x| ~< π/4
	if ( ix <= PIO4_HIGH_WORD ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			return x;
		}
		return kernelSin( x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		return NaN;
	}
	// Argument reduction...
	n = rempio2( x, Y );
	switch ( n & 3 ) {
	case 0:
		return kernelSin( Y[ 0 ], Y[ 1 ] );
	case 1:
		return kernelCos( Y[ 0 ], Y[ 1 ] );
	case 2:
		return -kernelSin( Y[ 0 ], Y[ 1 ] );
	default:
		return -kernelCos( Y[ 0 ], Y[ 1 ] );
	}
}


// EXPORTS //

module.exports = sin;

},{"@stdlib/math/base/special/kernel-cos":1662,"@stdlib/math/base/special/kernel-sin":1666,"@stdlib/math/base/special/rempio2":1760,"@stdlib/number/float64/base/get-high-word":1909}],1808:[function(require,module,exports){
'use strict';

/**
* Compute the normalized cardinal sine of a number.
*
* @module @stdlib/math/base/special/sinc
*
* @example
* var sinc = require( '@stdlib/math/base/special/sinc' );
*
* var v = sinc( 0.5 );
* // returns ~0.637
*
* v = sinc( -1.2 );
* // returns ~-0.156

* v = sinc( 0.0 );
* // returns 1.0
*
* v = sinc( NaN );
* // returns NaN
*/

// MODULES //

var sinc = require( './sinc.js' );


// EXPORTS //

module.exports = sinc;

},{"./sinc.js":1809}],1809:[function(require,module,exports){
'use strict';

// MODULES //

var sinpi = require( '@stdlib/math/base/special/sinpi' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Computes the normalized cardinal sine of a number.
*
* ## Method
*
* For \\( x \neq 0 \\), the normalized cardinal sine is calculated as
*
* ```tex
* \operatorname{sinc}(x) = \frac{\operatorname{sin}(\pi x)}{\pi x}.
* ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align}
* \operatorname{sinc}(0) &= 1 & \\
* \operatorname{sinc}(\infty) &= 0 & \\
* \operatorname{sinc}(-\infty) &= 0 & \\
* \operatorname{sinc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align}
* ```
*
*
* @param {number} x - input value
* @returns {number} cardinal sine
*
* @example
* var v = sinc( 0.5 );
* // returns ~0.637
*
* @example
* var v = sinc( -1.2 );
* // returns ~-0.156
*
* @example
* var v = sinc( 0.0 );
* // returns 1.0
*
* @example
* var v = sinc( NaN );
* // returns NaN
*/
function sinc( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInfinite( x ) ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return 1.0;
	}
	return sinpi( x ) / ( PI*x );
}


// EXPORTS //

module.exports = sinc;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/sinpi":1820}],1810:[function(require,module,exports){
'use strict';

/**
* Simultaneously compute the sine and cosine of a number.
*
* @module @stdlib/math/base/special/sincos
*
* @example
* var sincos = require( '@stdlib/math/base/special/sincos' );
*
* var v = sincos( 0.0 );
* // returns [ ~0.0, ~1.0 ]
*
* v = sincos( Math.PI/2.0 );
* // returns [ ~1.0, ~0.0 ]
*
* v = sincos( -Math.PI/6.0 );
* // returns [ ~-0.5, ~0.866 ]
*
* v = sincos( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var sincos = require( '@stdlib/math/base/special/sincos' );
*
* var out = new Float64Array( 2 );
*
* var v = sincos( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~1.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var sincos = require( './main.js' );


// EXPORTS //

module.exports = sincos;

},{"./main.js":1812}],1811:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of FreeBSD implementations of [k_sin.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co} and [k_cos.c]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}..
*
* The implementation follows the original sine and cosine kernels, but has been modified for JavaScript and combined into a single function.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C

var C1 = 4.16666666666666019037e-02;  // 0x3FA55555, 0x5555554C
var C2 = -1.38888888888741095749e-03; // 0xBF56C16C, 0x16C15177
var C3 = 2.48015872894767294178e-05;  // 0x3EFA01A0, 0x19CB1590
var C4 = -2.75573143513906633035e-07; // 0xBE927E4F, 0x809C52AD
var C5 = 2.08757232129817482790e-09;  // 0x3E21EE9E, 0xBDB4B1C4
var C6 = -1.13596475577881948265e-11; // 0xBDA8FAE9, 0xBE8838D4


// MAIN //

/**
* Computes the sine and cosine on \\( \approx \[-\pi/4, \pi/4\] \\) (except for \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value (in radians, assumed to be bounded by `~π/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {(Array|TypedArray|Object)} sine and cosine
*/
function kernelSincos( out, x, y ) {
	var hz;
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		out[ 0 ] = x + (v * (S1 + (z*r)));
	} else {
		out[ 0 ] = x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
	}
	r = z * (C1 + (z * (C2 + (z*C3))));
	r += w * w * (C4 + (z * (C5 + (z*C6))));
	hz = 0.5 * z;
	w = 1.0 - hz;
	out[ 1 ] = w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );

	return out;
}


// EXPORTS //

module.exports = kernelSincos;

},{}],1812:[function(require,module,exports){
'use strict';

// MODULES //

var computeSincos = require( './sincos.js' );


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number.
*
* @param {(Array|TypedArray|Object)} [out] - destination array
* @param {number} x - input value (in radians)
* @returns {(Array|TypedArray|Object)} sine and cosine
*
* @example
* var v = sincos( 0.0 );
* // returns ~0.0
*
* @example
* var v = sincos( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = sincos( -Math.PI/6.0 );
* // returns ~-0.5
*
* @example
* var v = sincos( NaN );
* // returns NaN
*
* @example
* var out = new Float64Array( 2 );
*
* var v = sincos( out, 0.0 );
* // return <Float64Array>[ ~0.0, ~1.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function sincos( out, x ) {
	if ( arguments.length === 1 ) {
		return computeSincos( [ 0.0, 0.0 ], out );
	}
	return computeSincos( out, x );
}


// EXPORTS //

module.exports = sincos;

},{"./sincos.js":1813}],1813:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );
var kernelSincos = require( './kernel_sincos.js' );


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// The smaller of the two cutoffs for the sine and cosine kernels: 2^-27 = 0x3e400000 => 00111110010000000000000000000000
var SMALL_HIGH_WORD = 0x3e400000|0; // asm type annotation

// Array for storing remainder elements:
var Y = [ 0.0, 0.0 ];


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\) and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value (in radians)
* @returns {(Array|TypedArray|Object)} sine and cosine
*
* @example
* var v = sincos( [ 0.0, 0.0 ], 0.0 );
* // returns [ ~0.0, ~1.0 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], Math.PI/2.0 );
* // returns [ ~1.0, ~0.0 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], -Math.PI/6.0 );
* // returns [ ~-0.5, ~0.866 ]
*
* @example
* var v = sincos( [ 0.0, 0.0 ], NaN );
* // returns [ NaN, NaN ]
*/
function sincos( out, x ) {
	var ix;
	var n;

	ix = getHighWord( x );

	// Case: |x| ~< π/4
	ix &= ABS_MASK;
	if ( ix <= PIO4_HIGH_WORD ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			if ( (x|0) === 0 ) {
				out[ 0 ] = x;
				out[ 1 ] = 0.0;
			}
		}
		return kernelSincos( out, x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	// Argument reduction...
	n = rempio2( x, Y );

	// Compute the sine and cosine together:
	kernelSincos( out, Y[ 0 ], Y[ 1 ] );

	switch ( n & 3 ) {
	case 1:
		ix = out[ 1 ];
		out[ 1 ] = -out[ 0 ];
		out[ 0 ] = ix;
		return out;
	case 2:
		out[ 0 ] *= -1;
		out[ 1 ] *= -1;
		return out;
	case 3:
		// Passing
		ix = -out[ 1 ];
		out[ 1 ] = out[ 0 ];
		out[ 0 ] = ix;
		return out;
	default:
		return out;
	}
}


// EXPORTS //

module.exports = sincos;

},{"./kernel_sincos.js":1811,"@stdlib/math/base/special/rempio2":1760,"@stdlib/number/float64/base/get-high-word":1909}],1814:[function(require,module,exports){
'use strict';

/**
* Simultaneously compute the sine and cosine of a number times π.
*
* @module @stdlib/math/base/special/sincospi
*
* @example
* var sincospi = require( '@stdlib/math/base/special/sincospi' );
*
* var v = sincospi( 0.0 );
* // returns [ 0.0, 1.0 ]
*
* v = sincospi( 0.5 );
* // returns [ 1.0, 0.0 ]
*
* v = sincospi( 0.1 );
* // returns [ ~0.309, ~0.951 ]
*
* v = sincospi( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var sincospi = require( '@stdlib/math/base/special/sincospi' );
*
* var out = new Float64Array( 2 );
*
* var v = sincospi( out, 0.0 );
* // returns <Float64Array>[ 0.0, 1.0 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var sincospi = require( './main.js' );


// EXPORTS //

module.exports = sincospi;

},{"./main.js":1815}],1815:[function(require,module,exports){
'use strict';

// MODULES //

var compute = require( './sincospi.js' );


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number times π.
*
* @param {(Array|TypedArray|Object)} [out] - destination array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} two-element array containing sin(πx) and cos(πx)
*
* @example
* var v = sincospi( 0.0 );
* // returns [ 0.0, 1.0 ]
*
* @example
* var v = sincospi( 0.5 );
* // returns [ 1.0, 0.0 ]
*
* @example
* var v = sincospi( 0.1 );
* // returns [ ~0.309, ~0.951 ]
*
* @example
* var v = sincospi( NaN );
* // returns [ NaN, NaN ]
*
* @example
* var out = new Float64Array( 2 );
*
* var v = sincospi( out, 0.0 );
* // returns <Float64Array>[ 0.0, 1.0 ]
*
* var bool = ( v === out );
* // returns true
*/
function sincospi( out, x ) {
	if ( arguments.length === 1 ) {
		return compute( [ 0.0, 0.0 ], out );
	}
	return compute( out, x );
}


// EXPORTS //

module.exports = sincospi;

},{"./sincospi.js":1816}],1816:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var abs = require( '@stdlib/math/base/special/abs' );
var sincos = require( '@stdlib/math/base/special/sincos' );
var floor = require( '@stdlib/math/base/special/floor' );
var PI = require( '@stdlib/constants/math/float64-pi' );
var copysign = require( '@stdlib/math/base/special/copysign' );


// MAIN //

/**
* Simultaneously computes the sine and cosine of a number times π.
*
* @private
* @param {(Array|TypedArray|Object)} out - destination array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} two-element array containing sin(πx) and cos(πx)
*
* @example
* var v = sincospi( [ 0.0, 0.0 ], 0.0 );
* // returns [ 0.0, 1.0 ]
*
* @example
* var v = sincospi( [ 0.0, 0.0 ], 0.5 );
* // returns [ 1.0, 0.0 ]
*
* @example
* var v = sincospi( [ 0.0, 0.0 ], 0.1 );
* // returns [ ~0.309, ~0.951 ]
*
* @example
* var v = sincospi( [ 0.0, 0.0 ], NaN );
* // returns [ NaN, NaN ]
*/
function sincospi( out, x ) {
	var tmp;
	var ix;
	var ar;
	var r;

	if ( isnan( x ) || isInfinite( x ) ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	r = x % 2.0;
	ar = abs( r );
	if ( ar === 0.0 || ar === 1.0 ) {
		ix = floor( ar );
		out[ 0 ] = copysign( 0.0, r );
		out[ 1 ] = ( ix%2 === 1 ) ? -1.0 : 1.0;
		return out;
	}
	if ( ar < 0.25 ) {
		return sincos( out, PI*r );
	}
	if ( ar < 0.75 ) {
		ar = 0.5 - ar;
		sincos( out, PI*ar );
		tmp = out[ 0 ];
		out[ 0 ] = copysign( out[ 1 ], r );
		out[ 1 ] = tmp;
		return out;
	}
	if ( ar < 1.25 ) {
		r = copysign( 1.0, r ) - r;
		sincos( out, PI*r );
		out[ 1 ] *= -1;
		return out;
	}
	if ( ar < 1.75 ) {
		ar -= 1.5;
		sincos( out, PI*ar );
		tmp = out[ 0 ];
		out[ 0 ] = -copysign( out[ 1 ], r );
		out[ 1 ] = tmp;
		return out;
	}
	r -= copysign( 2.0, r );
	return sincos( out, PI*r );
}


// EXPORTS //

module.exports = sincospi;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/copysign":1394,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/sincos":1810}],1817:[function(require,module,exports){
'use strict';

/**
* Compute the hyperbolic sine of a number.
*
* @module @stdlib/math/base/special/sinh
*
* @example
* var sinh = require( '@stdlib/math/base/special/sinh' );
*
* var v = sinh( 0.0 );
* // returns 0.0
*
* v = sinh( 2.0 );
* // returns ~3.627
*
* v = sinh( -2.0 );
* // returns ~-3.627
*
* v = sinh( NaN );
* // returns NaN
*/

// MODULES //

var sinh = require( './sinh.js' );


// EXPORTS //

module.exports = sinh;

},{"./sinh.js":1819}],1818:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.16666666666666666;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -351754.9648081514 + (x * (-11561.443576500522 + (x * (-163.72585752598383 + (x * -0.789474443963537))))); // eslint-disable-line max-len
		s2 = -2110529.7888489086 + (x * (36157.827983443196 + (x * (-277.7110814206028 + (x * 1.0))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.789474443963537 + (x * (-163.72585752598383 + (x * (-11561.443576500522 + (x * -351754.9648081514))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-277.7110814206028 + (x * (36157.827983443196 + (x * -2110529.7888489086))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1819:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
var rateval = require( './rational_pq.js' );


// VARIABLES //

// ln(2^1024)
var MAXLOG = 7.09782712893383996843e2;

// ln(2^-1022)
var MINLOG = -7.08396418532264106224e2;

var POS_OVERFLOW = MAXLOG + LN2;
var NEG_OVERFLOW = MINLOG - LN2;

var LARGE = MAXLOG - LN2;


// MAIN //

/**
* Computes the hyperbolic sine of a number.
*
* ## Method
*
* The range is partitioned into two segments. If \\( |x| \le 1 \\), we use a rational function of the form
*
* ```tex
* x + x^3 \frac{\mathrm{P}(x)}{\mathrm{Q}(x)}
* ```
*
* Otherwise, the calculation is
*
* ```tex
* \operatorname{sinh}(x) = \frac{ e^x - e^{-x} }{2}.
* ```
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain   | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |
*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |
*
*
* @param {number} x - input value (in radians)
* @returns {number} hyperbolic sine
*
* @example
* var v = sinh( 0.0 );
* // returns 0.0
*
* @example
* var v = sinh( 2.0 );
* // returns ~3.627
*
* @example
* var v = sinh( -2.0 );
* // returns ~-3.627
*
* @example
* var v = sinh( NaN );
* // returns NaN
*/
function sinh( x ) {
	var a;
	if ( x === 0.0 ) {
		return x; // handles `+-0`
	}
	a = abs( x );
	if (
		x > POS_OVERFLOW ||
		x < NEG_OVERFLOW
	) {
		return ( x > 0.0 ) ? PINF : NINF;
	}
	if ( a > 1.0 ) {
		if ( a >= LARGE ) {
			a = exp( 0.5*a );
			a *= 0.5 * a;
			if ( x < 0.0 ) {
				a = -a;
			}
			return a;
		}
		a = exp( a );
		a = (0.5*a) - (0.5/a);
		if ( x < 0.0 ) {
			a = -a;
		}
		return a;
	}
	a *= a;
	return x + ( x*a*rateval( a ) );
}


// EXPORTS //

module.exports = sinh;

},{"./rational_pq.js":1818,"@stdlib/constants/math/float64-ln-two":83,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456}],1820:[function(require,module,exports){
'use strict';

/**
* Compute the value of `sin(πx)`.
*
* @module @stdlib/math/base/special/sinpi
*
* @example
* var sinpi = require( '@stdlib/math/base/special/sinpi' );
*
* var y = sinpi( 0.0 );
* // returns 0.0
*
* y = sinpi( 0.5 );
* // returns 1.0
*
* y = sinpi( 0.9 );
* // returns ~0.309
*
* y = sinpi( NaN );
* // returns NaN
*/

// MODULES //

var sinpi = require( './sinpi.js' );


// EXPORTS //

module.exports = sinpi;

},{"./sinpi.js":1821}],1821:[function(require,module,exports){
'use strict';

/*
* Notes:
*	=> sin(-x) = -sin(x)
*	=> sin(+n) = +0, where `n` is a positive integer
*	=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer
*	=> cos(-x) = cos(x)
*/


// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var cos = require( '@stdlib/math/base/special/cos' );
var sin = require( '@stdlib/math/base/special/sin' );
var abs = require( '@stdlib/math/base/special/abs' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var PI = require( '@stdlib/constants/math/float64-pi' );


// MAIN //

/**
* Computes the value of `sin(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = sinpi( 0.0 );
* // returns 0.0
*
* @example
* var y = sinpi( 0.5 );
* // returns 1.0
*
* @example
* var y = sinpi( 0.9 );
* // returns ~0.309
*
* @example
* var y = sinpi( NaN );
* // returns NaN
*/
function sinpi( x ) {
	var ar;
	var r;
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInfinite( x ) ) {
		return NaN;
	}
	// Argument reduction (reduce to [0,2))...
	r = x % 2.0; // sign preserving
	ar = abs( r );

	// If `x` is an integer, the mod is an integer...
	if ( ar === 0.0 || ar === 1.0 ) {
		return copysign( 0.0, r );
	}
	if ( ar < 0.25 ) {
		return sin( PI*r );
	}
	// In each of the following, we further reduce to [-π/4,π/4)...
	if ( ar < 0.75 ) {
		ar = 0.5 - ar;
		return copysign( cos( PI*ar ), r );
	}
	if ( ar < 1.25 ) {
		r = copysign( 1.0, r ) - r;
		return sin( PI*r );
	}
	if ( ar < 1.75 ) {
		ar = ar - 1.5;
		return -copysign( cos( PI*ar ), r );
	}
	r = r - copysign( 2.0, r );
	return sin( PI*r );
}


// EXPORTS //

module.exports = sinpi;

},{"@stdlib/constants/math/float64-pi":101,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/copysign":1394,"@stdlib/math/base/special/cos":1396,"@stdlib/math/base/special/sin":1806}],1822:[function(require,module,exports){
'use strict';

/**
* Evaluate Spence’s function, which is also known as the dilogarithm.
*
* @module @stdlib/math/base/special/spence
*
* @example
* var spence = require( '@stdlib/math/base/special/spence' );
*
* var v = spence( 3.0 );
* // returns ~-1.437
*
* v = spence( 0.0 );
* // returns ~1.645
*
* v = spence( -9.0 );
* // returns NaN
*
* v = spence( NaN );
* // returns NaN
*/

// MODULES //

var spence = require( './spence.js' );


// EXPORTS //

module.exports = spence;

},{"./spence.js":1825}],1823:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (3.297713409852251 + (x * (4.256971560081218 + (x * (2.7114985119655346 + (x * (0.8796913117545303 + (x * (0.13384763957830903 + (x * (0.007315890452380947 + (x * 0.000046512858607399003))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1824:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (3.547713409852251 + (x * (5.03278880143317 + (x * (3.6380053334513707 + (x * (1.4117259775183106 + (x * (0.2829748606025681 + (x * (0.02540437639325444 + (x * 0.0006909904889125533))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],1825:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.1:  January, 1989
* Copyright 1985, 1987, 1989 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );
var polyvalA = require( './polyval_a.js' );
var polyvalB = require( './polyval_b.js' );


// MAIN //

/**
* Evaluates Spence’s function, which is also known as the dilogarithm.
*
* ## Method
*
* -   A rational approximation gives the integral in the interval (0.5, 1.5).
* -   Transformation formulas for \\( \tfrac{1}{x} \\) and \\( 1 - x \\) are employed outside the basic expansion range.
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain      | # trials | peak    | rms     |
*     |:----------:|:-----------:|:--------:|:-------:|:-------:|
*     | IEEE       | 0,4         | 30000    | 3.9e-15 | 5.4e-16 |
*
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = spence( 3.0 );
* // returns ~-1.437
*
* @example
* var v = spence( 0.0 );
* // returns ~1.645
*
* @example
* var v = spence( -9.0 );
* // returns NaN
*
* @example
* var v = spence( NaN );
* // returns NaN
*/
function spence( x ) {
	var flg;
	var w;
	var y;
	var z;

	if ( isnan( x ) || x < 0.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return ( PI_SQUARED / 6.0 );
	}
	flg = 0;
	if ( x > 2.0 ) {
		x = 1.0 / x;
		flg |= 2;
	}
	if ( x > 1.5 ) {
		w = (1.0 / x) - 1.0;
		flg |= 2;
	}
	else if ( x < 0.5 ) {
		w = -x;
		flg |= 1;
	}
	else {
		w = x - 1.0;
	}
	y = -w * polyvalA( w ) / polyvalB( w );
	if ( flg & 1 ) {
		y = ( PI_SQUARED/6.0 ) - ( ln( x ) * ln( 1.0-x ) ) - y;
	}
	if ( flg & 2 ) {
		z = ln( x );
		y = -( 0.5 * z * z ) - y;
	}
	return y;
}


// EXPORTS //

module.exports = spence;

},{"./polyval_a.js":1823,"./polyval_b.js":1824,"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1826:[function(require,module,exports){
'use strict';

/**
* Compute the principal square root.
*
* @module @stdlib/math/base/special/sqrt
*
* @example
* var sqrt = require( '@stdlib/math/base/special/sqrt' );
*
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

// MODULES //

var sqrt = Math.sqrt;


// EXPORTS //

module.exports = sqrt;

},{}],1827:[function(require,module,exports){
'use strict';

/**
* Compute the value of `sqrt(1+x)-1`.
*
* @module @stdlib/math/base/special/sqrt1pm1
*
* @example
* var sqrt1pm1 = require( '@stdlib/math/base/special/sqrt1pm1' );
*
* var v = sqrt1pm1( 3.0 );
* // returns 1.0
*
* v = sqrt1pm1( 0.5 );
* // returns ~0.225
*
* v = sqrt1pm1( 0.02 );
* // returns ~0.01
*
* v = sqrt1pm1( -0.5 );
* // returns ~-0.292
*/

// MODULES //

var sqrt1pm1 = require( './sqrt1pm1.js' );


// EXPORTS //

module.exports = sqrt1pm1;

},{"./sqrt1pm1.js":1828}],1828:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link https://github.com/boostorg/math/blob/fa1896fbc4c6fadc167307342ceb20bf2b6c0688/include/boost/math/special_functions/sqrt1pm1.hpp}.
*
* This implementation follows the original, but has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Computes the value of `sqrt(1+x)-1`.
*
* @param {number} x - input value
* @returns {number} square root of `1+x` minus one
*
* @example
* var v = sqrt1pm1( 3.0 );
* // returns 1.0
*
* @example
* var v = sqrt1pm1( 0.5 );
* // returns ~0.225
*
* @example
* var v = sqrt1pm1( 0.02 );
* // returns ~0.01
*
* @example
* var v = sqrt1pm1( -0.5 );
* // returns ~-0.292
*
* @example
* var v = sqrt1pm1( -1.1 );
* // returns NaN
*
* @example
* var v = sqrt1pm1( NaN );
* // returns NaN
*/
function sqrt1pm1( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( abs( x ) > 0.75 ) {
		return sqrt( 1.0+x ) - 1.0;
	}
	return expm1( log1p( x ) / 2.0 );
}


// EXPORTS //

module.exports = sqrt1pm1;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/expm1":1467,"@stdlib/math/base/special/log1p":1690,"@stdlib/math/base/special/sqrt":1826}],1829:[function(require,module,exports){
'use strict';

/**
* Evaluate the tangent of a number.
*
* @module @stdlib/math/base/special/tan
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* v = tan( -Math.PI/4.0 );
* // returns ~-1.0
*
* v = tan( Math.PI/4.0 );
* // returns ~1.0
*
* v = tan( NaN );
* // returns NaN
*/

// MODULES //

var tan = require( './tan.js' );


// EXPORTS //

module.exports = tan;

},{"./tan.js":1830}],1830:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c?view=markup}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var kernelTan = require( '@stdlib/math/base/special/kernel-tan' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// VARIABLES //

// Scratch buffer:
var buffer = new Array( 2 ); // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

// High word for pi/4: 0x3fe921fb => 00111111111010010010000111111011
var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

// High word for a small value: 2^-27 = 7.450580596923828e-9 => high word => 0x3e400000 => 00111110010000000000000000000000
var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation


// MAIN //

/**
* Evaluates the tangent of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} tangent
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* @example
* var v = tan( -Math.PI/4.0 );
* // returns ~-1.0
*
* @example
* var v = tan( Math.PI/4.0 );
* // returns ~1.0
*
* @example
* var v = tan( NaN );
* // returns NaN
*/
function tan( x ) {
	var ix;
	var n;

	ix = getHighWord( x );
	ix &= HIGH_WORD_ABS_MASK;

	// Case: |x| ~< π/4
	if ( ix <= HIGH_WORD_PIO4 ) {
		// Case: |x| < 2**-27
		if ( ix < HIGH_WORD_TWO_NEG_27 ) {
			return x;
		}
		return kernelTan( x, 0.0, 1 );
	}
	// Case: tan(Inf or NaN) is NaN
	if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
		return NaN;
	}
	// Argument reduction needed...
	n = rempio2( x, buffer );
	return kernelTan( buffer[ 0 ], buffer[ 1 ], 1-((n&1)<<1) );
}


// EXPORTS //

module.exports = tan;

},{"@stdlib/math/base/special/kernel-tan":1668,"@stdlib/math/base/special/rempio2":1760,"@stdlib/number/float64/base/get-high-word":1909}],1831:[function(require,module,exports){
'use strict';

/**
* Compute the hyperbolic tangent of a number.
*
* @module @stdlib/math/base/special/tanh
*
* @example
* var tanh = require( '@stdlib/math/base/special/tanh' );
*
* var v = tanh( 0.0 );
* // returns 0.0
*
* var v = tanh( -0.0 );
* // returns -0.0
*
* v = tanh( 2.0 );
* // returns ~0.964
*
* v = tanh( -2.0 );
* // returns ~-0.964
*
* v = tanh( NaN );
* // returns NaN
*/

// MODULES //

var tanh = require( './tanh.js' );


// EXPORTS //

module.exports = tanh;

},{"./tanh.js":1833}],1832:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.3333333333333332;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -1614.6876844170845 + (x * (-99.28772310019185 + (x * (-0.9643991794250523 + (x * 0.0))))); // eslint-disable-line max-len
		s2 = 4844.063053251255 + (x * (2235.4883906010045 + (x * (112.81167849163293 + (x * 1.0))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-0.9643991794250523 + (x * (-99.28772310019185 + (x * -1614.6876844170845))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (112.81167849163293 + (x * (2235.4883906010045 + (x * 4844.063053251255))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1833:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var ratval = require( './rational_pq.js' );


// VARIABLES //

// log(2**127)
var MAXLOG = 8.8029691931113054295988e+01;


// MAIN //

/**
* Computes the hyperbolic tangent of a number.
*
* ## Method
*
* For \\( |x| < 0.625 \\), we use a rational function of the form (Cody and Waite)
*
* ```tex
* x + x^3 \frac{\mathrm{P}(x)}{\mathrm{Q}(x)}
* ```
*
* Otherwise,
*
* ```tex
* \begin{align*}
* \operatorname{tanh}(x) &= \frac{\operatorname{sinh}(x)}{\operatorname{cosh(x)}} \\
* &= 1 - \frac{2}{e^{2x} + 1}
* \end{align*}
* ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:----------:|:------:|:--------:|:-------:|:-------:|
*     | DEC        | -2,2   | 50000    | 3.3e-17 | 6.4e-18 |
*     | IEEE       | -2,2   | 30000    | 2.5e-16 | 5.8e-17 |
*
*
* @param {number} x - input value (in radians)
* @returns {number} hyperbolic tangent
*
* @example
* var v = tanh( 0.0 );
* // returns 0.0
*
* @example
* var v = tanh( 2.0 );
* // returns ~0.964
*
* @example
* var v = tanh( -2.0 );
* // returns ~-0.964
*
* @example
* var v = tanh( NaN );
* // returns NaN
*/
function tanh( x ) {
	var s;
	var z;
	z = abs( x );
	if ( z > 0.5*MAXLOG ) {
		return ( x < 0.0 ) ? -1.0 : 1.0;
	}
	if ( z >= 0.625 ) {
		s = exp( 2.0 * z );
		z = 1.0 - ( 2.0/(s+1.0) );
		if ( x < 0.0 ) {
			z = -z;
		}
	} else {
		if ( x === 0.0 ) {
			return x; // Handle `+-0`
		}
		s = x * x;
		z = x + ( x*s*ratval( s ) );
	}
	return z;
}


// EXPORTS //

module.exports = tanh;

},{"./rational_pq.js":1832,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/exp":1456}],1834:[function(require,module,exports){
'use strict';

/**
* Evaluate the trigamma function.
*
* @module @stdlib/math/base/special/trigamma
*
* @example
* var trigamma = require( '@stdlib/math/base/special/trigamma' );
*
* var v = trigamma( -2.5 );
* // returns ~9.539
*
* v = trigamma( 1.0 );
* // returns ~1.645
*
* v = trigamma( 10.0 );
* // returns ~0.105
*
* v = trigamma( NaN );
* // returns NaN
*
* v = trigamma( -1.0 );
* // returns NaN
*/

// MODULES //

var trigamma = require( './trigamma.js' );


// EXPORTS //

module.exports = trigamma;

},{"./trigamma.js":1840}],1835:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.9999999999999991;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.9999999999999991 + (x * (-4.712373111208652 + (x * (-7.94125711970499 + (x * (-5.746577466976647 + (x * (-0.4042133494563989 + (x * (2.4787778117864288 + (x * (2.0771415170245513 + (x * (0.8588778991623601 + (x * (0.20499222604410033 + (x * (0.027210314034819473 + (x * 0.001576484902087695))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (4.712373111208634 + (x * (9.586191186553398 + (x * (11.094006726982938 + (x * (8.090754247493278 + (x * (3.877058901598914 + (x * (1.2275867870191448 + (x * (0.249092040606385 + (x * (0.02957504139006556 + (x * (0.0015764849020049815 + (x * 1.6126405034405948e-15))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.001576484902087695 + (x * (0.027210314034819473 + (x * (0.20499222604410033 + (x * (0.8588778991623601 + (x * (2.0771415170245513 + (x * (2.4787778117864288 + (x * (-0.4042133494563989 + (x * (-5.746577466976647 + (x * (-7.94125711970499 + (x * (-4.712373111208652 + (x * -0.9999999999999991))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.6126405034405948e-15 + (x * (0.0015764849020049815 + (x * (0.02957504139006556 + (x * (0.249092040606385 + (x * (1.2275867870191448 + (x * (3.877058901598914 + (x * (8.090754247493278 + (x * (11.094006726982938 + (x * (9.586191186553398 + (x * (4.712373111208634 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1836:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.0 + (x * (0.5 + (x * (0.34562566988545623 + (x * (9.628954993608422 + (x * (3.5936085382439025 + (x * (49.45959911843888 + (x * (7.775192373218939 + (x * (74.4536074488178 + (x * (2.7520934039706906 + (x * (23.92923597114717 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.3579180064375791 + (x * (19.138603985070986 + (x * (0.8743490814641436 + (x * (98.65160974348555 + (x * (-16.10519728333829 + (x * (154.31686021625373 + (x * (-40.2026880424379 + (x * (60.167913667426475 + (x * (-13.341484462225642 + (x * 2.537956362006499))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (23.92923597114717 + (x * (2.7520934039706906 + (x * (74.4536074488178 + (x * (7.775192373218939 + (x * (49.45959911843888 + (x * (3.5936085382439025 + (x * (9.628954993608422 + (x * (0.34562566988545623 + (x * (0.5 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
		s2 = 2.537956362006499 + (x * (-13.341484462225642 + (x * (60.167913667426475 + (x * (-40.2026880424379 + (x * (154.31686021625373 + (x * (-16.10519728333829 + (x * (98.65160974348555 + (x * (0.8743490814641436 + (x * (19.138603985070986 + (x * (0.3579180064375791 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1837:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -2.5584373473990794;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -2.5584373473990794 + (x * (-12.283020824054201 + (x * (-23.9195022162768 + (x * (-24.925643150482347 + (x * (-14.797912276547878 + (x * (-4.466544539286106 + (x * (-0.01914390334056497 + (x * (0.5154120525543513 + (x * (0.1953783487860643 + (x * (0.03347612826241743 + (x * (0.0023736652059422065 + (x * 0.0))))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (4.800985584544199 + (x * (9.992207278431701 + (x * (11.889614616763133 + (x * (8.966132566838091 + (x * (4.4725413614962415 + (x * (1.4860098202819654 + (x * (0.31957073576676426 + (x * (0.040735834578768094 + (x * (0.0023736652059327163 + (x * (2.3955488790352614e-16 + (x * -2.9474924474061867e-18))))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0023736652059422065 + (x * (0.03347612826241743 + (x * (0.1953783487860643 + (x * (0.5154120525543513 + (x * (-0.01914390334056497 + (x * (-4.466544539286106 + (x * (-14.797912276547878 + (x * (-24.925643150482347 + (x * (-23.9195022162768 + (x * (-12.283020824054201 + (x * -2.5584373473990794))))))))))))))))))))); // eslint-disable-line max-len
		s2 = -2.9474924474061867e-18 + (x * (2.3955488790352614e-16 + (x * (0.0023736652059327163 + (x * (0.040735834578768094 + (x * (0.31957073576676426 + (x * (1.4860098202819654 + (x * (4.4725413614962415 + (x * (8.966132566838091 + (x * (11.889614616763133 + (x * (9.992207278431701 + (x * (4.800985584544199 + (x * 1.0))))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1838:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.6662611269702147e-17;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.6662611269702147e-17 + (x * (0.4999999999999977 + (x * (6.402709450190538 + (x * (41.38333741550006 + (x * (166.8033418545628 + (x * (453.39964786925367 + (x * (851.153712317697 + (x * (1097.7065756728507 + (x * (938.4312324784553 + (x * (487.26800160465194 + (x * 119.95344524233573))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (12.472085567047449 + (x * (78.60931297532986 + (x * (307.47024605031834 + (x * (805.1406861011516 + (x * (1439.1201976029215 + (x * (1735.6105285756048 + (x * (1348.3250071285634 + (x * (607.2259858605709 + (x * (119.95231785727705 + (x * 0.00014016591835503607))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 119.95344524233573 + (x * (487.26800160465194 + (x * (938.4312324784553 + (x * (1097.7065756728507 + (x * (851.153712317697 + (x * (453.39964786925367 + (x * (166.8033418545628 + (x * (41.38333741550006 + (x * (6.402709450190538 + (x * (0.4999999999999977 + (x * 1.6662611269702147e-17))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.00014016591835503607 + (x * (119.95231785727705 + (x * (607.2259858605709 + (x * (1348.3250071285634 + (x * (1735.6105285756048 + (x * (1439.1201976029215 + (x * (805.1406861011516 + (x * (307.47024605031834 + (x * (78.60931297532986 + (x * (12.472085567047449 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1839:[function(require,module,exports){
/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -1.848283152741466e-20;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -1.848283152741466e-20 + (x * (0.5 + (x * (3.0253386524731334 + (x * (13.599592751745737 + (x * (35.31322242830879 + (x * (67.16394245507142 + (x * (83.5767733658514 + (x * (71.07349121223571 + (x * (35.86215156147256 + (x * 8.721522316399835))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (5.717343971612935 + (x * (25.29340417962044 + (x * (62.26197679674682 + (x * (113.955048909239 + (x * (130.80713832893898 + (x * (102.42314690233765 + (x * (44.04247728052452 + (x * (8.89898032477904 + (x * -0.029662733687204))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 8.721522316399835 + (x * (35.86215156147256 + (x * (71.07349121223571 + (x * (83.5767733658514 + (x * (67.16394245507142 + (x * (35.31322242830879 + (x * (13.599592751745737 + (x * (3.0253386524731334 + (x * (0.5 + (x * -1.848283152741466e-20))))))))))))))))); // eslint-disable-line max-len
		s2 = -0.029662733687204 + (x * (8.89898032477904 + (x * (44.04247728052452 + (x * (102.42314690233765 + (x * (130.80713832893898 + (x * (113.955048909239 + (x * (62.26197679674682 + (x * (25.29340417962044 + (x * (5.717343971612935 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{}],1840:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/trigamma.hpp}.
*
* The implementation follows the original but has been reformatted and modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var sinpi = require( '@stdlib/math/base/special/sinpi' );
var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );
var rateval12 = require( './rational_p12q12.js' );
var rateval24 = require( './rational_p24q24.js' );
var rateval48 = require( './rational_p48q48.js' );
var rateval816 = require( './rational_p816q816.js' );
var rateval16INF = require( './rational_p16infq16inf.js' );


// VARIABLES //

var YOFFSET24 = 3.558437347412109375;


// MAIN //

/**
* Evaluates the trigamma function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = trigamma( -2.5 );
* // returns ~9.539
*
* @example
* var v = trigamma( 1.0 );
* // returns ~1.645
*
* @example
* var v = trigamma( 10.0 );
* // returns ~0.105
*
* @example
* var v = trigamma( NaN );
* // returns NaN
*
* @example
* var v = trigamma( -1.0 );
* // returns NaN
*/
function trigamma( x ) {
	var result;
	var s;
	var y;
	var z;

	result = 0.0;

	// Check for negative arguments and use reflection:
	if ( x <= 0 ) {
		if ( floor( x ) === x ) {
			return NaN;
		}
		s = sinpi( x );
		z = 1.0 - x;
		return -trigamma( z ) + ( PI_SQUARED / ( s*s ) );
	}
	if ( x < 1.0 ) {
		result = 1.0 / ( x*x );
		x += 1.0;
	}
	if ( x <= 2.0 ) {
		result += ( 2.0+rateval12( x ) ) / ( x*x );
	}
	else if ( x <= 4.0 ) {
		result += ( YOFFSET24+rateval24( x ) ) / ( x*x );
	}
	else if ( x <= 8.0 ) {
		y = 1.0 / x;
		result += ( 1.0+rateval48( y ) ) / x;
	}
	else if ( x <= 16.0 ) {
		y = 1.0 / x;
		result += ( 1.0+rateval816( y ) ) / x;
	}
	else {
		y = 1.0 / x;
		result += ( 1.0+rateval16INF( y ) ) / x;
	}
	return result;
}


// EXPORTS //

module.exports = trigamma;

},{"./rational_p12q12.js":1835,"./rational_p16infq16inf.js":1836,"./rational_p24q24.js":1837,"./rational_p48q48.js":1838,"./rational_p816q816.js":1839,"@stdlib/constants/math/float64-pi-squared":100,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/sinpi":1820}],1841:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward zero.
*
* @module @stdlib/math/base/special/trunc
*
* @example
* var trunc = require( '@stdlib/math/base/special/trunc' );
*
* var v = trunc( -4.2 );
* // returns -4.0
*
* v = trunc( 9.99999 );
* // returns 9.0
*
* v = trunc( 0.0 );
* // returns 0.0
*
* v = trunc( -0.0 );
* // returns -0.0
*
* v = trunc( NaN );
* // returns NaN
*
* v = trunc( Infinity );
* // returns Infinity
*
* v = trunc( -Infinity );
* // returns -Infinity
*/

// MODULES //

var trunc = require( './trunc.js' );


// EXPORTS //

module.exports = trunc;

},{"./trunc.js":1842}],1842:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );


// MAIN //

/**
* Rounds a numeric value toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc( -4.2 );
* // returns -4.0
*
* @example
* var v = trunc( 9.99999 );
* // returns 9.0
*
* @example
* var v = trunc( 0.0 );
* // returns 0.0
*
* @example
* var v = trunc( -0.0 );
* // returns -0.0
*
* @example
* var v = trunc( NaN );
* // returns NaN
*
* @example
* var v = trunc( Infinity );
* // returns Infinity
*
* @example
* var v = trunc( -Infinity );
* // returns -Infinity
*/
function trunc( x ) {
	if ( x < 0.0 ) {
		return ceil( x );
	}
	return floor( x );
}


// EXPORTS //

module.exports = trunc;

},{"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484}],1843:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest power of `10` toward zero.
*
* @module @stdlib/math/base/special/trunc10
*
* @example
* var trunc10 = require( '@stdlib/math/base/special/trunc10' );
*
* var v = trunc10( Math.PI );
* // returns 1.0
*
* v = trunc10( 13.0 );
* // returns 10.0
*
* v = trunc10( -0.314 );
* // returns -0.1
*/

// MODULES //

var trunc10 = require( './trunc10.js' );


// EXPORTS //

module.exports = trunc10;

},{"./trunc10.js":1844}],1844:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var log10 = require( '@stdlib/math/base/special/log10' );


// MAIN //

/**
* Rounds a numeric value to the nearest power of `10` toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc10( Math.PI );
* // returns 1.0
*
* @example
* var v = trunc10( 13.0 );
* // returns 10.0
*
* @example
* var v = trunc10( -0.314 );
* // returns -0.1
*/
function trunc10( x ) {
	var sign;
	if (
		isnan( x ) ||
		isInfinite( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	return sign * pow( 10.0, floor( log10( x ) ) );
}


// EXPORTS //

module.exports = trunc10;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/pow":1743}],1845:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest power of two toward zero.
*
* @module @stdlib/math/base/special/trunc2
*
* @example
* var trunc2 = require( '@stdlib/math/base/special/trunc2' );
*
* var v = trunc2( Math.PI );
* // returns 2.0
*
* v = trunc2( 13.0 );
* // returns 8.0
*
* v = trunc2( -0.314 );
* // returns -0.25
*/

// MODULES //

var trunc2 = require( './trunc2.js' );


// EXPORTS //

module.exports = trunc2;

},{"./trunc2.js":1846}],1846:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var floor = require( '@stdlib/math/base/special/floor' );
var log2 = require( '@stdlib/math/base/special/log2' );


// MAIN //

/**
* Rounds a numeric value to the nearest power of two toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc2( Math.PI );
* // returns 2.0
*
* @example
* var v = trunc2( 13.0 );
* // returns 8.0
*
* @example
* var v = trunc2( -0.314 );
* // returns -0.25
*/
function trunc2( x ) {
	var sign;
	if (
		isnan( x ) ||
		isInfinite( x ) ||
		x === 0.0
	) {
		return x;
	}
	if ( x < 0 ) {
		x = -x;
		sign = -1.0;
	} else {
		sign = 1.0;
	}
	return sign * pow( 2.0, floor( log2( x ) ) );
}


// EXPORTS //

module.exports = trunc2;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/log2":1693,"@stdlib/math/base/special/pow":1743}],1847:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest multiple of `b^n` toward zero.
*
* @module @stdlib/math/base/special/truncb
*
* @example
* var truncb = require( '@stdlib/math/base/special/truncb' );
*
* // Round a value to 4 decimal places:
* var v = truncb( Math.PI, -4, 10 );
* // returns 3.1415
*
* // If n = 0 or b = 1, behavior is same as `trunc`:
* v = truncb( Math.PI, 0, 2 );
* // returns 3.0
*
* // Round a value to the nearest multiple of two toward zero:
* v = truncb( 5.0, 1, 2 );
* // returns 4.0
*/

// MODULES //

var truncb = require( './truncb.js' );


// EXPORTS //

module.exports = truncb;

},{"./truncb.js":1848}],1848:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var truncn = require( '@stdlib/math/base/special/truncn' );


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(b^n\\) toward zero.
*
* @param {number} x - input value
* @param {integer} n - integer power
* @param {PositiveInteger} b - base
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = truncb( Math.PI, -4, 10 );
* // returns 3.1415
*
* @example
* // If n = 0 or b = 1, `truncb` behaves like `trunc`:
* var v = truncb( Math.PI, 0, 2 );
* // returns 3.0
*
* @example
* // Round a value to the nearest multiple of two toward zero:
* var v = truncb( 5.0, 1, 2 );
* // returns 4.0
*/
function truncb( x, n, b ) {
	var y;
	var s;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isnan( b ) ||
		b <= 0 ||
		isInfinite( n ) ||
		isInfinite( b )
	) {
		return NaN;
	}
	if ( isInfinite( x ) || x === 0.0 ) {
		return x;
	}
	if ( b === 10 ) {
		return truncn( x, n );
	}
	if ( n === 0 || b === 1 ) {
		return trunc( x );
	}
	s = pow( b, -n );

	// Check for overflow:
	if ( isInfinite( s ) ) {
		return x;
	}
	y = trunc( x*s ) / s;

	// Check for overflow:
	if ( isInfinite( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

module.exports = truncb;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/trunc":1841,"@stdlib/math/base/special/truncn":1849}],1849:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest multiple of `10^n` toward zero.
*
* @module @stdlib/math/base/special/truncn
*
* @example
* var truncn = require( '@stdlib/math/base/special/truncn' );
*
* // Round a value to 4 decimal places:
* var v = truncn( Math.PI, -4 );
* // returns 3.1415
*
* // If n = 0, `truncn` behaves like `trunc`:
* v = truncn( Math.PI, 0 );
* // returns 3.0
*
* // Round a value to the nearest thousand:
* v = truncn( 12368.0, 3 );
* // returns 12000.0
*/

// MODULES //

var truncn = require( './truncn.js' );


// EXPORTS //

module.exports = truncn;

},{"./truncn.js":1850}],1850:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var trunc = require( '@stdlib/math/base/special/trunc' );
var MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
var MAX_EXP = require( '@stdlib/constants/math/float64-max-base10-exponent' );
var MIN_EXP = require( '@stdlib/constants/math/float64-min-base10-exponent' );
var MIN_EXP_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );


// VARIABLES //

var MAX_INT = MAX_SAFE_INTEGER + 1;
var HUGE = 1.0e+308;


// MAIN //

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\) toward zero.
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{truncn}(x,n) = \frac{\operatorname{trunc}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{trunc}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior due to the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{trunc}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible finite number \\(x\\) to the nearest \\(10^n\\) is \\(0\\). To ensure consistent behavior with \\(\operatorname{trunc}(x)\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is **always** an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{truncn}(x,n) = \frac{\biggl(\frac{\operatorname{trunc}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{truncn}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{truncn}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{truncn}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{truncn}(\pm\infty, n) &= \pm\infty \\
* \operatorname{truncn}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @param {integer} n - integer power of `10`
* @returns {number} rounded value
*
* @example
* // Round a value to 4 decimal places:
* var v = truncn( Math.PI, -4 );
* // returns 3.1415
*
* @example
* // If n = 0, `truncn` behaves like `trunc`:
* var v = truncn( Math.PI, 0 );
* // returns 3.0
*
* @example
* // Round a value to the nearest thousand:
* var v = truncn( 12368.0, 3 );
* // returns 12000.0
*/
function truncn( x, n ) {
	var s;
	var y;
	if (
		isnan( x ) ||
		isnan( n ) ||
		isInfinite( n )
	) {
		return NaN;
	}
	if (
		// Handle infinities...
		isInfinite( x ) ||

		// Handle +-0...
		x === 0.0 ||

		// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to truncate...
		n < MIN_EXP_SUBNORMAL ||

		// If `|x|` is large enough, no decimals to truncate...
		( abs( x ) > MAX_INT && n <= 0 )
	) {
		return x;
	}
	// The maximum absolute double is ~1.8e308. Accordingly, any possible positive finite `x` rounded to the nearest >=10^309 is zero.
	if ( n > MAX_EXP ) {
		return 0.0 * x; // preserve the sign (same behavior as trunc)
	}
	// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...
	if ( n < MIN_EXP ) {
		s = pow( 10.0, -(n + MAX_EXP) );
		y = (x*HUGE) * s; // order of operation matters!
		if ( isInfinite( y ) ) {
			return x;
		}
		return ( trunc(y)/HUGE ) / s;
	}
	s = pow( 10.0, -n );
	y = x * s;
	if ( isInfinite( y ) ) {
		return x;
	}
	return trunc( y ) / s;
}


// EXPORTS //

module.exports = truncn;

},{"@stdlib/constants/math/float64-max-base10-exponent":84,"@stdlib/constants/math/float64-max-safe-integer":88,"@stdlib/constants/math/float64-min-base10-exponent":93,"@stdlib/constants/math/float64-min-base10-exponent-subnormal":92,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/trunc":1841}],1851:[function(require,module,exports){
'use strict';

/**
* Round a numeric value to the nearest number toward zero with `N` significant figures.
*
* @module @stdlib/math/base/special/truncsd
*
* @example
* var truncsd = require( '@stdlib/math/base/special/truncsd' );
*
* var v = truncsd( Math.PI, 5 );
* // returns 3.1415
*
* v = truncsd( Math.PI, 1 );
* // returns 3.0
*
* v = truncsd( 12368.0, 2 );
* // returns 12000.0
*
* v = truncsd( 0.0313, 2, 2 )
* // returns 0.03125
*/

// MODULES //

var truncsd = require( './truncsd.js' );


// EXPORTS //

module.exports = truncsd;

},{"./truncsd.js":1852}],1852:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var pow = require( '@stdlib/math/base/special/pow' );
var log10 = require( '@stdlib/math/base/special/log10' );
var ln = require( '@stdlib/math/base/special/ln' );
var abs = require( '@stdlib/math/base/special/abs' );
var floor = require( '@stdlib/math/base/special/floor' );
var exponent = require( '@stdlib/number/float64/base/exponent' );
var trunc = require( '@stdlib/math/base/special/trunc' );


// MAIN //

/**
* Rounds a numeric value to the nearest number toward zero with \\(N\\) significant figures.
*
* @param {number} x - input value
* @param {PositiveInteger} n - number of significant figures
* @param {PositiveInteger} [b=10] - base
* @returns {number} rounded value
*
* @example
* var v = truncsd( Math.PI, 5 );
* // returns 3.1415
*
* @example
* var v = truncsd( Math.PI, 1 );
* // returns 3.0
*
* @example
* var v = truncsd( 12368.0, 2 );
* // returns 12000.0
*
* @example
* var v = truncsd( 0.0313, 2, 2 )
* // returns 0.03125
*/
function truncsd( x, n, b ) {
	var base;
	var exp;
	var s;
	var y;
	if (
		isnan( x ) ||
		isnan( n ) ||
		n < 1 ||
		isInfinite( n )
	) {
		return NaN;
	}
	if ( arguments.length > 2 ) {
		if (
			isnan( b ) ||
			b <= 0 ||
			isInfinite( b )
		) {
			return NaN;
		}
		base = b;
	} else {
		base = 10;
	}
	if ( isInfinite( x ) || x === 0.0 ) {
		return x;
	}
	if ( base === 10 ) {
		exp = log10( abs( x ) );
	}
	else if ( base === 2 ) {
		exp = exponent( abs( x ) );
	}
	else {
		exp = ln( abs(x) ) / ln( base );
	}
	exp = floor( exp - n + 1.0 );
	s = pow( base, abs( exp ) );

	// Check for overflow:
	if ( isInfinite( s ) ) {
		return x;
	}
	// To avoid numerical stability issues due to floating-point rounding error (e.g., 3.55/0.1-35.5 = -7.105427357601e-15 and 3.55*10-35.5 = 0), we must treat positive and negative exponents separately.
	if ( exp < 0 ) {
		y = trunc( x * s ) / s;
	} else {
		y = trunc( x / s ) * s;
	}
	// Check for overflow:
	if ( isInfinite( y ) ) {
		return x;
	}
	return y;
}


// EXPORTS //

module.exports = truncsd;

},{"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/floor":1484,"@stdlib/math/base/special/ln":1679,"@stdlib/math/base/special/log10":1685,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/special/trunc":1841,"@stdlib/number/float64/base/exponent":1903}],1853:[function(require,module,exports){
'use strict';

/**
* Compute the versed cosine.
*
* @module @stdlib/math/base/special/vercos
*
* @example
* var vercos = require( '@stdlib/math/base/special/vercos' );
*
* var v = vercos( 0.0 );
* // returns 0.0
*
* v = vercos( Math.PI/2.0 );
* // returns 1.0
*
* v = vercos( -Math.PI/6.0 );
* // returns ~1.8660
*
* v = vercos( NaN );
* // returns NaN
*/

// MODULES //

var vercos = require( './vercos.js' );


// EXPORTS //

module.exports = vercos;

},{"./vercos.js":1854}],1854:[function(require,module,exports){
'use strict';

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );


// MAIN //

/**
* Computes the versed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} versed cosine
*
* @example
* var v = vercos( 0.0 );
* // returns 0.0
*
* @example
* var v = vercos( Math.PI/2.0 );
* // returns 1.0
*
* @example
* var v = vercos( -Math.PI/6.0 );
* // returns ~1.8660
*
* @example
* var v = vercos( NaN );
* // returns NaN
*/
function vercos( x ) {
	return 1.0 + cos( x );
}


// EXPORTS //

module.exports = vercos;

},{"@stdlib/math/base/special/cos":1396}],1855:[function(require,module,exports){
'use strict';

/**
* Compute the versed sine.
*
* @module @stdlib/math/base/special/versin
*
* @example
* var versin = require( '@stdlib/math/base/special/versin' );
*
* var v = versin( 0.0 );
* // returns 0.0
*
* v = versin( Math.PI/2.0 );
* // returns ~1.0
*
* v = versin( -Math.PI/6.0 );
* // returns ~0.13397
*
* v = versin( NaN );
* // returns NaN
*/

// MODULES //

var versin = require( './versin.js' );


// EXPORTS //

module.exports = versin;

},{"./versin.js":1856}],1856:[function(require,module,exports){
'use strict';

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );


// MAIN //

/**
* Computes the versed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} versed sine
*
* @example
* var v = versin( 0.0 );
* // returns 0.0
*
* @example
* var v = versin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = versin( -Math.PI/6.0 );
* // returns ~0.13397
*
* @example
* var v = versin( NaN );
* // returns NaN
*/
function versin( x ) {
	return 1.0 - cos( x );
}


// EXPORTS //

module.exports = versin;

},{"@stdlib/math/base/special/cos":1396}],1857:[function(require,module,exports){
'use strict';

/**
* Wrap a value on the half-open interval `[min,max)`.
*
* @module @stdlib/math/base/special/wrap
*
* @example
* var wrap = require( '@stdlib/math/base/special/wrap' );
*
* var v = wrap( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = wrap( -3.14, 0.0, 5.0 );
* // returns ~1.86
*
* v = wrap( 10.0, 0.0, 5.0 );
* // returns 0.0
*
* v = wrap( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = wrap( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = wrap( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = wrap( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = wrap( 3.14, 0.0, NaN );
* // returns NaN
*
* v = wrap( 3.14, 5.0, 0.0 );
* // returns NaN
*/

// MODULES //

var wrap = require( './main.js' );


// EXPORTS //

module.exports = wrap;

},{"./main.js":1858}],1858:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var trunc = require( '@stdlib/math/base/special/trunc' );


// MAIN //

/**
* Wraps a value on the half-open interval `[min,max)`.
*
* @param {number} v - input value
* @param {number} min - minimum value
* @param {number} max - maximum value
* @returns {number} wrapped value
*
* @example
* var v = wrap( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = wrap( -3.14, 0.0, 5.0 );
* // returns ~1.86
*
* v = wrap( 10.0, 0.0, 5.0 );
* // returns 0.0
*
* v = wrap( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = wrap( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = wrap( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = wrap( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = wrap( 3.14, 0.0, NaN );
* // returns NaN
*
* v = wrap( 3.14, 5.0, 0.0 );
* // returns NaN
*/
function wrap( v, min, max ) {
	var delta;
	if (
		isnan( v ) ||
		isnan( min ) ||
		isnan( max ) ||
		max <= min
	) {
		return NaN;
	}
	// Normalize +-0 to +0...
	if ( v === 0.0 ) {
		v = 0.0;
	}
	if ( min === 0.0 ) {
		min = 0.0;
	}
	if ( max === 0.0 ) {
		max = 0.0;
	}
	// Simple case where value is already within range...
	if ( min <= v && v < max ) {
		return v;
	}
	// Perform range reduction...
	delta = max - min;
	if ( v < min ) {
		v += delta * ( trunc( (min-v)/delta ) + 1.0 );
	}
	return min + ( (v-min) % delta );
}


// EXPORTS //

module.exports = wrap;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/trunc":1841}],1859:[function(require,module,exports){
'use strict';

/**
* Compute `x * ln(y+1)` so that the result is `0` if `x = 0`.
*
* @module @stdlib/math/base/special/xlog1py
*
* @example
* var xlog1py = require( '@stdlib/math/base/special/xlog1py' );
*
* var out = xlog1py( 3.0, 2.0 );
* // returns ~3.296
*
* out = xlog1py( 1.5, 5.9 );
* // returns ~2.897
*
* out = xlog1py( 0.9, 1.0 );
* // returns ~0.624
*
* out = xlog1py( 1.0, 0.0 );
* // returns 0.0
*
* out = xlog1py( 0.0, -2.0 );
* // returns 0.0
*
* out = xlog1py( 1.5, NaN );
* // returns NaN
*
* out = xlog1py( 0.0, NaN );
* // returns NaN
*
* out = xlog1py( NaN, 2.3 );
* // returns NaN
*/

// MODULES //

var xlog1py = require( './xlog1py.js' );


// EXPORTS //

module.exports = xlog1py;

},{"./xlog1py.js":1860}],1860:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var log1p = require( '@stdlib/math/base/special/log1p' );


// MAIN //

/**
* Computes `x * ln(y+1)` so that the result is `0` if `x = 0`.
*
* @param {number} x - input value
* @param {number} y - input value
* @returns {number} function value
*
* @example
* var out = xlog1py( 3.0, 2.0 );
* // returns ~3.296
*
* @example
* var out = xlog1py( 1.5, 5.9 );
* // returns ~2.897
*
* @example
* var out = xlog1py( 0.9, 1.0 );
* // returns ~0.624
*
* @example
* var out = xlog1py( 1.0, 0.0 );
* // returns 0.0
*
* @example
* var out = xlog1py( 0.0, -2.0 );
* // returns 0.0
*
* @example
* var out = xlog1py( 1.5, NaN );
* // returns NaN
*
* @example
* var out = xlog1py( 0.0, NaN );
* // returns NaN
*
* @example
* var out = xlog1py( NaN, 2.3 );
* // returns NaN
*/
function xlog1py( x, y ) {
	if ( x === 0.0 && !isnan( y ) ) {
		return 0.0;
	}
	return x * log1p( y );
}


// EXPORTS //

module.exports = xlog1py;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/log1p":1690}],1861:[function(require,module,exports){
'use strict';

/**
* Compute `x * ln(y)` so that the result is `0` if `x = 0`.
*
* @module @stdlib/math/base/special/xlogy
*
* @example
* var xlogy = require( '@stdlib/math/base/special/xlogy' );
*
* var out = xlogy( 3.0, 2.0 );
* // returns ~2.079
*
* out = xlogy( 1.5, 5.9 );
* // returns ~2.662
*
* out = xlogy( 0.9, 1.0 );
* // returns 0.0
*
* out = xlogy( 0.0, -2.0 );
* // returns 0.0
*
* out = xlogy( 1.5, NaN );
* // returns NaN
*
* out = xlogy( 0.0, NaN );
* // returns NaN
*
* out = xlogy( NaN, 2.3 );
* // returns NaN
*/

// MODULES //

var xlogy = require( './xlogy.js' );


// EXPORTS //

module.exports = xlogy;

},{"./xlogy.js":1862}],1862:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );


// MAIN //

/**
* Computes `x * ln(y)` so that the result is `0` if `x = 0`.
*
* @param {number} x - input value
* @param {number} y - input value
* @returns {number} function value
*
* @example
* var out = xlogy( 3.0, 2.0 );
* // returns ~2.079
*
* @example
* var out = xlogy( 1.5, 5.9 );
* // returns ~2.662
*
* @example
* var out = xlogy( 0.9, 1.0 );
* // returns 0.0
*
* @example
* var out = xlogy( 0.0, -2.0 );
* // returns 0.0
*
* @example
* var out = xlogy( 1.5, NaN );
* // returns NaN
*
* @example
* var out = xlogy( 0.0, NaN );
* // returns NaN
*
* @example
* var out = xlogy( NaN, 2.3 );
* // returns NaN
*/
function xlogy( x, y ) {
	if ( x === 0.0 && !isnan( y ) ) {
		return 0.0;
	}
	return x * ln( y );
}


// EXPORTS //

module.exports = xlogy;

},{"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/ln":1679}],1863:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var getKeys = require( 'object-keys' ).shim();
var ns = require( './../lib' );


// TESTS //

tape( 'main export is an object', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof ns, 'object', 'main export is an object' );
	t.end();
});

tape( 'the exported object contains key-values pairs', function test( t ) {
	var keys = getKeys( ns );
	t.equal( keys.length > 0, true, 'has keys' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/test/test.js")
},{"./../lib":1296,"object-keys":2001,"tape":2030}],1864:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/constants/math/float64-eps' );
var TINY = require( '@stdlib/constants/math/float32-smallest-normal' );


// VARIABLES //

var MAX_ITER = 1000000;


// FUNCTIONS //

/**
* Evaluates a continued fraction expansion.
*
* ```text
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionA( gen, factor, maxIter ) {
	var delta;
	var a0;
	var C;
	var D;
	var f;
	var v;

	v = gen();
	f = v[ 1 ];
	a0 = v[ 0 ];
	if ( f === 0 ) {
		f = TINY;
	}
	C = f;
	D = 0.0;

	do {
		v = gen();
		if ( v ) {
			D = v[ 1 ] + ( v[ 0 ] * D );
			if ( D === 0.0 ) {
				D = TINY;
			}
			C = v[ 1 ] + ( v[ 0 ] / C );
			if ( C === 0.0 ) {
				C = TINY;
			}
			D = 1.0 / D;
			delta = C * D;
			f = f * delta;
		}
	} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus

	return a0 / f;
}

/**
* Evaluates a continued fraction expansion.
*
* ```text
*      b0 +   a1
*      ---------------
*      b1 +   a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionB( gen, factor, maxIter ) {
	var delta;
	var C;
	var D;
	var f;
	var v;

	v = gen();
	f = v[ 1 ];
	if ( f === 0.0 ) {
		f = TINY;
	}
	C = f;
	D = 0.0;
	do {
		v = gen();
		if ( v ) {
			D = v[ 1 ] + ( v[ 0 ] * D );
			if ( D === 0.0 ) {
				D = TINY;
			}
			C = v[ 1 ] + ( v[ 0 ] / C );
			if ( C === 0.0 ) {
				C = TINY;
			}
			D = 1.0 / D;
			delta = C * D;
			f = f * delta;
		}
	} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	return f;
}


// MAIN //

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* ## References
*
* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/
function continuedFraction( generator, options ) {
	var maxIter;
	var opts;
	var eps;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	eps = opts.tolerance || TOLERANCE;
	maxIter = opts.maxIter || MAX_ITER;

	if ( opts.keep ) {
		return continuedFractionB( generator, eps, maxIter );
	}
	return continuedFractionA( generator, eps, maxIter );
}


// EXPORTS //

module.exports = continuedFraction;

},{"@stdlib/constants/math/float32-smallest-normal":68,"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/special/abs":1298}],1865:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/constants/math/float64-eps' );
var TINY = require( '@stdlib/constants/math/float32-smallest-normal' );


// VARIABLES //

var MAX_ITER = 1000000;


// FUNCTIONS //

/**
* Evaluates a continued fraction expansion.
*
* ```text
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionA( gen, factor, maxIter ) {
	var isgenerator = typeof gen.next === 'function';
	var f;
	var C;
	var D;
	var delta;
	var a0;
	var v = isgenerator ? gen.next().value : gen();
	f = v[ 1 ];
	a0 = v[ 0 ];
	if ( f === 0.0 ) {
		f = TINY;
	}
	C = f;
	D = 0;
	if ( isgenerator === true ) {
		do {
			v = gen.next().value;
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = TINY;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = TINY;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	} else {
		do {
			v = gen();
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = TINY;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = TINY;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	}
	return a0 / f;
}

/**
* Evaluates a continued fraction expansion.
*
* ```text
*      b0 +    a1
*      ---------------
*      b1 +     a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionB( gen, factor, maxIter ) {
	var isgenerator = typeof gen.next === 'function';
	var f;
	var C;
	var D;
	var delta;
	var v = isgenerator ? gen.next().value : gen();
	f = v[ 1 ];
	if ( f === 0.0 ) {
		f = TINY;
	}
	C = f;
	D = 0.0;
	if ( isgenerator === true ) {
		do {
			v = gen.next().value;
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = TINY;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = TINY;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	} else {
		do {
			v = gen();
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = TINY;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = TINY;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	}
	return f;
}


// MAIN //

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* ## References
*
* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator();
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function* generator() {
*    var i = 0;
*    while ( true ) {
*        i++;
*        yield [ i, i ];
*    }
* }
*/
function continuedFraction( generator, options ) {
	var maxIter;
	var opts;
	var eps;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	eps = opts.tolerance || TOLERANCE;
	maxIter = opts.maxIter || MAX_ITER;

	if ( opts.keep ) {
		return continuedFractionB( generator, eps, maxIter );
	}
	return continuedFractionA( generator, eps, maxIter );
}


// EXPORTS //

module.exports = continuedFraction;

},{"@stdlib/constants/math/float32-smallest-normal":68,"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/special/abs":1298}],1866:[function(require,module,exports){
'use strict';

/**
* Calculates a continued fraction approximation.
*
* @module @stdlib/math/base/tools/continued-fraction
*
* @example
* var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
*
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/

// MODULES //

var hasGeneratorsSupport = require( '@stdlib/utils/detect-generator-support' );
var generator = require( './generators.js' );
var basic = require( './basic.js' );


// MAIN //

var continuedFraction;
if ( hasGeneratorsSupport() ) {
	continuedFraction = generator;
} else {
	continuedFraction = basic;
}


// EXPORTS //

module.exports = continuedFraction;

},{"./basic.js":1864,"./generators.js":1865,"@stdlib/utils/detect-generator-support":1942}],1867:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function evalpoly( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
}


// EXPORTS //

module.exports = evalpoly;

},{}],1868:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( './evalpoly.js' );


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* ## Notes
*
* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: http://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return evalpoly( c, x );
	}
}


// EXPORTS //

module.exports = factory;

},{"./evalpoly.js":1867}],1869:[function(require,module,exports){
'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalpoly = require( './evalpoly.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalpoly, 'factory', factory );


// EXPORTS //

module.exports = evalpoly;

},{"./evalpoly.js":1867,"./factory.js":1868,"@stdlib/utils/define-read-only-property":1937}],1870:[function(require,module,exports){
'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/tools/rational.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* (C) Copyright John Maddock 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree
* @param {NumericAray} Q - denominator polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*
* @example
* var P = [ -6.0, -5.0 ];
* var Q = [ 3.0, 0.5 ];
*
* var v = evalrational( P, Q, 6.0 ); //  => ( -6*6^0 - 5*6^1 ) / ( 3*6^0 + 0.5*6^1 ) = (-6-30)/(3+3)
* // returns -6.0
*
* @example
* // 2x^3 + 4x^2 - 5x^1 - 6x^0 => degree 4
* var P = [ -6.0, -5.0, 4.0, 2.0 ];
*
* // 0.5x^1 + 3x^0 => degree 2
* var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded
*
* var v = evalrational( P, Q, 6.0 ); // => ( -6*6^0 - 5*6^1 + 4*6^2 + 2*6^3 ) / ( 3*6^0 + 0.5*6^1 + 0*6^2 + 0*6^3 ) = (-6-30+144+432)/(3+3)
* // returns 90.0
*/
function evalrational( P, Q, x ) {
	var len;
	var s1;
	var s2;
	var i;

	len = P.length;
	if ( len === 0 ) {
		return NaN;
	}
	if ( len !== Q.length ) {
		return NaN;
	}
	if ( x === 0.0 || len === 1 ) {
		return P[ 0 ] / Q[ 0 ];
	}
	// Use Horner's method...
	if ( abs( x ) <= 1.0 ) {
		s1 = P[ len-1 ];
		s2 = Q[ len-1 ];
		for ( i = len-2; i >= 0; --i ) {
			s1 *= x;
			s2 *= x;
			s1 += P[ i ];
			s2 += Q[ i ];
		}
	} else {
		x = 1.0 / x; // use inverse to avoid overflow
		s1 = P[ 0 ];
		s2 = Q[ 0 ];
		for ( i = 1; i < len; ++i ) {
			s1 *= x;
			s2 *= x;
			s1 += P[ i ];
			s2 += Q[ i ];
		}
	}
	return s1 / s2;
}


// EXPORTS //

module.exports = evalrational;

},{"@stdlib/math/base/special/abs":1298}],1871:[function(require,module,exports){
'use strict';

// MODULES //

var evalrational = require( './evalrational.js' );


// MAIN //

/**
* Generates a function for evaluating a rational function.
*
* ## Notes
*
* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: http://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree
* @param {NumericArray} Q - denominator polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a rational function
*
* @example
* var P = [ 20.0, 8.0, 3.0 ];
* var Q = [ 10.0, 9.0, 1.0 ];
*
* var rational = factory( P, Q );
*
* var v = rational( 10.0 ); // => (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2) = (20+80+300)/(10+90+100)
* // returns 2.0
*
* v = rational( 2.0 ); // => (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2) = (20+16+12)/(10+18+4)
* // returns 1.5
*/
function factory( P, Q ) {
	var f;
	var r;
	var n;
	var m;
	var i;

	// Avoid exceeding maximum stack size on V8 :(. Note that the value of `500` was empirically determined...
	if ( P.length > 500 ) {
		return rational;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalrational(x){';

	// Create the function body...
	n = P.length;

	// Declare variables...
	f += 'var ax,s1,s2;';

	// If no coefficients, the function always returns NaN...
	if ( n === 0 ) {
		f += 'return NaN;';
	}
	// If P and Q have different lengths, the function always returns NaN...
	else if ( n !== Q.length ) {
		f += 'return NaN;';
	}
	// If P and Q have only one coefficient, the function always returns the ratio of the first coefficients...
	else if ( n === 1 ) {
		r = P[ 0 ] / Q[ 0 ];
		f += 'return ' + r + ';';
	}
	// If more than one coefficient, apply Horner's method to both the numerator and denominator...
	else {
		// If `x == 0`, return the ratio of the first coefficients...
		r = P[ 0 ] / Q[ 0 ];
		f += 'if(x===0.0){return ' + r + ';}';

		// Compute the absolute value of `x`...
		f += 'if(x<0.0){ax=-x;}else{ax=x;}';

		// If `abs(x) <= 1`, evaluate the numerator and denominator of the rational function using Horner's method...
		f += 'if(ax<=1.0){';
		f += 's1 = ' + P[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += P[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
		f += 's2 = ' + Q[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += Q[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';

		// Close the if statement...
		f += '}else{';

		// If `abs(x) > 1`, evaluate the numerator and denominator via the inverse to avoid overflow...
		f += 'x = 1.0/x;';
		m = n - 1;
		f += 's1 = ' + P[ m ];
		for ( i = m - 1; i >= 0; i-- ) {
			f += '+x*';
			if ( i > 0 ) {
				f += '(';
			}
			f += P[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';

		m = n - 1;
		f += 's2 = ' + Q[ m ];
		for ( i = m - 1; i >= 0; i-- ) {
			f += '+x*';
			if ( i > 0 ) {
				f += '(';
			}
			f += Q[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';

		// Close the else statement...
		f += '}';

		// Return the ratio of the two sums...
		f += 'return s1/s2;';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalrational.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*	function evalrational( x ) {
	*		var ax, s1, s2;
	*		if ( x === 0.0 ) {
	*			return P[0] / Q[0];
	*		}
	*		if ( x < 0.0 ) {
	*			ax = -x;
	*		} else {
	*			ax = x;
	*		}
	*		if ( ax <= 1.0 ) {
	*			s1 = P[0]+x*(P[1]+x*(P[2]+x*(P[3]+...+x*(P[n-2]+x*P[n-1]))));
	*			s2 = Q[0]+x*(Q[1]+x*(Q[2]+x*(Q[3]+...+x*(Q[n-2]+x*Q[n-1]))));
	*		} else {
	*			x = 1.0/x;
	*			s1 = P[n-1]+x*(P[n-2]+x*(P[n-3]+x*(P[n-4]+...+x*(P[1]+x*P[0]))));
	*			s2 = Q[n-1]+x*(Q[n-2]+x*(Q[n-3]+x*(Q[n-4]+...+x*(Q[1]+x*Q[0]))));
	*		}
	*		return s1 / s2;
	*	}
	*/

	/**
	* Evaluates a rational function.
	*
	* @private
	* @param {number} x - value at which to evaluate a rational function
	* @returns {number} evaluated rational function
	*/
	function rational( x ) {
		return evalrational( P, Q, x );
	}
}


// EXPORTS //

module.exports = factory;

},{"./evalrational.js":1870}],1872:[function(require,module,exports){
'use strict';

/**
* Evaluate a rational function.
*
* @module @stdlib/math/base/tools/evalrational
*
* @example
* var evalrational = require( '@stdlib/math/base/tools/evalrational' );
*
* // 2x^3 + 4x^2 - 5x^1 - 6x^0 => degree 4
* var P = [ -6.0, -5.0, 4.0, 2.0 ];
*
* // 0.5x^1 + 3x^0 => degree 2
* var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded
*
* var v = evalrational( P, Q, 6.0 ); // => ( -6*6^0 - 5*6^1 + 4*6^2 + 2*6^3 ) / ( 3*6^0 + 0.5*6^1 + 0*6^2 + 0*6^3 ) = (-6-30+144+432)/(3+3)
* // returns 90.0
*
* @example
* var evalrational = require( '@stdlib/math/base/tools/evalrational' );
*
* var P = [ 20.0, 8.0, 3.0 ];
* var Q = [ 10.0, 9.0, 1.0 ];
*
* var rational = evalrational.factory( P, Q );
*
* var v = rational( 10.0 ); // => (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2) = (20+80+300)/(10+90+100)
* // returns 2.0
*
* v = rational( 2.0 ); // => (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2) = (20+16+12)/(10+18+4)
* // returns 1.5
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalrational = require( './evalrational.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalrational, 'factory', factory );


// EXPORTS //

module.exports = evalrational;

},{"./evalrational.js":1870,"./factory.js":1871,"@stdlib/utils/define-read-only-property":1937}],1873:[function(require,module,exports){
'use strict';

// MAIN //

var cache = {};


// EXPORTS //

module.exports = cache;

},{}],1874:[function(require,module,exports){
'use strict';

// MODULES //

var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
var cache = require( './cache.js' );


// MAIN //

/**
* Computes polynomial coefficients.
*
* @private
* @param {NonNegativeInteger} n - Fibonacci polynomial for which to compute coefficients
* @returns {NonNegativeIntegerArray} polynomial coefficients
*/
function coefficients( n ) {
	var coefs;
	var i;

	coefs = cache[ n ];
	if ( coefs === void 0 ) {
		coefs = new Array( n );
		for ( i = 0; i < n; i++ ) {
			coefs[ i ] = 0.0;
		}
		for ( i = n-1; i >= 0; i -= 2 ) {
			coefs[ i ] = binomcoef( (n+i-1)/2, i );
		}
		// Memoize the coefficients:
		cache[ n ] = coefs;
	}
	return coefs;
}


// EXPORTS //

module.exports = coefficients;

},{"./cache.js":1873,"@stdlib/math/base/special/binomcoef":1373}],1875:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var coefficients = require( './coefficients.js' );


// MAIN //

/**
* Returns a function for evaluating a Fibonacci polynomial.
*
* @param {integer} n - Fibonacci polynomial to evaluate
* @returns {Function} function for evaluating a Fibonacci polynomial
*
* @example
* var fibpolyval = factory( 5 );
*
* var v = fibpolyval( 1.0 );
* // returns 5.0
*
* v = fibpolyval( 2.0 );
* // returns 29.0
*/
function factory( n ) {
	var coefs;
	var an;
	var f;
	var s;

	an = abs( n );
	coefs = coefficients( an );

	f = evalpoly( coefs );
	s = pow( -1.0, an-1 );
	if ( n >= 0 || s === 1.0 ) {
		return f;
	}
	return polyval;

	/**
	* Evaluates a Fibonacci polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a Fibonacci polynomial
	* @returns {number} result
	*/
	function polyval( x ) {
		return -1.0 * f( x );
	}
}


// EXPORTS //

module.exports = factory;

},{"./coefficients.js":1874,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/tools/evalpoly":1869}],1876:[function(require,module,exports){
'use strict';

/**
* Evaluate a Fibonacci polynomial.
*
* @module @stdlib/math/base/tools/fibpoly
*
* @example
* var fibpoly = require( '@stdlib/math/base/tools/fibpoly' );
*
* var v = fibpoly( 5, 1.0 );
* // returns 5.0
*
* @example
* var factory = require( '@stdlib/math/base/tools/fibpoly' ).factory;
*
* var fibpolyval = factory( 5 );
*
* var v = fibpolyval( 1.0 );
* // returns 5.0
*
* v = fibpolyval( 2.0 );
* // returns 29.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var fibpoly = require( './main.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( fibpoly, 'factory', factory );


// EXPORTS //

module.exports = fibpoly;

},{"./factory.js":1875,"./main.js":1877,"@stdlib/utils/define-read-only-property":1937}],1877:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var coefficients = require( './coefficients.js' );


// MAIN //

/**
* Evaluates a Fibonacci polynomial.
*
* @param {integer} n - Fibonacci polynomial to evaluate
* @param {number} x - value at which to evaluate a Fibonacci polynomial
* @returns {number} result
*
* @example
* var v = fibpoly( 5, 1.0 );
* // returns 5.0
*/
function fibpoly( n, x ) {
	var coefs;
	var an;
	var v;

	an = abs( n );
	coefs = coefficients( an );

	v = evalpoly( coefs, x );
	if ( n >= 0 ) {
		return v;
	}
	return pow( -1.0, an-1 ) * v;
}


// EXPORTS //

module.exports = fibpoly;

},{"./coefficients.js":1874,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/tools/evalpoly":1869}],1878:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace tools
*/
var tools = {};

/**
* @name continuedFraction
* @memberof tools
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/tools/continued-fraction}
*/
setReadOnly( tools, 'continuedFraction', require( '@stdlib/math/base/tools/continued-fraction' ) );

/**
* @name evalpoly
* @memberof tools
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/tools/evalpoly}
*/
setReadOnly( tools, 'evalpoly', require( '@stdlib/math/base/tools/evalpoly' ) );

/**
* @name evalrational
* @memberof tools
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/tools/evalrational}
*/
setReadOnly( tools, 'evalrational', require( '@stdlib/math/base/tools/evalrational' ) );

/**
* @name fibpoly
* @memberof tools
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/tools/fibpoly}
*/
setReadOnly( tools, 'fibpoly', require( '@stdlib/math/base/tools/fibpoly' ) );

/**
* @name lucaspoly
* @memberof tools
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/tools/lucaspoly}
*/
setReadOnly( tools, 'lucaspoly', require( '@stdlib/math/base/tools/lucaspoly' ) );

/**
* @name sumSeries
* @memberof tools
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/tools/sum-series}
*/
setReadOnly( tools, 'sumSeries', require( '@stdlib/math/base/tools/sum-series' ) );


// EXPORTS //

module.exports = tools;

},{"@stdlib/math/base/tools/continued-fraction":1866,"@stdlib/math/base/tools/evalpoly":1869,"@stdlib/math/base/tools/evalrational":1872,"@stdlib/math/base/tools/fibpoly":1876,"@stdlib/math/base/tools/lucaspoly":1882,"@stdlib/math/base/tools/sum-series":1886,"@stdlib/utils/define-read-only-property":1937}],1879:[function(require,module,exports){
arguments[4][1873][0].apply(exports,arguments)
},{"dup":1873}],1880:[function(require,module,exports){
'use strict';

// MODULES //

var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
var floor = require( '@stdlib/math/base/special/floor' );
var ceil = require( '@stdlib/math/base/special/ceil' );
var cache = require( './cache.js' );


// MAIN //

/**
* Computes polynomial coefficients.
*
* ## Notes
*
* -   Coefficients are computed via a (1,2)-Pascal triangle (i.e., Lucas triangle). For more details, see [Lucas polynomials][oeis-lucas-polynomials] and [Lucas triangle][oeis-lucas-triangle].
*
* [oeis-lucas-polynomials]: https://oeis.org/wiki/Lucas_polynomials
* [oeis-lucas-triangle]: https://oeis.org/wiki/Lucas_triangle
*
* @private
* @param {NonNegativeInteger} n - Lucas polynomial for which to compute coefficients
* @returns {NonNegativeIntegerArray} polynomial coefficients
*/
function coefficients( n ) {
	var coefs;
	var half;
	var high;
	var low;
	var p;
	var a;
	var b;
	var m;
	var i;

	coefs = cache[ n ];
	if ( coefs === void 0 ) {
		m = n + 1;
		coefs = new Array( m );
		if ( n === 0 ) {
			coefs[ 0 ] = 2.0;
		} else {
			for ( i = 0; i < m; i++ ) {
				coefs[ i ] = 0.0;
			}
			half = n / 2;
			high = ceil( half );
			low = floor( half );
			for ( i = 0; i <= low; i++ ) {
				p = (2*i) + (n%2);
				a = 2.0 * binomcoef( high+i-1, low-i-1 );
				b = binomcoef( high+i-1, low-i );
				coefs[ p ] += a + b;
			}
		}
		// Memoize the coefficients:
		cache[ n ] = coefs;
	}
	return coefs;
}


// EXPORTS //

module.exports = coefficients;

},{"./cache.js":1879,"@stdlib/math/base/special/binomcoef":1373,"@stdlib/math/base/special/ceil":1380,"@stdlib/math/base/special/floor":1484}],1881:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var coefficients = require( './coefficients.js' );


// MAIN //

/**
* Returns a function for evaluating a Lucas polynomial.
*
* @param {integer} n - Lucas polynomial to evaluate
* @returns {Function} function for evaluating a Lucas polynomial
*
* @example
* var polyval = factory( 5 );
*
* var v = polyval( 1.0 );
* // returns 11.0
*
* v = polyval( 2.0 );
* // returns 82.0
*/
function factory( n ) {
	var coefs;
	var an;
	var f;
	var s;

	an = abs( n );
	coefs = coefficients( an );

	f = evalpoly( coefs );
	s = pow( -1.0, an );
	if ( n >= 0 || s === 1.0 ) {
		return f;
	}
	return polyval;

	/**
	* Evaluates a Lucas polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a Lucas polynomial
	* @returns {number} result
	*/
	function polyval( x ) {
		return -1.0 * f( x );
	}
}


// EXPORTS //

module.exports = factory;

},{"./coefficients.js":1880,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/tools/evalpoly":1869}],1882:[function(require,module,exports){
'use strict';

/**
* Evaluate a Lucas polynomial.
*
* @module @stdlib/math/base/tools/lucaspoly
*
* @example
* var lucaspoly = require( '@stdlib/math/base/tools/lucaspoly' );
*
* var v = lucaspoly( 5, 1.0 );
* // returns 11.0
*
* @example
* var factory = require( '@stdlib/math/base/tools/lucaspoly' ).factory;
*
* var polyval = factory( 5 );
*
* var v = polyval( 1.0 );
* // returns 11.0
*
* v = polyval( 2.0 );
* // returns 82.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var lucaspoly = require( './main.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( lucaspoly, 'factory', factory );


// EXPORTS //

module.exports = lucaspoly;

},{"./factory.js":1881,"./main.js":1883,"@stdlib/utils/define-read-only-property":1937}],1883:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var coefficients = require( './coefficients.js' );


// MAIN //

/**
* Evaluates a Lucas polynomial.
*
* @param {integer} n - Lucas polynomial to evaluate
* @param {number} x - value at which to evaluate a Lucas polynomial
* @returns {number} result
*
* @example
* var v = lucaspoly( 5, 1.0 );
* // returns 11.0
*/
function lucaspoly( n, x ) {
	var coefs;
	var an;
	var v;

	an = abs( n );
	coefs = coefficients( an );

	v = evalpoly( coefs, x );
	if ( n >= 0 ) {
		return v;
	}
	return pow( -1.0, an ) * v;
}


// EXPORTS //

module.exports = lucaspoly;

},{"./coefficients.js":1880,"@stdlib/math/base/special/abs":1298,"@stdlib/math/base/special/pow":1743,"@stdlib/math/base/tools/evalpoly":1869}],1884:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/constants/math/float64-eps' );


// VARIABLES //

var MAX_TERMS = 1000000;


// MAIN //

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/
function sumSeries( generator, options ) {
	var nextTerm;
	var tolerance;
	var counter;
	var result;
	var opts;

	opts = {};

	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || TOLERANCE;
	counter = opts.maxTerms || MAX_TERMS;
	result = opts.initialValue || 0;

	// Repeatedly call function...
	do {
		nextTerm = generator();
		result += nextTerm;
	}
	while ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus

	return result;
}


// EXPORTS //

module.exports = sumSeries;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/special/abs":1298}],1885:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var TOLERANCE = require( '@stdlib/constants/math/float64-eps' );


// VARIABLES //

var MAX_TERMS = 1000000;


// MAIN //

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesGenerator( 0.9 );
* var out = sumSeries( gen );
* // returns 10
*
* function* geometricSeriesGenerator( x ) {
*     var exponent = 0;
*     while ( true ) {
*         yield Math.pow( x, exponent );
*         exponent += 1;
*     }
* }
*/
function sumSeries( generator, options ) {
	var isgenerator;
	var tolerance;
	var nextTerm;
	var counter;
	var result;
	var opts;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || TOLERANCE;
	counter = opts.maxTerms || MAX_TERMS;
	result = opts.initialValue || 0;

	isgenerator = typeof generator.next === 'function';
	if ( isgenerator === true ) {
		// Case A: Iterate over generator object created by a generator function...
		for ( nextTerm of generator ) {
			result += nextTerm;
			if (
				abs(tolerance * result) >= abs(nextTerm) ||
				--counter === 0 // eslint-disable-line no-plusplus
			) {
				break;
			}
		}
	} else {
		// Case B: Repeatedly call function...
		do {
			nextTerm = generator();
			result += nextTerm;
		}
		while ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus
	}
	return result;
}


// EXPORTS //

module.exports = sumSeries;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/math/base/special/abs":1298}],1886:[function(require,module,exports){
'use strict';

/**
* Sum the elements of the series given by the supplied function.
*
* @module @stdlib/math/base/tools/sum-series
*
* @example
* var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
*
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/

// MODULES //

var hasGeneratorsSupport = require( '@stdlib/utils/detect-generator-support' );
var generator = require( './generators.js' );
var basic = require( './basic.js' );


// MAIN //

var sumSeries;
if ( hasGeneratorsSupport() ) {
	sumSeries = generator;
} else {
	sumSeries = basic;
}


// EXPORTS //

module.exports = sumSeries;

},{"./basic.js":1884,"./generators.js":1885,"@stdlib/utils/detect-generator-support":1942}],1887:[function(require,module,exports){
'use strict';

/**
* Compute the absolute difference.
*
* @module @stdlib/math/base/utils/absolute-difference
*
* @example
* var diff = require( '@stdlib/math/base/utils/absolute-difference' );
*
* var d = diff( 2.0, 5.0 );
* // returns 3.0
*
* d = diff( -1.0, 3.14 );
* // returns ~4.14
*
* d = diff( 10.1, -2.05 );
* // returns ~12.15
*
* d = diff( -0.0, 0.0 );
* // returns +0.0
*
* d = diff( NaN, 5.0 );
* // returns NaN
*
* d = diff( Infinity, -Infinity  );
* // returns Infinity
*
* d = diff( Infinity, Infinity  );
* // returns NaN
*/

// MODULES //

var absoluteDifference = require( './main.js' );


// EXPORTS //

module.exports = absoluteDifference;

},{"./main.js":1888}],1888:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/math/float64-pinf' );
var abs = require( '@stdlib/math/base/special/abs' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );


// MAIN //

/**
* Computes the absolute difference.
*
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} absolute difference
*
* @example
* var d = absoluteDifference( 2.0, 5.0 );
* // returns 3.0
*
* @example
* var d = absoluteDifference( -1.0, 3.14 );
* // returns ~4.14
*
* @example
* var d = absoluteDifference( 10.1, -2.05 );
* // returns ~12.15
*
* @example
* var d = absoluteDifference( -0.0, 0.0 );
* // returns +0.0
*
* @example
* var d = absoluteDifference( NaN, 5.0 );
* // returns NaN
*
* @example
* var d = absoluteDifference( Infinity, -Infinity  );
* // returns Infinity
*
* @example
* var d = absoluteDifference( Infinity, Infinity  );
* // returns NaN
*/
function absoluteDifference( x, y ) {
	if ( isnan( x ) || isnan( y ) ) {
		return NaN;
	}
	if ( isInfinite( x ) || isInfinite( y ) ) {
		if ( x === y ) {
			return NaN;
		}
		return PINF;
	}
	return abs( x - y );
}


// EXPORTS //

module.exports = absoluteDifference;

},{"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298}],1889:[function(require,module,exports){
'use strict';

/**
* Compute the relative difference in units of double-precision floating-point epsilon.
*
* @module @stdlib/math/base/utils/float64-epsilon-difference
*
* @example
* var epsdiff = require( '@stdlib/math/base/utils/float64-epsilon-difference' );
*
* var d = epsdiff( 12.15, 12.149999999999999 ); // => ~0.658ε
* // returns ~0.658
*
* d = epsdiff( 2.4341309458983933, 2.4341309458633909, 'mean-abs' ); // => ~64761.5ε => ~1.438e-11
* // returns ~64761.5
*
* function scale( x, y ) {
*      // Return the minimum value:
*      return ( x > y ) ? y : x;
* }
*
* d = epsdiff( 1.0000000000000002, 1.0000000000000100, scale ); // => ~44ε
* // returns ~44
*/

// MODULES //

var epsdiff = require( './main.js' );


// EXPORTS //

module.exports = epsdiff;

},{"./main.js":1890}],1890:[function(require,module,exports){
'use strict';

// MODULES //

var reldiff = require( '@stdlib/math/base/utils/relative-difference' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var MAX_FLOAT64 = require( '@stdlib/constants/math/float64-max' );
var EPS = require( '@stdlib/constants/math/float64-eps' );


// VARIABLES //

var MAX_DIFF = MAX_FLOAT64 * EPS;


// MAIN //

/**
* Computes the relative difference in units of double-precision floating-point epsilon.
*
* @param {number} x - first number
* @param {number} y - second number
* @param {(string|Function)} [scale='max-abs'] - scale function
* @returns {number} relative difference in units of double-precision floating-point epsilon
*
* @example
* var d = epsilonDifference( 12.15, 12.149999999999999 ); // => ~0.658ε
* // returns ~0.658
*
* @example
* var d = epsilonDifference( 2.4341309458983933, 2.4341309458633909, 'mean-abs' ); // => ~64761.5ε => ~1.438e-11
* // returns ~64761.5
*
* @example
* function scale( x, y ) {
*      // Return the minimum value:
*      return ( x > y ) ? y : x;
* }
*
* var d = epsilonDifference( 1.0000000000000002, 1.0000000000000100, scale ); // => ~44ε
* // returns ~44
*/
function epsilonDifference( x, y, scale ) {
	var d = reldiff( x, y, scale || 'max-abs' );

	// If `d` is `NaN` or `+infinity`, nothing we can do...
	if ( isnan( d ) || d === PINF ) {
		return d;
	}
	// If `d >= MAX_VALUE`, we will overflow, as `EPS <<< 1`. To prevent overflow, we cap out at the maximum double-precision floating-point number...
	if ( d >= MAX_DIFF ) {
		return MAX_FLOAT64;
	}
	// Return the answer to the question: how many EPS increments is the relative difference?
	return d / EPS;
}


// EXPORTS //

module.exports = epsilonDifference;

},{"@stdlib/constants/math/float64-eps":70,"@stdlib/constants/math/float64-max":91,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/utils/relative-difference":1892}],1891:[function(require,module,exports){
'use strict';

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );


// MAIN //

/**
* Top-level namespace.
*
* @namespace ns
*/
var ns = {};

/**
* @name absdiff
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/utils/absolute-difference}
*/
setReadOnly( ns, 'absdiff', require( '@stdlib/math/base/utils/absolute-difference' ) );

/**
* @name epsdiff
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/utils/float64-epsilon-difference}
*/
setReadOnly( ns, 'epsdiff', require( '@stdlib/math/base/utils/float64-epsilon-difference' ) );

/**
* @name reldiff
* @memberof ns
* @readonly
* @type {Function}
* @see {@link module:@stdlib/math/base/utils/relative-difference}
*/
setReadOnly( ns, 'reldiff', require( '@stdlib/math/base/utils/relative-difference' ) );


// EXPORTS //

module.exports = ns;

},{"@stdlib/math/base/utils/absolute-difference":1887,"@stdlib/math/base/utils/float64-epsilon-difference":1889,"@stdlib/math/base/utils/relative-difference":1892,"@stdlib/utils/define-read-only-property":1937}],1892:[function(require,module,exports){
'use strict';

/**
* Compute the relative difference of two real numbers.
*
* @module @stdlib/math/base/utils/relative-difference
*
* @example
* var reldiff = require( '@stdlib/math/base/utils/relative-difference' );
*
* var d = reldiff( 2.0, 5.0 ); // => 3/5
* // returns 0.6
*
* d = reldiff( -1.0, 3.14 ); // => 4.14/3.14
* // returns ~1.318
*
* d = reldiff( -2.0, 5.0, 'max-abs' ); // => |-7/5|
* // returns 1.4
*
* d = reldiff( -2.0, 5.0, 'max' ); // => |-7/5|
* // returns 1.4
*
* d = reldiff( -2.0, 5.0, 'min-abs' ); // => |-7/2|
* // returns 3.5
*
* d = reldiff( -2.0, 5.0, 'min' ); // => |-7/-2|
* // returns 3.5
*
* d = reldiff( -2.0, 5.0, 'mean-abs' ); // => |-7/3.5|
* // returns 2.0
*
* d = reldiff( -2.0, 5.0, 'mean' ); // => |-7/1.5|
* // returns ~4.67
*
* d = reldiff( -2.0, 5.0, 'x' ); // => |-7/-2|
* // returns 3.5
*
* d = reldiff( 5.0, -2.0, 'x' ); // => |7/5|
* // returns 1.4
*
* d = reldiff( -2.0, 5.0, 'y' ); // => |-7/5|
* // returns 1.4
*
* d = reldiff( 5.0, -2.0, 'y' ); // => |7/-2|
* // returns 3.5
*/

// MODULES //

var reldiff = require( './main.js' );


// EXPORTS //

module.exports = reldiff;

},{"./main.js":1893}],1893:[function(require,module,exports){
'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var abs = require( '@stdlib/math/base/special/abs' );
var SCALE = require( './scale.js' );


// MAIN //

/**
* Computes the relative difference of two real numbers.
*
* @param {number} x - first number
* @param {number} y - second number
* @param {(string|Function)} [scale='max-abs'] - scale function
* @throws {Error} must provide a recognized scale function name
* @returns {number} relative difference
*
* @example
* var d = relativeDifference( 2.0, 5.0 ); // => 3/5
* // returns 0.6
*
* @example
* var d = relativeDifference( -1.0, 3.14 ); // => 4.14/3.14
* // returns ~1.318
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'max-abs' ); // => |-7/5|
* // returns 1.4
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'max' ); // => |-7/5|
* // returns 1.4
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'min-abs' ); // => |-7/2|
* // returns 3.5
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'min' ); // => |-7/-2|
* // returns 3.5
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'mean-abs' ); // => |-7/3.5|
* // returns 2.0
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'mean' ); // => |-7/1.5|
* // returns ~4.67
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'x' ); // => |-7/-2|
* // returns 3.5
*
* @example
* var d = relativeDifference( 5.0, -2.0, 'x' ); // => |7/5|
* // returns 1.4
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'y' ); // => |-7/5|
* // returns 1.4
*
* @example
* var d = relativeDifference( 5.0, -2.0, 'y' ); // => |7/-2|
* // returns 3.5
*/
function relativeDifference( x, y, scale ) {
	var f;
	var s;
	if ( isnan( x ) || isnan( y ) ) {
		return NaN;
	}
	if (
		x === PINF ||
		x === NINF ||
		y === PINF ||
		y === NINF
	) {
		if ( x === y ) {
			return NaN;
		}
		return PINF;
	}
	// If the absolute difference is `0`, then so is the relative difference:
	if ( x === y ) {
		return 0.0;
	}
	if ( isFunction( scale ) ) {
		f = scale;
	} else {
		if ( scale === void 0 ) {
			scale = 'max-abs';
		}
		f = SCALE[ scale ];
		if ( f === void 0 ) {
			throw new Error( 'invalid input argument. Unrecognized/unsupported scale function. Value: `' + scale + '`.' );
		}
	}
	s = f( x, y );
	if ( s === 0.0 ) {
		// Bail. No possible return value which works for all possible scale functions...
		return NaN;
	}
	return abs( (x - y) / s );
}


// EXPORTS //

module.exports = relativeDifference;

},{"./scale.js":1900,"@stdlib/assert/is-function":21,"@stdlib/constants/math/float64-ninf":98,"@stdlib/constants/math/float64-pinf":102,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298}],1894:[function(require,module,exports){
'use strict';

/**
* Returns the maximum value of `x` and `y`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} maximum value
*
* @example
* var z = max( 3.14, -1.0 );
* // returns 3.14
*/
function max( x, y ) {
	return ( x < y ) ? y : x; // doesn't account for +-0
}


// EXPORTS //

module.exports = max;

},{}],1895:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Returns the maximum value of `|x|` and `|y|`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} maximum absolute value
*
* @example
* var z = maxabs( 5.0, -11.11 );
* // returns 11.11
*/
function maxabs( x, y ) {
	x = abs( x );
	y = abs( y );
	return ( x < y ) ? y : x;
}


// EXPORTS //

module.exports = maxabs;

},{"@stdlib/math/base/special/abs":1298}],1896:[function(require,module,exports){
'use strict';

/**
* Returns the arithmetic mean of `x` and `y`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} arithmetic mean
*
* @example
* var z = mean( 3.5, 7.5 );
* // returns 5.5
*/
function mean( x, y ) {
	return x + ((y-x)/2.0);
}


// EXPORTS //

module.exports = mean;

},{}],1897:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Returns the arithmetic mean of `|x|` and `|y|`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} arithmetic mean
*
* @example
* var z = meanabs( -3.5, -7.5 );
* // returns 5.5
*/
function meanabs( x, y ) {
	x = abs( x );
	y = abs( y );
	return x + ((y-x)/2.0);
}


// EXPORTS //

module.exports = meanabs;

},{"@stdlib/math/base/special/abs":1298}],1898:[function(require,module,exports){
'use strict';

/**
* Returns the minimum value of `x` and `y`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} minimum value
*
* @example
* var z = min( 10.0, 3.14 );
* // returns 3.14
*/
function min( x, y ) {
	return ( x > y ) ? y : x; // doesn't account for +-0
}


// EXPORTS //

module.exports = min;

},{}],1899:[function(require,module,exports){
'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Returns the minimum value of `|x|` and `|y|`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} minimum absolute value value
*
* @example
* var z = minabs( -3.14, -11.0 );
* // returns 3.14
*/
function minabs( x, y ) {
	x = abs( x );
	y = abs( y );
	return ( x > y ) ? y : x;
}


// EXPORTS //

module.exports = minabs;

},{"@stdlib/math/base/special/abs":1298}],1900:[function(require,module,exports){
'use strict';

var SCALES = {
	'max-abs': require( './maxabs.js' ),
	'max': require( './max.js' ),
	'min-abs': require( './minabs.js' ),
	'min': require( './min.js' ),
	'mean-abs': require( './meanabs.js' ),
	'mean': require( './mean.js' ),
	'x': require( './x.js' ),
	'y': require( './y.js' )
};


// EXPORTS //

module.exports = SCALES;

},{"./max.js":1894,"./maxabs.js":1895,"./mean.js":1896,"./meanabs.js":1897,"./min.js":1898,"./minabs.js":1899,"./x.js":1901,"./y.js":1902}],1901:[function(require,module,exports){
'use strict';

/**
* Returns `x`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} first number
*
* @example
* var z = f( 5.0, 3.14 );
* // returns 5.0
*/
function f( x ) {
	return x;
}


// EXPORTS //

module.exports = f;

},{}],1902:[function(require,module,exports){
'use strict';

/**
* Returns `y`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} second number
*
* @example
* var z = f( 5.0, 3.14 );
* // returns 3.14
*/
function f( x, y ) {
	return y;
}


// EXPORTS //

module.exports = f;

},{}],1903:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './main.js' );


// EXPORTS //

module.exports = exponent;

},{"./main.js":1904}],1904:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var EXP_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return (high - BIAS)|0; // asm type annotation
}


// EXPORTS //

module.exports = exponent;

},{"@stdlib/constants/math/float64-exponent-bias":72,"@stdlib/constants/math/float64-high-word-exponent-mask":77,"@stdlib/number/float64/base/get-high-word":1909}],1905:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

var fromWords = require( './main.js' );


// EXPORTS //

module.exports = fromWords;

},{"./main.js":1907}],1906:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var indices;
var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': HIGH,
	'LOW': LOW
};


// EXPORTS //

module.exports = indices;

},{"@stdlib/assert/is-little-endian":29}],1907:[function(require,module,exports){
'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":1906,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],1908:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":29}],1909:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './main.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./main.js":1910}],1910:[function(require,module,exports){
'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
}


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":1908,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],1911:[function(require,module,exports){
'use strict';

/**
* Returns an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './main.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./main.js":1913}],1912:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":29}],1913:[function(require,module,exports){
'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
}


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":1912,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],1914:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var normalize = require( './main.js' );


// EXPORTS //

module.exports = normalize;

},{"./main.js":1915}],1915:[function(require,module,exports){
'use strict';

// MODULES //

var fcn = require( './normalize.js' );


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0.0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":1916}],1916:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		out[ 0 ] = x * SCALAR;
		out[ 1 ] = -52;
		return out;
	}
	out[ 0 ] = x;
	out[ 1 ] = 0;
	return out;
}


// EXPORTS //

module.exports = normalize;

},{"@stdlib/constants/math/float64-smallest-normal":103,"@stdlib/math/base/assert/is-infinite":124,"@stdlib/math/base/assert/is-nan":128,"@stdlib/math/base/special/abs":1298}],1917:[function(require,module,exports){
arguments[4][1908][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":29,"dup":1908}],1918:[function(require,module,exports){
'use strict';

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-high-word
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

// MODULES //

var setHighWord = require( './main.js' );


// EXPORTS //

module.exports = setHighWord;

},{"./main.js":1919}],1919:[function(require,module,exports){
'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/
function setHighWord( x, high ) {
	FLOAT64_VIEW[ 0 ] = x;
	UINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = setHighWord;

},{"./high.js":1917,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],1920:[function(require,module,exports){
'use strict';

/**
* Set the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-low-word
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
*
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/

// MODULES //

var setLowWord = require( './main.js' );


// EXPORTS //

module.exports = setLowWord;

},{"./main.js":1922}],1921:[function(require,module,exports){
arguments[4][1912][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":29,"dup":1912}],1922:[function(require,module,exports){
'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Sets the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`
* @returns {number} double having the same higher order word as `x`
*
* @example
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/
function setLowWord( x, low ) {
	FLOAT64_VIEW[ 0 ] = x;
	UINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = setLowWord;

},{"./low.js":1921,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],1923:[function(require,module,exports){
'use strict';

/**
* Return a boolean indicating if the sign bit is on (true) or off (false).
*
* @module @stdlib/number/float64/base/signbit
*
* @example
* var signbit = require( '@stdlib/number/float64/base/signbit' );
*
* var bool = signbit( 4.0 );
* // returns false
*
* bool = signbit( -9.14e-307 );
* // returns true
*
* bool = signbit( 0.0 );
* // returns false
*
* bool = signbit( -0.0 );
* // returns true
*/

// MODULES //

var signbit = require( './main.js' );


// EXPORTS //

module.exports = signbit;

},{"./main.js":1924}],1924:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );


// MAIN //

/**
* Returns a boolean indicating if the sign bit is on (true) or off (false).
*
* @param {number} x - input value
* @returns {boolean} boolean indicating if sign bit is on or off
*
* @example
* var bool = signbit( 4.0 );
* // returns false
* @example
* var bool = signbit( -9.14e-307 );
* // returns true
* @example
* var bool = signbit( 0.0 );
* // returns false
* @example
* var bool = signbit( -0.0 );
* // returns true
*/
function signbit( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:
	var high = getHighWord( x );

	// Shift off all bits which are not the sign bit and check if the sign bit is on:
	return ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary
}


// EXPORTS //

module.exports = signbit;

},{"@stdlib/number/float64/base/get-high-word":1909}],1925:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

var toWords = require( './main.js' );


// EXPORTS //

module.exports = toWords;

},{"./main.js":1927}],1926:[function(require,module,exports){
arguments[4][1906][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":29,"dup":1906}],1927:[function(require,module,exports){
'use strict';

// MODULES //

var fcn = require( './to_words.js' );


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":1928}],1928:[function(require,module,exports){
'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	FLOAT64_VIEW[ 0 ] = x;
	out[ 0 ] = UINT32_VIEW[ HIGH ];
	out[ 1 ] = UINT32_VIEW[ LOW ];
	return out;
}


// EXPORTS //

module.exports = toWords;

},{"./indices.js":1926,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],1929:[function(require,module,exports){
'use strict';

/**
* Convert an unsigned 32-bit integer to a signed 32-bit integer.
*
* @module @stdlib/number/uint32/base/to-int32
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );
*
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/

// MODULES //

var uint32ToInt32 = require( './main.js' );


// EXPORTS //

module.exports = uint32ToInt32;

},{"./main.js":1930}],1930:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Converts an unsigned 32-bit integer to a signed 32-bit integer.
*
* @param {uinteger32} x - unsigned 32-bit integer
* @returns {integer32} signed 32-bit integer
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/
function uint32ToInt32( x ) {
	// NOTE: we could also use typed-arrays to achieve the same end.
	return x|0; // asm type annotation
}


// EXPORTS //

module.exports = uint32ToInt32;

},{}],1931:[function(require,module,exports){
'use strict';

/**
* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @module @stdlib/regexp/function-name
* @type {RegExp}
*
* @example
* var RE_FUNCTION_NAME = require( '@stdlib/utils/regexp/function-name' );
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/


// MAIN //

/**
* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* Regular expression: `/^\s*function\s*([^(]*)/i`
*
* -   `/^\s*`
*     -   Match zero or more spaces at beginning
*
* -   `function`
*     -   Match the word `function`
*
* -   `\s*`
*     -   Match zero or more spaces after the word `function`
*
* -   `()`
*     -   Capture
*
* -   `[^(]*`
*     -   Match anything except a left parenthesis `(` zero or more times
*
* -   `/i`
*     -   ignore case
*
* @constant
* @type {RegExp}
* @default /^\s*function\s*([^(]*)/i
*/
var RE_FUNCTION_NAME = /^\s*function\s*([^(]*)/i;


// EXPORTS //

module.exports = RE_FUNCTION_NAME;

},{}],1932:[function(require,module,exports){
'use strict';

/**
* Creates a function which always returns the same value.
*
* @param {*} [value] - value to always return
* @returns {Function} constant function
*
* @example
* var fcn = wrap( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/
function wrap( value ) {
	return constantFunction;

	/**
	* Constant function.
	*
	* @returns {*} constant value
	*/
	function constantFunction() {
		return value;
	}
}


// EXPORTS //

module.exports = wrap;

},{}],1933:[function(require,module,exports){
'use strict';

/**
* Create a constant function.
*
* @module @stdlib/utils/constant-function
*
* @example
* var constantFunction = require( '@stdlib/utils/constant-function' );
*
* var fcn = constantFunction( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/

// MODULES //

var constantFunction = require( './constant_function.js' );


// EXPORTS //

module.exports = constantFunction;

},{"./constant_function.js":1932}],1934:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var RE = require( '@stdlib/regexp/function-name' );
var isBuffer = require( '@stdlib/assert/is-buffer' );


// MAIN //

/**
* Determines the name of a value's constructor.
*
* @param {*} v - input value
* @returns {string} name of a value's constructor
*
* @example
* var v = constructorName( 'a' );
* // returns 'String'
*
* @example
* var v = constructorName( 5 );
* // returns 'Number'
*
* @example
* var v = constructorName( null );
* // returns 'Null'
*
* @example
* var v = constructorName( undefined );
* // returns 'Undefined'
*
* @example
* var v = constructorName( function noop() {} );
* // returns 'Function'
*/
function constructorName( v ) {
	var name;
	var ctor;
	name = nativeClass( v ).slice( 8, -1 );
	if ( (name === 'Object' || name === 'Error') && v.constructor ) {
		ctor = v.constructor;
		if ( typeof ctor.name === 'string' ) {
			return ctor.name;
		}
		return RE.exec( ctor.toString() )[ 1 ];
	}
	if ( isBuffer( v ) ) {
		return 'Buffer';
	}
	return name;
}


// EXPORTS //

module.exports = constructorName;

},{"@stdlib/assert/is-buffer":17,"@stdlib/regexp/function-name":1931,"@stdlib/utils/native-class":1957}],1935:[function(require,module,exports){
'use strict';

/**
* Determines the name of a value's constructor.
*
* @module @stdlib/utils/constructor-name
*
* @example
* var constructorName = require( '@stdlib/utils/constructor-name' );
*
* var v = constructorName( 'a' );
* // returns 'String'
*
* v = constructorName( {} );
* // returns 'Object'
*
* v = constructorName( true );
* // returns 'Boolean'
*/

// MODULES //

var constructorName = require( './constructor_name.js' );


// EXPORTS //

module.exports = constructorName;

},{"./constructor_name.js":1934}],1936:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
}


// EXPORTS //

module.exports = setReadOnly;

},{}],1937:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":1936}],1938:[function(require,module,exports){
'use strict';

// MODULES //

var isFloat64Array = require( '@stdlib/assert/is-float64array' );
var GlobalFloat64Array = require( './float64array.js' );


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat64Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			isFloat64Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./float64array.js":1939,"@stdlib/assert/is-float64array":19}],1939:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = ( typeof Float64Array === 'function' ) ? Float64Array : null;

},{}],1940:[function(require,module,exports){
'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/utils/detect-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/utils/detect-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat64ArraySupport = require( './detect_float64array_support.js' );


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./detect_float64array_support.js":1938}],1941:[function(require,module,exports){
'use strict';

// MODULES //

var evil = require( '@stdlib/utils/eval' );


// MAIN //

/**
* Tests for native `function*()` support.
*
* @returns {boolean} boolean indicating if an environment has native `function*()` support
*
* @example
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/
function hasGeneratorSupport() {
	var bool;
	try {
		evil( '"use strict"; (function* () {})' );
		bool = true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasGeneratorSupport;

},{"@stdlib/utils/eval":1956}],1942:[function(require,module,exports){
'use strict';

/**
* Test for native `function*()` support.
*
* @module @stdlib/utils/detect-generator-support
*
* @example
* var hasGeneratorSupport = require( '@stdlib/utils/detect-generator-support' );
*
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/

// MODULES //

var hasGeneratorSupport = require( './detect_generator_support.js' );


// EXPORTS //

module.exports = hasGeneratorSupport;

},{"./detect_generator_support.js":1941}],1943:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],1944:[function(require,module,exports){
'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/utils/detect-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/utils/detect-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var hasSymbolSupport = require( './detect_symbol_support.js' );


// EXPORTS //

module.exports = hasSymbolSupport;

},{"./detect_symbol_support.js":1943}],1945:[function(require,module,exports){
'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( hasSymbols && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/utils/detect-symbol-support":1944}],1946:[function(require,module,exports){
'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/utils/detect-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/utils/detect-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var hasToStringTagSupport = require( './has_tostringtag_support.js' );


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"./has_tostringtag_support.js":1945}],1947:[function(require,module,exports){
'use strict';

// MODULES //

var isUint16Array = require( '@stdlib/assert/is-uint16array' );
var UINT16_MAX = require( '@stdlib/constants/math/uint16-max' );
var GlobalUint16Array = require( './uint16array.js' );


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint16Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];
		arr = new GlobalUint16Array( arr );
		bool = (
			isUint16Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./uint16array.js":1949,"@stdlib/assert/is-uint16array":59,"@stdlib/constants/math/uint16-max":113}],1948:[function(require,module,exports){
'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/utils/detect-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/utils/detect-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint16ArraySupport = require( './detect_uint16array_support.js' );


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./detect_uint16array_support.js":1947}],1949:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = ( typeof Uint16Array === 'function' ) ? Uint16Array : null;

},{}],1950:[function(require,module,exports){
'use strict';

// MODULES //

var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var UINT32_MAX = require( '@stdlib/constants/math/uint32-max' );
var GlobalUint32Array = require( './uint32array.js' );


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
		arr = new GlobalUint32Array( arr );
		bool = (
			isUint32Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./uint32array.js":1952,"@stdlib/assert/is-uint32array":61,"@stdlib/constants/math/uint32-max":114}],1951:[function(require,module,exports){
'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/utils/detect-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/utils/detect-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint32ArraySupport = require( './detect_uint32array_support.js' );


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./detect_uint32array_support.js":1950}],1952:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = ( typeof Uint32Array === 'function' ) ? Uint32Array : null;

},{}],1953:[function(require,module,exports){
'use strict';

// MODULES //

var isUint8Array = require( '@stdlib/assert/is-uint8array' );
var UINT8_MAX = require( '@stdlib/constants/math/uint8-max' );
var GlobalUint8Array = require( './uint8array.js' );


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint8Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];
		arr = new GlobalUint8Array( arr );
		bool = (
			isUint8Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./uint8array.js":1955,"@stdlib/assert/is-uint8array":63,"@stdlib/constants/math/uint8-max":115}],1954:[function(require,module,exports){
'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/utils/detect-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/utils/detect-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint8ArraySupport = require( './detect_uint8array_support.js' );


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./detect_uint8array_support.js":1953}],1955:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = ( typeof Uint8Array === 'function' ) ? Uint8Array : null;

},{}],1956:[function(require,module,exports){
/* eslint-disable no-eval */
'use strict';

/**
* Alias for `eval` global.
*
* @module @stdlib/utils/eval
*
* @example
* var evil = require( '@stdlib/utils/@stdlib/utils/eval' );
*
* var v = evil( '5*4*3*2*1' );
* // returns 120
*/

// MODULES //

var evil = eval;


// EXPORTS //

module.exports = evil;

},{}],1957:[function(require,module,exports){
'use strict';

/**
* Returns a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' );
var builtin = require( './native_class.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var nativeClass;
if ( hasToStringTag() ) {
	nativeClass = polyfill;
} else {
	nativeClass = builtin;
}


// EXPORTS //

module.exports = nativeClass;

},{"./native_class.js":1958,"./polyfill.js":1959,"@stdlib/utils/detect-tostringtag-support":1946}],1958:[function(require,module,exports){
'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":1960}],1959:[function(require,module,exports){
'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":1960,"./tostringtag.js":1961,"@stdlib/assert/has-own-property":14}],1960:[function(require,module,exports){
'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

module.exports = toStr;

},{}],1961:[function(require,module,exports){
'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

module.exports = toStrTag;

},{}],1962:[function(require,module,exports){
'use strict';

// MODULES //

var RE = require( './fixtures/re.js' );
var nodeList = require( './fixtures/nodelist.js' );
var typedarray = require( './fixtures/typedarray.js' );


// MAIN //

/**
* Checks whether a polyfill is needed when using the `typeof` operator.
*
* @private
* @returns {boolean} boolean indicating whether a polyfill is needed
*/
function check() {
	if (
		// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):
		typeof RE === 'function' ||

		// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):
		typeof typedarray === 'object' ||

		// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):
		typeof nodeList === 'function'
	) {
		return true;
	}
	return false;
}


// EXPORTS //

module.exports = check;

},{"./fixtures/nodelist.js":1963,"./fixtures/re.js":1964,"./fixtures/typedarray.js":1965}],1963:[function(require,module,exports){
'use strict';

// MODULES //

var root = require( 'system.global' )(); // eslint-disable-line stdlib/no-redeclare


// MAIN //

var nodeList = root.document && root.document.childNodes;


// EXPORTS //

module.exports = nodeList;

},{"system.global":2027}],1964:[function(require,module,exports){
'use strict';

var RE = /./;


// EXPORTS //

module.exports = RE;

},{}],1965:[function(require,module,exports){
'use strict';

var typedarray = Int8Array;


// EXPORTS //

module.exports = typedarray;

},{}],1966:[function(require,module,exports){
'use strict';

/**
* Determine a value's type.
*
* @module @stdlib/utils/type-of
*
* @example
* var typeOf = require( '@stdlib/utils/type-of' );
*
* var str = typeOf( 'a' );
* // returns 'string'
*
* str = typeOf( 5 );
* // returns 'number'
*/

// MODULES //

var usePolyfill = require( './check.js' );
var typeOf = require( './typeof.js' );
var polyfill = require( './polyfill.js' );


// EXPORTS //

module.exports = ( usePolyfill() ) ? polyfill : typeOf;

},{"./check.js":1962,"./polyfill.js":1967,"./typeof.js":1968}],1967:[function(require,module,exports){
'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	return ctorName( v ).toLowerCase();
}


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":1935}],1968:[function(require,module,exports){
'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// NOTES //

/*
* Built-in `typeof` operator behavior:
*
* ```text
* typeof null => 'object'
* typeof undefined => 'undefined'
* typeof 'a' => 'string'
* typeof 5 => 'number'
* typeof NaN => 'number'
* typeof true => 'boolean'
* typeof false => 'boolean'
* typeof {} => 'object'
* typeof [] => 'object'
* typeof function foo(){} => 'function'
* typeof function* foo(){} => 'object'
* typeof Symbol() => 'symbol'
* ```
*
*/


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	var type;

	// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):
	if ( v === null ) {
		return 'null';
	}
	type = typeof v;

	// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.
	if ( type === 'object' ) {
		return ctorName( v ).toLowerCase();
	}
	return type;
}


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":1935}],1969:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],1970:[function(require,module,exports){

},{}],1971:[function(require,module,exports){
arguments[4][1970][0].apply(exports,arguments)
},{"dup":1970}],1972:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],1973:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":1969,"ieee754":1994}],1974:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":1996}],1975:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))
},{"./debug":1976,"_process":1972}],1976:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":1999}],1977:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":1978,"./lib/keys.js":1979}],1978:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],1979:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],1980:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":1990,"object-keys":2001}],1981:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],1982:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":1983,"./helpers/isNaN":1984,"./helpers/mod":1985,"./helpers/sign":1986,"es-to-primitive/es5":1987,"has":1993,"is-callable":1997}],1983:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],1984:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],1985:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],1986:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],1987:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":1988,"is-callable":1997}],1988:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],1989:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],1990:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],1991:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],1992:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":1991}],1993:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":1992}],1994:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],1995:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],1996:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],1997:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],1998:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],1999:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],2000:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],2001:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":2002}],2002:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],2003:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":1972}],2004:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":1972}],2005:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":2006}],2006:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":2008,"./_stream_writable":2010,"core-util-is":1974,"inherits":1995,"process-nextick-args":2004}],2007:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":2009,"core-util-is":1974,"inherits":1995}],2008:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":2006,"./internal/streams/BufferList":2011,"./internal/streams/destroy":2012,"./internal/streams/stream":2013,"_process":1972,"core-util-is":1974,"events":1989,"inherits":1995,"isarray":1998,"process-nextick-args":2004,"safe-buffer":2019,"string_decoder/":2025,"util":1970}],2009:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":2006,"core-util-is":1974,"inherits":1995}],2010:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":2006,"./internal/streams/destroy":2012,"./internal/streams/stream":2013,"_process":1972,"core-util-is":1974,"inherits":1995,"process-nextick-args":2004,"safe-buffer":2019,"util-deprecate":2036}],2011:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":2019}],2012:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":2004}],2013:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":1989}],2014:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":2015}],2015:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":2006,"./lib/_stream_passthrough.js":2007,"./lib/_stream_readable.js":2008,"./lib/_stream_transform.js":2009,"./lib/_stream_writable.js":2010}],2016:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":2015}],2017:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":2010}],2018:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":1972,"through":2035}],2019:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":1973}],2020:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":1989,"inherits":1995,"readable-stream/duplex.js":2005,"readable-stream/passthrough.js":2014,"readable-stream/readable.js":2015,"readable-stream/transform.js":2016,"readable-stream/writable.js":2017}],2021:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":1982,"function-bind":1992}],2022:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":2021,"./polyfill":2023,"./shim":2024,"define-properties":1980,"function-bind":1992}],2023:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":2021}],2024:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":2023,"define-properties":1980}],2025:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":2019}],2026:[function(require,module,exports){
(function (global){
/* globals self, window, global */
/* eslint no-negated-condition: 0, no-new-func: 0 */

'use strict';

if (typeof self !== 'undefined') {
	module.exports = self;
} else if (typeof window !== 'undefined') {
	module.exports = window;
} else if (typeof global !== 'undefined') {
	module.exports = global;
} else {
	module.exports = Function('return this')();
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2027:[function(require,module,exports){
'use strict';

var defineProperties = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var polyfill = getPolyfill();

var getGlobal = function () { return polyfill; };

defineProperties(getGlobal, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = getGlobal;

},{"./implementation":2026,"./polyfill":2028,"./shim":2029,"define-properties":1980}],2028:[function(require,module,exports){
(function (global){
'use strict';

var implementation = require('./implementation');

module.exports = function getPolyfill() {
	if (typeof global !== 'object' || !global || global.Math !== Math || global.Array !== Array) {
		return implementation;
	}
	return global;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./implementation":2026}],2029:[function(require,module,exports){
(function (global){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimGlobal() {
	var polyfill = getPolyfill();
	if (define.supportsDescriptors) {
		var descriptor = Object.getOwnPropertyDescriptor(polyfill, 'global');
		if (!descriptor || (descriptor.configurable && (descriptor.enumerable || descriptor.writable || global !== polyfill))) {
			Object.defineProperty(polyfill, 'global', {
				configurable: true,
				enumerable: false,
				value: polyfill,
				writable: false
			});
		}
	} else if (typeof global !== 'object' || global !== polyfill) {
		polyfill.global = polyfill;
	}
	return polyfill;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polyfill":2028,"define-properties":1980}],2030:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":2031,"./lib/results":2033,"./lib/test":2034,"_process":1972,"defined":1981,"through":2035}],2031:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":1972,"fs":1971,"through":2035}],2032:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":1972}],2033:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":1972,"events":1989,"function-bind":1992,"has":1993,"inherits":1995,"object-inspect":2000,"resumer":2018,"through":2035}],2034:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":2032,"deep-equal":1977,"defined":1981,"events":1989,"has":1993,"inherits":1995,"path":2003,"string.prototype.trim":2022}],2035:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":1972,"stream":2020}],2036:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[1863]);
