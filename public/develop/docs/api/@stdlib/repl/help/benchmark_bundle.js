// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
} // end FUNCTION hasOwnProp()


// EXPORTS //

module.exports = hasOwnProp;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var hasOwnProp = require( './has_own_property.js' );


// EXPORTS //

module.exports = hasOwnProp;

},{"./has_own_property.js":1}],3:[function(require,module,exports){
'use strict';

/**
* Test if a value is an array-like object.
*
* @module @stdlib/assert/is-array-like-object
*
* @example
* var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
*
* var bool = isArrayLikeObject( [] );
* // returns true
*
* bool = isArrayLikeObject( { 'length':10 } );
* // returns true
*
* bool = isArrayLikeObject( 'beep' );
* // returns false
*/

// MODULES //

var isArrayLikeObject = require( './is_array_like_object.js' );


// EXPORTS //

module.exports = isArrayLikeObject;

},{"./is_array_like_object.js":4}],4:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var MAX_LENGTH = require( '@stdlib/math/constants/uint32-max' );


// MAIN //

/**
* Tests if a value is an array-like object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is an array-like object
*
* @example
* var bool = isArrayLikeObject( [] );
* // returns true
*
* @example
* var bool = isArrayLikeObject( { 'length':10 } );
* // returns true
*
* @example
* var bool = isArrayLikeObject( 'beep' );
* // returns false
*/
function isArrayLikeObject( value ) {
	return (
		typeof value === 'object' &&
		value !== null &&
		typeof value.length === 'number' &&
		isInteger( value.length ) &&
		value.length >= 0 &&
		value.length <= MAX_LENGTH
	);
} // end FUNCTION isArrayLikeObject()


// EXPORTS //

module.exports = isArrayLikeObject;

},{"@stdlib/math/base/assert/is-integer":125,"@stdlib/math/constants/uint32-max":146}],5:[function(require,module,exports){
'use strict';

/**
* Test if a value is array-like.
*
* @module @stdlib/assert/is-array-like
*
* @example
* var isArrayLike = require( '@stdlib/assert/is-array-like' );
*
* var bool = isArrayLike( [] );
* // returns true
*
* bool = isArrayLike( { 'length': 10 } );
* // returns true
*
* bool = isArrayLike( 'beep' );
* // returns true
*/

// MODULES //

var isArrayLike = require( './is_array_like.js' );


// EXPORTS //

module.exports = isArrayLike;

},{"./is_array_like.js":6}],6:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var MAX_LENGTH = require( '@stdlib/math/constants/uint32-max' );


// MAIN //

/**
* Tests if a value is array-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is array-like
*
* @example
* var bool = isArrayLike( [] );
* // returns true
*
* @example
* var bool = isArrayLike( {'length':10} );
* // returns true
*/
function isArrayLike( value ) {
	return (
		value !== void 0 &&
		value !== null &&
		typeof value !== 'function' &&
		typeof value.length === 'number' &&
		isInteger( value.length ) &&
		value.length >= 0 &&
		value.length <= MAX_LENGTH
	);
} // end FUNCTION isArrayLike()


// EXPORTS //

module.exports = isArrayLike;

},{"@stdlib/math/base/assert/is-integer":125,"@stdlib/math/constants/uint32-max":146}],7:[function(require,module,exports){
'use strict';

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

// MODULES //

var isArray = require( './is_array.js' );


// EXPORTS //

module.exports = isArray;

},{"./is_array.js":8}],8:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/
function isArray( value ) {
	return ( nativeClass( value ) === '[object Array]' );
} // end FUNCTION isArray()


// EXPORTS //

module.exports = Array.isArray || isArray;

},{"@stdlib/utils/native-class":210}],9:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a boolean.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a boolean
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( true ) );
* // returns true
*/
function isBoolean( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isBoolean()


// EXPORTS //

module.exports = isBoolean;

},{"./object.js":11,"./primitive.js":12}],10:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a boolean.
*
* @module @stdlib/assert/is-boolean
*
* @example
* var isBoolean = require( '@stdlib/assert/is-boolean' );
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* // Use interface to check for boolean primitives...
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( true ) );
* // returns false
*
* @example
* // Use interface to check for boolean objects...
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isObject;
*
* var bool = isBoolean( true );
* // returns false
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isBoolean = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isBoolean, 'isPrimitive', isPrimitive );
setReadOnly( isBoolean, 'isObject', isObject );


// EXPORTS //

module.exports = isBoolean;

},{"./generic.js":9,"./object.js":11,"./primitive.js":12,"@stdlib/utils/define-read-only-property":189}],11:[function(require,module,exports){
'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();
var nativeClass = require( '@stdlib/utils/native-class' );
var test = require( './try2serialize.js' );


// MAIN //

/**
* Tests if a value is a boolean object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean object
*
* @example
* var bool = isBoolean( true );
* // returns false
*
* @example
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*/
function isBoolean( value ) {
	if ( typeof value === 'object' ) {
		if ( hasToStringTag ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object Boolean]' );
	}
	return false;
} // end FUNCTION isBoolean()


// EXPORTS //

module.exports = isBoolean;

},{"./try2serialize.js":14,"@stdlib/utils/detect-tostringtag-support":193,"@stdlib/utils/native-class":210}],12:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a boolean primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean primitive
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( true ) );
* // returns false
*/
function isBoolean( value ) {
	return ( typeof value === 'boolean' );
} // end FUNCTION isBoolean()


// EXPORTS //

module.exports = isBoolean;

},{}],13:[function(require,module,exports){
'use strict';

// eslint-disable-next-line no-redeclare
var toString = Boolean.prototype.toString; // non-generic


// EXPORTS //

module.exports = toString;

},{}],14:[function(require,module,exports){
'use strict';

// MODULES //

var toString = require( './tostring.js' ); // eslint-disable-line no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		toString.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
} // end FUNCTION test()


// EXPORTS //

module.exports = test;

},{"./tostring.js":13}],15:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = true;

},{}],16:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a Buffer instance.
*
* @module @stdlib/assert/is-buffer
*
* @example
* var isBuffer = require( '@stdlib/assert/is-buffer' );
*
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* v = isBuffer( {} );
* // returns false
*/

// MODULES //

var isBuffer = require( './is_buffer.js' );


// EXPORTS //

module.exports = isBuffer;

},{"./is_buffer.js":17}],17:[function(require,module,exports){
'use strict';

// MODULES //

var isObjectLike = require( '@stdlib/assert/is-object-like' );


// MAIN //

/**
* Tests if a value is a Buffer instance.
*
* @param {*} value - value to validate
* @returns {boolean} boolean indicating if a value is a Buffer instance
*
* @example
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* @example
* var v = isBuffer( new Buffer( [1,2,3,4] ) );
* // returns true
*
* @example
* var v = isBuffer( {} );
* // returns false
*
* @example
* var v = isBuffer( [] );
* // returns false
*/
function isBuffer( value ) {
	return (
		isObjectLike( value ) &&
		(
			// eslint-disable-next-line no-underscore-dangle
			value._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)
			(
				value.constructor &&
				// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions
				typeof value.constructor.isBuffer === 'function' &&
				value.constructor.isBuffer( value )
			)
		)
	);
} // end FUNCTION isBuffer()


// EXPORTS //

module.exports = isBuffer;

},{"@stdlib/assert/is-object-like":55}],18:[function(require,module,exports){
'use strict';

/**
* Test if a value is an `Error` object.
*
* @module @stdlib/assert/is-error
*
* @example
* var isError = require( '@stdlib/assert/is-error' );
*
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* bool = isError( {} );
* // returns false
*/

// MODULES //

var isError = require( './is_error.js' );


// EXPORTS //

module.exports = isError;

},{"./is_error.js":19}],19:[function(require,module,exports){
'use strict';

// MODULES //

var getPrototypeOf = require( '@stdlib/utils/get-prototype-of' );
var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is an `Error` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `Error` object
*
* @example
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* @example
* var bool = isError( {} );
* // returns false
*/
function isError( value ) {
	if ( typeof value !== 'object' || value === null ) {
		return false;
	}
	// Check for `Error` objects from the same realm (same Node.js `vm` or same `Window` object)...
	if ( value instanceof Error ) {
		return true;
	}
	// Walk the prototype tree until we find an object having the desired native class...
	while ( value ) {
		if ( nativeClass( value ) === '[object Error]' ) {
			return true;
		}
		value = getPrototypeOf( value );
	}
	return false;
} // end FUNCTION isError()


// EXPORTS //

module.exports = isError;

},{"@stdlib/utils/get-prototype-of":198,"@stdlib/utils/native-class":210}],20:[function(require,module,exports){
'use strict';

/**
* Test if a value is a function.
*
* @module @stdlib/assert/is-function
*
* @example
* var isFunction = require( '@stdlib/assert/is-function' );
*
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

// MODULES //

var isFunction = require( './is_function.js' );


// EXPORTS //

module.exports = isFunction;

},{"./is_function.js":21}],21:[function(require,module,exports){
'use strict';

// MODULES //

var typeOf = require( '@stdlib/utils/type-of' );


// MAIN //

/**
* Tests if a value is a function.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a function
*
* @example
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/
function isFunction( value ) {
	// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.
	return ( typeOf( value ) === 'function' );
} // end FUNCTION isFunction()


// EXPORTS //

module.exports = isFunction;

},{"@stdlib/utils/type-of":227}],22:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is an integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an integer
*
* @example
* var bool = isInteger( 5.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isInteger( -3.14 );
* // returns false
*
* @example
* var bool = isInteger( null );
* // returns false
*/
function isInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"./object.js":25,"./primitive.js":26}],23:[function(require,module,exports){
'use strict';

/**
* Test if a value is an integer.
*
* @module @stdlib/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/assert/is-integer' );
*
* var bool = isInteger( 5.0 );
* // returns true
*
* bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isInteger( -3.14 );
* // returns false
*
* bool = isInteger( null );
* // returns false
*
* @example
* // Use interface to check for integer primitives...
* var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
*
* var bool = isInteger( -3.0 );
* // returns true
*
* bool = isInteger( new Number( -3.0 ) );
* // returns false
*
* @example
* // Use interface to check for integer objects...
* var isInteger = require( '@stdlib/assert/is-integer' ).isObject;
*
* var bool = isInteger( 3.0 );
* // returns false
*
* bool = isInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isInteger, 'isPrimitive', isPrimitive );
setReadOnly( isInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isInteger;

},{"./generic.js":22,"./object.js":25,"./primitive.js":26,"@stdlib/utils/define-read-only-property":189}],24:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var isInt = require( '@stdlib/math/base/assert/is-integer' );


// MAIN //

/**
* Tests if a number primitive is an integer value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a number primitive is an integer value
*/
function isInteger( value ) {
	return (
		value < PINF &&
		value > NINF &&
		isInt( value )
	);
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"@stdlib/math/base/assert/is-integer":125,"@stdlib/math/constants/float64-ninf":144,"@stdlib/math/constants/float64-pinf":145}],25:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;
var isInt = require( './integer.js' );


// MAIN //

/**
* Tests if a value is a number object having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having an integer value
*
* @example
* var bool = isInteger( 3.0 );
* // returns false
*
* @example
* var bool = isInteger( new Number( 3.0 ) );
* // returns true
*/
function isInteger( value ) {
	return (
		isNumber( value ) &&
		isInt( value.valueOf() )
	);
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"./integer.js":24,"@stdlib/assert/is-number":50}],26:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isInt = require( './integer.js' );


// MAIN //

/**
* Tests if a value is a number primitive having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having an integer value
*
* @example
* var bool = isInteger( -3.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( -3.0 ) );
* // returns false
*/
function isInteger( value ) {
	return (
		isNumber( value ) &&
		isInt( value )
	);
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"./integer.js":24,"@stdlib/assert/is-number":50}],27:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],28:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":29}],29:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":27}],30:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( null );
* // returns false
*/
function isnan( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{"./object.js":32,"./primitive.js":33}],31:[function(require,module,exports){
'use strict';

/**
* Test if a value is `NaN`.
*
* @module @stdlib/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( new Number( NaN ) );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( null );
* // returns false
*
* @example
* // Use interface to check for `NaN` primitives...
* var isnan = require( '@stdlib/assert/is-nan' ).isPrimitive;
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns false
*
* @example
* // Use interface to check for `NaN` objects...
* var isnan = require( '@stdlib/assert/is-nan' ).isObject;
*
* var bool = isnan( NaN );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isnan = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isnan, 'isPrimitive', isPrimitive );
setReadOnly( isnan, 'isObject', isObject );


// EXPORTS //

module.exports = isnan;

},{"./generic.js":30,"./object.js":32,"./primitive.js":33,"@stdlib/utils/define-read-only-property":189}],32:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;
var isNan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Tests if a value is a number object having a value of `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*/
function isnan( value ) {
	return (
		isNumber( value ) &&
		isNan( value.valueOf() )
	);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{"@stdlib/assert/is-number":50,"@stdlib/math/base/assert/is-nan":127}],33:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isNan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Tests if a value is a `NaN` number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `NaN` number primitive
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns false
*/
function isnan( value ) {
	return (
		isNumber( value ) &&
		isNan( value )
	);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{"@stdlib/assert/is-number":50,"@stdlib/math/base/assert/is-nan":127}],34:[function(require,module,exports){
'use strict';

/**
* Test if a value is Node stream-like.
*
* @module @stdlib/assert/is-node-stream-like
*
* @example
* var transformStream = require( '@stdlib/streams/utils/transform' );
* var isNodeStreamLike = require( '@stdlib/assert/is-node-stream-like' );
*
* var stream = transformStream();
*
* var bool = isNodeStreamLike( stream );
* // returns true
*
* bool = isNodeStreamLike( {} );
* // returns false
*/

// MODULES //

var isNodeStreamLike = require( './is_stream_like.js' );


// EXPORTS //

module.exports = isNodeStreamLike;

},{"./is_stream_like.js":35}],35:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a value is Node stream-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is Node stream-like
*
* @example
* var transformStream = require( '@stdlib/streams/utils/transform' );
*
* var stream = transformStream();
*
* var bool = isNodeStreamLike( stream );
* // returns true
*
* bool = isNodeStreamLike( {} );
* // returns false
*/
function isNodeStreamLike( value ) {
	return (
		// Must be an object:
		value !== null &&
		typeof value === 'object' &&

		// Should be an event emitter:
		typeof value.on === 'function' &&
		typeof value.once === 'function' &&
		typeof value.emit === 'function' &&
		typeof value.addListener === 'function' &&
		typeof value.removeListener === 'function' &&
		typeof value.removeAllListeners === 'function' &&

		// Should have a `pipe` method (Node streams inherit from `Stream`, including writable streams):
		typeof value.pipe === 'function'
	);
} // end FUNCTION isNodeStreamLike()


// EXPORTS //

module.exports = isNodeStreamLike;

},{}],36:[function(require,module,exports){
'use strict';

/**
* Test if a value is Node writable stream-like.
*
* @module @stdlib/assert/is-node-writable-stream-like
*
* @example
* var transformStream = require( '@stdlib/streams/utils/transform' );
* var isNodeWritableStreamLike = require( '@stdlib/assert/is-node-writable-stream-like' );
*
* var stream = transformStream();
*
* var bool = isNodeWritableStreamLike( stream );
* // returns true
*
* bool = isNodeWritableStreamLike( {} );
* // returns false
*/

// MODULES //

var isNodeWritableStreamLike = require( './is_writable_stream_like.js' );


// EXPORTS //

module.exports = isNodeWritableStreamLike;

},{"./is_writable_stream_like.js":37}],37:[function(require,module,exports){
/* eslint-disable no-underscore-dangle */
'use strict';

// MODULES //

var isNodeStreamLike = require( '@stdlib/assert/is-node-stream-like' );


// MAIN //

/**
* Tests if a value is Node writable stream-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is Node writable stream-like
*
* @example
* var transformStream = require( '@stdlib/streams/utils/transform' );
*
* var stream = transformStream();
*
* var bool = isNodeWritableStreamLike( stream );
* // returns true
*
* bool = isNodeWritableStreamLike( {} );
* // returns false
*/
function isNodeWritableStreamLike( value ) {
	return (
		// Must be stream-like:
		isNodeStreamLike( value ) &&

		// Should have writable stream methods:
		typeof value._write === 'function' &&

		// Should have writable stream state:
		typeof value._writableState === 'object'
	);
} // end FUNCTION isNodeWritableStreamLike()


// EXPORTS //

module.exports = isNodeWritableStreamLike;

},{"@stdlib/assert/is-node-stream-like":34}],38:[function(require,module,exports){
'use strict';

/**
* Test if a value is an array-like object containing only nonnegative integers.
*
* @module @stdlib/assert/is-nonnegative-integer-array
*
* @example
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' );
*
* var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] );
* // returns false
*
* @example
* // Use interface to check for primitives...
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;
*
* var bool = isNonNegativeIntegerArray( [ 1.0, 0.0, 10.0 ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 3.0, new Number(1.0) ] );
* // returns false
*
* @example
* // Use interface to check for objects...
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).objects;
*
* var bool = isNonNegativeIntegerArray( [ new Number(3.0), new Number(1.0) ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 1.0, 0.0, 10.0 ] );
* // returns false
*/

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-like-function' );


// MAIN //

var isNonNegativeIntegerArray = arrayfun( isNonNegativeInteger );
setReadOnly( isNonNegativeIntegerArray, 'primitives', arrayfun( isNonNegativeInteger.isPrimitive ) );
setReadOnly( isNonNegativeIntegerArray, 'objects', arrayfun( isNonNegativeInteger.isObject ) );


// EXPORTS //

module.exports = isNonNegativeIntegerArray;

},{"@stdlib/assert/is-nonnegative-integer":40,"@stdlib/assert/tools/array-like-function":79,"@stdlib/utils/define-read-only-property":189}],39:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a nonnegative integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( null );
* // returns false
*/
function isNonNegativeInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isNonNegativeInteger()


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"./object.js":41,"./primitive.js":42}],40:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a nonnegative integer.
*
* @module @stdlib/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* bool = isNonNegativeInteger( null );
* // returns false
*
* @example
* // Use interface to check for nonnegative integer primitives...
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for nonnegative integer objects...
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isObject;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNonNegativeInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isNonNegativeInteger, 'isPrimitive', isPrimitive );
setReadOnly( isNonNegativeInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"./generic.js":39,"./object.js":41,"./primitive.js":42,"@stdlib/utils/define-read-only-property":189}],41:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/
function isNonNegativeInteger( value ) {
	return (
		isInteger( value ) &&
		value.valueOf() >= 0
	);
} // end FUNCTION isNonNegativeInteger()


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"@stdlib/assert/is-integer":23}],42:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*/
function isNonNegativeInteger( value ) {
	return (
		isInteger( value ) &&
		value >= 0
	);
} // end FUNCTION isNonNegativeInteger()


// EXPORTS //

module.exports = isNonNegativeInteger;

},{"@stdlib/assert/is-integer":23}],43:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a nonnegative number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative number
*
* @example
* var bool = isNonNegativeNumber( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeNumber( null );
* // returns false
*/
function isNonNegativeNumber( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isNonNegativeNumber()


// EXPORTS //

module.exports = isNonNegativeNumber;

},{"./object.js":45,"./primitive.js":46}],44:[function(require,module,exports){
'use strict';

/**
* Test if a value is a nonnegative number.
*
* @module @stdlib/assert/is-nonnegative-number
*
* @example
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' );
*
* var bool = isNonNegativeNumber( 5.0 );
* // returns true
*
* bool = isNonNegativeNumber( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeNumber( 3.14 );
* // returns true
*
* bool = isNonNegativeNumber( -5.0 );
* // returns false
*
* bool = isNonNegativeNumber( null );
* // returns false
*
* @example
* // Use interface to check for nonnegative number primitives...
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;
*
* var bool = isNonNegativeNumber( 3.0 );
* // returns true
*
* bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for nonnegative number objects...
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isObject;
*
* var bool = isNonNegativeNumber( 3.0 );
* // returns false
*
* bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNonNegativeNumber = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isNonNegativeNumber, 'isPrimitive', isPrimitive );
setReadOnly( isNonNegativeNumber, 'isObject', isObject );


// EXPORTS //

module.exports = isNonNegativeNumber;

},{"./generic.js":43,"./object.js":45,"./primitive.js":46,"@stdlib/utils/define-read-only-property":189}],45:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a nonnegative value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative number value
*
* @example
* var bool = isNonNegativeNumber( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns true
*/
function isNonNegativeNumber( value ) {
	return (
		isNumber( value ) &&
		value.valueOf() >= 0.0
	);
} // end FUNCTION isNonNegativeNumber()


// EXPORTS //

module.exports = isNonNegativeNumber;

},{"@stdlib/assert/is-number":50}],46:[function(require,module,exports){
'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a nonnegative value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative number value
*
* @example
* var bool = isNonNegativeNumber( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns false
*/
function isNonNegativeNumber( value ) {
	return (
		isNumber( value ) &&
		value >= 0.0
	);
} // end FUNCTION isNonNegativeNumber()


// EXPORTS //

module.exports = isNonNegativeNumber;

},{"@stdlib/assert/is-number":50}],47:[function(require,module,exports){
'use strict';

/**
* Test if a value is `null`.
*
* @module @stdlib/assert/is-null
*
* @example
* var isNull = require( '@stdlib/assert/is-null' );
*
* var value = null;
*
* var bool = isNull( value );
* // returns true
*/

// MODULES //

var isNull = require( './is_null.js' );


// EXPORTS //

module.exports = isNull;

},{"./is_null.js":48}],48:[function(require,module,exports){
'use strict';

/**
* Tests if a value is `null`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is null
*
* @example
* var bool = isNull( null );
* // returns true
*
* bool = isNull( true );
* // returns false
*/
function isNull( value ) {
	return value === null;
} // end FUNCTION isNull()


// EXPORTS //

module.exports = isNull;

},{}],49:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a number
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* @example
* bool = isNumber( NaN );
* // returns true
*
* @example
* bool = isNumber( null );
* // returns false
*/
function isNumber( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isNumber()


// EXPORTS //

module.exports = isNumber;

},{"./object.js":51,"./primitive.js":52}],50:[function(require,module,exports){
'use strict';

/**
* Test if a value is a number.
*
* @module @stdlib/assert/is-number
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' );
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( null );
* // returns false
*
* @example
* // Use interface to check for number primitives...
* var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns false
*
* @example
* // Use interface to check for number objects...
* var isNumber = require( '@stdlib/assert/is-number' ).isObject;
*
* var bool = isNumber( 3.14 );
* // returns false
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isNumber = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isNumber, 'isPrimitive', isPrimitive );
setReadOnly( isNumber, 'isObject', isObject );


// EXPORTS //

module.exports = isNumber;

},{"./generic.js":49,"./object.js":51,"./primitive.js":52,"@stdlib/utils/define-read-only-property":189}],51:[function(require,module,exports){
'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();
var nativeClass = require( '@stdlib/utils/native-class' );
var test = require( './try2serialize.js' );


// MAIN //

/**
* Tests if a value is a number object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object
*
* @example
* var bool = isNumber( 3.14 );
* // returns false
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*/
function isNumber( value ) {
	if ( typeof value === 'object' ) {
		if ( hasToStringTag ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object Number]' );
	}
	return false;
} // end FUNCTION isNumber()


// EXPORTS //

module.exports = isNumber;

},{"./try2serialize.js":54,"@stdlib/utils/detect-tostringtag-support":193,"@stdlib/utils/native-class":210}],52:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns false
*/
function isNumber( value ) {
	return ( typeof value === 'number' );
} // end FUNCTION isNumber()


// EXPORTS //

module.exports = isNumber;

},{}],53:[function(require,module,exports){
'use strict';

// eslint-disable-next-line no-redeclare
var toString = Number.prototype.toString; // non-generic


// EXPORTS //

module.exports = toString;

},{}],54:[function(require,module,exports){
'use strict';

// MODULES //

var toString = require( './tostring.js' ); // eslint-disable-line no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		toString.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
} // end FUNCTION test()


// EXPORTS //

module.exports = test;

},{"./tostring.js":53}],55:[function(require,module,exports){
'use strict';

/**
* Test if a value is object-like.
*
* @module @stdlib/assert/is-object-like
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' );
*
* var bool = isObjectLike( {} );
* // returns true
*
* bool = isObjectLike( [] );
* // returns true
*
* bool = isObjectLike( null );
* // returns false
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' ).isObjectLikeArray;
*
* var bool = isObjectLike( [ {}, [] ] );
* // returns true
*
* bool = isObjectLike( [ {}, '3.0' ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-function' );
var isObjectLike = require( './is_object_like.js' );


// MAIN //

setReadOnly( isObjectLike, 'isObjectLikeArray', arrayfun( isObjectLike ) );


// EXPORTS //

module.exports = isObjectLike;

},{"./is_object_like.js":56,"@stdlib/assert/tools/array-function":77,"@stdlib/utils/define-read-only-property":189}],56:[function(require,module,exports){
'use strict';

/**
* Tests if a value is object-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is object-like
*
* @example
* var bool = isObjectLike( {} );
* // returns true
*
* @example
* var bool = isObjectLike( [] );
* // returns true
*
* @example
* var bool = isObjectLike( null );
* // returns false
*/
function isObjectLike( value ) {
	return (
		value !== null &&
		typeof value === 'object'
	);
} // end FUNCTION isObjectLike()


// EXPORTS //

module.exports = isObjectLike;

},{}],57:[function(require,module,exports){
'use strict';

/**
* Test if a value is an object.
*
* @module @stdlib/assert/is-object
*
* @example
* var isObject = require( '@stdlib/assert/is-object' );
*
* var bool = isObject( {} );
* // returns true
*
* bool = isObject( true );
* // returns false
*/

// MODULES //

var isObject = require( './is_object.js' );


// EXPORTS //

module.exports = isObject;

},{"./is_object.js":58}],58:[function(require,module,exports){
'use strict';

// MODULES //

var isArray = require( '@stdlib/assert/is-array' );


// MAIN //

/**
* Tests if a value is an object; e.g., {}.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an object
*
* @example
* var bool = isObject( {} );
* // returns true
*
* @example
* var bool = isObject( null );
* // returns false
*/
function isObject( value ) {
	return (
		typeof value === 'object' &&
		value !== null &&
		!isArray( value )
	);
} // end FUNCTION isObject()


// EXPORTS //

module.exports = isObject;

},{"@stdlib/assert/is-array":7}],59:[function(require,module,exports){
'use strict';

/**
* Test if a value is a plain object.
*
* @module @stdlib/assert/is-plain-object
*
* @example
* var isPlainObject = require( '@stdlib/assert/is-plain-object' );
*
* var bool = isPlainObject( {} );
* // returns true
*
* bool = isPlainObject( null );
* // returns false
*/

// MODULES //

var isPlainObject = require( './is_plain_object.js' );


// EXPORTS //

module.exports = isPlainObject;

},{"./is_plain_object.js":60}],60:[function(require,module,exports){
'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-object' );
var isFunction = require( '@stdlib/assert/is-function' );
var getPrototypeOf = require( '@stdlib/utils/get-prototype-of' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var objectPrototype = Object.prototype;


// FUNCTIONS //

/**
* Tests that an object only has own properties.
*
* @private
* @param {Object} obj - value to test
* @returns {boolean} boolean indicating if an object only has own properties
*/
function ownProps( obj ) {
	var key;

	// NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).
	for ( key in obj ) {
		if ( !hasOwnProp( obj, key ) ) {
			return false;
		}
	}
	return true;
} // end FUNCTION ownProps()


// MAIN //

/**
* Tests if a value is a plain object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a plain object
*
* @example
* var bool = isPlainObject( {} );
* // returns true
*
* @example
* var bool = isPlainObject( null );
* // returns false
*/
function isPlainObject( value ) {
	var proto;

	// Screen for obvious non-objects...
	if ( !isObject( value ) ) {
		return false;
	}
	// Objects with no prototype (e.g., `Object.create( null )`) are plain...
	proto = getPrototypeOf( value );
	if ( !proto ) {
		return true;
	}
	// Objects having a prototype are plain if and only if they are constructed with a global `Object` function and the prototype points to the prototype of a plain object...
	return (
		// Cannot have own `constructor` property:
		!hasOwnProp( value, 'constructor' ) &&

		// Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):
		hasOwnProp( proto, 'constructor' ) &&
		isFunction( proto.constructor ) &&
		nativeClass( proto.constructor ) === '[object Function]' &&

		// Test for object-specific method:
		hasOwnProp( proto, 'isPrototypeOf' ) &&
		isFunction( proto.isPrototypeOf ) &&

		(
			// Test if the prototype matches the global `Object` prototype (same realm):
			proto === objectPrototype ||

			// Test that all properties are own properties (cross-realm; *most* likely a plain object):
			ownProps( value )
		)
	);
} // end FUNCTION isPlainObject()


// EXPORTS //

module.exports = isPlainObject;

},{"@stdlib/assert/has-own-property":2,"@stdlib/assert/is-function":20,"@stdlib/assert/is-object":57,"@stdlib/utils/get-prototype-of":198,"@stdlib/utils/native-class":210}],61:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a positive integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive integer
*
* @example
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( 3.14 );
* // returns false
*
* @example
* var bool = isPositiveInteger( null );
* // returns false
*/
function isPositiveInteger( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isPositiveInteger()


// EXPORTS //

module.exports = isPositiveInteger;

},{"./object.js":63,"./primitive.js":64}],62:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a positive integer.
*
* @module @stdlib/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveInteger( -5.0 );
* // returns false
*
* bool = isPositiveInteger( 3.14 );
* // returns false
*
* bool = isPositiveInteger( null );
* // returns false
*
* @example
* // Use interface to check for positive integer primitives...
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
*
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* // Use interface to check for positive integer objects...
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isObject;
*
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isPositiveInteger = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isPositiveInteger, 'isPrimitive', isPrimitive );
setReadOnly( isPositiveInteger, 'isObject', isObject );


// EXPORTS //

module.exports = isPositiveInteger;

},{"./generic.js":61,"./object.js":63,"./primitive.js":64,"@stdlib/utils/define-read-only-property":189}],63:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/
function isPositiveInteger( value ) {
	return (
		isInteger( value ) &&
		value.valueOf() > 0.0
	);
} // end FUNCTION isPositiveInteger()


// EXPORTS //

module.exports = isPositiveInteger;

},{"@stdlib/assert/is-integer":23}],64:[function(require,module,exports){
'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*/
function isPositiveInteger( value ) {
	return (
		isInteger( value ) &&
		value > 0.0
	);
} // end FUNCTION isPositiveInteger()


// EXPORTS //

module.exports = isPositiveInteger;

},{"@stdlib/assert/is-integer":23}],65:[function(require,module,exports){
'use strict';

var exec = RegExp.prototype.exec; // non-generic


// EXPORTS //

module.exports = exec;

},{}],66:[function(require,module,exports){
'use strict';

/**
* Test if a value is a regular expression.
*
* @module @stdlib/assert/is-regexp
*
* @example
* var isRegExp = require( '@stdlib/assert/is-regexp' );
*
* var bool = isRegExp( /\.+/ );
* // returns true
*
* bool = isRegExp( {} );
* // returns false
*/

// MODULES //

var isRegExp = require( './is_regexp.js' );


// EXPORTS //

module.exports = isRegExp;

},{"./is_regexp.js":67}],67:[function(require,module,exports){
'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();
var nativeClass = require( '@stdlib/utils/native-class' );
var test = require( './try2exec.js' );


// MAIN //

/**
* Tests if a value is a regular expression.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a regular expression
*
* @example
* var bool = isRegExp( /\.+/ );
* // returns true
*
* @example
* var bool = isRegExp( {} );
* // returns false
*/
function isRegExp( value ) {
	if ( typeof value === 'object' ) {
		if ( hasToStringTag ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object RegExp]' );
	}
	return false;
} // end FUNCTION isRegExp()


// EXPORTS //

module.exports = isRegExp;

},{"./try2exec.js":68,"@stdlib/utils/detect-tostringtag-support":193,"@stdlib/utils/native-class":210}],68:[function(require,module,exports){
'use strict';

// MODULES //

var exec = require( './exec.js' );


// MAIN //

/**
* Attempts to call a `RegExp` method.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if able to call a `RegExp` method
*/
function test( value ) {
	try {
		exec.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
} // end FUNCTION test()


// EXPORTS //

module.exports = test;

},{"./exec.js":65}],69:[function(require,module,exports){
'use strict';

/**
* Test if a value is an array of strings.
*
* @module @stdlib/assert/is-string-array
*
* @example
* var isStringArray = require( '@stdlib/assert/is-string-array' );
*
* var bool = isStringArray( [ 'abc', 'def' ] );
* // returns true
*
* bool = isStringArray( [ 'abc', 123 ] );
* // returns false
*
* @example
* // Use interface to check for primitives...
* var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
*
* var bool = isStringArray( [ 'abc', 'def' ] );
* // returns true
*
* bool = isStringArray( [ 'abc', new String( 'def' ) ] );
* // returns false
*
* @example
* // Use interface to check for objects...
* var isStringArray = require( '@stdlib/assert/is-string-array' ).objects;
*
* var bool = isStringArray( [ new String( 'abc' ), new String( 'def' ) ] );
* // returns true
*
* bool = isStringArray( [ new String( 'abc' ), 'def' ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-function' );
var isString = require( '@stdlib/assert/is-string' );


// MAIN //

var isStringArray = arrayfun( isString );
setReadOnly( isStringArray, 'primitives', arrayfun( isString.isPrimitive ) );
setReadOnly( isStringArray, 'objects', arrayfun( isString.isObject ) );


// EXPORTS //

module.exports = isStringArray;

},{"@stdlib/assert/is-string":71,"@stdlib/assert/tools/array-function":77,"@stdlib/utils/define-read-only-property":189}],70:[function(require,module,exports){
'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a string.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a string
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* @example
* var bool = isString( 'beep' );
* // returns true
*/
function isString( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
} // end FUNCTION isString()


// EXPORTS //

module.exports = isString;

},{"./object.js":72,"./primitive.js":73}],71:[function(require,module,exports){
'use strict';

/**
* Test if a value is a string.
*
* @module @stdlib/assert/is-string
*
* @example
* var isString = require( '@stdlib/assert/is-string' );
*
* var bool = isString( 'beep' );
* // returns true
*
* bool = isString( new String( 'beep' ) );
* // returns true
*
* bool = isString( 5 );
* // returns false
*
* @example
* var isString = require( '@stdlib/assert/is-string' ).isObject;
*
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* bool = isString( 'beep' );
* // returns false
*
* @example
* var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
*
* var bool = isString( 'beep' );
* // returns true
*
* bool = isString( new String( 'beep' ) );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isString = require( './generic.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isString, 'isPrimitive', isPrimitive );
setReadOnly( isString, 'isObject', isObject );


// EXPORTS //

module.exports = isString;

},{"./generic.js":70,"./object.js":72,"./primitive.js":73,"@stdlib/utils/define-read-only-property":189}],72:[function(require,module,exports){
'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();
var nativeClass = require( '@stdlib/utils/native-class' );
var test = require( './try2valueof.js' );


// MAIN //

/**
* Tests if a value is a string object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a string object
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* @example
* var bool = isString( 'beep' );
* // returns false
*/
function isString( value ) {
	if ( typeof value === 'object' ) {
		if ( hasToStringTag ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object String]' );
	}
	return false;
} // end FUNCTION isString()


// EXPORTS //

module.exports = isString;

},{"./try2valueof.js":74,"@stdlib/utils/detect-tostringtag-support":193,"@stdlib/utils/native-class":210}],73:[function(require,module,exports){
'use strict';

/**
* Tests if a value is a string primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a string primitive
*
* @example
* var bool = isString( 'beep' );
* // returns true
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns false
*/
function isString( value ) {
	return ( typeof value === 'string' );
} // end FUNCTION isString()


// EXPORTS //

module.exports = isString;

},{}],74:[function(require,module,exports){
'use strict';

// MODULES //

var valueOf = require( './valueof.js' ); // eslint-disable-line no-redeclare


// MAIN //

/**
* Attempts to extract a string value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a string can be extracted
*/
function test( value ) {
	try {
		valueOf.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
} // end FUNCTION test()


// EXPORTS //

module.exports = test;

},{"./valueof.js":75}],75:[function(require,module,exports){
'use strict';

// eslint-disable-next-line no-redeclare
var valueOf = String.prototype.valueOf; // non-generic


// EXPORTS //

module.exports = valueOf;

},{}],76:[function(require,module,exports){
'use strict';

// MODULES //

var isArray = require( '@stdlib/assert/is-array' );


// MAIN //

/**
* Returns a function which tests if every element in an array passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/
function arrayfcn( predicate ) {
	if ( typeof predicate !== 'function' ) {
		throw new TypeError( 'invalid input argument. Must provide a function. Value: `' + predicate + '`.' );
	}
	return every;
	/**
	* Tests if every element in an array passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition
	*/
	function every( value ) {
		var len;
		var i;
		if ( !isArray( value ) ) {
			return false;
		}
		len = value.length;
		if ( len === 0 ) {
			return false;
		}
		for ( i = 0; i < len; i++ ) {
			if ( predicate( value[ i ] ) === false ) {
				return false;
			}
		}
		return true;
	} // end FUNCTION every()
} // end FUNCTION arrayfcn()


// EXPORTS //

module.exports = arrayfcn;

},{"@stdlib/assert/is-array":7}],77:[function(require,module,exports){
'use strict';

/**
* Return a function which tests if every element in an array passes a test condition.
*
* @module @stdlib/assert/tools/array-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arrayfcn = require( '@stdlib/assert/tools/array-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

// MODULES //

var arrayfcn = require( './arrayfcn.js' );


// EXPORTS //

module.exports = arrayfcn;

},{"./arrayfcn.js":76}],78:[function(require,module,exports){
'use strict';

// MODULES //

var isArrayLike = require( '@stdlib/assert/is-array-like' );


// MAIN //

/**
* Returns a function which tests if every element in an array-like object passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array-like object function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arraylikefcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/
function arraylikefcn( predicate ) {
	if ( typeof predicate !== 'function' ) {
		throw new TypeError( 'invalid input argument. Must provide a function. Value: `' + predicate + '`.' );
	}
	return every;
	/**
	* Tests if every element in an array-like object passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array-like object for which all elements pass a test condition
	*/
	function every( value ) {
		var len;
		var i;
		if ( !isArrayLike( value ) ) {
			return false;
		}
		len = value.length;
		if ( len === 0 ) {
			return false;
		}
		for ( i = 0; i < len; i++ ) {
			if ( predicate( value[ i ] ) === false ) {
				return false;
			}
		}
		return true;
	} // end FUNCTION every()
} // end FUNCTION arraylikefcn()


// EXPORTS //

module.exports = arraylikefcn;

},{"@stdlib/assert/is-array-like":5}],79:[function(require,module,exports){
'use strict';

/**
* Return a function which tests if every element in an array-like object passes a test condition.
*
* @module @stdlib/assert/tools/array-like-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arraylikefcn = require( '@stdlib/assert/tools/array-like-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arraylikefcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

// MODULES //

var arraylikefcn = require( './arraylikefcn.js' );


// EXPORTS //

module.exports = arraylikefcn;

},{"./arraylikefcn.js":78}],80:[function(require,module,exports){
'use strict';

// MODULES //

var TransformStream = require( '@stdlib/streams/utils/transform' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var createHarness = require( './harness' );
var harness = require( './get_harness.js' );


// VARIABLES //

var listeners = [];


// FUNCTIONS //

/**
* Callback invoked when a harness finishes running all benchmarks.
*
* @private
*/
function done() {
	var len;
	var f;
	var i;

	len = listeners.length;

	// Inform all the listeners that the harness has finished...
	for ( i = 0; i < len; i++ ) {
		f = listeners.shift();
		f();
	}
} // end FUNCTION done()

/**
* Creates a results stream.
*
* @memberof bench
* @param {Options} [options] - stream options
* @throws {Error} must provide valid stream options
* @returns {TransformStream} results stream
*/
function createStream( options ) {
	var stream;
	var bench;
	var opts;
	if ( arguments.length ) {
		opts = options;
	} else {
		opts = {};
	}
	// If we have already created a harness, calling this function simply creates another results stream...
	if ( harness.cached ) {
		bench = harness();
		return bench.createStream( opts );
	}
	stream = new TransformStream( opts );
	opts.stream = stream;

	// Create a harness which uses the created output stream:
	harness( opts, done );

	return stream;
} // end FUNCTION createStream()

/**
* Adds a listener for when a harness finishes running all benchmarks.
*
* @memberof bench
* @param {Callback} clbk - listener
* @throws {TypeError} must provide a function
* @throws {Error} must provide a listener only once
* @returns {void}
*/
function onFinish( clbk ) {
	var i;
	if ( !isFunction( clbk ) ) {
		throw new TypeError( 'invalid input argument. Must provide a function. Value: `'+clbk+'`.' );
	}
	// Allow adding a listener only once...
	for ( i = 0; i < listeners.length; i++ ) {
		if ( clbk === listeners[ i ] ) {
			throw new Error( 'invalid input argument. Attempted to add duplicate listener.' );
		}
	}
	listeners.push( clbk );
} // end FUNCTION onFinish()


// MAIN //

/**
* Runs a benchmark.
*
* @param {string} name - benchmark name
* @param {Options} [options] - benchmark options
* @param {boolean} [options.skip=false] - boolean indicating whether to skip a benchmark
* @param {(PositiveInteger|null)} [options.iterations=null] - number of iterations
* @param {PositiveInteger} [options.repeats=3] - number of repeats
* @param {PositiveInteger} [options.timeout=300000] - number of milliseconds before a benchmark automatically fails
* @param {Function} [benchmark] - function containing benchmark code
* @throws {TypeError} first argument must be a string
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} benchmark argument must a function
* @returns {Benchmark} benchmark harness
*
* @example
* bench( 'beep', function benchmark( b ) {
*     var x;
*     var i;
*     b.tic();
*     for ( i = 0; i < b.iterations; i++ ) {
*         x = Math.sin( Math.random() );
*         if ( x !== x ) {
*             b.ok( false, 'should not return NaN' );
*         }
*     }
*     b.toc();
*     if ( x !== x ) {
*         b.ok( false, 'should not return NaN' );
*     }
*     b.end();
* });
*/
function bench( name, options, benchmark ) {
	var h = harness( done );
	if ( arguments.length < 2 ) {
		h( name );
	} else if ( arguments.length === 2 ) {
		h( name, options );
	} else {
		h( name, options, benchmark );
	}
	return bench;
} // end FUNCTION bench()


// EXPORTS //

module.exports = bench;

setReadOnly( bench, 'createHarness', createHarness );
setReadOnly( bench, 'createStream', createStream );
setReadOnly( bench, 'onFinish', onFinish );

},{"./get_harness.js":102,"./harness":103,"@stdlib/assert/is-function":20,"@stdlib/streams/utils/transform":160,"@stdlib/utils/define-read-only-property":189}],81:[function(require,module,exports){
'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );


// MAIN //

/**
* Generates an assertion.
*
* @private
* @param {boolean} ok - assertion outcome
* @param {Options} opts - options
*/
function assert( ok, opts ) {
	/* eslint-disable no-invalid-this */
	var result;
	var err;

	result = {
		'id': this._count,
		'ok': ok,
		'skip': opts.skip,
		'todo': opts.todo,
		'name': opts.message || '(unnamed assert)',
		'operator': opts.operator
	};
	if ( hasOwnProp( opts, 'actual' ) ) {
		result.actual = opts.actual;
	}
	if ( hasOwnProp( opts, 'expected' ) ) {
		result.expected = opts.expected;
	}
	if ( !ok ) {
		result.error = opts.error || new Error( this.name );
		err = new Error( 'exception' );

		// TODO: generate an exception in order to locate the calling function (https://github.com/substack/tape/blob/master/lib/test.js#L215)
	}
	this._count += 1;
	this.emit( 'result', result );
} // end FUNCTION assert()


// EXPORTS //

module.exports = assert;

},{"@stdlib/assert/has-own-property":2}],82:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = clearTimeout;

},{}],83:[function(require,module,exports){
'use strict';

// MODULES //

var trim = require( '@stdlib/string/trim' );
var replace = require( '@stdlib/string/replace' );
var EOL = require( '@stdlib/regexp/eol' );


// VARIABLES //

var RE_COMMENT = /^#\s*/;


// MAIN //

/**
* Writes a comment.
*
* @private
* @param {string} msg - comment message
*/
function comment( msg ) {
	/* eslint-disable no-invalid-this */
	var lines;
	var i;
	msg = trim( msg );
	lines = msg.split( EOL );
	for ( i = 0; i < lines.length; i++ ) {
		msg = trim( lines[ i ] );
		msg = replace( msg, RE_COMMENT, '' );
		this.emit( 'result', msg );
	}
} // end FUNCTION comment()


// EXPORTS //

module.exports = comment;

},{"@stdlib/regexp/eol":147,"@stdlib/string/replace":170,"@stdlib/string/trim":174}],84:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Asserts that `actual` is deeply equal to `expected`.
*
* @private
* @param {*} actual - actual value
* @param {*} expected - expected value
* @param {string} [msg] message
*/
function deepEqual( actual, expected, msg ) {
	/* eslint-disable no-invalid-this */
	this.comment( 'actual: '+actual+'. expected: '+expected+'. msg: '+msg+'.' );
	// TODO: implement
} // end FUNCTION deepEqual()


// EXPORTS //

module.exports = deepEqual;

},{}],85:[function(require,module,exports){
'use strict';

// MODULES //

var nextTick = require( './../utils/next_tick.js' );


// MAIN //

/**
* Ends a benchmark.
*
* @private
*/
function end() {
	/* eslint-disable no-invalid-this */
	var self = this;
	if ( this._ended ) {
		this.fail( '.end() called more than once' );
	} else {
		// Prevents releasing the zalgo when running synchronous benchmarks.
		nextTick( onTick );
	}
	this._ended = true;
	this._running = false;

	/**
	* Callback invoked upon a subsequent tick of the event loop.
	*
	* @private
	*/
	function onTick() {
		self.emit( 'end' );
	} // end FUNCTION onTick()
} // end FUNCTION end()


// EXPORTS //

module.exports = end;

},{"./../utils/next_tick.js":122}],86:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns a `boolean` indicating if a benchmark has ended.
*
* @private
* @returns {boolean} boolean indicating if a benchmark has ended
*/
function ended() {
	/* eslint-disable no-invalid-this */
	return this._ended;
} // end FUNCTION ended()


// EXPORTS //

module.exports = ended;

},{}],87:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Asserts that `actual` is strictly equal to `expected`.
*
* @private
* @param {*} actual - actual value
* @param {*} expected - expected value
* @param {string} [msg] - message
*/
function equal( actual, expected, msg ) {
	/* eslint-disable no-invalid-this */
	this._assert( actual === expected, {
		'message': msg || 'should be equal',
		'operator': 'equal',
		'expected': expected,
		'actual': actual
	});
} // end FUNCTION equal()


// EXPORTS //

module.exports = equal;

},{}],88:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Forcefully ends a benchmark.
*
* @private
* @returns {void}
*/
function exit() {
	/* eslint-disable no-invalid-this */
	if ( this._exited ) {
		// If we have already "exited", do not create more failing assertions when one should suffice...
		return;
	}
	// Only "exit" when a benchmark has either not yet been run or is currently running. If a benchmark has already ended, no need to generate a failing assertion.
	if ( !this._ended ) {
		this._exited = true;
		this.fail( 'benchmark exited without ending' );

		// Allow running benchmarks to call `end` on their own...
		if ( !this._running ) {
			this.end();
		}
	}
} // end FUNCTION exit()


// EXPORTS //

module.exports = exit;

},{}],89:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Generates a failing assertion.
*
* @private
* @param {string} msg - message
*/
function fail( msg ) {
	/* eslint-disable no-invalid-this */
	this._assert( false, {
		'message': msg,
		'operator': 'fail'
	});
} // end FUNCTION fail()


// EXPORTS //

module.exports = fail;

},{}],90:[function(require,module,exports){
'use strict';

// MODULES //

var EventEmitter = require( 'events' ).EventEmitter;
var inherit = require( '@stdlib/utils/inherit' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var tic = require( '@stdlib/time/tic' );
var toc = require( '@stdlib/time/toc' );


// MAIN //

/**
* Benchmark constructor.
*
* @constructor
* @param {string} name - benchmark name
* @param {Options} opts - benchmark options
* @param {boolean} opts.skip - boolean indicating whether to skip a benchmark
* @param {PositiveInteger} opts.iterations - number of iterations
* @param {PositiveInteger} opts.timeout - number of milliseconds before a benchmark automatically fails
* @param {Function} [benchmark] - function containing benchmark code
* @returns {Benchmark} Benchmark instance
*
* @example
* var bench = new Benchmark( 'beep', function benchmark( b ) {
*     var x;
*     var i;
*     b.comment( 'Running benchmarks...' );
*     b.tic();
*     for ( i = 0; i < b.iterations; i++ ) {
*         x = Math.sin( Math.random() );
*         if ( x !== x ) {
*             b.ok( false, 'should not return NaN' );
*         }
*     }
*     b.toc();
*     if ( x !== x ) {
*         b.ok( false, 'should not return NaN' );
*     }
*     b.comment( 'Finished running benchmarks.' );
*     b.end();
* });
*/
function Benchmark( name, opts, benchmark ) {
	var hasTicked;
	var hasTocked;
	var self;
	var time;
	if ( !( this instanceof Benchmark ) ) {
		return new Benchmark( name, opts, benchmark );
	}
	self = this;
	hasTicked = false;
	hasTocked = false;

	EventEmitter.call( this );

	// Private properties:
	Object.defineProperty( this, '_benchmark', {
		'value': benchmark, // this may be `undefined`
		'configurable': false,
		'writable': false,
		'enumerable': false
	});

	Object.defineProperty( this, '_skip', {
		'value': opts.skip,
		'configurable': false,
		'writable': false,
		'enumerable': false
	});

	Object.defineProperty( this, '_ended', {
		'value': false,
		'configurable': false,
		'writable': true,
		'enumerable': false
	});

	Object.defineProperty( this, '_running', {
		'value': false,
		'configurable': false,
		'writable': true,
		'enumerable': false
	});

	Object.defineProperty( this, '_exited', {
		'value': false,
		'configurable': false,
		'writable': true,
		'enumerable': false
	});

	Object.defineProperty( this, '_count', {
		'value': 0,
		'configurable': false,
		'writable': true,
		'enumerable': false
	});

	// Read-only:
	setReadOnly( this, 'name', name );
	setReadOnly( this, 'tic', start );
	setReadOnly( this, 'toc', stop );
	setReadOnly( this, 'iterations', opts.iterations );
	setReadOnly( this, 'timeout', opts.timeout );

	return this;

	/**
	* Starts a benchmark timer.
	*
	* ## Notes
	*
	* * Using a scoped variable prevents nefarious mutation by bad actors hoping to manipulate benchmark results.
	* * The one attack vector which remains is manipulation of the `require` cache for `tic` and `toc`.
	* * One way to combat cache manipulation is by comparing the checksum of `Function#toString()` against known values.
	*
	* @private
	*/
	function start() {
		if ( hasTicked ) {
			self.fail( '.tic() called more than once' );
		} else {
			self.emit( 'tic' );
			hasTicked = true;
			time = tic();
		}
	} // end FUNCTION start()

	/**
	* Stops a benchmark timer.
	*
	* @private
	* @returns {void}
	*/
	function stop() {
		var elapsed;
		var secs;
		var rate;
		var out;

		if ( hasTicked === false ) {
			return self.fail( '.toc() called before .tic()' );
		}
		elapsed = toc( time );
		if ( hasTocked ) {
			return self.fail( '.toc() called more than once' );
		}
		hasTocked = true;
		self.emit( 'toc' );

		secs = elapsed[ 0 ] + ( elapsed[ 1 ]/1e9 );
		rate = self.iterations / secs;

		out = {
			'ok': true,
			'operator': 'result',
			'iterations': self.iterations,
			'elapsed': secs,
			'rate': rate
		};
		self.emit( 'result', out );
	} // end FUNCTION stop()
} // end FUNCTION Benchmark()

/*
* Inherit from the `EventEmitter` prototype.
*/
inherit( Benchmark, EventEmitter );

/**
* Runs a benchmark.
*
* @private
* @memberof Benchmark.prototype
* @function run
*/
Object.defineProperty( Benchmark.prototype, 'run', {
	'value': require( './run.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Forcefully ends a benchmark.
*
* @private
* @memberof Benchmark.prototype
* @function exit
*/
Object.defineProperty( Benchmark.prototype, 'exit', {
	'value': require( './exit.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Returns a `boolean` indicating if a benchmark has ended.
*
* @private
* @memberof Benchmark.prototype
* @function ended
* @returns {boolean} boolean indicating if a benchmark has ended
*/
Object.defineProperty( Benchmark.prototype, 'ended', {
	'value': require( './ended.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Generates an assertion.
*
* @private
* @memberof Benchmark.prototype
* @function _assert
* @param {boolean} ok - assertion outcome
* @param {Options} opts - options
*/
Object.defineProperty( Benchmark.prototype, '_assert', {
	'value': require( './assert.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Writes a comment.
*
* @memberof Benchmark.prototype
* @function comment
* @param {string} msg - comment message
*/
setReadOnly( Benchmark.prototype, 'comment', require( './comment.js' ) );

/**
* Generates an assertion which will be skipped.
*
* @memberof Benchmark.prototype
* @function skip
* @param {*} value - value
* @param {string} msg - message
*/
setReadOnly( Benchmark.prototype, 'skip', require( './skip.js' ) );

/**
* Generates an assertion which should be implemented.
*
* @memberof Benchmark.prototype
* @function todo
* @param {*} value - value
* @param {string} msg - message
*/
setReadOnly( Benchmark.prototype, 'todo', require( './todo.js' ) );

/**
* Generates a failing assertion.
*
* @memberof Benchmark.prototype
* @function fail
* @param {string} msg - message
*/
setReadOnly( Benchmark.prototype, 'fail', require( './fail.js' ) );

/**
* Generates a passing assertion.
*
* @memberof Benchmark.prototype
* @function pass
* @param {string} msg - message
*/
setReadOnly( Benchmark.prototype, 'pass', require( './pass.js' ) );

/**
* Asserts that a `value` is truthy.
*
* @memberof Benchmark.prototype
* @function ok
* @param {*} value - value
* @param {string} [msg] - message
*/
setReadOnly( Benchmark.prototype, 'ok', require( './ok.js' ) );

/**
* Asserts that a `value` is falsy.
*
* @memberof Benchmark.prototype
* @function notOk
* @param {*} value - value
* @param {string} [msg] - message
*/
setReadOnly( Benchmark.prototype, 'notOk', require( './not_ok.js' ) );

/**
* Asserts that `actual` is strictly equal to `expected`.
*
* @memberof Benchmark.prototype
* @function equal
* @param {*} actual - actual value
* @param {*} expected - expected value
* @param {string} [msg] - message
*/
setReadOnly( Benchmark.prototype, 'equal', require( './equal.js' ) );

/**
* Asserts that `actual` is not strictly equal to `expected`.
*
* @memberof Benchmark.prototype
* @function notEqual
* @param {*} actual - actual value
* @param {*} expected - expected value
* @param {string} [msg] - message
*/
setReadOnly( Benchmark.prototype, 'notEqual', require( './not_equal.js' ) );

/**
* Asserts that `actual` is deeply equal to `expected`.
*
* @memberof Benchmark.prototype
* @function deepEqual
* @param {*} actual - actual value
* @param {*} expected - expected value
* @param {string} [msg] message
*/
setReadOnly( Benchmark.prototype, 'deepEqual', require( './deep_equal.js' ) );

/**
* Asserts that `actual` is not deeply equal to `expected`.
*
* @memberof Benchmark.prototype
* @function notDeepEqual
* @param {*} actual - actual value
* @param {*} expected - expected value
* @param {string} [msg] message
*/
setReadOnly( Benchmark.prototype, 'notDeepEqual', require( './not_deep_equal.js' ) );

/**
* Ends a benchmark.
*
* @memberof Benchmark.prototype
* @function end
*/
setReadOnly( Benchmark.prototype, 'end', require( './end.js' ) );


// EXPORTS //

module.exports = Benchmark;

},{"./assert.js":81,"./comment.js":83,"./deep_equal.js":84,"./end.js":85,"./ended.js":86,"./equal.js":87,"./exit.js":88,"./fail.js":89,"./not_deep_equal.js":91,"./not_equal.js":92,"./not_ok.js":93,"./ok.js":94,"./pass.js":95,"./run.js":96,"./skip.js":98,"./todo.js":99,"@stdlib/time/tic":176,"@stdlib/time/toc":180,"@stdlib/utils/define-read-only-property":189,"@stdlib/utils/inherit":205,"events":238}],91:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Asserts that `actual` is not deeply equal to `expected`.
*
* @private
* @param {*} actual - actual value
* @param {*} expected - expected value
* @param {string} [msg] message
*/
function notDeepEqual( actual, expected, msg ) {
	/* eslint-disable no-invalid-this */
	this.comment( 'actual: '+actual+'. expected: '+expected+'. msg: '+msg+'.' );
	// TODO: implement
} // end FUNCTION notDeepEqual()


// EXPORTS //

module.exports = notDeepEqual;

},{}],92:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Asserts that `actual` is not strictly equal to `expected`.
*
* @private
* @param {*} actual - actual value
* @param {*} expected - expected value
* @param {string} [msg] - message
*/
function notEqual( actual, expected, msg ) {
	/* eslint-disable no-invalid-this */
	this._assert( actual !== expected, {
		'message': msg || 'should not be equal',
		'operator': 'notEqual',
		'expected': expected,
		'actual': actual
	});
} // end FUNCTION notEqual()


// EXPORTS //

module.exports = notEqual;

},{}],93:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Asserts that a `value` is falsy.
*
* @private
* @param {*} value - value
* @param {string} [msg] - message
*/
function notOk( value, msg ) {
	/* eslint-disable no-invalid-this */
	this._assert( !value, {
		'message': msg || 'should be falsy',
		'operator': 'notOk',
		'expected': false,
		'actual': value
	});
} // end FUNCTION notOk()


// EXPORTS //

module.exports = notOk;

},{}],94:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Asserts that a `value` is truthy.
*
* @private
* @param {*} value - value
* @param {string} [msg] - message
*/
function ok( value, msg ) {
	/* eslint-disable no-invalid-this */
	this._assert( !!value, {
		'message': msg || 'should be truthy',
		'operator': 'ok',
		'expected': true,
		'actual': value
	});
} // end FUNCTION ok()


// EXPORTS //

module.exports = ok;

},{}],95:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Generates a passing assertion.
*
* @private
* @param {string} msg - message
*/
function pass( msg ) {
	/* eslint-disable no-invalid-this */
	this._assert( true, {
		'message': msg,
		'operator': 'pass'
	});
} // end FUNCTION pass()


// EXPORTS //

module.exports = pass;

},{}],96:[function(require,module,exports){
/* eslint-disable no-underscore-dangle */
'use strict';

// MODULES //

var timeout = require( './set_timeout.js' );
var clear = require( './clear_timeout.js' );


// MAIN //

/**
* Runs a benchmark.
*
* @private
* @returns {void}
*/
function run() {
	/* eslint-disable no-invalid-this */
	var self;
	var id;
	if ( this._skip ) {
		this.comment( 'SKIP '+this.name );
		return this.end();
	}
	if ( !this._benchmark ) {
		this.comment( 'TODO '+this.name );
		return this.end();
	}
	self = this;
	this._running = true;

	id = timeout( onTimeout, this.timeout );
	this.once( 'end', endTimeout );

	this.emit( 'prerun' );
	this._benchmark( this );
	this.emit( 'run' );

	/**
	* Callback invoked once a timeout ends.
	*
	* @private
	*/
	function onTimeout() {
		self.fail( 'benchmark timed out after '+self.timeout+'ms' );
	} // end FUNCTION onTimeout()

	/**
	* Clears a timeout.
	*
	* @private
	*/
	function endTimeout() {
		clear( id );
	} // end FUNCTION endTimeout()
} // end FUNCTION run()


// EXPORTS //

module.exports = run;

},{"./clear_timeout.js":82,"./set_timeout.js":97}],97:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = setTimeout;

},{}],98:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Generates an assertion which will be skipped.
*
* @private
* @param {*} value - value
* @param {string} msg - message
*/
function skip( value, msg ) {
	/* eslint-disable no-invalid-this */
	this._assert( true, {
		'message': msg,
		'operator': 'skip',
		'skip': true
	});
} // end FUNCTION skip()


// EXPORTS //

module.exports = skip;

},{}],99:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Generates an assertion which should be implemented.
*
* @private
* @param {*} value - value
* @param {string} msg - message
*/
function todo( value, msg ) {
	/* eslint-disable no-invalid-this */
	this._assert( !!value, {
		'message': msg,
		'operator': 'todo',
		'todo': true
	});
} // end FUNCTION todo()


// EXPORTS //

module.exports = todo;

},{}],100:[function(require,module,exports){
module.exports={
	"skip": false,
	"iterations": null,
	"repeats": 3,
	"timeout": 300000
}

},{}],101:[function(require,module,exports){
'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var isNodeWritableStreamLike = require( '@stdlib/assert/is-node-writable-stream-like' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var pick = require( '@stdlib/utils/pick' );
var omit = require( '@stdlib/utils/omit' );
var noop = require( '@stdlib/utils/noop' );
var createHarness = require( './harness' );
var logStream = require( './log' );
var canEmitExit = require( './utils/can_emit_exit.js' );
var proc = require( './utils/process.js' );


// MAIN //

/**
* Creates a benchmark harness which supports closing when a process exits.
*
* @private
* @param {Options} [options] - function options
* @param {boolean} [options.autoclose] - boolean indicating whether to automatically close a harness after a harness finishes running all benchmarks
* @param {Stream} [options.stream] - output writable stream
* @param {Callback} [clbk] - callback to invoke when a harness finishes running all benchmarks
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} callback argument must be a function
* @returns {Function} benchmark harness
*
* @example
* var bench = createExitHarness( onFinish );
*
* function onFinish() {
*     bench.close();
* }
*
* bench( 'beep', function benchmark( b ) {
*     var x;
*     var i;
*     b.tic();
*     for ( i = 0; i < b.iterations; i++ ) {
*         x = Math.sin( Math.random() );
*         if ( x !== x ) {
*             b.ok( false, 'should not return NaN' );
*         }
*     }
*     b.toc();
*     if ( x !== x ) {
*         b.ok( false, 'should not return NaN' );
*     }
*     b.end();
* });
*
* @example
* var stream = createExitHarness().createStream();
* stream.pipe( process.stdout );
*/
function createExitHarness() {
	var exitCode;
	var pipeline;
	var harness;
	var options;
	var stream;
	var topts;
	var opts;
	var clbk;

	if ( arguments.length === 0 ) {
		options = {};
		clbk = noop;
	} else if ( arguments.length === 1 ) {
		if ( isFunction( arguments[ 0 ] ) ) {
			options = {};
			clbk = arguments[ 0 ];
		} else if ( isObject( arguments[ 0 ] ) ) {
			options = arguments[ 0 ];
			clbk = noop;
		} else {
			throw new TypeError( 'invalid input argument. Must provide either an options object or a callback function. Value: `'+arguments[ 0 ]+'`.' );
		}
	} else {
		options = arguments[ 0 ];
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. First argument must be an object. Value: `'+options+'`.' );
		}
		clbk = arguments[ 1 ];
		if ( !isFunction( clbk ) ) {
			throw new TypeError( 'invalid input argument. Second argument must be a function. Value: `'+clbk+'`.' );
		}
	}
	opts = {};
	if ( hasOwnProp( options, 'autoclose' ) ) {
		opts.autoclose = options.autoclose;
		if ( !isBoolean( opts.autoclose ) ) {
			throw new TypeError( 'invalid option. `autoclose` option must be a boolean primitive. Option: `'+opts.autoclose+'`.' );
		}
	}
	if ( hasOwnProp( options, 'stream' ) ) {
		opts.stream = options.stream;
		if ( !isNodeWritableStreamLike( opts.stream ) ) {
			throw new TypeError( 'invalid option. `stream` option must be a writable stream. Option: `'+opts.stream+'`.' );
		}
	}
	exitCode = 0;

	// Create a new harness:
	topts = pick( opts, [ 'autoclose' ] );
	harness = createHarness( topts, done );

	// Create a results stream:
	topts = omit( options, [ 'autoclose', 'stream' ] );
	stream = harness.createStream( topts );

	// Pipe results to an output stream:
	pipeline = stream.pipe( opts.stream || logStream() );

	// If a process can emit an 'exit' event, capture errors in order to set the exit code...
	if ( canEmitExit ) {
		pipeline.on( 'error', onError );
		proc.on( 'exit', onExit );
	}
	return harness;

	/**
	* Callback invoked when a harness finishes.
	*
	* @private
	* @returns {void}
	*/
	function done() {
		return clbk();
	} // end FUNCTION done()

	/**
	* Callback invoked upon a stream `error` event.
	*
	* @private
	* @param {Error} error - error object
	*/
	function onError() {
		exitCode = 1;
	} // end FUNCTION onError()

	/**
	* Callback invoked upon an `exit` event.
	*
	* @private
	* @param {integer} code - exit code
	*/
	function onExit( code ) {
		if ( code !== 0 ) {
			// Allow the process to exit...
			return;
		}
		harness.close();
		proc.exit( exitCode || harness.exitCode );
	} // end FUNCTION onExit()
} // end FUNCTION createExitHarness()


// EXPORTS //

module.exports = createExitHarness;

},{"./harness":103,"./log":109,"./utils/can_emit_exit.js":120,"./utils/process.js":123,"@stdlib/assert/has-own-property":2,"@stdlib/assert/is-boolean":10,"@stdlib/assert/is-function":20,"@stdlib/assert/is-node-writable-stream-like":36,"@stdlib/assert/is-plain-object":59,"@stdlib/utils/noop":215,"@stdlib/utils/omit":217,"@stdlib/utils/pick":219}],102:[function(require,module,exports){
'use strict';

// MODULES //

var canEmitExit = require( './utils/can_emit_exit.js' );
var createExitHarness = require( './exit_harness.js' );


// VARIABLES //

var harness;


// MAIN //

/**
* Returns a benchmark harness. If a harness has already been created, returns the cached harness.
*
* @private
* @param {Options} [options] - harness options
* @param {Callback} [clbk] - callback to invoke when a harness finishes running all benchmarks
* @returns {Function} benchmark harness
*/
function getHarness( options, clbk ) {
	var opts;
	var cb;
	if ( harness ) {
		return harness;
	}
	if ( arguments.length > 1 ) {
		opts = options;
		cb = clbk;
	} else {
		opts = {};
		cb = options;
	}
	opts.autoclose = !canEmitExit;
	harness = createExitHarness( opts, cb );

	// Update state:
	getHarness.cached = true;

	return harness;
} // end FUNCTION getHarness()


// EXPORTS //

module.exports = getHarness;

},{"./exit_harness.js":101,"./utils/can_emit_exit.js":120}],103:[function(require,module,exports){
'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var copy = require( '@stdlib/utils/copy' );
var Benchmark = require( './../benchmark-class' );
var Runner = require( './../runner' );
var nextTick = require( './../utils/next_tick.js' );
var DEFAULTS = require( './../defaults.json' );
var validate = require( './validate.js' );
var init = require( './init.js' );


// MAIN //

/**
* Creates a benchmark harness.
*
* @param {Options} [options] - function options
* @param {boolean} [options.autoclose] - boolean indicating whether to automatically close a harness after a harness finishes running all benchmarks
* @param {Callback} [clbk] - callback to invoke when a harness finishes running all benchmarks
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} callback argument must be a function
* @returns {Function} benchmark harness
*
* @example
* var bench = createHarness( onFinish );
*
* function onFinish() {
*     bench.close();
*     console.log( 'Exit code: %d', bench.exitCode );
* }
*
* bench( 'beep', function benchmark( b ) {
*     var x;
*     var i;
*     b.tic();
*     for ( i = 0; i < b.iterations; i++ ) {
*         x = Math.sin( Math.random() );
*         if ( x !== x ) {
*             b.ok( false, 'should not return NaN' );
*         }
*     }
*     b.toc();
*     if ( x !== x ) {
*         b.ok( false, 'should not return NaN' );
*     }
*     b.end();
* });
*
* @example
* var stream = createHarness().createStream();
* stream.pipe( process.stdout );
*/
function createHarness( options, clbk ) {
	var exitCode;
	var runner;
	var queue;
	var opts;
	var cb;

	opts = {};
	if ( arguments.length === 1 ) {
		if ( isFunction( options ) ) {
			cb = options;
		} else if ( isObject( options ) ) {
			opts = options;
		} else {
			throw new TypeError( 'invalid input argument. Must provide either an options object or a callback function. Value: `'+options+'`.' );
		}
	} else if ( arguments.length > 1 ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. First argument must be an object. Value: `'+options+'`.' );
		}
		if ( hasOwnProp( options, 'autoclose' ) ) {
			opts.autoclose = options.autoclose;
			if ( !isBoolean( opts.autoclose ) ) {
				throw new TypeError( 'invalid option. `autoclose` option must be a boolean primitive. Option: `'+opts.autoclose+'`.' );
			}
		}
		cb = clbk;
		if ( !isFunction( cb ) ) {
			throw new TypeError( 'invalid input argument. Second argument must be a function. Value: `'+cb+'`.' );
		}
	}
	runner = new Runner();
	if ( opts.autoclose ) {
		runner.once( 'done', close );
	}
	if ( cb ) {
		runner.once( 'done', cb );
	}
	exitCode = 0;
	queue = [];

	/**
	* Benchmark harness.
	*
	* @private
	* @param {string} name - benchmark name
	* @param {Options} [options] - benchmark options
	* @param {boolean} [options.skip=false] - boolean indicating whether to skip a benchmark
	* @param {(PositiveInteger|null)} [options.iterations=null] - number of iterations
	* @param {PositiveInteger} [options.repeats=3] - number of repeats
	* @param {PositiveInteger} [options.timeout=300000] - number of milliseconds before a benchmark automatically fails
	* @param {Function} [benchmark] - function containing benchmark code
	* @throws {TypeError} first argument must be a string
	* @throws {TypeError} options argument must be an object
	* @throws {TypeError} must provide valid options
	* @throws {TypeError} benchmark argument must a function
	* @throws {Error} benchmark error
	* @returns {Function} benchmark harness
	*/
	function harness( name, options, benchmark ) {
		var opts;
		var err;
		var b;
		if ( !isString( name ) ) {
			throw new TypeError( 'invalid input argument. First argument must be a string. Value: `'+name+'`.' );
		}
		opts = copy( DEFAULTS );
		if ( arguments.length === 2 ) {
			if ( isFunction( options ) ) {
				b = options;
			} else {
				err = validate( opts, options );
				if ( err ) {
					throw err;
				}
			}
		} else if ( arguments.length > 2 ) {
			err = validate( opts, options );
			if ( err ) {
				throw err;
			}
			b = benchmark;
			if ( !isFunction( b ) ) {
				throw new TypeError( 'invalid input argument. Third argument must be a function. Value: `'+b+'`.' );
			}
		}
		// Add the benchmark to the initialization queue:
		queue.push( [ name, opts, b ] );

		// Perform initialization on the next turn of the event loop (note: this allows all benchmarks to be "registered" within the same turn of the loop; otherwise, we run the risk of registration-execution race conditions (i.e., a benchmark registers and executes before other benchmarks can register, depleting the benchmark queue and leading the harness to close)):
		if ( queue.length === 1 ) {
			nextTick( initialize );
		}
		return harness;
	} // end FUNCTION harness()

	/**
	* Initializes each benchmark.
	*
	* @private
	* @returns {void}
	*/
	function initialize() {
		var idx = -1;
		return next();

		/**
		* Initialize the next benchmark.
		*
		* @private
		* @returns {void}
		*/
		function next() {
			var args;

			idx += 1;

			// If all benchmarks have been initialized, begin running the benchmarks:
			if ( idx === queue.length ) {
				queue.length = 0;
				return runner.run();
			}
			// Initialize the next benchmark:
			args = queue[ idx ];
			init( args[ 0 ], args[ 1 ], args[ 2 ], onInit );
		} // end FUNCTION initBenchmark()

		/**
		* Callback invoked after performing initialization tasks.
		*
		* @private
		* @param {string} name - benchmark name
		* @param {Options} opts - benchmark options
		* @param {(Function|undefined)} benchmark - function containing benchmark code
		* @returns {void}
		*/
		function onInit( name, opts, benchmark ) {
			var b;
			var i;

			// Create a `Benchmark` instance for each repeat to ensure each benchmark has its own state...
			for ( i = 0; i < opts.repeats; i++ ) {
				b = new Benchmark( name, opts, benchmark );
				b.on( 'result', onResult );
				runner.push( b );
			}
			return next();
		} // end FUNCTION onInit()
	} // end FUNCTION initialize()

	/**
	* Callback invoked upon a `result` event.
	*
	* @private
	* @param {(string|Object)} result - result
	*/
	function onResult( result ) {
		if (
			!isString( result ) &&
			!result.ok &&
			!result.todo
		) {
			exitCode = 1;
		}
	} // end FUNCTION onResult()

	/**
	* Returns a results stream.
	*
	* @private
	* @param {Object} [options] - options
	* @returns {TransformStream} transform stream
	*/
	function createStream( options ) {
		if ( arguments.length ) {
			return runner.createStream( options );
		}
		return runner.createStream();
	} // end FUNCTION createStream()

	/**
	* Closes a benchmark harness.
	*
	* @private
	*/
	function close() {
		runner.close();
	} // end FUNCTION close()

	/**
	* Forcefully exits a benchmark harness.
	*
	* @private
	*/
	function exit() {
		runner.exit();
	} // end FUNCTION exit()

	/**
	* Returns the harness exit code.
	*
	* @private
	* @returns {NonNegativeInteger} exit code
	*/
	function getExitCode() {
		return exitCode;
	} // end FUNCTION getExitCode()

	setReadOnly( harness, 'createStream', createStream );
	setReadOnly( harness, 'close', close );
	setReadOnly( harness, 'exit', exit );

	Object.defineProperty( harness, 'exitCode', {
		'configurable': false,
		'enumerable': true,
		'get': getExitCode
	});

	return harness;
} // end FUNCTION createHarness()


// EXPORTS //

module.exports = createHarness;

},{"./../benchmark-class":90,"./../defaults.json":100,"./../runner":117,"./../utils/next_tick.js":122,"./init.js":104,"./validate.js":107,"@stdlib/assert/has-own-property":2,"@stdlib/assert/is-boolean":10,"@stdlib/assert/is-function":20,"@stdlib/assert/is-plain-object":59,"@stdlib/assert/is-string":71,"@stdlib/utils/copy":186,"@stdlib/utils/define-read-only-property":189}],104:[function(require,module,exports){
'use strict';

// MODULES //

var pretest = require( './pretest.js' );
var iterations = require( './iterations.js' );


// MAIN //

/**
* Performs benchmark initialization tasks.
*
* @private
* @param {string} name - benchmark name
* @param {Options} opts - benchmark options
* @param {(Function|undefined)} benchmark - function containing benchmark code
* @param {Callback} clbk - callback to invoke after completing initialization tasks
* @returns {void}
*/
function init( name, opts, benchmark, clbk ) {
	// If no benchmark function, then the benchmark is considered a "todo", so no need to repeat multiple times...
	if ( !benchmark ) {
		opts.repeats = 1;
		return clbk( name, opts, benchmark );
	}
	// If the `skip` option to `true`, no need to initialize or repeat multiple times as will not be running the benchmark:
	if ( opts.skip ) {
		opts.repeats = 1;
		return clbk( name, opts, benchmark );
	}
	// Perform pretests:
	pretest( name, opts, benchmark, onPreTest );

	/**
	* Callback invoked upon completing pretests.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function onPreTest( error ) {
		// If the pretests failed, don't run the benchmark multiple times...
		if ( error ) {
			opts.repeats = 1;
			opts.iterations = 1;
			return clbk( name, opts, benchmark );
		}
		// If a user specified an iteration number, we can begin running benchmarks...
		if ( opts.iterations ) {
			return clbk( name, opts, benchmark );
		}
		// Determine iteration number:
		iterations( name, opts, benchmark, onIterations );
	} // end FUNCTION onPreTest()

	/**
	* Callback invoked upon determining an iteration number.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {PositiveInteger} iter - number of iterations
	* @returns {void}
	*/
	function onIterations( error, iter ) {
		// If provided an error, then a benchmark failed, and, similar to pretests, don't run the benchmark multiple times...
		if ( error ) {
			opts.repeats = 1;
			opts.iterations = 1;
			return clbk( name, opts, benchmark );
		}
		opts.iterations = iter;
		return clbk( name, opts, benchmark );
	} // end FUNCTION onEnd()
} // end FUNCTION init()


// EXPORTS //

module.exports = init;

},{"./iterations.js":105,"./pretest.js":106}],105:[function(require,module,exports){
'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var copy = require( '@stdlib/utils/copy' );
var Benchmark = require( './../benchmark-class' );


// VARIABLES //

var MIN_TIME = 0.1; // seconds
var ITERATIONS = 10; // 10^1
var MAX_ITERATIONS = 10000000000; // 10^10


// MAIN //

/**
* Determines the number of iterations.
*
* @private
* @param {string} name - benchmark name
* @param {Options} options - benchmark options
* @param {(Function|undefined)} benchmark - function containing benchmark code
* @param {Callback} clbk - callback to invoke after determining number of iterations
* @returns {void}
*/
function iterations( name, options, benchmark, clbk ) {
	var opts;
	var time;

	// Elapsed time (in seconds):
	time = 0;

	// Create a local copy:
	opts = copy( options );
	opts.iterations = ITERATIONS;

	// Begin running benchmarks:
	return next();

	/**
	* Run a new benchmark.
	*
	* @private
	*/
	function next() {
		var b = new Benchmark( name, opts, benchmark );
		b.on( 'result', onResult );
		b.once( 'end', onEnd );
		b.run();
	} // end FUNCTION next()

	/**
	* Callback invoked upon a `result` event.
	*
	* @private
	* @param {(string|Object)} result - result
	*/
	function onResult( result ) {
		if ( !isString( result ) && result.operator === 'result' ) {
			time = result.elapsed;
		}
	} // end FUNCTION onResult()

	/**
	* Callback invoked upon an `end` event.
	*
	* @private
	* @returns {void}
	*/
	function onEnd() {
		if (
			time < MIN_TIME &&
			opts.iterations < MAX_ITERATIONS
		) {
			opts.iterations *= 10;
			return next();
		}
		clbk( null, opts.iterations );
	} // end FUNCTION onEnd()
} // end FUNCTION iterations()


// EXPORTS //

module.exports = iterations;

},{"./../benchmark-class":90,"@stdlib/assert/is-string":71,"@stdlib/utils/copy":186}],106:[function(require,module,exports){
'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var copy = require( '@stdlib/utils/copy' );
var Benchmark = require( './../benchmark-class' );


// MAIN //

/**
* Runs pretests to sanity check and/or catch failures.
*
* @private
* @param {string} name - benchmark name
* @param {Options} options - benchmark options
* @param {(Function|undefined)} benchmark - function containing benchmark code
* @param {Callback} clbk - callback to invoke after completing pretests
*/
function pretest( name, options, benchmark, clbk ) {
	var fail;
	var opts;
	var tic;
	var toc;
	var b;

	// Counters to determine the number of `tic` and `toc` events:
	tic = 0;
	toc = 0;

	// Local copy:
	opts = copy( options );
	opts.iterations = 1;

	// Pretest to check for minimum requirements and/or errors...
	b = new Benchmark( name, opts, benchmark );
	b.on( 'result', onResult );
	b.on( 'tic', onTic );
	b.on( 'toc', onToc );
	b.once( 'end', onEnd );
	b.run();

	/**
	* Callback invoked upon a `result` event.
	*
	* @private
	* @param {(string|Object)} result - result
	*/
	function onResult( result ) {
		if (
			!isString( result ) &&
			!result.ok &&
			!result.todo
		) {
			fail = true;
		}
	} // end FUNCTION onResult()

	/**
	* Callback invoked upon a `tic` event.
	*
	* @private
	*/
	function onTic() {
		tic += 1;
	} // end FUNCTION onTic()

	/**
	* Callback invoked upon a `toc` event.
	*
	* @private
	*/
	function onToc() {
		toc += 1;
	} // end FUNCTION onToc()

	/**
	* Callback invoked upon an `end` event.
	*
	* @private
	* @returns {void}
	*/
	function onEnd() {
		var err;
		if ( fail ) {
			// Possibility that failure is intermittent, but we will assume that the usual case is that the failure would persist across all repeats and no sense failing multiple times when once suffices.
			err = new Error( 'benchmark failed' );
		} else if ( tic !== 1 || toc !== 1 ) {
			// Unable to do anything definitive with timing information (e.g., a tic with no toc or vice versa, or benchmark function calls neither tic nor toc).
			err = new Error( 'invalid benchmark' );
		}
		if ( err ) {
			return clbk( err );
		}
		return clbk();
	} // end FUNCTION onEnd()
} // end FUNCTION pretest()


// EXPORTS //

module.exports = pretest;

},{"./../benchmark-class":90,"@stdlib/assert/is-string":71,"@stdlib/utils/copy":186}],107:[function(require,module,exports){
'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isNull = require( '@stdlib/assert/is-null' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {boolean} [options.skip] - boolean indicating whether to skip a benchmark
* @param {(PositiveInteger|null)} [options.iterations] - number of iterations
* @param {PositiveInteger} [options.repeats] - number of repeats
* @param {PositiveInteger} [options.timeout] - number of milliseconds before a benchmark automatically fails
* @returns {(Error|null)} error object or null
*
* @example
* var opts = {};
* var options = {
*     'skip': false,
*     'iterations': 1e6,
*     'repeats': 3,
*     'timeout': 10000
* };
*
* var err = validate( opts, options );
* if ( err ) {
*    throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'skip' ) ) {
		opts.skip = options.skip;
		if ( !isBoolean( opts.skip ) ) {
			return new TypeError( 'invalid option. `skip` option must be a boolean primitive. Option: `' + opts.skip + '`.' );
		}
	}
	if ( hasOwnProp( options, 'iterations' ) ) {
		opts.iterations = options.iterations;
		if (
			!isPositiveInteger( opts.iterations ) &&
			!isNull( opts.iterations )
		) {
			return new TypeError( 'invalid option. `iterations` option must be either a positive integer or `null`. Option: `' + opts.iterations + '`.' );
		}
	}
	if ( hasOwnProp( options, 'repeats' ) ) {
		opts.repeats = options.repeats;
		if ( !isPositiveInteger( opts.repeats ) ) {
			return new TypeError( 'invalid option. `repeats` option must be a positive integer. Option: `' + opts.repeats + '`.' );
		}
	}
	if ( hasOwnProp( options, 'timeout' ) ) {
		opts.timeout = options.timeout;
		if ( !isPositiveInteger( opts.timeout ) ) {
			return new TypeError( 'invalid option. `timeout` option must be a positive integer. Option: `' + opts.timeout + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;

},{"@stdlib/assert/has-own-property":2,"@stdlib/assert/is-boolean":10,"@stdlib/assert/is-null":47,"@stdlib/assert/is-plain-object":59,"@stdlib/assert/is-positive-integer":62}],108:[function(require,module,exports){
'use strict';

/**
* Benchmark harness.
*
* @module @stdlib/bench/harness
*
* @example
* var bench = require( '@stdlib/bench/harness' );
*
* bench( 'beep', function benchmark( b ) {
*     var x;
*     var i;
*     b.tic();
*     for ( i = 0; i < b.iterations; i++ ) {
*         x = Math.sin( Math.random() );
*         if ( x !== x ) {
*             b.ok( false, 'should not return NaN' );
*         }
*     }
*     b.toc();
*     if ( x !== x ) {
*         b.ok( false, 'should not return NaN' );
*     }
*     b.end();
* });
*/

// MODULES //

var bench = require( './bench.js' );


// EXPORTS //

module.exports = bench;

},{"./bench.js":80}],109:[function(require,module,exports){
'use strict';

// MODULES //

var TransformStream = require( '@stdlib/streams/utils/transform' );
var fromCodePoint = require( '@stdlib/string/from-code-point' );
var log = require( './log.js' );


// MAIN //

/**
* Returns a Transform stream for logging to the console.
*
* @private
* @returns {TransformStream} transform stream
*/
function createStream() {
	var stream;
	var line;

	stream = new TransformStream({
		'transform': transform,
		'flush': flush
	});
	line = '';

	return stream;

	/**
	* Callback invoked upon receiving a new chunk.
	*
	* @private
	* @param {(Buffer|string)} chunk - chunk
	* @param {string} enc - Buffer encoding
	* @param {Callback} clbk - callback to invoke after transforming the streamed chunk
	*/
	function transform( chunk, enc, clbk ) {
		var c;
		var i;

		for ( i = 0; i < chunk.length; i++ ) {
			c = fromCodePoint( chunk[ i ] );
			if ( c === '\n' ) {
				flush();
			} else {
				line += c;
			}
		}
		clbk();
	} // end FUNCTION transform()

	/**
	* Callback to flush data to `stdout`.
	*
	* @private
	* @param {Callback} [clbk] - callback to invoke after processing data
	* @returns {void}
	*/
	function flush( clbk ) {
		try {
			log( line );
		} catch ( err ) {
			stream.emit( 'error', err );
		}
		line = '';
		if ( clbk ) {
			return clbk();
		}
	} // end FUNCTION flush()
} // end FUNCTION createStream()


// EXPORTS //

module.exports = createStream;

},{"./log.js":110,"@stdlib/streams/utils/transform":160,"@stdlib/string/from-code-point":166}],110:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Writes a string to the console.
*
* @private
* @param {string} str - string to write
*/
function log( str ) {
	console.log( str ); // eslint-disable-line no-console
} // end FUNCTION log()


// EXPORTS //

module.exports = log;

},{}],111:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Removes any pending benchmarks.
*
* @private
*/
function clear() {
	/* eslint-disable no-invalid-this */
	this._benchmarks.length = 0;
} // end FUNCTION clear()


// EXPORTS //

module.exports = clear;

},{}],112:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Closes a benchmark runner.
*
* @private
* @returns {void}
*/
function closeRunner() {
	/* eslint-disable no-invalid-this */
	var self = this;
	if ( this._closed ) {
		return;
	}
	this._closed = true;
	if ( this._benchmarks.length ) {
		this.clear();
		this._stream.write( '# WARNING: harness closed before completion.\n' );
	} else {
		this._stream.write( '#\n' );
		this._stream.write( '1..'+this.total+'\n' );
		this._stream.write( '# total '+this.total+'\n' );
		this._stream.write( '# pass  '+this.pass+'\n' );
		if ( this.fail ) {
			this._stream.write( '# fail  '+this.fail+'\n' );
		}
		if ( this.skip ) {
			this._stream.write( '# skip  '+this.skip+'\n' );
		}
		if ( this.todo ) {
			this._stream.write( '# todo  '+this.todo+'\n' );
		}
		if ( !this.fail ) {
			this._stream.write( '#\n# ok\n' );
		}
	}
	this._stream.once( 'close', onClose );
	this._stream.destroy();

	/**
	* Callback invoked upon a `close` event.
	*
	* @private
	*/
	function onClose() {
		self.emit( 'close' );
	} // end FUNCTION onClose()
} // end FUNCTION closeRunner()


// EXPORTS //

module.exports = closeRunner;

},{}],113:[function(require,module,exports){
/* eslint-disable no-underscore-dangle */
'use strict';

// MODULES //

var TransformStream = require( '@stdlib/streams/utils/transform' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var nextTick = require( './../utils/next_tick.js' );


// VARIABLES //

var TAP_HEADER = 'TAP version 13';


// MAIN //

/**
* Creates a results stream.
*
* @private
* @param {Options} [options] - stream options
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {TransformStream} transform stream
*/
function createStream( options ) {
	/* eslint-disable no-invalid-this */
	var stream;
	var opts;
	var self;
	var id;

	self = this;
	if ( arguments.length ) {
		opts = options;
	} else {
		opts = {};
	}
	stream = new TransformStream( opts );
	if ( opts.objectMode ) {
		id = 0;
		this.on( '_push', onPush );
		this.on( 'done', onDone );
	} else {
		stream.write( TAP_HEADER+'\n' );
		this._stream.pipe( stream );
	}
	this.on( '_run', onRun );
	return stream;

	/**
	* Runs the next benchmark.
	*
	* @private
	*/
	function next() {
		nextTick( onTick );
	} // end FUNCTION next()

	/**
	* Callback invoked upon the next tick.
	*
	* @private
	* @returns {void}
	*/
	function onTick() {
		var b = self._benchmarks.shift();
		if ( b ) {
			b.run();
			if ( !b.ended() ) {
				return b.once( 'end', next );
			}
			return next();
		}
		self._running = false;
		self.emit( 'done' );
	} // end FUNCTION onTick()

	/**
	* Callback invoked upon a run event.
	*
	* @private
	* @returns {void}
	*/
	function onRun() {
		if ( !self._running ) {
			self._running = true;
			return next();
		}
	} // end FUNCTION onRun()

	/**
	* Callback invoked upon a push event.
	*
	* @private
	* @param {Benchmark} b - benchmark
	*/
	function onPush( b ) {
		var bid = id;
		id += 1;

		b.once( 'prerun', onPreRun );
		b.on( 'result', onResult );
		b.on( 'end', onEnd );

		/**
		* Callback invoked upon a `prerun` event.
		*
		* @private
		*/
		function onPreRun() {
			var row = {
				'type': 'benchmark',
				'name': b.name,
				'id': bid
			};
			stream.write( row );
		} // end FUNCTION onPreRun()

		/**
		* Callback invoked upon a `result` event.
		*
		* @private
		* @param {(Object|string)} res - result
		*/
		function onResult( res ) {
			if ( isString( res ) ) {
				res = {
					'benchmark': bid,
					'type': 'comment',
					'name': res
				};
			} else if ( res.operator === 'result' ) {
				res.benchmark = bid;
				res.type = 'result';
			} else {
				res.benchmark = bid;
				res.type = 'assert';
			}
			stream.write( res );
		} // end FUNCTION onResult()

		/**
		* Callback invoked upon an `end` event.
		*
		* @private
		*/
		function onEnd() {
			stream.write({
				'benchmark': bid,
				'type': 'end'
			});
		} // end FUNCTION onEnd()
	} // end FUNCTION onPush()

	/**
	* Callback invoked upon a `done` event.
	*
	* @private
	*/
	function onDone() {
		stream.destroy();
	} // end FUNCTION onDone()
} // end FUNCTION createStream()


// EXPORTS //

module.exports = createStream;

},{"./../utils/next_tick.js":122,"@stdlib/assert/is-string":71,"@stdlib/streams/utils/transform":160}],114:[function(require,module,exports){
'use strict';

// MODULES //

var replace = require( '@stdlib/string/replace' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var RE_EOL = require( '@stdlib/regexp/eol' );


// VARIABLES //

var RE_WHITESPACE = /\s+/g;


// MAIN //

/**
* Encodes an assertion.
*
* @private
* @param {Object} result - result
* @param {PositiveInteger} count - result count
* @returns {string} encoded assertion
*/
function encodeAssertion( result, count ) {
	var actualStack;
	var errorStack;
	var expected;
	var actual;
	var indent;
	var stack;
	var lines;
	var out;
	var i;

	out = '';

	if ( !result.ok ) {
		out += 'not ';
	}
	// Add result count:
	out += 'ok ' + count;

	// Add description:
	if ( result.name ) {
		out += ' ' + replace( result.name.toString(), RE_WHITESPACE, ' ' );
	}
	// Append directives:
	if ( result.skip ) {
		out += ' # SKIP';
	} else if ( result.todo ) {
		out += ' # TODO';
	}
	out += '\n';
	if ( result.ok ) {
		return out;
	}
	// Format diagnostics as YAML...
	indent = '  ';
	out += indent + '---\n';
	out += indent + 'operator: ' + result.operator + '\n';
	if (
		hasOwnProp( result, 'actual' ) ||
		hasOwnProp( result, 'expected' )
	) {
		// TODO: inspect object logic (https://github.com/substack/tape/blob/master/lib/results.js#L145)
		expected = result.expected;
		actual = result.actual;
		if ( actual !== actual && expected !== expected ) {
			throw new Error( 'TODO: remove me' );
		}
	}
	if ( result.at ) {
		out += indent + 'at: ' + result.at + '\n';
	}
	if ( result.actual ) {
		actualStack = result.actual.stack;
	}
	if ( result.error ) {
		errorStack = result.error.stack;
	}
	if ( actualStack ) {
		stack = actualStack;
	} else {
		stack = errorStack;
	}
	if ( stack ) {
		lines = stack.toString().split( RE_EOL );
		out += indent + 'stack: |-\n';
		for ( i = 0; i < lines.length; i++ ) {
			out += indent + '  ' + lines[ i ] + '\n';
		}
	}
	out += indent + '...\n';
	return out;
} // end FUNCTION encodeAssertion()


// EXPORTS //

module.exports = encodeAssertion;

},{"@stdlib/assert/has-own-property":2,"@stdlib/regexp/eol":147,"@stdlib/string/replace":170}],115:[function(require,module,exports){
'use strict';

// VARIABLES //

var YAML_INDENT = '  ';
var YAML_BEGIN = YAML_INDENT + '---\n';
var YAML_END = YAML_INDENT + '...\n';


// MAIN //

/**
* Encodes a result as a YAML block.
*
* @private
* @param {Object} result - result
* @returns {string} encoded result
*/
function encodeResult( result ) {
	var out = YAML_BEGIN;
	out += YAML_INDENT + 'iterations: '+result.iterations+'\n';
	out += YAML_INDENT + 'elapsed: '+result.elapsed+'\n';
	out += YAML_INDENT + 'rate: '+result.rate+'\n';
	out += YAML_END;
	return out;
} // end FUNCTION encodeResult()


// EXPORTS //

module.exports = encodeResult;

},{}],116:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Forcefully exits a benchmark runner.
*
* @private
*/
function exit() {
	/* eslint-disable no-invalid-this */
	var self;
	var i;
	for ( i = 0; i < this._benchmarks.length; i++ ) {
		this._benchmarks[ i ].exit();
	}
	self = this;
	this.clear();
	this._stream.once( 'close', onClose );
	this._stream.destroy();

	/**
	* Callback invoked upon a `close` event.
	*
	* @private
	*/
	function onClose() {
		self.emit( 'close' );
	} // end FUNCTION onClose()
} // end FUNCTION exit()


// EXPORTS //

module.exports = exit;

},{}],117:[function(require,module,exports){
'use strict';

// MODULES //

var EventEmitter = require( 'events' ).EventEmitter;
var inherit = require( '@stdlib/utils/inherit' );
var TransformStream = require( '@stdlib/streams/utils/transform' );


// MAIN //

/**
* Benchmark runner.
*
* @private
* @constructor
* @returns {Runner} Runner instance
*
* @example
* var runner = new Runner();
*/
function Runner() {
	if ( !( this instanceof Runner ) ) {
		return new Runner();
	}
	EventEmitter.call( this );

	// Private properties:
	Object.defineProperty( this, '_benchmarks', {
		'value': [],
		'configurable': false,
		'writable': false,
		'enumerable': false
	});

	Object.defineProperty( this, '_stream', {
		'value': new TransformStream(),
		'configurable': false,
		'writable': false,
		'enumerable': false
	});

	Object.defineProperty( this, '_closed', {
		'value': false,
		'configurable': false,
		'writable': true,
		'enumerable': false
	});

	Object.defineProperty( this, '_running', {
		'value': false,
		'configurable': false,
		'writable': true,
		'enumerable': false
	});

	// Public properties:
	Object.defineProperty( this, 'total', {
		'value': 0,
		'configurable': false,
		'writable': true,
		'enumerable': true
	});

	Object.defineProperty( this, 'fail', {
		'value': 0,
		'configurable': false,
		'writable': true,
		'enumerable': true
	});

	Object.defineProperty( this, 'pass', {
		'value': 0,
		'configurable': false,
		'writable': true,
		'enumerable': true
	});

	Object.defineProperty( this, 'skip', {
		'value': 0,
		'configurable': false,
		'writable': true,
		'enumerable': true
	});

	Object.defineProperty( this, 'todo', {
		'value': 0,
		'configurable': false,
		'writable': true,
		'enumerable': true
	});

	return this;
} // end FUNCTION Runner()

/*
* Inherit from the `EventEmitter` prototype.
*/
inherit( Runner, EventEmitter );

/**
* Adds a new benchmark.
*
* @private
* @memberof Runner.prototype
* @function push
* @param {Benchmark} b - benchmark
*/
Object.defineProperty( Runner.prototype, 'push', {
	'value': require( './push.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Creates a results stream.
*
* @private
* @memberof Runner.prototype
* @function createStream
* @param {Options} [options] - stream options
* @returns {TransformStream} transform stream
*/
Object.defineProperty( Runner.prototype, 'createStream', {
	'value': require( './create_stream.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Runs pending benchmarks.
*
* @private
* @memberof Runner.prototype
* @function run
*/
Object.defineProperty( Runner.prototype, 'run', {
	'value': require( './run.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Removes any pending benchmarks.
*
* @private
* @memberof Runner.prototype
* @function clear
*/
Object.defineProperty( Runner.prototype, 'clear', {
	'value': require( './clear.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Closes a benchmark runner.
*
* @private
* @memberof Runner.prototype
* @function close
*/
Object.defineProperty( Runner.prototype, 'close', {
	'value': require( './close.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});

/**
* Forcefully exits a benchmark runner.
*
* @private
* @memberof Runner.prototype
* @function exit
*/
Object.defineProperty( Runner.prototype, 'exit', {
	'value': require( './exit.js' ),
	'configurable': false,
	'writable': false,
	'enumerable': false
});


// EXPORTS //

module.exports = Runner;

},{"./clear.js":111,"./close.js":112,"./create_stream.js":113,"./exit.js":116,"./push.js":118,"./run.js":119,"@stdlib/streams/utils/transform":160,"@stdlib/utils/inherit":205,"events":238}],118:[function(require,module,exports){
/* eslint-disable no-underscore-dangle */
'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var encodeAssertion = require( './encode_assertion.js' );
var encodeResult = require( './encode_result.js' );


// MAIN //

/**
* Adds a new benchmark.
*
* @private
* @param {Benchmark} b - benchmark
*/
function push( b ) {
	/* eslint-disable no-invalid-this */
	var self = this;

	this._benchmarks.push( b );

	b.once( 'prerun', onPreRun );
	b.on( 'result', onResult );

	this.emit( '_push', b );

	/**
	* Callback invoked upon a `prerun` event.
	*
	* @private
	*/
	function onPreRun() {
		self._stream.write( '# '+b.name+'\n' );
	} // end FUNCTION onPreRun()

	/**
	* Callback invoked upon a `result` event.
	*
	* @private
	* @param {(Object|string)} res - result
	* @returns {void}
	*/
	function onResult( res ) {
		// Check for a comment...
		if ( isString( res ) ) {
			return self._stream.write( '# '+res+'\n' );
		}
		if ( res.operator === 'result' ) {
			res = encodeResult( res );
			return self._stream.write( res );
		}
		self.total += 1;
		if ( res.ok ) {
			if ( res.skip ) {
				self.skip += 1;
			} else if ( res.todo ) {
				self.todo += 1;
			}
			self.pass += 1;
		}
		// According to the TAP spec, todos pass even if not "ok"...
		else if ( res.todo ) {
			self.pass += 1;
			self.todo += 1;
		}
		// Everything else is a failure...
		else {
			self.fail += 1;
		}
		res = encodeAssertion( res, self.total );
		self._stream.write( res );
	} // end FUNCTION onResult()
} // end FUNCTION push()


// EXPORTS //

module.exports = push;

},{"./encode_assertion.js":114,"./encode_result.js":115,"@stdlib/assert/is-string":71}],119:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Runs pending benchmarks.
*
* @private
*/
function run() {
	/* eslint-disable no-invalid-this */
	this.emit( '_run' );
} // end FUNCTION run()


// EXPORTS //

module.exports = run;

},{}],120:[function(require,module,exports){
'use strict';

// MODULES //

var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var canExit = require( './can_exit.js' );


// EXPORTS //

module.exports = ( !IS_BROWSER && canExit );

},{"./can_exit.js":121,"@stdlib/assert/is-browser":15}],121:[function(require,module,exports){
'use strict';

// MODULES //

var proc = require( './process.js' );


// EXPORTS //

module.exports = ( proc && typeof proc.exit === 'function' );

},{"./process.js":123}],122:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Runs a function on a subsequent turn of the event loop.
*
* ## Notes
*
* * `process.nextTick` is only Node.js.
* * `setImmediate` is non-standard.
* * Everything else is browser based (e.g., mutation observer, requestAnimationFrame, etc).
* * Only API which is universal is `setTimeout`.
* * Note that `0` is not actually `0ms`. Browser environments commonly have a minimum delay of `4ms`. This is acceptable. Here, the main intent of this function is to give the runtime a chance to run garbage collection, clear state, and tend to any other pending tasks before returning control to benchmark tasks. The larger aim (attainable or not) is to provide each benchmark run with as much of a fresh state as possible.
*
*
* @private
* @param {Function} fcn - function to run upon a subsequent turn of the event loop
*/
function nextTick( fcn ) {
	setTimeout( fcn, 0 );
} // end FUNCTION nextTick()


// EXPORTS //

module.exports = nextTick;

},{}],123:[function(require,module,exports){
(function (process){
'use strict';

// EXPORTS //

module.exports = process;

}).call(this,require('_process'))
},{"_process":232}],124:[function(require,module,exports){
'use strict';

/**
* Benchmark harness.
*
* @module @stdlib/bench
*
* @example
* var bench = require( '@stdlib/bench' );
*
* bench( 'beep', function benchmark( b ) {
*     var x;
*     var i;
*     b.tic();
*     for ( i = 0; i < b.iterations; i++ ) {
*         x = Math.sin( Math.random() );
*         if ( x !== x ) {
*             b.ok( false, 'should not return NaN' );
*         }
*     }
*     b.toc();
*     if ( x !== x ) {
*         b.ok( false, 'should not return NaN' );
*     }
*     b.end();
* });
*/

// MODULES //

var bench = require( '@stdlib/bench/harness' );


// EXPORTS //

module.exports = bench;

},{"@stdlib/bench/harness":108}],125:[function(require,module,exports){
'use strict';

/**
* Test if a finite double-precision floating-point number is an integer.
*
* @module @stdlib/math/base/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/math/base/assert/is-integer' );
*
* var bool = isInteger( 1.0 );
* // returns true
*
* bool = isInteger( 3.14 );
* // returns false
*/

// MODULES //

var isInteger = require( './is_integer.js' );


// EXPORTS //

module.exports = isInteger;

},{"./is_integer.js":126}],126:[function(require,module,exports){
'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Tests if a finite double-precision floating-point number is an integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an integer
*
* @example
* var bool = isInteger( 1.0 );
* // returns true
*
* @example
* var bool = isInteger( 3.14 );
* // returns false
*/
function isInteger( x ) {
	return (floor(x) === x);
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;

},{"@stdlib/math/base/special/floor":130}],127:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":128}],128:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],129:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],130:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":129}],131:[function(require,module,exports){
'use strict';

/**
* Decompose a double-precision floating-point number into integral and fractional parts.
*
* @module @stdlib/math/base/special/modf
*
* @example
* var modf = require( '@stdlib/math/base/special/modf' );
*
* var parts = modf( 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*/

// MODULES //

var modf = require( './modf.js' );


// EXPORTS //

module.exports = modf;

},{"./modf.js":132}],132:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/math/constants/float64-high-word-significand-mask' );


// VARIABLES //

// 4294967295 => 0xffffffff => 11111111111111111111111111111111
var ALL_ONES = 4294967295;


// MAIN //

/**
* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.
*
* @param {number} x - input value
* @returns {NumberArray} array containing integral and fractional parts
*
* @example
* var parts = modf( 3.14 );
* // returns [ 3.0, 0.14000000000000012 ]
*/
function modf( x ) {
	var parts;
	var words;
	var high;
	var low;
	var exp;
	var i;

	// Special cases...
	if ( x < 1.0 ) {
		if ( x < 0.0 ) {
			parts = modf( -x );
			parts[ 0 ] *= -1.0;
			parts[ 1 ] *= -1.0;
			return parts;
		}
		if ( x === 0.0 ) {
			return [ x, x ]; // [ +-0, +-0 ]
		}
		return [ 0.0, x ];
	}
	if ( isnan( x ) ) {
		return [ NaN, NaN ];
	}
	if ( x === PINF ) {
		return [ PINF, 0.0 ];
	}
	// Decompose |x|...

	// Extract the high and low words:
	words = toWords( x );
	high = words[ 0 ];
	low = words[ 1 ];

	// Extract the unbiased exponent from the high word:
	exp = (high & FLOAT64_HIGH_WORD_EXPONENT_MASK) >> 20;
	exp -= FLOAT64_EXPONENT_BIAS;

	// Handle smaller values (x < 2**20 = 1048576)...
	if ( exp < 20 ) {
		i = FLOAT64_HIGH_WORD_SIGNIFICAND_MASK >> exp;

		// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...
		if ( ((high&i)|low) === 0 ) {
			return [ x, 0.0 ];
		}
		// Turn off all the bits which cannot be exponentiated away:
		high &= (~i);

		// Generate the integral part:
		i = fromWords( high, 0 );

		// The fractional part is whatever is leftover:
		return [ i, x-i ];
	}
	// Check if `x` can even have a fractional part...
	if ( exp > 51 ) {
		// `x` is integral:
		return [ x, 0.0 ];
	}
	i = ALL_ONES >>> (exp-20);

	// Determine if `x` is integral by checking for less significant significand bits which cannot be exponentiated away...
	if ( (low&i) === 0 ) {
		return [ x, 0.0 ];
	}
	// Turn off all the bits which cannot be exponentiated away:
	low &= (~i);

	// Generate the integral part:
	i = fromWords( high, low );

	// The fractional part is whatever is leftover:
	return [ i, x-i ];
} // end FUNCTION modf()


// EXPORTS //

module.exports = modf;

},{"@stdlib/math/base/assert/is-nan":127,"@stdlib/math/base/utils/float64-from-words":136,"@stdlib/math/base/utils/float64-to-words":138,"@stdlib/math/constants/float64-exponent-bias":141,"@stdlib/math/constants/float64-high-word-exponent-mask":142,"@stdlib/math/constants/float64-high-word-significand-mask":143,"@stdlib/math/constants/float64-pinf":145}],133:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":134}],134:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],135:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":137}],136:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":135}],137:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":28}],138:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":140}],139:[function(require,module,exports){
arguments[4][137][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":28,"dup":137}],140:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":139}],141:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],142:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],143:[function(require,module,exports){
'use strict';

/**
* High word mask for the significand of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-significand-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/math/constants/float64-high-word-significand-mask' );
* // returns 1048575
*/


// MAIN //

/**
* The high word mask for the significand of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 1048575 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000000 11111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 0x000fffff
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = 0x000fffff;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;

},{}],144:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],145:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],146:[function(require,module,exports){
'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/math/constants/uint32-max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/math/constants/uint32-max' );
* // returns 4294967295
*/


// MAIN //

/**
* The maximum unsigned 32-bit integer is given by
*
* ``` tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],147:[function(require,module,exports){
'use strict';

/**
* Regular expression to match a newline character sequence.
*
* @module @stdlib/regexp/eol
* @type {RegExp}
*
* @example
* var RE_EOL = require( '@stdlib/regexp/eol' );
*
* var bool = RE_EOL.test( '\n' );
* // returns true
*
* bool = RE_EOL.test( '\r\n' );
* // returns true
*
* bool = RE_EOL.test( '\\r\\n' );
* // returns false
*/


// MAIN //

/**
* Matches a newline character sequence.
*
* Regular expression: `/\r?\n/`
*
* * `\r?`
*   - match a carriage return character (optional)
* * `\n`
*   - match a line feed character
*
* @constant
* @type {RegExp}
* @default /\r?\n/
*/
var RE_EOL = /\r?\n/;


// EXPORTS //

module.exports = RE_EOL;

},{}],148:[function(require,module,exports){
'use strict';

/**
* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @module @stdlib/regexp/function-name
* @type {RegExp}
*
* @example
* var RE_FUNCTION_NAME = require( '@stdlib/utils/regexp/function-name' );
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/


// MAIN //

/**
* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* Regular expression: `/^\s*function\s*([^(]*)/i`
*
* * `/^\s*`
*   - Match zero or more spaces at beginning
* * `function`
*   - Match the word `function`
* * `\s*`
*   - Match zero or more spaces after the word `function`
* * `()`
*   - Capture
* * `[^(]*`
*   - Match anything except a left parenthesis `(` zero or more times
* * `/i`
*   - ignore case
*
* @constant
* @type {RegExp}
* @default /^\s*function\s*([^(]*)/i
*/
var RE_FUNCTION_NAME = /^\s*function\s*([^(]*)/i;


// EXPORTS //

module.exports = RE_FUNCTION_NAME;

},{}],149:[function(require,module,exports){
'use strict';

/**
* Regular expression to parse a regular expression string.
*
* @module @stdlib/regexp/regexp
* @type {RegExp}
*
* @example
* var RE_REGEXP = require( '@stdlib/regexp/regexp' );
*
* var bool = RE_REGEXP.test( '/^beep$/' );
* // returns true
*
* bool = RE_REGEXP.test( '' );
* // returns false
*
* @example
* var RE_REGEXP = require( '@stdlib/regexp/regexp' );
*
* var parts = RE_REGEXP.exec( '/^.*$/ig' );
* // returns [ '/^.*$/ig', '^.*$', 'ig', 'index': 0, 'input': '/^.*$/ig' ]
*/


// MAIN //

/**
* Matches parts of a regular expression string.
*
* Regular expression: `/^\/((?:\\\/|[^\/])+)\/([imgy]*)$/`
*
* * `/^\/`
*   - match a string that begins with a `/`
* * `()`
*   - capture
* * `(?:)+`
*   - capture, but do not remember, a group of characters which occur one or more times
* * `\\\/`
*   - match the literal `\/`
* * `|`
*   - OR
* * `[^\/]`
*   - anything which is not the literal `\/`
* * `\/`
*   - match the literal `/`
* * `([imgy]*)`
*   - capture any characters matching `imgy` occurring zero or more times
* * `$/`
*   - string end
*
*
* @constant
* @type {RegExp}
* @default /^\/((?:\\\/|[^\/])+)\/([imgy]*)$/
*/
var RE_REGEXP = /^\/((?:\\\/|[^\/])+)\/([imgy]*)$/; // eslint-disable-line no-useless-escape


// EXPORTS //

module.exports = RE_REGEXP;

},{}],150:[function(require,module,exports){
'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var pkg = require( './../package.json' ).name;
var help = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var o;
	var i;
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		o = help();
		if ( typeof o !== 'object' ) {
			b.fail( 'should return an object' );
		}
	}
	b.toc();
	if ( !isPlainObject( o ) ) {
		b.fail( 'should return a plain object' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

},{"./../lib":153,"./../package.json":154,"@stdlib/assert/is-plain-object":59,"@stdlib/bench":124}],151:[function(require,module,exports){
// This file is generated by scripts/build.js.
'use strict';

/* eslint-disable quotes, max-lines */

module.exports = {
	"AFINN_111": "\nAFINN_111()\n    Returns a list of English words rated for valence.\n\n    The returned list contains 2477 English words (and phrases) rated for\n    valence. Negative words have a negative valence [-5,0). Positive words have\n    a positive valence (0,5]. Neutral words have a valence of 0.\n\n    A few notes:\n\n    - The list includes misspelled words. Their presence is intentional, as such\n      misspellings frequently occur in social media content.\n    - All words are lowercase.\n    - Words may contain numbers; e.g., \"n00b\".\n    - Some \"words\" are phrases; e.g., \"cool stuff\", \"not good\".\n    - Words may contain apostrophes; e.g., \"can't stand\".\n    - Words may contain diaeresis; e.g., \"naïve\".\n    - Words may contain dashes; e.g., \"self-deluded\", \"self-confident\".\n\n    Returns\n    -------\n    out: Array<Array>\n        List of English words and their valence.\n\n    Examples\n    --------\n    > var list = AFINN_111()\n    [ [ 'abandon', -2 ], [ 'abandoned', -2 ], [ 'abandons', -2 ], ... ]\n\n    References\n    ----------\n    - Nielsen, Finn Årup. 2011. \"A new ANEW: Evaluation of a word list for\n    sentiment analysis in microblogs.\" In *Proceedings of the ESWC2011 Workshop\n    on 'Making Sense of Microposts': Big Things Come in Small Packages.*,\n    718:93–98. CEUR Workshop Proceedings. <http://ceur-ws.org/Vol-718/paper_16.\n    pdf>.\n\n    * If you use the list for publication or third party consumption, please\n    cite the listed reference.\n\n    See Also\n    --------\n    AFINN_96\n",
	"AFINN_96": "\nAFINN_96()\n    Returns a list of English words rated for valence.\n\n    The returned list contains 1468 English words (and phrases) rated for\n    valence. Negative words have a negative valence [-5,0). Positive words have\n    a positive valence (0,5]. Neutral words have a valence of 0.\n\n    A few notes:\n\n    - The list is an earlier version of AFINN-111.\n    - The list includes misspelled words. Their presence is intentional, as such\n      misspellings frequently occur in social media content.\n    - All words are lowercase.\n    - Some \"words\" are phrases; e.g., \"cashing in\", \"cool stuff\".\n    - Words may contain apostrophes; e.g., \"can't stand\".\n    - Words may contain dashes; e.g., \"cover-up\", \"made-up\".\n\n    Returns\n    -------\n    out: Array<Array>\n        List of English words and their valence.\n\n    Examples\n    --------\n    > var list = AFINN_96()\n    [ [ 'abandon', -2 ], [ 'abandons', -2 ], [ 'abandoned', -2 ], ... ]\n\n    References\n    ----------\n    - Nielsen, Finn Årup. 2011. \"A new ANEW: Evaluation of a word list for\n    sentiment analysis in microblogs.\" In *Proceedings of the ESWC2011 Workshop\n    on 'Making Sense of Microposts': Big Things Come in Small Packages.*,\n    718:93–98. CEUR Workshop Proceedings. <http://ceur-ws.org/Vol-718/paper_16.\n    pdf>.\n\n    * If you use the list for publication or third party consumption, please\n    cite the listed reference.\n\n    See Also\n    --------\n    AFINN_111\n",
	"any": "\nany( collection )\n    Tests whether at least one element in a collection is truthy.\n\n    The function immediately returns upon encountering a truthy value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if an element is truthy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 0, 0, 1 ];\n    > var bool = any( arr )\n    true\n\n    See Also\n    --------\n    anyBy, every, forEach, none, some\n",
	"anyBy": "\nanyBy( collection, predicate[, thisArg ] )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns `true` for\n        any element; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, 3, 4, -1 ];\n    > var bool = anyBy( arr, negative )\n    true\n\n    See Also\n    --------\n    anyByAsync, anyByRight, everyBy, forEach, noneBy, someBy\n",
	"anyByAsync": "\nanyByAsync( collection, [options,] predicate, done )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-falsy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nanyByAsync.factory( [options,] predicate )\n    Returns a function which tests whether at least one element in a collection\n    passes a test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = anyByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyBy, anyByRightAsync, everyByAsync, forEachAsync, noneByAsync, someByAsync\n",
	"anyByRight": "\nanyByRight( collection, predicate[, thisArg ] )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns `true` for\n        any element; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ -1, 1, 2, 3, 4 ];\n    > var bool = anyByRight( arr, negative )\n    true\n\n    See Also\n    --------\n    anyBy, anyByRightAsync, everyByRight, forEachRight, noneByRight, someByRight\n",
	"anyByRightAsync": "\nanyByRightAsync( collection, [options,] predicate, done )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-falsy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nanyByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether at least one element in a collection\n    passes a test implemented by a predicate function, iterating from right to\n    left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = anyByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByAsync, anyByRight, everyByRightAsync, forEachRightAsync, noneByRightAsync, someByRightAsync\n",
	"append": "\nappend( collection1, collection2 )\n    Adds the elements of one collection to the end of another collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection1: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    collection2: Array|TypedArray|Object\n        A collection containing the elements to add. If the collection is an\n        `Object`, the collection should be array-like.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = append( arr, [ 6.0, 7.0 ] )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = append( arr, [ 3.0, 4.0 ] )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 0 };\n    > arr = append( arr, [ 1.0, 2.0 ] )\n    { 'length': 2, '0': 1.0, '1': 2.0 }\n\n    See Also\n    --------\n    prepend, push\n",
	"argumentFunction": "\nargumentFunction( idx )\n    Returns a function which always returns a specified argument.\n\n    The input argument corresponds to the zero-based index of the argument to\n    return.\n\n    Parameters\n    ----------\n    arg: integer\n        Argument index to return (zero-based).\n\n    Returns\n    -------\n    out: Function\n        Argument function.\n\n    Examples\n    --------\n    > var argn = argumentFunction( 1 );\n    > var v = argn( 3.14, -3.14, 0.0 )\n    -3.14\n    > v = argn( -1.0, -0.0, 1.0 )\n    -0.0\n    > v = argn( 'beep', 'boop', 'bop' )\n    'boop'\n    > v = argn( 'beep' )\n    undefined\n\n    See Also\n    --------\n    constantFunction, identity\n",
	"ARGV": "\nARGV\n    An array containing command-line arguments passed when launching the calling\n    process.\n\n    The first element is the absolute pathname of the executable that started\n    the calling process.\n\n    The second element is the path of the executed file.\n\n    Any additional elements are additional command-line arguments.\n\n    In browser environments, the array is empty.\n\n    Examples\n    --------\n    > var execPath = ARGV[ 0 ]\n    e.g., /usr/local/bin/node\n\n    See Also\n    --------\n    ENV\n",
	"base.abs": "\nbase.abs( x )\n    Computes the absolute value of `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Absolute value.\n\n    Examples\n    --------\n    > var y = base.abs( -1.0 )\n    1.0\n    > y = base.abs( 2.0 )\n    2.0\n    > y = base.abs( 0.0 )\n    0.0\n    > y = base.abs( -0.0 )\n    0.0\n    > y = base.abs( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs2\n",
	"base.abs2": "\nbase.abs2( x )\n    Computes the squared absolute value of `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Squared absolute value.\n\n    Examples\n    --------\n    > var y = base.abs2( -1.0 )\n    1.0\n    > y = base.abs2( 2.0 )\n    4.0\n    > y = base.abs2( 0.0 )\n    0.0\n    > y = base.abs2( -0.0 )\n    0.0\n    > y = base.abs2( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs\n",
	"base.absdiff": "\nbase.absdiff( x, y )\n    Computes the absolute difference.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Absolute difference.\n\n    Examples\n    --------\n    > var d = base.absdiff( 2.0, 5.0 )\n    3.0\n    > d = base.absdiff( -1.0, 3.14 )\n    ~4.14\n    > d = base.absdiff( 10.1, -2.05 )\n    ~12.15\n    > d = base.absdiff( -0.0, 0.0 )\n    +0.0\n    > d = base.absdiff( NaN, 5.0 )\n    NaN\n    > d = base.absdiff( PINF, NINF )\n    Infinity\n    > d = base.absdiff( PINF, PINF )\n    NaN\n\n    See Also\n    --------\n    base.reldiff, base.epsdiff\n",
	"base.absInt32": "\nbase.absInt32( x )\n    Computes an absolute value of a signed 32-bit integer in two's complement\n    format.\n\n    Parameters\n    ----------\n    x: integer\n        Signed 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Absolute value.\n\n    Examples\n    --------\n    > var v = base.absInt32( -1|0 )\n    1\n    > v = base.absInt32( 2|0 )\n    2\n    > v = base.absInt32( 0|0 )\n    0\n\n    See Also\n    --------\n    base.abs\n",
	"base.acos": "\nbase.acos( x )\n    Compute the arccosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arccosine (in radians).\n\n    Examples\n    --------\n    > var y = base.acos( 1.0 )\n    0.0\n    > y = base.acos( 0.707 )\n    ~0.7855\n    > y = base.acos( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acosh, base.asin, base.atan\n",
	"base.acosh": "\nbase.acosh( x )\n    Computes the hyperbolic arccosine of a number.\n\n    If `x < 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arccosine (in radians).\n\n    Examples\n    --------\n    > var y = base.acosh( 1.0 )\n    0.0\n    > y = base.acosh( 2.0 )\n    ~1.317\n    > y = base.acosh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asinh, base.atanh\n",
	"base.acovercos": "\nbase.acovercos( x )\n    Computes the inverse coversed cosine.\n\n    The inverse coversed cosine is defined as `asin(1+x)`.\n\n    If `x < -2`, `x > 0`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse coversed cosine.\n\n    Examples\n    --------\n    > var y = base.acovercos( -1.5 )\n    ~-0.5236\n    > y = base.acovercos( -0.0 )\n    ~1.5708\n\n    See Also\n    --------\n    base.acoversin, base.avercos, base.covercos, base.vercos\n",
	"base.acoversin": "\nbase.acoversin( x )\n    Computes the inverse coversed sine.\n\n    The inverse coversed sine is defined as `asin(1-x)`.\n\n    If `x < 0`, `x > 2`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse coversed sine.\n\n    Examples\n    --------\n    > var y = base.acoversin( 1.5 )\n    ~-0.5236\n    > y = base.acoversin( 0.0 )\n    ~1.5708\n\n    See Also\n    --------\n    base.acovercos, base.aversin, base.coversin, base.versin\n",
	"base.ahavercos": "\nbase.ahavercos( x )\n    Computes the inverse half-value versed cosine.\n\n    The inverse half-value versed cosine is defined as `2*acos(sqrt(x))`.\n\n    If `x < 0`, `x > 1`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse half-value versed cosine.\n\n    Examples\n    --------\n    > var y = base.ahavercos( 0.5 )\n    ~1.5708\n    > y = base.ahavercos( 0.0 )\n    ~3.1416\n\n    See Also\n    --------\n    base.ahaversin, base.havercos, base.vercos\n",
	"base.ahaversin": "\nbase.ahaversin( x )\n    Computes the inverse half-value versed sine.\n\n    The inverse half-value versed sine is defined as `2*asin(sqrt(x))`.\n\n    If `x < 0`, `x > 1`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse half-value versed sine.\n\n    Examples\n    --------\n    > var y = base.ahaversin( 0.5 )\n    ~1.5708\n    > y = base.ahaversin( 0.0 )\n    0.0\n\n    See Also\n    --------\n    base.ahavercos, base.haversin, base.versin\n",
	"base.asin": "\nbase.asin( x )\n    Computes the arcsine of a number.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arcsine (in radians).\n\n    Examples\n    --------\n    > var y = base.asin( 0.0 )\n    0.0\n    > y = base.asin( PI/2.0 )\n    ~1.0\n    > y = base.asin( -PI/6.0 )\n    ~-0.5\n    > y = base.asin( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asinh, base.atan\n",
	"base.asinh": "\nbase.asinh( x )\n    Computes the hyperbolic arcsine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arcsine (in radians).\n\n    Examples\n    --------\n    > var y = base.asinh( 0.0 )\n    0.0\n    > y = base.asinh( 2.0 )\n    ~1.444\n    > y = base.asinh( -2.0 )\n    ~-1.444\n    > y = base.asinh( NaN )\n    NaN\n    > y = base.asinh( NINF )\n    -infinity\n    > y = base.asinh( PINF )\n    infinity\n\n    See Also\n    --------\n    base.acosh, base.asin, base.atanh\n",
	"base.asum": "\nbase.asum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.asum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.asum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.asum( N, x1, stride )\n    12.0\n\n\nbase.asum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.asum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n    > sum = base.asum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum, base.sasum\n",
	"base.atan": "\nbase.atan( x )\n    Computes the arctangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arctangent (in radians).\n\n    Examples\n    --------\n    > var y = base.atan( 0.0 )\n    ~0.0\n    > y = base.atan( -PI/4.0 )\n    ~-1.0\n    > y = base.atan( PI/4.0 )\n    ~1.0\n    > y = base.atan( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asin, base.atanh\n",
	"base.atan2": "\nbase.atan2( y, x )\n    Evaluates the arctangent of the quotient of two numbers.\n\n    Parameters\n    ----------\n    y: number\n        Numerator value.\n\n    x: number\n        Denominator value.\n\n    Returns\n    -------\n    out: number\n        Arctangent of quotient `y/x` (in radians).\n\n    Examples\n    --------\n    > var v = base.atan2( 2.0, 2.0 )\n    ~0.785\n    > v = base.atan2( 6.0, 2.0 )\n    ~1.249\n    > v = base.atan2( -1.0, -1.0 )\n    ~-2.356\n    > v = base.atan2( 3.0, 0.0 )\n    ~1.571\n    > v = base.atan2( -2.0, 0.0 )\n    ~-1.571\n    > v = base.atan2( 0.0, 0.0 )\n    0.0\n    > v = base.atan2( 3.0, NaN )\n    NaN\n    > v = base.atan2( NaN, 2.0 )\n    NaN\n\n    See Also\n    --------\n    base.atan\n",
	"base.atanh": "\nbase.atanh( x )\n    Computes the hyperbolic arctangent of a number.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arctangent (in radians).\n\n    Examples\n    --------\n    > var y = base.atanh( 0.0 )\n    0.0\n    > y = base.atanh( 0.9 )\n    ~1.472\n    > y = base.atanh( 1.0 )\n    +infinity\n    > y = base.atanh( -1.0 )\n    -infinity\n    > y = base.atanh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acosh, base.asinh, base.atan\n",
	"base.avercos": "\nbase.avercos( x )\n    Computes the inverse versed cosine.\n\n    The inverse versed cosine is defined as `acos(1+x)`.\n\n    If `x < -2`, `x > 0`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse versed cosine.\n\n    Examples\n    --------\n    > var y = base.avercos( -1.5 )\n    ~2.0944\n    > y = base.avercos( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.aversin, base.versin\n",
	"base.aversin": "\nbase.aversin( x )\n    Computes the inverse versed sine.\n\n    The inverse versed sine is defined as `acos(1-x)`.\n\n    If `x < 0`, `x > 2`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse versed sine.\n\n    Examples\n    --------\n    > var y = base.aversin( 1.5 )\n    ~2.0944\n    > y = base.aversin( 0.0 )\n    0.0\n\n    See Also\n    --------\n    base.avercos, base.vercos\n",
	"base.axpy": "\nbase.axpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.axpy( x.length, alpha, x, 1, y, 1 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > base.axpy( N, alpha, x, 2, y, -1 )\n    [ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.axpy( N, 5.0, x1, -2, y1, 1 )\n    [ 40.0, 33.0, 22.0 ]\n    > y0\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.axpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.axpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.axpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy, base.saxpy\n",
	"base.beta": "\nbase.beta( x, y )\n    Evaluates the beta function.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter (non-negative).\n\n    y: number\n        Second function parameter (non-negative).\n\n    Returns\n    -------\n    out: number\n        Evaluated beta function.\n\n    Examples\n    --------\n    > var v = base.beta( 0.0, 0.0 )\n    infinity\n    > v = base.beta( 1.0, 1.0 )\n    1.0\n    > v = base.beta( -1.0, 2.0 )\n    NaN\n    > v = base.beta( 5.0, 0.2 )\n    ~3.382\n    > v = base.beta( 4.0, 1.0 )\n    0.25\n    > v = base.beta( NaN, 2.0 )\n    NaN\n\n",
	"base.betainc": "\nbase.betainc( x, a, b[, regularized[, upper]] )\n    Computes the regularized incomplete beta function.\n\n    The `regularized` and `upper` parameters specify whether to evaluate the\n    non-regularized and/or upper incomplete beta functions, respectively.\n\n    If provided `x < 0` or `x > 1`, the function returns `NaN`.\n\n    If provided `a < 0` or `b < 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    a: number\n        Second function parameter.\n\n    b: number\n        Third function parameter.\n\n    regularized: boolean (optional)\n        Boolean indicating whether the function should evaluate the regularized\n        or non-regularized incomplete beta function. Default: `true`.\n\n    upper: boolean (optional)\n        Boolean indicating whether the function should return the upper tail of\n        the incomplete beta function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.betainc( 0.5, 2.0, 2.0 )\n    0.5\n    > y = base.betainc( 0.5, 2.0, 2.0, false )\n    ~0.083\n    > y = base.betainc( 0.2, 1.0, 2.0 )\n    0.36\n    > y = base.betainc( 0.2, 1.0, 2.0, true, true )\n    0.64\n    > y = base.betainc( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( 0.8, NaN, 1.0 )\n    NaN\n    > y = base.betainc( 0.8, 1.0, NaN )\n    NaN\n    > y = base.betainc( 1.5, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( -0.5, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( 0.5, -2.0, 2.0 )\n    NaN\n    > y = base.betainc( 0.5, 2.0, -2.0 )\n    NaN\n\n",
	"base.betaincinv": "\nbase.betaincinv( p, a, b[, upper] )\n    Computes the inverse of the lower incomplete beta function.\n\n    In contrast to a more commonly used definition, the first argument is the\n    probability `p` and the second and third arguments are `a` and `b`,\n    respectively.\n\n    By default, the function inverts the lower regularized incomplete beta\n    function. To invert the upper function , set the `upper` argument to `true`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Probability.\n\n    a: number\n        Second function parameter.\n\n    b: number\n        Third function parameter.\n\n    upper: boolean (optional)\n        Boolean indicating if the function should invert the upper tail of the\n        incomplete beta function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.betaincinv( 0.2, 3.0, 3.0 )\n    ~0.327\n    > y = base.betaincinv( 0.4, 3.0, 3.0 )\n    ~0.446\n    > y = base.betaincinv( 0.4, 3.0, 3.0, true )\n    ~0.554\n    > y = base.betaincinv( 0.4, 1.0, 6.0 )\n    ~0.082\n    > y = base.betaincinv( 0.8, 1.0, 6.0 )\n    ~0.235\n    > y = base.betaincinv( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 1.0, NaN )\n    NaN\n    > y = base.betaincinv( 1.2, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( -0.5, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, -2.0, 2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 0.0, 2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 2.0, -2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 2.0, 0.0 )\n    NaN\n\n",
	"base.betaln": "\nbase.betaln( a, b )\n    Evaluates the natural logarithm of the beta function.\n\n    Parameters\n    ----------\n    a: number\n        First function parameter (non-negative).\n\n    b: number\n        Second function parameter (non-negative).\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the beta function.\n\n    Examples\n    --------\n    > var v = base.betaln( 0.0, 0.0 )\n    infinity\n    > v = base.betaln( 1.0, 1.0 )\n    0.0\n    > v = base.betaln( -1.0, 2.0 )\n    NaN\n    > v = base.betaln( 5.0, 0.2 )\n    ~1.218\n    > v = base.betaln( 4.0, 1.0 )\n    ~-1.386\n    > v = base.betaln( NaN, 2.0 )\n    NaN\n\n",
	"base.binet": "\nbase.binet( x )\n    Evaluates Binet's formula extended to real numbers.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function result.\n\n    Examples\n    --------\n    > var y = base.binet( 0.0 )\n    0.0\n    > y = base.binet( 1.0 )\n    1.0\n    > y = base.binet( 2.0 )\n    1.0\n    > y = base.binet( 3.0 )\n    2.0\n    > y = base.binet( 4.0 )\n    3.0\n    > y = base.binet( 5.0 )\n    ~5.0\n    > y = base.binet( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negafibonacci\n",
	"base.binomcoef": "\nbase.binomcoef( n, k )\n    Computes the binomial coefficient of two integers.\n\n    If `k < 0`, the function returns `0`.\n\n    The function returns `NaN` for non-integer `n` or `k`.\n\n    Parameters\n    ----------\n    n: integer\n        First input value.\n\n    k: integer\n        Second input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.binomcoef( 8, 2 )\n    28\n    > v = base.binomcoef( 0, 0 )\n    1\n    > v = base.binomcoef( -4, 2 )\n    10\n    > v = base.binomcoef( 5, 3 )\n    10\n    > v = base.binomcoef( NaN, 3 )\n    NaN\n    > v = base.binomcoef( 5, NaN )\n    NaN\n    > v = base.binomcoef( NaN, NaN )\n    NaN\n\n",
	"base.binomcoefln": "\nbase.binomcoefln( n, k )\n    Computes the natural logarithm of the binomial coefficient of two integers.\n\n    If `k < 0`, the function returns `-Infinity`.\n\n    The function returns `NaN` for non-integer `n` or `k`.\n\n    Parameters\n    ----------\n    n: integer\n        First input value.\n\n    k: integer\n        Second input value.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the binomial coefficient.\n\n    Examples\n    --------\n    > var v = base.binomcoefln( 8, 2 )\n    ~3.332\n    > v = base.binomcoefln( 0, 0 )\n    0.0\n    > v = base.binomcoefln( -4, 2 )\n    ~2.302\n    > v = base.binomcoefln( 88, 3 )\n    ~11.606\n    > v = base.binomcoefln( NaN, 3 )\n    NaN\n    > v = base.binomcoefln( 5, NaN )\n    NaN\n    > v = base.binomcoefln( NaN, NaN )\n    NaN\n\n",
	"base.cabs": "\nbase.cabs( re, im )\n    Computes the absolute value of a complex number.\n\n    The absolute value of a complex number is its distance from zero.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    y: number\n        Absolute value.\n\n    Examples\n    --------\n    > var y = base.cabs( 5.0, 3.0 )\n    ~5.83\n\n    See Also\n    --------\n    base.cabs2, base.abs\n",
	"base.cabs2": "\nbase.cabs2( re, im )\n    Computes the squared absolute value of a complex number.\n\n    The absolute value of a complex number is its distance from zero.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    y: number\n        Squared absolute value.\n\n    Examples\n    --------\n    > var y = base.cabs2( 5.0, 3.0 )\n    34.0\n\n    See Also\n    --------\n    base.cabs, base.abs2\n",
	"base.cadd": "\nbase.cadd( [out,] re1, im1, re2, im2 )\n    Adds two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cadd( 5.0, 3.0, -2.0, 1.0 )\n    [ 3.0, 4.0 ]\n\n    // Provide an output array:\n    > var out = new Float32Array( 2 );\n    > y = base.cadd( out, 5.0, 3.0, -2.0, 1.0 )\n    <Float32Array>[ 3.0, 4.0 ]\n    > var bool = ( y === out )\n    true\n\n    See Also\n    --------\n    base.cdiv, base.cmul, base.csub\n",
	"base.cbrt": "\nbase.cbrt( x )\n    Computes the cube root.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Cube root.\n\n    Examples\n    --------\n    > var y = base.cbrt( 64.0 )\n    4.0\n    > y = base.cbrt( 27.0 )\n    3.0\n    > y = base.cbrt( 0.0 )\n    0.0\n    > y = base.cbrt( -0.0 )\n    -0.0\n    > y = base.cbrt( -9.0 )\n    ~-2.08\n    > y = base.cbrt( NaN )\n    NaN\n\n",
	"base.cceil": "\nbase.cceil( [out,] re, im )\n    Rounds a complex number toward positive infinity.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var out = base.cceil( 5.5, 3.3 )\n    [ 6.0, 4.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cceil( out, 5.5, 3.3 )\n    [ 6.0, 4.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cfloor, base.cround\n",
	"base.cdiv": "\nbase.cdiv( [out,] re1, im1, re2, im2 )\n    Divides two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cdiv( -13.0, -1.0, -2.0, 1.0 )\n    [ 5.0, 3.0 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.cdiv( out, -13.0, -1.0, -2.0, 1.0 )\n    <Float64Array>[ 5.0, 3.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cadd, base.cmul, base.csub\n",
	"base.ceil": "\nbase.ceil( x )\n    Rounds a numeric value toward positive infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil( 3.14 )\n    4.0\n    > y = base.ceil( -4.2 )\n    -4.0\n    > y = base.ceil( -4.6 )\n    -4.0\n    > y = base.ceil( 9.5 )\n    10.0\n    > y = base.ceil( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceiln, base.floor, base.round\n",
	"base.ceil10": "\nbase.ceil10( x )\n    Rounds a numeric value to the nearest power of ten toward positive infinity.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil10( 3.14 )\n    10.0\n    > y = base.ceil10( -4.2 )\n    -1.0\n    > y = base.ceil10( -4.6 )\n    -1.0\n    > y = base.ceil10( 9.5 )\n    10.0\n    > y = base.ceil10( 13.0 )\n    100.0\n    > y = base.ceil10( -13.0 )\n    -10.0\n    > y = base.ceil10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.ceil2, base.floor10, base.round10\n",
	"base.ceil2": "\nbase.ceil2( x )\n    Rounds a numeric value to the nearest power of two toward positive infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil2( 3.14 )\n    4.0\n    > y = base.ceil2( -4.2 )\n    -4.0\n    > y = base.ceil2( -4.6 )\n    -4.0\n    > y = base.ceil2( 9.5 )\n    16.0\n    > y = base.ceil2( 13.0 )\n    16.0\n    > y = base.ceil2( -13.0 )\n    -8.0\n    > y = base.ceil2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.ceil10, base.floor2, base.round2\n",
	"base.ceilb": "\nbase.ceilb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward positive\n    infinity.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.ceilb( 3.14159, -4, 10 )\n    3.1416\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.ceilb( 3.14159, 0, 2 )\n    4.0\n\n    // Round to nearest multiple of two toward positive infinity:\n    > y = base.ceilb( 5.0, 1, 2 )\n    6.0\n\n    See Also\n    --------\n    base.ceil, base.ceiln, base.floorb, base.roundb\n",
	"base.ceiln": "\nbase.ceiln( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward positive\n    infinity.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.ceiln( 3.14159, -2 )\n    3.15\n\n    // If `n = 0`, standard round toward positive infinity behavior:\n    > y = base.ceiln( 3.14159, 0 )\n    4.0\n\n    // Round to nearest thousand:\n    > y = base.ceiln( 12368.0, 3 )\n    13000.0\n\n\n    See Also\n    --------\n    base.ceil, base.ceilb, base.floorn, base.roundn\n",
	"base.ceilsd": "\nbase.ceilsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward positive infinity with\n    `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceilsd( 3.14159, 5 )\n    3.1416\n    > y = base.ceilsd( 3.14159, 1 )\n    4.0\n    > y = base.ceilsd( 12368.0, 2 )\n    13000.0\n    > y = base.ceilsd( 0.0313, 2, 2 )\n    0.046875\n\n    See Also\n    --------\n    base.ceil, base.floorsd, base.roundsd, base.truncsd\n",
	"base.cfloor": "\nbase.cfloor( re, im )\n    Rounds a complex number toward negative infinity.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array<number>\n        Rounded components.\n\n    Examples\n    --------\n    > var out = base.cfloor( 5.5, 3.3 )\n    [ 5.0, 3.0 ]\n\n    See Also\n    --------\n    base.cceil, base.cround\n",
	"base.cinv": "\nbase.cinv( [out,] re, im )\n    Computes the inverse of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cinv( 2.0, 4.0 )\n    [ 0.1, -0.2 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.cinv( out, 2.0, 4.0 )\n    <Float64Array>[ 0.1, -0.2 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cdiv\n",
	"base.cmul": "\nbase.cmul( re1, im1, re2, im2 )\n    Multiplies two complex numbers.\n\n    Parameters\n    ----------\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array\n        Array containing the real and imaginary components of the result.\n\n    Examples\n    --------\n    > var y = base.cmul( 5.0, 3.0, -2.0, 1.0 )\n    [ -13.0, -1.0 ]\n\n    See Also\n    --------\n    base.cadd, base.cdiv, base.csub\n",
	"base.continuedFraction": "\nbase.continuedFraction( generator[, options] )\n    Evaluates the continued fraction approximation for the supplied series\n    generator using the modified Lentz algorithm.\n\n    `generator` can be either a function which returns an array with two\n    elements, the `a` and `b` terms of the fraction, or an ES6 Generator object.\n\n    By default, the function computes\n\n             a1\n        ---------------\n        b1 +     a2\n             ----------\n              b2 +   a3\n                  -----\n                  b3 + ...\n\n    To evaluate\n\n        b0 +\t a1\n        ---------------\n        b1 +\t a2\n             ----------\n             b2 +  a3\n                  -----\n                  b3 + ...\n\n    set the `keep` option to `true`.\n\n    Parameters\n    ----------\n    generator: Function\n        Function returning terms of continued fraction expansion.\n\n    options: Object (optional)\n        Options.\n\n    options.maxIter: integer (optional)\n         Maximum number of iterations. Default: `1000000`.\n\n    options.tolerance: number (optional)\n        Further terms are only added as long as the next term is greater than\n        current term times the tolerance. Default: `2.22e-16`.\n\n    options.keep: boolean (optional)\n        Boolean indicating whether to keep the `b0` term in the continued\n        fraction. Default: `false`.\n\n    Returns\n    -------\n    out: number\n       Value of continued fraction.\n\n    Examples\n    --------\n    // Continued fraction for (e-1)^(-1):\n    > function closure() {\n    >    var i = 0;\n    >    return function() {\n    >        i++;\n    >        return [ i, i ];\n    >    };\n    > }\n    > var gen = closure()\n    > var out = base.continuedFraction( gen )\n    ~0.582\n\n    // Using an ES6 generator:\n    > function* generator() {\n    >     var i = 0;\n    >     while ( true ) {\n    >         i++;\n    >         yield [ i, i ];\n    >     }\n    > }\n    > gen = generator();\n    > out = base.continuedFraction( gen )\n    ~0.582\n\n    // Set options:\n    > out = base.continuedFraction( generator(), { 'keep': true } )\n    ~1.718\n    > out = base.continuedFraction( generator(), { 'maxIter': 10 } )\n    ~0.582\n    > out = base.continuedFraction( generator(), { 'tolerance': 1e-1 } )\n    ~0.578\n\n",
	"base.copy": "\nbase.copy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.copy( x.length, x, 1, y, 1 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.copy( N, x, -2, y, 1 )\n    [ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.copy( N, x1, -2, y1, 1 )\n    <Float64Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.copy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.copy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.copy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n",
	"base.copysign": "\nbase.copysign( x, y )\n    Returns a double-precision floating-point number with the magnitude of `x`\n    and the sign of `y`.\n\n    Parameters\n    ----------\n    x: number\n        Number from which to derive a magnitude.\n\n    y: number\n        Number from which to derive a sign.\n\n    Returns\n    -------\n    z: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var z = base.copysign( -3.14, 10.0 )\n    3.14\n    > z = base.copysign( 3.14, -1.0 )\n    -3.14\n    > z = base.copysign( 1.0, -0.0 )\n    -1.0\n    > z = base.copysign( -3.14, -0.0 )\n    -3.14\n    > z = base.copysign( -0.0, 1.0 )\n    0.0\n\n    See Also\n    --------\n    base.flipsign\n",
	"base.cos": "\nbase.cos( x )\n    Computes the cosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Cosine (in radians).\n\n    Examples\n    --------\n    > var y = base.cos( 0.0 )\n    1.0\n    > y = base.cos( PI/4.0 )\n    ~0.707\n    > y = base.cos( -PI/6.0 )\n    ~0.866\n    > y = base.cos( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cospi, base.cosm1, base.sin, base.tan\n",
	"base.cosh": "\nbase.cosh( x )\n    Computes the hyperbolic cosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic cosine (in radians).\n\n    Examples\n    --------\n    > var y = base.cosh( 0.0 )\n    1.0\n    > y = base.cosh( 2.0 )\n    ~3.762\n    > y = base.cosh( -2.0 )\n    ~3.762\n    > y = base.cosh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sinh, base.tanh\n",
	"base.cosm1": "\nbase.cosm1( x )\n    Computes the cosine of a number minus one.\n\n    This function should be used instead of manually calculating `cos(x)-1` when\n    `x` is near unity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Cosine minus one (in radians).\n\n    Examples\n    --------\n    > var y = base.cosm1( 0.0 )\n    0.0\n    > y = base.cosm1( PI/4.0 )\n    ~-0.291\n    > y = base.cosm1( -PI/6.0 )\n    ~-0.134\n    > y = base.cosm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos\n",
	"base.cospi": "\nbase.cospi( x )\n    Computes the value of `cos(πx)`.\n\n    This function computes `cos(πx)` more accurately than the obvious approach,\n    especially for large `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.cospi( 0.0 )\n    1.0\n    > y = base.cospi( 0.5 )\n    0.0\n    > y = base.cospi( 0.1 )\n    ~0.951\n    > y = base.cospi( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos\n",
	"base.covercos": "\nbase.covercos( x )\n    Computes the coversed cosine.\n\n    The coversed cosine is defined as `1 + sin(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Coversed cosine (in radians).\n\n    Examples\n    --------\n    > var y = base.covercos( 3.14 )\n    ~1.0016\n    > y = base.covercos( -4.2 )\n    ~1.8716\n    > y = base.covercos( -4.6 )\n    ~1.9937\n    > y = base.covercos( 9.5 )\n    ~0.9248\n    > y = base.covercos( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.coversin, base.vercos\n",
	"base.coversin": "\nbase.coversin( x )\n    Computes the coversed sine.\n\n    The coversed sine is defined as `1 - sin(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Coversed sine (in radians).\n\n    Examples\n    --------\n    > var y = base.coversin( 3.14 )\n    ~0.9984\n    > y = base.coversin( -4.2 )\n    ~0.1284\n    > y = base.coversin( -4.6 )\n    ~0.0063\n    > y = base.coversin( 9.5 )\n    ~1.0752\n    > y = base.coversin( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.covercos, base.versin\n",
	"base.cphase": "\nbase.cphase( re, im )\n    Computes the argument of a complex number in radians.\n\n    The argument of a complex number, also known as the phase, is the angle of\n    the radius extending from the origin to the complex number plotted in the\n    complex plane and the positive real axis.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    phi: number\n        Argument.\n\n    Examples\n    --------\n    > var phi = base.cphase( 5.0, 3.0 )\n    ~0.5404\n\n    See Also\n    --------\n    base.cabs\n",
	"base.cpolar": "\nbase.cpolar( re, im )\n    Returns the absolute value and phase of a complex number.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array<number>\n        Absolute value and phase, respectively.\n\n    Examples\n    --------\n    > var out = base.cpolar( 5.0, 3.0 )\n    [ ~5.83, ~0.5404 ]\n\n    See Also\n    --------\n    base.cabs, base.cphase\n",
	"base.cround": "\nbase.cround( re, im )\n    Rounds a complex number to the nearest integer.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array<number>\n        Rounded components.\n\n    Examples\n    --------\n    > var out = base.cround( 5.5, 3.3 )\n    [ 6.0, 3.0 ]\n\n    See Also\n    --------\n    base.cceil, base.cfloor\n",
	"base.csub": "\nbase.csub( re1, im1, re2, im2 )\n    Subtracts two complex numbers.\n\n    Parameters\n    ----------\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array\n        Array containing the real and imaginary components of the result.\n\n    Examples\n    --------\n    > var y = base.csub( 5.0, 3.0, -2.0, 1.0 )\n    [ 7.0, 2.0 ]\n\n    See Also\n    --------\n    base.cadd, base.cdiv, base.cmul\n",
	"base.dasum": "\nbase.dasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.dasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.dasum( N, x1, stride )\n    12.0\n\n\nbase.dasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.dasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n\nbase.dasum.wasm( [options] )\n    Returns a memory managed function to compute the sum of absolute values.\n\n    For an externally defined `Float64Array`, data must be copied to the heap.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.memory: integer (optional)\n        Total memory. If not provided a buffer, setting the memory option\n        instructs the returned function to allocate an internal memory store of\n        the specified size.\n\n    options.stack: integer (optional)\n        Total stack size. Must be less than the memory option and large enough\n        for a program's needs. Default: `1024` bytes.\n\n    options.buffer: ArrayBuffer (optional)\n        `ArrayBuffer` serving as the underlying memory store. If not provided,\n        each returned function will allocate and manage its own memory. If\n        provided a memory option, the buffer `byteLength` must equal the\n        specified total memory.\n\n    Returns\n    -------\n    out: Function\n        Memory managed function.\n\n    Examples\n    --------\n    > var wasm = base.dasum.wasm();\n    > var N = 5;\n\n    // Allocate space on the heap:\n    > var bytes = wasm.malloc( N * 8 );\n\n    // Create a Float64Array view:\n    > var view = new Float64Array( bytes.buffer, bytes.byteOffset, N );\n\n    // Copy data to the heap:\n    > view.set( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n\n    // Compute the sum of absolute values (passing in the heap buffer):\n    > var s = wasm( N, bytes, 1 )\n    15.0\n\n    // Free the memory:\n    > wasm.free( bytes );\n\n    See Also\n    --------\n    base.daxpy, base.dcopy\n",
	"base.daxpy": "\nbase.daxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy( x.length, alpha, x, 1, y, 1 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > base.daxpy( N, alpha, x, 2, y, -1 )\n    <Float64Array>[ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.daxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float64Array>[ 40.0, 33.0, 22.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.daxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.daxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.daxpy.wasm( [options] )\n    Returns a memory managed function to multiply `x` by a constant `alpha` and\n    add the result to `y`.\n\n    For externally defined `Float64Arrays`, data must be copied to the heap.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.memory: integer (optional)\n        Total memory. If not provided a buffer, setting the memory option\n        instructs the returned function to allocate an internal memory store of\n        the specified size.\n\n    options.stack: integer (optional)\n        Total stack size. Must be less than the memory option and large enough\n        for a program's needs. Default: `1024` bytes.\n\n    options.buffer: ArrayBuffer (optional)\n        `ArrayBuffer` serving as the underlying memory store. If not provided,\n        each returned function will allocate and manage its own memory. If\n        provided a memory option, the buffer `byteLength` must equal the\n        specified total memory.\n\n    Returns\n    -------\n    out: Function\n        Memory managed function.\n\n    Examples\n    --------\n    > var wasm = base.daxpy.wasm();\n    > var N = 5;\n\n    // Allocate space on the heap:\n    > var xbytes = wasm.malloc( N * 8 );\n    > var ybytes = wasm.malloc( N * 8 );\n\n    // Create Float64Array views:\n    > var x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );\n    > var y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );\n\n    // Copy data to the heap:\n    > x.set( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > y.set( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n\n    // Multiply and add alpha:\n    > var alpha = 5.0;\n    > wasm( x.length, alpha, xbytes, 1, ybytes, 1 );\n    > y\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Free the memory:\n    > wasm.free( xbytes );\n    > wasm.free( ybytes );\n\n    See Also\n    --------\n    base.dasum, base.dcopy\n",
	"base.dcopy": "\nbase.dcopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy( x.length, x, 1, y, 1 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy( N, x, -2, y, 1 )\n    <Float64Array>[ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.dcopy( N, x1, -2, y1, 1 )\n    <Float64Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.dcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dasum, base.daxpy\n",
	"base.deg2rad": "\nbase.deg2rad( x )\n    Converts an angle from degrees to radians.\n\n    Parameters\n    ----------\n    x: number\n        Angle in degrees.\n\n    Returns\n    -------\n    r: number\n        Angle in radians.\n\n    Examples\n    --------\n    > var r = base.deg2rad( 90.0 )\n    ~1.571\n    > r = base.deg2rad( -45.0 )\n    ~-0.785\n    > r = base.deg2rad( NaN )\n    NaN\n\n    See Also\n    --------\n    base.rad2deg\n",
	"base.digamma": "\nbase.digamma( x )\n    Evaluates the digamma function.\n\n    If `x` is `0` or a negative `integer`, the `function` returns `NaN`.\n\n    If provided `NaN`, the `function` returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.digamma( -2.5 )\n    ~1.103\n    > y = base.digamma( 1.0 )\n    ~-0.577\n    > y = base.digamma( 10.0 )\n    ~2.252\n    > y = base.digamma( NaN )\n    NaN\n    > y = base.digamma( -1.0 )\n    NaN\n\n",
	"base.diracDelta": "\nbase.diracDelta( x )\n    Evaluates the Dirac delta function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.diracDelta( 3.14 )\n    0.0\n    > y = base.diracDelta( 0.0 )\n    Infinity\n\n    See Also\n    --------\n    base.kroneckerDelta\n",
	"base.dist.arcsine.Arcsine": "\nbase.dist.arcsine.Arcsine( [a, b] )\n    Returns an arcsine distribution object.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support. Must be smaller than `b`. Default: `0.0`.\n\n    b: number (optional)\n        Maximum support. Must be greater than `a`. Default: `1.0`.\n\n    Returns\n    -------\n    arcsine: Object\n        Distribution instance.\n\n    arcsine.a: number\n        Minimum support. If set, the value must be smaller than `b`.\n\n    arcsine.b: number\n        Maximum support. If set, the value must be greater than `a`.\n\n    arcsine.entropy: number\n        Read-only property which returns the differential entropy.\n\n    arcsine.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    arcsine.mean: number\n        Read-only property which returns the expected value.\n\n    arcsine.median: number\n        Read-only property which returns the median.\n\n    arcsine.mode: number\n        Read-only property which returns the mode.\n\n    arcsine.skewness: number\n        Read-only property which returns the skewness.\n\n    arcsine.stdev: number\n        Read-only property which returns the standard deviation.\n\n    arcsine.variance: number\n        Read-only property which returns the variance.\n\n    arcsine.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    arcsine.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    arcsine.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    arcsine.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var arcsine = base.dist.arcsine.Arcsine( 0.0, 1.0 );\n    > arcsine.a\n    0.0\n    > arcsine.b\n    1.0\n    > arcsine.entropy\n    ~-0.241\n    > arcsine.kurtosis\n    -1.5\n    > arcsine.mean\n    0.5\n    > arcsine.median\n    0.5\n    > arcsine.mode\n    0.0\n    > arcsine.skewness\n    0.0\n    > arcsine.stdev\n    ~0.354\n    > arcsine.variance\n    0.125\n    > arcsine.cdf( 0.8 )\n    ~0.705\n    > arcsine.logpdf( 1.0 )\n    ~-0.228\n    > arcsine.pdf( 0.8 )\n    ~0.796\n    > arcsine.quantile( 0.8 )\n    ~0.905\n\n",
	"base.dist.arcsine.cdf": "\nbase.dist.arcsine.cdf( x, a, b )\n    Evaluates the cumulative distribution function (CDF) for an arcsine\n    distribution with minimum support `a` and maximum support `b` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.arcsine.cdf( 9.0, 0.0, 10.0 )\n    ~0.795\n    > y = base.dist.arcsine.cdf( 0.5, 0.0, 2.0 )\n    ~0.333\n    > y = base.dist.arcsine.cdf( PINF, 2.0, 4.0 )\n    1.0\n    > y = base.dist.arcsine.cdf( NINF, 2.0, 4.0 )\n    0.0\n    > y = base.dist.arcsine.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.arcsine.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.arcsine.cdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.arcsine.cdf( 2.0, 1.0, 0.0 )\n    NaN\n\n\nbase.dist.arcsine.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an arcsine distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.arcsine.cdf.factory( 0.0, 10.0 );\n    > var y = mycdf( 0.5 )\n    ~0.144\n    > y = mycdf( 8.0 )\n    ~0.705\n\n",
	"base.dist.arcsine.entropy": "\nbase.dist.arcsine.entropy( a, b )\n    Returns the differential entropy of an arcsine distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.arcsine.entropy( 0.0, 1.0 )\n    ~-0.242\n    > v = base.dist.arcsine.entropy( 4.0, 12.0 )\n    ~1.838\n    > v = base.dist.arcsine.entropy( 2.0, 8.0 )\n    ~1.55\n\n",
	"base.dist.arcsine.kurtosis": "\nbase.dist.arcsine.kurtosis( a, b )\n    Returns the excess kurtosis of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.arcsine.kurtosis( 0.0, 1.0 )\n    -1.5\n    > v = base.dist.arcsine.kurtosis( 4.0, 12.0 )\n    -1.5\n    > v = base.dist.arcsine.kurtosis( 2.0, 8.0 )\n    -1.5\n\n",
	"base.dist.arcsine.logpdf": "\nbase.dist.arcsine.logpdf( x, a, b )\n    Evaluates the logarithm of the probability density function (PDF) for an\n    arcsine distribution with minimum support `a` and maximum support `b` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.arcsine.logpdf( 2.0, 0.0, 4.0 )\n    ~-1.838\n    > y = base.dist.arcsine.logpdf( 5.0, 0.0, 4.0 )\n    -infinity\n    > y = base.dist.arcsine.logpdf( 0.25, 0.0, 1.0 )\n    ~-0.308\n    > y = base.dist.arcsine.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.arcsine.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.arcsine.logpdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.arcsine.logpdf( 2.0, 3.0, 1.0 )\n    NaN\n\n\nbase.dist.arcsine.logpdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of an arcsine distribution with minimum support `a` and\n    maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dist.arcsine.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 7.0 )\n    infinity\n    > y = mylogPDF( 5.0 )\n    -infinity\n\n",
	"base.dist.arcsine.mean": "\nbase.dist.arcsine.mean( a, b )\n    Returns the expected value of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.arcsine.mean( 0.0, 1.0 )\n    0.5\n    > v = base.dist.arcsine.mean( 4.0, 12.0 )\n    8.0\n    > v = base.dist.arcsine.mean( 2.0, 8.0 )\n    5.0\n\n",
	"base.dist.arcsine.median": "\nbase.dist.arcsine.median( a, b )\n    Returns the median of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.arcsine.median( 0.0, 1.0 )\n    0.5\n    > v = base.dist.arcsine.median( 4.0, 12.0 )\n    8.0\n    > v = base.dist.arcsine.median( 2.0, 8.0 )\n    5.0\n\n",
	"base.dist.arcsine.mode": "\nbase.dist.arcsine.mode( a, b )\n    Returns the mode of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.arcsine.mode( 0.0, 1.0 )\n    0.0\n    > v = base.dist.arcsine.mode( 4.0, 12.0 )\n    4.0\n    > v = base.dist.arcsine.mode( 2.0, 8.0 )\n    2.0\n\n",
	"base.dist.arcsine.pdf": "\nbase.dist.arcsine.pdf( x, a, b )\n    Evaluates the probability density function (PDF) for an arcsine distribution\n    with minimum support `a` and maximum support `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.arcsine.pdf( 2.0, 0.0, 4.0 )\n    ~0.159\n    > y = base.dist.arcsine.pdf( 5.0, 0.0, 4.0 )\n    0.0\n    > y = base.dist.arcsine.pdf( 0.25, 0.0, 1.0 )\n    ~0.735\n    > y = base.dist.arcsine.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.arcsine.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.arcsine.pdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.arcsine.pdf( 2.0, 3.0, 1.0 )\n    NaN\n\n\nbase.dist.arcsine.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF) of\n    an arcsine distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.arcsine.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    infinity\n    > y = myPDF( 5.0 )\n    0.0\n\n",
	"base.dist.arcsine.quantile": "\nbase.dist.arcsine.quantile( p, a, b )\n    Evaluates the quantile function for an arcsine distribution with minimum\n    support `a` and maximum support `b` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.arcsine.quantile( 0.8, 0.0, 1.0 )\n    ~0.905\n    > y = base.dist.arcsine.quantile( 0.5, 0.0, 10.0 )\n    ~5.0\n\n    > y = base.dist.arcsine.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.arcsine.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.arcsine.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.arcsine.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.arcsine.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dist.arcsine.quantile( 0.5, 2.0, 1.0 )\n    NaN\n\n\nbase.dist.arcsine.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of an arcsine\n    distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.arcsine.quantile.factory( 0.0, 4.0 );\n    > var y = myQuantile( 0.8 )\n    ~3.618\n\n",
	"base.dist.arcsine.skewness": "\nbase.dist.arcsine.skewness( a, b )\n    Returns the skewness of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.arcsine.skewness( 0.0, 1.0 )\n    0.0\n    > v = base.dist.arcsine.skewness( 4.0, 12.0 )\n    0.0\n    > v = base.dist.arcsine.skewness( 2.0, 8.0 )\n    0.0\n\n",
	"base.dist.arcsine.stdev": "\nbase.dist.arcsine.stdev( a, b )\n    Returns the standard deviation of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.arcsine.stdev( 0.0, 1.0 )\n    ~0.354\n    > v = base.dist.arcsine.stdev( 4.0, 12.0 )\n    ~2.828\n    > v = base.dist.arcsine.stdev( 2.0, 8.0 )\n    ~2.121\n\n",
	"base.dist.arcsine.variance": "\nbase.dist.arcsine.variance( a, b )\n    Returns the variance of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.arcsine.variance( 0.0, 1.0 )\n    ~0.125\n    > v = base.dist.arcsine.variance( 4.0, 12.0 )\n    8.0\n    > v = base.dist.arcsine.variance( 2.0, 8.0 )\n    ~4.5\n\n",
	"base.dist.beta.Beta": "\nbase.dist.beta.Beta( [α, β] )\n    Returns a beta distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Second shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    beta: Object\n        Distribution instance.\n\n    beta.alpha: number\n        First shape parameter. If set, the value must be greater than `0`.\n\n    beta.beta: number\n        Second shape parameter. If set, the value must be greater than `0`.\n\n    beta.entropy: number\n        Read-only property which returns the differential entropy.\n\n    beta.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    beta.mean: number\n        Read-only property which returns the expected value.\n\n    beta.median: number\n        Read-only property which returns the median.\n\n    beta.mode: number\n        Read-only property which returns the mode.\n\n    beta.skewness: number\n        Read-only property which returns the skewness.\n\n    beta.stdev: number\n        Read-only property which returns the standard deviation.\n\n    beta.variance: number\n        Read-only property which returns the variance.\n\n    beta.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    beta.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    beta.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    beta.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    beta.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var beta = base.dist.beta.Beta( 1.0, 1.0 );\n    > beta.alpha\n    1.0\n    > beta.beta\n    1.0\n    > beta.entropy\n    0.0\n    > beta.kurtosis\n    -1.2\n    > beta.mean\n    0.5\n    > beta.median\n    0.5\n    > beta.mode\n    NaN\n    > beta.skewness\n    0.0\n    > beta.stdev\n    ~0.289\n    > beta.variance\n    ~0.0833\n    > beta.cdf( 0.8 )\n    0.8\n    > beta.logpdf( 1.0 )\n    0.0\n    > beta.mgf( 3.14 )\n    ~7.0394\n    > beta.pdf( 1.0 )\n    1.0\n    > beta.quantile( 0.8 )\n    0.8\n\n",
	"base.dist.beta.cdf": "\nbase.dist.beta.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for a beta distribution\n    with first shape parameter `α` and second shape parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.beta.cdf( 0.5, 1.0, 1.0 )\n    0.5\n    > y = base.dist.beta.cdf( 0.5, 2.0, 4.0 )\n    ~0.813\n    > y = base.dist.beta.cdf( 0.2, 2.0, 2.0 )\n    ~0.104\n    > y = base.dist.beta.cdf( 0.8, 4.0, 4.0 )\n    ~0.967\n    > y = base.dist.beta.cdf( -0.5, 4.0, 2.0 )\n    0.0\n    > y = base.dist.beta.cdf( 1.5, 4.0, 2.0 )\n    1.0\n\n    > y = base.dist.beta.cdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dist.beta.cdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.beta.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.beta.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.beta.cdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dist.beta.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a beta distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.beta.cdf.factory( 0.5, 0.5 );\n    > var y = mycdf( 0.8 )\n    ~0.705\n    > y = mycdf( 0.3 )\n    ~0.369\n\n",
	"base.dist.beta.entropy": "\nbase.dist.beta.entropy( α, β )\n    Returns the differential entropy of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Differential entropy.\n\n    Examples\n    --------\n    > var v = base.dist.beta.entropy( 1.0, 1.0 )\n    0.0\n    > v = base.dist.beta.entropy( 4.0, 12.0 )\n    ~-0.869\n    > v = base.dist.beta.entropy( 8.0, 2.0 )\n    ~-0.795\n\n    > v = base.dist.beta.entropy( 1.0, -0.1 )\n    NaN\n    > v = base.dist.beta.entropy( -0.1, 1.0 )\n    NaN\n\n    > v = base.dist.beta.entropy( 2.0, NaN )\n    NaN\n    > v = base.dist.beta.entropy( NaN, 2.0 )\n    NaN\n\n",
	"base.dist.beta.kurtosis": "\nbase.dist.beta.kurtosis( α, β )\n    Returns the excess kurtosis of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.beta.kurtosis( 1.0, 1.0 )\n    -1.2\n    > v = base.dist.beta.kurtosis( 4.0, 12.0 )\n    ~0.082\n    > v = base.dist.beta.kurtosis( 8.0, 2.0 )\n    ~-0.490\n\n    > v = base.dist.beta.kurtosis( 1.0, -0.1 )\n    NaN\n    > v = base.dist.beta.kurtosis( -0.1, 1.0 )\n    NaN\n\n    > v = base.dist.beta.kurtosis( 2.0, NaN )\n    NaN\n    > v = base.dist.beta.kurtosis( NaN, 2.0 )\n    NaN\n\n",
	"base.dist.beta.logpdf": "\nbase.dist.beta.logpdf( x, α, β )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a beta distribution with first shape parameter `α` and second shape\n    parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var y = base.dist.beta.logpdf( 0.5, 1.0, 1.0 )\n    0.0\n    > y = base.dist.beta.logpdf( 0.5, 2.0, 4.0 )\n    ~0.223\n    > y = base.dist.beta.logpdf( 0.2, 2.0, 2.0 )\n    ~-0.041\n    > y = base.dist.beta.logpdf( 0.8, 4.0, 4.0 )\n    ~-0.557\n    > y = base.dist.beta.logpdf( -0.5, 4.0, 2.0 )\n    -infinity\n    > y = base.dist.beta.logpdf( 1.5, 4.0, 2.0 )\n    -infinity\n\n    > y = base.dist.beta.logpdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dist.beta.logpdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.beta.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.beta.logpdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.beta.logpdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dist.beta.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a beta distribution with first shape parameter `α`\n    and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    fcn: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogpdf = base.dist.beta.logpdf.factory( 0.5, 0.5 );\n    > var y = mylogpdf( 0.8 )\n    ~-0.228\n    > y = mylogpdf( 0.3 )\n    ~-0.364\n\n",
	"base.dist.beta.mean": "\nbase.dist.beta.mean( α, β )\n    Returns the expected value of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.beta.mean( 1.0, 1.0 )\n    0.5\n    > v = base.dist.beta.mean( 4.0, 12.0 )\n    0.25\n    > v = base.dist.beta.mean( 8.0, 2.0 )\n    0.8\n\n",
	"base.dist.beta.median": "\nbase.dist.beta.median( α, β )\n    Returns the median of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.beta.median( 1.0, 1.0 )\n    0.5\n    > v = base.dist.beta.median( 4.0, 12.0 )\n    ~0.239\n    > v = base.dist.beta.median( 8.0, 2.0 )\n    ~0.820\n\n    > v = base.dist.beta.median( 1.0, -0.1 )\n    NaN\n    > v = base.dist.beta.median( -0.1, 1.0 )\n    NaN\n\n    > v = base.dist.beta.median( 2.0, NaN )\n    NaN\n    > v = base.dist.beta.median( NaN, 2.0 )\n    NaN\n\n",
	"base.dist.beta.mgf": "\nbase.dist.beta.mgf( t, α, β )\n    Evaluates the moment-generating function (MGF) for a beta distribution with\n    first shape parameter `α` and second shape parameter `β` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.beta.mgf( 0.5, 1.0, 1.0 )\n    ~1.297\n    > y = base.dist.beta.mgf( 0.5, 2.0, 4.0 )\n    ~1.186\n    > y = base.dist.beta.mgf( 3.0, 2.0, 2.0 )\n    ~5.575\n    > y = base.dist.beta.mgf( -0.8, 4.0, 4.0 )\n    ~0.676\n\n    > y = base.dist.beta.mgf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.beta.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.beta.mgf( 0.0, 1.0, NaN )\n    NaN\n\n    > y = base.dist.beta.mgf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dist.beta.mgf( 2.0, 0.0, 0.5 )\n    NaN\n\n    > y = base.dist.beta.mgf( 2.0, 0.5, -1.0 )\n    NaN\n    > y = base.dist.beta.mgf( 2.0, 0.5, 0.0 )\n    NaN\n\n\nbase.dist.beta.mgf.factory( α, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    beta distribution with first shape parameter `α` and second shape parameter\n    `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.beta.mgf.factory( 0.5, 0.5 );\n    > var y = myMGF( 0.8 )\n    ~1.522\n    > y = myMGF( 0.3 )\n    ~1.168\n\n",
	"base.dist.beta.mode": "\nbase.dist.beta.mode( α, β )\n    Returns the mode of a beta distribution.\n\n    If `α <= 1` or `β <= 1`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.beta.mode( 4.0, 12.0 )\n    ~0.214\n    > v = base.dist.beta.mode( 8.0, 2.0 )\n    ~0.875\n    > v = base.dist.beta.mode( 1.0, 1.0 )\n    NaN\n\n",
	"base.dist.beta.pdf": "\nbase.dist.beta.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for a beta distribution\n    with first shape parameter `α` and second shape parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.beta.pdf( 0.5, 1.0, 1.0 )\n    1.0\n    > y = base.dist.beta.pdf( 0.5, 2.0, 4.0 )\n    1.25\n    > y = base.dist.beta.pdf( 0.2, 2.0, 2.0 )\n    ~0.96\n    > y = base.dist.beta.pdf( 0.8, 4.0, 4.0 )\n    ~0.573\n    > y = base.dist.beta.pdf( -0.5, 4.0, 2.0 )\n    0.0\n    > y = base.dist.beta.pdf( 1.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.beta.pdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dist.beta.pdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.beta.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.beta.pdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.beta.pdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dist.beta.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a beta distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dist.beta.pdf.factory( 0.5, 0.5 );\n    > var y = mypdf( 0.8 )\n    ~0.796\n    > y = mypdf( 0.3 )\n    ~0.695\n\n",
	"base.dist.beta.quantile": "\nbase.dist.beta.quantile( p, α, β )\n    Evaluates the quantile function for a beta distribution with first shape\n    parameter `α` and second shape parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input value (probability).\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.beta.quantile( 0.8, 2.0, 1.0 )\n    ~0.894\n    > y = base.dist.beta.quantile( 0.5, 4.0, 2.0 )\n    ~0.686\n    > y = base.dist.beta.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dist.beta.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dist.beta.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.beta.quantile( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.beta.quantile( 0.5, 1.0, NaN )\n    NaN\n\n    > y = base.dist.beta.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    > y = base.dist.beta.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.beta.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a beta\n    distribution with first shape parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dist.beta.quantile.factory( 2.0, 2.0 );\n    > y = myquantile( 0.8 )\n    ~0.713\n    > y = myquantile( 0.4 )\n    ~0.5\n\n",
	"base.dist.beta.skewness": "\nbase.dist.beta.skewness( α, β )\n    Returns the skewness of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.beta.skewness( 1.0, 1.0 )\n    0.0\n    > v = base.dist.beta.skewness( 4.0, 12.0 )\n    ~0.529\n    > v = base.dist.beta.skewness( 8.0, 2.0 )\n    ~-0.829\n\n    > v = base.dist.beta.skewness( 1.0, -0.1 )\n    NaN\n    > v = base.dist.beta.skewness( -0.1, 1.0 )\n    NaN\n\n    > v = base.dist.beta.skewness( 2.0, NaN )\n    NaN\n    > v = base.dist.beta.skewness( NaN, 2.0 )\n    NaN\n\n",
	"base.dist.beta.stdev": "\nbase.dist.beta.stdev( α, β )\n    Returns the standard deviation of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.beta.stdev( 1.0, 1.0 )\n    ~0.289\n    > v = base.dist.beta.stdev( 4.0, 12.0 )\n    ~0.105\n    > v = base.dist.beta.stdev( 8.0, 2.0 )\n    ~0.121\n\n    > v = base.dist.beta.stdev( 1.0, -0.1 )\n    NaN\n    > v = base.dist.beta.stdev( -0.1, 1.0 )\n    NaN\n\n    > v = base.dist.beta.stdev( 2.0, NaN )\n    NaN\n    > v = base.dist.beta.stdev( NaN, 2.0 )\n    NaN\n\n",
	"base.dist.beta.variance": "\nbase.dist.beta.variance( α, β )\n    Returns the variance of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.beta.variance( 1.0, 1.0 )\n    ~0.083\n    > v = base.dist.beta.variance( 4.0, 12.0 )\n    ~0.011\n    > v = base.dist.beta.variance( 8.0, 2.0 )\n    ~0.015\n\n    > v = base.dist.beta.variance( 1.0, -0.1 )\n    NaN\n    > v = base.dist.beta.variance( -0.1, 1.0 )\n    NaN\n\n    > v = base.dist.beta.variance( 2.0, NaN )\n    NaN\n    > v = base.dist.beta.variance( NaN, 2.0 )\n    NaN\n\n",
	"base.dist.betaprime.BetaPrime": "\nbase.dist.betaprime.BetaPrime( [α, β] )\n    Returns a beta prime distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Second shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    betaprime: Object\n        Distribution instance.\n\n    betaprime.alpha: number\n        First shape parameter. If set, the value must be greater than `0`.\n\n    betaprime.beta: number\n        Second shape parameter. If set, the value must be greater than `0`.\n\n    betaprime.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    betaprime.mean: number\n        Read-only property which returns the expected value.\n\n    betaprime.mode: number\n        Read-only property which returns the mode.\n\n    betaprime.skewness: number\n        Read-only property which returns the skewness.\n\n    betaprime.stdev: number\n        Read-only property which returns the standard deviation.\n\n    betaprime.variance: number\n        Read-only property which returns the variance.\n\n    betaprime.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    betaprime.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    betaprime.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    betaprime.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var betaprime = base.dist.betaprime.BetaPrime( 6.0, 5.0 );\n    > betaprime.alpha\n    6.0\n    > betaprime.beta\n    5.0\n    > betaprime.kurtosis\n    44.4\n    > betaprime.mean\n    1.5\n    > betaprime.mode\n    ~0.833\n    > betaprime.skewness\n    ~3.578\n    > betaprime.stdev\n    ~1.118\n    > betaprime.variance\n    1.25\n    > betaprime.cdf( 0.8 )\n    ~0.25\n    > betaprime.logpdf( 1.0 )\n    ~-0.486\n    > betaprime.pdf( 1.0 )\n    ~0.614\n    > betaprime.quantile( 0.8 )\n    ~2.06\n\n",
	"base.dist.betaprime.cdf": "\nbase.dist.betaprime.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for a beta prime\n    distribution with first shape parameter `α` and second shape parameter `β`\n    at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.betaprime.cdf( 0.5, 1.0, 1.0 )\n    ~0.333\n    > y = base.dist.betaprime.cdf( 0.5, 2.0, 4.0 )\n    ~0.539\n    > y = base.dist.betaprime.cdf( 0.2, 2.0, 2.0 )\n    ~0.074\n    > y = base.dist.betaprime.cdf( 0.8, 4.0, 4.0 )\n    ~0.38\n    > y = base.dist.betaprime.cdf( -0.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.betaprime.cdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dist.betaprime.cdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.betaprime.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.betaprime.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.betaprime.cdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dist.betaprime.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a beta prime distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.betaprime.cdf.factory( 0.5, 0.5 );\n    > var y = mycdf( 0.8 )\n    ~0.465\n    > y = mycdf( 0.3 )\n    ~0.319\n\n",
	"base.dist.betaprime.kurtosis": "\nbase.dist.betaprime.kurtosis( α, β )\n    Returns the excess kurtosis of a beta prime distribution.\n\n    If `α <= 0` or `β <= 4`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.betaprime.kurtosis( 2.0, 6.0 )\n    ~26.143\n    > v = base.dist.betaprime.kurtosis( 4.0, 12.0 )\n    ~5.764\n    > v = base.dist.betaprime.kurtosis( 8.0, 6.0 )\n    ~19.962\n\n    > v = base.dist.betaprime.kurtosis( 1.0, 2.8 )\n    NaN\n    > v = base.dist.betaprime.kurtosis( 1.0, -0.1 )\n    NaN\n    > v = base.dist.betaprime.kurtosis( -0.1, 5.0 )\n    NaN\n\n    > v = base.dist.betaprime.kurtosis( 2.0, NaN )\n    NaN\n    > v = base.dist.betaprime.kurtosis( NaN, 6.0 )\n    NaN\n\n",
	"base.dist.betaprime.logpdf": "\nbase.dist.betaprime.logpdf( x, α, β )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a beta prime distribution with first shape parameter `α` and second\n    shape parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var y = base.dist.betaprime.logpdf( 0.5, 1.0, 1.0 )\n    ~-0.811\n    > y = base.dist.betaprime.logpdf( 0.5, 2.0, 4.0 )\n    ~-0.13\n    > y = base.dist.betaprime.logpdf( 0.2, 2.0, 2.0 )\n    ~-0.547\n    > y = base.dist.betaprime.logpdf( 0.8, 4.0, 4.0 )\n    ~-0.43\n    > y = base.dist.betaprime.logpdf( -0.5, 4.0, 2.0 )\n    -infinity\n\n    > y = base.dist.betaprime.logpdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dist.betaprime.logpdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.betaprime.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.betaprime.logpdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.betaprime.logpdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dist.betaprime.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a beta prime distribution with first shape\n    parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    fcn: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogpdf = base.dist.betaprime.logpdf.factory( 0.5, 0.5 );\n    > var y = mylogpdf( 0.8 )\n    ~-1.62\n    > y = mylogpdf( 0.3 )\n    ~-0.805\n\n",
	"base.dist.betaprime.mean": "\nbase.dist.betaprime.mean( α, β )\n    Returns the expected value of a beta prime distribution.\n\n    If `α <= 0` or `β <= 1`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.betaprime.mean( 1.0, 2.0 )\n    1.0\n    > v = base.dist.betaprime.mean( 4.0, 12.0 )\n    ~0.364\n    > v = base.dist.betaprime.mean( 8.0, 2.0 )\n    8.0\n\n",
	"base.dist.betaprime.mode": "\nbase.dist.betaprime.mode( α, β )\n    Returns the mode of a beta prime distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.betaprime.mode( 1.0, 2.0 )\n    0.0\n    > v = base.dist.betaprime.mode( 4.0, 12.0 )\n    ~0.231\n    > v = base.dist.betaprime.mode( 8.0, 2.0 )\n    ~2.333\n\n",
	"base.dist.betaprime.pdf": "\nbase.dist.betaprime.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for a beta prime\n    distribution  with first shape parameter `α` and second shape parameter `β`\n    at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.betaprime.pdf( 0.5, 1.0, 1.0 )\n    ~0.444\n    > y = base.dist.betaprime.pdf( 0.5, 2.0, 4.0 )\n    ~0.878\n    > y = base.dist.betaprime.pdf( 0.2, 2.0, 2.0 )\n    ~0.579\n    > y = base.dist.betaprime.pdf( 0.8, 4.0, 4.0 )\n    ~0.65\n    > y = base.dist.betaprime.pdf( -0.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.betaprime.pdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dist.betaprime.pdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.betaprime.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.betaprime.pdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.betaprime.pdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dist.betaprime.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a beta prime distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dist.betaprime.pdf.factory( 0.5, 0.5 );\n    > var y = mypdf( 0.8 )\n    ~0.198\n    > y = mypdf( 0.3 )\n    ~0.447\n\n",
	"base.dist.betaprime.quantile": "\nbase.dist.betaprime.quantile( p, α, β )\n    Evaluates the quantile function for a beta prime distribution with first\n    shape parameter `α` and second shape parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input value (probability).\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.betaprime.quantile( 0.8, 2.0, 1.0 )\n    ~8.472\n    > y = base.dist.betaprime.quantile( 0.5, 4.0, 2.0 )\n    ~2.187\n    > y = base.dist.betaprime.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dist.betaprime.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dist.betaprime.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.betaprime.quantile( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.betaprime.quantile( 0.5, 1.0, NaN )\n    NaN\n\n    > y = base.dist.betaprime.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    > y = base.dist.betaprime.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.betaprime.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a beta prime\n    distribution with first shape parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.betaprime.quantile.factory( 2.0, 2.0 );\n    > y = myQuantile( 0.8 )\n    ~2.483\n    > y = myQuantile( 0.4 )\n    ~0.763\n\n",
	"base.dist.betaprime.skewness": "\nbase.dist.betaprime.skewness( α, β )\n    Returns the skewness of a beta prime distribution.\n\n    If `α <= 0` or `β <= 3`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.betaprime.skewness( 2.0, 4.0 )\n    ~6.261\n    > v = base.dist.betaprime.skewness( 4.0, 12.0 )\n    ~1.724\n    > v = base.dist.betaprime.skewness( 8.0, 4.0 )\n    ~5.729\n\n    > v = base.dist.betaprime.skewness( 1.0, 2.8 )\n    NaN\n    > v = base.dist.betaprime.skewness( 1.0, -0.1 )\n    NaN\n    > v = base.dist.betaprime.skewness( -0.1, 4.0 )\n    NaN\n\n    > v = base.dist.betaprime.skewness( 2.0, NaN )\n    NaN\n    > v = base.dist.betaprime.skewness( NaN, 4.0 )\n    NaN\n\n",
	"base.dist.betaprime.stdev": "\nbase.dist.betaprime.stdev( α, β )\n    Returns the standard deviation of a beta prime distribution.\n\n    If `α <= 0` or `β <= 2`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.betaprime.stdev( 1.0, 2.5 )\n    ~1.491\n    > v = base.dist.betaprime.stdev( 4.0, 12.0 )\n    ~0.223\n    > v = base.dist.betaprime.stdev( 8.0, 2.5 )\n    ~8.219\n\n    > v = base.dist.betaprime.stdev( 8.0, 1.0 )\n    NaN\n    > v = base.dist.betaprime.stdev( 1.0, -0.1 )\n    NaN\n    > v = base.dist.betaprime.stdev( -0.1, 3.0 )\n    NaN\n\n    > v = base.dist.betaprime.stdev( 2.0, NaN )\n    NaN\n    > v = base.dist.betaprime.stdev( NaN, 3.0 )\n    NaN\n\n",
	"base.dist.betaprime.variance": "\nbase.dist.betaprime.variance( α, β )\n    Returns the variance of a beta prime distribution.\n\n    If `α <= 0` or `β <= 2`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.betaprime.variance( 1.0, 2.5 )\n    ~2.222\n    > v = base.dist.betaprime.variance( 4.0, 12.0 )\n    ~0.05\n    > v = base.dist.betaprime.variance( 8.0, 2.5 )\n    ~67.556\n\n    > v = base.dist.betaprime.variance( 8.0, 1.0 )\n    NaN\n    > v = base.dist.betaprime.variance( 1.0, -0.1 )\n    NaN\n    > v = base.dist.betaprime.variance( -0.1, 3.0 )\n    NaN\n\n    > v = base.dist.betaprime.variance( 2.0, NaN )\n    NaN\n    > v = base.dist.betaprime.variance( NaN, 3.0 )\n    NaN\n\n",
	"base.dist.binomial.Binomial": "\nbase.dist.binomial.Binomial( [n, p] )\n    Returns a binomial distribution object.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials. Must be a positive integer. Default: `1`.\n\n    p: number (optional)\n        Success probability. Must be a number between `0` and `1`. Default:\n        `0.5`.\n\n    Returns\n    -------\n    binomial: Object\n        Distribution instance.\n\n    binomial.n: number\n        Number of trials. If set, the value must be a positive integer.\n\n    binomial.p: number\n        Success probability. If set, the value must be a number between `0` and\n        `1`.\n\n    binomial.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    binomial.mean: number\n        Read-only property which returns the expected value.\n\n    binomial.median: number\n        Read-only property which returns the median.\n\n    binomial.mode: number\n        Read-only property which returns the mode.\n\n    binomial.skewness: number\n        Read-only property which returns the skewness.\n\n    binomial.stdev: number\n        Read-only property which returns the standard deviation.\n\n    binomial.variance: number\n        Read-only property which returns the variance.\n\n    binomial.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    binomial.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    binomial.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    binomial.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var binomial = base.dist.binomial.Binomial( 8, 0.5 );\n    > binomial.n\n    8.0\n    > binomial.p\n    0.5\n    > binomial.kurtosis\n    -0.25\n    > binomial.mean\n    4.0\n    > binomial.median\n    4.0\n    > binomial.mode\n    4.0\n    > binomial.skewness\n    0.0\n    > binomial.stdev\n    ~1.414\n    > binomial.variance\n    2.0\n    > binomial.cdf( 2.9 )\n    ~0.145\n    > binomial.mgf( 0.2 )\n    ~0.219\n    > binomial.pmf( 3.0 )\n    ~0.219\n    > binomial.quantile( 0.8 )\n    5.0\n\n",
	"base.dist.binomial.cdf": "\nbase.dist.binomial.cdf( x, n, p )\n    Evaluates the cumulative distribution function (CDF) for a binomial\n    distribution with number of trials `n` and success probability `p` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.binomial.cdf( 3.0, 20, 0.2 )\n    ~0.411\n    > y = base.dist.binomial.cdf( 21.0, 20, 0.2 )\n    1.0\n    > y = base.dist.binomial.cdf( 5.0, 10, 0.4 )\n    ~0.834\n    > y = base.dist.binomial.cdf( 0.0, 10, 0.4 )\n    ~0.06\n    > y = base.dist.binomial.cdf( NaN, 20, 0.5 )\n    NaN\n    > y = base.dist.binomial.cdf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.binomial.cdf( 0.0, 20, NaN )\n    NaN\n    > y = base.dist.binomial.cdf( 2.0, 1.5, 0.5 )\n    NaN\n    > y = base.dist.binomial.cdf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dist.binomial.cdf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dist.binomial.cdf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dist.binomial.cdf.factory( n, p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a binomial distribution with number of trials `n` and success probability\n    `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.binomial.cdf.factory( 10, 0.5 );\n    > var y = mycdf( 3.0 )\n    ~0.172\n    > y = mycdf( 1.0 )\n    ~0.011\n\n",
	"base.dist.binomial.entropy": "\nbase.dist.binomial.entropy( n, p )\n    Returns the entropy of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.binomial.entropy( 100, 0.1 )\n    ~0.051\n    > v = base.dist.binomial.entropy( 20, 0.5 )\n    ~-0.1\n    > v = base.dist.binomial.entropy( 10.3, 0.5 )\n    NaN\n    > v = base.dist.binomial.entropy( 20, 1.1 )\n    NaN\n    > v = base.dist.binomial.entropy( 20, NaN )\n    NaN\n\n",
	"base.dist.binomial.kurtosis": "\nbase.dist.binomial.kurtosis( n, p )\n    Returns the excess kurtosis of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.binomial.kurtosis( 100, 0.1 )\n    ~0.051\n    > v = base.dist.binomial.kurtosis( 20, 0.5 )\n    ~-0.1\n    > v = base.dist.binomial.kurtosis( 10.3, 0.5 )\n    NaN\n    > v = base.dist.binomial.kurtosis( 20, 1.1 )\n    NaN\n    > v = base.dist.binomial.kurtosis( 20, NaN )\n    NaN\n\n",
	"base.dist.binomial.mean": "\nbase.dist.binomial.mean( n, p )\n    Returns the expected value of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.binomial.mean( 100, 0.1 )\n    10.0\n    > v = base.dist.binomial.mean( 20, 0.5 )\n    10.0\n    > v = base.dist.binomial.mean( 10.3, 0.5 )\n    NaN\n    > v = base.dist.binomial.mean( 20, 1.1 )\n    NaN\n    > v = base.dist.binomial.mean( 20, NaN )\n    NaN\n\n",
	"base.dist.binomial.median": "\nbase.dist.binomial.median( n, p )\n    Returns the median of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.binomial.median( 100, 0.1 )\n    10\n    > v = base.dist.binomial.median( 20, 0.5 )\n    10\n    > v = base.dist.binomial.median( 10.3, 0.5 )\n    NaN\n    > v = base.dist.binomial.median( 20, 1.1 )\n    NaN\n    > v = base.dist.binomial.median( 20, NaN )\n    NaN\n\n",
	"base.dist.binomial.mgf": "\nbase.dist.binomial.mgf( t, n, p )\n    Evaluates the moment-generating function (MGF) for a binomial distribution\n    with number of trials `n` and success probability `p` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.binomial.mgf( 0.5, 20, 0.2 )\n    ~11.471\n    > y = base.dist.binomial.mgf( 5.0, 20, 0.2 )\n    ~4.798e29\n    > y = base.dist.binomial.mgf( 0.9, 10, 0.4 )\n    ~99.338\n    > y = base.dist.binomial.mgf( 0.0, 10, 0.4 )\n    1.0\n\n    > y = base.dist.binomial.mgf( NaN, 20, 0.5 )\n    NaN\n    > y = base.dist.binomial.mgf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.binomial.mgf( 0.0, 20, NaN )\n    NaN\n\n    > y = base.dist.binomial.mgf( 2.0, 1.5, 0.5 )\n    NaN\n    > y = base.dist.binomial.mgf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dist.binomial.mgf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dist.binomial.mgf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dist.binomial.mgf.factory( n, p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    binomial distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = factory( 10, 0.5 );\n    > var y = myMGF( 0.3 )\n    ~5.013\n\n",
	"base.dist.binomial.mode": "\nbase.dist.binomial.mode( n, p )\n    Returns the mode of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.binomial.mode( 100, 0.1 )\n    10\n    > v = base.dist.binomial.mode( 20, 0.5 )\n    10\n    > v = base.dist.binomial.mode( 10.3, 0.5 )\n    NaN\n    > v = base.dist.binomial.mode( 20, 1.1 )\n    NaN\n    > v = base.dist.binomial.mode( 20, NaN )\n    NaN\n\n",
	"base.dist.binomial.pmf": "\nbase.dist.binomial.pmf( x, n, p )\n    Evaluates the probability mass function (PMF) for a binomial distribution\n    with number of trials `n` and success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dist.binomial.pmf( 3.0, 20, 0.2 )\n    ~0.205\n    > y = base.dist.binomial.pmf( 21.0, 20, 0.2 )\n    0.0\n    > y = base.dist.binomial.pmf( 5.0, 10, 0.4 )\n    ~0.201\n    > y = base.dist.binomial.pmf( 0.0, 10, 0.4 )\n    ~0.06\n    > y = base.dist.binomial.pmf( NaN, 20, 0.5 )\n    NaN\n    > y = base.dist.binomial.pmf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.binomial.pmf( 0.0, 20, NaN )\n    NaN\n    > y = base.dist.binomial.pmf( 2.0, 1.5, 0.5 )\n    NaN\n    > y = base.dist.binomial.pmf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dist.binomial.pmf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dist.binomial.pmf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dist.binomial.pmf.factory( n, p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    binomial distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dist.binomial.pmf.factory( 10, 0.5 );\n    > var y = mypmf( 3.0 )\n    ~0.117\n    > y = mypmf( 5.0 )\n    ~0.246\n\n",
	"base.dist.binomial.quantile": "\nbase.dist.binomial.quantile( r, n, p )\n    Evaluates the quantile function for a binomial distribution with number of\n    trials `n` and success probability `p` at a probability `r`.\n\n    If `r < 0` or `r > 1`, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: number\n        Input probability.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.binomial.quantile( 0.4, 20, 0.2 )\n    2\n    > y = base.dist.binomial.quantile( 0.8, 20, 0.2 )\n    5\n    > y = base.dist.binomial.quantile( 0.5, 10, 0.4 )\n    4\n    > y = base.dist.binomial.quantile( 0.0, 10, 0.4 )\n    0\n    > y = base.dist.binomial.quantile( 1.0, 10, 0.4 )\n    10\n\n    > y = base.dist.binomial.quantile( NaN, 20, 0.5 )\n    NaN\n    > y = base.dist.binomial.quantile( 0.2, NaN, 0.5 )\n    NaN\n    > y = base.dist.binomial.quantile( 0.2, 20, NaN )\n    NaN\n\n    > y = base.dist.binomial.quantile( 0.5, 1.5, 0.5 )\n    NaN\n    > y = base.dist.binomial.quantile( 0.5, -2.0, 0.5 )\n    NaN\n\n    > y = base.dist.binomial.quantile( 0.5, 20, -1.0 )\n    NaN\n    > y = base.dist.binomial.quantile( 0.5, 20, 1.5 )\n    NaN\n\n\nbase.dist.binomial.quantile.factory( n, p )\n    Returns a function for evaluating the quantile function of a binomial\n    distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dist.binomial.quantile.factory( 10, 0.5 );\n    > var y = myquantile( 0.1 )\n    3\n    > y = myquantile( 0.9 )\n    7\n\n",
	"base.dist.binomial.skewness": "\nbase.dist.binomial.skewness( n, p )\n    Returns the skewness of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.binomial.skewness( 100, 0.1 )\n    9\n    > v = base.dist.binomial.skewness( 20, 0.5 )\n    5\n    > v = base.dist.binomial.skewness( 10.3, 0.5 )\n    NaN\n    > v = base.dist.binomial.skewness( 20, 1.1 )\n    NaN\n    > v = base.dist.binomial.skewness( 20, NaN )\n    NaN\n\n",
	"base.dist.binomial.stdev": "\nbase.dist.binomial.stdev( n, p )\n    Returns the standard deviation of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.binomial.stdev( 100, 0.1 )\n    3.0\n    > v = base.dist.binomial.stdev( 20, 0.5 )\n    ~2.236\n    > v = base.dist.binomial.stdev( 10.3, 0.5 )\n    NaN\n    > v = base.dist.binomial.stdev( 20, 1.1 )\n    NaN\n    > v = base.dist.binomial.stdev( 20, NaN )\n    NaN\n\n",
	"base.dist.binomial.variance": "\nbase.dist.binomial.variance( n, p )\n    Returns the variance of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.binomial.variance( 100, 0.1 )\n    9\n    > v = base.dist.binomial.variance( 20, 0.5 )\n    5\n    > v = base.dist.binomial.variance( 10.3, 0.5 )\n    NaN\n    > v = base.dist.binomial.variance( 20, 1.1 )\n    NaN\n    > v = base.dist.binomial.variance( 20, NaN )\n    NaN\n\n",
	"base.dist.cauchy.Cauchy": "\nbase.dist.cauchy.Cauchy( [x0, Ɣ] )\n    Returns a Cauchy distribution object.\n\n    Parameters\n    ----------\n    x0: number (optional)\n        Location parameter. Default: `0.0`.\n\n    Ɣ: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    cauchy: Object\n        Distribution instance.\n\n    cauchy.x0: number\n        Location parameter.\n\n    cauchy.gamma: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    cauchy.entropy: number\n        Read-only property which returns the differential entropy.\n\n    cauchy.median: number\n        Read-only property which returns the median.\n\n    cauchy.mode: number\n        Read-only property which returns the mode.\n\n    cauchy.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    cauchy.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    cauchy.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    cauchy.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    cauchy.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var cauchy = base.dist.cauchy.Cauchy( 0.0, 1.0 );\n    > cauchy.x0\n    0.0\n    > cauchy.gamma\n    1.0\n    > cauchy.entropy\n    ~2.531\n    > cauchy.median\n    1.0\n    > cauchy.mode\n    1.0\n    > cauchy.cdf( 0.8 )\n    ~0.437\n    > cauchy.logcdf( 1.0 )\n    ~-0.693\n    > cauchy.logpdf( 1.0 )\n    ~-1.145\n    > cauchy.pdf( 1.0 )\n    ~0.318\n    > cauchy.quantile( 0.8 )\n    ~2.376\n\n",
	"base.dist.cauchy.cdf": "\nbase.dist.cauchy.cdf( x, x0, Ɣ )\n    Evaluates the cumulative distribution function (CDF) for a Cauchy\n    distribution with location parameter `x0` and scale parameter `Ɣ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.cauchy.cdf( 4.0, 0.0, 2.0 )\n    ~0.852\n    > y = base.dist.cauchy.cdf( 1.0, 0.0, 2.0 )\n    ~0.648\n    > y = base.dist.cauchy.cdf( 1.0, 3.0, 2.0 )\n    0.25\n    > y = base.dist.cauchy.cdf( NaN, 0.0, 2.0 )\n    NaN\n    > y = base.dist.cauchy.cdf( 1.0, 2.0, NaN )\n    NaN\n    > y = base.dist.cauchy.cdf( 1.0, NaN, 3.0 )\n    NaN\n\n\nbase.dist.cauchy.cdf.factory( x0, Ɣ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Cauchy distribution with location parameter `x0` and scale parameter\n    `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.cauchy.cdf.factory( 1.5, 3.0 );\n    > var y = myCDF( 1.0 )\n    ~0.447\n\n",
	"base.dist.cauchy.entropy": "\nbase.dist.cauchy.entropy( x0, Ɣ )\n    Returns the differential entropy of a Cauchy distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.cauchy.entropy( 10.0, 7.0 )\n    ~4.477\n    > v = base.dist.cauchy.entropy( 22.0, 0.5 )\n    ~1.838\n    > v = base.dist.cauchy.entropy( 10.3, -0.5 )\n    NaN\n\n",
	"base.dist.cauchy.logcdf": "\nbase.dist.cauchy.logcdf( x, x0, Ɣ )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (logCDF) for a Cauchy distribution with location parameter `x0` and scale\n    parameter `Ɣ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the CDF.\n\n    Examples\n    --------\n    > var y = base.dist.cauchy.logcdf( 4.0, 0.0, 2.0 )\n    ~-0.16\n    > y = base.dist.cauchy.logcdf( 1.0, 0.0, 2.0 )\n    ~-0.434\n    > y = base.dist.cauchy.logcdf( 1.0, 3.0, 2.0 )\n    -1.386\n    > y = base.dist.cauchy.logcdf( NaN, 0.0, 2.0 )\n    NaN\n    > y = base.dist.cauchy.logcdf( 1.0, 2.0, NaN )\n    NaN\n    > y = base.dist.cauchy.logcdf( 1.0, NaN, 3.0 )\n    NaN\n\n\nbase.dist.cauchy.logcdf.factory( x0, Ɣ )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (logCDF) of a Cauchy distribution with location\n    parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Function to evaluate the natural logarithm of CDF.\n\n    Examples\n    --------\n    > var mylogCDF = base.dist.cauchy.logcdf.factory( 1.5, 3.0 );\n    > var y = mylogCDF( 1.0 )\n    ~-0.805\n\n",
	"base.dist.cauchy.logpdf": "\nbase.dist.cauchy.logpdf( x, x0, Ɣ )\n    Evaluates the natural logarithm of the probability density function (logPDF)\n    for a Cauchy distribution with location parameter `x0` and scale parameter\n    `Ɣ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of PDF.\n\n    Examples\n    --------\n    > var y = base.dist.cauchy.logpdf( 2.0, 1.0, 1.0 )\n    ~-1.839\n    > y = base.dist.cauchy.logpdf( 4.0, 3.0, 0.1 )\n    ~-3.458\n    > y = base.dist.cauchy.logpdf( 4.0, 3.0, 3.0 )\n    ~-2.354\n    > y = base.dist.cauchy.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.cauchy.logpdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.cauchy.logpdf( 2.0, 1.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.cauchy.logpdf( 2.0, 1.0, -2.0 )\n    NaN\n\n\nbase.dist.cauchy.logpdf.factory( x0, Ɣ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (logPDF) of a Cauchy distribution with location parameter\n    `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogPDF = base.dist.cauchy.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-1.839\n\n",
	"base.dist.cauchy.median": "\nbase.dist.cauchy.median( x0, Ɣ )\n    Returns the median of a Cauchy distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.cauchy.median( 10.0, 5.0 )\n    10.0\n    > v = base.dist.cauchy.median( 7.0, 0.5 )\n    7.0\n    > v = base.dist.cauchy.median( 10.3, -0.5 )\n    NaN\n\n",
	"base.dist.cauchy.mode": "\nbase.dist.cauchy.mode( x0, Ɣ )\n    Returns the mode of a Cauchy distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.cauchy.mode( 10.0, 5.0 )\n    10.0\n    > v = base.dist.cauchy.mode( 7.0, 0.5 )\n    7.0\n    > v = base.dist.cauchy.mode( 10.3, -0.5 )\n    NaN\n\n",
	"base.dist.cauchy.pdf": "\nbase.dist.cauchy.pdf( x, x0, Ɣ )\n    Evaluates the probability density function (PDF) for a Cauchy distribution\n    with location parameter `x0` and scale parameter `Ɣ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.cauchy.pdf( 2.0, 1.0, 1.0 )\n    ~0.159\n    > y = base.dist.cauchy.pdf( 4.0, 3.0, 0.1 )\n    ~0.0315\n    > y = base.dist.cauchy.pdf( 4.0, 3.0, 3.0 )\n    ~0.095\n    > y = base.dist.cauchy.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.cauchy.pdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.cauchy.pdf( 2.0, 1.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.cauchy.pdf( 2.0, 1.0, -2.0 )\n    NaN\n\n\nbase.dist.cauchy.pdf.factory( x0, Ɣ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Cauchy distribution with location parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.cauchy.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.159\n\n",
	"base.dist.cauchy.quantile": "\nbase.dist.cauchy.quantile( p, x0, Ɣ )\n    Evaluates the quantile function for a Cauchy distribution with location\n    parameter `x0`  and scale parameter `Ɣ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.cauchy.quantile( 0.3, 2.0, 2.0 )\n    ~0.547\n    > y = base.dist.cauchy.quantile( 0.8, 10, 2.0 )\n    ~12.753\n    > y = base.dist.cauchy.quantile( 0.1, 10.0, 2.0 )\n    ~3.845\n\n    > y = base.dist.cauchy.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.cauchy.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.cauchy.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.cauchy.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.cauchy.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.cauchy.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.cauchy.quantile.factory( x0, Ɣ )\n    Returns a function for evaluating the quantile function of a Cauchy\n    distribution with location parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.cauchy.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n",
	"base.dist.chi.cdf": "\nbase.dist.chi.cdf( x, k )\n    Evaluates the cumulative distribution function (CDF) for a chi distribution\n    with degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.chi.cdf( 2.0, 3.0 )\n    ~0.739\n    > y = base.dist.chi.cdf( 1.0, 0.5 )\n    ~0.846\n    > y = base.dist.chi.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dist.chi.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dist.chi.cdf( 0.0, NaN )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dist.chi.cdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dist.chi.cdf( 2.0, 0.0 )\n    1.0\n    > y = base.dist.chi.cdf( -2.0, 0.0 )\n    0.0\n    > y = base.dist.chi.cdf( 0.0, 0.0 )\n    1.0\n\nbase.dist.chi.cdf.factory( k )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a chi distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.chi.cdf.factory( 1.0 );\n    > var y = mycdf( 2.0 )\n    ~0.954\n    > y = mycdf( 1.2 )\n    ~0.77\n\n",
	"base.dist.chi.Chi": "\nbase.dist.chi.Chi( [k] )\n    Returns a chi distribution object.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    chi: Object\n        Distribution instance.\n\n    chi.k: number\n        Degrees of freedom. If set, the value must be greater than `0`.\n\n    chi.entropy: number\n        Read-only property which returns the differential entropy.\n\n    chi.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    chi.mean: number\n        Read-only property which returns the expected value.\n\n    chi.mode: number\n        Read-only property which returns the mode.\n\n    chi.skewness: number\n        Read-only property which returns the skewness.\n\n    chi.stdev: number\n        Read-only property which returns the standard deviation.\n\n    chi.variance: number\n        Read-only property which returns the variance.\n\n    chi.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    chi.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    chi.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var chi = base.dist.chi.Chi( 6.0 );\n    > chi.k\n    6.0\n    > chi.entropy\n    ~1.04\n    > chi.kurtosis\n    ~0.025\n    > chi.mean\n    ~2.35\n    > chi.mode\n    ~2.236\n    > chi.skewness\n    ~0.318\n    > chi.stdev\n    ~0.691\n    > chi.variance\n    ~0.478\n    > chi.cdf( 1.0 )\n    ~0.014\n    > chi.pdf( 1.5 )\n    ~0.308\n    > chi.quantile( 0.5 )\n    ~2.312\n\n",
	"base.dist.chi.entropy": "\nbase.dist.chi.entropy( k )\n    Returns the differential entropy of a chi distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.chi.entropy( 11.0 )\n    ~1.056\n    > v = base.dist.chi.entropy( 1.5 )\n    ~0.878\n\n",
	"base.dist.chi.kurtosis": "\nbase.dist.chi.kurtosis( k )\n    Returns the excess kurtosis of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.chi.kurtosis( 9.0 )\n    ~0.011\n    > v = base.dist.chi.kurtosis( 1.5 )\n    ~0.424\n\n",
	"base.dist.chi.mean": "\nbase.dist.chi.mean( k )\n    Returns the expected value of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.chi.mean( 11.0 )\n    ~3.242\n    > v = base.dist.chi.mean( 4.5 )\n    ~2.008\n\n",
	"base.dist.chi.mode": "\nbase.dist.chi.mode( k )\n    Returns the mode of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.chi.mode( 11.0 )\n    ~3.162\n    > v = base.dist.chi.mode( 1.5 )\n    ~0.707\n\n",
	"base.dist.chi.pdf": "\nbase.dist.chi.pdf( x, k )\n    Evaluates the probability density function (PDF) for a chi distribution with\n    degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.chi.pdf( 0.3, 4.0 )\n    ~0.013\n    > y = base.dist.chi.pdf( 0.7, 0.7 )\n    ~0.537\n    > y = base.dist.chi.pdf( -1.0, 0.5 )\n    0.0\n    > y = base.dist.chi.pdf( 0.0, NaN )\n    NaN\n    > y = base.dist.chi.pdf( NaN, 2.0 )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dist.chi.pdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dist.chi.pdf( 2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dist.chi.pdf( 0.0, 0.0, 2.0 )\n    infinity\n\n\nbase.dist.chi.pdf.factory( k )\n    Returns a function for evaluating the probability density function (PDF) of\n    a chi distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.chi.pdf.factory( 6.0 );\n    > var y = myPDF( 3.0 )\n    ~0.337\n\n",
	"base.dist.chi.quantile": "\nbase.dist.chi.quantile( p, k )\n    Evaluates the quantile function for a chi distribution with degrees of\n    freedom `k` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.chi.quantile( 0.8, 1.0 )\n    ~1.282\n    > y = base.dist.chi.quantile( 0.5, 4.0 )\n    ~1.832\n    > y = base.dist.chi.quantile( 0.8, 0.1 )\n    ~0.116\n    > y = base.dist.chi.quantile( -0.2, 0.5 )\n    NaN\n    > y = base.dist.chi.quantile( 1.1, 0.5 )\n    NaN\n    > y = base.dist.chi.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dist.chi.quantile( 0.0, NaN )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dist.chi.quantile( 0.5, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dist.chi.quantile( 0.3, 0.0 )\n    0.0\n    > y = base.dist.chi.quantile( 0.9, 0.0 )\n    0.0\n\n\nbase.dist.chi.quantile.factory( k )\n    Returns a function for evaluating the quantile function of a chi\n    distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dist.chi.quantile.factory( 2.0 );\n    > var y = myquantile( 0.3 )\n    ~0.845\n    > y = myquantile( 0.7 )\n    ~1.552\n\n",
	"base.dist.chi.skewness": "\nbase.dist.chi.skewness( k )\n    Returns the skewness of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.chi.skewness( 11.0 )\n    ~0.225\n    > v = base.dist.chi.skewness( 1.5 )\n    ~0.763\n\n",
	"base.dist.chi.stdev": "\nbase.dist.chi.stdev( k )\n    Returns the standard deviation of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.chi.stdev( 11.0 )\n    ~0.699\n    > v = base.dist.chi.stdev( 1.5 )\n    ~0.637\n\n",
	"base.dist.chi.variance": "\nbase.dist.chi.variance( k )\n    Returns the variance of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.chi.variance( 11.0 )\n    ~0.488\n    > v = base.dist.chi.variance( 1.5 )\n    ~0.406\n\n",
	"base.dist.chisquare.cdf": "\nbase.dist.chisquare.cdf( x, k )\n    Evaluates the cumulative distribution function (CDF) for a chi-squared\n    distribution with degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.chisquare.cdf( 2.0, 3.0 )\n    ~0.428\n    > y = base.dist.chisquare.cdf( 1.0, 0.5 )\n    ~0.846\n    > y = base.dist.chisquare.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dist.chisquare.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dist.chisquare.cdf( 0.0, NaN )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dist.chisquare.cdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dist.chisquare.cdf( 2.0, 0.0 )\n    1.0\n    > y = base.dist.chisquare.cdf( -2.0, 0.0 )\n    0.0\n    > y = base.dist.chisquare.cdf( 0.0, 0.0 )\n    1.0\n\nbase.dist.chisquare.cdf.factory( k )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a chi-squared distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.chisquare.cdf.factory( 1.0 );\n    > var y = mycdf( 2.0 )\n    ~0.843\n    > y = mycdf( 1.2 )\n    ~0.727\n\n",
	"base.dist.chisquare.ChiSquare": "\nbase.dist.chisquare.ChiSquare( [k] )\n    Returns a  chi-squared distribution object.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    chisquare: Object\n        Distribution instance.\n\n    chisquare.k: number\n        Degrees of freedom. If set, the value must be greater than `0`.\n\n    chisquare.entropy: number\n        Read-only property which returns the differential entropy.\n\n    chisquare.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    chisquare.mean: number\n        Read-only property which returns the expected value.\n\n    chisquare.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    chisquare.mode: number\n        Read-only property which returns the mode.\n\n    chisquare.skewness: number\n        Read-only property which returns the skewness.\n\n    chisquare.stdev: number\n        Read-only property which returns the standard deviation.\n\n    chisquare.variance: number\n        Read-only property which returns the variance.\n\n    chisquare.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    chisquare.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    chisquare.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var chisquare = base.dist.chisquare.ChiSquare( 6.0 );\n    > chisquare.k\n    6.0\n    > chisquare.entropy\n    ~2.541\n    > chisquare.kurtosis\n    2.0\n    > chisquare.mean\n    6.0\n    > chisquare.mode\n    4.0\n    > chisquare.skewness\n    ~1.155\n    > chisquare.stdev\n    ~3.464\n    > chisquare.variance\n    12.0\n    > chisquare.cdf( 3.0 )\n    ~0.191\n    > chisquare.mgf( 0.2 )\n    ~4.63\n    > chisquare.pdf( 1.5 )\n    ~0.066\n    > chisquare.quantile( 0.5 )\n    ~5.348\n\n",
	"base.dist.chisquare.entropy": "\nbase.dist.chisquare.entropy( k )\n    Returns the differential entropy of a chi-squared distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.chisquare.entropy( 11.0 )\n    ~2.901\n    > v = base.dist.chisquare.entropy( 1.5 )\n    ~1.375\n\n",
	"base.dist.chisquare.kurtosis": "\nbase.dist.chisquare.kurtosis( k )\n    Returns the excess kurtosis of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.chisquare.kurtosis( 9.0 )\n    ~1.333\n    > v = base.dist.chisquare.kurtosis( 1.5 )\n    8.0\n\n",
	"base.dist.chisquare.mean": "\nbase.dist.chisquare.mean( k )\n    Returns the expected value of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.chisquare.mean( 11.0 )\n    11.0\n    > v = base.dist.chisquare.mean( 4.5 )\n    4.5\n\n",
	"base.dist.chisquare.mode": "\nbase.dist.chisquare.mode( k )\n    Returns the mode of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.chisquare.mode( 11.0 )\n    11.0\n    > v = base.dist.chisquare.mode( 1.5 )\n    0.0\n\n",
	"base.dist.chisquare.pdf": "\nbase.dist.chisquare.pdf( x, k )\n    Evaluates the probability density function (PDF) for a chi-squared\n    distribution with degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.chisquare.pdf( 0.3, 4.0 )\n    ~0.065\n    > y = base.dist.chisquare.pdf( 0.7, 0.7 )\n    ~0.274\n    > y = base.dist.chisquare.pdf( -1.0, 0.5 )\n    0.0\n    > y = base.dist.chisquare.pdf( 0.0, NaN )\n    NaN\n    > y = base.dist.chisquare.pdf( NaN, 2.0 )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dist.chisquare.pdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dist.chisquare.pdf( 2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dist.chisquare.pdf( 0.0, 0.0, 2.0 )\n    infinity\n\n\nbase.dist.chisquare.pdf.factory( k )\n    Returns a function for evaluating the probability density function (PDF) of\n    a chi-squared distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.chisquare.pdf.factory( 6.0 );\n    > var y = myPDF( 3.0 )\n    ~0.126\n\n",
	"base.dist.chisquare.quantile": "\nbase.dist.chisquare.quantile( p, k )\n    Evaluates the quantile function for a chi-squared distribution with degrees\n    of freedom `k` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.chisquare.quantile( 0.8, 1.0 )\n    ~1.642\n    > y = base.dist.chisquare.quantile( 0.5, 4.0 )\n    ~3.357\n    > y = base.dist.chisquare.quantile( 0.8, 0.1 )\n    ~0.014\n    > y = base.dist.chisquare.quantile( -0.2, 0.5 )\n    NaN\n    > y = base.dist.chisquare.quantile( 1.1, 0.5 )\n    NaN\n    > y = base.dist.chisquare.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dist.chisquare.quantile( 0.0, NaN )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dist.chisquare.quantile( 0.5, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dist.chisquare.quantile( 0.3, 0.0 )\n    0.0\n    > y = base.dist.chisquare.quantile( 0.9, 0.0 )\n    0.0\n\n\nbase.dist.chisquare.quantile.factory( k )\n    Returns a function for evaluating the quantile function of a chi-squared\n    distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dist.chisquare.quantile.factory( 2.0 );\n    > var y = myquantile( 0.3 )\n    ~0.713\n    > y = myquantile( 0.7 )\n    ~2.408\n\n",
	"base.dist.chisquare.skewness": "\nbase.dist.chisquare.skewness( k )\n    Returns the skewness of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.chisquare.skewness( 11.0 )\n    ~0.853\n    > v = base.dist.chisquare.skewness( 1.5 )\n    ~2.309\n\n",
	"base.dist.chisquare.stdev": "\nbase.dist.chisquare.stdev( k )\n    Returns the standard deviation of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.chisquare.stdev( 11.0 )\n    ~4.69\n    > v = base.dist.chisquare.stdev( 1.5 )\n    ~1.732\n\n",
	"base.dist.chisquare.variance": "\nbase.dist.chisquare.variance( k )\n    Returns the variance of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.chisquare.variance( 11.0 )\n    22.0\n    > v = base.dist.chisquare.variance( 1.5 )\n    3.0\n\n",
	"base.dist.cosine.cdf": "\nbase.dist.cosine.cdf( x, μ, s )\n    Evaluates the cumulative distribution function (CDF) for a raised cosine\n    distribution with location parameter `μ` and scale parameter `s` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.cdf( 2.0, 0.0, 3.0 )\n    ~0.971\n    > y = base.dist.cosine.cdf( 9.0, 10.0, 3.0 )\n    ~0.196\n\n    > y = base.dist.cosine.cdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.cdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.cdf( NaN, 0.0, 1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `s = 0.0`:\n    > y = base.dist.cosine.cdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dist.cosine.cdf( 8.0, 8.0, 0.0 )\n    1.0\n    > y = base.dist.cosine.cdf( 10.0, 8.0, 0.0 )\n    1.0\n\n\nbase.dist.cosine.cdf.factory( μ, s )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a raised cosine distribution with location parameter `μ` and scale\n    parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.cosine.cdf.factory( 3.0, 1.5 );\n    > var y = mycdf( 1.9 )\n    ~0.015\n\n",
	"base.dist.cosine.Cosine": "\nbase.dist.cosine.Cosine( [μ, s] )\n    Returns a raised cosine distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    s: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    cosine: Object\n        Distribution instance.\n\n    cosine.mu: number\n        Location parameter.\n\n    cosine.s: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    cosine.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    cosine.mean: number\n        Read-only property which returns the expected value.\n\n    cosine.median: number\n        Read-only property which returns the median.\n\n    cosine.mode: number\n        Read-only property which returns the mode.\n\n    cosine.skewness: number\n        Read-only property which returns the skewness.\n\n    cosine.stdev: number\n        Read-only property which returns the standard deviation.\n\n    cosine.variance: number\n        Read-only property which returns the variance.\n\n    cosine.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    cosine.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    cosine.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    cosine.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    cosine.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var cosine = base.dist.cosine.Cosine( -2.0, 3.0 );\n    > cosine.mu\n    -2.0\n    > cosine.s\n    3.0\n    > cosine.kurtosis\n    ~-0.594\n    > cosine.mean\n    -2.0\n    > cosine.median\n    -2.0\n    > cosine.mode\n    -2.0\n    > cosine.skewness\n    0.0\n    > cosine.stdev\n    ~1.084\n    > cosine.variance\n    ~1.176\n    > cosine.cdf( 0.5 )\n    ~0.996\n    > cosine.logpdf( -1.0 )\n    ~-1.386\n    > cosine.mgf( 0.2 )\n    ~0.686\n    > cosine.pdf( -2.0 )\n    ~0.333\n    > cosine.quantile( 0.9 )\n    ~-0.553\n\n",
	"base.dist.cosine.kurtosis": "\nbase.dist.cosine.kurtosis( μ, s )\n    Returns the excess kurtosis of a raised cosine distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.kurtosis( 0.0, 1.0 )\n    ~-0.594\n    > y = base.dist.cosine.kurtosis( 4.0, 2.0 )\n    ~-0.594\n    > y = base.dist.cosine.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.kurtosis( 0.0, 0.0 )\n    NaN\n",
	"base.dist.cosine.logpdf": "\nbase.dist.cosine.logpdf( x, μ, s )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    raised cosine distribution with location parameter `μ` and scale parameter\n    `s` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.logpdf( 2.0, 0.0, 3.0 )\n    ~-2.485\n    > y = base.dist.cosine.logpdf( -1.0, 2.0, 4.0 )\n    ~-3.307\n    > y = base.dist.cosine.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.cosine.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.logpdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.cosine.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution at `s = 0.0`:\n    > y = base.dist.cosine.logpdf( 2.0, 8.0, 0.0 )\n    -infinity\n    > y = base.dist.cosine.logpdf( 8.0, 8.0, 0.0 )\n    infinity\n\n\nbase.dist.cosine.logpdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a raised cosine distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dist.cosine.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    ~-0.693\n\n",
	"base.dist.cosine.mean": "\nbase.dist.cosine.mean( μ, s )\n    Returns the expected value of a raised cosine distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.mean( 0.0, 1.0 )\n    0.0\n    > y = base.dist.cosine.mean( 4.0, 2.0 )\n    4.0\n    > y = base.dist.cosine.mean( NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.mean( 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.mean( 0.0, 0.0 )\n    NaN\n",
	"base.dist.cosine.median": "\nbase.dist.cosine.median( μ, s )\n    Returns the median of a raised cosine distribution with location parameter\n    `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.median( 0.0, 1.0 )\n    0.0\n    > y = base.dist.cosine.median( 4.0, 2.0 )\n    4.0\n    > y = base.dist.cosine.median( NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.median( 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.median( 0.0, 0.0 )\n    NaN\n",
	"base.dist.cosine.mgf": "\nbase.dist.cosine.mgf( t, μ, s )\n    Evaluates the moment-generating function (MGF) for a raised cosine\n    distribution with location parameter `μ` and scale parameter `s` at a value\n    `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.mgf( 2.0, 0.0, 3.0 )\n    ~7.234\n    > y = base.dist.cosine.mgf( 9.0, 10.0, 3.0 )\n    ~1.606e+47\n\n    > y = base.dist.cosine.mgf( 0.5, 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.mgf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.mgf( NaN, 0.0, 1.0 )\n    NaN\n\n\nbase.dist.cosine.mgf.factory( μ, s )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    raised cosine distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dist.cosine.mgf.factory( 3.0, 1.5 );\n    > var y = mymgf( 1.9 )\n    ~495.57\n\n",
	"base.dist.cosine.mode": "\nbase.dist.cosine.mode( μ, s )\n    Returns the mode of a raised cosine distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dist.cosine.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dist.cosine.mode( NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.mode( 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.mode( 0.0, 0.0 )\n    NaN\n",
	"base.dist.cosine.pdf": "\nbase.dist.cosine.pdf( x, μ, s )\n    Evaluates the probability density function (PDF) for a raised cosine\n    distribution with location parameter `μ` and scale parameter `s` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.pdf( 2.0, 0.0, 3.0 )\n    ~0.083\n    > y = base.dist.cosine.pdf( 2.4, 4.0, 2.0 )\n    ~0.048\n    > y = base.dist.cosine.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.cosine.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.cosine.pdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dist.cosine.pdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dist.cosine.pdf( 8.0, 8.0, 0.0 )\n    infinity\n\n\nbase.dist.cosine.pdf.factory( μ, s )\n    Returns a function for evaluating the probability density function (PDF) of\n    a raised cosine distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.cosine.pdf.factory( 0.0, 3.0 );\n    > var y = myPDF( 2.0 )\n    ~0.083\n\n",
	"base.dist.cosine.quantile": "\nbase.dist.cosine.quantile( p, μ, s )\n    Evaluates the quantile function for a raised cosine distribution with\n    location parameter `μ` and scale parameter `s` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.quantile( 0.8, 0.0, 1.0 )\n    ~0.327\n    > y = base.dist.cosine.quantile( 0.5, 4.0, 2.0 )\n    4.0\n\n    > y = base.dist.cosine.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.cosine.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.cosine.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.cosine.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.cosine.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.cosine.quantile.factory( μ, s )\n    Returns a function for evaluating the quantile function of a raised cosine\n    distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.cosine.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.3 )\n    ~9.586\n\n",
	"base.dist.cosine.skewness": "\nbase.dist.cosine.skewness( μ, s )\n    Returns the skewness of a raised cosine distribution with location parameter\n    `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.skewness( 0.0, 1.0 )\n    0.0\n    > y = base.dist.cosine.skewness( 4.0, 2.0 )\n    0.0\n    > y = base.dist.cosine.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.skewness( 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.skewness( 0.0, 0.0 )\n    NaN\n",
	"base.dist.cosine.stdev": "\nbase.dist.cosine.stdev( μ, s )\n    Returns the standard deviation of a raised cosine distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.stdev( 0.0, 1.0 )\n    ~0.362\n    > y = base.dist.cosine.stdev( 4.0, 2.0 )\n    ~0.723\n    > y = base.dist.cosine.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.stdev( 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.stdev( 0.0, 0.0 )\n    NaN\n",
	"base.dist.cosine.variance": "\nbase.dist.cosine.variance( μ, s )\n    Returns the variance of a raised cosine distribution with location parameter\n    `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dist.cosine.variance( 0.0, 1.0 )\n    ~0.131\n    > y = base.dist.cosine.variance( 4.0, 2.0 )\n    ~0.523\n    > y = base.dist.cosine.variance( NaN, 1.0 )\n    NaN\n    > y = base.dist.cosine.variance( 0.0, NaN )\n    NaN\n    > y = base.dist.cosine.variance( 0.0, 0.0 )\n    NaN\n",
	"base.dist.degenerate.cdf": "\nbase.dist.degenerate.cdf( x, μ )\n    Evaluates the cumulative distribution function (CDF) for a degenerate\n    distribution with mean value `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.degenerate.cdf( 2.0, 3.0 )\n    0.0\n    > y = base.dist.degenerate.cdf( 4.0, 3.0 )\n    1.0\n    > y = base.dist.degenerate.cdf( 3.0, 3.0 )\n    1.0\n    > y = base.dist.degenerate.cdf( NaN, 0.0 )\n    NaN\n    > y = base.dist.degenerate.cdf( 0.0, NaN )\n    NaN\n\n\nbase.dist.degenerate.cdf.factory( μ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a degenerate distribution centered at a provided mean value.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.degenerate.cdf.factory( 5.0 );\n    > var y = myCDF( 3.0 )\n    0.0\n    > y = myCDF( 6.0 )\n    1.0\n\n",
	"base.dist.degenerate.logcdf": "\nbase.dist.degenerate.logcdf( x, μ )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (logCDF) for a degenerate distribution with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the CDF.\n\n    Examples\n    --------\n    > var y = base.dist.degenerate.logcdf( 2.0, 3.0 )\n    -infinity\n    > y = base.dist.degenerate.logcdf( 4.0, 3.0 )\n    0\n    > y = base.dist.degenerate.logcdf( 3.0, 3.0 )\n    0\n    > y = base.dist.degenerate.logcdf( NaN, 0.0 )\n    NaN\n    > y = base.dist.degenerate.logcdf( 0.0, NaN )\n    NaN\n\n\nbase.dist.degenerate.logcdf.factory( μ )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (logCDF) of a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    logcdf: Function\n        Function to evaluate the natural logarithm of cumulative distribution\n        function (logCDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dist.degenerate.logcdf.factory( 5.0 );\n    > var y = mylogcdf( 3.0 )\n    -infinity\n    > y = mylogcdf( 6.0 )\n    0\n\n",
	"base.dist.degenerate.logpdf": "\nbase.dist.degenerate.logpdf( x, μ )\n    Evaluates the natural logarithm of the probability density function (logPDF)\n    for a degenerate distribution with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var y = base.dist.degenerate.logpdf( 2.0, 3.0 )\n    -infinity\n    > y = base.dist.degenerate.logpdf( 3.0, 3.0 )\n    infinity\n    > y = base.dist.degenerate.logpdf( NaN, 0.0 )\n    NaN\n    > y = base.dist.degenerate.logpdf( 0.0, NaN )\n    NaN\n\n\nbase.dist.degenerate.logpdf.factory( μ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (logPDF) of a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    logpdf: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogPDF = base.dist.degenerate.logpdf.factory( 10.0 );\n    > var y = mylogPDF( 10.0 )\n    infinity\n\n",
	"base.dist.degenerate.mgf": "\nbase.dist.degenerate.mgf( x, μ )\n    Evaluates the moment-generating function (MGF) for a degenerate distribution\n    with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.degenerate.mgf( 1.0, 1.0 )\n    ~2.718\n    > y = base.dist.degenerate.mgf( 2.0, 3.0 )\n    ~403.429\n    > y = base.dist.degenerate.mgf( NaN, 0.0 )\n    NaN\n    > y = base.dist.degenerate.mgf( 0.0, NaN )\n    NaN\n\n\nbase.dist.degenerate.mgf.factory( μ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.degenerate.mgf.factory( 10.0 );\n    > var y = myMGF( 0.1 )\n    ~2.718\n\n",
	"base.dist.degenerate.pdf": "\nbase.dist.degenerate.pdf( x, μ )\n    Evaluates the probability density function (PDF) for a degenerate\n    distribution with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.degenerate.pdf( 2.0, 3.0 )\n    0.0\n    > y = base.dist.degenerate.pdf( 3.0, 3.0 )\n    infinity\n    > y = base.dist.degenerate.pdf( NaN, 0.0 )\n    NaN\n    > y = base.dist.degenerate.pdf( 0.0, NaN )\n    NaN\n\n\nbase.dist.degenerate.pdf.factory( μ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.degenerate.pdf.factory( 10.0 );\n    > var y = myPDF( 10.0 )\n    infinity\n\n",
	"base.dist.degenerate.pmf": "\nbase.dist.degenerate.pmf( x, μ )\n    Evaluates the probability mass function (PMF) for a degenerate distribution\n    with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dist.degenerate.pmf( 2.0, 3.0 )\n    0.0\n    > y = base.dist.degenerate.pmf( 3.0, 3.0 )\n    1.0\n    > y = base.dist.degenerate.pmf( NaN, 0.0 )\n    NaN\n    > y = base.dist.degenerate.pmf( 0.0, NaN )\n    NaN\n\n\nbase.dist.degenerate.pmf.factory( μ )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.degenerate.pmf.factory( 10.0 );\n    > var y = myPDF( 10.0 )\n    1.0\n\n",
	"base.dist.degenerate.quantile": "\nbase.dist.degenerate.quantile( p, μ )\n    Evaluates the quantile function for a degenerate distribution with mean `μ`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.degenerate.quantile( 0.5, 2.0 )\n    2.0\n    > y = base.dist.degenerate.quantile( 0.9, 4.0 )\n    4.0\n    > y = base.dist.degenerate.quantile( 1.1, 0.0 )\n    NaN\n    > y = base.dist.degenerate.quantile( -0.2, 0.0 )\n    NaN\n    > y = base.dist.degenerate.quantile( NaN, 0.0 )\n    NaN\n    > y = base.dist.degenerate.quantile( 0.0, NaN )\n    NaN\n\n\nbase.dist.degenerate.quantile.factory( μ )\n    Returns a function for evaluating the quantile function of a degenerate\n    distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.degenerate.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n",
	"base.dist.erlang.cdf": "\nbase.dist.erlang.cdf( x, k, λ )\n    Evaluates the cumulative distribution function (CDF) for an Erlang\n    distribution with shape parameter `k` and rate parameter `λ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.erlang.cdf( 2.0, 1, 1.0 );\n    ~0.865\n    > y = base.dist.erlang.cdf( 2.0, 3, 1.0 )\n    ~0.323\n    > y = base.dist.erlang.cdf( 2.0, 2.5, 1.0 )\n    NaN\n    > y = base.dist.erlang.cdf( -1.0, 2, 2.0 )\n    0.0\n    > y = base.dist.erlang.cdf( PINF, 4, 2.0 )\n    1.0\n    > y = base.dist.erlang.cdf( NINF, 4, 2.0 )\n    0.0\n    > y = base.dist.erlang.cdf( NaN, 0, 1.0 )\n    NaN\n    > y = base.dist.erlang.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.erlang.cdf( 0.0, 0, NaN )\n    NaN\n    > y = base.dist.erlang.cdf( 2.0, -1, 1.0 )\n    NaN\n    > y = base.dist.erlang.cdf( 2.0, 1, -1.0 )\n    NaN\n\n\nbase.dist.erlang.cdf.factory( λ, k )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.erlang.cdf.factory( 2, 0.5 );\n    > var y = mycdf( 6.0 )\n    ~0.801\n    > y = mycdf( 2.0 )\n    ~0.264\n\n",
	"base.dist.erlang.entropy": "\nbase.dist.erlang.entropy( k, λ )\n    Returns the differential entropy of an Erlang distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.erlang.entropy( 1, 1.0 )\n    ~-0.154\n    > v = base.dist.erlang.entropy( 4, 12.0 )\n    ~9.587\n    > v = base.dist.erlang.entropy( 8, 2.0 )\n    ~33.973\n\n",
	"base.dist.erlang.Erlang": "\nbase.dist.erlang.Erlang( [k, λ] )\n    Returns an Erlang distribution object.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Shape parameter. Must be a positive integer. Default: `1.0`.\n\n    λ: number (optional)\n        Rate parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    erlang: Object\n        Distribution instance.\n\n    erlang.k: number\n        Shape parameter. If set, the value must be a positive integer.\n\n    erlang.lambda: number\n        Rate parameter. If set, the value must be greater than `0`.\n\n    erlang.entropy: number\n        Read-only property which returns the differential entropy.\n\n    erlang.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    erlang.mean: number\n        Read-only property which returns the expected value.\n\n    erlang.mode: number\n        Read-only property which returns the mode.\n\n    erlang.skewness: number\n        Read-only property which returns the skewness.\n\n    erlang.stdev: number\n        Read-only property which returns the standard deviation.\n\n    erlang.variance: number\n        Read-only property which returns the variance.\n\n    erlang.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    erlang.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    erlang.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    erlang.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var erlang = base.dist.erlang.Erlang( 6, 5.0 );\n    > erlang.k\n    6\n    > erlang.lambda\n    5.0\n    > erlang.entropy\n    ~0.647\n    > erlang.kurtosis\n    1.0\n    > erlang.mean\n    1.2\n    > erlang.mode\n    1.0\n    > erlang.skewness\n    ~0.816\n    > erlang.stdev\n    ~0.49\n    > erlang.variance\n    0.24\n    > erlang.cdf( 3.0 )\n    ~0.997\n    > erlang.mgf( -0.5 )\n    ~0.564\n    > erlang.pdf( 3.0 )\n    ~0.01\n    > erlang.quantile( 0.8 )\n    ~1.581\n\n",
	"base.dist.erlang.kurtosis": "\nbase.dist.erlang.kurtosis( k, λ )\n    Returns the excess kurtosis of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.erlang.kurtosis( 1, 1.0 )\n    1.0\n    > v = base.dist.erlang.kurtosis( 4, 12.0 )\n    ~0.028\n    > v = base.dist.erlang.kurtosis( 8, 2.0 )\n    2.0\n\n",
	"base.dist.erlang.mean": "\nbase.dist.erlang.mean( k, λ )\n    Returns the expected value of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.erlang.mean( 1, 1.0 )\n    1.0\n    > v = base.dist.erlang.mean( 4, 12.0 )\n    ~0.333\n    > v = base.dist.erlang.mean( 8, 2.0 )\n    4.0\n\n",
	"base.dist.erlang.mgf": "\nbase.dist.erlang.mgf( t, k, λ )\n    Evaluates the moment-generating function (MGF) for an Erlang distribution\n    with shape parameter `k` and rate parameter `λ` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.erlang.mgf( 0.3, 1, 1.0 )\n    ~1.429\n    > y = base.dist.erlang.mgf( 2.0, 2, 3.0 )\n    ~8.999\n    > y = base.dist.erlang.mgf( -1.0, 2, 2.0 )\n    ~0.444\n\n    > y = base.dist.erlang.mgf( NaN, 1, 1.0 )\n    NaN\n    > y = base.dist.erlang.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.erlang.mgf( 0.0, 1, NaN )\n    NaN\n\n    > y = base.dist.erlang.mgf( 0.2, -2, 0.5 )\n    NaN\n    > y = base.dist.erlang.mgf( 0.2, 0.5, 0.5 )\n    NaN\n\n    > y = base.dist.erlang.mgf( 0.2, 1, 0.0 )\n    NaN\n    > y = base.dist.erlang.mgf( 0.2, 1, -5.0 )\n    NaN\n\n\nbase.dist.erlang.mgf.factory( λ, k )\n    Returns a function for evaluating the moment-generating function (MGF) of an\n    Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.erlang.mgf.factory( 2, 0.5 );\n    > var y = myMGF( 0.2 )\n    ~2.778\n    > y = myMGF( -0.5 )\n    0.25\n\n",
	"base.dist.erlang.mode": "\nbase.dist.erlang.mode( k, λ )\n    Returns the mode of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.erlang.mode( 1, 1.0 )\n    0.0\n    > v = base.dist.erlang.mode( 4, 12.0 )\n    0.25\n    > v = base.dist.erlang.mode( 8, 2.0 )\n    3.5\n\n",
	"base.dist.erlang.pdf": "\nbase.dist.erlang.pdf( x, k, λ )\n    Evaluates the probability density function (PDF) for an Erlang distribution\n    with shape parameter `k` and rate parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.erlang.pdf( 0.1, 1, 1.0 )\n    ~0.904\n    > y = base.dist.erlang.pdf( 0.5, 2, 2.5 )\n    0.895\n    > y = base.dist.erlang.pdf( -1.0, 4, 2.0 )\n    0.0\n    > y = base.dist.erlang.pdf( NaN, 1, 1.0 )\n    NaN\n    > y = base.dist.erlang.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.erlang.pdf( 0.0, 1, NaN )\n    NaN\n    > y = base.dist.erlang.pdf( 2.0, -2, 0.5 )\n    NaN\n    > y = base.dist.erlang.pdf( 2.0, 0.5, 0.5 )\n    NaN\n    > y = base.dist.erlang.pdf( 2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dist.erlang.pdf( 0.0, 0.0, 2.0 )\n    infinity\n    > y = base.dist.erlang.pdf( 2.0, 1, 0.0 )\n    NaN\n    > y = base.dist.erlang.pdf( 2.0, 1, -1.0 )\n    NaN\n\n\nbase.dist.erlang.pdf.factory( λ, k )\n    Returns a function for evaluating the probability density function (PDF)\n    of an Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n* var myPDF = pdf.factory( 6.0, 7.0 );\n* y = myPDF( 7.0 );\n* // returns ~0.155\n\n\n",
	"base.dist.erlang.quantile": "\nbase.dist.erlang.quantile( p, k, λ )\n    Evaluates the quantile function for an Erlang distribution with shape\n    parameter `k` and rate parameter `λ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive number for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.erlang.quantile( 0.8, 2, 1.0 )\n    ~2.994\n    > y = base.dist.erlang.quantile( 0.5, 4, 2.0 )\n    ~1.836\n\n    > y = base.dist.erlang.quantile( 1.1, 1, 1.0 )\n    NaN\n    > y = base.dist.erlang.quantile( -0.2, 1, 1.0 )\n    NaN\n\n    > y = base.dist.erlang.quantile( NaN, 1, 1.0 )\n    NaN\n    > y = base.dist.erlang.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.erlang.quantile( 0.0, 1, NaN )\n    NaN\n\n    // Non-integer shape parameter:\n    > y = base.dist.erlang.quantile( 0.5, 0.5, 1.0 )\n    NaN\n    // Non-positive shape parameter:\n    > y = base.dist.erlang.quantile( 0.5, -1, 1.0 )\n    NaN\n    // Non-positive rate parameter:\n    > y = base.dist.erlang.quantile( 0.5, 1, -1.0 )\n    NaN\n\n\nbase.dist.erlang.quantile.factory( λ, k )\n    Returns a function for evaluating the quantile function of an Erlang\n    distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.erlang.quantile.factory( 10, 2.0 );\n    > var y = myQuantile( 0.4 )\n    ~4.452\n\n",
	"base.dist.erlang.skewness": "\nbase.dist.erlang.skewness( k, λ )\n    Returns the skewness of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.erlang.skewness( 1, 1.0 )\n    1.0\n    > v = base.dist.erlang.skewness( 4, 12.0 )\n    ~0.028\n    > v = base.dist.erlang.skewness( 8, 2.0 )\n    2.0\n\n",
	"base.dist.erlang.stdev": "\nbase.dist.erlang.stdev( k, λ )\n    Returns the standard deviation of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.erlang.stdev( 1, 1.0 )\n    1.0\n    > v = base.dist.erlang.stdev( 4, 12.0 )\n    ~0.167\n    > v = base.dist.erlang.stdev( 8, 2.0 )\n    ~1.414\n\n",
	"base.dist.erlang.variance": "\nbase.dist.erlang.variance( k, λ )\n    Returns the variance of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.erlang.variance( 1, 1.0 )\n    1.0\n    > v = base.dist.erlang.variance( 4, 12.0 )\n    ~0.028\n    > v = base.dist.erlang.variance( 8, 2.0 )\n    2.0\n\n",
	"base.dist.exponential.cdf": "\nbase.dist.exponential.cdf( x, λ )\n    Evaluates the cumulative distribution function (CDF) for an exponential\n    distribution with rate parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.exponential.cdf( 2.0, 0.1 )\n    ~0.181\n    > y = base.dist.exponential.cdf( 1.0, 2.0 )\n    ~0.865\n    > y = base.dist.exponential.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dist.exponential.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dist.exponential.cdf( 0.0, NaN )\n    NaN\n\n    // Negative rate parameter:\n    > y = base.dist.exponential.cdf( 2.0, -1.0 )\n    NaN\n\nbase.dist.exponential.cdf.factory( λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    for an exponential distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.exponential.cdf.factory( 0.5 );\n    > var y = myCDF( 3.0 )\n    ~0.777\n\n",
	"base.dist.exponential.entropy": "\nbase.dist.exponential.entropy( λ )\n    Returns the differential entropy of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.exponential.entropy( 11.0 )\n    ~-1.398\n    > v = base.dist.exponential.entropy( 4.5 )\n    ~-0.504\n\n",
	"base.dist.exponential.Exponential": "\nbase.dist.exponential.Exponential( [λ] )\n    Returns an exponential distribution object.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Rate parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    exponential: Object\n        Distribution instance.\n\n    exponential.lambda: number\n        Rate parameter. If set, the value must be greater than `0`.\n\n    exponential.entropy: number\n        Read-only property which returns the differential entropy.\n\n    exponential.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    exponential.mean: number\n        Read-only property which returns the expected value.\n\n    exponential.median: number\n        Read-only property which returns the median.\n\n    exponential.mode: number\n        Read-only property which returns the mode.\n\n    exponential.skewness: number\n        Read-only property which returns the skewness.\n\n    exponential.stdev: number\n        Read-only property which returns the standard deviation.\n\n    exponential.variance: number\n        Read-only property which returns the variance.\n\n    exponential.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    exponential.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    exponential.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    exponential.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var exponential = base.dist.exponential.Exponential( 6.0 );\n    > exponential.lambda\n    6.0\n    > exponential.entropy\n    ~-0.792\n    > exponential.kurtosis\n    6.0\n    > exponential.mean\n    ~0.167\n    > exponential.median\n    ~0.116\n    > exponential.mode\n    0.0\n    > exponential.skewness\n    2.0\n    > exponential.stdev\n    ~0.167\n    > exponential.variance\n    ~0.028\n    > exponential.cdf( 1.0 )\n    ~0.998\n    > exponential.mgf( -0.5 )\n    ~0.923\n    > exponential.pdf( 1.5 )\n    ~0.001\n    > exponential.quantile( 0.5 )\n    ~0.116\n\n",
	"base.dist.exponential.kurtosis": "\nbase.dist.exponential.kurtosis( λ )\n    Returns the excess kurtosis of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.exponential.kurtosis( 11.0 )\n    6.0\n    > v = base.dist.exponential.kurtosis( 4.5 )\n    6.0\n\n",
	"base.dist.exponential.mean": "\nbase.dist.exponential.mean( λ )\n    Returns the expected value of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.exponential.mean( 11.0 )\n    ~0.091\n    > v = base.dist.exponential.mean( 4.5 )\n    ~0.222\n\n",
	"base.dist.exponential.median": "\nbase.dist.exponential.median( λ )\n    Returns the median of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.exponential.median( 11.0 )\n    ~0.063\n    > v = base.dist.exponential.median( 4.5 )\n    ~0.154\n\n",
	"base.dist.exponential.mode": "\nbase.dist.exponential.mode( λ )\n    Returns the mode of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.exponential.mode( 11.0 )\n    0.0\n    > v = base.dist.exponential.mode( 4.5 )\n    0.0\n\n",
	"base.dist.exponential.pdf": "\nbase.dist.exponential.pdf( x, λ )\n    Evaluates the probability density function (PDF) for an exponential\n    distribution with rate parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.exponential.pdf( 0.3, 4.0 )\n    ~1.205\n    > y = base.dist.exponential.pdf( 2.0, 0.7 )\n    ~0.173\n    > y = base.dist.exponential.pdf( -1.0, 0.5 )\n    0.0\n    > y = base.dist.exponential.pdf( 0, NaN )\n    NaN\n    > y = base.dist.exponential.pdf( NaN, 2.0 )\n    NaN\n\n    // Negative rate:\n    > y = base.dist.exponential.pdf( 2.0, -1.0 )\n    NaN\n\nbase.dist.exponential.pdf.factory( λ )\n    Returns a function for evaluating the probability density function (PDF)\n    for an exponential distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.exponential.pdf.factory( 0.5 );\n    > var y = myCDF( 3.0 )\n    ~0.777\n\n",
	"base.dist.exponential.quantile": "\nbase.dist.exponential.quantile( p, λ )\n    Evaluates the quantile function for an exponential distribution with rate\n    parameter `λ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.exponential.quantile( 0.8, 1.0 )\n    ~1.609\n    > y = base.dist.exponential.quantile( 0.5, 4.0 )\n    ~0.173\n    > y = base.dist.exponential.quantile( 0.5, 0.1 )\n    ~6.931\n\n    > y = base.dist.exponential.quantile( -0.2, 0.1 )\n    NaN\n\n    > y = base.dist.exponential.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dist.exponential.quantile( 0.0, NaN )\n    NaN\n\n    // Negative rate parameter:\n    > y = base.dist.exponential.quantile( 0.5, -1.0 )\n    NaN\n\n\nbase.dist.exponential.quantile.factory( λ )\n    Returns a function for evaluating the quantile function for an exponential\n    distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.exponential.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    ~1.277\n    > y = myQuantile( 1.0 )\n    infinity\n\n",
	"base.dist.exponential.skewness": "\nbase.dist.exponential.skewness( λ )\n    Returns the skewness of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.exponential.skewness( 11.0 )\n    2.0\n    > v = base.dist.exponential.skewness( 4.5 )\n    2.0\n\n",
	"base.dist.exponential.stdev": "\nbase.dist.exponential.stdev( λ )\n    Returns the standard deviation of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.exponential.stdev( 9.0 )\n    ~0.11\n    > v = base.dist.exponential.stdev( 1.0 )\n    1.0\n\n",
	"base.dist.exponential.variance": "\nbase.dist.exponential.variance( λ )\n    Returns the variance of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.exponential.variance( 9.0 )\n    ~0.012\n    > v = base.dist.exponential.variance( 1.0 )\n    1.0\n\n",
	"base.dist.f.cdf": "\nbase.dist.f.cdf( x, d1, d2 )\n    Evaluates the cumulative distribution function (CDF) for a F distribution\n    with numerator degrees of freedom `d1` and denominator degrees of freedom\n    `d2` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.f.cdf( 2.0, 1.0, 1.0 )\n    ~0.608\n    > var y = base.dist.f.cdf( 2.0, 8.0, 4.0 )\n    ~0.737\n    > var y = base.dist.f.cdf( -1.0, 2.0, 2.0 )\n    0.0\n    > var y = base.dist.f.cdf( PINF, 4.0, 2.0 )\n    1.0\n    > var y = base.dist.f.cdf( NINF, 4.0, 2.0 )\n    0.0\n\n    > var y = base.dist.f.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > var y = base.dist.f.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > var y = base.dist.f.cdf( 0.0, 1.0, NaN )\n    NaN\n\n    > var y = base.dist.f.cdf( 2.0, 1.0, -1.0 )\n    NaN\n    > var y = base.dist.f.cdf( 2.0, -1.0, 1.0 )\n    NaN\n\n\nbase.dist.f.cdf.factory( d1, d2 )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a F distribution with numerator degrees of freedom `d1` and denominator\n    degrees of freedom `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.f.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 10.0 )\n    ~0.906\n    > y = myCDF( 8.0 )\n    ~0.884\n\n",
	"base.dist.f.entropy": "\nbase.dist.f.entropy( d1, d2 )\n    Returns the differential entropy of a F distribution (in nats).\n\n    If `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.f.entropy( 3.0, 7.0 )\n    ~1.298\n    > v = base.dist.f.entropy( 4.0, 12.0 )\n    ~1.12\n    > v = base.dist.f.entropy( 8.0, 2.0 )\n    ~2.144\n\n",
	"base.dist.f.F": "\nbase.dist.f.F( [d1, d2] )\n    Returns a F distribution object.\n\n    Parameters\n    ----------\n    d1: number (optional)\n        Numerator degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    d2: number (optional)\n        Denominator degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    f: Object\n        Distribution instance.\n\n    f.d1: number\n        Numerator degrees of freedom. If set, the value must be greater than\n        `0`.\n\n    f.d2: number\n        Denominator degrees of freedom. If set, the value must be greater than\n        `0`.\n\n    f.entropy: number\n        Read-only property which returns the differential entropy.\n\n    f.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    f.mean: number\n        Read-only property which returns the expected value.\n\n    f.mode: number\n        Read-only property which returns the mode.\n\n    f.skewness: number\n        Read-only property which returns the skewness.\n\n    f.stdev: number\n        Read-only property which returns the standard deviation.\n\n    f.variance: number\n        Read-only property which returns the variance.\n\n    f.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    f.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    f.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var f = base.dist.f.F( 6.0, 9.0 );\n    > f.d1\n    6.0\n    > f.d2\n    9.0\n    > f.entropy\n    ~1.134\n    > f.kurtosis\n    ~104.564\n    > f.mean\n    ~1.286\n    > f.mode\n    ~0.545\n    > f.skewness\n    ~4.535\n    > f.stdev\n    ~1.197\n    > f.variance\n    ~1.433\n    > f.cdf( 3.0 )\n    ~0.932\n    > f.pdf( 2.5 )\n    ~0.095\n    > f.quantile( 0.8 )\n    ~1.826\n\n",
	"base.dist.f.kurtosis": "\nbase.dist.f.kurtosis( d1, d2 )\n    Returns the excess kurtosis of a F distribution.\n\n    If `d1 <= 0` or `d2 <= 8`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.f.kurtosis( 3.0, 9.0 )\n    ~124.667\n    > v = base.dist.f.kurtosis( 4.0, 12.0 )\n    ~26.143\n    > v = base.dist.f.kurtosis( 8.0, 9.0 )\n    ~100.167\n\n",
	"base.dist.f.mean": "\nbase.dist.f.mean( d1, d2 )\n    Returns the expected value of a F distribution.\n\n    If `d1 <= 0` or `d2 <= 2`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.f.mean( 3.0, 5.0 )\n    ~1.667\n    > v = base.dist.f.mean( 4.0, 12.0 )\n    ~1.2\n    > v = base.dist.f.mean( 8.0, 4.0 )\n    2.0\n\n",
	"base.dist.f.mode": "\nbase.dist.f.mode( d1, d2 )\n    Returns the mode of a F distribution.\n\n    If `d1 <= 2` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.f.mode( 3.0, 5.0 )\n    ~0.238\n    > v = base.dist.f.mode( 4.0, 12.0 )\n    ~0.429\n    > v = base.dist.f.mode( 8.0, 4.0 )\n    0.5\n\n",
	"base.dist.f.pdf": "\nbase.dist.f.pdf( x, d1, d2 )\n    Evaluates the probability density function (PDF) for a F distribution with\n    numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.f.pdf( 2.0, 0.5, 1.0 )\n    ~0.057\n    > y = base.dist.f.pdf( 0.1, 1.0, 1.0 )\n    ~0.915\n    > y = base.dist.f.pdf( -1.0, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.f.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.f.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.f.pdf( 0.0, 1.0, NaN )\n    NaN\n\n    > y = base.dist.f.pdf( 2.0, 1.0, -1.0 )\n    NaN\n    > y = base.dist.f.pdf( 2.0, -1.0, 1.0 )\n    NaN\n\n\nbase.dist.f.pdf.factory( d1, d2 )\n    Returns a function for evaluating the probability density function (PDF) of\n    a F distribution with numerator degrees of freedom `d1` and denominator\n    degrees of freedom `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.f.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    ~0.004\n    > y = myPDF( 2.0 )\n    ~0.166\n\n",
	"base.dist.f.quantile": "\nbase.dist.f.quantile( p, d1, d2 )\n    Evaluates the quantile function for a F distribution with numerator degrees\n    of freedom `d1` and denominator degrees of freedom `d2` at a probability\n    `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.f.quantile( 0.8, 1.0, 1.0 )\n    ~9.472\n    > y = base.dist.f.quantile( 0.5, 4.0, 2.0 )\n    ~1.207\n\n    > y = base.dist.f.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dist.f.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dist.f.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.f.quantile( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.f.quantile( 0.5, 1.0, NaN )\n    NaN\n\n    > y = base.dist.f.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    > y = base.dist.f.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.f.quantile.factory( d1, d2 )\n    Returns a function for evaluating the quantile function of a F distribution\n    with numerator degrees of freedom `d1` and denominator degrees of freedom\n    `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.f.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.2 )\n    ~0.527\n    > y = myQuantile( 0.8 )\n    ~4.382\n\n",
	"base.dist.f.skewness": "\nbase.dist.f.skewness( d1, d2 )\n    Returns the skewness of a F distribution.\n\n    If `d1 <= 0` or `d2 <= 6`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.f.skewness( 3.0, 7.0 )\n    11.0\n    > v = base.dist.f.skewness( 4.0, 12.0 )\n    ~3.207\n    > v = base.dist.f.skewness( 8.0, 7.0 )\n    ~10.088\n\n",
	"base.dist.f.stdev": "\nbase.dist.f.stdev( d1, d2 )\n    Returns the standard deviation of a F distribution.\n\n    If `d1 <= 0` or `d2 <= 4`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.f.stdev( 3.0, 5.0 )\n    ~3.333\n    > v = base.dist.f.stdev( 4.0, 12.0 )\n    ~1.122\n    > v = base.dist.f.stdev( 8.0, 5.0 )\n    ~2.764\n\n",
	"base.dist.f.variance": "\nbase.dist.f.variance( d1, d2 )\n    Returns the variance of a F distribution.\n\n    If `d1 <= 0` or `d2 <= 4`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.f.variance( 3.0, 5.0 )\n    ~11.111\n    > v = base.dist.f.variance( 4.0, 12.0 )\n    ~1.26\n    > v = base.dist.f.variance( 8.0, 5.0 )\n    ~7.639\n\n",
	"base.dist.frechet.cdf": "\nbase.dist.frechet.cdf( x, α, s, m )\n    Evaluates the cumulative distribution function (CDF) for a Fréchet\n    distribution with shape parameter `α`, scale parameter `s`, and location\n    `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.cdf( 10.0, 2.0, 3.0, 0.0 )\n    ~0.914\n    > y = base.dist.frechet.cdf( -1.0, 2.0, 3.0, -3.0 )\n    ~0.105\n    > y = base.dist.frechet.cdf( 2.5, 2.0, 1.0, 2.0 )\n    ~0.018\n    > y = base.dist.frechet.cdf( NaN, 1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.cdf( 0.0, NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.cdf( 0.0, 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.cdf( 0.0, 1.0, 1.0, NaN )\n    NaN\n    > y = base.dist.frechet.cdf( 0.0, -1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.cdf( 0.0, 1.0, -1.0, 0.0 )\n    NaN\n\n\nbase.dist.frechet.cdf.factory( α, s, m )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Fréchet distribution with shape parameter `α`, scale parameter `s`, and\n    location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.frechet.cdf.factory( 3.0, 3.0, 5.0 );\n    > var y = myCDF( 10.0 )\n    ~0.806\n    > y = myCDF( 7.0 )\n    ~0.034\n\n",
	"base.dist.frechet.entropy": "\nbase.dist.frechet.entropy( α, s, m )\n    Returns the differential entropy of a Fréchet distribution with shape\n    parameter `α`, scale parameter `s`, and location `m` (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.entropy( 1.0, 1.0, 1.0 )\n    ~2.154\n    > y = base.dist.frechet.entropy( 4.0, 2.0, 1.0 )\n    ~1.028\n    > y = base.dist.frechet.entropy( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.entropy( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.entropy( 1.0, 1.0, NaN )\n    NaN\n",
	"base.dist.frechet.Frechet": "\nbase.dist.frechet.Frechet( [α, s, m] )\n    Returns a Fréchet distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    s: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    m: number (optional)\n        Location parameter. Default: `0.0`.\n\n    Returns\n    -------\n    frechet: Object\n        Distribution instance.\n\n    frechet.alpha: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    frechet.s: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    frechet.m: number\n        Location parameter.\n\n    frechet.entropy: number\n        Read-only property which returns the differential entropy.\n\n    frechet.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    frechet.mean: number\n        Read-only property which returns the expected value.\n\n    frechet.median: number\n        Read-only property which returns the median.\n\n    frechet.mode: number\n        Read-only property which returns the mode.\n\n    frechet.skewness: number\n        Read-only property which returns the skewness.\n\n    frechet.stdev: number\n        Read-only property which returns the standard deviation.\n\n    frechet.variance: number\n        Read-only property which returns the variance.\n\n    frechet.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    frechet.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (logPDF).\n\n    frechet.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    frechet.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var frechet = base.dist.frechet.Frechet( 1.0, 1.0, 0.0 );\n    > frechet.alpha\n    1.0\n    > frechet.s\n    1.0\n    > frechet.m\n    0.0\n    > frechet.entropy\n    ~2.154\n    > frechet.kurtosis\n    infinity\n    > frechet.mean\n    infinity\n    > frechet.median\n    ~1.443\n    > frechet.mode\n    0.5\n    > frechet.skewness\n    infinity\n    > frechet.stdev\n    infinity\n    > frechet.variance\n    infinity\n    > frechet.cdf( 0.8 )\n    ~0.287\n    > frechet.logpdf( 0.8 )\n    ~-0.804\n    > frechet.pdf( 0.8 )\n    ~0.448\n    > frechet.quantile( 0.8 )\n    ~4.481\n\n",
	"base.dist.frechet.kurtosis": "\nbase.dist.frechet.kurtosis( α, s, m )\n    Returns the excess kurtosis of a Fréchet distribution with shape parameter\n    `α`, scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 4` and `s > 0`, the function returns `+Infinity`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.kurtosis( 5.0, 2.0, 1.0 )\n    ~45.092\n    > var y = base.dist.frechet.kurtosis( 5.0, 10.0, -3.0 )\n    ~45.092\n    > y = base.dist.frechet.kurtosis( 3.5, 2.0, 1.0 )\n    infinity\n    > y = base.dist.frechet.kurtosis( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.kurtosis( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.kurtosis( 1.0, 1.0, NaN )\n    NaN\n",
	"base.dist.frechet.logpdf": "\nbase.dist.frechet.logpdf( x, α, s, m )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Fréchet distribution with shape parameter `α`, scale parameter `s`, and\n    location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.logpdf( 10.0, 1.0, 3.0, 5.0 )\n    ~-2.72\n    > y = base.dist.frechet.logpdf( -2.0, 1.0, 3.0, -3.0 )\n    ~-1.901\n    > y = base.dist.frechet.logpdf( 0.0, 2.0, 1.0, -1.0 )\n    ~-0.307\n    > y = base.dist.frechet.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.frechet.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.frechet.logpdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.frechet.logpdf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.frechet.logpdf.factory( α, s, m )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Fréchet distribution with shape parameter `α`, scale\n    parameter `s`, and location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dist.frechet.logpdf.factory( 2.0, 3.0, 1.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-3.812\n    > y = mylogPDF( 2.0 )\n    ~-6.11\n\n",
	"base.dist.frechet.mean": "\nbase.dist.frechet.mean( α, s, m )\n    Returns the expected value of a Fréchet distribution with shape parameter\n    `α`, scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 1` and `s > 0`, the function returns `+Infinity`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Mean.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.mean( 4.0, 2.0, 1.0 )\n    ~3.451\n    > y = base.dist.frechet.mean( 0.5, 2.0, 1.0 )\n    infinity\n    > y = base.dist.frechet.mean( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.mean( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.mean( 1.0, 1.0, NaN )\n    NaN\n",
	"base.dist.frechet.median": "\nbase.dist.frechet.median( α, s, m )\n    Returns the median of a Fréchet distribution with shape parameter\n    `α`, scale parameter `s`, and location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.median( 4.0, 2.0, 1.0 )\n    ~3.192\n    > var y = base.dist.frechet.median( 4.0, 2.0, -3.0 )\n    ~-0.808\n    > y = base.dist.frechet.median( 0.5, 2.0, 1.0 )\n    ~5.163\n    > y = base.dist.frechet.median( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.median( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.median( 1.0, 1.0, NaN )\n    NaN\n",
	"base.dist.frechet.mode": "\nbase.dist.frechet.mode( α, s, m )\n    Returns the mode of a Fréchet distribution with shape parameter `α`, scale\n    parameter `s`, and location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.mode( 4.0, 2.0, 1.0 )\n    ~2.891\n    > var y = base.dist.frechet.mode( 4.0, 2.0, -3.0 )\n    ~-1.109\n    > y = base.dist.frechet.mode( 0.5, 2.0, 1.0 )\n    ~1.222\n    > y = base.dist.frechet.mode( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.mode( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.mode( 1.0, 1.0, NaN )\n    NaN\n",
	"base.dist.frechet.pdf": "\nbase.dist.frechet.pdf( x, α, s, m )\n    Evaluates the probability density function (PDF) for a Fréchet distribution\n    with shape parameter `α`, scale parameter `s`, and location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.pdf( 10.0, 0.0, 3.0 )\n    ~0.965\n    > y = base.dist.frechet.pdf( -2.0, 0.0, 3.0 )\n    ~0.143\n    > y = base.dist.frechet.pdf( 0.0, 0.0, 1.0 )\n    ~0.368\n    > y = base.dist.frechet.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.frechet.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.frechet.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.frechet.pdf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.frechet.pdf.factory( α, s, m )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Fréchet distribution with shape parameter `α`, scale parameter `s`, and\n    location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.frechet.pdf.factory( 2.0, 3.0 );\n    > var y = myPDF( 10.0 )\n    ~0.933\n    > y = myPDF( 2.0 )\n    ~0.368\n\n",
	"base.dist.frechet.quantile": "\nbase.dist.frechet.quantile( p, α, s, m )\n    Evaluates the quantile function for a Fréchet distribution with shape\n    parameter `α`, scale parameter `s`, and location `m`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.quantile( 0.3, 10.0, 2.0, 3.0 )\n    ~4.963\n    > y = base.dist.frechet.quantile( 0.2, 3.0, 3.0, 3.0 )\n    ~5.56\n    > y = base.dist.frechet.quantile( 0.9, 1.0, 1.0, -3.0 )\n    ~6.491\n    > y = base.dist.frechet.quantile( NaN, 1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.quantile( 0.0, NaN, 1.0, 0.0)\n    NaN\n    > y = base.dist.frechet.quantile( 0.0, 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.quantile( 0.0, 1.0, 1.0, NaN )\n    NaN\n    > y = base.dist.frechet.quantile( 0.0, -1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.quantile( 0.0, 1.0, -1.0, 0.0 )\n    NaN\n\n\nbase.dist.frechet.quantile.factory( α, s, m )\n    Returns a function for evaluating the quantile function of a Fréchet\n    distribution with shape parameter `α`, scale parameter `s`, and location\n    `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile function = base.dist.frechet.quantile.factory( 2.0, 2.0, 3.0 );\n    > var y = myQuantile function( 0.5 )\n    ~5.402\n    > y = myQuantile function( 0.2 )\n    ~4.576\n\n",
	"base.dist.frechet.skewness": "\nbase.dist.frechet.skewness( α, s, m )\n    Returns the skewness of a Fréchet distribution with shape parameter `α`,\n    scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 3` and `s > 0`, the function returns `+Infinity`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.skewness( 4.0, 2.0, 1.0 )\n    ~1.083\n    > var y = base.dist.frechet.skewness( 4.0, 2.0, -3.0 )\n    ~1.083\n    > y = base.dist.frechet.skewness( 0.5, 2.0, 1.0 )\n    infinity\n    > y = base.dist.frechet.skewness( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.skewness( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.skewness( 1.0, 1.0, NaN )\n    NaN\n",
	"base.dist.frechet.stdev": "\nbase.dist.frechet.stdev( α, s, m )\n    Returns the standard deviation of a Fréchet distribution with shape\n    parameter `α`, scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 2` and `s > 0`, the function returns `+Infinity`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.stdev( 4.0, 2.0, 1.0 )\n    ~1.041\n    > var y = base.dist.frechet.stdev( 4.0, 2.0, -3.0 )\n    ~1.041\n    > y = base.dist.frechet.stdev( 0.5, 2.0, 1.0 )\n    infinity\n    > y = base.dist.frechet.stdev( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.stdev( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.stdev( 1.0, 1.0, NaN )\n    NaN\n",
	"base.dist.frechet.variance": "\nbase.dist.frechet.variance( α, s, m )\n    Returns the variance of a Fréchet distribution with shape parameter `α`,\n    scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 2` and `s > 0`, the function returns `+Infinity`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dist.frechet.variance( 4.0, 2.0, 1.0 )\n    ~1.083\n    > var y = base.dist.frechet.variance( 4.0, 2.0, -3.0 )\n    ~1.083\n    > y = base.dist.frechet.variance( 0.5, 2.0, 1.0 )\n    infinity\n    > y = base.dist.frechet.variance( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dist.frechet.variance( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dist.frechet.variance( 1.0, 1.0, NaN )\n    NaN\n",
	"base.dist.gamma.cdf": "\nbase.dist.gamma.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for a gamma\n    distribution with shape parameter `α` and rate parameter `β` at a value `x`.\n\n    If `α < 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.gamma.cdf( 2.0, 1.0, 1.0 )\n    ~0.865\n    > y = base.dist.gamma.cdf( 2.0, 3.0, 1.0 )\n    ~0.323\n    > y = base.dist.gamma.cdf( -1.0, 2.0, 2.0 )\n    0.0\n    > y = base.dist.gamma.cdf( PINF, 4.0, 2.0 )\n    1.0\n    > y = base.dist.gamma.cdf( NINF, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.gamma.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.gamma.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gamma.cdf( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dist.gamma.cdf( 2.0, -1.0, 1.0 )\n    NaN\n    > y = base.dist.gamma.cdf( 2.0, 1.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `0` when `α = 0.0`:\n    > y = base.dist.gamma.cdf( 2.0, 0.0, 2.0 )\n    1.0\n    > y = base.dist.gamma.cdf( -2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dist.gamma.cdf( 0.0, 0.0, 2.0 )\n    1.0\n\n\nbase.dist.gamma.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.gamma.cdf.factory( 2.0, 0.5 );\n    > var y = myCDF( 6.0 )\n    ~0.801\n    > y = myCDF( 2.0 )\n    ~0.264\n\n",
	"base.dist.gamma.entropy": "\nbase.dist.gamma.entropy( α, β )\n    Returns the differential entropy of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.gamma.entropy( 1.0, 1.0 )\n    1.0\n    > v = base.dist.gamma.entropy( 4.0, 12.0 )\n    ~-0.462\n    > v = base.dist.gamma.entropy( 8.0, 2.0 )\n    ~1.723\n\n",
	"base.dist.gamma.Gamma": "\nbase.dist.gamma.Gamma( [α, β] )\n    Returns a gamma distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Rate parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    gamma: Object\n        Distribution instance.\n\n    gamma.alpha: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    gamma.beta: number\n        Rate parameter. If set, the value must be greater than `0`.\n\n    gamma.entropy: number\n        Read-only property which returns the differential entropy.\n\n    gamma.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    gamma.mean: number\n        Read-only property which returns the expected value.\n\n    gamma.mode: number\n        Read-only property which returns the mode.\n\n    gamma.skewness: number\n        Read-only property which returns the skewness.\n\n    gamma.stdev: number\n        Read-only property which returns the standard deviation.\n\n    gamma.variance: number\n        Read-only property which returns the variance.\n\n    gamma.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    gamma.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    gamma.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    gamma.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    gamma.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var gamma = base.dist.gamma.Gamma( 6.0, 5.0 );\n    > gamma.alpha\n    6.0\n    > gamma.beta\n    5.0\n    > gamma.entropy\n    ~0.647\n    > gamma.kurtosis\n    1.0\n    > gamma.mean\n    1.2\n    > gamma.mode\n    1.0\n    > gamma.skewness\n    ~0.816\n    > gamma.stdev\n    0.49\n    > gamma.variance\n    0.24\n    > gamma.cdf( 0.8 )\n    ~0.215\n    > gamma.logpdf( 1.0 )\n    ~-0.131\n    > gamma.mgf( -0.5 )\n    ~0.564\n    > gamma.pdf( 1.0 )\n    ~0.877\n    > gamma.quantile( 0.8 )\n    ~1.581\n\n",
	"base.dist.gamma.kurtosis": "\nbase.dist.gamma.kurtosis( α, β )\n    Returns the excess kurtosis of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.gamma.kurtosis( 1.0, 1.0 )\n    6.0\n    > v = base.dist.gamma.kurtosis( 4.0, 12.0 )\n    1.5\n    > v = base.dist.gamma.kurtosis( 8.0, 2.0 )\n    0.75\n\n",
	"base.dist.gamma.logpdf": "\nbase.dist.gamma.logpdf( x, α, β )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    gamma distribution with shape parameter `α` and rate parameter `β` at a\n    value `x`.\n\n    If `α < 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.gamma.logpdf( 2.0, 0.5, 1.0 )\n    ~-2.919\n    > y = base.dist.gamma.logpdf( 0.1, 1.0, 1.0 )\n    ~-0.1\n    > y = base.dist.gamma.logpdf( -1.0, 4.0, 2.0 )\n    -infinity\n\n    > y = base.dist.gamma.logpdf( NaN, 0.6, 1.0 )\n    NaN\n    > y = base.dist.gamma.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gamma.logpdf( 0.0, 1.0, NaN )\n    NaN\n\n    // Negative shape parameter:\n    > y = base.dist.gamma.logpdf( 2.0, -1.0, 1.0 )\n    NaN\n    // Non-positive rate parameter:\n    > y = base.dist.gamma.logpdf( 2.0, 1.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `0.0` when `α = 0.0`:\n    > y = base.dist.gamma.logpdf( 2.0, 0.0, 2.0 )\n    -infinity\n    > y = base.dist.gamma.logpdf( 0.0, 0.0, 2.0 )\n    infinity\n\n\nbase.dist.gamma.logpdf.factory( α, β )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a gamma distribution with shape parameter `α` and rate\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dist.gamma.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 2.0 )\n    ~-3.646\n\n",
	"base.dist.gamma.mean": "\nbase.dist.gamma.mean( α, β )\n    Returns the expected value of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.gamma.mean( 1.0, 1.0 )\n    1.0\n    > v = base.dist.gamma.mean( 4.0, 12.0 )\n    ~0.333\n    > v = base.dist.gamma.mean( 8.0, 2.0 )\n    4.0\n\n",
	"base.dist.gamma.mgf": "\nbase.dist.gamma.mgf( t, α, β )\n    Evaluates the moment-generating function (MGF) for a gamma distribution with\n    shape parameter `α` and rate parameter `β` at a value `t`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.gamma.mgf( 0.5, 0.5, 1.0 )\n    ~1.414\n    > y = base.dist.gamma.mgf( 0.1, 1.0, 1.0 )\n    ~1.111\n    > y = base.dist.gamma.mgf( -1.0, 4.0, 2.0 )\n    ~0.198\n\n    > y = base.dist.gamma.mgf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.gamma.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gamma.mgf( 0.0, 1.0, NaN )\n    NaN\n\n    > y = base.dist.gamma.mgf( 2.0, 4.0, 1.0 )\n    NaN\n    > y = base.dist.gamma.mgf( 2.0, -0.5, 1.0 )\n    NaN\n    > y = base.dist.gamma.mgf( 2.0, 1.0, 0.0 )\n    NaN\n    > y = base.dist.gamma.mgf( 2.0, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.gamma.mgf.factory( α, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.gamma.mgf.factory( 3.0, 1.5 );\n    > var y = myMGF( 1.0 )\n    ~26.999\n    > y = myMGF( 0.5 )\n    ~3.375\n\n",
	"base.dist.gamma.mode": "\nbase.dist.gamma.mode( α, β )\n    Returns the mode of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.gamma.mode( 1.0, 1.0 )\n    0.0\n    > v = base.dist.gamma.mode( 4.0, 12.0 )\n    0.25\n    > v = base.dist.gamma.mode( 8.0, 2.0 )\n    3.5\n\n",
	"base.dist.gamma.pdf": "\nbase.dist.gamma.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for a gamma distribution\n    with shape parameter `α` and rate parameter `β` at a value `x`.\n\n    If `α < 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.gamma.pdf( 2.0, 0.5, 1.0 )\n    ~0.054\n    > y = base.dist.gamma.pdf( 0.1, 1.0, 1.0 )\n    ~0.904\n    > y = base.dist.gamma.pdf( -1.0, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.gamma.pdf( NaN, 0.6, 1.0 )\n    NaN\n    > y = base.dist.gamma.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gamma.pdf( 0.0, 1.0, NaN )\n    NaN\n\n    // Negative shape parameter:\n    > y = base.dist.gamma.pdf( 2.0, -1.0, 1.0 )\n    NaN\n    // Non-positive rate parameter:\n    > y = base.dist.gamma.pdf( 2.0, 1.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `0.0` when `α = 0.0`:\n    > y = base.dist.gamma.pdf( 2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dist.gamma.pdf( 0.0, 0.0, 2.0 )\n    infinity\n\n\nbase.dist.gamma.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.gamma.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 2.0 )\n    ~0.026\n\n",
	"base.dist.gamma.quantile": "\nbase.dist.gamma.quantile( p, α, β )\n    Evaluates the quantile function for a gamma distribution with shape\n    parameter `α` and rate parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If `α < 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.gamma.quantile( 0.8, 2.0, 1.0 )\n    ~2.994\n    > y = base.dist.gamma.quantile( 0.5, 4.0, 2.0 )\n    ~1.836\n\n    > y = base.dist.gamma.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dist.gamma.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dist.gamma.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.gamma.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gamma.quantile( 0.0, 1.0, NaN )\n    NaN\n\n    // Non-positive shape parameter:\n    > y = base.dist.gamma.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    // Non-positive rate parameter:\n    > y = base.dist.gamma.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `0.0` when `α = 0.0`:\n    > y = base.dist.gamma.quantile( 0.3, 0.0, 2.0 );\n    0.0\n    > y = base.dist.gamma.quantile( 0.9, 0.0, 2.0 );\n    0.0\n\n\nbase.dist.gamma.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a gamma\n    distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.gamma.quantile.factory( 2.0, 2.0 );\n    > var y = myQuantile( 0.8 )\n    ~1.497\n    > y = myQuantile( 0.4 )\n    ~0.688\n\n",
	"base.dist.gamma.skewness": "\nbase.dist.gamma.skewness( α, β )\n    Returns the skewness of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.gamma.skewness( 1.0, 1.0 )\n    2.0\n    > v = base.dist.gamma.skewness( 4.0, 12.0 )\n    1.0\n    > v = base.dist.gamma.skewness( 8.0, 2.0 )\n    ~0.707\n\n",
	"base.dist.gamma.stdev": "\nbase.dist.gamma.stdev( α, β )\n    Returns the standard deviation of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.gamma.stdev( 1.0, 1.0 )\n    1.0\n    > v = base.dist.gamma.stdev( 4.0, 12.0 )\n    ~0.167\n    > v = base.dist.gamma.stdev( 8.0, 2.0 )\n    ~1.414\n\n",
	"base.dist.gamma.variance": "\nbase.dist.gamma.variance( α, β )\n    Returns the variance of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.gamma.variance( 1.0, 1.0 )\n    1.0\n    > v = base.dist.gamma.variance( 4.0, 12.0 )\n    ~0.028\n    > v = base.dist.gamma.variance( 8.0, 2.0 )\n    2.0\n\n",
	"base.dist.geometric.cdf": "\nbase.dist.geometric.cdf( x, p )\n    Evaluates the cumulative distribution function (CDF) for a geometric\n    distribution with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.geometric.cdf( 2.0, 0.5 )\n    0.875\n    > y = base.dist.geometric.cdf( 2.0, 0.1 )\n    ~0.271\n    > y = base.dist.geometric.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dist.geometric.cdf( NaN, 0.5 )\n    NaN\n    > y = base.dist.geometric.cdf( 0.0, NaN )\n    NaN\n    // Invalid probability\n    > y = base.dist.geometric.cdf( 2.0, 1.4 )\n    NaN\n\n\nbase.dist.geometric.cdf.factory( p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.geometric.cdf.factory( 0.5 );\n    > var y = mycdf( 3.0 )\n    0.9375\n    > y = mycdf( 1.0 )\n    0.75\n\n",
	"base.dist.geometric.entropy": "\nbase.dist.geometric.entropy( p )\n    Returns the entropy of a geometric distribution with success probability\n    `p` (in nats).\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.geometric.entropy( 0.1 )\n    ~3.251\n    > v = base.dist.geometric.entropy( 0.5 )\n    ~1.386\n\n",
	"base.dist.geometric.Geometric": "\nbase.dist.geometric.Geometric( [p] )\n    Returns a geometric distribution object.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability. Must be between `0` and `1`. Default: `0.5`.\n\n    Returns\n    -------\n    geometric: Object\n        Distribution instance.\n\n    geometric.p: number\n        Success probability. If set, the value must be between `0` and `1`.\n\n    geometric.entropy: number\n        Read-only property which returns the differential entropy.\n\n    geometric.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    geometric.mean: number\n        Read-only property which returns the expected value.\n\n    geometric.median: number\n        Read-only property which returns the median.\n\n    geometric.mode: number\n        Read-only property which returns the mode.\n\n    geometric.skewness: number\n        Read-only property which returns the skewness.\n\n    geometric.stdev: number\n        Read-only property which returns the standard deviation.\n\n    geometric.variance: number\n        Read-only property which returns the variance.\n\n    geometric.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    geometric.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    geometric.logpmf: Function\n        Evaluates the natural logarithm of the probability mass function (PMF).\n\n    geometric.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    geometric.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    geometric.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var geometric = base.dist.geometric.Geometric( 0.6 );\n    > geometric.p\n    6.0\n    > geometric.entropy\n    ~1.122\n    > geometric.kurtosis\n    ~6.9\n    > geometric.mean\n    ~0.667\n    > geometric.median\n    0.0\n    > geometric.mode\n    0.0\n    > geometric.skewness\n    ~2.214\n    > geometric.stdev\n    ~1.054\n    > geometric.variance\n    ~1.111\n    > geometric.cdf( 3.0 )\n    ~0.974\n    > geometric.logcdf( 3.0 )\n    ~-0.026\n    > geometric.logpmf( 4.0 )\n    ~-4.176\n    > geometric.mgf( 0.5 )\n    ~2.905\n    > geometric.pmf( 2.0 )\n    ~0.096\n    > geometric.quantile( 0.7 )\n    1.0\n\n",
	"base.dist.geometric.kurtosis": "\nbase.dist.geometric.kurtosis( p )\n    Returns the excess kurtosis of a geometric distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.geometric.kurtosis( 0.1 )\n    ~6.011\n    > v = base.dist.geometric.kurtosis( 0.5 )\n    6.5\n\n",
	"base.dist.geometric.logcdf": "\nbase.dist.geometric.logcdf( x, p )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    geometric distribution with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dist.geometric.logcdf( 2.0, 0.5 )\n    ~-0.134\n    > y = base.dist.geometric.logcdf( 2.0, 0.1 )\n    ~-1.306\n    > y = base.dist.geometric.logcdf( -1.0, 4.0 )\n    -infinity\n    > y = base.dist.geometric.logcdf( NaN, 0.5 )\n    NaN\n    > y = base.dist.geometric.logcdf( 0.0, NaN )\n    NaN\n    // Invalid probability\n    > y = base.dist.geometric.logcdf( 2.0, 1.4 )\n    NaN\n\n\nbase.dist.geometric.logcdf.factory( p )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a geometric distribution with success\n    probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dist.geometric.logcdf.factory( 0.5 );\n    > var y = mylogcdf( 3.0 )\n    ~-0.065\n    > y = mylogcdf( 1.0 )\n    ~-0.288\n\n",
	"base.dist.geometric.logpmf": "\nbase.dist.geometric.logpmf( x, p )\n    Evaluates the logarithm of the probability mass function (PMF) for a\n    geometric distribution with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPMF.\n\n    Examples\n    --------\n    > var y = base.dist.geometric.logpmf( 4.0, 0.3 )\n    ~-2.631\n    > y = base.dist.geometric.logpmf( 2.0, 0.7 )\n    ~-2.765\n    > y = base.dist.geometric.logpmf( -1.0, 0.5 )\n    -infinity\n    > y = base.dist.geometric.logpmf( 0.0, NaN )\n    NaN\n    > y = base.dist.geometric.logpmf( NaN, 0.5 )\n    NaN\n    // Invalid success probability:\n    > y = base.dist.geometric.logpmf( 2.0, 1.5 )\n    NaN\n\n\nbase.dist.geometric.logpmf.factory( p )\n    Returns a function for evaluating the logarithm of the probability mass\n    function (PMF) of a geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dist.geometric.logpmf.factory( 0.5 );\n    > var y = mypmf( 3.0 )\n    ~-2.773\n    > y = mypmf( 1.0 )\n    ~-1.386\n\n",
	"base.dist.geometric.mean": "\nbase.dist.geometric.mean( p )\n    Returns the expected value of a geometric distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.geometric.mean( 0.1 )\n    9.0\n    > v = base.dist.geometric.mean( 0.5 )\n    1.0\n\n",
	"base.dist.geometric.median": "\nbase.dist.geometric.median( p )\n    Returns the median of a geometric distribution with success probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: integer\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.geometric.median( 0.1 )\n    6\n    > v = base.dist.geometric.median( 0.5 )\n    0\n\n",
	"base.dist.geometric.mgf": "\nbase.dist.geometric.mgf( t, p )\n    Evaluates the moment-generating function (MGF) for a geometric\n    distribution with success probability `p` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If `t >= -ln(1-p)`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.geometric.mgf( 0.2, 0.5 )\n    ~1.569\n    > y = base.dist.geometric.mgf( 0.4, 0.5 )\n    ~2.936\n    // Case: t >= -ln(1-p)\n    > y = base.dist.geometric.mgf( 0.8, 0.5 )\n    NaN\n    > y = base.dist.geometric.mgf( NaN, 0.0 )\n    NaN\n    > y = base.dist.geometric.mgf( 0.0, NaN )\n    NaN\n    > y = base.dist.geometric.mgf( -2.0, -1.0 )\n    NaN\n    > y = base.dist.geometric.mgf( 0.2, 2.0 )\n    NaN\n\n\nbase.dist.geometric.mgf.factory( p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dist.geometric.mgf.factory( 0.8 );\n    > var y = mymgf( -0.2 )\n    ~0.783\n\n",
	"base.dist.geometric.mode": "\nbase.dist.geometric.mode( p )\n    Returns the mode of a geometric distribution with success probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: integer\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.geometric.mode( 0.1 )\n    0\n    > v = base.dist.geometric.mode( 0.5 )\n    0\n\n",
	"base.dist.geometric.pmf": "\nbase.dist.geometric.pmf( x, p )\n    Evaluates the probability mass function (PMF) for a geometric distribution\n    with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dist.geometric.pmf( 4.0, 0.3 )\n    ~0.072\n    > y = base.dist.geometric.pmf( 2.0, 0.7 )\n    ~0.063\n    > y = base.dist.geometric.pmf( -1.0, 0.5 )\n    0.0\n    > y = base.dist.geometric.pmf( 0.0, NaN )\n    NaN\n    > y = base.dist.geometric.pmf( NaN, 0.5 )\n    NaN\n    // Invalid success probability:\n    > y = base.dist.geometric.pmf( 2.0, 1.5 )\n    NaN\n\n\nbase.dist.geometric.pmf.factory( p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dist.geometric.pmf.factory( 0.5 );\n    > var y = mypmf( 3.0 )\n    0.0625\n    > y = mypmf( 1.0 )\n    0.25\n\n",
	"base.dist.geometric.quantile": "\nbase.dist.geometric.quantile( r, p )\n    Evaluates the quantile function for a geometric distribution with success\n    probability `p` at a probability `r`.\n\n    If `r < 0` or `r > 1`, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: number\n        Input probability.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.geometric.quantile( 0.8, 0.4 )\n    3\n    > y = base.dist.geometric.quantile( 0.5, 0.4 )\n    1\n    > y = base.dist.geometric.quantile( 0.9, 0.1 )\n    21\n\n    > y = base.dist.geometric.quantile( -0.2, 0.1 )\n    NaN\n\n    > y = base.dist.geometric.quantile( NaN, 0.8 )\n    NaN\n    > y = base.dist.geometric.quantile( 0.4, NaN )\n    NaN\n\n    > y = base.dist.geometric.quantile( 0.5, -1.0 )\n    NaN\n    > y = base.dist.geometric.quantile( 0.5, 1.5 )\n    NaN\n\n\nbase.dist.geometric.quantile.factory( p )\n    Returns a function for evaluating the quantile function of a geometric\n    distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dist.geometric.quantile.factory( 0.4 );\n    > var y = myquantile( 0.4 )\n    0\n    > y = myquantile( 0.8 )\n    3\n    > y = myquantile( 1.0 )\n    infinity\n\n",
	"base.dist.geometric.skewness": "\nbase.dist.geometric.skewness( p )\n    Returns the skewness of a geometric distribution with success probability\n    `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.geometric.skewness( 0.1 )\n    9\n    > v = base.dist.geometric.skewness( 0.5 )\n    1\n\n",
	"base.dist.geometric.stdev": "\nbase.dist.geometric.stdev( p )\n    Returns the standard deviation of a geometric distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.geometric.stdev( 0.1 )\n    ~9.486\n    > v = base.dist.geometric.stdev( 0.5 )\n    ~1.414\n\n",
	"base.dist.geometric.variance": "\nbase.dist.geometric.variance( p )\n    Returns the variance of a geometric distribution with success probability\n    `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.geometric.variance( 0.1 )\n    ~90.0\n    > v = base.dist.geometric.variance( 0.5 )\n    2.0\n\n",
	"base.dist.gumbel.cdf": "\nbase.dist.gumbel.cdf( x, μ, β )\n    Evaluates the cumulative distribution function (CDF) for a Gumbel\n    distribution with location parameter `μ` and scale parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.cdf( 10.0, 0.0, 3.0 )\n    ~0.965\n    > y = base.dist.gumbel.cdf( -2.0, 0.0, 3.0 )\n    ~0.143\n    > y = base.dist.gumbel.cdf( 0.0, 0.0, 1.0 )\n    ~0.368\n    > y = base.dist.gumbel.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.gumbel.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.cdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.gumbel.cdf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.gumbel.cdf.factory( μ, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Gumbel distribution with location parameter `μ` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.gumbel.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.933\n    > y = myCDF( 2.0 )\n    ~0.368\n\n",
	"base.dist.gumbel.entropy": "\nbase.dist.gumbel.entropy( μ, β )\n    Returns the differential entropy of a Gumbel distribution with location\n    parameter `μ` and scale parameter `β` (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.entropy( 0.0, 1.0 )\n    ~1.577\n    > y = base.dist.gumbel.entropy( 4.0, 2.0 )\n    ~2.27\n    > y = base.dist.gumbel.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.entropy( 0.0, NaN )\n    NaN\n    > y = base.dist.gumbel.entropy( 0.0, 0.0 )\n    NaN\n",
	"base.dist.gumbel.Gumbel": "\nbase.dist.gumbel.Gumbel( [μ, β] )\n    Returns a Gumbel distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    β: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    gumbel: Object\n        Distribution instance.\n\n    gumbel.mu: number\n        Location parameter.\n\n    gumbel.beta: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    gumbel.entropy: number\n        Read-only property which returns the differential entropy.\n\n    gumbel.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    gumbel.mean: number\n        Read-only property which returns the expected value.\n\n    gumbel.median: number\n        Read-only property which returns the median.\n\n    gumbel.mode: number\n        Read-only property which returns the mode.\n\n    gumbel.skewness: number\n        Read-only property which returns the skewness.\n\n    gumbel.stdev: number\n        Read-only property which returns the standard deviation.\n\n    gumbel.variance: number\n        Read-only property which returns the variance.\n\n    gumbel.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    gumbel.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    gumbel.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    gumbel.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    gumbel.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    gumbel.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var gumbel = base.dist.gumbel.Gumbel( -2.0, 3.0 );\n    > gumbel.mu\n    -2.0\n    > gumbel.beta\n    3.0\n    > gumbel.entropy\n    ~2.676\n    > gumbel.kurtosis\n    2.4\n    > gumbel.mean\n    ~-0.268\n    > gumbel.median\n    ~-0.9\n    > gumbel.mode\n    -2.0\n    > gumbel.skewness\n    ~1.14\n    > gumbel.stdev\n    ~3.848\n    > gumbel.variance\n    ~14.804\n    > gumbel.cdf( 0.8 )\n    ~0.675\n    > gumbel.logcdf( 0.8 )\n    ~-0.393\n    > gumbel.logpdf( 1.0 )\n    ~-2.467\n    > gumbel.mgf( 0.2 )\n    ~1.487\n    > gumbel.pdf( 1.0 )\n    ~0.085\n    > gumbel.quantile( 0.8 )\n    ~2.5\n\n",
	"base.dist.gumbel.kurtosis": "\nbase.dist.gumbel.kurtosis( μ, β )\n    Returns the excess kurtosis of a Gumbel distribution with location parameter\n    `μ` and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.kurtosis( 0.0, 1.0 )\n    2.4\n    > y = base.dist.gumbel.kurtosis( 4.0, 2.0 )\n    2.4\n    > y = base.dist.gumbel.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dist.gumbel.kurtosis( 0.0, 0.0 )\n    NaN\n",
	"base.dist.gumbel.logcdf": "\nbase.dist.gumbel.logcdf( x, μ, β )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Gumbel distribution with location parameter `μ` and scale parameter `β` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.logcdf( 10.0, 0.0, 3.0 )\n    ~-0.036\n    > y = base.dist.gumbel.logcdf( -2.0, 0.0, 3.0 )\n    ~-1.945\n    > y = base.dist.gumbel.logcdf( 0.0, 0.0, 1.0 )\n    ~-1\n    > y = base.dist.gumbel.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.gumbel.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.logcdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.gumbel.logcdf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.gumbel.logcdf.factory( μ, β )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Gumbel distribution with location parameter\n    `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myLCDF = base.dist.gumbel.logcdf.factory( 2.0, 3.0 );\n    > var y = myLCDF( 10.0 )\n    ~-0.069\n    > y = myLCDF( 2.0 )\n    ~-1\n\n",
	"base.dist.gumbel.logpdf": "\nbase.dist.gumbel.logpdf( x, μ, β )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Gumbel distribution with location parameter `μ` and scale parameter `β` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.logpdf( 0.0, 0.0, 2.0 )\n    ~-1.693\n    > y = base.dist.gumbel.logpdf( 0.0, 0.0, 1.0 )\n    ~-1\n    > y = base.dist.gumbel.logpdf( 1.0, 3.0, 2.0 )\n    ~-2.408\n    > y = base.dist.gumbel.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.gumbel.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.logpdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.gumbel.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.gumbel.logpdf.factory( μ, β )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Gumbel distribution with location parameter `μ` and\n    scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dist.gumbel.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    ~-1.693\n    > y = mylogpdf( 12.0 )\n    ~-2.064\n\n",
	"base.dist.gumbel.mean": "\nbase.dist.gumbel.mean( μ, β )\n    Returns the expected value of a Gumbel distribution with location parameter\n    `μ` and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.mean( 0.0, 1.0 )\n    ~0.577\n    > y = base.dist.gumbel.mean( 4.0, 2.0 )\n    ~5.154\n    > y = base.dist.gumbel.mean( NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.mean( 0.0, NaN )\n    NaN\n    > y = base.dist.gumbel.mean( 0.0, 0.0 )\n    NaN\n",
	"base.dist.gumbel.median": "\nbase.dist.gumbel.median( μ, β )\n    Returns the median of a Gumbel distribution with location parameter `μ` and\n    scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.median( 0.0, 1.0 )\n    ~0.367\n    > y = base.dist.gumbel.median( 4.0, 2.0 )\n    ~4.733\n    > y = base.dist.gumbel.median( NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.median( 0.0, NaN )\n    NaN\n    > y = base.dist.gumbel.median( 0.0, 0.0 )\n    NaN\n",
	"base.dist.gumbel.mgf": "\nbase.dist.gumbel.mgf( t, μ, β )\n    Evaluates the moment-generating function (MGF) for a Gumbel distribution\n    with location parameter `μ` and scale parameter `β` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.mgf( -1.0, 0.0, 3.0 )\n    6.0\n    > y = base.dist.gumbel.mgf( 0.0, 0.0, 1.0 )\n    1.0\n    > y = base.dist.gumbel.mgf( 0.1, 0.0, 3.0 )\n    ~1.298\n\n    > y = base.dist.gumbel.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.gumbel.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.mgf( 0.0, 0.0, NaN )\n    NaN\n\n    // Case: `t >= 1/beta`\n    > y = base.dist.gumbel.mgf( 0.8, 0.0, 2.0 )\n    NaN\n\n    // Non-positive scale parameter:\n    > y = base.dist.gumbel.mgf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.gumbel.mgf.factory( μ, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Gumbel distribution with location parameter `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.gumbel.mgf.factory( 0.0, 3.0 );\n    > var y = myMGF( -1.5 )\n    ~52.343\n    > y = myMGF( -1.0 )\n    6.0\n\n",
	"base.dist.gumbel.mode": "\nbase.dist.gumbel.mode( μ, β )\n    Returns the mode of a Gumbel distribution with location parameter `μ` and\n    scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dist.gumbel.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dist.gumbel.mode( NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.mode( 0.0, NaN )\n    NaN\n    > y = base.dist.gumbel.mode( 0.0, 0.0 )\n    NaN\n",
	"base.dist.gumbel.pdf": "\nbase.dist.gumbel.pdf( x, μ, β )\n    Evaluates the probability density function (PDF) for a Gumbel distribution\n    with location parameter `μ` and scale parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.pdf( 0.0, 0.0, 2.0 )\n    ~0.184\n    > y = base.dist.gumbel.pdf( 0.0, 0.0, 1.0 )\n    ~0.368\n    > y = base.dist.gumbel.pdf( 1.0, 3.0, 2.0 )\n    ~0.09\n    > y = base.dist.gumbel.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.gumbel.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.gumbel.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.gumbel.pdf.factory( μ, β )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Gumbel distribution with location parameter `μ` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.gumbel.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.184\n    > y = myPDF( 12.0 )\n    ~0.127\n\n",
	"base.dist.gumbel.quantile": "\nbase.dist.gumbel.quantile( p, μ, β )\n    Evaluates the quantile function for a Gumbel distribution with location\n    parameter `μ` and scale parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.quantile( 0.8, 0.0, 1.0 )\n    ~1.5\n    > y = base.dist.gumbel.quantile( 0.5, 4.0, 2.0 )\n    ~4.733\n    > y = base.dist.gumbel.quantile( 0.5, 4.0, 4.0 )\n    ~5.466\n\n    > y = base.dist.gumbel.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.gumbel.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.gumbel.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.gumbel.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.gumbel.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.gumbel.quantile.factory( μ, β )\n    Returns a function for evaluating the quantile function of a Gumbel\n    distribution with location parameter `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.gumbel.quantile.factory( 8.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    ~8.733\n    > y = myQuantile( 0.7 )\n    ~10.062\n\n",
	"base.dist.gumbel.skewness": "\nbase.dist.gumbel.skewness( μ, β )\n    Returns the skewness of a Gumbel distribution with location parameter `μ`\n    and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.skewness( 0.0, 1.0 )\n    ~1.14\n    > y = base.dist.gumbel.skewness( 4.0, 2.0 )\n    ~1.14\n    > y = base.dist.gumbel.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.skewness( 0.0, NaN )\n    NaN\n    > y = base.dist.gumbel.skewness( 0.0, 0.0 )\n    NaN\n",
	"base.dist.gumbel.stdev": "\nbase.dist.gumbel.stdev( μ, β )\n    Returns the standard deviation of a Gumbel distribution with location\n    parameter `μ` and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.stdev( 0.0, 1.0 )\n    ~1.283\n    > y = base.dist.gumbel.stdev( 4.0, 2.0 )\n    ~2.565\n    > y = base.dist.gumbel.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.stdev( 0.0, NaN )\n    NaN\n    > y = base.dist.gumbel.stdev( 0.0, 0.0 )\n    NaN\n",
	"base.dist.gumbel.variance": "\nbase.dist.gumbel.variance( μ, β )\n    Returns the variance of a Gumbel distribution with location parameter `μ`\n    and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dist.gumbel.variance( 0.0, 1.0 )\n    ~1.645\n    > y = base.dist.gumbel.variance( 4.0, 2.0 )\n    ~6.58\n    > y = base.dist.gumbel.variance( NaN, 1.0 )\n    NaN\n    > y = base.dist.gumbel.variance( 0.0, NaN )\n    NaN\n    > y = base.dist.gumbel.variance( 0.0, 0.0 )\n    NaN\n",
	"base.dist.hypergeometric.cdf": "\nbase.dist.hypergeometric.cdf( x, N, K, n )\n    Evaluates the cumulative distribution function (CDF) for a hypergeometric\n    distribution with population size `N`, subpopulation size `K`, and number of\n    draws `n` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.hypergeometric.cdf( 1.0, 8, 4, 2 )\n    ~0.786\n    > y = base.dist.hypergeometric.cdf( 1.5, 8, 4, 2 )\n    ~0.786\n    > y = base.dist.hypergeometric.cdf( 2.0, 8, 4, 2 )\n    1.0\n    > y = base.dist.hypergeometric.cdf( 0, 8, 4, 2)\n    ~0.214\n\n    > y = base.dist.hypergeometric.cdf( NaN, 10, 5, 2 )\n    NaN\n    > y = base.dist.hypergeometric.cdf( 0.0, NaN, 5, 2 )\n    NaN\n    > y = base.dist.hypergeometric.cdf( 0.0, 10, NaN, 2 )\n    NaN\n    > y = base.dist.hypergeometric.cdf( 0.0, 10, 5, NaN )\n    NaN\n\n    > y = base.dist.hypergeometric.cdf( 2.0, 10.5, 5, 2 )\n    NaN\n    > y = base.dist.hypergeometric.cdf( 2.0, 10, 1.5, 2 )\n    NaN\n    > y = base.dist.hypergeometric.cdf( 2.0, 10, 5, -2.0 )\n    NaN\n    > y = base.dist.hypergeometric.cdf( 2.0, 10, 5, 12 )\n    NaN\n    > y = base.dist.hypergeometric.cdf( 2.0, 8, 3, 9 )\n    NaN\n\n\nbase.dist.hypergeometric.cdf.factory( N, K, n )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a hypergeometric distribution with population size `N`, subpopulation\n    size `K`, and number of draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = factory( 30, 20, 5 );\n    > var y = myCDF( 4.0 )\n    ~0.891\n    > y = myCDF( 1.0 )\n    ~0.031\n\n",
	"base.dist.hypergeometric.Hypergeometric": "\nbase.dist.hypergeometric.Hypergeometric( N, K, n )\n    Returns a hypergeometric distribution object.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size. Must be a non-negative integer larger than or equal to\n        `K` and `n`.\n\n    K: integer (optional)\n        Subpopulation size. Must be a non-negative integer smaller than or equal\n        to `N`.\n\n    n: integer (optional)\n        Number of draws. Must be a non-negative integer smaller than or equal to\n        `N`.\n\n    Returns\n    -------\n    hypergeometric: Object\n        Distribution instance.\n\n    hypergeometric.N: number\n        Population size. If set, the value must be a non-negative integer larger\n        than or equal to `K` and `n`.\n\n    hypergeometric.K: number\n        Subpopulation size. If set, the value must be a non-negative integer\n        smaller than or equal to `N`.\n\n    hypergeometric.n: number\n        Number of draws. If set, the value must be a non-negative integer\n        smaller than or equal to `N`.\n\n    hypergeometric.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    hypergeometric.mean: number\n        Read-only property which returns the expected value.\n\n    hypergeometric.mode: number\n        Read-only property which returns the mode.\n\n    hypergeometric.skewness: number\n        Read-only property which returns the skewness.\n\n    hypergeometric.stdev: number\n        Read-only property which returns the standard deviation.\n\n    hypergeometric.variance: number\n        Read-only property which returns the variance.\n\n    hypergeometric.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    hypergeometric.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    hypergeometric.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var hypergeometric = base.dist.hypergeometric.Hypergeometric( 100, 70, 20 );\n    > hypergeometric.N\n    100.0\n    > hypergeometric.K\n    70.0\n    > hypergeometric.n\n    20.0\n    > hypergeometric.kurtosis\n    ~-0.063\n    > hypergeometric.mean\n    14.0\n    > hypergeometric.mode\n    14.0\n    > hypergeometric.skewness\n    ~-0.133\n    > hypergeometric.stdev\n    ~1.842\n    > hypergeometric.variance\n    ~3.394\n    > hypergeometric.cdf( 2.9 )\n    ~0.0\n    > hypergeometric.pmf( 10 )\n    ~0.022\n    > hypergeometric.quantile( 0.8 )\n    16.0\n\n",
	"base.dist.hypergeometric.kurtosis": "\nbase.dist.hypergeometric.kurtosis( N, K, n )\n    Returns the excess kurtosis of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.hypergeometric.kurtosis( 16, 11, 4 )\n    ~-0.326\n    > v = base.dist.hypergeometric.kurtosis( 4, 2, 2 )\n    0.0\n\n    > v = base.dist.hypergeometric.kurtosis( 10, 5, 12 )\n    NaN\n    > v = base.dist.hypergeometric.kurtosis( 10.3, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.kurtosis( 10, 5.5, 4 )\n    NaN\n    > v = base.dist.hypergeometric.kurtosis( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dist.hypergeometric.kurtosis( NaN, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.kurtosis( 20, NaN, 4 )\n    NaN\n    > v = base.dist.hypergeometric.kurtosis( 20, 10, NaN )\n    NaN\n\n",
	"base.dist.hypergeometric.mean": "\nbase.dist.hypergeometric.mean( N, K, n )\n    Returns the expected value of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.hypergeometric.mean( 16, 11, 4 )\n    2.75\n    > v = base.dist.hypergeometric.mean( 2, 1, 1 )\n    0.5\n\n    > v = base.dist.hypergeometric.mean( 10, 5, 12 )\n    NaN\n    > v = base.dist.hypergeometric.mean( 10.3, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.mean( 10, 5.5, 4 )\n    NaN\n    > v = base.dist.hypergeometric.mean( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dist.hypergeometric.mean( NaN, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.mean( 20, NaN, 4 )\n    NaN\n    > v = base.dist.hypergeometric.mean( 20, 10, NaN )\n    NaN\n\n",
	"base.dist.hypergeometric.mode": "\nbase.dist.hypergeometric.mode( N, K, n )\n    Returns the mode of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.hypergeometric.mode( 16, 11, 4 )\n    3\n    > v = base.dist.hypergeometric.mode( 2, 1, 1 )\n    1\n\n    > v = base.dist.hypergeometric.mode( 10, 5, 12 )\n    NaN\n    > v = base.dist.hypergeometric.mode( 10.3, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.mode( 10, 5.5, 4 )\n    NaN\n    > v = base.dist.hypergeometric.mode( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dist.hypergeometric.mode( NaN, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.mode( 20, NaN, 4 )\n    NaN\n    > v = base.dist.hypergeometric.mode( 20, 10, NaN )\n    NaN\n\n",
	"base.dist.hypergeometric.pmf": "\nbase.dist.hypergeometric.pmf( x, N, K, n )\n    Evaluates the probability mass function (PMF) for a hypergeometric\n    distribution with population size `N`, subpopulation size `K`, and number of\n    draws `n` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dist.hypergeometric.pmf( 1.0, 8, 4, 2 )\n    ~0.571\n    > y = base.dist.hypergeometric.pmf( 2.0, 8, 4, 2 )\n    ~0.214\n    > y = base.dist.hypergeometric.pmf( 0.0, 8, 4, 2 )\n    ~0.214\n    > y = base.dist.hypergeometric.pmf( 1.5, 8, 4, 2 )\n    0.0\n\n    > y = base.dist.hypergeometric.pmf( NaN, 10, 5, 2 )\n    NaN\n    > y = base.dist.hypergeometric.pmf( 0.0, NaN, 5, 2 )\n    NaN\n    > y = base.dist.hypergeometric.pmf( 0.0, 10, NaN, 2 )\n    NaN\n    > y = base.dist.hypergeometric.pmf( 0.0, 10, 5, NaN )\n    NaN\n\n    > y = base.dist.hypergeometric.pmf( 2.0, 10.5, 5, 2 )\n    NaN\n    > y = base.dist.hypergeometric.pmf( 2.0, 5, 1.5, 2 )\n    NaN\n    > y = base.dist.hypergeometric.pmf( 2.0, 10, 5, -2.0 )\n    NaN\n    > y = base.dist.hypergeometric.pmf( 2.0, 10, 5, 12 )\n    NaN\n    > y = base.dist.hypergeometric.pmf( 2.0, 8, 3, 9 )\n    NaN\n\n\nbase.dist.hypergeometric.pmf.factory( N, K, n )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    hypergeometric distribution with population size `N`, subpopulation size\n    `K`, and number of draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dist.hypergeometric.pmf.factory( 30, 20, 5 );\n    > var y = myPMF( 4.0 )\n    ~0.34\n    > y = myPMF( 1.0 )\n    ~0.029\n\n",
	"base.dist.hypergeometric.quantile": "\nbase.dist.hypergeometric.quantile( p, N, K, n )\n    Evaluates the quantile function for a hypergeometric distribution with\n    population size `N`, subpopulation size `K`, and number of draws `n` at a\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.hypergeometric.quantile( 0.4, 40, 20, 10 )\n    5\n    > y = base.dist.hypergeometric.quantile( 0.8, 60, 40, 20 )\n    15\n    > y = base.dist.hypergeometric.quantile( 0.5, 100, 10, 10 )\n    1\n    > y = base.dist.hypergeometric.quantile( 0.0, 100, 40, 20 )\n    0\n    > y = base.dist.hypergeometric.quantile( 1.0, 100, 40, 20 )\n    20\n\n    > y = base.dist.hypergeometric.quantile( NaN, 40, 20, 10 )\n    NaN\n    > y = base.dist.hypergeometric.quantile( 0.2, NaN, 20, 10 )\n    NaN\n    > y = base.dist.hypergeometric.quantile( 0.2, 40, NaN, 10 )\n    NaN\n    > y = base.dist.hypergeometric.quantile( 0.2, 40, 20, NaN )\n    NaN\n\n\nbase.dist.hypergeometric.quantile.factory( N, K, n )\n    Returns a function for evaluating the quantile function of a hypergeometric\n    distribution with population size `N`, subpopulation size `K`, and number of\n    draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = factory( 100, 20, 10 );\n    > var y = myQuantile( 0.2 )\n    1\n    > y = myQuantile( 0.9 )\n    4\n\n",
	"base.dist.hypergeometric.skewness": "\nbase.dist.hypergeometric.skewness( N, K, n )\n    Returns the skewness of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.hypergeometric.skewness( 16, 11, 4 )\n    ~-0.258\n    > v = base.dist.hypergeometric.skewness( 4, 2, 2 )\n    0.0\n\n    > v = base.dist.hypergeometric.skewness( 10, 5, 12 )\n    NaN\n    > v = base.dist.hypergeometric.skewness( 10.3, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.skewness( 10, 5.5, 4 )\n    NaN\n    > v = base.dist.hypergeometric.skewness( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dist.hypergeometric.skewness( NaN, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.skewness( 20, NaN, 4 )\n    NaN\n    > v = base.dist.hypergeometric.skewness( 20, 10, NaN )\n    NaN\n\n",
	"base.dist.hypergeometric.stdev": "\nbase.dist.hypergeometric.stdev( N, K, n )\n    Returns the standard deviation of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.hypergeometric.stdev( 16, 11, 4 )\n    ~0.829\n    > v = base.dist.hypergeometric.stdev( 2, 1, 1 )\n    0.5\n\n    > v = base.dist.hypergeometric.stdev( 10, 5, 12 )\n    NaN\n    > v = base.dist.hypergeometric.stdev( 10.3, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.stdev( 10, 5.5, 4 )\n    NaN\n    > v = base.dist.hypergeometric.stdev( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dist.hypergeometric.stdev( NaN, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.stdev( 20, NaN, 4 )\n    NaN\n    > v = base.dist.hypergeometric.stdev( 20, 10, NaN )\n    NaN\n\n",
	"base.dist.hypergeometric.variance": "\nbase.dist.hypergeometric.variance( N, K, n )\n    Returns the variance of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` exceeds population size `N`, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.hypergeometric.variance( 16, 11, 4 )\n    ~0.688\n    > v = base.dist.hypergeometric.variance( 2, 1, 1 )\n    0.25\n\n    > v = base.dist.hypergeometric.variance( 10, 5, 12 )\n    NaN\n    > v = base.dist.hypergeometric.variance( 10.3, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.variance( 10, 5.5, 4 )\n    NaN\n    > v = base.dist.hypergeometric.variance( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dist.hypergeometric.variance( NaN, 10, 4 )\n    NaN\n    > v = base.dist.hypergeometric.variance( 20, NaN, 4 )\n    NaN\n    > v = base.dist.hypergeometric.variance( 20, 10, NaN )\n    NaN\n\n",
	"base.dist.invgamma.cdf": "\nbase.dist.invgamma.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for an inverse gamma\n    distribution with shape parameter `α` and scale parameter `β` at a value\n    `x`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.invgamma.cdf( 2.0, 1.0, 1.0 )\n    ~0.607\n    > y = base.dist.invgamma.cdf( 2.0, 3.0, 1.0 )\n    ~0.986\n    > y = base.dist.invgamma.cdf( -1.0, 2.0, 2.0 )\n    0.0\n    > y = base.dist.invgamma.cdf( PINF, 4.0, 2.0 )\n    1.0\n    > y = base.dist.invgamma.cdf( NINF, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.invgamma.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.invgamma.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.invgamma.cdf( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dist.invgamma.cdf( 2.0, -1.0, 1.0 )\n    NaN\n    > y = base.dist.invgamma.cdf( 2.0, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.invgamma.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an inverse gamma distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.invgamma.cdf.factory( 2.0, 0.5 );\n    > var y = myCDF( 0.5 )\n    ~0.736\n    > y = myCDF( 2.0 )\n    ~0.973\n\n",
	"base.dist.invgamma.entropy": "\nbase.dist.invgamma.entropy( α, β )\n    Returns the differential entropy of an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.invgamma.entropy( 1.0, 1.0 )\n    ~2.154\n    > v = base.dist.invgamma.entropy( 4.0, 12.0 )\n    ~1.996\n    > v = base.dist.invgamma.entropy( 8.0, 2.0 )\n    ~-0.922\n\n",
	"base.dist.invgamma.InvGamma": "\nbase.dist.invgamma.InvGamma( [α, β] )\n    Returns an inverse gamma distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    invgamma: Object\n        Distribution instance.\n\n    invgamma.alpha: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    invgamma.beta: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    invgamma.entropy: number\n        Read-only property which returns the differential entropy.\n\n    invgamma.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    invgamma.mean: number\n        Read-only property which returns the expected value.\n\n    invgamma.mode: number\n        Read-only property which returns the mode.\n\n    invgamma.skewness: number\n        Read-only property which returns the skewness.\n\n    invgamma.stdev: number\n        Read-only property which returns the standard deviation.\n\n    invgamma.variance: number\n        Read-only property which returns the variance.\n\n    invgamma.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    invgamma.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    invgamma.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var invgamma = base.dist.invgamma.InvGamma( 6.0, 5.0 );\n    > invgamma.alpha\n    6.0\n    > invgamma.beta\n    5.0\n    > invgamma.entropy\n    ~0.454\n    > invgamma.kurtosis\n    19.0\n    > invgamma.mean\n    1.0\n    > invgamma.mode\n    ~0.714\n    > invgamma.skewness\n    ~2.667\n    > invgamma.stdev\n    0.5\n    > invgamma.variance\n    0.25\n    > invgamma.cdf( 0.8 )\n    ~0.406\n    > invgamma.pdf( 1.0 )\n    ~0.877\n    > invgamma.quantile( 0.8 )\n    ~1.281\n\n",
	"base.dist.invgamma.kurtosis": "\nbase.dist.invgamma.kurtosis( α, β )\n    Returns the excess kurtosis of an inverse gamma distribution.\n\n    If `α <= 4` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.invgamma.kurtosis( 7.0, 5.0 )\n    12.0\n    > v = base.dist.invgamma.kurtosis( 6.0, 12.0 )\n    19.0\n    > v = base.dist.invgamma.kurtosis( 8.0, 2.0 )\n    ~8.7\n\n",
	"base.dist.invgamma.mean": "\nbase.dist.invgamma.mean( α, β )\n    Returns the expected value of an inverse gamma distribution.\n\n    If `α <= 1` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.invgamma.mean( 4.0, 12.0 )\n    4.0\n    > v = base.dist.invgamma.mean( 8.0, 2.0 )\n    ~0.286\n\n",
	"base.dist.invgamma.mode": "\nbase.dist.invgamma.mode( α, β )\n    Returns the mode of an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.invgamma.mode( 1.0, 1.0 )\n    0.5\n    > v = base.dist.invgamma.mode( 4.0, 12.0 )\n    2.4\n    > v = base.dist.invgamma.mode( 8.0, 2.0 )\n    ~0.222\n\n",
	"base.dist.invgamma.pdf": "\nbase.dist.invgamma.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for an inverse gamma\n    distribution with shape parameter `α` and scale parameter `β` at a value\n    `x`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.invgamma.pdf( 2.0, 0.5, 1.0 )\n    ~0.121\n    > y = base.dist.invgamma.pdf( 0.2, 1.0, 1.0 )\n    ~0.168\n    > y = base.dist.invgamma.pdf( -1.0, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.invgamma.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.invgamma.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.invgamma.pdf( 0.0, 1.0, NaN )\n    NaN\n\n    // Negative shape parameter:\n    > y = base.dist.invgamma.pdf( 2.0, -1.0, 1.0 )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.invgamma.pdf( 2.0, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.invgamma.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF)\n    of an inverse gamma distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.invgamma.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 2.0 )\n    ~0.231\n\n",
	"base.dist.invgamma.quantile": "\nbase.dist.invgamma.quantile( p, α, β )\n    Evaluates the quantile function for an inverse gamma distribution with shape\n    parameter `α` and scale parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.invgamma.quantile( 0.8, 2.0, 1.0 )\n    ~1.213\n    > y = base.dist.invgamma.quantile( 0.5, 4.0, 2.0 )\n    ~0.545\n    > y = base.dist.invgamma.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dist.invgamma.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dist.invgamma.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.invgamma.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.invgamma.quantile( 0.0, 1.0, NaN )\n    NaN\n\n    // Non-positive shape parameter:\n    > y = base.dist.invgamma.quantile( 0.5, -1.0, 1.0 )\n\n    // Non-positive rate parameter:\n    > y = base.dist.invgamma.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.invgamma.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of an inverse gamma\n    distribution with shape parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.invgamma.quantile.factory( 2.0, 2.0 );\n    > var y = myQuantile( 0.8 )\n    ~2.426\n    > y = myQuantile( 0.4 )\n    ~0.989\n\n",
	"base.dist.invgamma.skewness": "\nbase.dist.invgamma.skewness( α, β )\n    Returns the skewness of an inverse gamma distribution.\n\n    If `α <= 3` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.invgamma.skewness( 4.0, 12.0 )\n    ~5.657\n    > v = base.dist.invgamma.skewness( 8.0, 2.0 )\n    ~1.96\n\n",
	"base.dist.invgamma.stdev": "\nbase.dist.invgamma.stdev( α, β )\n    Returns the standard deviation of an inverse gamma distribution.\n\n    If `α <= 2` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.invgamma.stdev( 5.0, 7.0 )\n    ~1.01\n    > v = base.dist.invgamma.stdev( 4.0, 12.0 )\n    ~2.828\n    > v = base.dist.invgamma.stdev( 8.0, 2.0 )\n    ~0.118\n\n",
	"base.dist.invgamma.variance": "\nbase.dist.invgamma.variance( α, β )\n    Returns the variance of an inverse gamma distribution.\n\n    If `α <= 2` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.invgamma.variance( 5.0, 7.0 )\n    ~1.021\n    > v = base.dist.invgamma.variance( 4.0, 12.0 )\n    8.0\n    > v = base.dist.invgamma.variance( 8.0, 2.0 )\n    ~0.014\n\n",
	"base.dist.kumaraswamy.cdf": "\nbase.dist.kumaraswamy.cdf( x, a, b )\n    Evaluates the cumulative distribution function (CDF) for Kumaraswamy's\n    double bounded distribution with first shape parameter `a` and second shape\n    parameter `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.kumaraswamy.cdf( 0.5, 1.0, 1.0 )\n    ~0.5\n    > y = base.dist.kumaraswamy.cdf( 0.5, 2.0, 4.0 )\n    ~0.684\n    > y = base.dist.kumaraswamy.cdf( 0.2, 2.0, 2.0 )\n    ~0.078\n    > y = base.dist.kumaraswamy.cdf( 0.8, 4.0, 4.0 )\n    ~0.878\n    > y = base.dist.kumaraswamy.cdf( -0.5, 4.0, 2.0 )\n    0.0\n    > y = base.dist.kumaraswamy.cdf( 1.5, 4.0, 2.0 )\n    1.0\n\n    > y = base.dist.kumaraswamy.cdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dist.kumaraswamy.cdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.kumaraswamy.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.kumaraswamy.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.kumaraswamy.cdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dist.kumaraswamy.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Kumaraswamy's double bounded distribution with first shape parameter\n    `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.kumaraswamy.cdf.factory( 0.5, 1.0 );\n    > var y = mycdf( 0.8 )\n    ~0.675\n    > y = mycdf( 0.3 )\n    ~0.327\n\n",
	"base.dist.kumaraswamy.Kumaraswamy": "\nbase.dist.kumaraswamy.Kumaraswamy( [a, b] )\n    Returns a Kumaraswamy's double bounded distribution object.\n\n    Parameters\n    ----------\n    a: number (optional)\n        First shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    b: number (optional)\n        Second shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    kumaraswamy: Object\n        Distribution instance.\n\n    kumaraswamy.a: number\n        First shape parameter. If set, the value must be greater than `0`.\n\n    kumaraswamy.b: number\n        Second shape parameter. If set, the value must be greater than `0`.\n\n    kumaraswamy.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    kumaraswamy.mean: number\n        Read-only property which returns the expected value.\n\n    kumaraswamy.mode: number\n        Read-only property which returns the mode.\n\n    kumaraswamy.skewness: number\n        Read-only property which returns the skewness.\n\n    kumaraswamy.stdev: number\n        Read-only property which returns the standard deviation.\n\n    kumaraswamy.variance: number\n        Read-only property which returns the variance.\n\n    kumaraswamy.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    kumaraswamy.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    kumaraswamy.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var kumaraswamy = base.dist.kumaraswamy.Kumaraswamy( 6.0, 5.0 );\n    > kumaraswamy.a\n    6.0\n    > kumaraswamy.b\n    5.0\n    > kumaraswamy.kurtosis\n    44.4\n    > kumaraswamy.mean\n    1.5\n    > kumaraswamy.mode\n    ~0.833\n    > kumaraswamy.skewness\n    ~3.578\n    > kumaraswamy.stdev\n    ~1.118\n    > kumaraswamy.variance\n    1.25\n    > kumaraswamy.cdf( 0.8 )\n    ~0.25\n    > kumaraswamy.pdf( 1.0 )\n    ~0.614\n    > kumaraswamy.quantile( 0.8 )\n    ~2.06\n\n",
	"base.dist.kumaraswamy.kurtosis": "\nbase.dist.kumaraswamy.kurtosis( a, b )\n    Returns the excess kurtosis of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.kumaraswamy.kurtosis( 1.0, 1.0 )\n    ~1.8\n    > v = base.dist.kumaraswamy.kurtosis( 4.0, 12.0 )\n    ~2.704\n    > v = base.dist.kumaraswamy.kurtosis( 16.0, 8.0 )\n    ~4.311\n\n",
	"base.dist.kumaraswamy.mean": "\nbase.dist.kumaraswamy.mean( a, b )\n    Returns the mean of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Mean.\n\n    Examples\n    --------\n    > var v = base.dist.kumaraswamy.mean( 1.5, 1.5 )\n    ~0.512\n    > v = base.dist.kumaraswamy.mean( 4.0, 12.0 )\n    ~0.481\n    > v = base.dist.kumaraswamy.mean( 16.0, 8.0 )\n    ~0.846\n\n",
	"base.dist.kumaraswamy.median": "\nbase.dist.kumaraswamy.median( a, b )\n    Returns the median of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.kumaraswamy.median( 1.0, 1.0 )\n    0.5\n    > v = base.dist.kumaraswamy.median( 4.0, 12.0 )\n    ~0.487\n    > v = base.dist.kumaraswamy.median( 16.0, 8.0 )\n    ~0.856\n\n",
	"base.dist.kumaraswamy.mode": "\nbase.dist.kumaraswamy.mode( a, b )\n    Returns the mode of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a < 1`, `b < 1`, or `a = b = 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.kumaraswamy.mode( 1.5, 1.5 )\n    ~0.543\n    > v = base.dist.kumaraswamy.mode( 4.0, 12.0 )\n    ~0.503\n    > v = base.dist.kumaraswamy.mode( 16.0, 8.0 )\n    ~0.875\n\n",
	"base.dist.kumaraswamy.pdf": "\nbase.dist.kumaraswamy.pdf( x, a, b )\n    Evaluates the probability density function (PDF) for Kumaraswamy's double\n    bounded distribution with first shape parameter `a` and second shape\n    parameter `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.kumaraswamy.pdf( 0.5, 1.0, 1.0 )\n    1.0\n    > y = base.dist.kumaraswamy.pdf( 0.5, 2.0, 4.0 )\n    ~1.688\n    > y = base.dist.kumaraswamy.pdf( 0.2, 2.0, 2.0 )\n    ~0.768\n    > y = base.dist.kumaraswamy.pdf( 0.8, 4.0, 4.0 )\n    ~1.686\n    > y = base.dist.kumaraswamy.pdf( -0.5, 4.0, 2.0 )\n    0.0\n    > y = base.dist.kumaraswamy.pdf( 1.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.kumaraswamy.pdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dist.kumaraswamy.pdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.kumaraswamy.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.kumaraswamy.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.kumaraswamy.pdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dist.kumaraswamy.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Kumaraswamy's double bounded distribution with first shape parameter\n    `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dist.kumaraswamy.pdf.factory( 0.5, 1.0 );\n    > var y = mypdf( 0.8 )\n    ~0.559\n    > y = mypdf( 0.3 )\n    ~0.913\n\n",
	"base.dist.kumaraswamy.skewness": "\nbase.dist.kumaraswamy.skewness( a, b )\n    Returns the skewness of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.kumaraswamy.skewness( 1.0, 1.0 )\n    0.0\n    > v = base.dist.kumaraswamy.skewness( 4.0, 12.0 )\n    ~-0.201\n    > v = base.dist.kumaraswamy.skewness( 16.0, 8.0 )\n    ~-0.94\n\n",
	"base.dist.kumaraswamy.stdev": "\nbase.dist.kumaraswamy.stdev( a, b )\n    Returns the standard deviation of a Kumaraswamy's double bounded\n    distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.kumaraswamy.stdev( 1.0, 1.0 )\n    ~0.288\n    > v = base.dist.kumaraswamy.stdev( 4.0, 12.0 )\n    ~0.13\n    > v = base.dist.kumaraswamy.stdev( 16.0, 8.0 )\n    ~0.063\n\n",
	"base.dist.kumaraswamy.variance": "\nbase.dist.kumaraswamy.variance( a, b )\n    Returns the variance of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.kumaraswamy.variance( 1.0, 1.0 )\n    ~0.083\n    > v = base.dist.kumaraswamy.variance( 4.0, 12.0 )\n    ~0.017\n    > v = base.dist.kumaraswamy.variance( 16.0, 8.0 )\n    ~0.004\n\n",
	"base.dist.laplace.cdf": "\nbase.dist.laplace.cdf( x, μ, b )\n    Evaluates the cumulative distribution function (CDF) for a Laplace\n    distribution with scale parameter `b` and location parameter `μ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.cdf( 2.0, 0.0, 1.0 )\n    ~0.932\n    > y = base.dist.laplace.cdf( 5.0, 10.0, 3.0 )\n    ~0.094\n    > y = base.dist.laplace.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.laplace.cdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.cdf( 2.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.laplace.cdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.laplace.cdf.factory( μ, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.laplace.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.965\n    > y = myCDF( 2.0 )\n    0.5\n\n",
	"base.dist.laplace.entropy": "\nbase.dist.laplace.entropy( μ, b )\n    Returns the differential entropy of a Laplace distribution with location\n    parameter `μ` and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Differential entropy.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.entropy( 0.0, 1.0 )\n    ~1.693\n    > y = base.dist.laplace.entropy( 4.0, 2.0 )\n    ~2.386\n    > y = base.dist.laplace.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.entropy( 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.entropy( 0.0, 0.0 )\n    NaN\n",
	"base.dist.laplace.kurtosis": "\nbase.dist.laplace.kurtosis( μ, b )\n    Returns the excess kurtosis of a Laplace distribution with location\n    parameter `μ` and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.kurtosis( 0.0, 1.0 )\n    3.0\n    > y = base.dist.laplace.kurtosis( 4.0, 2.0 )\n    3.0\n    > y = base.dist.laplace.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.kurtosis( 0.0, 0.0 )\n    NaN\n",
	"base.dist.laplace.Laplace": "\nbase.dist.laplace.Laplace( [μ, b] )\n    Returns a Laplace distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    b: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    laplace: Object\n        Distribution instance.\n\n    laplace.mu: number\n        Location parameter.\n\n    laplace.b: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    laplace.entropy: number\n        Read-only property which returns the differential entropy.\n\n    laplace.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    laplace.mean: number\n        Read-only property which returns the expected value.\n\n    laplace.median: number\n        Read-only property which returns the median.\n\n    laplace.mode: number\n        Read-only property which returns the mode.\n\n    laplace.skewness: number\n        Read-only property which returns the skewness.\n\n    laplace.stdev: number\n        Read-only property which returns the standard deviation.\n\n    laplace.variance: number\n        Read-only property which returns the variance.\n\n    laplace.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    laplace.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    laplace.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    laplace.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    laplace.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    laplace.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var laplace = base.dist.laplace.Laplace( -2.0, 3.0 );\n    > laplace.mu\n    -2.0\n    > laplace.b\n    3.0\n    > laplace.entropy\n    ~2.792\n    > laplace.kurtosis\n    3.0\n    > laplace.mean\n    -2.0\n    > laplace.median\n    -2.0\n    > laplace.mode\n    -2.0\n    > laplace.skewness\n    0.0\n    > laplace.stdev\n    ~4.243\n    > laplace.variance\n    18.0\n    > laplace.cdf( 0.8 )\n    ~0.803\n    > laplace.logcdf( 0.8 )\n    ~-0.219\n    > laplace.logpdf( 1.0 )\n    ~-2.792\n    > laplace.mgf( 0.2 )\n    ~1.047\n    > laplace.pdf( 2.0 )\n    ~0.044\n    > laplace.quantile( 0.9 )\n    ~2.828\n\n",
	"base.dist.laplace.logcdf": "\nbase.dist.laplace.logcdf( x, μ, b )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Laplace distribution with scale parameter `b` and location parameter `μ` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.logcdf( 2.0, 0.0, 1.0 )\n    ~-0.07\n    > y = base.dist.laplace.logcdf( 5.0, 10.0, 3.0 )\n    ~-2.364\n    > y = base.dist.laplace.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.laplace.logcdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.logcdf( 2.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.laplace.logcdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.laplace.logcdf.factory( μ, b )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Laplace distribution with scale parameter\n    `b` and location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dist.laplace.logcdf.factory( 2.0, 3.0 );\n    > var y = mylogcdf( 10.0 )\n    ~-0.036\n    > y = mylogcdf( 2.0 )\n    ~-0.693\n\n",
	"base.dist.laplace.logpdf": "\nbase.dist.laplace.logpdf( x, μ, b )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Laplace distribution with scale parameter `b` and location parameter `μ` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.logpdf( 2.0, 0.0, 1.0 )\n    ~-2.688\n    > y = base.dist.laplace.logpdf( -1.0, 2.0, 3.0 )\n    ~-2.797\n    > y = base.dist.laplace.logpdf( 2.5, 2.0, 3.0 )\n    ~-1.959\n    > y = base.dist.laplace.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.laplace.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.logpdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.laplace.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.laplace.logpdf.factory( μ, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Laplace distribution with scale parameter `b` and\n    location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dist.laplace.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 10.0 )\n    -1.386\n\n",
	"base.dist.laplace.mean": "\nbase.dist.laplace.mean( μ, b )\n    Returns the expected value of a Laplace distribution with location parameter\n    `μ` and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.mean( 0.0, 1.0 )\n    0.0\n    > y = base.dist.laplace.mean( 4.0, 2.0 )\n    4.0\n    > y = base.dist.laplace.mean( NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.mean( 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.mean( 0.0, 0.0 )\n    NaN\n",
	"base.dist.laplace.median": "\nbase.dist.laplace.median( μ, b )\n    Returns the median of a Laplace distribution with location parameter `μ` and\n    scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.median( 0.0, 1.0 )\n    0.0\n    > y = base.dist.laplace.median( 4.0, 2.0 )\n    4.0\n    > y = base.dist.laplace.median( NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.median( 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.median( 0.0, 0.0 )\n    NaN\n",
	"base.dist.laplace.mgf": "\nbase.dist.laplace.mgf( t, μ, b )\n    Evaluates the moment-generating function (MGF) for a Laplace\n    distribution with scale parameter `b` and location parameter `μ` at a\n    value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.mgf( 0.5, 0.0, 1.0 )\n    ~1.333\n    > y = base.dist.laplace.mgf( 0.0, 0.0, 1.0 )\n    1.0\n    > y = base.dist.laplace.mgf( -1.0, 4.0, 0.2 )\n    ~0.019\n    > y = base.dist.laplace.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.laplace.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.mgf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.mgf( 1.0, 0.0, 2.0 )\n    NaN\n    > y = base.dist.laplace.mgf( -0.5, 0.0, 4.0 )\n    NaN\n    > y = base.dist.laplace.mgf( 2.0, 0.0, 0.0 )\n    NaN\n    > y = base.dist.laplace.mgf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.laplace.mgf.factory( μ, b )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dist.laplace.mgf.factory( 4.0, 2.0 );\n    > var y = mymgf( 0.2 )\n    ~2.649\n    > y = mymgf( 0.4 )\n    ~13.758\n\n",
	"base.dist.laplace.mode": "\nbase.dist.laplace.mode( μ, b )\n    Returns the mode of a Laplace distribution with location parameter `μ` and\n    scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dist.laplace.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dist.laplace.mode( NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.mode( 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.mode( 0.0, 0.0 )\n    NaN\n",
	"base.dist.laplace.pdf": "\nbase.dist.laplace.pdf( x, μ, b )\n    Evaluates the probability density function (PDF) for a Laplace\n    distribution with scale parameter `b` and location parameter `μ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.pdf( 2.0, 0.0, 1.0 )\n    ~0.068\n    > y = base.dist.laplace.pdf( -1.0, 2.0, 3.0 )\n    ~0.061\n    > y = base.dist.laplace.pdf( 2.5, 2.0, 3.0 )\n    ~0.141\n    > y = base.dist.laplace.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.laplace.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.laplace.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.laplace.pdf.factory( μ, b )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.laplace.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    0.25\n\n",
	"base.dist.laplace.quantile": "\nbase.dist.laplace.quantile( p, μ, b )\n    Evaluates the quantile function for a Laplace distribution with scale\n    parameter `b` and location parameter `μ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.quantile( 0.8, 0.0, 1.0 )\n    ~0.916\n    > y = base.dist.laplace.quantile( 0.5, 4.0, 2.0 )\n    4.0\n\n    > y = base.dist.laplace.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.laplace.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.laplace.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.laplace.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.laplace.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.laplace.quantile.factory( μ, b )\n    Returns a function for evaluating the quantile function of a Laplace\n    distribution with scale parameter `b` and location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.laplace.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n    > y = myQuantile( 0.8 )\n    ~11.833\n\n",
	"base.dist.laplace.skewness": "\nbase.dist.laplace.skewness( μ, b )\n    Returns the skewness of a Laplace distribution with location parameter `μ`\n    and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.skewness( 0.0, 1.0 )\n    0.0\n    > y = base.dist.laplace.skewness( 4.0, 2.0 )\n    0.0\n    > y = base.dist.laplace.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.skewness( 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.skewness( 0.0, 0.0 )\n    NaN\n",
	"base.dist.laplace.stdev": "\nbase.dist.laplace.stdev( μ, b )\n    Returns the standard deviation of a Laplace distribution with location\n    parameter `μ` and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.stdev( 0.0, 1.0 )\n    ~1.414\n    > y = base.dist.laplace.stdev( 4.0, 2.0 )\n    ~2.828\n    > y = base.dist.laplace.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.stdev( 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.stdev( 0.0, 0.0 )\n    NaN\n",
	"base.dist.laplace.variance": "\nbase.dist.laplace.variance( μ, b )\n    Returns the variance of a Laplace distribution with location parameter `μ`\n    and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dist.laplace.variance( 0.0, 1.0 )\n    2.0\n    > y = base.dist.laplace.variance( 4.0, 2.0 )\n    8.0\n    > y = base.dist.laplace.variance( NaN, 1.0 )\n    NaN\n    > y = base.dist.laplace.variance( 0.0, NaN )\n    NaN\n    > y = base.dist.laplace.variance( 0.0, 0.0 )\n    NaN\n",
	"base.dist.levy.cdf": "\nbase.dist.levy.cdf( x, μ, c )\n    Evaluates the cumulative distribution function (CDF) for a Lévy distribution\n    with location parameter `μ` and scale parameter `c` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.levy.cdf( 2.0, 0.0, 1.0 )\n    ~0.48\n    > y = base.dist.levy.cdf( 12.0, 10.0, 3.0 )\n    ~0.221\n    > y = base.dist.levy.cdf( 9.0, 10.0, 3.0 )\n    NaN\n    > y = base.dist.levy.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.levy.cdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.cdf( 2.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.levy.cdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.levy.cdf.factory( μ, c )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Lévy distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.levy.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.54\n    > y = myCDF( 2.0 )\n    0.0\n\n",
	"base.dist.levy.entropy": "\nbase.dist.levy.entropy( μ, c )\n    Returns the entropy of a Lévy distribution with location parameter `μ` and\n    scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dist.levy.entropy( 0.0, 1.0 )\n    ~3.324\n    > y = base.dist.levy.entropy( 4.0, 2.0 )\n    ~4.018\n    > y = base.dist.levy.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.entropy( 0.0, NaN )\n    NaN\n    > y = base.dist.levy.entropy( 0.0, 0.0 )\n    NaN\n",
	"base.dist.levy.Levy": "\nbase.dist.levy.Levy( [μ, c] )\n    Returns a Lévy distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    c: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    levy: Object\n        Distribution instance.\n\n    levy.mu: number\n        Location parameter.\n\n    levy.c: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    levy.entropy: number\n        Read-only property which returns the differential entropy.\n\n    levy.mean: number\n        Read-only property which returns the expected value.\n\n    levy.median: number\n        Read-only property which returns the median.\n\n    levy.mode: number\n        Read-only property which returns the mode.\n\n    levy.stdev: number\n        Read-only property which returns the standard deviation.\n\n    levy.variance: number\n        Read-only property which returns the variance.\n\n    levy.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    levy.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    levy.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    levy.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var levy = base.dist.levy.Levy( -2.0, 3.0 );\n    > levy.mu\n    -2.0\n    > levy.c\n    3.0\n    > levy.entropy\n    ~4.423\n    > levy.mean\n    infinity\n    > levy.median\n    ~4.594\n    > levy.mode\n    -1.0\n    > levy.stdev\n    infinity\n    > levy.variance\n    infinity\n    > levy.cdf( 0.8 )\n    ~0.3\n    > levy.logpdf( 1.0 )\n    ~-2.518\n    > levy.pdf( 1.0 )\n    ~0.081\n    > levy.quantile( 0.8 )\n    ~44.74\n\n",
	"base.dist.levy.logpdf": "\nbase.dist.levy.logpdf( x, μ, c )\n    Evaluates the logarithm of the probability density function (PDF) for a Lévy\n    distribution with location parameter `μ` and scale parameter `c` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.levy.logpdf( 2.0, 0.0, 1.0 )\n    ~-2.209\n    > y = base.dist.levy.logpdf( -1.0, 4.0, 2.0 )\n    -infinity\n    > y = base.dist.levy.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.levy.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.logpdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.levy.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.levy.logpdf.factory( μ, c )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Lévy distribution with location parameter `μ` and scale\n    parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dist.levy.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 11.0 )\n    ~-1.572\n\n",
	"base.dist.levy.mean": "\nbase.dist.levy.mean( μ, c )\n    Returns the expected value of a Lévy distribution with location parameter\n    `μ` and scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dist.levy.mean( 0.0, 1.0 )\n    infinity\n    > y = base.dist.levy.mean( 4.0, 3.0 )\n    infinity\n    > y = base.dist.levy.mean( NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.mean( 0.0, NaN )\n    NaN\n    > y = base.dist.levy.mean( 0.0, 0.0 )\n    NaN\n",
	"base.dist.levy.median": "\nbase.dist.levy.median( μ, c )\n    Returns the median of a Lévy distribution with location parameter `μ` and\n    scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dist.levy.median( 0.0, 1.0 )\n    ~2.198\n    > y = base.dist.levy.median( 4.0, 3.0 )\n    ~10.594\n    > y = base.dist.levy.median( NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.median( 0.0, NaN )\n    NaN\n    > y = base.dist.levy.median( 0.0, 0.0 )\n    NaN\n",
	"base.dist.levy.mode": "\nbase.dist.levy.mode( μ, c )\n    Returns the mode of a Lévy distribution with location parameter `μ` and\n    scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dist.levy.mode( 0.0, 1.0 )\n    ~0.333\n    > y = base.dist.levy.mode( 4.0, 3.0 )\n    5.0\n    > y = base.dist.levy.mode( NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.mode( 0.0, NaN )\n    NaN\n    > y = base.dist.levy.mode( 0.0, 0.0 )\n    NaN\n",
	"base.dist.levy.pdf": "\nbase.dist.levy.pdf( x, μ, c )\n    Evaluates the probability density function (PDF) for a Lévy distribution\n    with location parameter `μ` and scale parameter `c` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.levy.pdf( 2.0, 0.0, 1.0 )\n    ~0.11\n    > y = base.dist.levy.pdf( -1.0, 4.0, 2.0 )\n    0.0\n    > y = base.dist.levy.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.levy.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.levy.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.levy.pdf.factory( μ, c )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Lévy distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.levy.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 11.0 )\n    ~0.208\n\n",
	"base.dist.levy.quantile": "\nbase.dist.levy.quantile( p, μ, c )\n    Evaluates the quantile function for a Lévy distribution with location\n    parameter `μ` and scale parameter `c` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.levy.quantile( 0.8, 0.0, 1.0 )\n    ~15.58\n    > y = base.dist.levy.quantile( 0.5, 4.0, 2.0 )\n    ~8.396\n\n    > y = base.dist.levy.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.levy.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.levy.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.levy.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.levy.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.levy.quantile.factory( μ, c )\n    Returns a function for evaluating the quantile function of a Lévy\n    distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.levy.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    ~14.396\n\n",
	"base.dist.levy.stdev": "\nbase.dist.levy.stdev( μ, c )\n    Returns the standard deviation of a Lévy distribution with location\n    parameter `μ` and scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dist.levy.stdev( 0.0, 1.0 )\n    infinity\n    > y = base.dist.levy.stdev( 4.0, 3.0 )\n    infinity\n    > y = base.dist.levy.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.stdev( 0.0, NaN )\n    NaN\n    > y = base.dist.levy.stdev( 0.0, 0.0 )\n    NaN\n",
	"base.dist.levy.variance": "\nbase.dist.levy.variance( μ, c )\n    Returns the variance of a Lévy distribution with location parameter `μ` and\n    scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dist.levy.variance( 0.0, 1.0 )\n    infinity\n    > y = base.dist.levy.variance( 4.0, 3.0 )\n    infinity\n    > y = base.dist.levy.variance( NaN, 1.0 )\n    NaN\n    > y = base.dist.levy.variance( 0.0, NaN )\n    NaN\n    > y = base.dist.levy.variance( 0.0, 0.0 )\n    NaN\n",
	"base.dist.logistic.cdf": "\nbase.dist.logistic.cdf( x, μ, s )\n    Evaluates the cumulative distribution function (CDF) for a logistic\n    distribution with location parameter `μ` and scale parameter `s` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.cdf( 2.0, 0.0, 1.0 )\n    ~0.881\n    > y = base.dist.logistic.cdf( 5.0, 10.0, 3.0 )\n    ~0.159\n\n    > y = base.dist.logistic.cdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.cdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.cdf( NaN, 0.0, 1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `s = 0.0`:\n    > y = base.dist.logistic.cdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dist.logistic.cdf( 8.0, 8.0, 0.0 )\n    1.0\n    > y = base.dist.logistic.cdf( 10.0, 8.0, 0.0 )\n    1.0\n\n\nbase.dist.logistic.cdf.factory( μ, s )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a logistic distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.logistic.cdf.factory( 3.0, 1.5 );\n    > var y = mycdf( 1.0 )\n    ~0.209\n\n",
	"base.dist.logistic.entropy": "\nbase.dist.logistic.entropy( μ, s )\n    Returns the entropy of a logistic distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.entropy( 0.0, 1.0 )\n    2.0\n    > y = base.dist.logistic.entropy( 4.0, 2.0 )\n    ~2.693\n    > y = base.dist.logistic.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.entropy( 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.entropy( 0.0, 0.0 )\n    NaN\n",
	"base.dist.logistic.kurtosis": "\nbase.dist.logistic.kurtosis( μ, s )\n    Returns the excess kurtosis of a logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.kurtosis( 0.0, 1.0 )\n    1.2\n    > y = base.dist.logistic.kurtosis( 4.0, 2.0 )\n    1.2\n    > y = base.dist.logistic.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.kurtosis( 0.0, 0.0 )\n    NaN\n",
	"base.dist.logistic.logcdf": "\nbase.dist.logistic.logcdf( x, μ, s )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    logistic distribution with location parameter `μ` and scale parameter `s` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.logcdf( 2.0, 0.0, 1.0 )\n    ~-0.127\n    > y = base.dist.logistic.logcdf( 5.0, 10.0, 3.0 )\n    ~-1.839\n    > y = base.dist.logistic.logcdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.logcdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.logcdf( NaN, 0.0, 1.0 )\n    NaN\n\n\nbase.dist.logistic.logcdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dist.logistic.logcdf.factory( 3.0, 1.5 );\n    > var y = mylogcdf( 1.0 )\n    ~-1.565\n\n",
	"base.dist.logistic.Logistic": "\nbase.dist.logistic.Logistic( [μ, s] )\n    Returns a logistic distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    s: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    logistic: Object\n        Distribution instance.\n\n    logistic.mu: number\n        Location parameter.\n\n    logistic.s: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    logistic.entropy: number\n        Read-only property which returns the differential entropy.\n\n    logistic.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    logistic.mean: number\n        Read-only property which returns the expected value.\n\n    logistic.median: number\n        Read-only property which returns the median.\n\n    logistic.mode: number\n        Read-only property which returns the mode.\n\n    logistic.skewness: number\n        Read-only property which returns the skewness.\n\n    logistic.stdev: number\n        Read-only property which returns the standard deviation.\n\n    logistic.variance: number\n        Read-only property which returns the variance.\n\n    logistic.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    logistic.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    logistic.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    logistic.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    logistic.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    logistic.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var logistic = base.dist.logistic.Logistic( -2.0, 3.0 );\n    > logistic.mu\n    -2.0\n    > logistic.s\n    3.0\n    > logistic.entropy\n    ~3.1\n    > logistic.kurtosis\n    1.2\n    > logistic.mean\n    -2.0\n    > logistic.median\n    -2.0\n    > logistic.mode\n    -2.0\n    > logistic.skewness\n    0.0\n    > logistic.stdev\n    ~5.441\n    > logistic.variance\n    ~29.609\n    > logistic.cdf( 0.8 )\n    ~0.718\n    > logistic.logcdf( 0.8 )\n    ~-0.332\n    > logistic.logpdf( 2.0 )\n    ~-2.9\n    > logistic.mgf( 0.2 )\n    ~1.329\n    > logistic.pdf( 2.0 )\n    ~0.055\n    > logistic.quantile( 0.9 )\n    ~4.592\n\n",
	"base.dist.logistic.logpdf": "\nbase.dist.logistic.logpdf( x, μ, s )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    logistic distribution with location parameter `μ` and scale parameter `s` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.logpdf( 2.0, 0.0, 1.0 )\n    ~-2.254\n    > y = base.dist.logistic.logpdf( -1.0, 4.0, 2.0 )\n    ~-3.352\n    > y = base.dist.logistic.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.logistic.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.logpdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.logistic.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution at `s = 0.0`:\n    > y = base.dist.logistic.logpdf( 2.0, 8.0, 0.0 )\n    -infinity\n    > y = base.dist.logistic.logpdf( 8.0, 8.0, 0.0 )\n    infinity\n\n\nbase.dist.logistic.logpdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Logistic distribution with location parameter `μ` and\n    scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dist.logistic.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    -2.079\n\n",
	"base.dist.logistic.mean": "\nbase.dist.logistic.mean( μ, s )\n    Returns the expected value of a logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.mean( 0.0, 1.0 )\n    0.0\n    > y = base.dist.logistic.mean( 4.0, 2.0 )\n    4.0\n    > y = base.dist.logistic.mean( NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.mean( 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.mean( 0.0, 0.0 )\n    NaN\n",
	"base.dist.logistic.median": "\nbase.dist.logistic.median( μ, s )\n    Returns the median of a logistic distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.median( 0.0, 1.0 )\n    0.0\n    > y = base.dist.logistic.median( 4.0, 2.0 )\n    4.0\n    > y = base.dist.logistic.median( NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.median( 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.median( 0.0, 0.0 )\n    NaN\n",
	"base.dist.logistic.mgf": "\nbase.dist.logistic.mgf( t, μ, s )\n    Evaluates the moment-generating function (MGF) for a logistic distribution\n    with location parameter `μ` and scale parameter `s` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.mgf( 0.9, 0.0, 1.0 )\n    ~9.15\n    > y = base.dist.logistic.mgf( 0.1, 4.0, 4.0 )\n    ~1.971\n    > y = base.dist.logistic.mgf( -0.2, 4.0, 4.0 )\n    ~1.921\n    > y = base.dist.logistic.mgf( 0.5, 0.0, -1.0 )\n    NaN\n    > y = base.dist.logistic.mgf( 0.5, 0.0, 4.0 )\n    NaN\n    > y = base.dist.logistic.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.logistic.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.mgf( 0.0, 0.0, NaN )\n    NaN\n\n\nbase.dist.logistic.mgf.factory( μ, s )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a Logistic distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dist.logistic.mgf.factory( 10.0, 0.5 );\n    > var y = mymgf( 0.5 )\n    ~164.846\n    > y = mymgf( 2.0 )\n    infinity\n\n",
	"base.dist.logistic.mode": "\nbase.dist.logistic.mode( μ, s )\n    Returns the mode of a logistic distribution with location parameter `μ` and\n    scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dist.logistic.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dist.logistic.mode( NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.mode( 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.mode( 0.0, 0.0 )\n    NaN\n",
	"base.dist.logistic.pdf": "\nbase.dist.logistic.pdf( x, μ, s )\n    Evaluates the probability density function (PDF) for a logistic distribution\n    with location parameter `μ` and scale parameter `s` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.pdf( 2.0, 0.0, 1.0 )\n    ~0.105\n    > y = base.dist.logistic.pdf( -1.0, 4.0, 2.0 )\n    ~0.035\n    > y = base.dist.logistic.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.logistic.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.logistic.pdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dist.logistic.pdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dist.logistic.pdf( 8.0, 8.0, 0.0 )\n    infinity\n\n\nbase.dist.logistic.pdf.factory( μ, s )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Logistic distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.logistic.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    0.125\n\n",
	"base.dist.logistic.quantile": "\nbase.dist.logistic.quantile( p, μ, s )\n    Evaluates the quantile function for a logistic distribution with location\n    parameter `μ` and scale parameter `s` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.quantile( 0.8, 0.0, 1.0 )\n    ~1.386\n    > y = base.dist.logistic.quantile( 0.5, 4.0, 2.0 )\n    4\n\n    > y = base.dist.logistic.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.logistic.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.logistic.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.logistic.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.logistic.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.logistic.quantile.factory( μ, s )\n    Returns a function for evaluating the quantile function of a logistic\n    distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.logistic.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n",
	"base.dist.logistic.skewness": "\nbase.dist.logistic.skewness( μ, s )\n    Returns the skewness of a logistic distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.skewness( 0.0, 1.0 )\n    0.0\n    > y = base.dist.logistic.skewness( 4.0, 2.0 )\n    0.0\n    > y = base.dist.logistic.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.skewness( 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.skewness( 0.0, 0.0 )\n    NaN\n",
	"base.dist.logistic.stdev": "\nbase.dist.logistic.stdev( μ, s )\n    Returns the standard deviation of a logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.stdev( 0.0, 1.0 )\n    ~1.814\n    > y = base.dist.logistic.stdev( 4.0, 2.0 )\n    ~3.628\n    > y = base.dist.logistic.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.stdev( 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.stdev( 0.0, 0.0 )\n    NaN\n",
	"base.dist.logistic.variance": "\nbase.dist.logistic.variance( μ, s )\n    Returns the variance of a logistic distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dist.logistic.variance( 0.0, 1.0 )\n    ~3.29\n    > y = base.dist.logistic.variance( 4.0, 2.0 )\n    ~13.159\n    > y = base.dist.logistic.variance( NaN, 1.0 )\n    NaN\n    > y = base.dist.logistic.variance( 0.0, NaN )\n    NaN\n    > y = base.dist.logistic.variance( 0.0, 0.0 )\n    NaN\n",
	"base.dist.lognormal.cdf": "\nbase.dist.lognormal.cdf( x, μ, σ )\n    Evaluates the cumulative distribution function (CDF) for a lognormal\n    distribution with location parameter `μ` and scale parameter `σ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.cdf( 2.0, 0.0, 1.0 )\n    ~0.756\n    > y = base.dist.lognormal.cdf( 5.0, 10.0, 3.0 )\n    ~0.003\n\n    > y = base.dist.lognormal.cdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.cdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.cdf( NaN, 0.0, 1.0 )\n    NaN\n\n    // Non-positive scale parameter `σ`:\n    > y = base.dist.lognormal.cdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dist.lognormal.cdf( 2.0, 0.0, 0.0 )\n    NaN\n\n\nbase.dist.lognormal.cdf.factory( μ, σ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a lognormal distribution with location parameter `μ` and scale parameter\n    `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = factory( 3.0, 1.5 );\n    > var y = myCDF( 1.0 )\n    ~0.023\n    > y = myCDF( 4.0 )\n    ~0.141\n\n",
	"base.dist.lognormal.entropy": "\nbase.dist.lognormal.entropy( μ, σ )\n    Returns the differential entropy of a lognormal distribution with location\n    `μ` and scale `σ` (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.entropy( 0.0, 1.0 )\n    ~1.419\n    > y = base.dist.lognormal.entropy( 5.0, 2.0 )\n    ~7.112\n    > y = base.dist.lognormal.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.entropy( 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.entropy( 0.0, 0.0 )\n    NaN\n",
	"base.dist.lognormal.kurtosis": "\nbase.dist.lognormal.kurtosis( μ, σ )\n    Returns the excess kurtosis of a lognormal distribution with location `μ`\n    and scale `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Kurtosis.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.kurtosis( 0.0, 1.0 )\n    ~110.936\n    > y = base.dist.lognormal.kurtosis( 5.0, 2.0 )\n    ~9220556.977\n    > y = base.dist.lognormal.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.kurtosis( 0.0, 0.0 )\n    NaN\n",
	"base.dist.lognormal.LogNormal": "\nbase.dist.lognormal.LogNormal( [μ, σ] )\n    Returns a lognormal distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    σ: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    lognormal: Object\n        Distribution instance.\n\n    lognormal.mu: number\n        Location parameter.\n\n    lognormal.sigma: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    lognormal.entropy: number\n        Read-only property which returns the differential entropy.\n\n    lognormal.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    lognormal.mean: number\n        Read-only property which returns the expected value.\n\n    lognormal.median: number\n        Read-only property which returns the median.\n\n    lognormal.mode: number\n        Read-only property which returns the mode.\n\n    lognormal.skewness: number\n        Read-only property which returns the skewness.\n\n    lognormal.stdev: number\n        Read-only property which returns the standard deviation.\n\n    lognormal.variance: number\n        Read-only property which returns the variance.\n\n    lognormal.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    lognormal.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    lognormal.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var lognormal = base.dist.lognormal.LogNormal( -2.0, 3.0 );\n    > lognormal.mu\n    -2.0\n    > lognormal.sigma\n    3.0\n    > lognormal.entropy\n    ~0.518\n    > lognormal.kurtosis\n    4312295840576300\n    > lognormal.mean\n    ~12.182\n    > lognormal.median\n    ~0.135\n    > lognormal.mode\n    ~0.0\n    > lognormal.skewness\n    ~729551.383\n    > lognormal.stdev\n    ~1096.565\n    > lognormal.variance\n    ~1202455.871\n    > lognormal.cdf( 0.8 )\n    ~0.723\n    > lognormal.pdf( 2.0 )\n    ~0.044\n    > lognormal.quantile( 0.9 )\n    ~6.326\n\n",
	"base.dist.lognormal.mean": "\nbase.dist.lognormal.mean( μ, σ )\n    Returns the expected value of a lognormal distribution with location `μ` and\n    scale `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.mean( 0.0, 1.0 )\n    ~1.649\n    > y = base.dist.lognormal.mean( 4.0, 2.0 )\n    ~403.429\n    > y = base.dist.lognormal.mean( NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.mean( 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.mean( 0.0, 0.0 )\n    NaN\n",
	"base.dist.lognormal.median": "\nbase.dist.lognormal.median( μ, σ )\n    Returns the median of a lognormal distribution with location `μ` and scale\n    `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.median( 0.0, 1.0 )\n    1.0\n    > y = base.dist.lognormal.median( 5.0, 2.0 )\n    ~148.413\n    > y = base.dist.lognormal.median( NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.median( 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.median( 0.0, 0.0 )\n    NaN\n",
	"base.dist.lognormal.mode": "\nbase.dist.lognormal.mode( μ, σ )\n    Returns the mode of a lognormal distribution with location `μ` and scale\n    `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.mode( 0.0, 1.0 )\n    ~0.368\n    > y = base.dist.lognormal.mode( 5.0, 2.0 )\n    ~2.718\n    > y = base.dist.lognormal.mode( NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.mode( 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.mode( 0.0, 0.0 )\n    NaN\n",
	"base.dist.lognormal.pdf": "\nbase.dist.lognormal.pdf( x, μ, σ )\n    Evaluates the probability density function (PDF) for a lognormal\n    distribution with location parameter `μ` and scale parameter `σ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.pdf( 2.0, 0.0, 1.0 )\n    ~0.157\n    > y = base.dist.lognormal.pdf( 1.0, 0.0, 1.0 )\n    ~0.399\n    > y = base.dist.lognormal.pdf( 1.0, 3.0, 1.0 )\n    ~0.004\n    > y = base.dist.lognormal.pdf( -1.0, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.lognormal.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.lognormal.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.pdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Non-positive scale parameter `σ`:\n    > y = base.dist.lognormal.pdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dist.lognormal.pdf( 2.0, 0.0, 0.0 )\n    NaN\n\n\nbase.dist.lognormal.pdf.factory( μ, σ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a lognormal distribution with location parameter `μ` and scale parameter\n    `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = factory( 4.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.014\n    > y = myPDF( 2.0 )\n    ~0.025\n\n",
	"base.dist.lognormal.quantile": "\nbase.dist.lognormal.quantile( p, μ, σ )\n    Evaluates the quantile function for a lognormal distribution with location\n    parameter `μ` and scale parameter `σ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.quantile( 0.8, 0.0, 1.0 )\n    ~2.32\n    > y = base.dist.lognormal.quantile( 0.5, 4.0, 2.0 )\n    ~54.598\n    > y = base.dist.lognormal.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.lognormal.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.lognormal.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.lognormal.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Non-positive scale parameter `σ`:\n    > y = base.dist.lognormal.quantile( 0.5, 0.0, -1.0 )\n    NaN\n    > y = base.dist.lognormal.quantile( 0.5, 0.0, 0.0 )\n    NaN\n\n\nbase.dist.lognormal.quantile.factory( μ, σ )\n    Returns a function for evaluating the quantile function of a lognormal\n    distribution with location parameter `μ` and scale parameter `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.lognormal.quantile.factory( 4.0, 2.0 );\n    > var y = myQuantile( 0.2 )\n    ~10.143\n    > y = myQuantile( 0.8 )\n    ~293.901\n\n",
	"base.dist.lognormal.skewness": "\nbase.dist.lognormal.skewness( μ, σ )\n    Returns the skewness of a lognormal distribution with location `μ` and scale\n    `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.skewness( 0.0, 1.0 )\n    ~6.185\n    > y = base.dist.lognormal.skewness( 5.0, 2.0 )\n    ~414.359\n    > y = base.dist.lognormal.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.skewness( 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.skewness( 0.0, 0.0 )\n    NaN\n",
	"base.dist.lognormal.stdev": "\nbase.dist.lognormal.stdev( μ, σ )\n    Returns the standard deviation of a lognormal distribution with location `μ`\n    and scale `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.stdev( 0.0, 1.0 )\n    ~2.161\n    > y = base.dist.lognormal.stdev( 4.0, 2.0 )\n    ~2953.533\n    > y = base.dist.lognormal.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.stdev( 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.stdev( 0.0, 0.0 )\n    NaN\n",
	"base.dist.lognormal.variance": "\nbase.dist.lognormal.variance( μ, σ )\n    Returns the variance of a lognormal distribution with location `μ` and scale\n    `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dist.lognormal.variance( 0.0, 1.0 )\n    ~4.671\n    > y = base.dist.lognormal.variance( 4.0, 2.0 )\n    ~8723355.729\n    > y = base.dist.lognormal.variance( NaN, 1.0 )\n    NaN\n    > y = base.dist.lognormal.variance( 0.0, NaN )\n    NaN\n    > y = base.dist.lognormal.variance( 0.0, 0.0 )\n    NaN\n",
	"base.dist.negativeBinomial.cdf": "\nbase.dist.negativeBinomial.cdf( x, r, p )\n    Evaluates the cumulative distribution function (CDF) for a negative binomial\n    distribution with number of successes until experiment is stopped `r` and\n    success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.negativeBinomial.cdf( 5.0, 20.0, 0.8 )\n    ~0.617\n    > y = base.dist.negativeBinomial.cdf( 21.0, 20.0, 0.5 )\n    ~0.622\n    > y = base.dist.negativeBinomial.cdf( 5.0, 10.0, 0.4 )\n    ~0.034\n    > y = base.dist.negativeBinomial.cdf( 0.0, 10.0, 0.9 )\n    ~0.349\n    > y = base.dist.negativeBinomial.cdf( 21.0, 15.5, 0.5 )\n    ~0.859\n    > y = base.dist.negativeBinomial.cdf( 5.0, 7.4, 0.4 )\n    ~0.131\n\n    > y = base.dist.negativeBinomial.cdf( 2.0, 0.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.cdf( 2.0, -2.0, 0.5 )\n    NaN\n\n    > y = base.dist.negativeBinomial.cdf( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.cdf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.cdf( 0.0, 20.0, NaN )\n    NaN\n\n    > y = base.dist.negativeBinomial.cdf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dist.negativeBinomial.cdf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dist.negativeBinomial.cdf.factory( r, p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a negative binomial distribution with number of successes until\n    experiment is stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.negativeBinomial.cdf.factory( 10, 0.5 );\n    > var y = myCDF( 3.0 )\n    ~0.046\n    > y = myCDF( 11.0 )\n    ~0.668\n\n",
	"base.dist.negativeBinomial.kurtosis": "\nbase.dist.negativeBinomial.kurtosis( r, p )\n    Returns the excess kurtosis of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    Returns\n    -------\n    out: number\n        Kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.negativeBinomial.kurtosis( 100, 0.2 )\n    ~0.061\n    > v = base.dist.negativeBinomial.kurtosis( 20, 0.5 )\n    ~0.325\n\n",
	"base.dist.negativeBinomial.mean": "\nbase.dist.negativeBinomial.mean( r, p )\n    Returns the expected value of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.negativeBinomial.mean( 100, 0.2 )\n    400\n    > v = base.dist.negativeBinomial.mean( 20, 0.5 )\n    20\n\n",
	"base.dist.negativeBinomial.mgf": "\nbase.dist.negativeBinomial.mgf( x, r, p )\n    Evaluates the moment-generating function (MGF) for a negative binomial\n    distribution with number of successes until experiment is stopped `r` and\n    success probability `p` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.negativeBinomial.mgf( 0.05, 20.0, 0.8 )\n    ~267.839\n    > y = base.dist.negativeBinomial.mgf( 0.1, 20.0, 0.1 )\n    ~9.347\n    > y = base.dist.negativeBinomial.mgf( 0.5, 10.0, 0.4 )\n    ~42822.023\n\n    > y = base.dist.negativeBinomial.mgf( 0.1, 0.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.mgf( 0.1, -2.0, 0.5 )\n    NaN\n\n    > y = base.dist.negativeBinomial.mgf( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.mgf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.mgf( 0.0, 20.0, NaN )\n    NaN\n\n    > y = base.dist.negativeBinomial.mgf( 0.2, 20, -1.0 )\n    NaN\n    > y = base.dist.negativeBinomial.mgf( 0.2, 20, 1.5 )\n    NaN\n\n\nbase.dist.negativeBinomial.mgf.factory( r, p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    negative binomial distribution with number of successes until experiment is\n    stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.negativeBinomial.mgf.factory( 4.3, 0.4 );\n    > var y = myMGF( 0.2 )\n    ~4.696\n    > y = myMGF( 0.4 )\n    ~30.83\n\n",
	"base.dist.negativeBinomial.mode": "\nbase.dist.negativeBinomial.mode( r, p )\n    Returns the mode of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.negativeBinomial.mode( 100, 0.2 )\n    396\n    > v = base.dist.negativeBinomial.mode( 20, 0.5 )\n    10\n\n",
	"base.dist.negativeBinomial.NegativeBinomial": "\nbase.dist.negativeBinomial.NegativeBinomial( [r, p] )\n    Returns a negative binomial distribution object.\n\n    Parameters\n    ----------\n    r: number (optional)\n        Number of successes until experiment is stopped. Must be a positive\n        number. Default: `1`.\n\n    p: number (optional)\n        Success probability. Must be a number between `0` and `1`. Default:\n        `0.5`.\n\n    Returns\n    -------\n    nbinomial: Object\n        Distribution instance.\n\n    nbinomial.r: number\n        Number of trials. If set, the value must be a positive number.\n\n    nbinomial.p: number\n        Success probability. If set, the value must be a number between `0` and\n        `1`.\n\n    nbinomial.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    nbinomial.mean: number\n        Read-only property which returns the expected value.\n\n    nbinomial.mode: number\n        Read-only property which returns the mode.\n\n    nbinomial.skewness: number\n        Read-only property which returns the skewness.\n\n    nbinomial.stdev: number\n        Read-only property which returns the standard deviation.\n\n    nbinomial.variance: number\n        Read-only property which returns the variance.\n\n    nbinomial.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    nbinomial.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    nbinomial.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    nbinomial.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var nbinomial = base.dist.negativeBinomial.NegativeBinomial( 8.0, 0.5 );\n    > nbinomial.r\n    8.0\n    > nbinomial.p\n    0.5\n    > nbinomial.kurtosis\n    0.8125\n    > nbinomial.mean\n    8.0\n    > nbinomial.mode\n    7.0\n    > nbinomial.skewness\n    0.75\n    > nbinomial.stdev\n    4.0\n    > nbinomial.variance\n    16.0\n    > nbinomial.cdf( 2.9 )\n    ~0.055\n    > nbinomial.mgf( 0.2 )\n    ~36.675\n    > nbinomial.pmf( 3.0 )\n    ~0.059\n    > nbinomial.quantile( 0.8 )\n    11.0\n\n",
	"base.dist.negativeBinomial.pmf": "\nbase.dist.negativeBinomial.pmf( x, r, p )\n    Evaluates the probability mass function (PMF) for a negative binomial\n    distribution with number of successes until experiment is stopped `r` and\n    success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dist.negativeBinomial.pmf( 5.0, 20.0, 0.8 )\n    ~0.157\n    > y = base.dist.negativeBinomial.pmf( 21.0, 20.0, 0.5 )\n    ~0.06\n    > y = base.dist.negativeBinomial.pmf( 5.0, 10.0, 0.4 )\n    ~0.016\n    > y = base.dist.negativeBinomial.pmf( 0.0, 10.0, 0.9 )\n    ~0.349\n    > y = base.dist.negativeBinomial.pmf( 21.0, 15.5, 0.5 )\n    ~0.037\n    > y = base.dist.negativeBinomial.pmf( 5.0, 7.4, 0.4 )\n    ~0.051\n\n    > y = base.dist.negativeBinomial.pmf( 2.0, 0.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.pmf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.pmf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dist.negativeBinomial.pmf( 2.0, 20, 1.5 )\n    NaN\n\n    > y = base.dist.negativeBinomial.pmf( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.pmf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.pmf( 0.0, 20.0, NaN )\n    NaN\n\n\nbase.dist.negativeBinomial.pmf.factory( r, p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    negative binomial distribution with number of successes until experiment is\n    stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dist.negativeBinomial.pmf.factory( 10, 0.5 );\n    > var y = myPMF( 3.0 )\n    ~0.027\n    > y = myPMF( 5.0 )\n    ~0.061\n\n",
	"base.dist.negativeBinomial.quantile": "\nbase.dist.negativeBinomial.quantile( k, r, p )\n    Evaluates the quantile function for a negative binomial distribution with\n    number of successes until experiment is stopped `r` and success probability\n    `p` at a probability `k`.\n\n    If provided a `k` outside of `[0,1]`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Input probability.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.negativeBinomial.quantile( 0.9, 20.0, 0.2 )\n    106\n    > y = base.dist.negativeBinomial.quantile( 0.9, 20.0, 0.8 )\n    8\n    > y = base.dist.negativeBinomial.quantile( 0.5, 10.0, 0.4 )\n    14\n    > y = base.dist.negativeBinomial.quantile( 0.0, 10.0, 0.9 )\n    0\n\n    > y = base.dist.negativeBinomial.quantile( 1.1, 20.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.quantile( -0.1, 20.0, 0.5 )\n    NaN\n\n    > y = base.dist.negativeBinomial.quantile( 21.0, 15.5, 0.5 )\n    12\n    > y = base.dist.negativeBinomial.quantile( 5.0, 7.4, 0.4 )\n    10\n\n    > y = base.dist.negativeBinomial.quantile( 0.5, 0.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.quantile( 0.5, -2.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.quantile( 0.3, 20.0, -1.0 )\n    NaN\n    > y = base.dist.negativeBinomial.quantile( 0.3, 20.0, 1.5 )\n    NaN\n\n    > y = base.dist.negativeBinomial.quantile( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.quantile( 0.3, NaN, 0.5 )\n    NaN\n    > y = base.dist.negativeBinomial.quantile( 0.3, 20.0, NaN )\n    NaN\n\n\nbase.dist.negativeBinomial.quantile.factory( r, p )\n    Returns a function for evaluating the quantile function of a negative\n    binomial distribution with number of successes until experiment is stopped\n    `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.negativeBinomial.quantile.factory( 10.0, 0.5 );\n    > var y = myQuantile( 0.1 )\n    5\n    > y = myQuantile( 0.9 )\n    16\n\n",
	"base.dist.negativeBinomial.skewness": "\nbase.dist.negativeBinomial.skewness( r, p )\n    Returns the skewness of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.negativeBinomial.skewness( 100, 0.2 )\n    ~0.201\n    > v = base.dist.negativeBinomial.skewness( 20, 0.5 )\n    ~0.474\n\n",
	"base.dist.negativeBinomial.stdev": "\nbase.dist.negativeBinomial.stdev( r, p )\n    Returns the standard deviation of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.negativeBinomial.stdev( 100, 0.2 )\n    ~44.721\n    > v = base.dist.negativeBinomial.stdev( 20, 0.5 )\n    ~6.325\n\n",
	"base.dist.negativeBinomial.variance": "\nbase.dist.negativeBinomial.variance( r, p )\n    Returns the variance of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.negativeBinomial.variance( 100, 0.2 )\n    2000.0\n    > v = base.dist.negativeBinomial.variance( 20, 0.5 )\n    40.0\n\n",
	"base.dist.normal.cdf": "\nbase.dist.normal.cdf( x, μ, σ )\n    Evaluates the cumulative distribution function (CDF) for a normal\n    distribution with mean `μ` and standard deviation `σ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.normal.cdf( 2.0, 0.0, 1.0 )\n    ~0.977\n    > y = base.dist.normal.cdf( -1.0, -1.0, 2.0 )\n    0.5\n    > y = base.dist.normal.cdf( -1.0, 4.0, 2.0 )\n    ~0.006\n    > y = base.dist.normal.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.normal.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.cdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative standard deviation:\n    > y = base.dist.normal.cdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `σ = 0.0`:\n    > y = base.dist.normal.cdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dist.normal.cdf( 8.0, 8.0, 0.0 )\n    1.0\n    > y = base.dist.normal.cdf( 10.0, 8.0, 0.0 )\n    1.0\n\n\nbase.dist.normal.cdf.factory( μ, σ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.normal.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 10.0 )\n    0.5\n\n",
	"base.dist.normal.entropy": "\nbase.dist.normal.entropy( μ, σ )\n    Returns the differential entropy of a normal distribution with mean `μ` and\n    standard deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dist.normal.entropy( 0.0, 1.0 )\n    ~1.419\n    > y = base.dist.normal.entropy( 4.0, 3.0 )\n    ~2.518\n    > y = base.dist.normal.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.entropy( 0.0, NaN )\n    NaN\n    > y = base.dist.normal.entropy( 0.0, 0.0 )\n    NaN\n",
	"base.dist.normal.kurtosis": "\nbase.dist.normal.kurtosis( μ, σ )\n    Returns the excess kurtosis of a normal distribution with mean `μ` and\n    standard deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dist.normal.kurtosis( 0.0, 1.0 )\n    0.0\n    > y = base.dist.normal.kurtosis( 4.0, 3.0 )\n    0.0\n    > y = base.dist.normal.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dist.normal.kurtosis( 0.0, 0.0 )\n    NaN\n",
	"base.dist.normal.mean": "\nbase.dist.normal.mean( μ, σ )\n    Returns the expected value of a normal distribution with mean `μ` and\n    standard deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dist.normal.mean( 0.0, 1.0 )\n    0.0\n    > y = base.dist.normal.mean( 4.0, 2.0 )\n    4.0\n    > y = base.dist.normal.mean( NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.mean( 0.0, NaN )\n    NaN\n    > y = base.dist.normal.mean( 0.0, 0.0 )\n    NaN\n",
	"base.dist.normal.median": "\nbase.dist.normal.median( μ, σ )\n    Returns the median of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dist.normal.median( 0.0, 1.0 )\n    0.0\n    > y = base.dist.normal.median( 4.0, 2.0 )\n    4.0\n    > y = base.dist.normal.median( NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.median( 0.0, NaN )\n    NaN\n    > y = base.dist.normal.median( 0.0, 0.0 )\n    NaN\n",
	"base.dist.normal.mgf": "\nbase.dist.normal.mgf( x, μ, σ )\n    Evaluates the moment-generating function (MGF) for a normal distribution\n    with mean `μ` and standard deviation `σ` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.normal.mgf( 2.0, 0.0, 1.0 )\n    ~7.389\n    > y = base.dist.normal.mgf( 0.0, 0.0, 1.0 )\n    1.0\n    > y = base.dist.normal.mgf( -1.0, 4.0, 2.0 )\n    ~0.1353\n    > y = base.dist.normal.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.normal.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.mgf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.normal.mgf( 2.0, 0.0, 0.0 )\n    NaN\n\n\nbase.dist.normal.mgf.factory( μ, σ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.normal.mgf.factory( 4.0, 2.0 );\n    > var y = myMGF( 1.0 )\n    ~403.429\n    > y = myMGF( 0.5 )\n    ~12.182\n\n",
	"base.dist.normal.mode": "\nbase.dist.normal.mode( μ, σ )\n    Returns the mode of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dist.normal.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dist.normal.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dist.normal.mode( NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.mode( 0.0, NaN )\n    NaN\n    > y = base.dist.normal.mode( 0.0, 0.0 )\n    NaN\n",
	"base.dist.normal.Normal": "\nbase.dist.normal.Normal( [μ, σ] )\n    Returns a normal distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean parameter. Default: `0.0`.\n\n    σ: number (optional)\n        Standard deviation. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    normal: Object\n        Distribution instance.\n\n    normal.mu: number\n        Mean parameter.\n\n    normal.sigma: number\n        Standard deviation. If set, the value must be greater than `0`.\n\n    normal.entropy: number\n        Read-only property which returns the differential entropy.\n\n    normal.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    normal.mean: number\n        Read-only property which returns the expected value.\n\n    normal.median: number\n        Read-only property which returns the median.\n\n    normal.mode: number\n        Read-only property which returns the mode.\n\n    normal.skewness: number\n        Read-only property which returns the skewness.\n\n    normal.stdev: number\n        Read-only property which returns the standard deviation.\n\n    normal.variance: number\n        Read-only property which returns the variance.\n\n    normal.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    normal.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    normal.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    normal.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var normal = base.dist.normal.Normal( -2.0, 3.0 );\n    > normal.mu\n    -2.0\n    > normal.sigma\n    3.0\n    > normal.entropy\n    ~2.518\n    > normal.kurtosis\n    0.0\n    > normal.mean\n    -2.0\n    > normal.median\n    -2.0\n    > normal.mode\n    -2.0\n    > normal.skewness\n    0.0\n    > normal.stdev\n    3.0\n    > normal.variance\n    9.0\n    > normal.cdf( 0.8 )\n    ~0.825\n    > normal.mgf( 0.2 )\n    ~0.803\n    > normal.pdf( 2.0 )\n    ~0.055\n    > normal.quantile( 0.9 )\n    ~1.845\n\n",
	"base.dist.normal.pdf": "\nbase.dist.normal.pdf( x, μ, σ )\n    Evaluates the probability density function (PDF) for a normal distribution\n    with mean `μ` and standard deviation `σ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.normal.pdf( 2.0, 0.0, 1.0 )\n    ~0.054\n    > y = base.dist.normal.pdf( -1.0, 4.0, 2.0 )\n    ~0.009\n    > y = base.dist.normal.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.normal.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.pdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative standard deviation:\n    > y = base.dist.normal.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `σ = 0.0`:\n    > y = base.dist.normal.pdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dist.normal.pdf( 8.0, 8.0, 0.0 )\n    infinity\n\n\nbase.dist.normal.pdf.factory( μ, σ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.normal.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.199\n\n",
	"base.dist.normal.quantile": "\nbase.dist.normal.quantile( p, μ, σ )\n    Evaluates the quantile function for a normal distribution with mean `μ` and\n    standard deviation `σ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.normal.quantile( 0.8, 0.0, 1.0 )\n    ~0.842\n    > y = base.dist.normal.quantile( 0.5, 4.0, 2.0 )\n    4\n\n    > y = base.dist.normal.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.normal.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.normal.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.normal.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative standard deviation:\n    > y = base.dist.normal.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `σ = 0.0`:\n    > y = base.dist.normal.quantile( 0.3, 8.0, 0.0 );\n    8.0\n    > y = base.dist.normal.quantile( 0.9, 8.0, 0.0 );\n    8.0\n\n\nbase.dist.normal.quantile.factory( μ, σ )\n    Returns a function for evaluating the quantile function\n    of a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.normal.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n",
	"base.dist.normal.skewness": "\nbase.dist.normal.skewness( μ, σ )\n    Returns the skewness of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dist.normal.skewness( 0.0, 1.0 )\n    0.0\n    > y = base.dist.normal.skewness( 4.0, 3.0 )\n    0.0\n    > y = base.dist.normal.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.skewness( 0.0, NaN )\n    NaN\n    > y = base.dist.normal.skewness( 0.0, 0.0 )\n    NaN\n",
	"base.dist.normal.stdev": "\nbase.dist.normal.stdev( μ, σ )\n    Returns the standard deviation of a normal distribution with mean `μ` and\n    standard deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dist.normal.stdev( 0.0, 1.0 )\n    1.0\n    > y = base.dist.normal.stdev( 4.0, 3.0 )\n    3.0\n    > y = base.dist.normal.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.stdev( 0.0, NaN )\n    NaN\n    > y = base.dist.normal.stdev( 0.0, 0.0 )\n    NaN\n",
	"base.dist.normal.variance": "\nbase.dist.normal.variance( μ, σ )\n    Returns the variance of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dist.normal.variance( 0.0, 1.0 )\n    1.0\n    > y = base.dist.normal.variance( 4.0, 3.0 )\n    9.0\n    > y = base.dist.normal.variance( NaN, 1.0 )\n    NaN\n    > y = base.dist.normal.variance( 0.0, NaN )\n    NaN\n    > y = base.dist.normal.variance( 0.0, 0.0 )\n    NaN\n",
	"base.dist.pareto1.cdf": "\nbase.dist.pareto1.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for a Pareto (Type I)\n    distribution with shape parameter `α` and scale parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.pareto1.cdf( 2.0, 1.0, 1.0 )\n    0.5\n    > y = base.dist.pareto1.cdf( 5.0, 2.0, 4.0 )\n    ~0.36\n    > y = base.dist.pareto1.cdf( 4.0, 2.0, 2.0 )\n    0.75\n    > y = base.dist.pareto1.cdf( 1.9, 2.0, 2.0 )\n    0.0\n    > y = base.dist.pareto1.cdf( PINF, 4.0, 2.0 )\n    1.0\n\n    > y = base.dist.pareto1.cdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dist.pareto1.cdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.pareto1.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.pareto1.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.pareto1.cdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dist.pareto1.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Pareto (Type I) distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.pareto1.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 3.0 )\n    ~0.983\n    > y = myCDF( 2.5 )\n    ~0.893\n\n",
	"base.dist.pareto1.entropy": "\nbase.dist.pareto1.entropy( α, β )\n    Returns the differential entropy of a Pareto (Type I) distribution\n    (in nats).\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Differential entropy.\n\n    Examples\n    --------\n    > var v = base.dist.pareto1.entropy( 0.8, 1.0 )\n    ~2.473\n    > v = base.dist.pareto1.entropy( 4.0, 12.0 )\n    ~2.349\n    > v = base.dist.pareto1.entropy( 8.0, 2.0 )\n    ~-0.261\n\n",
	"base.dist.pareto1.kurtosis": "\nbase.dist.pareto1.kurtosis( α, β )\n    Returns the excess kurtosis of a Pareto (Type I) distribution.\n\n    If `α <= 4` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.pareto1.kurtosis( 5.0, 1.0 )\n    ~70.8\n    > v = base.dist.pareto1.kurtosis( 4.5, 12.0 )\n    ~146.444\n    > v = base.dist.pareto1.kurtosis( 8.0, 2.0 )\n    ~19.725\n\n",
	"base.dist.pareto1.mean": "\nbase.dist.pareto1.mean( α, β )\n    Returns the expected value of a Pareto (Type I) distribution.\n\n    If `0 < α <= 1`, the function returns `Infinity`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.pareto1.mean( 0.8, 1.0 )\n    Infinity\n    > v = base.dist.pareto1.mean( 4.0, 12.0 )\n    16.0\n    > v = base.dist.pareto1.mean( 8.0, 2.0 )\n    ~2.286\n\n",
	"base.dist.pareto1.median": "\nbase.dist.pareto1.median( α, β )\n    Returns the median of a Pareto (Type I) distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.pareto1.median( 0.8, 1.0 )\n    ~2.378\n    > v = base.dist.pareto1.median( 4.0, 12.0 )\n    ~14.27\n    > v = base.dist.pareto1.median( 8.0, 2.0 )\n    ~2.181\n\n",
	"base.dist.pareto1.mode": "\nbase.dist.pareto1.mode( α, β )\n    Returns the mode of a Pareto (Type I) distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.pareto1.mode( 0.8, 1.0 )\n    1.0\n    > v = base.dist.pareto1.mode( 4.0, 12.0 )\n    12.0\n    > v = base.dist.pareto1.mode( 8.0, 2.0 )\n    2.0\n\n",
	"base.dist.pareto1.Pareto1": "\nbase.dist.pareto1.Pareto1( [α, β] )\n    Returns a Pareto (Type I) distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    pareto1: Object\n        Distribution instance.\n\n    pareto1.alpha: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    pareto1.beta: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    pareto1.entropy: number\n        Read-only property which returns the differential entropy.\n\n    pareto1.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    pareto1.mean: number\n        Read-only property which returns the expected value.\n\n    pareto1.median: number\n        Read-only property which returns the median.\n\n    pareto1.mode: number\n        Read-only property which returns the mode.\n\n    pareto1.skewness: number\n        Read-only property which returns the skewness.\n\n    pareto1.variance: number\n        Read-only property which returns the variance.\n\n    pareto1.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    pareto1.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    pareto1.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var pareto1 = base.dist.pareto1.Pareto1( 6.0, 5.0 );\n    > pareto1.alpha\n    6.0\n    > pareto1.beta\n    5.0\n    > pareto1.entropy\n    ~0.984\n    > pareto1.kurtosis\n    ~35.667\n    > pareto1.mean\n    6.0\n    > pareto1.median\n    ~5.612\n    > pareto1.mode\n    5.0\n    > pareto1.skewness\n    ~3.81\n    > pareto1.variance\n    1.5\n    > pareto1.cdf( 7.0 )\n    ~0.867\n    > pareto1.pdf( 5.0 )\n    1.2\n    > pareto1.quantile( 0.8 )\n    ~5.612\n\n",
	"base.dist.pareto1.pdf": "\nbase.dist.pareto1.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for a Pareto (Type I)\n    distribution with shape parameter `α` and scale parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.pareto1.pdf( 4.0, 1.0, 1.0 )\n    ~0.044\n    > y = base.dist.pareto1.pdf( 20.0, 1.0, 10.0 )\n    0.025\n    > y = base.dist.pareto1.pdf( 7.0, 2.0, 6.0 )\n    ~0.21\n    > y = base.dist.pareto1.pdf( 7.0, 6.0, 3.0 )\n    ~0.005\n    > y = base.dist.pareto1.pdf( 1.0, 4.0, 2.0 )\n    0.0\n    > y = base.dist.pareto1.pdf( 1.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dist.pareto1.pdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dist.pareto1.pdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dist.pareto1.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.pareto1.pdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.pareto1.pdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dist.pareto1.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Pareto (Type I) distribution with shape parameter `α` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.pareto1.pdf.factory( 0.5, 0.5 );\n    > var y = myPDF( 0.8 )\n    ~0.494\n    > y = myPDF( 2.0 )\n    ~0.125\n\n",
	"base.dist.pareto1.quantile": "\nbase.dist.pareto1.quantile( p, α, β )\n    Evaluates the quantile function for a Pareto (Type I) distribution with\n    shape parameter `α` and scale parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.pareto1.quantile( 0.8, 2.0, 1.0 )\n    ~2.236\n    > y = base.dist.pareto1.quantile( 0.8, 1.0, 10.0 )\n    ~50.0\n    > y = base.dist.pareto1.quantile( 0.1, 1.0, 10.0 )\n    ~10.541\n\n    > y = base.dist.pareto1.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dist.pareto1.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dist.pareto1.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.pareto1.quantile( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dist.pareto1.quantile( 0.5, 1.0, NaN )\n    NaN\n\n    > y = base.dist.pareto1.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    > y = base.dist.pareto1.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.pareto1.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a Pareto (Type I)\n    distribution with shape parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.pareto1.quantile.factory( 2.5, 0.5 );\n    > var y = myQuantile( 0.5 )\n    ~0.66\n    > y = myQuantile( 0.8 )\n    ~0.952\n\n",
	"base.dist.pareto1.skewness": "\nbase.dist.pareto1.skewness( α, β )\n    Returns the skewness of a Pareto (Type I) distribution.\n\n    If `α <= 3` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.pareto1.skewness( 3.5, 1.0 )\n    ~11.784\n    > v = base.dist.pareto1.skewness( 4.0, 12.0 )\n    ~7.071\n    > v = base.dist.pareto1.skewness( 8.0, 2.0 )\n    ~3.118\n\n",
	"base.dist.pareto1.variance": "\nbase.dist.pareto1.variance( α, β )\n    Returns the variance of a Pareto (Type I) distribution.\n\n    If `0 < α <= 2` and `β > 0`, the function returns `+Infinity`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.pareto1.variance( 0.8, 1.0 )\n    infinity\n    > v = base.dist.pareto1.variance( 4.0, 12.0 )\n    32.0\n    > v = base.dist.pareto1.variance( 8.0, 2.0 )\n    ~0.109\n\n",
	"base.dist.poisson.cdf": "\nbase.dist.poisson.cdf( x, λ )\n    Evaluates the cumulative distribution function (CDF) for a Poisson\n    distribution with mean parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.poisson.cdf( 2.0, 0.5 )\n    ~0.986\n    > y = base.dist.poisson.cdf( 2.0, 10.0 )\n    ~0.003\n    > y = base.dist.poisson.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dist.poisson.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dist.poisson.cdf( 0.0, NaN )\n    NaN\n\n    // Negative mean parameter:\n    > y = base.dist.poisson.cdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution at `λ = 0`:\n    > y = base.dist.poisson.cdf( -2.0, 0.0 );\n    0.0\n    > y = base.dist.poisson.cdf( 0.0, 0.0 );\n    1.0\n    > y = base.dist.poisson.cdf( 10.0, 0.0 );\n    1.0\n\n\nbase.dist.poisson.cdf.factory( λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.poisson.cdf.factory( 5.0 );\n    > var y = mycdf( 3.0 )\n    ~0.265\n    > y = mycdf( 8.0 )\n    ~0.932\n\n",
	"base.dist.poisson.entropy": "\nbase.dist.poisson.entropy( λ )\n    Returns the entropy of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.poisson.entropy( 11.0 )\n    ~2.61\n    > v = base.dist.poisson.entropy( 4.5 )\n    ~2.149\n\n",
	"base.dist.poisson.kurtosis": "\nbase.dist.poisson.kurtosis( λ )\n    Returns the excess kurtosis of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.poisson.kurtosis( 11.0 )\n    11.0\n    > v = base.dist.poisson.kurtosis( 4.5 )\n    4.5\n\n",
	"base.dist.poisson.mean": "\nbase.dist.poisson.mean( λ )\n    Returns the expected value of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.poisson.mean( 11.0 )\n    11.0\n    > v = base.dist.poisson.mean( 4.5 )\n    4.5\n\n",
	"base.dist.poisson.median": "\nbase.dist.poisson.median( λ )\n    Returns the median of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: integer\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.poisson.median( 11.0 )\n    11\n    > v = base.dist.poisson.median( 4.5 )\n    4\n\n",
	"base.dist.poisson.mode": "\nbase.dist.poisson.mode( λ )\n    Returns the mode of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: integer\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.poisson.mode( 11.0 )\n    11\n    > v = base.dist.poisson.mode( 4.5 )\n    4\n\n",
	"base.dist.poisson.pmf": "\nbase.dist.poisson.pmf( x, λ )\n    Evaluates the probability mass function (PMF) for a Poisson\n    distribution with mean parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dist.poisson.pmf( 4.0, 3.0 )\n    ~0.168\n    > y = base.dist.poisson.pmf( 1.0, 3.0 )\n    ~0.149\n    > y = base.dist.poisson.pmf( -1.0, 2.0 )\n    0.0\n    > y = base.dist.poisson.pmf( 0.0, NaN )\n    NaN\n    > y = base.dist.poisson.pmf( NaN, 0.5 )\n    NaN\n\n    // Negative mean parameter:\n    > y = base.dist.poisson.pmf( 2.0, -0.5 )\n    NaN\n\n    // Degenerate distribution at `λ = 0`:\n    > y = base.dist.poisson.pmf( 2.0, 0.0 )\n    0.0\n    > y = base.dist.poisson.pmf( 0.0, 0.0 )\n    1.0\n\n\nbase.dist.poisson.pmf.factory( λ )\n    Returns a function for evaluating the probability mass function (PMF)\n    of a Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dist.poisson.pmf.factory( 1.0 );\n    > var y = mypmf( 3.0 )\n    ~0.061\n    > y = mypmf( 1.0 )\n    ~0.368\n\n",
	"base.dist.poisson.Poisson": "\nbase.dist.poisson.Poisson( [λ] )\n    Returns a Poisson distribution object.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Mean parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    poisson: Object\n        Distribution instance.\n\n    poisson.lambda: number\n        Mean parameter. If set, the value must be greater than `0`.\n\n    poisson.entropy: number\n        Read-only property which returns the differential entropy.\n\n    poisson.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    poisson.mean: number\n        Read-only property which returns the expected value.\n\n    poisson.median: number\n        Read-only property which returns the median.\n\n    poisson.mode: number\n        Read-only property which returns the mode.\n\n    poisson.skewness: number\n        Read-only property which returns the skewness.\n\n    poisson.stdev: number\n        Read-only property which returns the standard deviation.\n\n    poisson.variance: number\n        Read-only property which returns the variance.\n\n    poisson.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    poisson.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    poisson.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    poisson.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var poisson = base.dist.poisson.Poisson( 6.0 );\n    > poisson.lambda\n    6.0\n    > poisson.entropy\n    ~2.3\n    > poisson.kurtosis\n    ~0.167\n    > poisson.mean\n    6.0\n    > poisson.median\n    6.0\n    > poisson.mode\n    6.0\n    > poisson.skewness\n    ~0.408\n    > poisson.stdev\n    ~2.449\n    > poisson.variance\n    6.0\n    > poisson.cdf( 4.0 )\n    ~0.285\n    > poisson.mgf( 0.5 )\n    ~49.025\n    > poisson.pmf( 2.0 )\n    ~0.045\n    > poisson.quantile( 0.5 )\n    6.0\n\n",
	"base.dist.poisson.quantile": "\nbase.dist.poisson.quantile( p, λ )\n    Evaluates the quantile function for a Poisson distribution with mean\n    parameter `λ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.poisson.quantile( 0.5, 2.0 )\n    2\n    > y = base.dist.poisson.quantile( 0.9, 4.0 )\n    7\n    > y = base.dist.poisson.quantile( 0.1, 200.0 )\n    182\n\n    > y = base.dist.poisson.quantile( 1.1, 0.0 )\n    NaN\n    > y = base.dist.poisson.quantile( -0.2, 0.0 )\n    NaN\n\n    > y = base.dist.poisson.quantile( NaN, 0.5 )\n    NaN\n    > y = base.dist.poisson.quantile( 0.0, NaN )\n    NaN\n\n    // Negative mean parameter:\n    > y = base.dist.poisson.quantile( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution at `λ = 0`:\n    > y = base.dist.poisson.quantile( 0.1, 0.0 );\n    0.0\n    > y = base.dist.poisson.quantile( 0.9, 0.0 );\n    0.0\n\n\nbase.dist.poisson.quantile.factory( λ )\n    Returns a function for evaluating the quantile function of a Poisson\n    distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.poisson.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    ~1.277\n    > y = myQuantile( 1.0 )\n    infinity\n\n",
	"base.dist.poisson.skewness": "\nbase.dist.poisson.skewness( λ )\n    Returns the skewness of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.poisson.skewness( 11.0 )\n    ~0.302\n    > v = base.dist.poisson.skewness( 4.5 )\n    ~0.471\n\n",
	"base.dist.poisson.stdev": "\nbase.dist.poisson.stdev( λ )\n    Returns the standard deviation of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.poisson.stdev( 11.0 )\n    ~3.317\n    > v = base.dist.poisson.stdev( 4.5 )\n    ~2.121\n\n",
	"base.dist.poisson.variance": "\nbase.dist.poisson.variance( λ )\n    Returns the variance of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.poisson.variance( 11.0 )\n    11.0\n    > v = base.dist.poisson.variance( 4.5 )\n    4.5\n\n",
	"base.dist.rayleigh.cdf": "\nbase.dist.rayleigh.cdf( x, sigma )\n    Evaluates the cumulative distribution function (CDF) for a Rayleigh\n    distribution with scale parameter `sigma` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.rayleigh.cdf( 2.0, 3.0 )\n    ~0.199\n    > y = base.dist.rayleigh.cdf( 1.0, 2.0 )\n    ~0.118\n    > y = base.dist.rayleigh.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dist.rayleigh.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dist.rayleigh.cdf( 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.rayleigh.cdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `sigma = 0.0`:\n    > y = base.dist.rayleigh.cdf( -2.0, 0.0 );\n    0.0\n    > y = base.dist.rayleigh.cdf( 0.0, 0.0 );\n    1.0\n    > y = base.dist.rayleigh.cdf( 2.0, 0.0 );\n    1.0\n\n\nbase.dist.rayleigh.cdf.factory( sigma )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dist.rayleigh.cdf.factory( 0.5 );\n    > var y = myCDF( 1.0 )\n    ~0.865\n    > y = myCDF( 0.5 )\n    ~0.393\n\n",
	"base.dist.rayleigh.entropy": "\nbase.dist.rayleigh.entropy( σ )\n    Returns the differential entropy of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.rayleigh.entropy( 11.0 )\n    ~3.34\n    > v = base.dist.rayleigh.entropy( 4.5 )\n    ~2.446\n\n",
	"base.dist.rayleigh.kurtosis": "\nbase.dist.rayleigh.kurtosis( σ )\n    Returns the excess kurtosis of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.rayleigh.kurtosis( 11.0 )\n    ~0.245\n    > v = base.dist.rayleigh.kurtosis( 4.5 )\n    ~0.245\n\n",
	"base.dist.rayleigh.logcdf": "\nbase.dist.rayleigh.logcdf( x, sigma )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Rayleigh distribution with scale parameter `sigma` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dist.rayleigh.logcdf( 2.0, 3.0 )\n    ~-1.614\n    > y = base.dist.rayleigh.logcdf( 1.0, 2.0 )\n    ~-2.137\n    > y = base.dist.rayleigh.logcdf( -1.0, 4.0 )\n    -infinity\n    > y = base.dist.rayleigh.logcdf( NaN, 1.0 )\n    NaN\n    > y = base.dist.rayleigh.logcdf( 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.rayleigh.logcdf( 2.0, -1.0 )\n    NaN\n\n\nbase.dist.rayleigh.logcdf.factory( sigma )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Rayleigh distribution with scale parameter\n    `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dist.rayleigh.logcdf.factory( 0.5 );\n    > var y = mylogcdf( 1.0 )\n    ~-0.145\n    > y = mylogcdf( 0.5 )\n    ~-0.934\n\n",
	"base.dist.rayleigh.logpdf": "\nbase.dist.rayleigh.logpdf( x, sigma )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Rayleigh distribution with scale parameter `sigma` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.rayleigh.logpdf( 0.3, 1.0 )\n    ~-1.248\n    > y = base.dist.rayleigh.logpdf( 2.0, 0.8 )\n    ~-1.988\n    > y = base.dist.rayleigh.logpdf( -1.0, 0.5 )\n    -infinity\n    > y = base.dist.rayleigh.logpdf( 0.0, NaN )\n    NaN\n    > y = base.dist.rayleigh.logpdf( NaN, 2.0 )\n    NaN\n    // Negative scale parameter:\n    > y = base.dist.rayleigh.logpdf( 2.0, -1.0 )\n    NaN\n\n\nbase.dist.rayleigh.logpdf.factory( sigma )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dist.rayleigh.logpdf.factory( 4.0 );\n    > var y = mylogpdf( 6.0 )\n    ~-2.104\n    > y = mylogpdf( 4.0 )\n    ~-1.884\n\n",
	"base.dist.rayleigh.mean": "\nbase.dist.rayleigh.mean( σ )\n    Returns the expected value of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.rayleigh.mean( 11.0 )\n    ~13.786\n    > v = base.dist.rayleigh.mean( 4.5 )\n    ~5.64\n\n",
	"base.dist.rayleigh.median": "\nbase.dist.rayleigh.median( σ )\n    Returns the median of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.rayleigh.median( 11.0 )\n    ~12.952\n    > v = base.dist.rayleigh.median( 4.5 )\n    ~5.298\n\n",
	"base.dist.rayleigh.mgf": "\nbase.dist.rayleigh.mgf( t, sigma )\n    Evaluates the moment-generating function (MGF) for a Rayleigh distribution\n    with scale parameter `sigma` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.rayleigh.mgf( 1.0, 3.0 )\n    ~678.508\n    > y = base.dist.rayleigh.mgf( 1.0, 2.0 )\n    ~38.65\n    > y = base.dist.rayleigh.mgf( -1.0, 4.0 )\n    ~-0.947\n    > y = base.dist.rayleigh.mgf( NaN, 1.0 )\n    NaN\n    > y = base.dist.rayleigh.mgf( 0.0, NaN )\n    NaN\n    > y = base.dist.rayleigh.mgf( 0.5, -1.0 )\n    NaN\n\n\nbase.dist.rayleigh.mgf.factory( sigma )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.rayleigh.mgf.factory( 0.5 );\n    > var y = myMGF( 1.0 )\n    ~2.715\n    > y = myMGF( 0.5 )\n    ~1.888\n\n",
	"base.dist.rayleigh.mode": "\nbase.dist.rayleigh.mode( σ )\n    Returns the mode of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.rayleigh.mode( 11.0 )\n    11.0\n    > v = base.dist.rayleigh.mode( 4.5 )\n    4.5\n\n",
	"base.dist.rayleigh.pdf": "\nbase.dist.rayleigh.pdf( x, sigma )\n    Evaluates the probability density function (PDF) for a Rayleigh\n    distribution with scale parameter `sigma` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.rayleigh.pdf( 0.3, 1.0 )\n    ~0.287\n    > y = base.dist.rayleigh.pdf( 2.0, 0.8 )\n    ~0.137\n    > y = base.dist.rayleigh.pdf( -1.0, 0.5 )\n    0.0\n    > y = base.dist.rayleigh.pdf( 0.0, NaN )\n    NaN\n    > y = base.dist.rayleigh.pdf( NaN, 2.0 )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.rayleigh.pdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `sigma = 0.0`:\n    > y = base.dist.rayleigh.pdf( -2.0, 0.0 )\n    0.0\n    > y = base.dist.rayleigh.pdf( 0.0, 0.0 )\n    infinity\n    > y = base.dist.rayleigh.pdf( 2.0, 0.0 )\n    0.0\n\n\nbase.dist.rayleigh.pdf.factory( sigma )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.rayleigh.pdf.factory( 4.0 );\n    > var y = myPDF( 6.0 )\n    ~0.122\n    > y = myPDF( 4.0 )\n    ~0.152\n\n",
	"base.dist.rayleigh.Rayleigh": "\nbase.dist.rayleigh.Rayleigh( [σ] )\n    Returns a Rayleigh distribution object.\n\n    Parameters\n    ----------\n    σ: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    rayleigh: Object\n        Distribution instance.\n\n    rayleigh.sigma: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    rayleigh.entropy: number\n        Read-only property which returns the differential entropy.\n\n    rayleigh.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    rayleigh.mean: number\n        Read-only property which returns the expected value.\n\n    rayleigh.median: number\n        Read-only property which returns the median.\n\n    rayleigh.mode: number\n        Read-only property which returns the mode.\n\n    rayleigh.skewness: number\n        Read-only property which returns the skewness.\n\n    rayleigh.stdev: number\n        Read-only property which returns the standard deviation.\n\n    rayleigh.variance: number\n        Read-only property which returns the variance.\n\n    rayleigh.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    rayleigh.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    rayleigh.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    rayleigh.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var rayleigh = base.dist.rayleigh.Rayleigh( 6.0 );\n    > rayleigh.sigma\n    5.0\n    > rayleigh.entropy\n    ~-0.792\n    > rayleigh.kurtosis\n    6.0\n    > rayleigh.mean\n    ~0.167\n    > rayleigh.median\n    ~0.116\n    > rayleigh.mode\n    0.0\n    > rayleigh.skewness\n    2.0\n    > rayleigh.stdev\n    ~0.167\n    > rayleigh.variance\n    ~0.028\n    > rayleigh.cdf( 1.0 )\n    ~0.998\n    > rayleigh.mgf( -0.5 )\n    ~0.923\n    > rayleigh.pdf( 1.5 )\n    ~0.001\n    > rayleigh.quantile( 0.5 )\n    ~0.116\n\n",
	"base.dist.rayleigh.quantile": "\nbase.dist.rayleigh.quantile( p, sigma )\n    Evaluates the quantile function for a Rayleigh distribution with scale\n    parameter `sigma` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative probability for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.rayleigh.quantile( 0.8, 1.0 )\n    ~1.794\n    > y = base.dist.rayleigh.quantile( 0.5, 4.0 )\n    ~4.71\n\n    > y = base.dist.rayleigh.quantile( 1.1, 1.0 )\n    NaN\n    > y = base.dist.rayleigh.quantile( -0.2, 1.0 )\n    NaN\n\n    > y = base.dist.rayleigh.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dist.rayleigh.quantile( 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dist.rayleigh.quantile( 0.5, -1.0 )\n    NaN\n\n\nbase.dist.rayleigh.quantile.factory( sigma )\n    Returns a function for evaluating the quantile function of a Rayleigh\n    distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.rayleigh.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    ~0.404\n    > y = myQuantile( 1.0 )\n    infinity\n\n",
	"base.dist.rayleigh.skewness": "\nbase.dist.rayleigh.skewness( σ )\n    Returns the skewness of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.rayleigh.skewness( 11.0 )\n    ~0.631\n    > v = base.dist.rayleigh.skewness( 4.5 )\n    ~0.631\n\n",
	"base.dist.rayleigh.stdev": "\nbase.dist.rayleigh.stdev( σ )\n    Returns the standard deviation of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.rayleigh.stdev( 9.0 )\n    ~5.896\n    > v = base.dist.rayleigh.stdev( 4.5 )\n    ~2.948\n\n",
	"base.dist.rayleigh.variance": "\nbase.dist.rayleigh.variance( σ )\n    Returns the variance of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.rayleigh.variance( 9.0 )\n    ~34.765\n    > v = base.dist.rayleigh.variance( 4.5 )\n    ~8.691\n\n",
	"base.dist.t.cdf": "\nbase.dist.t.cdf( x, v )\n    Evaluates the cumulative distribution function (CDF) for a Student's t\n    distribution with degrees of freedom `v` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `v`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.t.cdf( 2.0, 0.1 )\n    ~0.611\n    > y = base.dist.t.cdf( 1.0, 2.0 )\n    ~0.789\n    > y = base.dist.t.cdf( -1.0, 4.0 )\n    ~0.187\n    > y = base.dist.t.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dist.t.cdf( 0.0, NaN )\n    NaN\n    > y = base.dist.t.cdf( 2.0, -1.0 )\n    NaN\n\n\nbase.dist.t.cdf.factory( v )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Student's t distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.t.cdf.factory( 0.5 );\n    > var y = mycdf( 3.0 )\n    ~0.816\n    > y = mycdf( 1.0 )\n    ~0.699\n\n",
	"base.dist.t.entropy": "\nbase.dist.t.entropy( v )\n    Returns the differential entropy of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.t.entropy( 11.0 )\n    ~1.512\n    > v = base.dist.t.entropy( 4.5 )\n    ~1.652\n\n",
	"base.dist.t.kurtosis": "\nbase.dist.t.kurtosis( v )\n    Returns the excess kurtosis of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v <= 2`, the function returns `NaN`.\n\n    If provided `2 < v <= 4`, the function returns `infinity`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.t.kurtosis( 11.0 )\n    ~0.857\n    > v = base.dist.t.kurtosis( 4.5 )\n    12.0\n\n",
	"base.dist.t.mean": "\nbase.dist.t.mean( v )\n    Returns the expected value of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v <= 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.t.mean( 11.0 )\n    0.0\n    > v = base.dist.t.mean( 4.5 )\n    0.0\n\n",
	"base.dist.t.median": "\nbase.dist.t.median( v )\n    Returns the median of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.t.median( 11.0 )\n    0.0\n    > v = base.dist.t.median( 4.5 )\n    0.0\n\n",
	"base.dist.t.mode": "\nbase.dist.t.mode( v )\n    Returns the mode of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.t.mode( 11.0 )\n    0.0\n    > v = base.dist.t.mode( 4.5 )\n    0.0\n\n",
	"base.dist.t.pdf": "\nbase.dist.t.pdf( x, v )\n    Evaluates the probability density function (PDF) for a Student's t\n    distribution with degrees of freedom `v` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `v`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.t.pdf( 0.3, 4.0 )\n    ~0.355\n    > y = base.dist.t.pdf( 2.0, 0.7 )\n    ~0.058\n    > y = base.dist.t.pdf( -1.0, 0.5 )\n    ~0.139\n    > y = base.dist.t.pdf( 0.0, NaN )\n    NaN\n    > y = base.dist.t.pdf( NaN, 2.0 )\n    NaN\n    > y = base.dist.t.pdf( 2.0, -1.0 )\n    NaN\n\n\nbase.dist.t.pdf.factory( v )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Student's t distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.t.pdf.factory( 3.0 );\n    > var y = myPDF( 1.0 )\n    ~0.207\n\n",
	"base.dist.t.T": "\nbase.dist.t.T( [v] )\n    Returns a Student's t distribution object.\n\n    Parameters\n    ----------\n    v: number (optional)\n        Degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    t: Object\n        Distribution instance.\n\n    t.v: number\n        Degrees of freedom. If set, the value must be greater than `0`.\n\n    t.entropy: number\n        Read-only property which returns the differential entropy.\n\n    t.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    t.mean: number\n        Read-only property which returns the expected value.\n\n    t.median: number\n        Read-only property which returns the median.\n\n    t.mode: number\n        Read-only property which returns the mode.\n\n    t.skewness: number\n        Read-only property which returns the skewness.\n\n    t.stdev: number\n        Read-only property which returns the standard deviation.\n\n    t.variance: number\n        Read-only property which returns the variance.\n\n    t.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    t.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    t.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var t = base.dist.t.T( 6.0 );\n    > t.v\n    6.0\n    > t.entropy\n    ~1.592\n    > t.kurtosis\n    3.0\n    > t.mean\n    0.0\n    > t.median\n    0.0\n    > t.mode\n    0.0\n    > t.skewness\n    0.0\n    > t.stdev\n    ~1.225\n    > t.variance\n    1.5\n    > t.cdf( 1.0 )\n    ~0.822\n    > t.pdf( 1.5 )\n    ~0.126\n    > t.quantile( 0.8 )\n    ~0.906\n\n",
	"base.dist.t.quantile": "\nbase.dist.t.quantile( p, v )\n    Evaluates the quantile function for a Student's t distribution with degrees\n    of freedom `v` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `v`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.t.quantile( 0.8, 1.0 )\n    ~1.376\n    > y = base.dist.t.quantile( 0.1, 1.0 )\n    ~-3.078\n    > y = base.dist.t.quantile( 0.5, 0.1 )\n    0.0\n\n    > y = base.dist.t.quantile( -0.2, 0.1 )\n    NaN\n\n    > y = base.dist.t.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dist.t.quantile( 0.0, NaN )\n    NaN\n\n    > y = base.dist.t.quantile( 0.5, -1.0 )\n    NaN\n\n\nbase.dist.t.quantile.factory( v )\n    Returns a function for evaluating the quantile function of a Student's t\n    distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.t.quantile.factory( 4.0 );\n    > var y = myQuantile( 0.2 )\n    ~-0.941\n    > y = myQuantile( 0.9 )\n    ~1.533\n\n",
	"base.dist.t.skewness": "\nbase.dist.t.skewness( v )\n    Returns the skewness of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v <= 3`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.t.skewness( 11.0 )\n    0.0\n    > v = base.dist.t.skewness( 4.5 )\n    0.0\n\n",
	"base.dist.t.stdev": "\nbase.dist.t.stdev( v )\n    Returns the standard deviation of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `1 < v <= 2`, the function returns `infinity`.\n\n    If provided `v <= 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.t.stdev( 9.0 )\n    ~1.134\n    > v = base.dist.t.stdev( 4.5 )\n    ~1.342\n\n",
	"base.dist.t.variance": "\nbase.dist.t.variance( v )\n    Returns the variance of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `1 < v <= 2`, the function returns `infinity`.\n\n    If provided `v <= 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.t.variance( 9.0 )\n    ~1.286\n    > v = base.dist.t.variance( 4.5 )\n    ~1.8\n\n",
	"base.dist.triangular.cdf": "\nbase.dist.triangular.cdf( x, a, b, c )\n    Evaluates the cumulative distribution function (CDF) for a triangular\n    distribution with minimum support `a`, maximum support `b`, and mode `c` at\n    a value `x`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.triangular.cdf( 0.5, -1.0, 1.0, 0.0 )\n    0.875\n    > y = base.dist.triangular.cdf( 0.5, -1.0, 1.0, 0.5 )\n    0.75\n    > y = base.dist.triangular.cdf( -10.0, -20.0, 0.0, -2.0 )\n    ~0.278\n    > y = base.dist.triangular.cdf( -2.0, -1.0, 1.0, 0.0 )\n    0.0\n    > y = base.dist.triangular.cdf( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dist.triangular.cdf( 0.0, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dist.triangular.cdf( 0.0, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.triangular.cdf( 2.0, 1.0, 0.0, NaN )\n    NaN\n    > y = base.dist.triangular.cdf( 2.0, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dist.triangular.cdf.factory( a, b, c )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a triangular distribution with minimum support `a`, maximum support `b`,\n    and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.triangular.cdf.factory( 0.0, 10.0, 2.0 );\n    > var y = mycdf( 0.5 )\n    0.0125\n    > y = mycdf( 8.0 )\n    0.95\n\n\n",
	"base.dist.triangular.entropy": "\nbase.dist.triangular.entropy( a, b, c )\n    Returns the differential entropy of a triangular distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.triangular.entropy( 0.0, 1.0, 0.8 )\n    ~-0.193\n    > v = base.dist.triangular.entropy( 4.0, 12.0, 5.0 )\n    ~1.886\n    > v = base.dist.triangular.entropy( 2.0, 8.0, 5.0 )\n    ~1.599\n\n",
	"base.dist.triangular.kurtosis": "\nbase.dist.triangular.kurtosis( a, b, c )\n    Returns the excess kurtosis of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.triangular.kurtosis( 0.0, 1.0, 0.8 )\n    -0.6\n    > v = base.dist.triangular.kurtosis( 4.0, 12.0, 5.0 )\n    -0.6\n    > v = base.dist.triangular.kurtosis( 2.0, 8.0, 5.0 )\n    -0.6\n\n",
	"base.dist.triangular.mean": "\nbase.dist.triangular.mean( a, b, c )\n    Returns the expected value of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.triangular.mean( 0.0, 1.0, 0.8 )\n    ~0.6\n    > v = base.dist.triangular.mean( 4.0, 12.0, 5.0 )\n    7.0\n    > v = base.dist.triangular.mean( 2.0, 8.0, 5.0 )\n    5.0\n\n",
	"base.dist.triangular.median": "\nbase.dist.triangular.median( a, b, c )\n    Returns the median of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.triangular.median( 0.0, 1.0, 0.8 )\n    ~0.632\n    > v = base.dist.triangular.median( 4.0, 12.0, 5.0 )\n    ~6.708\n    > v = base.dist.triangular.median( 2.0, 8.0, 5.0 )\n    5.0\n\n",
	"base.dist.triangular.mgf": "\nbase.dist.triangular.mgf( t, a, b, c )\n    Evaluates the moment-generating function (MGF) for a triangular distribution\n    with minimum support `a`, maximum support `b`, and mode `c` at a value `t`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.triangular.mgf( 0.5, -1.0, 1.0, 0.0 )\n    ~1.021\n    > y = base.dist.triangular.mgf( 0.5, -1.0, 1.0, 0.5 )\n    ~1.111\n    > y = base.dist.triangular.mgf( -0.3, -20.0, 0.0, -2.0 )\n    ~24.334\n    > y = base.dist.triangular.mgf( -2.0, -1.0, 1.0, 0.0 )\n    ~1.381\n    > y = base.dist.triangular.mgf( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dist.triangular.mgf( 0.0, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dist.triangular.mgf( 0.0, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.triangular.mgf( 0.5, 1.0, 0.0, NaN )\n    NaN\n    > y = base.dist.triangular.mgf( 0.5, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dist.triangular.mgf.factory( a, b, c )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    triangular distribution with minimum support `a`, maximum support `b`, and\n    mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    mgf: Function\n        moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dist.triangular.mgf.factory( 0.0, 2.0, 1.0 );\n    > var y = mymgf( -1.0 )\n    ~0.3996\n    > y = mymgf( 2.0 )\n    ~10.205\n\n\n",
	"base.dist.triangular.mode": "\nbase.dist.triangular.mode( a, b, c )\n    Returns the mode of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.triangular.mode( 0.0, 1.0, 0.8 )\n    0.8\n    > v = base.dist.triangular.mode( 4.0, 12.0, 5.0 )\n    5.0\n    > v = base.dist.triangular.mode( 2.0, 8.0, 5.0 )\n    5.0\n\n",
	"base.dist.triangular.pdf": "\nbase.dist.triangular.pdf( x, a, b, c )\n    Evaluates the probability density function (PDF) for a triangular\n    distribution with minimum support `a`, maximum support `b`, and mode `c` at\n    a value `x`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.triangular.pdf( 0.5, -1.0, 1.0, 0.0 )\n    0.5\n    > y = base.dist.triangular.pdf( 0.5, -1.0, 1.0, 0.5 )\n    1.0\n    > y = base.dist.triangular.pdf( -10.0, -20.0, 0.0, -2.0 )\n    ~0.278\n    > y = base.dist.triangular.pdf( -2.0, -1.0, 1.0, 0.0 )\n    0.0\n    > y = base.dist.triangular.pdf( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dist.triangular.pdf( 0.0, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dist.triangular.pdf( 0.0, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.triangular.pdf( 2.0, 1.0, 0.0, NaN )\n    NaN\n    > y = base.dist.triangular.pdf( 2.0, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dist.triangular.pdf.factory( a, b, c )\n    Returns a function for evaluating the probability density function (PDF) of\n    a triangular distribution with minimum support `a`, maximum support `b`, and\n    mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dist.triangular.pdf.factory( 0.0, 10.0, 5.0 );\n    > var y = mypdf( 2.0 )\n    0.08\n    > y = mypdf( 12.0 )\n    0.0\n\n\n",
	"base.dist.triangular.quantile": "\nbase.dist.triangular.quantile( p, a, b, c )\n    Evaluates the quantile function for a triangular distribution with minimum\n    support `a`, maximum support `b`, and mode `c` at a value `x`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.triangular.quantile( 0.9, -1.0, 1.0, 0.0 )\n    ~0.553\n    > y = base.dist.triangular.quantile( 0.1, -1.0, 1.0, 0.5 )\n    ~-0.452\n    > y = base.dist.triangular.quantile( 0.1, -20.0, 0.0, -2.0 )\n    -14.0\n    > y = base.dist.triangular.quantile( 0.8, 0.0, 20.0, 0.0 )\n    ~11.056\n\n    > y = base.dist.triangular.quantile( 1.1, -1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dist.triangular.quantile( -0.1, -1.0, 1.0, 0.0 )\n    NaN\n\n    > y = base.dist.triangular.quantile( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dist.triangular.quantile( 0.3, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dist.triangular.quantile( 0.3, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dist.triangular.quantile( 0.3, 1.0, 0.0, NaN )\n    NaN\n\n    > y = base.dist.triangular.quantile( 0.3, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dist.triangular.quantile.factory( a, b, c )\n    Returns a function for evaluating the quantile function of a triangular\n    distribution with minimum support `a`, maximum support `b`, and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dist.triangular.quantile.factory( 2.0, 4.0, 2.5 );\n    > var y = myquantile( 0.4 )\n    ~2.658\n    > y = myquantile( 0.8 )\n    ~3.225\n\n\n",
	"base.dist.triangular.skewness": "\nbase.dist.triangular.skewness( a, b, c )\n    Returns the skewness of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.triangular.skewness( 0.0, 1.0, 0.8 )\n    ~-0.476\n    > v = base.dist.triangular.skewness( 4.0, 12.0, 5.0 )\n    ~0.532\n    > v = base.dist.triangular.skewness( 2.0, 8.0, 5.0 )\n    0.0\n\n",
	"base.dist.triangular.stdev": "\nbase.dist.triangular.stdev( a, b, c )\n    Returns the standard deviation of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.triangular.stdev( 0.0, 1.0, 0.8 )\n    ~0.217\n    > v = base.dist.triangular.stdev( 4.0, 12.0, 5.0 )\n    ~1.78\n    > v = base.dist.triangular.stdev( 2.0, 8.0, 5.0 )\n    ~1.225\n\n",
	"base.dist.triangular.Triangular": "\nbase.dist.triangular.Triangular( [a, b, c] )\n    Returns a triangular distribution object.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support. Must be smaller than `b` and `c`. Default: `0.0`.\n\n    b: number (optional)\n        Maximum support. Must be greater than `a` and `c`. Default: `1.0`.\n\n    c: number (optional)\n        Mode. Must be greater than `a` and smaller than `b`. Default: `0.5`.\n\n    Returns\n    -------\n    triangular: Object\n        Distribution instance.\n\n    triangular.a: number\n        Minimum support. If set, the value must be smaller or equal to `b` and\n        `c`.\n\n    triangular.b: number\n        Maximum support. If set, the value must be greater than or equal to `a`\n        and `c`.\n\n    triangular.c: number\n        Mode. If set, the value must be greater than or equal to `a` and smaller\n        than or equal to `b`.\n\n    triangular.entropy: number\n        Read-only property which returns the differential entropy.\n\n    triangular.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    triangular.mean: number\n        Read-only property which returns the expected value.\n\n    triangular.median: number\n        Read-only property which returns the median.\n\n    triangular.mode: number\n        Read-only property which returns the mode.\n\n    triangular.skewness: number\n        Read-only property which returns the skewness.\n\n    triangular.stdev: number\n        Read-only property which returns the standard deviation.\n\n    triangular.variance: number\n        Read-only property which returns the variance.\n\n    triangular.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    triangular.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    triangular.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    triangular.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var triangular = base.dist.triangular.Triangular( 0.0, 1.0, 0.5 );\n    > triangular.a\n    0.0\n    > triangular.b\n    1.0\n    > triangular.c\n    0.5\n    > triangular.entropy\n    ~-0.193\n    > triangular.kurtosis\n    -0.6\n    > triangular.mean\n    0.5\n    > triangular.median\n    0.5\n    > triangular.mode\n    0.5\n    > triangular.skewness\n    0.0\n    > triangular.stdev\n    ~0.205\n    > triangular.variance\n    ~0.042\n    > triangular.cdf( 0.8 )\n    0.92\n    > triangular.mgf( 0.8 )\n    ~1.512\n    > triangular.pdf( 0.8 )\n    ~0.8\n    > triangular.quantile( 0.8 )\n    ~0.684\n\n",
	"base.dist.triangular.variance": "\nbase.dist.triangular.variance( a, b, c )\n    Returns the variance of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.triangular.variance( 0.0, 1.0, 0.8 )\n    ~0.047\n    > v = base.dist.triangular.variance( 4.0, 12.0, 5.0 )\n    ~3.167\n    > v = base.dist.triangular.variance( 2.0, 8.0, 5.0 )\n    ~1.5\n\n",
	"base.dist.uniform.cdf": "\nbase.dist.uniform.cdf( x, a, b )\n    Evaluates the cumulative distribution function (CDF) for a uniform\n    distribution with minimum support `a` and maximum support `b` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.uniform.cdf( 9.0, 0.0, 10.0 )\n    0.9\n    > y = base.dist.uniform.cdf( 0.5, 0.0, 2.0 )\n    0.25\n    > y = base.dist.uniform.cdf( PINF, 2.0, 4.0 )\n    1.0\n    > y = base.dist.uniform.cdf( NINF, 2.0, 4.0 )\n    0.0\n    > y = base.dist.uniform.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.uniform.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.uniform.cdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.uniform.cdf( 2.0, 1.0, 0.0 )\n    NaN\n\n\nbase.dist.uniform.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dist.uniform.cdf.factory( 0.0, 10.0 );\n    > var y = mycdf( 0.5 )\n    0.05\n    > y = mycdf( 8.0 )\n    0.8\n\n",
	"base.dist.uniform.entropy": "\nbase.dist.uniform.entropy( a, b )\n    Returns the differential entropy of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Differential entropy.\n\n    Examples\n    --------\n    > var v = base.dist.uniform.entropy( 0.0, 1.0 )\n    0.0\n    > v = base.dist.uniform.entropy( 4.0, 12.0 )\n    ~2.079\n    > v = base.dist.uniform.entropy( 2.0, 8.0 )\n    ~1.792\n\n",
	"base.dist.uniform.kurtosis": "\nbase.dist.uniform.kurtosis( a, b )\n    Returns the excess kurtosis of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.uniform.kurtosis( 0.0, 1.0 )\n    -1.2\n    > v = base.dist.uniform.kurtosis( 4.0, 12.0 )\n    -1.2\n    > v = base.dist.uniform.kurtosis( 2.0, 8.0 )\n    -1.2\n\n",
	"base.dist.uniform.logcdf": "\nbase.dist.uniform.logcdf( x, a, b )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    uniform distribution with minimum support `a` and maximum support `b` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dist.uniform.logcdf( 9.0, 0.0, 10.0 )\n    ~-0.105\n    > y = base.dist.uniform.logcdf( 0.5, 0.0, 2.0 )\n    ~-1.386\n    > y = base.dist.uniform.logcdf( PINF, 2.0, 4.0 )\n    0.0\n    > y = base.dist.uniform.logcdf( NINF, 2.0, 4.0 )\n    -infinity\n    > y = base.dist.uniform.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.uniform.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.uniform.logcdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.uniform.logcdf( 2.0, 1.0, 0.0 )\n    NaN\n\n\nbase.dist.uniform.logcdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a uniform distribution with minimum support\n    `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dist.uniform.logcdf.factory( 0.0, 10.0 );\n    > var y = mylogcdf( 0.5 )\n    ~-2.996\n    > y = mylogcdf( 8.0 )\n    ~-0.223\n\n",
	"base.dist.uniform.logpdf": "\nbase.dist.uniform.logpdf( x, a, b )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    uniform distribution with minimum support `a` and maximum support `b` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.uniform.logpdf( 2.0, 0.0, 4.0 )\n    ~-1.386\n    > y = base.dist.uniform.logpdf( 5.0, 0.0, 4.0 )\n    -infinity\n    > y = base.dist.uniform.logpdf( 0.25, 0.0, 1.0 )\n    0.0\n    > y = base.dist.uniform.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.uniform.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.uniform.logpdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.uniform.logpdf( 2.0, 3.0, 1.0 )\n    NaN\n\n\nbase.dist.uniform.logpdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a uniform distribution with minimum support `a` and\n    maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dist.uniform.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 7.0 )\n    0.0\n    > y = mylogPDF( 5.0 )\n    -infinity\n\n",
	"base.dist.uniform.mean": "\nbase.dist.uniform.mean( a, b )\n    Returns the expected value of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.uniform.mean( 0.0, 1.0 )\n    0.5\n    > v = base.dist.uniform.mean( 4.0, 12.0 )\n    8.0\n    > v = base.dist.uniform.mean( 2.0, 8.0 )\n    5.0\n\n",
	"base.dist.uniform.median": "\nbase.dist.uniform.median( a, b )\n    Returns the median of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.uniform.median( 0.0, 1.0 )\n    0.5\n    > v = base.dist.uniform.median( 4.0, 12.0 )\n    8.0\n    > v = base.dist.uniform.median( 2.0, 8.0 )\n    5.0\n\n",
	"base.dist.uniform.mgf": "\nbase.dist.uniform.mgf( t, a, b )\n    Evaluates the moment-generating function (MGF) for a uniform\n    distribution with minimum support `a` and maximum support `b` at a value\n    `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.uniform.mgf( 2.0, 0.0, 4.0 )\n    ~372.495\n    > y = base.dist.uniform.mgf( -0.2, 0.0, 4.0 )\n    ~0.688\n    > y = base.dist.uniform.mgf( 2.0, 0.0, 1.0 )\n    ~3.195\n    > y = base.dist.uniform.mgf( 0.5, 3.0, 2.0 )\n    NaN\n    > y = base.dist.uniform.mgf( 0.5, 3.0, 3.0 )\n    NaN\n    > y = base.dist.uniform.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.uniform.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.uniform.mgf( 0.0, 0.0, NaN )\n    NaN\n\n\nbase.dist.uniform.mgf.factory( a, b )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dist.uniform.mgf.factory( 6.0, 7.0 );\n    > var y = mymgf( 0.1 )\n    ~1.916\n    > y = mymgf( 1.1 )\n    ~1339.321\n\n",
	"base.dist.uniform.pdf": "\nbase.dist.uniform.pdf( x, a, b )\n    Evaluates the probability density function (PDF) for a uniform distribution\n    with minimum support `a` and maximum support `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.uniform.pdf( 2.0, 0.0, 4.0 )\n    0.25\n    > y = base.dist.uniform.pdf( 5.0, 0.0, 4.0 )\n    0.0\n    > y = base.dist.uniform.pdf( 0.25, 0.0, 1.0 )\n    1.0\n    > y = base.dist.uniform.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.uniform.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.uniform.pdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.uniform.pdf( 2.0, 3.0, 1.0 )\n    NaN\n\n\nbase.dist.uniform.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF) of\n    a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.uniform.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    1.0\n    > y = myPDF( 5.0 )\n    0.0\n\n",
	"base.dist.uniform.quantile": "\nbase.dist.uniform.quantile( p, a, b )\n    Evaluates the quantile function for a uniform distribution with minimum\n    support `a` and maximum support `b` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.uniform.quantile( 0.8, 0.0, 1.0 )\n    0.8\n    > y = base.dist.uniform.quantile( 0.5, 0.0, 10.0 )\n    5.0\n\n    > y = base.dist.uniform.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dist.uniform.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dist.uniform.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.uniform.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.uniform.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dist.uniform.quantile( 0.5, 2.0, 1.0 )\n    NaN\n\n\nbase.dist.uniform.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of a uniform\n    distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.uniform.quantile.factory( 0.0, 4.0 );\n    > var y = myQuantile( 0.8 )\n    3.2\n\n",
	"base.dist.uniform.skewness": "\nbase.dist.uniform.skewness( a, b )\n    Returns the skewness of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.uniform.skewness( 0.0, 1.0 )\n    0.0\n    > v = base.dist.uniform.skewness( 4.0, 12.0 )\n    0.0\n    > v = base.dist.uniform.skewness( 2.0, 8.0 )\n    0.0\n\n",
	"base.dist.uniform.stdev": "\nbase.dist.uniform.stdev( a, b )\n    Returns the standard deviation of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.uniform.stdev( 0.0, 1.0 )\n    ~0.288\n    > v = base.dist.uniform.stdev( 4.0, 12.0 )\n    ~2.309\n    > v = base.dist.uniform.stdev( 2.0, 8.0 )\n    ~1.732\n\n",
	"base.dist.uniform.Uniform": "\nbase.dist.uniform.Uniform( [a, b] )\n    Returns a uniform distribution object.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support. Must be smaller than `b`. Default: `0.0`.\n\n    b: number (optional)\n        Maximum support. Must be greater than `a`. Default: `1.0`.\n\n    Returns\n    -------\n    uniform: Object\n        Distribution instance.\n\n    uniform.a: number\n        Minimum support. If set, the value must be smaller than `b`.\n\n    uniform.b: number\n        Maximum support. If set, the value must be greater than `a`.\n\n    uniform.entropy: number\n        Read-only property which returns the differential entropy.\n\n    uniform.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    uniform.mean: number\n        Read-only property which returns the expected value.\n\n    uniform.median: number\n        Read-only property which returns the median.\n\n    uniform.skewness: number\n        Read-only property which returns the skewness.\n\n    uniform.stdev: number\n        Read-only property which returns the standard deviation.\n\n    uniform.variance: number\n        Read-only property which returns the variance.\n\n    uniform.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    uniform.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    uniform.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    uniform.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    uniform.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    uniform.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var uniform = base.dist.uniform.Uniform( 0.0, 1.0 );\n    > uniform.a\n    0.0\n    > uniform.b\n    1.0\n    > uniform.entropy\n    0.0\n    > uniform.kurtosis\n    -1.2\n    > uniform.mean\n    0.5\n    > uniform.median\n    0.5\n    > uniform.skewness\n    0.0\n    > uniform.stdev\n    ~0.288\n    > uniform.variance\n    ~0.083\n    > uniform.cdf( 0.8 )\n    0.8\n    > uniform.logcdf( 0.5 )\n    ~-0.693\n    > uniform.logpdf( 1.0 )\n    ~-0.0\n    > uniform.mgf( 0.8 )\n    ~1.531\n    > uniform.pdf( 0.8 )\n    1.0\n    > uniform.quantile( 0.8 )\n    0.8\n\n",
	"base.dist.uniform.variance": "\nbase.dist.uniform.variance( a, b )\n    Returns the variance of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.uniform.variance( 0.0, 1.0 )\n    ~0.083\n    > v = base.dist.uniform.variance( 4.0, 12.0 )\n    ~5.333\n    > v = base.dist.uniform.variance( 2.0, 8.0 )\n    3.0\n\n",
	"base.dist.weibull.cdf": "\nbase.dist.weibull.cdf( x, k, λ )\n    Evaluates the cumulative distribution function (CDF) for a Weibull\n    distribution with shape parameter `k` and scale parameter `λ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dist.weibull.cdf( 2.0, 1.0, 1.0 )\n    ~0.865\n    > y = base.dist.weibull.cdf( -1.0, 2.0, 2.0 )\n    0.0\n    > y = base.dist.weibull.cdf( PINF, 4.0, 2.0 )\n    1.0\n    > y = base.dist.weibull.cdf( NINF, 4.0, 2.0 )\n    0.0\n    > y = base.dist.weibull.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.weibull.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.weibull.cdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.weibull.cdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.weibull.cdf.factory( k, λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = factory( 2.0, 10.0 );\n    > var y = myCDF( 12.0 )\n    ~0.763\n\n",
	"base.dist.weibull.entropy": "\nbase.dist.weibull.entropy( k, λ )\n    Returns the differential entropy of a Weibull distribution (in nats).\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dist.weibull.entropy( 1.0, 1.0 )\n    1.0\n    > v = base.dist.weibull.entropy( 4.0, 12.0 )\n    ~2.532\n    > v = base.dist.weibull.entropy( 8.0, 2.0 )\n    ~0.119\n\n",
	"base.dist.weibull.kurtosis": "\nbase.dist.weibull.kurtosis( k, λ )\n    Returns the excess kurtosis of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dist.weibull.kurtosis( 1.0, 1.0 )\n    6.0\n    > v = base.dist.weibull.kurtosis( 4.0, 12.0 )\n    ~-0.252\n    > v = base.dist.weibull.kurtosis( 8.0, 2.0 )\n    ~0.328\n\n",
	"base.dist.weibull.logcdf": "\nbase.dist.weibull.logcdf( x, k, λ )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Weibull distribution with shape parameter `k` and scale parameter `λ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = cdf( 2.0, 1.0, 1.0 )\n    ~-0.145\n    > y = base.dist.weibull.logcdf( -1.0, 2.0, 2.0 )\n    -infinity\n    > y = base.dist.weibull.logcdf( PINF, 4.0, 2.0 )\n    0.0\n    > y = base.dist.weibull.logcdf( NINF, 4.0, 2.0 )\n    -infinity\n    > y = base.dist.weibull.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.weibull.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.weibull.logcdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.weibull.logcdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.weibull.logcdf.factory( k, λ)\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Weibull distribution with scale parameter\n    `λ` and shape parameter `k`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dist.weibull.logcdf.factory( 2.0, 10.0 );\n    > var y = mylogcdf( 12.0 )\n    ~-0.27\n\n",
	"base.dist.weibull.logpdf": "\nbase.dist.weibull.logpdf( x, k, λ )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Weibull distribution with shape parameter `k` and scale parameter `λ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dist.weibull.logpdf( 2.0, 1.0, 0.5 )\n    ~-3.297\n    > y = base.dist.weibull.logpdf( 0.1, 1.0, 1.0 )\n    ~-0.1\n    > y = base.dist.weibull.logpdf( -1.0, 4.0, 2.0 )\n    -infinity\n    > y = base.dist.weibull.logpdf( NaN, 0.6, 1.0 )\n    NaN\n    > y = base.dist.weibull.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.weibull.logpdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.weibull.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.weibull.logpdf.factory( k, λ )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Weibull distribution with shape parameter `k` and scale\n    parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylofpdf = base.dist.weibull.logpdf.factory( 7.0, 6.0 );\n    > y = mylofpdf( 7.0 )\n    ~-1.864\n\n",
	"base.dist.weibull.mean": "\nbase.dist.weibull.mean( k, λ )\n    Returns the expected value of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dist.weibull.mean( 1.0, 1.0 )\n    1.0\n    > v = base.dist.weibull.mean( 4.0, 12.0 )\n    ~10.877\n    > v = base.dist.weibull.mean( 8.0, 2.0 )\n    ~1.883\n\n",
	"base.dist.weibull.median": "\nbase.dist.weibull.median( k, λ )\n    Returns the median of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dist.weibull.median( 1.0, 1.0 )\n    ~0.693\n    > v = base.dist.weibull.median( 4.0, 12.0 )\n    ~10.949\n    > v = base.dist.weibull.median( 8.0, 2.0 )\n    ~1.91\n\n",
	"base.dist.weibull.mgf": "\nbase.dist.weibull.mgf( x, k, λ )\n    Evaluates the moment-generating function (MGF) for a Weibull distribution\n    with shape parameter `k` and scale parameter `λ` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dist.weibull.mgf( 1.0, 1.0, 0.5 )\n    ~2.0\n    > y = base.dist.weibull.mgf( -1.0, 4.0, 4.0 )\n    ~0.019\n\n    > y = base.dist.weibull.mgf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dist.weibull.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.weibull.mgf( 0.0, 1.0, NaN )\n    NaN\n\n    > y = base.dist.weibull.mgf( 0.2, -1.0, 0.5 )\n    NaN\n    > y = base.dist.weibull.mgf( 0.2, 0.0, 0.5 )\n    NaN\n\n    > y = base.dist.weibull.mgf( 0.2, 0.5, -1.0 )\n    NaN\n    > y = base.dist.weibull.mgf( 0.2, 0.5, 0.0 )\n    NaN\n\n\nbase.dist.weibull.mgf.factory( k, λ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dist.weibull.mgf.factory( 8.0, 10.0 );\n    > var y = myMGF( 0.8 )\n    ~3150.149\n    > y = myMGF( 0.08 )\n    ~2.137s\n\n",
	"base.dist.weibull.mode": "\nbase.dist.weibull.mode( k, λ )\n    Returns the mode of a Weibull distribution.\n\n    If `0 < k <= 1`, the function returns `0.0`.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dist.weibull.mode( 1.0, 1.0 )\n    0.0\n    > v = base.dist.weibull.mode( 4.0, 12.0 )\n    ~11.167\n    > v = base.dist.weibull.mode( 8.0, 2.0 )\n    ~1.967\n\n",
	"base.dist.weibull.pdf": "\nbase.dist.weibull.pdf( x, k, λ )\n    Evaluates the probability density function (PDF) for a Weibull distribution\n    with shape parameter `k` and scale parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dist.weibull.pdf( 2.0, 1.0, 0.5 )\n    ~0.037\n    > y = base.dist.weibull.pdf( 0.1, 1.0, 1.0 )\n    ~0.905\n    > y = base.dist.weibull.pdf( -1.0, 4.0, 2.0 )\n    0.0\n    > y = base.dist.weibull.pdf( NaN, 0.6, 1.0 )\n    NaN\n    > y = base.dist.weibull.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.weibull.pdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dist.weibull.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dist.weibull.pdf.factory( k, λ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dist.weibull.pdf.factory( 7.0, 6.0 );\n    > var y = myPDF( 7.0 )\n    ~0.155\n\n",
	"base.dist.weibull.quantile": "\nbase.dist.weibull.quantile( p, k, λ )\n    Evaluates the quantile function for a Weibull distribution with scale\n    parameter `k` and shape parameter `λ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dist.weibull.quantile( 0.8, 1.0, 1.0 )\n    ~1.609\n    > y = base.dist.weibull.quantile( 0.5, 2.0, 4.0 )\n    ~3.33\n\n    > y = base.dist.weibull.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dist.weibull.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dist.weibull.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dist.weibull.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dist.weibull.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dist.weibull.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dist.weibull.quantile.factory( k, λ )\n    Returns a function for evaluating the quantile function of a Weibull\n    distribution with scale parameter `k` and shape parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dist.weibull.quantile.factory( 2.0, 10.0 );\n    > var y = myQuantile( 0.4 )\n    ~7.147\n\n",
	"base.dist.weibull.skewness": "\nbase.dist.weibull.skewness( k, λ )\n    Returns the skewness of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dist.weibull.skewness( 1.0, 1.0 )\n    2.0\n    > v = base.dist.weibull.skewness( 4.0, 12.0 )\n    ~-0.087\n    > v = base.dist.weibull.skewness( 8.0, 2.0 )\n    ~-0.534\n\n",
	"base.dist.weibull.stdev": "\nbase.dist.weibull.stdev( k, λ )\n    Returns the standard deviation of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dist.weibull.stdev( 1.0, 1.0 )\n    1.0\n    > v = base.dist.weibull.stdev( 4.0, 12.0 )\n    ~3.051\n    > v = base.dist.weibull.stdev( 8.0, 2.0 )\n    ~0.279\n\n",
	"base.dist.weibull.variance": "\nbase.dist.weibull.variance( k, λ )\n    Returns the variance of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dist.weibull.variance( 1.0, 1.0 )\n    1.0\n    > v = base.dist.weibull.variance( 4.0, 12.0 )\n    ~9.311\n    > v = base.dist.weibull.variance( 8.0, 2.0 )\n    ~0.078\n\n",
	"base.dist.weibull.Weibull": "\nbase.dist.weibull.Weibull( [k, λ] )\n    Returns a Weibull distribution object.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    λ: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    weibull: Object\n        Distribution instance.\n\n    weibull.k: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    weibull.lambda: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    weibull.entropy: number\n        Read-only property which returns the differential entropy.\n\n    weibull.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    weibull.mean: number\n        Read-only property which returns the expected value.\n\n    weibull.median: number\n        Read-only property which returns the median.\n\n    weibull.mode: number\n        Read-only property which returns the mode.\n\n    weibull.skewness: number\n        Read-only property which returns the skewness.\n\n    weibull.stdev: number\n        Read-only property which returns the standard deviation.\n\n    weibull.variance: number\n        Read-only property which returns the variance.\n\n    weibull.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    weibull.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    weibull.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    weibull.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    weibull.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    weibull.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var weibull = base.dist.weibull.Weibull( 6.0, 5.0 );\n    > weibull.k\n    6.0\n    > weibull.lambda\n    5.0\n    > weibull.entropy\n    ~1.299\n    > weibull.kurtosis\n    ~0.035\n    > weibull.mean\n    ~4.639\n    > weibull.median\n    ~4.704\n    > weibull.mode\n    ~4.85\n    > weibull.skewness\n    ~-0.373\n    > weibull.stdev\n    ~0.899\n    > weibull.variance\n    ~0.808\n    > weibull.cdf( 3.0 )\n    ~0.046\n    > weibull.logcdf( 3.0 )\n    ~-3.088\n    > weibull.logpdf( 1.0 )\n    ~-7.865\n    > weibull.mgf( -0.5 )\n    ~0.075\n    > weibull.pdf( 3.0 )\n    ~0.089\n    > weibull.quantile( 0.8 )\n    ~5.412\n\n",
	"base.epsdiff": "\nbase.epsdiff( x, y[, scale] )\n    Computes the relative difference of two real numbers in units of double-\n    precision floating-point epsilon.\n\n    By default, the function scales the absolute difference by dividing the\n    absolute difference by the maximum absolute value of `x` and `y`. To scale\n    by a different function, specify a scale function name.\n\n    The following `scale` functions are supported:\n\n    - 'max-abs': maximum absolute value of `x` and `y` (default).\n    - 'max': maximum value of `x` and `y`.\n    - 'min-abs': minimum absolute value of `x` and `y`.\n    - 'min': minimum value of `x` and `y`.\n    - 'mean-abs': arithmetic mean of the absolute values of `x` and `y`.\n    - 'mean': arithmetic mean of `x` and `y`.\n    - 'x': `x` (*noncommutative*).\n    - 'y': `y` (*noncommutative*).\n\n    To use a custom scale function, provide a function which accepts two numeric\n    arguments `x` and `y`.\n\n    If computing the relative difference in units of epsilon will result in\n    overflow, the function returns the maximum double-precision floating-point\n    number.\n\n    If the absolute difference of `x` and `y` is `0`, the relative difference is\n    always `0`.\n\n    If `|x| = |y| = infinity`, the function returns `NaN`.\n\n    If `|x| = |-y| = infinity`, the relative difference is `+infinity`.\n\n    If a `scale` function returns `0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    scale: string|Function\n        Scale function. Default: `'max-abs'`.\n\n    Returns\n    -------\n    out: number\n        Relative difference in units of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > var d = base.epsdiff( 12.15, 12.149999999999999 )\n    ~0.658\n    > d = base.epsdiff( 2.4341309458983933, 2.4341309458633909, 'mean-abs' )\n    ~64761.5\n\n    // Custom scale function:\n    > function scale( x, y ) { return ( x > y ) ? y : x; };\n    > d = base.epsdiff( 1.0000000000000002, 1.0000000000000100, scale )\n    ~44\n\n    See Also\n    --------\n    base.absdiff, base.reldiff\n",
	"base.eta": "\nbase.eta( s )\n    Evaluates the Dirichlet eta function as a function of a real variable `s`.\n\n    Parameters\n    ----------\n    s: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.eta( 0.0 )\n    0.5\n    > y = base.eta( -1.0 )\n    0.25\n    > y = base.eta( 1.0 )\n    ~0.6931\n    > y = base.eta( 3.14 )\n    ~0.9096\n    > y = base.eta( NaN )\n    NaN\n\n",
	"base.erf": "\nbase.erf( x )\n    Evaluates the error function.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    As the error function is an odd function (i.e., `erf(-x) == -erf(x)`), if\n    provided `-0`, the function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erf( 2.0 )\n    ~0.9953\n    > y = base.erf( -1.0 )\n    ~-0.8427\n    > y = base.erf( -0.0 )\n    -0.0\n    > y = base.erf( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erfc, base.erfinv, base.erfcinv\n",
	"base.erfc": "\nbase.erfc( x )\n    Evaluates the complementary error function.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfc( 2.0 )\n    ~0.0047\n    > y = base.erfc( -1.0 )\n    ~-1.8427\n    > y = base.erfc( 0.0 )\n    1.0\n    > y = base.erfc( PINF )\n    0.0\n    > y = base.erfc( NINF )\n    2.0\n    > y = base.erfc( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfinv, base.erfcinv\n",
	"base.erfcinv": "\nbase.erfcinv( x )\n    Evaluates the inverse complementary error function.\n\n    The domain of `x` is restricted to `[0,2]`. If `x` is outside this interval,\n    the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfcinv( 0.5 )\n    ~0.4769\n    > y = base.erfcinv( 0.8 )\n    ~-0.1791\n    > y = base.erfcinv( 0.0 )\n    infinity\n    > y = base.erfcinv( 2.0 )\n    -infinity\n    > y = base.erfcinv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfc, base.erfinv\n",
	"base.erfinv": "\nbase.erfinv( x )\n    Evaluates the inverse error function.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    As the inverse error function is an odd function (i.e., `erfinv(-x) ==\n    -erfinv(x)`), if provided `-0`, the function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfinv( 0.5 )\n    ~0.4769\n    > y = base.erfinv( 0.8 )\n    ~0.9062\n    > y = base.erfinv( 0.0 )\n    0.0\n    > y = base.erfinv( -0.0 )\n    -0.0\n    > y = base.erfinv( -1.0 )\n    -infinity\n    > y = base.erfinv( 1.0 )\n    infinity\n    > y = base.erfinv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfc, base.erfcinv\n",
	"base.evalpoly": "\nbase.evalpoly( c, x )\n    Evaluates a polynomial.\n\n    Parameters\n    ----------\n    c: Array<double>\n        Polynomial coefficients sorted in ascending degree.\n\n    x: number\n        Value at which to evaluate the polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated polynomial.\n\n    Examples\n    --------\n    > var arr = [ 3.0, 2.0, 1.0 ];\n\n    // 3*10^0 + 2*10^1 + 1*10^2\n    > var v = base.evalpoly( arr, 10.0 )\n    123.0\n\n\nbase.evalpoly.factory( c )\n    Returns a function for evaluating a polynomial.\n\n    Parameters\n    ----------\n    c: Array<double>\n        Polynomial coefficients sorted in ascending degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a polynomial.\n\n    Examples\n    --------\n    > var polyval = base.evalpoly.factory( [ 3.0, 2.0, 1.0 ] );\n\n    // 3*10^0 + 2*10^1 + 1*10^2\n    > var v = polyval( 10.0 )\n    123.0\n\n    // 3*5^0 + 2*5^1 + 1*5^2\n    > v = polyval( 5.0 )\n    38.0\n\n    See Also\n    --------\n    base.evalrational\n",
	"base.evalrational": "\nbase.evalrational( P, Q, x )\n    Evaluates a rational function.\n\n    A rational function `f(x)` is defined as\n\n               P(x)\n        f(x) = ----\n               Q(x)\n\n    where both `P(x)` and `Q(x)` are polynomials in `x`.\n\n    The coefficients for both `P` and `Q` should be sorted in ascending degree.\n\n    For polynomials of different degree, the coefficient array for the lower\n    degree polynomial should be padded with zeros.\n\n    Parameters\n    ----------\n    P: Array<double>\n        Numerator polynomial coefficients sorted in ascending degree.\n\n    Q: Array<double>\n        Denominator polynomial coefficients sorted in ascending degree.\n\n    x: number\n        Value at which to evaluate the rational function.\n\n    Returns\n    -------\n    out: number\n        Evaluated rational function.\n\n    Examples\n    --------\n    // 2x^3 + 4x^2 - 5x^1 - 6x^0\n    > var P = [ -6.0, -5.0, 4.0, 2.0 ];\n\n    // 0.5x^1 + 3x^0\n    > var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded\n\n    // Evaluate the rational function:\n    > var v = base.evalrational( P, Q, 6.0 )\n    90.0\n\n\nbase.evalrational.factory( P, Q )\n    Returns a function for evaluating a rational function.\n\n    Parameters\n    ----------\n    P: Array<double>\n        Numerator polynomial coefficients sorted in ascending degree.\n\n    Q: Array<double>\n        Denominator polynomial coefficients sorted in ascending degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a rational function.\n\n    Examples\n    --------\n    > var P = [ 20.0, 8.0, 3.0 ];\n    > var Q = [ 10.0, 9.0, 1.0 ];\n    > var rational = base.evalrational.factory( P, Q );\n\n    // (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2):\n    > var v = rational( 10.0 )\n    2.0\n\n    // (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2):\n    > v = rational( 2.0 )\n    1.5\n\n    See Also\n    --------\n    base.evalpoly\n",
	"base.exp": "\nbase.exp( x )\n    Evaluates the natural exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp( 4.0 )\n    ~54.5982\n    > y = base.exp( -9.0 )\n    ~1.234e-4\n    > y = base.exp( 0.0 )\n    1.0\n    > y = base.exp( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp10, base.exp2, base.expm1, base.ln\n",
	"base.exponent": "\nbase.exponent( x )\n    Returns an integer corresponding to the unbiased exponent of a double-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unbiased exponent.\n\n    Examples\n    --------\n    > var exponent = base.exponent( 3.14e-307 )\n    -1019\n    > exponent = base.exponent( -3.14 )\n    1\n    > exponent = base.exponent( 0.0 )\n    0\n    > exponent = base.exponent( NaN )\n    1024\n\n    See Also\n    --------\n    base.exponentf\n",
	"base.exponentf": "\nbase.exponentf( x )\n    Returns an integer corresponding to the unbiased exponent of a single-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unbiased exponent.\n\n    Examples\n    --------\n    > var exponent = base.exponentf( base.float64ToFloat32( 3.14e34 ) )\n    114\n    > exponent = base.exponentf( base.float64ToFloat32( 3.14e-34 ) )\n    -112\n    > exponent = base.exponentf( base.float64ToFloat32( -3.14 ) )\n    1\n    > exponent = base.exponentf( 0.0 )\n    0\n    > exponent = base.exponentf( NaN )\n    128\n\n    See Also\n    --------\n    base.exponent\n",
	"base.exp10": "\nbase.exp10( x )\n    Evaluates the base `10` exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp10( 3.0 )\n    1000\n    > y = base.exp10( -9.0 )\n    1.0e-9\n    > y = base.exp10( 0.0 )\n    1.0\n    > y = base.exp10( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.exp2\n",
	"base.exp2": "\nbase.exp2( x )\n    Evaluates the base `2` exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp2( 3.0 )\n    8.0\n    > y = base.exp2( -9.0 )\n    ~0.002\n    > y = base.exp2( 0.0 )\n    1.0\n    > y = base.exp2( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.exp10\n",
	"base.expm1": "\nbase.expm1( x )\n    Computes `exp(x)-1`, where `exp(x)` is the natural exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.expm1( 0.2 )\n    ~0.221\n    > y = base.expm1( -9.0 )\n    ~-0.999\n    > y = base.expm1( 0.0 )\n    0.0\n    > y = base.expm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp\n",
	"base.factorial": "\nbase.factorial( x )\n    Evaluates the factorial of `x`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Factorial.\n\n    Examples\n    --------\n    > var y = base.factorial( 3.0 )\n    6.0\n    > y = base.factorial( -1.5 )\n    ~-3.545\n    > y = base.factorial( -0.5 )\n    ~1.772\n    > y = base.factorial( 0.5 )\n    ~0.886\n    > y = base.factorial( -10.0 )\n    NaN\n    > y = base.factorial( 171.0 )\n    infinity\n    > y = base.factorial( NaN )\n    NaN\n\n    See Also\n    --------\n    base.factorialln\n",
	"base.factorialln": "\nbase.factorialln( x )\n    Evaluates the natural logarithm of the factorial of `x`.\n\n    For input values other than negative integers, the function returns\n    `ln( x! ) = ln( Γ(x+1) )`, where `Γ` is the Gamma function. For negative\n    integers, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Natural logarithm of the factorial of `x`.\n\n    Examples\n    --------\n    > var y = base.factorialln( 3.0 )\n    ~1.792\n    > y = base.factorialln( 2.4 )\n    ~1.092\n    > y = base.factorialln( -1.0 )\n    NaN\n    > y = base.factorialln( -1.5 )\n    ~1.266\n    > y = base.factorialln( NaN )\n    NaN\n\n    See Also\n    --------\n    base.factorial\n",
	"base.fallingFactorial": "\nbase.fallingFactorial( x, n )\n    Computes the falling factorial of `x` and `n`.\n\n    If not provided a non-negative integer for `n`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    n: integer\n        Second function parameter.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.fallingFactorial( 0.9, 5 )\n    ~0.644\n    > v = base.fallingFactorial( -9.0, 3 )\n    -990.0\n    > v = base.fallingFactorial( 0.0, 2 )\n    0.0\n    > v = base.fallingFactorial( 3.0, -2 )\n    NaN\n\n    See Also\n    --------\n    base.risingFactorial\n",
	"base.fibonacci": "\nbase.fibonacci( n )\n    Computes the nth Fibonacci number.\n\n    Fibonacci numbers follow the recurrence relation\n\n      F_n = F_{n-1} + F_{n-2}\n\n    with seed values F_0 = 0 and F_1 = 1.\n\n    If `n` is greater than `78`, the function returns `NaN`, as larger Fibonacci\n    numbers cannot be accurately represented due to limitations of double-\n    precision floating-point format.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        Fibonacci number.\n\n    Examples\n    --------\n    > var y = base.fibonacci( 0 )\n    0\n    > y = base.fibonacci( 1 )\n    1\n    > y = base.fibonacci( 2 )\n    1\n    > y = base.fibonacci( 3 )\n    2\n    > y = base.fibonacci( 4 )\n    3\n    > y = base.fibonacci( 79 )\n    NaN\n    > y = base.fibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.binet, base.fibonacciIndex, base.lucas, base.negafibonacci\n",
	"base.fibonacciIndex": "\nbase.fibonacciIndex( F )\n    Computes the Fibonacci number index.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `F <= 1` or `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    F: integer\n        Fibonacci number.\n\n    Returns\n    -------\n    n: number\n        Fibonacci number index.\n\n    Examples\n    --------\n    > var n = base.fibonacciIndex( 2 )\n    3\n    > n = base.fibonacciIndex( 3 )\n    4\n    > n = base.fibonacciIndex( 5 )\n    5\n    > n = base.fibonacciIndex( NaN )\n    NaN\n    > n = base.fibonacciIndex( 1 )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci\n",
	"base.fibpoly": "\nbase.fibpoly( n, x )\n    Evaluates a Fibonacci polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Fibonacci polynomial to evaluate.\n\n    x: number\n        Value at which to evaluate the Fibonacci polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated Fibonacci polynomial.\n\n    Examples\n    --------\n    // 2^4 + 3*2^2 + 1\n    > var v = base.fibpoly( 5, 2.0 )\n    29.0\n\n\nbase.fibpoly.factory( n )\n    Returns a function for evaluating a Fibonacci polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Fibonacci polynomial to evaluate.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a Fibonacci polynomial.\n\n    Examples\n    --------\n    > var polyval = base.fibpoly.factory( 5 );\n\n    // 1^4 + 3*1^2 + 1\n    > var v = polyval( 1.0 )\n    5.0\n\n    // 2^4 + 3*2^2 + 1\n    > v = polyval( 2.0 )\n    29.0\n\n    See Also\n    --------\n    base.evalpoly, base.lucaspoly\n",
	"base.flipsign": "\nbase.flipsign( x, y )\n    Returns a double-precision floating-point number with the magnitude of `x`\n    and the sign of `x*y`.\n\n    The function only returns `-x` when `y` is a negative number.\n\n    According to the IEEE 754 standard, a `NaN` has a biased exponent equal to\n    `2047`, a significand greater than `0`, and a sign bit equal to either `1`\n    or `0`. In which case, `NaN` may not correspond to just one but many binary\n    representations. Accordingly, care should be taken to ensure that `y` is not\n    `NaN`, else behavior may be indeterminate.\n\n    Parameters\n    ----------\n    x: number\n        Number from which to derive a magnitude.\n\n    y: number\n        Number from which to derive a sign.\n\n    Returns\n    -------\n    z: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var z = base.flipsign( -3.14, 10.0 )\n    -3.14\n    > z = base.flipsign( -3.14, -1.0 )\n    3.14\n    > z = base.flipsign( 1.0, -0.0 )\n    -1.0\n    > z = base.flipsign( -3.14, -0.0 )\n    3.14\n    > z = base.flipsign( -0.0, 1.0 )\n    -0.0\n    > z = base.flipsign( 0.0, -1.0 )\n    -0.0\n\n    See Also\n    --------\n    base.copysign\n",
	"base.floor": "\nbase.floor( x )\n    Rounds a numeric value toward negative infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor( 3.14 )\n    3.0\n    > y = base.floor( -4.2 )\n    -5.0\n    > y = base.floor( -4.6 )\n    -5.0\n    > y = base.floor( 9.5 )\n    9.0\n    > y = base.floor( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.round\n",
	"base.floor10": "\nbase.floor10( x )\n    Rounds a numeric value to the nearest power of ten toward negative infinity.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor10( 3.14 )\n    1.0\n    > y = base.floor10( -4.2 )\n    -10.0\n    > y = base.floor10( -4.6 )\n    -10.0\n    > y = base.floor10( 9.5 )\n    1.0\n    > y = base.floor10( 13.0 )\n    10.0\n    > y = base.floor10( -13.0 )\n    -100.0\n    > y = base.floor10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor, base.floor2, base.round10\n",
	"base.floor2": "\nbase.floor2( x )\n    Rounds a numeric value to the nearest power of two toward negative infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor2( 3.14 )\n    2.0\n    > y = base.floor2( -4.2 )\n    -8.0\n    > y = base.floor2( -4.6 )\n    -8.0\n    > y = base.floor2( 9.5 )\n    8.0\n    > y = base.floor2( 13.0 )\n    8.0\n    > y = base.floor2( -13.0 )\n    -16.0\n    > y = base.floor2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor, base.floor10, base.round2\n",
	"base.floorb": "\nbase.floorb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward negative\n    infinity.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.floorb( 3.14159, -4, 10 )\n    3.1415\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.floorb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two toward negative infinity:\n    > y = base.floorb( 5.0, 1, 2 )\n    4.0\n\n    See Also\n    --------\n    base.ceilb, base.floor, base.floorn, base.roundb\n",
	"base.floorn": "\nbase.floorn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward negative\n    infinity.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.floorn( 3.14159, -4 )\n    3.1415\n\n    // If `n = 0`, standard round toward negative infinity behavior:\n    > y = base.floorn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.floorn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floor, base.floorb, base.roundn\n",
	"base.floorsd": "\nbase.floorsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward negative infinity with\n    `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floorsd( 3.14159, 5 )\n    3.1415\n    > y = base.floorsd( 3.14159, 1 )\n    3.0\n    > y = base.floorsd( 12368.0, 2 )\n    12000.0\n    > y = base.floorsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floor, base.roundsd, base.truncsd\n",
	"base.float32ToInt32": "\nbase.float32ToInt32( x )\n    Converts a single-precision floating-point number to a signed 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float32ToInt32( base.float64ToFloat32( 4294967295.0 ) )\n    -1\n    > y = base.float32ToInt32( base.float64ToFloat32( 3.14 ) )\n    3\n    > y = base.float32ToInt32( base.float64ToFloat32( -3.14 ) )\n    -3\n    > y = base.float32ToInt32( base.float64ToFloat32( NaN ) )\n    0\n    > y = base.float32ToInt32( FLOAT32_PINF )\n    0\n    > y = base.float32ToInt32( FLOAT32_NINF )\n    0\n\n    See Also\n    --------\n    base.float32ToUint32",
	"base.float32ToUint32": "\nbase.float32ToUint32( x )\n    Converts a single-precision floating-point number to a unsigned 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: float\n        single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float32ToUint32( base.float64ToFloat32( 4294967297.0 ) )\n    1\n    > y = base.float32ToUint32( base.float64ToFloat32( 3.14 ) )\n    3\n    > y = base.float32ToUint32( base.float64ToFloat32( -3.14 ) )\n    4294967293\n    > y = base.float32ToUint32( base.float64ToFloat32( NaN ) )\n    0\n    > y = base.float32ToUint32( FLOAT32_PINF )\n    0\n    > y = base.float32ToUint32( FLOAT32_NINF )\n    0\n\n    See Also\n    --------\n    base.float32ToInt32",
	"base.float64ToFloat32": "\nbase.float64ToFloat32( x )\n    Converts a double-precision floating-point number to the nearest single-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: float\n        Nearest single-precision floating-point number.\n\n    Examples\n    --------\n    > var y = base.float64ToFloat32( 1.337 )\n    1.3370000123977661\n",
	"base.float64ToInt32": "\nbase.float64ToInt32( x )\n    Converts a double-precision floating-point number to a signed 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float64ToInt32( 4294967295.0 )\n    -1\n    > y = base.float64ToInt32( 3.14 )\n    3\n    > y = base.float64ToInt32( -3.14 )\n    -3\n    > y = base.float64ToInt32( NaN )\n    0\n    > y = base.float64ToInt32( PINF )\n    0\n    > y = base.float64ToInt32( NINF )\n    0\n\n    See Also\n    --------\n    base.float64ToUint32",
	"base.float64ToUint32": "\nbase.float64ToUint32( x )\n    Converts a double-precision floating-point number to a unsigned 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float64ToUint32( 4294967297.0 )\n    1\n    > y = base.float64ToUint32( 3.14 )\n    3\n    > y = base.float64ToUint32( -3.14 )\n    4294967293\n    > y = base.float64ToUint32( NaN )\n    0\n    > y = base.float64ToUint32( PINF )\n    0\n    > y = base.float64ToUint32( NINF )\n    0\n\n    See Also\n    --------\n    base.float64ToInt32",
	"base.frexp": "\nbase.frexp( x )\n    Splits a double-precision floating-point number into a normalized fraction\n    and an integer power of two.\n\n    The first element of the returned `array` is the normalized fraction and the\n    second is the exponent. The normalized fraction and exponent satisfy the\n    relation `x = frac * 2^exp`.\n\n    If provided positive or negative `zero`, `NaN`, or positive or negative\n    `infinity`, the function returns a two-element `array` containing the input\n    value and an exponent equal to `0`.\n\n    For all other `numeric` input values, the absolute value of the normalized\n    fraction resides on the interval `[0.5,1)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: Array<double>\n        Two element array containing a normalized fraction and an exponent.\n\n    Examples\n    --------\n    > var out = base.frexp( 4.0 )\n    [ 0.5, 3 ]\n    > out = base.frexp( 0.0 )\n    [ 0.0, 0 ]\n    > out = base.frexp( -0.0 )\n    [ -0.0, 0 ]\n    > out = base.frexp( NaN )\n    [ NaN, 0 ]\n    > out = base.frexp( PINF )\n    [ infinity, 0 ]\n    > out = base.frexp( NINF )\n    [ -infinity, 0 ]\n\n    See Also\n    --------\n    base.ldexp\n",
	"base.fromBinaryString": "\nbase.fromBinaryString( bstr )\n    Creates a double-precision floating-point number from a literal bit\n    representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var bstr;\n    > bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n    > var val = base.fromBinaryString( bstr )\n    4.0\n    > bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n    > val = base.fromBinaryString( bstr )\n    3.141592653589793\n    > bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n    > val = base.fromBinaryString( bstr )\n    -1.0e308\n\n    // The function handles subnormals:\n    > bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n    > val = base.fromBinaryString( bstr )\n    -3.14e-320\n    > bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n    > val = base.fromBinaryString( bstr )\n    5.0e-324\n\n    // The function handles special values:\n    > bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    0.0\n    > bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    -0.0\n    > bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    NaN\n    > bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    Infinity\n    > bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    -Infinity\n\n    See Also\n    --------\n    base.fromBinaryStringf, base.toBinaryString\n",
	"base.fromBinaryStringf": "\nbase.fromBinaryStringf( bstr )\n    Creates a single-precision floating-point number from an IEEE 754 literal\n    bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: float\n        Single-precision floating-point number.\n\n    Examples\n    --------\n    > var bstr = '01000000100000000000000000000000';\n    > var val = base.fromBinaryStringf( bstr )\n    4.0\n    > bstr = '01000000010010010000111111011011';\n    > val = base.fromBinaryStringf( bstr )\n    ~3.14\n    > bstr = '11111111011011000011101000110011';\n    > val = base.fromBinaryStringf( bstr )\n    ~-3.14e+38\n\n    // The function handles subnormals:\n    > bstr = '10000000000000000000000000010110';\n    > val = base.fromBinaryStringf( bstr )\n    ~-3.08e-44\n    > bstr = '00000000000000000000000000000001';\n    > val = base.fromBinaryStringf( bstr )\n    ~1.40e-45\n\n    // The function handles special values:\n    > bstr = '00000000000000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    0.0\n    > bstr = '10000000000000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    -0.0\n    > bstr = '01111111110000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    NaN\n    > bstr = '01111111100000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    Infinity\n    > bstr = '11111111100000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    -Infinity\n\n    See Also\n    --------\n    base.toBinaryStringf, base.fromBinaryString\n",
	"base.fromBinaryStringUint16": "\nbase.fromBinaryStringUint16( bstr )\n    Creates an unsigned 16-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 16-bit integer.\n\n    Examples\n    --------\n    > var bstr = '0101010101010101';\n    > var val = base.fromBinaryStringUint16( bstr )\n    21845\n    > bstr = '0000000000000000';\n    > val = base.fromBinaryStringUint16( bstr )\n    0\n    > bstr = '0000000000000010';\n    > val = base.fromBinaryStringUint16( bstr )\n    2\n    > bstr = '1111111111111111';\n    > val = base.fromBinaryStringUint16( bstr )\n    65535\n\n    See Also\n    --------\n    base.toBinaryStringUint16, base.fromBinaryStringUint32, base.fromBinaryStringUint8\n",
	"base.fromBinaryStringUint32": "\nbase.fromBinaryStringUint32( bstr )\n    Creates an unsigned 32-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var bstr = '01010101010101010101010101010101';\n    > var val = base.fromBinaryStringUint32( bstr )\n    1431655765\n    > bstr = '00000000000000000000000000000000';\n    > val = base.fromBinaryStringUint32( bstr )\n    0\n    > bstr = '00000000000000000000000000000010';\n    > val = base.fromBinaryStringUint32( bstr )\n    2\n    > bstr = '11111111111111111111111111111111';\n    > val = base.fromBinaryStringUint32( bstr )\n    4294967295\n\n    See Also\n    --------\n    base.fromBinaryStringUint16, base.toBinaryStringUint32, base.fromBinaryStringUint8\n",
	"base.fromBinaryStringUint8": "\nbase.fromBinaryStringUint8( bstr )\n    Creates an unsigned 8-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 8-bit integer.\n\n    Examples\n    --------\n    > var bstr = '01010101';\n    > var val = base.fromBinaryStringUint8( bstr )\n    85\n    > bstr = '00000000';\n    > val = base.fromBinaryStringUint8( bstr )\n    0\n    > bstr = '00000010';\n    > val = base.fromBinaryStringUint8( bstr )\n    2\n    > bstr = '11111111';\n    > val = base.fromBinaryStringUint8( bstr )\n    255\n\n    See Also\n    --------\n    base.fromBinaryStringUint16, base.fromBinaryStringUint32, base.toBinaryStringUint8\n",
	"base.fromWordf": "\nbase.fromWordf( x )\n    Creates a single-precision floating-point number from an unsigned integer\n    corresponding to an IEEE 754 binary representation.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned integer.\n\n    Returns\n    -------\n    out: float\n        Single-precision floating-point number.\n\n    Examples\n    --------\n    > var word = 1068180177; // => 0 01111111 01010110010001011010001\n    > var f32 = base.fromWordf( word ) // when printed, promoted to float64\n    1.3370000123977661\n\n    See Also\n    --------\n    base.fromWords\n",
	"base.fromWords": "\nbase.fromWords( high, low )\n    Creates a double-precision floating-point number from a higher order word\n    (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n\n    Parameters\n    ----------\n    high: integer\n        Higher order word (unsigned 32-bit integer).\n\n    low: integer\n        Lower order word (unsigned 32-bit integer).\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var v = base.fromWords( 1774486211, 2479577218 )\n    3.14e201\n    > v = base.fromWords( 3221823995, 1413754136 )\n    3.141592653589793\n    > v = base.fromWords( 0, 0 )\n    0.0\n    > v = base.fromWords( 2147483648, 0 )\n    -0.0\n    > v = base.fromWords( 2146959360, 0 )\n    NaN\n    > v = base.fromWords( 2146435072, 0 )\n    Infinity\n    > v = base.fromWords( 4293918720, 0 )\n    -Infinity\n\n    See Also\n    --------\n    base.fromWordf\n",
	"base.gamma": "\nbase.gamma( x )\n    Evaluates the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gamma( 4.0 )\n    6.0\n    > y = base.gamma( -1.5 )\n    ~2.363\n    > y = base.gamma( -0.5 )\n    ~-3.545\n    > y = base.gamma( 0.5 )\n    ~1.772\n    > y = base.gamma( 0.0 )\n    infinity\n    > y = base.gamma( -0.0 )\n    -infinity\n    > y = base.gamma( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma1pm1, base.gammainc, base.gammaincinv, base.gammaln\n",
	"base.gamma1pm1": "\nbase.gamma1pm1( x )\n    Computes `gamma(x+1) - 1` without cancellation errors, where `gamma(x)` is\n    the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gamma1pm1( 0.2 )\n    ~-0.082\n    > y = base.gamma1pm1( -6.7 )\n    ~-0.991\n    > y = base.gamma1pm1( 0.0 )\n    0.0\n    > y = base.gamma1pm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammainc, base.gammaincinv, base.gammaln\n",
	"base.gammaDeltaRatio": "\nbase.gammaDeltaRatio( z, delta )\n    Computes the ratio of two gamma functions.\n\n    The ratio is defined as: Γ(z) / Γ(z+Δ).\n\n    Parameters\n    ----------\n    z: number\n        First gamma parameter.\n\n    delta: number\n        Difference.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammaDeltaRatio( 2.0, 3.0 )\n    ~0.042\n    > y = base.gammaDeltaRatio( 4.0, 0.5 )\n    2.0\n    > y = base.gammaDeltaRatio( 100.0, 0.0 )\n    1.0\n    > y = base.gammaDeltaRatio( NaN, 3.0 )\n    NaN\n    > y = base.gammaDeltaRatio( 5.0, NaN )\n    NaN\n    > y = base.gammaDeltaRatio( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma\n",
	"base.gammainc": "\nbase.gammainc( x, s[, regularized[, upper]] )\n    Computes the regularized incomplete gamma function.\n\n    The `regularized` and `upper` parameters specify whether to evaluate the\n    non-regularized and/or upper incomplete gamma functions, respectively.\n\n    If provided `x < 0` or `s <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    s: number\n        Second function parameter.\n\n    regularized: boolean (optional)\n        Boolean indicating whether the function should evaluate the regularized\n        or non-regularized incomplete gamma function. Default: `true`.\n\n    upper: boolean (optional)\n        Boolean indicating whether the function should return the upper tail of\n        the incomplete gamma function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammainc( 6.0, 2.0 )\n    ~0.9826\n    > y = base.gammainc( 1.0, 2.0, true, true )\n    ~0.7358\n    > y = base.gammainc( 7.0, 5.0 )\n    ~0.8270\n    > y = base.gammainc( 7.0, 5.0, false )\n    ~19.8482\n    > y = base.gammainc( NaN, 2.0 )\n    NaN\n    > y = base.gammainc( 6.0, NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gamma1pm1, base.gammaincinv, base.gammaln\n",
	"base.gammaincinv": "\nbase.gammaincinv( p, a[, upper] )\n    Computes the inverse of the lower incomplete gamma function.\n\n    In contrast to a more commonly used definition, the first argument is the\n    probability `p` and the second argument is the scale factor `a`.\n\n    By default, the function inverts the lower regularized incomplete gamma\n    function, `P(x,a)`. To invert the upper function `Q(x,a)`, set the `upper`\n    argument to `true`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Probability.\n\n    a: number\n        Scale parameter.\n\n    upper: boolean (optional)\n        Boolean indicating if the function should invert the upper tail of the\n        incomplete gamma function; i.e., compute `xr` such that `Q(a,xr) = p`.\n        Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammaincinv( 0.5, 2.0 )\n    ~1.678\n    > y = base.gammaincinv( 0.1, 10.0 )\n    ~6.221\n    > y = base.gammaincinv( 0.75, 3.0 )\n    ~3.92\n    > y = base.gammaincinv( 0.75, 3.0, true )\n    ~1.727\n    > y = base.gammaincinv( 0.75, NaN )\n    NaN\n    > y = base.gammaincinv( NaN, 3.0 )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gamma1pm1, base.gammainc, base.gammaln\n",
	"base.gammaLanczosSum": "\nbase.gammaLanczosSum( x )\n    Calculates the Lanczos sum for the approximation of the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Lanczos sum.\n\n    Examples\n    --------\n    > var y = base.gammaLanczosSum( 4.0 )\n    ~950.366\n    > y = base.gammaLanczosSum( -1.5 )\n    ~1373366.245\n    > y = base.gammaLanczosSum( -0.5 )\n    ~-699841.735\n    > y = base.gammaLanczosSum( 0.5 )\n    ~96074.186\n    > y = base.gammaLanczosSum( 0.0 )\n    infinity\n    > y = base.gammaLanczosSum( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammaLanczosSumExpGScaled\n",
	"base.gammaLanczosSumExpGScaled": "\nbase.gammaLanczosSumExpGScaled( x )\n    Calculates the scaled Lanczos sum for the approximation of the gamma\n    function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Scaled Lanczos sum.\n\n    Examples\n    --------\n    > var y = base.gammaLanczosSumExpGScaled( 4.0 )\n    ~0.018\n    > y = base.gammaLanczosSumExpGScaled( -1.5 )\n    ~25.337\n    > y = base.gammaLanczosSumExpGScaled( -0.5 )\n    ~-12.911\n    > y = base.gammaLanczosSumExpGScaled( 0.5 )\n    ~1.772\n    > y = base.gammaLanczosSumExpGScaled( 0.0 )\n    infinity\n    > y = base.gammaLanczosSumExpGScaled( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammaLanczosSum\n",
	"base.gammaln": "\nbase.gammaln( x )\n    Evaluates the natural logarithm of the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Natural logarithm of the gamma function.\n\n    Examples\n    --------\n    > var y = base.gammaln( 1.0 )\n    0.0\n    > y = base.gammaln( 2.0 )\n    0.0\n    > y = base.gammaln( 4.0 )\n    ~1.792\n    > y = base.gammaln( -0.5 )\n    ~1.266\n    > y = base.gammaln( 0.5 )\n    ~0.572\n    > y = base.gammaln( 0.0 )\n    infinity\n    > y = base.gammaln( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammainc, base.gammaincinv\n",
	"base.gcd": "\nbase.gcd( a, b )\n    Computes the greatest common divisor (gcd).\n\n    If both `a` and `b` are `0`, the function returns `0`.\n\n    Both `a` and `b` must have integer values; otherwise, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        First integer.\n\n    b: integer\n        Second integer.\n\n    Returns\n    -------\n    out: integer\n        Greatest common divisor.\n\n    Examples\n    --------\n    > var v = base.gcd( 48, 18 )\n    6\n\n    See Also\n    --------\n    base.lcm\n",
	"base.getHighWord": "\nbase.getHighWord( x )\n    Returns an unsigned 32-bit integer corresponding to the more significant 32\n    bits of a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: integer\n        Higher order word (unsigned 32-bit integer).\n\n    Examples\n    --------\n    > var w = base.getHighWord( 3.14e201 )\n    1774486211\n\n    See Also\n    --------\n    base.getLowWord, base.setHighWord\n",
	"base.getLowWord": "\nbase.getLowWord( x )\n    Returns an unsigned 32-bit integer corresponding to the less significant 32\n    bits of a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: integer\n        Lower order word (unsigned 32-bit integer).\n\n    Examples\n    --------\n    > var w = base.getLowWord( 3.14e201 )\n    2479577218\n\n    See Also\n    --------\n    base.getHighWord, base.setHighWord\n",
	"base.hacovercos": "\nbase.hacovercos( x )\n    Computes the half-value coversed cosine.\n\n    The half-value coversed cosine is defined as `(1 + sin(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Half-value coversed cosine (in radians).\n\n    Examples\n    --------\n    > var y = base.hacovercos( 3.14 )\n    ~0.5008\n    > y = base.hacovercos( -4.2 )\n    ~0.9358\n    > y = base.hacovercos( -4.6 )\n    ~0.9968\n    > y = base.hacovercos( 9.5 )\n    ~0.4624\n    > y = base.hacovercos( -0.0 )\n    0.5\n\n    See Also\n    --------\n    base.hacoversin, base.havercos\n",
	"base.hacoversin": "\nbase.hacoversin( x )\n    Computes the half-value coversed sine.\n\n    The half-value coversed sine is defined as `(1 - sin(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Half-value coversed sine (in radians).\n\n    Examples\n    --------\n    > var y = base.hacoversin( 3.14 )\n    ~0.4992\n    > y = base.hacoversin( -4.2 )\n    ~0.0642\n    > y = base.hacoversin( -4.6 )\n    ~0.0032\n    > y = base.hacoversin( 9.5 )\n    ~0.4624\n    > y = base.hacoversin( -0.0 )\n    0.5\n\n    See Also\n    --------\n    base.hacovercos, base.haversin\n",
	"base.havercos": "\nbase.havercos( x )\n    Computes the half-value versed cosine.\n\n    The half-value versed cosine is defined as `(1 + cos(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Half-value versed cosine (in radians).\n\n    Examples\n    --------\n    > var y = base.havercos( 3.14 )\n    ~0.0\n    > y = base.havercos( -4.2 )\n    ~0.2549\n    > y = base.havercos( -4.6 )\n    ~0.4439\n    > y = base.havercos( 9.5 )\n    ~0.0014\n    > y = base.havercos( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.haversin, base.vercos\n",
	"base.haversin": "\nbase.haversin( x )\n    Computes the half-value versed sine.\n\n    The half-value versed sine is defined as `(1 - cos(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Half-value versed sine (in radians).\n\n    Examples\n    --------\n    > var y = base.haversin( 3.14 )\n    ~1.0\n    > y = base.haversin( -4.2 )\n    ~0.7451\n    > y = base.haversin( -4.6 )\n    ~0.5561\n    > y = base.haversin( 9.5 )\n    ~0.9986\n    > y = base.haversin( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.havercos, base.versin\n",
	"base.heaviside": "\nbase.heaviside( x[, continuity] )\n    Evaluates the Heaviside function.\n\n    The `continuity` parameter may be one of the following:\n\n    - 'half-maximum': if `x == 0`, the function returns `0.5`.\n    - 'left-continuous': if `x == 0`, the function returns `0`.\n    - 'right-continuous': if `x == 0`, the function returns `1`.\n\n    By default, if `x == 0`, the function returns `NaN` (i.e., the function is\n    discontinuous).\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    continuity: string (optional)\n        Specifies how to handle `x == 0`. By default, if `x == 0`, the function\n        returns `NaN`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.heaviside( 3.14 )\n    1.0\n    > y = base.heaviside( -3.14 )\n    0.0\n    > y = base.heaviside( 0.0 )\n    NaN\n    > y = base.heaviside( 0.0, 'half-maximum' )\n    0.5\n    > y = base.heaviside( 0.0, 'left-continuous' )\n    0.0\n    > y = base.heaviside( 0.0, 'right-continuous' )\n    1.0\n\n    See Also\n    --------\n    base.ramp\n",
	"base.hypot": "\nbase.hypot( x, y )\n    Computes the hypotenuse avoiding overflow and underflow.\n\n    If either argument is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = base.hypot( -5.0, 12.0 )\n    13.0\n    > h = base.hypot( NaN, 12.0 )\n    NaN\n    > h = base.hypot( -0.0, -0.0 )\n    0.0\n\n",
	"base.int32ToUint32": "\nbase.int32ToUint32( x )\n    Converts a signed 32-bit integer to an unsigned 32-bit integer.\n\n    Parameters\n    ----------\n    x: integer\n        Signed 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.int32ToUint32( base.float64ToInt32( -32 ) )\n    4294967264\n    > y = base.int32ToUint32( base.float64ToInt32( 3 ) )\n    3\n\n    See Also\n    --------\n    base.uint32ToInt32\n",
	"base.inv": "\nbase.inv( x )\n    Computes the multiplicative inverse of `x`.\n\n    The multiplicative inverse is defined as `1/x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Multiplicative inverse.\n\n    Examples\n    --------\n    > var y = base.inv( -1.0 )\n    -1.0\n    > y = base.inv( 2.0 )\n    0.5\n    > y = base.inv( 0.0 )\n    infinity\n    > y = base.inv( -0.0 )\n    -infinity\n    > y = base.inv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.pow\n",
	"base.isEven": "\nbase.isEven( x )\n    Tests if a finite numeric value is an even number.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an even number.\n\n    Examples\n    --------\n    > var bool = base.isEven( 5.0 )\n    false\n    > bool = base.isEven( -2.0 )\n    true\n    > bool = base.isEven( 0.0 )\n    true\n    > bool = base.isEven( NaN )\n    false\n\n    See Also\n    --------\n    base.isOdd\n",
	"base.isEvenInt32": "\nbase.isEvenInt32( x )\n    Tests if a 32-bit integer is even.\n\n    Parameters\n    ----------\n    x: integer\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an even number.\n\n    Examples\n    --------\n    > var bool = base.isEvenInt32( 5 )\n    false\n    > bool = base.isEvenInt32( -2 )\n    true\n    > bool = base.isEvenInt32( 0 )\n    true\n\n    See Also\n    --------\n    base.isEven, base.isOddInt32\n",
	"base.isFinite": "\nbase.isFinite( x )\n    Tests if a numeric value is finite.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is finite.\n\n    Examples\n    --------\n    > var bool = base.isFinite( 5.0 )\n    true\n    > bool = base.isFinite( -2.0e64 )\n    true\n    > bool = base.isFinite( PINF )\n    false\n    > bool = base.isFinite( NINF )\n    false\n\n    See Also\n    --------\n    base.isInfinite\n",
	"base.isInfinite": "\nbase.isInfinite( x )\n    Tests if a numeric value is infinite.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is infinite.\n\n    Examples\n    --------\n    > var bool = base.isInfinite( PINF )\n    true\n    > bool = base.isInfinite( NINF )\n    true\n    > bool = base.isInfinite( 5.0 )\n    false\n    > bool = base.isInfinite( NaN )\n    false\n\n    See Also\n    --------\n    base.isFinite\n",
	"base.isInteger": "\nbase.isInteger( x )\n    Tests if a finite double-precision floating-point number is an integer.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an integer.\n\n    Examples\n    --------\n    > var bool = base.isInteger( 1.0 )\n    true\n    > bool = base.isInteger( 3.14 )\n    false\n\n",
	"base.isnan": "\nbase.isnan( x )\n     Tests if a numeric value is `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is `NaN`.\n\n    Examples\n    --------\n    > var bool = base.isnan( NaN )\n    true\n    > bool = base.isnan( 7.0 )\n    false\n\n",
	"base.isNegativeInteger": "\nbase.isNegativeInteger( x )\n    Tests if a finite double-precision floating-point number is a negative\n    integer.\n\n    The function assumes a finite number. If provided negative infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a negative integer.\n\n    Examples\n    --------\n    > var bool = base.isNegativeInteger( -1.0 )\n    true\n    > bool = base.isNegativeInteger( 0.0 )\n    false\n    > bool = base.isNegativeInteger( 10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNonNegativeInteger, base.isNonPositiveInteger, base.isPositiveInteger\n",
	"base.isNegativeZero": "\nbase.isNegativeZero( x )\n    Tests if a numeric value is negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is negative zero.\n\n    Examples\n    --------\n    > var bool = base.isNegativeZero( -0.0 )\n    true\n    > bool = base.isNegativeZero( 0.0 )\n    false\n\n    See Also\n    --------\n    base.isPositiveZero\n",
	"base.isNonNegativeInteger": "\nbase.isNonNegativeInteger( x )\n    Tests if a finite double-precision floating-point number is a nonnegative\n    integer.\n\n    The function assumes a finite number. If provided positive infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    The function does not distinguish between positive and negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a nonnegative integer.\n\n    Examples\n    --------\n    > var bool = base.isNonNegativeInteger( 1.0 )\n    true\n    > bool = base.isNonNegativeInteger( 0.0 )\n    true\n    > bool = base.isNonNegativeInteger( -10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonPositiveInteger, base.isPositiveInteger\n",
	"base.isNonPositiveInteger": "\nbase.isNonPositiveInteger( x )\n    Tests if a finite double-precision floating-point number is a nonpositive\n    integer.\n\n    The function assumes a finite number. If provided negative infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    The function does not distinguish between positive and negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a nonpositive integer.\n\n    Examples\n    --------\n    > var bool = base.isNonPositiveInteger( -1.0 )\n    true\n    > bool = base.isNonPositiveInteger( 0.0 )\n    true\n    > bool = base.isNonPositiveInteger( 10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonNegativeInteger, base.isPositiveInteger\n",
	"base.isOdd": "\nbase.isOdd( x )\n    Tests if a finite numeric value is an odd number.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an odd number.\n\n    Examples\n    --------\n    > var bool = base.isOdd( 5.0 )\n    true\n    > bool = base.isOdd( -2.0 )\n    false\n    > bool = base.isOdd( 0.0 )\n    false\n    > bool = base.isOdd( NaN )\n    false\n\n    See Also\n    --------\n    base.isEven\n",
	"base.isOddInt32": "\nbase.isOddInt32( x )\n    Tests if a 32-bit integer is odd.\n\n    Parameters\n    ----------\n    x: integer\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an odd number.\n\n    Examples\n    --------\n    > var bool = base.isOddInt32( 5 )\n    true\n    > bool = base.isOddInt32( -2 )\n    false\n    > bool = base.isOddInt32( 0 )\n    false\n\n    See Also\n    --------\n    base.isEvenInt32, base.isOdd\n",
	"base.isPositiveInteger": "\nbase.isPositiveInteger( x )\n    Tests if a finite double-precision floating-point number is a positive\n    integer.\n\n    The function assumes a finite number. If provided positive infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a positive integer.\n\n    Examples\n    --------\n    > var bool = base.isPositiveInteger( 1.0 )\n    true\n    > bool = base.isPositiveInteger( 0.0 )\n    false\n    > bool = base.isPositiveInteger( 10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonNegativeInteger, base.isNonPositiveInteger\n",
	"base.isPositiveZero": "\nbase.isPositiveZero( x )\n    Tests if a numeric value is positive zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is positive zero.\n\n    Examples\n    --------\n    > var bool = base.isPositiveZero( 0.0 )\n    true\n    > bool = base.isPositiveZero( -0.0 )\n    false\n\n    See Also\n    --------\n    base.isNegativeZero\n",
	"base.isPow2Uint32": "\nbase.isPow2Uint32( x )\n    Tests whether an unsigned integer is a power of 2.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned integer.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a power of 2.\n\n    Examples\n    --------\n    > var bool = base.isPow2Uint32( 2 )\n    true\n    > bool = base.isPow2Uint32( 5 )\n    false\n\n",
	"base.isProbability": "\nbase.isProbability( x )\n    Tests if a numeric value is a probability.\n\n    A probability is defined as a numeric value on the closed interval `[0,1]`.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a probability.\n\n    Examples\n    --------\n    > var bool = base.isProbability( 0.5 )\n    true\n    > bool = base.isProbability( 3.14 )\n    false\n    > bool = base.isProbability( NaN )\n    false\n\n",
	"base.isSafeInteger": "\nbase.isSafeInteger( x )\n    Tests if a finite double-precision floating-point number is a safe integer.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a safe integer.\n\n    Examples\n    --------\n    > var bool = base.isSafeInteger( 1.0 )\n    true\n    > bool = base.isSafeInteger( 2.0e200 )\n    false\n    > bool = base.isSafeInteger( 3.14 )\n    false\n\n",
	"base.kroneckerDelta": "\nbase.kroneckerDelta( i, j )\n    Evaluates the Kronecker delta.\n\n    If `i == j`, the function returns `1`; otherwise, the function returns zero.\n\n    Parameters\n    ----------\n    i: number\n        Input value.\n\n    j: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.kroneckerDelta( 3.14, 0.0 )\n    0.0\n    > y = base.kroneckerDelta( 3.14, 3.14 )\n    1.0\n\n    See Also\n    --------\n    base.diracDelta\n",
	"base.lcm": "\nbase.lcm( a, b )\n    Computes the least common multiple (lcm).\n\n    If either `a` or `b` is `0`, the function returns `0`.\n\n    Both `a` and `b` must have integer values; otherwise, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        First integer.\n\n    b: integer\n        Second integer.\n\n    Returns\n    -------\n    out: integer\n        Least common multiple.\n\n    Examples\n    --------\n    > var v = base.lcm( 21, 6 )\n    42\n\n    See Also\n    --------\n    base.gcd\n",
	"base.ldexp": "\nbase.ldexp( frac, exp )\n    Multiplies a double-precision floating-point number by an integer power of\n    two; i.e., `x = frac * 2^exp`.\n\n    If `frac` equals positive or negative `zero`, `NaN`, or positive or negative\n    `infinity`, the function returns a value equal to `frac`.\n\n    Parameters\n    ----------\n    frac: number\n        Fraction.\n\n    exp: number\n        Exponent.\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number equal to `frac * 2^exp`.\n\n    Examples\n    --------\n    > var x = base.ldexp( 0.5, 3 )\n    4.0\n    > x = base.ldexp( 4.0, -2 )\n    1.0\n    > x = base.ldexp( 0.0, 20 )\n    0.0\n    > x = base.ldexp( -0.0, 39 )\n    -0.0\n    > x = base.ldexp( NaN, -101 )\n    NaN\n    > x = base.ldexp( PINF, 11 )\n    infinity\n    > x = base.ldexp( NINF, -118 )\n    -infinity\n\n    See Also\n    --------\n    base.frexp\n",
	"base.ln": "\nbase.ln( x )\n    Evaluates the natural logarithm.\n\n    For negative numbers, the natural logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.ln( 4.0 )\n    ~1.386\n    > y = base.ln( 0.0 )\n    -infinity\n    > y = base.ln( PINF )\n    infinity\n    > y = base.ln( NaN )\n    NaN\n    > y = base.ln( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.log10, base.log1p, base.log2\n",
	"base.log": "\nbase.log( x, b )\n    Computes the base `b` logarithm of `x`.\n\n    For negative `b` or `x`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    b: number\n        Base.\n\n    Returns\n    -------\n    y: number\n        Logarithm (base `b`).\n\n    Examples\n    --------\n    > var y = base.log( 100.0, 10.0 )\n    2.0\n    > y = base.log( 16.0, 2.0 )\n    4.0\n    > y = base.log( 5.0, 1.0 )\n    infinity\n    > y = base.log( NaN, 2.0 )\n    NaN\n    > y = base.log( 1.0, NaN )\n    NaN\n    > y = base.log( -4.0, 2.0 )\n    NaN\n    > y = base.log( 4.0, -2.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.ln, base.log10, base.log1p, base.log2\n",
	"base.log10": "\nbase.log10( x )\n    Evaluates the common logarithm (base 10).\n\n    For negative numbers, the common logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log10( 100.0 )\n    2.0\n    > y = base.log10( 8.0 )\n    ~0.903\n    > y = base.log10( 0.0 )\n    -infinity\n    > y = base.log10( PINF )\n    infinity\n    > y = base.log10( NaN )\n    NaN\n    > y = base.log10( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp10, base.ln, base.log\n",
	"base.log1p": "\nbase.log1p( x )\n    Evaluates the natural logarithm of `1+x`.\n\n    For `x < -1`, the function returns `NaN`, as the natural logarithm is not\n    defined for negative numbers.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log1p( 4.0 )\n    ~1.609\n    > y = base.log1p( -1.0 )\n    -infinity\n    > y = base.log1p( 0.0 )\n    0.0\n    > y = base.log1p( -0.0 )\n    -0.0\n    > y = base.log1p( -2.0 )\n    NaN\n    > y = base.log1p( NaN )\n    NaN\n\n    See Also\n    --------\n    base.ln, base.log\n",
	"base.log2": "\nbase.log2( x )\n    Evaluates the binary logarithm (base two).\n\n    For negative numbers, the binary logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log2( 4.0 )\n    2.0\n    > y = base.log2( 8.0 )\n    3.0\n    > y = base.log2( 0.0 )\n    -infinity\n    > y = base.log2( PINF )\n    infinity\n    > y = base.log2( NaN )\n    NaN\n    > y = base.log2( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp2, base.ln, base.log\n",
	"base.logit": "\nbase.logit( p )\n    Evaluates the logit function.\n\n    Let `p` be the probability of some event. The logit function is defined as\n    the logarithm of the odds `p / (1-p)`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.logit( 0.2 )\n    ~-1.386\n    > y = base.logit( 0.9 )\n    ~2.197\n    > y = base.logit( -4.0 )\n    NaN\n    > y = base.logit( 1.5 )\n    NaN\n    > y = base.logit( NaN )\n    NaN\n\n",
	"base.lucas": "\nbase.lucas( n )\n    Computes the nth Lucas number.\n\n    Lucas numbers follow the recurrence relation\n\n      L_n = L_{n-1} + L_{n-2}\n\n    with seed values L_0 = 2 and L_1 = 1.\n\n    If `n` is greater than `76`, the function returns `NaN`, as larger Lucas\n    numbers cannot be accurately represented due to limitations of double-\n    precision floating-point format.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        Lucas number.\n\n    Examples\n    --------\n    > var y = base.lucas( 0 )\n    2\n    > y = base.lucas( 1 )\n    1\n    > y = base.lucas( 2 )\n    3\n    > y = base.lucas( 3 )\n    4\n    > y = base.lucas( 4 )\n    7\n    > y = base.lucas( 77 )\n    NaN\n    > y = base.lucas( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negalucas\n",
	"base.lucaspoly": "\nbase.lucaspoly( n, x )\n    Evaluates a Lucas polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Lucas polynomial to evaluate.\n\n    x: number\n        Value at which to evaluate the Lucas polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated Lucas polynomial.\n\n    Examples\n    --------\n    // 2^5 + 5*2^3 + 5*2\n    > var v = base.lucaspoly( 5, 2.0 )\n    82.0\n\n\nbase.lucaspoly.factory( n )\n    Returns a function for evaluating a Lucas polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Lucas polynomial to evaluate.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a Lucas polynomial.\n\n    Examples\n    --------\n    > var polyval = base.lucaspoly.factory( 5 );\n\n    // 1^5 + 5*1^2 + 5\n    > var v = polyval( 1.0 )\n    11.0\n\n    // 2^5 + 5*2^3 + 5*2\n    > v = polyval( 2.0 )\n    82.0\n\n    See Also\n    --------\n    base.evalpoly, base.fibpoly\n",
	"base.max": "\nbase.max( [x[, y[, ...args]]] )\n    Returns the maximum value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), negative infinity is the\n    least upper bound. Similar to zero being the identity element for the sum of\n    an empty set and to one being the identity element for the product of an\n    empty set, negative infinity is the identity element for the maximum, and\n    thus, if not provided any arguments, the function returns `-infinity`.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var v = base.max( 3.14, 4.2 )\n    4.2\n    > v = base.max( 5.9, 3.14, 4.2 )\n    5.9\n    > v = base.max( 3.14, NaN )\n    NaN\n    > v = base.max( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.maxabs, base.min\n",
	"base.maxabs": "\nbase.maxabs( [x[, y[, ...args]]] )\n    Returns the maximum absolute value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), negative infinity is the\n    least upper bound. Similar to zero being the identity element for the sum of\n    an empty set and to one being the identity element for the product of an\n    empty set, negative infinity is the identity element for the maximum, and\n    thus, if not provided any arguments, the function returns `+infinity` (i.e.,\n    the absolute value of `-infinity`).\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Maximum absolute value.\n\n    Examples\n    --------\n    > var v = base.maxabs( 3.14, -4.2 )\n    4.2\n    > v = base.maxabs( 5.9, 3.14, 4.2 )\n    5.9\n    > v = base.maxabs( 3.14, NaN )\n    NaN\n    > v = base.maxabs( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.max, base.minabs\n",
	"base.min": "\nbase.min( [x[, y[, ...args]]] )\n    Returns the minimum value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), positive infinity is the\n    greatest lower bound. Similar to zero being the identity element for the sum\n    of an empty set and to one being the identity element for the product of an\n    empty set, positive infinity is the identity element for the minimum, and\n    thus, if not provided any arguments, the function returns `+infinity`.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var v = base.min( 3.14, 4.2 )\n    3.14\n    > v = base.min( 5.9, 3.14, 4.2 )\n    3.14\n    > v = base.min( 3.14, NaN )\n    NaN\n    > v = base.min( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.max, base.minabs\n",
	"base.minabs": "\nbase.minabs( [x[, y[, ...args]]] )\n    Returns the minimum absolute value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), positive infinity is the\n    greatest upper bound. Similar to zero being the identity element for the sum\n    of an empty set and to one being the identity element for the product of an\n    empty set, positive infinity is the identity element for the minimum, and\n    thus, if not provided any arguments, the function returns `+infinity`.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Minimum absolute value.\n\n    Examples\n    --------\n    > var v = base.minabs( 3.14, -4.2 )\n    3.14\n    > v = base.minabs( 5.9, 3.14, 4.2 )\n    3.14\n    > v = base.minabs( 3.14, NaN )\n    NaN\n    > v = base.minabs( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.maxabs, base.min\n",
	"base.modf": "\nbase.modf( x )\n    Decomposes a double-precision floating-point number into integral and\n    fractional parts, each having the same type and sign as the input value.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    parts: Array<double>\n        Array containing integral and fractional parts.\n\n    Examples\n    --------\n    > var parts = base.modf( 3.14 )\n    [ 3.0, 0.14000000000000012 ]\n    > parts = base.modf( 3.14 )\n    [ 3.0, 0.14000000000000012 ]\n    > parts = base.modf( +0.0 )\n    [ +0.0, +0.0 ]\n    > parts = base.modf( -0.0 )\n    [ -0.0, -0.0 ]\n    > parts = base.modf( PINF )\n    [ infinity, +0.0 ]\n    > parts = base.modf( NINF )\n    [ -infinity, -0.0 ]\n    > parts = base.modf( NaN )\n    [ NaN, NaN ]\n\n",
	"base.negafibonacci": "\nbase.negafibonacci( n )\n    Computes the nth negaFibonacci number.\n\n    The negaFibonacci numbers follow the recurrence relation\n\n      F_{n-2} = F_{n} - F_{n-1}\n\n    with seed values F_0 = 0 and F_{-1} = 1.\n\n    If `|n|` is greater than `78`, the function returns `NaN` as larger\n    negaFibonacci numbers cannot be accurately represented due to limitations of\n    double-precision floating-point format.\n\n    If not provided a non-positive integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        NegaFibonacci number.\n\n    Examples\n    --------\n    > var y = base.negafibonacci( 0 )\n    0\n    > y = base.negafibonacci( -1 )\n    1\n    > y = base.negafibonacci( -2 )\n    -1\n    > y = base.negafibonacci( -3 )\n    2\n    > y = base.negafibonacci( -4 )\n    -3\n    > y = base.negafibonacci( -79 )\n    NaN\n    > y = base.negafibonacci( -80 )\n    NaN\n    > y = base.negafibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negalucas\n",
	"base.negalucas": "\nbase.negalucas( n )\n    Computes the nth negaLucas number.\n\n    The negaLucas numbers follow the recurrence relation\n\n      L_{n-2} = L_{n} - L_{n-1}\n\n    with seed values L_0 = 2 and L_{-1} = -1.\n\n    If `|n|` is greater than `76`, the function returns `NaN` as larger\n    negaLucas numbers cannot be accurately represented due to limitations of\n    double-precision floating-point format.\n\n    If not provided a non-positive integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        NegaLucas number.\n\n    Examples\n    --------\n    > var y = base.negalucas( 0 )\n    2\n    > y = base.negalucas( -1 )\n    -1\n    > y = base.negalucas( -2 )\n    3\n    > y = base.negalucas( -3 )\n    -4\n    > y = base.negalucas( -4 )\n    7\n    > y = base.negalucas( -77 )\n    NaN\n    > y = base.negalucas( -78 )\n    NaN\n    > y = base.negalucas( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.lucas, base.negafibonacci\n",
	"base.nonfibonacci": "\nbase.nonfibonacci( n )\n    Computes the nth non-Fibonacci number.\n\n    If not provided a non-negative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Non-Fibonacci number.\n\n    Examples\n    --------\n    > var v = base.nonfibonacci( 1 )\n    4\n    > v = base.nonfibonacci( 2 )\n    6\n    > v = base.nonfibonacci( 3 )\n    7\n    > v = base.nonfibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci\n",
	"base.normalize": "\nbase.normalize( x )\n    Returns a normal number and exponent satisfying `x = y * 2^exp` as an array.\n\n    The first element of the returned array corresponds to `y` and the second to\n    `exp`.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: Array<double>\n        A two-element array containing `y` and `exp`.\n\n    Examples\n    --------\n    > var out = base.normalize( 3.14e-319 );\n    [ 1.4141234400356668e-303, -52 ]\n    > var y = out[ 0 ];\n    > var exponent = out[ 1 ];\n    > var bool = ( y*base.pow(2.0, exponent) === 3.14e-319 )\n    true\n\n    // Special cases:\n    > out = base.normalize( 0.0 )\n    [ 0.0, 0 ];\n    > out = base.normalize( PINF )\n    [ Infinity, 0 ]\n    > out = base.normalize( NINF )\n    [ -Infinity, 0 ]\n    > out = base.normalize( NaN )\n    [ NaN, 0 ]\n\n    See Also\n    --------\n    base.normalizef\n",
	"base.normalizef": "\nbase.normalizef( x )\n    Returns a normal number `y` and exponent `exp` satisfying `x = y * 2^exp` as\n    an array.\n\n    The first element of the returned array corresponds to `y` and the second to\n    `exp`.\n\n    While the function accepts higher precision floating-point numbers, beware\n    that providing such numbers can be a source of subtle bugs as the relation\n    `x = y * 2^exp` may not hold.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: Array<double>\n        A two-element array containing `y` and `exp`.\n\n    Examples\n    --------\n    > var out = base.normalizef( base.float64ToFloat32( 1.401e-45 ) )\n    [ 1.1754943508222875e-38, -23 ]\n    > var y = out[ 0 ];\n    > var exp = out[ 1 ];\n    > var bool = ( y*base.pow(2,exp) === base.float64ToFloat32(1.401e-45) )\n    true\n\n    // Special cases:\n    > out = base.normalizef( FLOAT32_PINF )\n    [ Infinity, 0 ]\n    > out = base.normalizef( FLOAT32_NINF )\n    [ -Infinity, 0 ]\n    > out = base.normalizef( NaN )\n    [ NaN, 0 ]\n\n    See Also\n    --------\n    base.normalize\n",
	"base.pdiff": "\nbase.pdiff( x )\n    Returns the positive difference between `x` and `y` if `x > y`; otherwise,\n    returns `0`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Positive difference.\n\n    Examples\n    --------\n    > var v = base.pdiff( 5.9, 3.14 )\n    2.76\n    > v = base.pdiff( 3.14, 4.2 )\n    0.0\n    > v = base.pdiff( 3.14, NaN )\n    NaN\n    > v = base.pdiff( -0.0, +0.0 )\n    +0.0\n\n",
	"base.pow": "\nbase.pow( b, x )\n    Evaluates the exponential function `bˣ`.\n\n    Parameters\n    ----------\n    b: number\n        Base.\n\n    x: number\n        Exponent.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.pow( 2.0, 3.0 )\n    8.0\n    > y = base.pow( 4.0, 0.5 )\n    2.0\n    > y = base.pow( 100.0, 0.0 )\n    1.0\n    > y = base.pow( PI, 5.0 )\n    ~306.0197\n    > y = base.pow( PI, -0.2 )\n    ~0.7954\n    > y = base.pow( NaN, 3.0 )\n    NaN\n    > y = base.pow( 5.0, NaN )\n    NaN\n    > y = base.pow( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.powm1\n",
	"base.powm1": "\nbase.powm1( b, x )\n    Evaluates `bˣ - 1`.\n\n    When `b` is close to `1` and/or `x` is small, this function is more accurate\n    than naively computing `bˣ` and subtracting `1`.\n\n    Parameters\n    ----------\n    b: number\n        Base.\n\n    x: number\n        Exponent.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.powm1( 2.0, 3.0 )\n    7.0\n    > y = base.powm1( 4.0, 0.5 )\n    1.0\n    > y = base.powm1( 0.0, 100.0 )\n    -1.0\n    > y = base.powm1( 100.0, 0.0 )\n    0.0\n    > y = base.powm1( 0.0, 0.0 )\n    0.0\n    > y = base.powm1( PI, 5.0 )\n    ~305.0197\n    > y = base.powm1( NaN, 3.0 )\n    NaN\n    > y = base.powm1( 5.0, NaN )\n    NaN\n\n    See Also\n    --------\n    base.pow\n",
	"base.rad2deg": "\nbase.rad2deg( x )\n    Converts an angle from radians to degrees.\n\n    Parameters\n    ----------\n    x: number\n        Angle in radians.\n\n    Returns\n    -------\n    d: number\n        Angle in degrees.\n\n    Examples\n    --------\n    > var d = base.rad2deg( PI/2.0 )\n    90.0\n    > d = base.rad2deg( -PI/4.0 )\n    -45.0\n    > d = base.rad2deg( NaN )\n    NaN\n\n    // Due to finite precision, canonical values may not be returned:\n    > d = base.rad2deg( PI/6.0 )\n    29.999999999999996\n\n    See Also\n    --------\n    base.deg2rad\n",
	"base.ramp": "\nbase.ramp( x )\n    Evaluates the ramp function.\n\n    If `x >= 0`, the function returns `x`; otherwise, the function returns zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.ramp( 3.14 )\n    3.14\n    > y = base.ramp( -3.14 )\n    0.0\n\n    See Also\n    --------\n    base.heaviside\n",
	"base.random.arcsine": "\nbase.random.arcsine( a, b )\n    Returns a pseudorandom number drawn from an arcsine distribution.\n\n    If `a >= b`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.arcsine( 2.0, 5.0 )\n    <number>\n\n\nbase.random.arcsine.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an arcsine distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.arcsine.factory();\n    > var r = rand( 0.0, 1.0 )\n    <number>\n    > r = rand( -2.0, 2.0 )\n    <number>\n\n    // Provide `a` and `b`:\n    > rand = base.random.arcsine.factory( 0.0, 1.0 );\n    > r = rand()\n    <number>\n    > r = rand()\n    <number>\n\n\nbase.random.arcsine.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.arcsine.NAME\n    'arcsine'\n\n\nbase.random.arcsine.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.arcsine.PRNG;\n\n\nbase.random.arcsine.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.arcsine.SEED;\n\n    See Also\n    --------\n    base.random.beta\n",
	"base.random.beta": "\nbase.random.beta( α, β )\n    Returns a pseudorandom number drawn from a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.beta( 2.0, 5.0 );\n\n\nbase.random.beta.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.beta.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.beta.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.beta.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.beta.NAME\n    'beta'\n\n\nbase.random.beta.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.beta.PRNG;\n\n\nbase.random.beta.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.beta.SEED;\n\n",
	"base.random.betaprime": "\nbase.random.betaprime( α, β )\n    Returns a pseudorandom number drawn from a beta prime distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.betaprime( 2.0, 5.0 );\n\n\nbase.random.betaprime.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta prime distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.betaprime.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.betaprime.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.betaprime.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.betaprime.NAME\n    'betaprime'\n\n\nbase.random.betaprime.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.betaprime.PRNG;\n\n\nbase.random.betaprime.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.betaprime.SEED;\n\n",
	"base.random.binomial": "\nbase.random.binomial( n, p )\n    Returns a pseudorandom number drawn from a binomial distribution.\n\n    If `n` is not a positive integer or `p` is not a probability, the function\n    returns `NaN`.\n\n    If `n` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.binomial( 20, 0.8 );\n\n\nbase.random.binomial.factory( [n, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a binomial distribution.\n\n    If provided `n` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `n` and `p`, the returned PRNG requires that both `n` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.binomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `n` and `p`:\n    > rand = base.random.binomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.binomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.binomial.NAME\n    'binomial'\n\n\nbase.random.binomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.binomial.PRNG;\n\n\nbase.random.binomial.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.binomial.SEED;\n\n",
	"base.random.boxMuller": "\nbase.random.boxMuller()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.boxMuller();\n\n\nbase.random.boxMuller.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.boxMuller.factory();\n    > r = rand();\n    > r = rand();\n\n\nbase.random.boxMuller.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.boxMuller.NAME\n    'box-muller'\n\n\nbase.random.boxMuller.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.boxMuller.PRNG;\n\n\nbase.random.boxMuller.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.boxMuller.SEED;\n\n",
	"base.random.cauchy": "\nbase.random.cauchy( x0, Ɣ )\n    Returns a pseudorandom number drawn from a Cauchy distribution.\n\n    If `x0` or `Ɣ` is `NaN` or `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.cauchy( 2.0, 5.0 );\n\n\nbase.random.cauchy.factory( [x0, Ɣ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Cauchy distribution.\n\n    If provided `x0` and `Ɣ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `x0` and `Ɣ`, the returned PRNG requires that both `x0` and\n    `Ɣ` be provided at each invocation.\n\n    Parameters\n    ----------\n    x0: number (optional)\n        Location parameter.\n\n    Ɣ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cauchy.factory();\n    > var r = rand( 0.0, 1.5 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `x0` and `Ɣ`:\n    > rand = base.random.cauchy.factory( 0.0, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.cauchy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.cauchy.NAME\n    'cauchy'\n\n\nbase.random.cauchy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cauchy.PRNG;\n\n\nbase.random.cauchy.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cauchy.SEED;\n\n",
	"base.random.chi": "\nbase.random.chi( k )\n    Returns a pseudorandom number drawn from a chi distribution.\n\n    If `k <= 0` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.chi( 2 );\n\n\nbase.random.chi.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chi.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chi.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.chi.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.chi.NAME\n    'chi'\n\n\nbase.random.chi.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chi.PRNG;\n\n\nbase.random.chi.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chi.SEED;\n\n",
	"base.random.chisquare": "\nbase.random.chisquare( k )\n    Returns a pseudorandom number drawn from a chi-square distribution.\n\n    If `k <= 0` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.chisquare( 2 );\n\n\nbase.random.chisquare.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi-square distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chisquare.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chisquare.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.chisquare.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.chisquare.NAME\n    'chisquare'\n\n\nbase.random.chisquare.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chisquare.PRNG;\n\n\nbase.random.chisquare.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chisquare.SEED;\n\n",
	"base.random.cosine": "\nbase.random.cosine( μ, s )\n    Returns a pseudorandom number drawn from a raised cosine distribution.\n\n    If `μ` or `s` is `NaN` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.cosine( 2.0, 5.0 );\n\n\nbase.random.cosine.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a raised cosine distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cosine.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.cosine.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.cosine.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.cosine.NAME\n    'cosine'\n\n\nbase.random.cosine.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cosine.PRNG;\n\n\nbase.random.cosine.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cosine.SEED;\n\n",
	"base.random.erlang": "\nbase.random.erlang( k, λ )\n    Returns a pseudorandom number drawn from an Erlang distribution.\n\n    If `k` is not a positive integer or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.erlang( 2, 5.0 );\n\n\nbase.random.erlang.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an Erlang distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both `k` and\n    `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: integer (optional)\n        Shape parameter.\n\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.erlang.factory();\n    > var r = rand( 2, 1.0 );\n    > r = rand( 4, 3.14 );\n\n    // Provide `k` and `λ`:\n    > rand = base.random.erlang.factory( 2, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.erlang.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.erlang.NAME\n    'erlang'\n\n\nbase.random.erlang.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.erlang.PRNG;\n\n\nbase.random.erlang.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.erlang.SEED;\n\n",
	"base.random.exponential": "\nbase.random.exponential( λ )\n    Returns a pseudorandom number drawn from an exponential distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.exponential( 7.9 );\n\n\nbase.random.exponential.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an exponential distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.exponential.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.exponential.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.exponential.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.exponential.NAME\n    'exponential'\n\n\nbase.random.exponential.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.exponential.PRNG;\n\n\nbase.random.exponential.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.exponential.SEED;\n\n",
	"base.random.f": "\nbase.random.f( d1, d2 )\n    Returns a pseudorandom number drawn from an F distribution.\n\n    If `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Degrees of freedom.\n\n    d2: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.f( 2.0, 5.0 );\n\n\nbase.random.f.factory( [d1, d2, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an F distribution.\n\n    If provided `d1` and `d2`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `d1` and `d2`, the returned PRNG requires that both `d1` and\n    `d2` be provided at each invocation.\n\n    Parameters\n    ----------\n    d1: number (optional)\n        Degrees of freedom.\n\n    d2: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.f.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.0, 3.14 );\n\n    // Provide `d1` and `d2`:\n    > rand = base.random.f.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.f.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.f.NAME\n    'f'\n\n\nbase.random.f.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.f.PRNG;\n\n\nbase.random.f.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.f.SEED;\n\n",
	"base.random.frechet": "\nbase.random.frechet( α, s, m )\n    Returns a pseudorandom number drawn from a Fréchet distribution.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    If either `α`, `s`, or `m` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.frechet( 2.0, 5.0, 3.33 );\n\n\nbase.random.frechet.factory( [α, s, m, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `α`, `s`, and `m`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `α`, `s`, and `m`, the returned PRNG requires that `α`, `s`,\n    and `m` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    m: number (optional)\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.frechet.factory();\n    > var r = rand( 1.0, 1.0, 0.5 );\n    > r = rand( 2.0, 2.0, 1.0 );\n\n    // Provide `α`, `s`, and `m`:\n    > rand = base.random.frechet.factory( 1.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.frechet.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.frechet.NAME\n    'frechet'\n\n\nbase.random.frechet.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.frechet.PRNG;\n\n\nbase.random.frechet.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.frechet.SEED;\n\n",
	"base.random.gamma": "\nbase.random.gamma( α, β )\n    Returns a pseudorandom number drawn from a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gamma( 2.0, 5.0 );\n\n\nbase.random.gamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.gamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.gamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.gamma.NAME\n    'gamma'\n\n\nbase.random.gamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gamma.PRNG;\n\n\nbase.random.gamma.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gamma.SEED;\n\n",
	"base.random.geometric": "\nbase.random.geometric( p )\n    Returns a pseudorandom number drawn from a geometric distribution.\n\n    If `p < 0` or `p > 1` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.geometric( 0.8 );\n\n\nbase.random.geometric.factory( [p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a geometric distribution.\n\n    If provided `p`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `p`, the returned PRNG requires that `p` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.geometric.factory();\n    > var r = rand( 0.3 );\n    > r = rand( 0.59 );\n\n    // Provide `λ`:\n    > rand = base.random.geometric.factory( 0.3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.geometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.geometric.NAME\n    'geometric'\n\n\nbase.random.geometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.geometric.PRNG;\n\n\nbase.random.geometric.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.geometric.SEED;\n\n",
	"base.random.gumbel": "\nbase.random.gumbel( μ, β )\n    Returns a pseudorandom number drawn from a Gumbel distribution.\n\n    If `μ` or `β` is `NaN` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gumbel( 2.0, 5.0 );\n\n\nbase.random.gumbel.factory( [μ, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Gumbel distribution.\n\n    If provided `μ` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `β`, the returned PRNG requires that both `μ` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gumbel.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `β`:\n    > rand = base.random.gumbel.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.gumbel.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.gumbel.NAME\n    'gumbel'\n\n\nbase.random.gumbel.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gumbel.PRNG;\n\n\nbase.random.gumbel.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gumbel.SEED;\n\n",
	"base.random.hypergeometric": "\nbase.random.hypergeometric( N, K, n )\n    Returns a pseudorandom number drawn from a hypergeometric distribution.\n\n    `N`, `K`, and `n` must all be nonnegative integers; otherwise, the function\n    returns `NaN`.\n\n    If `n > N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.hypergeometric( 20, 10, 7 );\n\n\nbase.random.hypergeometric.factory( [N, K, n, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a hypergeometric distribution.\n\n    If provided `N`, `K`, and `n`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `N`, `K`, and `n`, the returned PRNG requires that `N`, `K`,\n    and `n` be provided at each invocation.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size.\n\n    K: integer (optional)\n        Subpopulation size.\n\n    n: integer (optional)\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.hypergeometric.factory();\n    > var r = rand( 20, 10, 15 );\n    > r = rand( 20, 10, 7 );\n\n    // Provide `N`, `K`, and `n`:\n    > rand = base.random.hypergeometric.factory( 20, 10, 15 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.hypergeometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.hypergeometric.NAME\n    'hypergeometric'\n\n\nbase.random.hypergeometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.hypergeometric.PRNG;\n\n\nbase.random.hypergeometric.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.hypergeometric.SEED;\n\n",
	"base.random.improvedZiggurat": "\nbase.random.improvedZiggurat()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.improvedZiggurat();\n\n\nbase.random.improvedZiggurat.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.improvedZiggurat.factory();\n    > r = rand();\n    > r = rand();\n\n\nbase.random.improvedZiggurat.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.improvedZiggurat.NAME\n    'improved-ziggurat'\n\n\nbase.random.improvedZiggurat.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.improvedZiggurat.PRNG;\n\n\nbase.random.improvedZiggurat.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.improvedZiggurat.SEED;\n\n",
	"base.random.invgamma": "\nbase.random.invgamma( α, β )\n    Returns a pseudorandom number drawn from an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.invgamma( 2.0, 5.0 );\n\n\nbase.random.invgamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an inverse gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.invgamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.invgamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.invgamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.invgamma.NAME\n    'invgamma'\n\n\nbase.random.invgamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.invgamma.PRNG;\n\n\nbase.random.invgamma.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.invgamma.SEED;\n\n",
	"base.random.kumaraswamy": "\nbase.random.kumaraswamy( a, b )\n    Returns a pseudorandom number drawn from a Kumaraswamy's double bounded\n    distribution.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.kumaraswamy( 2.0, 5.0 );\n\n\nbase.random.kumaraswamy.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Kumaraswamy's double bounded distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        First shape parameter.\n\n    b: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.kumaraswamy.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.kumaraswamy.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.kumaraswamy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.kumaraswamy.NAME\n    'kumaraswamy'\n\n\nbase.random.kumaraswamy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.kumaraswamy.PRNG;\n\n\nbase.random.kumaraswamy.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.kumaraswamy.SEED;\n\n",
	"base.random.laplace": "\nbase.random.laplace( μ, b )\n    Returns a pseudorandom number drawn from a Laplace distribution.\n\n    If `μ` or `b` is `NaN` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.laplace( 2.0, 5.0 );\n\n\nbase.random.laplace.factory( [μ, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Laplace distribution.\n\n    If provided `μ` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `b`, the returned PRNG requires that both `μ` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    b: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.laplace.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.laplace.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.laplace.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.laplace.NAME\n    'laplace'\n\n\nbase.random.laplace.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.laplace.PRNG;\n\n\nbase.random.laplace.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.laplace.SEED;\n\n",
	"base.random.levy": "\nbase.random.levy( μ, c )\n    Returns a pseudorandom number drawn from a Lévy distribution.\n\n    If `μ` or `c` is `NaN` or `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.levy( 2.0, 5.0 );\n\n\nbase.random.levy.factory( [μ, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Lévy distribution.\n\n    If provided `μ` and `c`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `c`, the returned PRNG requires that both `μ` and\n    `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    c: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.levy.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.levy.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.levy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.levy.NAME\n    'levy'\n\n\nbase.random.levy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.levy.PRNG;\n\n\nbase.random.levy.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.levy.SEED;\n\n",
	"base.random.logistic": "\nbase.random.logistic( μ, s )\n    Returns a pseudorandom number drawn from a logistic distribution.\n\n    If `μ` or `s` is `NaN` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.logistic( 2.0, 5.0 );\n\n\nbase.random.logistic.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a logistic distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.logistic.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.logistic.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.logistic.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.logistic.NAME\n    'logistic'\n\n\nbase.random.logistic.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.logistic.PRNG;\n\n\nbase.random.logistic.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.logistic.SEED;\n\n",
	"base.random.lognormal": "\nbase.random.lognormal( μ, σ )\n    Returns a pseudorandom number drawn from a lognormal distribution.\n\n    If `μ` or `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.lognormal( 2.0, 5.0 );\n\n\nbase.random.lognormal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a lognormal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.lognormal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.lognormal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.lognormal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.lognormal.NAME\n    'lognormal'\n\n\nbase.random.lognormal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.lognormal.PRNG;\n\n\nbase.random.lognormal.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.lognormal.SEED;\n\n",
	"base.random.minstd": "\nbase.random.minstd()\n    Returns a pseudorandom integer on the interval `[1, 2147483646]`.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) based on Park and Miller.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. More\n    importantly, the \"randomness quality\" of the generator's output is lacking.\n    These defects make the generator unsuitable, for example, in Monte Carlo\n    simulations and in cryptographic applications.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd();\n\n\nbase.random.minstd.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd.normalized();\n\n\nbase.random.minstd.factory( [seed] )\n    Returns a linear congruential pseudorandom number generator (LCG).\n\n    Parameters\n    ----------\n    seed: integer (optional)\n        Pseudorandom number generator seed. Must be on the interval\n        `[1, 2147483646]`.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstd.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstd.factory( 1234 );\n    > r = rand()\n    20739838\n\n\nbase.random.minstd.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.minstd.NAME\n    'minstd'\n\n\nbase.random.minstd.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstd.SEED;\n\n",
	"base.random.minstdShuffle": "\nbase.random.minstdShuffle()\n    Returns a pseudorandom integer on the interval `[1, 2147483646]`.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) whose output is shuffled using the Bays-\n    Durham algorithm. The shuffle step considerably strengthens the \"randomness\n    quality\" of a simple LCG's output.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. In\n    general, this generator is unsuitable for Monte Carlo simulations and\n    cryptographic applications.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle();\n\n\nbase.random.minstdShuffle.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle.normalized();\n\n\nbase.random.minstdShuffle.factory( [seed] )\n    Returns a linear congruential pseudorandom number generator (LCG) whose\n    output is shuffled.\n\n    Parameters\n    ----------\n    seed: integer (optional)\n        Pseudorandom number generator seed. Must be on the interval\n        `[1, 2147483646]`.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstdShuffle.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstdShuffle.factory( 1234 );\n    > r = rand()\n    1421600654\n\n\nbase.random.minstdShuffle.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.minstdShuffle.NAME\n    'minstd-shuffle'\n\n\nbase.random.minstdShuffle.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstdShuffle.SEED;\n\n",
	"base.random.negativeBinomial": "\nbase.random.negativeBinomial( r, p )\n    Returns a pseudorandom number drawn from a negative binomial distribution.\n\n    If `p` is not in the interval `(0,1)`, the function returns `NaN`.\n\n    If `r` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.negativeBinomial( 20, 0.8 );\n\n\nbase.random.negativeBinomial.factory( [r, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a negative binomial distribution.\n\n    If provided `r` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `r` and `p`, the returned PRNG requires that both `r` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    r: integer (optional)\n        Number of successes until experiment is stopped.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.negativeBinomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `r` and `p`:\n    > rand = base.random.negativeBinomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.negativeBinomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.negativeBinomial.NAME\n    'negative-binomial'\n\n\nbase.random.negativeBinomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.negativeBinomial.PRNG;\n\n\nbase.random.negativeBinomial.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.negativeBinomial.SEED;\n\n",
	"base.random.normal": "\nbase.random.normal( μ, σ )\n    Returns a pseudorandom number drawn from a normal distribution.\n\n    If `μ` or `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.normal( 2.0, 5.0 );\n\n\nbase.random.normal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a normal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    σ: number (optional)\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.normal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.normal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.normal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.normal.NAME\n    'normal'\n\n\nbase.random.normal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.normal.PRNG;\n\n\nbase.random.normal.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.normal.SEED;\n\n",
	"base.random.pareto1": "\nbase.random.pareto1( α, β )\n    Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.pareto1( 2.0, 5.0 );\n\n\nbase.random.pareto1.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Pareto (Type I) distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.pareto1.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.pareto1.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.pareto1.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.pareto1.NAME\n    'pareto-type1'\n\n\nbase.random.pareto1.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.pareto1.PRNG;\n\n\nbase.random.pareto1.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.pareto1.SEED;\n\n",
	"base.random.poisson": "\nbase.random.poisson( λ )\n    Returns a pseudorandom number drawn from a Poisson distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.poisson( 7.9 );\n\n\nbase.random.poisson.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Poisson distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.poisson.factory();\n    > var r = rand( 4.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.poisson.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.poisson.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.poisson.NAME\n    'poisson'\n\n\nbase.random.poisson.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.poisson.PRNG;\n\n\nbase.random.poisson.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.poisson.SEED;\n\n",
	"base.random.randn": "\nbase.random.randn()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.randn();\n\n\nbase.random.randn.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG) that samples\n        from a standard normal distribution. Default: 'improved-ziggurat'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randn.factory();\n    > r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randn.factory({ 'name': 'box-muller' });\n    > r = rand();\n    > r = rand();\n\n\nbase.random.randn.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randn.NAME\n    'standard-normal'\n\n\nbase.random.randn.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randn.PRNG;\n\n\nbase.random.randn.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randn.SEED;\n\n",
	"base.random.randu": "\nbase.random.randu()\n    Returns a pseudorandom number drawn from a uniform distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number on the interval `[0,1)`.\n\n    Examples\n    --------\n    > var r = base.random.randu();\n\n\nbase.random.randu.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a uniform distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). Default:\n        'minstd-shuffle'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randu.factory();\n    > r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randu.factory({ 'name': 'minstd' });\n    > r = rand();\n    > r = rand();\n\n\nbase.random.randu.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randu.NAME\n    'uniform'\n\n\nbase.random.randu.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randu.PRNG;\n\n\nbase.random.randu.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randu.SEED;\n\n",
	"base.random.rayleigh": "\nbase.random.rayleigh( σ )\n    Returns a pseudorandom number drawn from a Rayleigh distribution.\n\n    If `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.rayleigh( 2.5 );\n\n\nbase.random.rayleigh.factory( [σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Rayleigh distribution.\n\n    If provided `σ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `σ`, the returned PRNG requires that `σ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.rayleigh.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 10.0 );\n\n    // Provide `σ`:\n    > rand = base.random.rayleigh.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.rayleigh.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.rayleigh.NAME\n    'rayleigh'\n\n\nbase.random.rayleigh.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.rayleigh.PRNG;\n\n\nbase.random.rayleigh.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.rayleigh.SEED;\n\n",
	"base.random.t": "\nbase.random.t( v )\n    Returns a pseudorandom number drawn from a Student's t distribution.\n\n    If `v <= 0` or `v` is `NaN`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.t( 2.0 );\n\n\nbase.random.t.factory( [v, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Student's t distribution.\n\n    If provided `v`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `v`, the returned PRNG requires that `v` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    v: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.t.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `v`:\n    > rand = base.random.t.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.t.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.t.NAME\n    't'\n\n\nbase.random.t.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.t.PRNG;\n\n\nbase.random.t.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.t.SEED;\n\n",
	"base.random.triangular": "\nbase.random.triangular( a, b, c )\n    Returns a pseudorandom number drawn from a triangular distribution.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.triangular( 2.0, 5.0, 3.33 );\n\n\nbase.random.triangular.factory( [a, b, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `a`, `b`, and `c`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `a`, `b`, and `c`, the returned PRNG requires that `a`, `b`,\n    and `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    c: number (optional)\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.triangular.factory();\n    > var r = rand( 0.0, 1.0, 0.5 );\n    > r = rand( -2.0, 2.0, 1.0 );\n\n    // Provide `a`, `b`, and `c`:\n    > rand = base.random.triangular.factory( 0.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.triangular.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.triangular.NAME\n    'triangular'\n\n\nbase.random.triangular.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.triangular.PRNG;\n\n\nbase.random.triangular.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.triangular.SEED;\n\n",
	"base.random.uniform": "\nbase.random.uniform( a, b )\n    Returns a pseudorandom number drawn from a continuous uniform distribution.\n\n    If `a >= b`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.uniform( 2.0, 5.0 );\n\n\nbase.random.uniform.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a continuous uniform distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.uniform.factory();\n    > var r = rand( 0.0, 1.0 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.uniform.factory( 0.0, 1.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.uniform.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.uniform.NAME\n    'uniform'\n\n\nbase.random.uniform.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.uniform.PRNG;\n\n\nbase.random.uniform.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.uniform.SEED;\n\n",
	"base.random.weibull": "\nbase.random.weibull( k, λ )\n    Returns a pseudorandom number drawn from a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If either `λ` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Scale parameter.\n\n    λ: number\n        Shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.weibull( 2.0, 5.0 );\n\n\nbase.random.weibull.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Weibull distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both\n    `k` and `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Scale parameter.\n\n    λ: number (optional)\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.weibull.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `λ` and `k`:\n    > rand = base.random.weibull.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.weibull.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.weibull.NAME\n    'weibull'\n\n\nbase.random.weibull.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.weibull.PRNG;\n\n\nbase.random.weibull.SEED\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.weibull.SEED;\n\n",
	"base.reldiff": "\nbase.reldiff( x, y[, scale] )\n    Computes the relative difference of two real numbers.\n\n    By default, the function scales the absolute difference by dividing the\n    absolute difference by the maximum absolute value of `x` and `y`. To scale\n    by a different function, specify a scale function name.\n\n    The following `scale` functions are supported:\n\n    - 'max-abs': maximum absolute value of `x` and `y` (default).\n    - 'max': maximum value of `x` and `y`.\n    - 'min-abs': minimum absolute value of `x` and `y`.\n    - 'min': minimum value of `x` and `y`.\n    - 'mean-abs': arithmetic mean of the absolute values of `x` and `y`.\n    - 'mean': arithmetic mean of `x` and `y`.\n    - 'x': `x` (*noncommutative*).\n    - 'y': `y` (*noncommutative*).\n\n    To use a custom scale function, provide a function which accepts two numeric\n    arguments `x` and `y`.\n\n    If the absolute difference of `x` and `y` is `0`, the relative difference is\n    always `0`.\n\n    If `|x| = |y| = infinity`, the function returns `NaN`.\n\n    If `|x| = |-y| = infinity`, the relative difference is `+infinity`.\n\n    If a `scale` function returns `0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    scale: string|Function\n        Scale function. Default: `'max-abs'`.\n\n    Returns\n    -------\n    out: number\n        Relative difference.\n\n    Examples\n    --------\n    > var d = base.reldiff( 2.0, 5.0 )\n    0.6\n    > d = base.reldiff( -1.0, 3.14 )\n    ~1.318\n    > d = base.reldiff( -2.0, 5.0, 'max-abs' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'max' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'min-abs' )\n    3.5\n    > d = base.reldiff( -2.0, 5.0, 'min' )\n    3.5\n    > d = base.reldiff( -2.0, 5.0, 'mean-abs' )\n    2.0\n    > d = base.reldiff( -2.0, 5.0, 'mean' )\n    ~4.67\n    > d = base.reldiff( -2.0, 5.0, 'x' )\n    3.5\n    > d = base.reldiff( 5.0, -2.0, 'x' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'y' )\n    1.4\n    > d = base.reldiff( 5.0, -2.0, 'y' )\n    3.5\n\n    // Custom scale function:\n    > function scale( x, y ) {\n    >     var s;\n    >\n    >     x = base.abs( x );\n    >     y = base.abs( y );\n    >\n    >     // Maximum absolute value:\n    >     s = (x < y ) ? y : x;\n    >\n    >     // Scale in units of epsilon:\n    >     return s * EPS;\n    > };\n    > d = base.reldiff( 12.15, 12.149999999999999, scale )\n    ~0.658\n\n    See Also\n    --------\n    base.absdiff, base.epsdiff\n",
	"base.rotl32": "\nbase.rotl32( x, shift )\n    Performs a bitwise rotation to the left.\n\n    If `shift = 0`, the function returns `x`.\n\n    If `shift >= 32`, the function only considers the five least significant\n    bits of `shift` (i.e., `shift % 32`).\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    shift: integer\n        Number of bits to shift.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var x = 2147483649;\n    > var bStr = base.toBinaryStringUint32( x )\n    '10000000000000000000000000000001'\n    > var y = base.rotl32( x, 10 )\n    1536\n    > bstr = base.toBinaryStringUint32( y )\n    '00000000000000000000011000000000'\n\n    See Also\n    --------\n    base.rotr32\n",
	"base.rotr32": "\nbase.rotr32( x, shift )\n    Performs a bitwise rotation to the right.\n\n    If `shift = 0`, the function returns `x`.\n\n    If `shift >= 32`, the function only considers the five least significant\n    bits of `shift` (i.e., `shift % 32`).\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    shift: integer\n        Number of bits to shift.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var x = 1;\n    > var bStr = base.toBinaryStringUint32( x )\n    '00000000000000000000000000000001'\n    > var y = base.rotr32( x, 10 )\n    4194304\n    > bstr = base.toBinaryStringUint32( y )\n    '00000000010000000000000000000000'\n\n    See Also\n    --------\n    base.rotl32\n",
	"base.risingFactorial": "\nbase.risingFactorial( x, n )\n    Computes the rising factorial of `x` and `n`.\n\n    If provided a non-integer for `n`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    n: integer\n        Second function parameter.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.risingFactorial( 0.9, 5 )\n    ~94.766\n    > v = base.risingFactorial( -9.0, 3 )\n    -504.0\n    > v = base.risingFactorial( 0.0, 2 )\n    0.0\n    > v = base.risingFactorial( 3.0, -2 )\n    0.5\n\n    See Also\n    --------\n    base.fallingFactorial\n",
	"base.round": "\nbase.round( x )\n    Rounds a numeric value to the nearest integer.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round( 3.14 )\n    3.0\n    > y = base.round( -4.2 )\n    -4.0\n    > y = base.round( -4.6 )\n    -5.0\n    > y = base.round( 9.5 )\n    10.0\n    > y = base.round( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.floor, base.roundn, base.trunc\n",
	"base.round10": "\nbase.round10( x )\n    Rounds a numeric value to the nearest power of ten on a linear scale.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round10( 3.14 )\n    1.0\n    > y = base.round10( -4.2 )\n    -1.0\n    > y = base.round10( -4.6 )\n    -1.0\n    > y = base.round10( 9.5 )\n    10.0\n    > y = base.round10( 13.0 )\n    10.0\n    > y = base.round10( -13.0 )\n    -10.0\n    > y = base.round10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor10, base.round, base.round2\n",
	"base.round2": "\nbase.round2( x )\n    Rounds a numeric value to the nearest power of two on a linear scale.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round2( 3.14 )\n    4.0\n    > y = base.round2( -4.2 )\n    -4.0\n    > y = base.round2( -4.6 )\n    -4.0\n    > y = base.round2( 9.5 )\n    8.0\n    > y = base.round2( 13.0 )\n    16.0\n    > y = base.round2( -13.0 )\n    -16.0\n    > y = base.round2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor2, base.round, base.round10\n",
	"base.roundb": "\nbase.roundb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` on a linear scale.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.roundb( 3.14159, -2, 10 )\n    3.14\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.roundb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two:\n    > y = base.roundb( 5.0, 1, 2 )\n    6.0\n\n    See Also\n    --------\n    base.ceilb, base.floorb, base.round, base.roundn\n",
	"base.roundn": "\nbase.roundn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n`.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.roundn( 3.14159, -2 )\n    3.14\n\n    // If `n = 0`, standard round behavior:\n    > y = base.roundn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.roundn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floorn, base.round, base.roundb\n",
	"base.roundsd": "\nbase.roundsd( x, n[, b] )\n    Rounds a numeric value to the nearest number with `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.roundsd( 3.14159, 3 )\n    3.14\n    > y = base.roundsd( 3.14159, 1 )\n    3.0\n    > y = base.roundsd( 12368.0, 2 )\n    12000.0\n    > y = base.roundsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floorsd, base.round, base.truncsd\n",
	"base.sasum": "\nbase.sasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.sasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.sasum( N, x1, stride )\n    12.0\n\n\nbase.sasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.sasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum\n",
	"base.saxpy": "\nbase.saxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy( x.length, alpha, x, 1, y, 1 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy( N, alpha, x, 2, y, -1 )\n    <Float32Array>[ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.saxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float32Array>[ 40.0, 33.0, 22.0 ]\n    > y0\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.saxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy\n",
	"base.scopy": "\nbase.scopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy( x.length, x, 1, y, 1 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy( N, x, -2, y, 1 )\n    <Float32Array>[ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.scopy( N, x1, -2, y1, 1 )\n    <Float32Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.scopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n",
	"base.setHighWord": "\nbase.setHighWord( x, high )\n    Sets the more significant 32 bits of a double-precision floating-point\n    number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    high: integer\n        Unsigned 32-bit integer to replace the higher order word of `x`.\n\n    Returns\n    -------\n    out: number\n        Double having the same lower order word as `x`.\n\n    Examples\n    --------\n    // Set the higher order bits of `+infinity` to return `1`:\n    > var high = 1072693248 >>> 0;\n    > var y = base.setHighWord( PINF, high )\n    1.0\n\n    See Also\n    --------\n    base.getHighWord, base.setLowWord\n",
	"base.setLowWord": "\nbase.setLowWord( x, low )\n    Sets the less significant 32 bits of a double-precision floating-point\n    number.\n\n    Setting the lower order bits of `NaN` or positive or negative infinity will\n    return `NaN`, as `NaN` is defined as a double whose exponent bit sequence is\n    all ones and whose fraction can be any bit sequence except all zeros.\n    Positive and negative infinity are defined as doubles with an exponent bit\n    sequence equal to all ones and a fraction equal to all zeros. Hence,\n    changing the less significant bits of positive and negative infinity\n    converts each value to `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    low: integer\n        Unsigned 32-bit integer to replace the lower order word of `x`.\n\n    Returns\n    -------\n    out: number\n        Double having the same higher order word as `x`.\n\n    Examples\n    --------\n    > var low = 5 >>> 0;\n    > var x = 3.14e201;\n    > var y = base.setLowWord( x, low )\n    3.139998651394392e+201\n\n    // Special cases:\n    > var low = 12345678;\n    > var y = base.setLowWord( PINF, low )\n    NaN\n    > y = base.setLowWord( NINF, low )\n    NaN\n    > y = base.setLowWord( NaN, low )\n    NaN\n\n    See Also\n    --------\n    base.getLowWord, base.setHighWord\n",
	"base.sici": "\nbase.sici( x )\n    Computes the sine and cosine integrals.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: Array<number>\n        Two element array containing the sine and cosine integrals.\n\n    Examples\n    --------\n    > var y = base.sici( 3.0 )\n    [ ~1.849, ~0.12 ]\n    > y = base.sici( 0.0 )\n    [ 0.0, -infinity ]\n    > y = base.sici( -9.0 )\n    [ ~-1.665, ~0.055 ]\n    > y = base.sici( NaN )\n    [ NaN, NaN ]\n\n",
	"base.signbit": "\nbase.signbit( x )\n    Returns a boolean indicating if the sign bit is on (true) or off (false).\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if sign bit is on or off.\n\n    Examples\n    --------\n    > var bool = base.signbit( 4.0 )\n    false\n    > bool = base.signbit( -9.14e-34 )\n    true\n    > bool = base.signbit( 0.0 )\n    false\n    > bool = base.signbit( -0.0 )\n    true\n\n    See Also\n    --------\n    base.signbitf\n",
	"base.signbitf": "\nbase.signbitf( x )\n    Returns a boolean indicating if the sign bit is on (true) or off (false).\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if sign bit is on or off.\n\n    Examples\n    --------\n    > var bool = base.signbitf( base.float64ToFloat32( 4.0 ) )\n    false\n    > bool = base.signbitf( base.float64ToFloat32( -9.14e-34 ) )\n    true\n    > bool = base.signbitf( 0.0 )\n    false\n    > bool = base.signbitf( -0.0 )\n    true\n\n    See Also\n    --------\n    base.signbit\n",
	"base.significandf": "\nbase.significandf( x )\n    Returns an integer corresponding to the significand of a single-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Significand.\n\n    Examples\n    --------\n    > var s = base.significandf( base.float64ToFloat32( 3.14e34 ) )\n    4293751\n    > s = base.significandf( base.float64ToFloat32( 3.14e-34 ) )\n    5288021\n    > s = base.significandf( base.float64ToFloat32( -3.14 ) )\n    4781507\n    > s = base.significandf( 0.0 )\n    0\n    > s = base.significandf( NaN )\n    4194304\n\n",
	"base.signum": "\nbase.signum( x )\n    Evaluates the signum function.\n\n    Value | Sign\n    ----- | -----\n    x > 0 |    +1\n    x < 0 |    -1\n        0 |     0\n       -0 |    -0\n      NaN |   NaN\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    sign: number\n        Function value.\n\n    Examples\n    --------\n    > var sign = base.signum( -5.0 )\n    -1.0\n    > sign = base.signum( 5.0 )\n    1.0\n    > sign = base.signum( -0.0 )\n    -0.0\n    > sign = base.signum( 0.0 )\n    0.0\n    > sign = base.signum( NaN )\n    NaN\n\n",
	"base.sin": "\nbase.sin( x )\n    Computes the sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Sine (in radians).\n\n    Examples\n    --------\n    > var y = base.sin( 0.0 )\n    ~0.0\n    > y = base.sin( PI/2.0 )\n    ~1.0\n    > y = base.sin( -PI/6.0 )\n    ~-0.5\n    > y = base.sin( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sinpi, base.tan\n",
	"base.sinc": "\nbase.sinc( x )\n    Computes the normalized cardinal sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Cardinal sine.\n\n    Examples\n    --------\n    > var y = base.sinc( 0.5 )\n    ~0.637\n    > y = base.sinc( -1.2 )\n    ~-0.156\n    > y = base.sinc( 0.0 )\n    1.0\n    > y = base.sinc( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sin\n",
	"base.sinh": "\nbase.sinh( x )\n    Computes the hyperbolic sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic sine (in radians).\n\n    Examples\n    --------\n    > var y = base.sinh( 0.0 )\n    0.0\n    > y = base.sinh( 2.0 )\n    ~3.627\n    > y = base.sinh( -2.0 )\n    ~-3.627\n    > y = base.sinh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cosh, base.sin, base.tanh\n",
	"base.sinpi": "\nbase.sinpi( x )\n    Computes the value of `sin(πx)`.\n\n    The function computes `sin(πx)` more accurately than the obvious approach,\n    especially for large `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.sinpi( 0.0 )\n    0.0\n    > y = base.sinpi( 0.5 )\n    1.0\n    > y = base.sinpi( 0.9 )\n    ~0.309\n    > y = base.sinpi( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sin\n",
	"base.spence": "\nbase.spence( x )\n    Evaluates Spence’s function, which is also known as the dilogarithm.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.spence( 3.0 )\n    ~-1.437\n    > y = base.spence( 0.0 )\n    ~1.645\n    > y = base.spence( -9.0 )\n    NaN\n    > y = base.spence( NaN )\n    NaN\n\n",
	"base.sqrt": "\nbase.sqrt( x )\n    Computes the principal square root.\n\n    For `x < 0`, the principal square root is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Principal square root.\n\n    Examples\n    --------\n    > var y = base.sqrt( 4.0 )\n    2.0\n    > y = base.sqrt( 9.0 )\n    3.0\n    > y = base.sqrt( 0.0 )\n    0.0\n    > y = base.sqrt( -4.0 )\n    NaN\n    > y = base.sqrt( NaN )\n    NaN\n\n",
	"base.sqrt1pm1": "\nbase.sqrt1pm1( x )\n    Computes the principal square root of `1+x` minus one.\n\n    This function is more accurate than the obvious approach for small `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Square root of `1+x` minus one.\n\n    Examples\n    --------\n    > var y = base.sqrt1pm1( 3.0 )\n    1.0\n    > y = base.sqrt1pm1( 0.5 )\n    ~0.225\n    > y = base.sqrt1pm1( 0.02 )\n    ~0.01\n    > y = base.sqrt1pm1( -0.5 )\n    ~-0.292\n    > y = base.sqrt1pm1( -1.1 )\n    NaN\n    > y = base.sqrt1pm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sqrt\n",
	"base.sumSeries": "\nbase.sumSeries( generator[, options] )\n    Sum the elements of the series given by the supplied function.\n\n    Parameters\n    ----------\n    generator: Function\n        Series function.\n\n    options: Object (optional)\n        Options.\n\n    options.maxTerms: integer (optional)\n        Maximum number of terms to be added. Default: `1000000`.\n\n    options.tolerance: number (optional)\n        Further terms are only added as long as the next term is greater than\n        the current term times the tolerance. Default: `2.22e-16`.\n\n    options.initialValue: number (optional)\n        Initial value of the resulting sum. Default: `0`.\n\n    Returns\n    -------\n    out: number\n        Sum of series terms.\n\n    Examples\n    --------\n    // Using an ES6 generator function:\n    > function* geometricSeriesGenerator( x ) {\n    >     var exponent = 0;\n    >     while ( true ) {\n    >         yield Math.pow( x, exponent );\n    >         exponent += 1;\n    >     }\n    > }\n    > var gen = geometricSeriesGenerator( 0.9 );\n    > var out = base.sumSeries( gen )\n    10\n\n    // Using a closure:\n    > function geometricSeriesClosure( x ) {\n    >     var exponent = -1;\n    >     return function() {\n    >         exponent += 1;\n    >         return Math.pow( x, exponent );\n    >     };\n    > }\n    > gen = geometricSeriesClosure( 0.9 )\n    > out = base.sumSeries( gen )\n    10\n\n    // Setting an initial value for the sum:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'initialValue': 1 } )\n    3\n    // Changing the maximum number of terms to be summed:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'maxTerms': 10 } )\n    ~1.998 // Infinite sum is 2\n    // Adjusting the used tolerance:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'tolerance': 1e-3 } )\n    ~1.998\n\n",
	"base.tan": "\nbase.tan( x )\n    Computes the tangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Tangent (in radians).\n\n    Examples\n    --------\n    > var y = base.tan( 0.0 )\n    ~0.0\n    > y = base.tan( -PI/4.0 )\n    ~-1.0\n    > y = base.tan( PI/4.0 )\n    ~1.0\n    > y = base.tan( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sin\n",
	"base.tanh": "\nbase.tanh( x )\n    Computes the hyperbolic tangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic tangent (in radians).\n\n    Examples\n    --------\n    > var y = base.tanh( 0.0 )\n    0.0\n    > var y = base.tanh( -0.0 )\n    -0.0\n    > y = base.tanh( 2.0 )\n    ~0.964\n    > y = base.tanh( -2.0 )\n    ~-0.964\n    > y = base.tanh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cosh, base.sinh, base.tan\n",
	"base.toBinaryString": "\nbase.toBinaryString( x )\n    Returns a string giving the literal bit representation of a double-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    bstr: string\n        Bit representation.\n\n    Examples\n    --------\n    > var str = base.toBinaryString( 4.0 )\n    '0100000000010000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( PI )\n    '0100000000001001001000011111101101010100010001000010110100011000'\n    > str = base.toBinaryString( -1.0e308 )\n    '1111111111100001110011001111001110000101111010111100100010100000'\n    > str = base.toBinaryString( -3.14e-320 )\n    '1000000000000000000000000000000000000000000000000001100011010011'\n    > str = base.toBinaryString( 5.0e-324 )\n    '0000000000000000000000000000000000000000000000000000000000000001'\n    > str = base.toBinaryString( 0.0 )\n    '0000000000000000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( -0.0 )\n    '1000000000000000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( NaN )\n    '0111111111111000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( PINF )\n    '0111111111110000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( NINF )\n    '1111111111110000000000000000000000000000000000000000000000000000'\n\n    See Also\n    --------\n    base.fromBinaryString, base.toBinaryStringf\n",
	"base.toBinaryStringf": "\nbase.toBinaryStringf( x )\n    Returns a string giving the literal bit representation of a single-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var str = base.toBinaryStringf( base.float64ToFloat32( 4.0 ) )\n    '01000000100000000000000000000000'\n    > str = base.toBinaryStringf( base.float64ToFloat32( PI ) )\n    '01000000010010010000111111011011'\n    > str = base.toBinaryStringf( base.float64ToFloat32( -1.0e38 ) )\n    '11111110100101100111011010011001'\n    > str = base.toBinaryStringf( base.float64ToFloat32( -3.14e-39 ) )\n    '10000000001000100011000100001011'\n    > str = base.toBinaryStringf( base.float64ToFloat32( 1.4e-45 ) )\n    '00000000000000000000000000000001'\n    > str = base.toBinaryStringf( 0.0 )\n    '00000000000000000000000000000000'\n    > str = base.toBinaryStringf( -0.0 )\n    '10000000000000000000000000000000'\n    > str = base.toBinaryStringf( NaN )\n    '01111111110000000000000000000000'\n    > str = base.toBinaryStringf( FLOAT32_PINF )\n    '01111111100000000000000000000000'\n    > str = base.toBinaryStringf( FLOAT32_NINF )\n    '11111111100000000000000000000000'\n\n    See Also\n    --------\n    base.fromBinaryStringf, base.toBinaryString\n",
	"base.toBinaryStringUint16": "\nbase.toBinaryStringUint16( x )\n    Returns a string giving the literal bit representation of an unsigned 16-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 16-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 16-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned\n    16-bit integers. Accordingly, care should be taken to ensure that only\n    nonnegative integer values less than `65536` (`2^16`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint16Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint16( a[ 0 ] )\n    '0000000000000001'\n    > str = base.toBinaryStringUint16( a[ 1 ] )\n    '0000000000000100'\n    > str = base.toBinaryStringUint16( a[ 2 ] )\n    '0000000000001001'\n\n    See Also\n    --------\n    base.toBinaryString\n",
	"base.toBinaryStringUint32": "\nbase.toBinaryStringUint32( x )\n    Returns a string giving the literal bit representation of an unsigned 32-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 32-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 32-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned\n    32-bit integers. Accordingly, care should be taken to ensure that only\n    nonnegative integer values less than `4,294,967,296` (`2^32`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint32Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint32( a[ 0 ] )\n    '00000000000000000000000000000001'\n    > str = base.toBinaryStringUint32( a[ 1 ] )\n    '00000000000000000000000000000100'\n    > str = base.toBinaryStringUint32( a[ 2 ] )\n    '00000000000000000000000000001001'\n\n    See Also\n    --------\n    base.toBinaryString\n",
	"base.toBinaryStringUint8": "\nbase.toBinaryStringUint8( x )\n    Returns a string giving the literal bit representation of an unsigned 8-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 8-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 8-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned 8-bit\n    integers. Accordingly, care should be taken to ensure that only nonnegative\n    integer values less than `256` (`2^8`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint8Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint8( a[ 0 ] )\n    '00000001'\n    > str = base.toBinaryStringUint8( a[ 1 ] )\n    '00000100'\n    > str = base.toBinaryStringUint8( a[ 2 ] )\n    '00001001'\n\n    See Also\n    --------\n    base.toBinaryString\n",
	"base.toWordf": "\nbase.toWordf( x )\n    Returns an unsigned 32-bit integer corresponding to the IEEE 754 binary\n    representation of a single-precision floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var f32 = base.float64ToFloat32( 1.337 )\n    1.3370000123977661\n    > var w = base.toWordf( f32 )\n    1068180177\n\n    See Also\n    --------\n    base.fromWordf, base.toWords\n",
	"base.toWords": "\nbase.toWords( x )\n    Splits a floating-point number into a higher order word (unsigned 32-bit\n    integer) and a lower order word (unsigned 32-bit integer).\n\n    The function returns an array with two elements: first a higher order word\n    and second a lower order word. The lower order word contains the less\n    significant bits, while the higher order word contains the more significant\n    bits and includes the exponent and sign.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: Array<double>\n        Two-element array containing a higher order word and a lower order word.\n\n    Examples\n    --------\n    > var w = base.toWords( 3.14e201 )\n    [ 1774486211, 2479577218 ]\n\n    See Also\n    --------\n    base.fromWords, base.toWordf",
	"base.trunc": "\nbase.trunc( x )\n    Rounds a numeric value toward zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc( 3.14 )\n    3.0\n    > y = base.trunc( -4.2 )\n    -4.0\n    > y = base.trunc( -4.6 )\n    -4.0\n    > y = base.trunc( 9.5 )\n    9.0\n    > y = base.trunc( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.floor, base.round\n",
	"base.trunc10": "\nbase.trunc10( x )\n    Rounds a numeric value to the nearest power of ten toward zero.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc10( 3.14 )\n    1.0\n    > y = base.trunc10( -4.2 )\n    -1.0\n    > y = base.trunc10( -4.6 )\n    -1.0\n    > y = base.trunc10( 9.5 )\n    1.0\n    > y = base.trunc10( 13.0 )\n    10.0\n    > y = base.trunc10( -13.0 )\n    -10.0\n    > y = base.trunc10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor10, base.round10, base.trunc, base.trunc2\n",
	"base.trunc2": "\nbase.trunc2( x )\n    Rounds a numeric value to the nearest power of two toward zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc2( 3.14 )\n    2.0\n    > y = base.trunc2( -4.2 )\n    -4.0\n    > y = base.trunc2( -4.6 )\n    -4.0\n    > y = base.trunc2( 9.5 )\n    8.0\n    > y = base.trunc2( 13.0 )\n    8.0\n    > y = base.trunc2( -13.0 )\n    -8.0\n    > y = base.trunc2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor2, base.round2, base.trunc, base.trunc10\n",
	"base.truncb": "\nbase.truncb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward zero.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.truncb( 3.14159, -4, 10 )\n    3.1415\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.truncb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two toward zero:\n    > y = base.truncb( 5.0, 1, 2 )\n    4.0\n\n    See Also\n    --------\n    base.ceilb, base.floorb, base.roundb, base.trunc, base.truncn\n",
	"base.truncn": "\nbase.truncn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward zero.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.truncn( 3.14159, -4 )\n    3.1415\n\n    // If `n = 0`, standard round behavior:\n    > y = base.truncn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.truncn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floorn, base.roundn, base.trunc, base.truncb\n",
	"base.truncsd": "\nbase.truncsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward zero with `n`\n    significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.truncsd( 3.14159, 5 )\n    3.1415\n    > y = base.truncsd( 3.14159, 1 )\n    3.0\n    > y = base.truncsd( 12368.0, 2 )\n    12000.0\n    > y = base.truncsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floorsd, base.roundsd, base.trunc\n",
	"base.uint32ToInt32": "\nbase.uint32ToInt32( x )\n    Converts an unsigned 32-bit integer to a signed 32-bit integer.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.uint32ToInt32( base.float64ToUint32( 4294967295 ) )\n    -1\n    > y = base.uint32ToInt32( base.float64ToUint32( 3 ) )\n    3\n\n",
	"base.vercos": "\nbase.vercos( x )\n    Computes the versed cosine.\n\n    The versed cosine is defined as `1 + cos(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Versed cosine (in radians).\n\n    Examples\n    --------\n    > var y = base.vercos( 3.14 )\n    ~0.0\n    > y = base.vercos( -4.2 )\n    ~0.5097\n    > y = base.vercos( -4.6 )\n    ~0.8878\n    > y = base.vercos( 9.5 )\n    ~0.0028\n    > y = base.vercos( -0.0 )\n    2.0\n\n    See Also\n    --------\n    base.cos, base.versin\n",
	"base.versin": "\nbase.versin( x )\n    Computes the versed sine.\n\n    The versed sine is defined as `1 - cos(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Versed sine (in radians).\n\n    Examples\n    --------\n    > var y = base.versin( 3.14 )\n    ~2.0\n    > y = base.versin( -4.2 )\n    ~1.490\n    > y = base.versin( -4.6 )\n    ~1.112\n    > y = base.versin( 9.5 )\n    ~1.997\n    > y = base.versin( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.cos, base.sin, base.vercos\n",
	"base.xlogy": "\nbase.xlogy( x, y )\n    Computes `x * ln(y)` so that the result is `0` if `x = 0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var out = base.xlogy( 3.0, 2.0 )\n    ~2.079\n    > out = base.xlogy( 1.5, 5.9 )\n    ~2.662\n    > out = base.xlogy( 0.9, 1.0 )\n    0.0\n    > out = base.xlogy( 0.0, -2.0 )\n    0.0\n    > out = base.xlogy( 1.5, NaN )\n    NaN\n    > out = base.xlogy( 0.0, NaN )\n    NaN\n    > out = base.xlogy( NaN, 2.3 )\n    NaN\n\n    See Also\n    --------\n    base.ln, base.xlog1py\n",
	"base.xlog1py": "\nbase.xlog1py( x, y )\n    Computes `x * ln(y+1)` so that the result is `0` if `x = 0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var out = base.xlog1py( 3.0, 2.0 )\n    ~3.296\n    > out = base.xlog1py( 1.5, 5.9 )\n    ~2.897\n    > out = base.xlog1py( 0.9, 1.0 )\n    ~0.624\n    > out = base.xlog1py( 1.0, 0.0 )\n    0.0\n    > out = base.xlog1py( 0.0, -2.0 )\n    0.0\n    > out = base.xlog1py( 1.5, NaN )\n    NaN\n    > out = base.xlog1py( 0.0, NaN )\n    NaN\n    > out = base.xlog1py( NaN, 2.3 )\n    NaN\n\n    See Also\n    --------\n    base.log1p, base.xlogy\n",
	"base.zeta": "\nbase.zeta( s )\n    Evaluates the Riemann zeta function as a function of a real variable `s`.\n\n    Parameters\n    ----------\n    s: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.zeta( 1.1 )\n    ~10.584\n    > y = base.zeta( -4.0 )\n    0.0\n    > y = base.zeta( 70.0 )\n    1.0\n    > y = base.zeta( 0.5 )\n    ~-1.46\n    > y = base.zeta( NaN )\n    NaN\n\n    // Evaluate at a pole:\n    > y = base.zeta( 1.0 )\n    NaN\n\n",
	"bifurcate": "\nbifurcate( collection, [options,] filter )\n    Splits values into two groups.\n\n    If an element in `filter` is truthy, then the corresponding element in the\n    input collection belongs to the first group; otherwise, the collection\n    element belongs to the second group.\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    filter: Array|TypedArray|Object\n        A collection indicating which group an element in the input collection\n        belongs to. If an element in `filter` is truthy, the corresponding\n        element in `collection` belongs to the first group; otherwise, the\n        collection element belongs to the second group. If provided an object,\n        the object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var f = [ true, true, false, true ];\n    > var out = bifurcate( collection, f )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n    > f = [ 1, 1, 0, 1 ];\n    > out = bifurcate( collection, f )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as indices:\n    > f = [ true, true, false, true ];\n    > var opts = { 'returns': 'indices' };\n    > out = bifurcate( collection, opts, f )\n    [ [ 0, 1, 3 ], [ 2 ] ]\n\n    // Output group results as index-element pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcate( collection, opts, f )\n    [ [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], [ [2, 'foo'] ] ]\n\n    See Also\n    --------\n    bifurcateBy, bifurcateOwn, group\n",
	"bifurcateBy": "\nbifurcateBy( collection, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If a predicate function returns a truthy value, a collection value is\n    placed in the first group; otherwise, a collection value is placed in the\n    second group.\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function predicate( v ) { v[ 0 ] === 'b' };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = bifurcateBy( collection, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > out = bifurcateBy( collection, opts, predicate )\n    [ [ 0, 1, 3 ], [ 2 ] ]\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateBy( collection, opts, predicate )\n    [ [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], [ [2, 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, groupBy\n",
	"bifurcateByAsync": "\nbifurcateByAsync( collection, [options,] predicate, done )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an predicate function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If a predicate function calls the `next` callback with a truthy group value,\n    a collection value is placed in the first group; otherwise, a collection\n    value is placed in the second group.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty array as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    [ [ 1000, 3000 ], [ 2500 ] ]\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > bifurcateByAsync( arr, opts, predicate, done )\n    1000\n    2500\n    3000\n    [ [ 2, 0 ], [ 1 ] ]\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > bifurcateByAsync( arr, opts, predicate done )\n    1000\n    2500\n    3000\n    [ [ [ 2, 1000 ], [ 0, 3000 ] ], [ [ 1, 2500 ] ] ]\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n\n    // Process sequentially:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n\n\nbifurcateByAsync.factory( [options,] predicate )\n    Returns a function which splits values into two groups according to an\n    predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A function which splits values into two groups.\n\n    Examples\n    --------\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = bifurcateByAsync.factory( opts, predicate );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    [ [ 2000, 1000 ], [ 1500 ] ]\n\n    See Also\n    --------\n    bifurcateBy, groupByAsync\n",
	"bifurcateIn": "\nbifurcateIn( obj, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    If a predicate function returns a truthy value, a value is placed in the\n    first group; otherwise, a value is placed in the second group.\n\n    If provided an empty object with no prototype, the function returns an empty\n    array.\n\n    The function iterates over an object's own and inherited properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function Foo() { this.a = 'beep'; this.b = 'boop'; return this; };\n    > Foo.prototype = Object.create( null );\n    > Foo.prototype.c = 'foo';\n    > Foo.prototype.d = 'bar';\n    > var obj = new Foo();\n    > function predicate( v ) { v[ 0 ] === 'b' };\n    > var out = bifurcateIn( obj, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = bifurcateIn( obj, opts, predicate )\n    [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateIn( obj, opts, predicate )\n    [ [ ['a', 'beep'], ['b', 'boop'], ['d', 'bar'] ], [ ['c', 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, bifurcateBy, bifurcateOwn, groupIn\n",
	"bifurcateOwn": "\nbifurcateOwn( obj, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    If a predicate function returns a truthy value, a value is placed in the\n    first group; otherwise, a value is placed in the second group.\n\n    If provided an empty object, the function returns an empty array.\n\n    The function iterates over an object's own properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function predicate( v ) { v[ 0 ] === 'b' };\n    > var obj = { 'a': 'beep', 'b': 'boop', 'c': 'foo', 'd': 'bar' };\n    > var out = bifurcateOwn( obj, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = bifurcateOwn( obj, opts, predicate )\n    [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateOwn( obj, opts, predicate )\n    [ [ ['a', 'beep'], ['b', 'boop'], ['d', 'bar'] ], [ ['c', 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, bifurcateBy, bifurcateIn, groupOwn\n",
	"capitalize": "\ncapitalize( str )\n    Capitalizes the first character in a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Capitalized string.\n\n    Examples\n    --------\n    > var out = capitalize( 'beep' )\n    'Beep'\n    > out = capitalize( 'Boop' )\n    'Boop'\n\n    See Also\n    --------\n    uncapitalize, uppercase\n",
	"capitalizeKeys": "\ncapitalizeKeys( obj )\n    Converts the first letter of each object key to uppercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'aa': 1, 'bb': 2 };\n    > var out = capitalizeKeys( obj )\n    { 'Aa': 1, 'Bb': 2 }\n\n    See Also\n    --------\n    uncapitalizeKeys, uppercaseKeys\n",
	"CATALAN": "\nCATALAN\n    Catalan's constant.\n\n    Examples\n    --------\n    > CATALAN\n    0.915965594177219\n\n",
	"chi2gof": "\nchi2gof( x, y[, ...params][, opts] )\n    Performs a chi-square goodness-of-fit test.\n\n    For an array or typed array of integers `x`, a chi-square goodness-of-fit is\n    computed for the null hypothesis that the values of `x` come from the\n    discrete distribution specified by `y`. `y` can be an `array` of expected\n    frequencies, an `array` of population probabilities that sum to one, or a\n    string with the name of the discrete distribution to test against. In the\n    latter case, the parameters of the distribution must be supplied as\n    additional arguments after `y`. The function returns an object holding the\n    calculated test statistic, the p-value of the test, as well as the test\n    decision.\n\n    By default, the p-value is computed using a chi-square distribution with\n    `k - 1` degrees of freedom, where `k` is the number of levels of `x`. In\n    case distribution parameters were estimated for the calculation of `y`, the\n    degrees of freedom have to be corrected. The `ddof` option can be set to use\n    `n - ddof - 1` degrees of freedom.\n\n    The chi-square approximation may be incorrect if the observed or expected\n    frequencies in each category are too small. It is common to require\n    frequencies greater than five.\n\n    Instead of relying on the chi-square approximation when calculating the\n    p-value, Monte Carlo simulation can be used. To do so, set the `simulate`\n    option. The simulation is carried out by resampling from the discrete\n    distribution given by `y`. By default, `500` iterations are used for the\n    simulation. To set a custom number of iterations, use the `iterations`\n    option.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Observation frequencies.\n\n    y: Array<number>|string\n         Array of expected values or probabilities or a string denoting the name\n         of a distribution.\n\n    params: ...number (optional)\n        Distribution parameters passed to mean function.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.ddof: number (optional)\n        Nonnegative integer giving the \"delta degrees of freedom\" adjustment.\n        Default: `0`.\n\n    options.simulate: boolean (optional)\n        Boolean indicating whether to compute p-values by Monte Carlo\n        simulation. The simulation is carried out by resampling from the\n        discrete distribution given by `p`. Default: `false`.\n\n    options.iterations: number (optional)\n        Positive integer specifying the number of Monte Carlo iterations.\n        Default: `500`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        P-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.df: number\n        Degrees of freedom.\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Use probabilities for `y`:\n    > var x = [ 89, 37, 30, 28, 2 ];\n    > var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n    > var out = chi2gof( x, p )\n    { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n    > var table = out.print()\n    Null hypothesis: population probabilities are equal to those in p\n        pValue: 0.0406\n        statistic: 9.9901\n        degrees of freedom: 4\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n    // Set significance level:\n    > out = chi2gof( x, p, { 'alpha': 0.01 });\n    > table = out.print()\n    Chi-square goodness-of-fit test\n\n    Null hypothesis: population probabilities are equal to those in p\n\n        pValue: 0.0406\n        statistic: 9.9901\n        degrees of freedom: 4\n\n    Test Decision: Fail to reject null in favor of alternative at 1%\n    significance level\n\n    // Calculate the p-value via Monte Carlo simulation:\n    > var x = [ 89, 37, 30, 28, 2 ];\n    > var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n    > var out = chi2gof( x, p, { 'simulate': true, 'iterations': 1000 })\n    {...}\n\n    // Verify that data comes from Poisson distribution:\n    > var lambda = 3.0;\n    > var rpois = base.random.poisson.factory( lambda );\n    > var len = 400;\n    > x = new Array( len );\n    > for ( var i = 0; i < len; i++ ) { x[ i ] = rpois(); }\n    // Generate frequency table:\n    > var freqs = [];\n    > for ( i = 0; i < len; i++ ) {\n    ...     val = x[ i ];\n    ...     freqs[ val ] === void 0 ? freqs[ val ] = 1 : freqs[ val ] += 1;\n    ... }\n    // Fill holes in array:\n    > for ( i = 0; i < freqs.length; i++ ) {\n    ...     if ( freqs[ i ] === void 0 ) { freqs[ i ] = 0; }\n    ... }\n    > out = chi2gof( freqs, 'poisson', lambda );\n    {...}\n\n",
	"complex": "\ncomplex( real, imag[, dtype] )\n    Creates a complex number.\n\n    The function supports the following data types:\n\n    - float64\n    - float32\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    z: Complex\n        Complex number.\n\n    Examples\n    --------\n    > var z = complex( 5.0, 3.0, 'float64' )\n    <Complex128>\n    > z = complex( 5.0, 3.0, 'float32' )\n    <Complex64>\n\n    See Also\n    --------\n    Complex128, Complex64\n",
	"Complex128": "\nComplex128( real, imag )\n    128-bit complex number constructor.\n\n    Both the real and imaginary components are stored as double-precision\n    floating-point numbers.\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    Returns\n    -------\n    z: Complex128\n        128-bit complex number.\n\n    z.re: number\n        Read-only property returning the real component.\n\n    z.im: number\n        Read-only property returning the imaginary component.\n\n    z.BYTES_PER_ELEMENT\n        Size (in bytes) of each component. Value: 8.\n\n    z.byteLength\n        Length (in bytes) of a complex number. Value: 16.\n\n    Examples\n    --------\n    > var z = Complex128( 5.0, 3.0 )\n    <Complex128>\n    > z.re\n    5.0\n    > z.im\n    3.0\n\n    See Also\n    --------\n    complex, Complex64\n",
	"COMPLEX128_NUM_BYTES": "\nCOMPLEX128_NUM_BYTES\n    Size (in bytes) of a 128-bit complex number.\n\n    Examples\n    --------\n    > COMPLEX128_NUM_BYTES\n    16\n\n    See Also\n    --------\n    COMPLEX64_NUM_BYTES, FLOAT64_NUM_BYTES\n",
	"Complex64": "\nComplex64( real, imag )\n    64-bit complex number constructor.\n\n    Both the real and imaginary components are stored as single-precision\n    floating-point numbers.\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    Returns\n    -------\n    z: Complex64\n        64-bit complex number.\n\n    z.re: number\n        Read-only property returning the real component.\n\n    z.im: number\n        Read-only property returning the imaginary component.\n\n    z.BYTES_PER_ELEMENT\n        Size (in bytes) of each component. Value: 4.\n\n    z.byteLength\n        Length (in bytes) of a complex number. Value: 8.\n\n    Examples\n    --------\n    > var z = Complex64( 5.0, 3.0 )\n    <Complex64>\n    > z.re\n    5.0\n    > z.im\n    3.0\n\n    See Also\n    --------\n    complex, Complex128\n",
	"COMPLEX64_NUM_BYTES": "\nCOMPLEX64_NUM_BYTES\n    Size (in bytes) of a 64-bit complex number.\n\n    Examples\n    --------\n    > COMPLEX64_NUM_BYTES\n    8\n\n    See Also\n    --------\n    COMPLEX128_NUM_BYTES, FLOAT32_NUM_BYTES\n",
	"compose": "\ncompose( ...f )\n    Function composition.\n\n    Returns a composite function. Starting from the right, the composite\n    function evaluates each function and passes the result as an argument\n    to the next function. The result of the leftmost function is the result\n    of the whole.\n\n    Notes:\n\n    - Only the rightmost function is explicitly permitted to accept multiple\n      arguments. All other functions are evaluated as unary functions.\n    - The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    f: ...Function\n        Functions to compose.\n\n    Returns\n    -------\n    out: Function\n        Composite function.\n\n    Examples\n    --------\n    > function a( x ) {\n    ...    return 2 * x;\n    ... }\n    > function b( x ) {\n    ...    return x + 3;\n    ... }\n    > function c( x ) {\n    ...    return x / 5;\n    ... }\n    > var f = compose( c, b, a );\n    > var z = f( 6 )\n    3\n\n    See Also\n    --------\n    composeAsync\n",
	"composeAsync": "\ncomposeAsync( ...f )\n    Function composition.\n\n    Returns a composite function. Starting from the right, the composite\n    function evaluates each function and passes the result as the first argument\n    of the next function. The result of the leftmost function is the result\n    of the whole.\n\n    The last argument for each provided function is a `next` callback which\n    should be invoked upon function completion. The callback accepts two\n    arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a composed function calls the `next` callback with a truthy `error`\n    argument, the composite function suspends execution and immediately calls\n    the `done` callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Only the rightmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as binary functions.\n\n    The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    f: ...Function\n        Functions to compose.\n\n    Returns\n    -------\n    out: Function\n        Composite function.\n\n    Examples\n    --------\n    > function a( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, 2*x );\n    ...    }\n    ... };\n    > function b( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x+3 );\n    ...    }\n    ... };\n    > function c( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x/5 );\n    ...    }\n    ... };\n    > var f = composeAsync( c, b, a );\n    > function done( error, result ) {\n    ...    if ( error ) {\n    ...        throw error;\n    ...    }\n    ...    console.log( result );\n    ... };\n    > f( 6, done )\n    3\n\n    See Also\n    --------\n    compose\n",
	"conj": "\nconj( z )\n    Returns the complex conjugate of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    out: Complex\n        Complex conjugate.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > z.toString()\n    5 + 3i\n    > var v = conj( z );\n    > v.toString()\n    5 - 3i\n\n    See Also\n    --------\n    imag, real, reim\n",
	"constantFunction": "\nconstantFunction( val )\n    Creates a function which always returns the same value.\n\n    Notes:\n\n    - When provided an object reference, the returned `function` always returns\n      the same reference.\n\n    Parameters\n    ----------\n    val: any\n        Value to always return.\n\n    Returns\n    -------\n    out: Function\n        Constant function.\n\n    Examples\n    --------\n    > var fcn = constantFunction( 3.14 );\n    > var v = fcn()\n    3.14\n    > v = fcn()\n    3.14\n    > v = fcn()\n    3.14\n\n    See Also\n    --------\n    argumentFunction, identity\n",
	"constructorName": "\nconstructorName( val )\n    Determines the name of a value's constructor.\n\n    Parameters\n    ----------\n    val: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        Name of a value's constructor.\n\n    Examples\n    --------\n    > var v = constructorName( 'a' )\n    'String'\n    > v = constructorName( {} )\n    'Object'\n    > v = constructorName( true )\n    'Boolean'\n\n    See Also\n    --------\n    functionName\n",
	"contains": "\ncontains( val, searchValue[, position] )\n    Tests if an array-like value contains a search value.\n\n    When `val` is a `string`, the function checks whether the characters of the\n    search string are found in the input string. The search is case-sensitive.\n\n    When `val` is an `array-like` object, the function checks whether the input\n    array contains an element strictly equal to the specified search value.\n\n    For `strings`, this function is modeled after `String.prototype.includes`,\n    part of the ECMAScript 6 specification. This function is different from a\n    call to `String.prototype.includes.call` insofar as type-checking is\n    performed for all arguments.\n\n    If `position < 0`, the search is performed for the entire input array or\n    string.\n\n\n    Parameters\n    ----------\n    val: ArrayLike\n        Input value.\n\n    searchValue: any\n        Value to search for.\n\n    position: integer (optional)\n        Position at which to start searching for `searchValue`. Default: `0`.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an input value contains another value.\n\n    Examples\n    --------\n    > var bool = contains( 'Hello World', 'World' )\n    true\n    > bool = contains( 'Hello World', 'world' )\n    false\n    > bool = contains( [ 1, 2, 3, 4 ], 2 )\n    true\n    > bool = contains( [ NaN, 2, 3, 4 ], NaN )\n    true\n\n    // Supply a position:\n    > bool = contains( 'Hello World', 'Hello', 6 )\n    false\n    > bool = contains( [ true, NaN, false ], true, 1 )\n    false\n\n",
	"convertPath": "\nconvertPath( from, to )\n    Converts between POSIX and Windows paths.\n\n    Parameters\n    ----------\n    from: string\n        Input path.\n\n    to: string\n        Output path convention: 'win32', 'mixed', or 'posix'.\n\n    Returns\n    -------\n    out: string\n        Converted path.\n\n    Examples\n    --------\n    > var out = convertPath( '/c/foo/bar/beep.c', 'win32' )\n    'c:\\\\foo\\\\bar\\\\beep.c'\n    > out = convertPath( '/c/foo/bar/beep.c', 'mixed' )\n    'c:/foo/bar/beep.c'\n    > out = convertPath( '/c/foo/bar/beep.c', 'posix' )\n    '/c/foo/bar/beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'win32' )\n    'C:\\\\\\\\foo\\\\bar\\\\beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'mixed' )\n    'C:/foo/bar/beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'posix' )\n    '/c/foo/bar/beep.c'\n\n",
	"copy": "\ncopy( value[, level] )\n    Copy or deep clone a value to an arbitrary depth.\n\n    The implementation can handle circular references.\n\n    If a `Number`, `String`, or `Boolean` object is encountered, the value is\n    cloned as a primitive. This behavior is intentional.\n\n    For objects, the implementation only copies enumerable keys and their\n    associated property descriptors.\n\n    The implementation only checks whether basic `Objects`, `Arrays`, and class\n    instances are extensible, sealed, and/or frozen.\n\n    Functions are not cloned; their reference is copied.\n\n    The implementation supports custom error types which are `Error` instances\n    (e.g., ES2015 subclasses).\n\n    Support for copying class instances is inherently fragile. Any instances\n    with privileged access to variables (e.g., within closures) cannot be\n    cloned. This stated, basic copying of class instances is supported. Provided\n    an environment which supports ES5, the implementation is greedy and performs\n    a deep clone of any arbitrary class instance and its properties. The\n    implementation assumes that the concept of `level` applies only to the class\n    instance reference, but not to its internal state.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    level: integer (optional)\n         Copy depth. Default: +infinity.\n\n    Returns\n    -------\n    out: any\n        Value copy.\n\n    Examples\n    --------\n    > var value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\n    > var out = copy( value )\n    [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]\n    > var bool = ( value[ 0 ].c === out[ 0 ].c )\n    false\n\n    // Set the `level` option to limit the copy depth:\n    > value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\n    > out = copy( value, 1 );\n    > bool = ( value[ 0 ] === out[ 0 ] )\n    false\n    > bool = ( value[ 0 ].c === out[ 0 ].c )\n    true\n\n\n    See Also\n    --------\n    merge\n",
	"countBy": "\ncountBy( collection, [options,] indicator )\n    Groups values according to an indicator function and returns group counts.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = countBy( collection, indicator )\n    { 'b': 3, 'other': 1 }\n\n    See Also\n    --------\n    group, groupBy\n",
	"countByAsync": "\ncountByAsync( collection, [options,] indicator, done )\n    Groups values according to an indicator function and returns group counts.\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty object as the second argument.\n\n    The `group` returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even': 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, indicator, done )\n    1000\n    2500\n    3000\n    { \"even\": 2, \"odd\": 1 }\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    { \"even\": 2, \"odd\": 1 }\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    { \"even\": 2, \"odd\": 1 }\n\n\ncountByAsync.factory( [options,] indicator )\n    Returns a function which groups values according to an indicator function\n    and returns group counts.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A function which groups values and returns group counts.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = countByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    { \"even\": 2, \"odd\": 1 }\n    > arr = [ 2000, 1500, 1000, 500 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    500\n    { \"even\": 2, \"odd\": 2 }\n\n    See Also\n    --------\n    countBy, groupByAsync, tabulateByAsync\n",
	"curry": "\ncurry( fcn[, arity][, thisArg] )\n    Transforms a function into a sequence of functions each accepting a single\n    argument.\n\n    Until return value resolution, each invocation returns a new partially\n    applied curry function.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to curry.\n\n    arity: integer (optional)\n        Number of parameters. Default: `fcn.length`.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Curry function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var f = curry( add );\n    > var sum = f( 2 )( 3 )\n    5\n\n    // Supply arity:\n    > function add() { return arguments[ 0 ] + arguments[ 1 ]; };\n    > f = curry( add, 2 );\n    > sum = f( 2 )( 3 )\n    5\n\n    // Provide function context:\n    > var obj = {\n    ...     'name': 'Ada',\n    ...     'greet': function greet( word1, word2 ) {\n    ...        return word1 + ' ' + word2 + ', ' + this.name + '!'\n    ...     }\n    ... };\n    > f = curry( obj.greet, obj );\n    > var str = f( 'Hello' )( 'there' )\n    'Hello there, Ada!'\n\n    See Also\n    --------\n    curryRight, uncurry, uncurryRight\n",
	"curryRight": "\ncurryRight( fcn[, arity][, thisArg] )\n    Transforms a function into a sequence of functions each accepting a single\n    argument.\n\n    Until return value resolution, each invocation returns a new partially\n    applied curry function.\n\n    This function applies arguments starting from the right.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to curry.\n\n    arity: integer (optional)\n        Number of parameters. Default: `fcn.length`.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Curry function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var f = curryRight( add );\n    > var sum = f( 2 )( 3 )\n    5\n\n    // Supply arity:\n    > function add() { return arguments[ 0 ] + arguments[ 1 ]; };\n    > f = curryRight( add, 2 );\n    > sum = f( 2 )( 3 )\n    5\n\n    // Provide function context:\n    > var obj = {\n    ...     'name': 'Ada',\n    ...     'greet': function greet( word1, word2 ) {\n    ...         return word1 + ' ' + word2 + ', ' + this.name + '!'\n    ...     }\n    ... };\n    > f = curryRight( obj.greet, obj );\n    > var str = f( 'Hello' )( 'there' )\n    'Hello there, Ada!'\n\n    See Also\n    --------\n    curry, uncurry, uncurryRight\n",
	"cwd": "\ncwd()\n    Returns the current working directory.\n\n    Returns\n    -------\n    path: string\n        Current working directory of the process.\n\n    Examples\n    --------\n    > var dir = cwd()\n    '/path/to/current/working/directory'\n\n",
	"DALE_CHALL_NEW": "\nDALE_CHALL_NEW()\n    Returns a list of familiar English words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of familiar English words.\n\n    Examples\n    --------\n    > var list = DALE_CHALL_NEW()\n    [ 'a', 'able', 'aboard', 'about', 'above', ... ]\n\n    References\n    ----------\n    - Chall, Jeanne Sternlicht, and Edgar Dale. 1995. *Readability revisited:\n    the new Dale-Chall readability formula*. Brookline Books.\n    <https://books.google.com/books?id=2nbuAAAAMAAJ>.\n\n",
	"datasets": "\ndatasets( name[, options] )\n    Returns a dataset.\n\n    The function forwards provided options to the dataset interface specified\n    by `name`.\n\n    Parameters\n    ----------\n    name: string\n        Dataset name.\n\n    options: Object (optional)\n        Function options.\n\n    Returns\n    -------\n    out: any\n        Dataset.\n\n    Examples\n    --------\n    > var out = datasets( 'MONTH_NAMES_EN' )\n    [ 'January', 'February', ... ]\n    > var opts = { 'data': 'cities' };\n    > out = datasets( 'MINARD_NAPOLEONS_MARCH', opts )\n    [ {...}, {...}, ... ]\n\n",
	"dayOfQuarter": "\ndayOfQuarter( [month[, day, year]] )\n    Returns the day of the quarter.\n\n    By default, the function returns the day of the quarter for the current date\n    (according to local time). To determine the day of the quarter for a\n    particular day, provide `month`, `day`, and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also accepts a `Date` object.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    day: integer (optional)\n        Day.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Day of the quarter.\n\n    Examples\n    --------\n    > var day = dayOfQuarter()\n    <number>\n    > day = dayOfQuarter( new Date() )\n    <number>\n    > day = dayOfQuarter( 12, 31, 2017 )\n    92\n\n    // Other ways to supply month:\n    > day = dayOfQuarter( 'dec', 31, 2017 )\n    92\n    > day = dayOfQuarter( 'december', 31, 2017 )\n    92\n\n    See Also\n    --------\n    dayOfYear\n",
	"dayOfYear": "\ndayOfYear( [month[, day, year]] )\n    Returns the day of the year.\n\n    By default, the function returns the day of the year for the current date\n    (according to local time). To determine the day of the year for a particular\n    day, provide `month`, `day`, and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also accepts a `Date` object.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    day: integer (optional)\n        Day.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Day of the year.\n\n    Examples\n    --------\n    > var day = dayOfYear()\n    <number>\n    > day = dayOfYear( new Date() )\n    <number>\n    > day = dayOfYear( 12, 31, 2016 )\n    366\n\n    // Other ways to supply month:\n    > day = dayOfYear( 'dec', 31, 2016 )\n    366\n    > day = dayOfYear( 'december', 31, 2016 )\n    366\n\n    See Also\n    --------\n    dayOfQuarter\n",
	"daysInMonth": "\ndaysInMonth( [month[, year]] )\n    Returns the number of days in a month.\n\n    By default, the function returns the number of days in the current month\n    of the current year (according to local time). To determine the number of\n    days for a particular month and year, provide `month` and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also accepts a `Date` object.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Days in a month.\n\n    Examples\n    --------\n    > var num = daysInMonth()\n    <number>\n    > num = daysInMonth( 2 )\n    <number>\n    > num = daysInMonth( 2, 2016 )\n    29\n    > num = daysInMonth( 2, 2017 )\n    28\n\n    // Other ways to supply month:\n    > num = daysInMonth( 'feb', 2016 )\n    29\n    > num = daysInMonth( 'february', 2016 )\n    29\n\n    See Also\n    --------\n    daysInYear\n",
	"daysInYear": "\ndaysInYear( [value] )\n    Returns the number of days in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of days in the current year\n    (according to local time). To determine the number of days for a particular\n    year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of days in a year.\n\n    Examples\n    --------\n    > var num = daysInYear()\n    <number>\n    > num = daysInYear( 2016 )\n    366\n    > num = daysInYear( 2017 )\n    365\n\n    See Also\n    --------\n    daysInMonth\n",
	"deepGet": "\ndeepGet( obj, path[, options] )\n    Returns a nested property value.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: any\n        Nested property value.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = deepGet( obj, 'a.b.c' )\n    'd'\n\n    // Specify a custom separator via the `sep` option:\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = deepGet( obj, 'a/b/c', { 'sep': '/' } )\n    'd'\n\ndeepGet.factory( path[, options] )\n    Creates a reusable deep get function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get factory.\n\n    Examples\n    --------\n    > var dget = deepGet.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = dget( obj )\n    'd'\n\n    See Also\n    --------\n    deepPluck, deepSet\n",
	"deepPluck": "\ndeepPluck( arr, path[, options] )\n    Extracts a nested property value from each element of an object array.\n\n    If a key path does not exist, the function sets the plucked value as\n    `undefined`.\n\n    Extracted values are not cloned.\n\n    Parameters\n    ----------\n    arr: Array\n        Source array.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to return a new data structure. Default:\n        true.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Array\n        Destination array.\n\n    Examples\n    --------\n    > var arr = [\n    ...     { 'a': { 'b': { 'c': 1 } } },\n    ...     { 'a': { 'b': { 'c': 2 } } }\n    ... ];\n    > var out = deepPluck( arr, 'a.b.c' )\n    [ 1, 2 ]\n    > arr = [\n    ...     { 'a': [ 0, 1, 2 ] },\n    ...     { 'a': [ 3, 4, 5 ] }\n    ... ];\n    > out = deepPluck( arr, [ 'a', 1 ] )\n    [ 1, 4 ]\n\n    See Also\n    --------\n    deepGet, deepSet\n",
	"deepSet": "\ndeepSet( obj, path[, options] )\n    Sets a nested property value.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    path: string|Array\n        Key path.\n\n    value: any\n        Value to set.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if the property was successfully set.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = deepSet( obj, 'a.b.c', 'beep' )\n    true\n\n    // Specify an alternative separator via the sep option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > bool = deepSet( obj, 'a/b/c', 'beep', { 'sep': '/' } );\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    // To create a key path which does not exist, set the create option to true:\n    > bool = deepSet( obj, 'a.e.c', 'boop', { 'create': true } );\n    > obj\n    { 'a': { 'b': { 'c': 'beep' }, 'e': { 'c': 'boop' } } }\n\n\ndeepSet.factory( path[, options] )\n    Creates a reusable deep set function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get function.\n\n    Examples\n    --------\n    > var dset = deepSet.factory( 'a/b/c', {\n    ...     'create': true,\n    ...     'sep': '/'\n    ... });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = dset( obj, 'beep' )\n    true\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    See Also\n    --------\n    deepGet, deepPluck\n",
	"dirname": "\ndirname( path )\n    Returns a directory name.\n\n    Parameters\n    ----------\n    path: string\n        Path.\n\n    Returns\n    -------\n    out: string\n        Directory name.\n\n    Examples\n    --------\n    > var dir = dirname( './foo/bar/index.js' )\n    './foo/bar'\n\n    See Also\n    --------\n    extname\n",
	"doUntil": "\ndoUntil( fcn, predicate[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to stop invoking a\n        function.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i >= 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > doUntil( beep, predicate )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doUntilEach, doWhile, until, whilst\n",
	"doUntilAsync": "\ndoUntilAsync( fcn, predicate, done[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from one)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is falsy, the function continues invoking `fcn`;\n    otherwise, the function invokes the `done` callback.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function predicate( i, clbk ) { clbk( null, i >= 5 ); };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > doUntilAsync( fcn, predicate, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhileAsync, untilAsync, whileAsync\n",
	"doUntilEach": "\ndoUntilEach( collection, fcn, predicate[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > doUntilEach( arr, logger, predicate )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n    4: NaN\n\n    See Also\n    --------\n    doUntilEachRight, doWhileEach, untilEach\n",
	"doUntilEachRight": "\ndoUntilEachRight( collection, fcn, predicate[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > doUntilEachRight( arr, logger, predicate )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n    1: NaN\n\n    See Also\n    --------\n    doUntilEach, doWhileEachRight, untilEachRight\n",
	"doWhile": "\ndoWhile( fcn, predicate[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i < 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > doWhile( beep, predicate )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhileAsync, doWhileEach, until, whilst\n",
	"doWhileAsync": "\ndoWhileAsync( fcn, predicate, done[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from one)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is truthy, the function continues invoking `fcn`;\n    otherwise, the function invokes the `done` callback.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function predicate( i, clbk ) { clbk( null, i < 5 ); };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > doWhileAsync( fcn, predicate, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhile, untilAsync, whileAsync\n",
	"doWhileEach": "\ndoWhileEach( collection, fcn, predicate[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > doWhileEach( arr, logger, predicate )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n    4: NaN\n\n    See Also\n    --------\n    doUntilEach, doWhileEachRight, whileEach\n",
	"doWhileEachRight": "\ndoWhileEachRight( collection, fcn, predicate[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > doWhileEachRight( arr, logger, predicate )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n    1: NaN\n\n    See Also\n    --------\n    doUntilEachRight, doWhileEach, whileEachRight\n",
	"E": "\nE\n    Euler's number.\n\n    Examples\n    --------\n    > E\n    2.718281828459045\n\n",
	"endsWith": "\nendsWith( str, search[, len] )\n    Tests if a `string` ends with the characters of another `string`.\n\n    If provided an empty `search` string, the function always returns `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string\n        Search string.\n\n    len: integer (optional)\n        Substring length. Restricts the search to a substring within the input\n        string beginning from the leftmost character. If provided a negative\n        value, `len` indicates to ignore the last `len` characters, returning\n        the same output as `str.length + len`. Default: `str.length`.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a `string` ends with the characters of\n        another `string`.\n\n    Examples\n    --------\n    > var bool = endsWith( 'beep', 'ep' )\n    true\n    > bool = endsWith( 'Beep', 'op' )\n    false\n    > bool = endsWith( 'Beep', 'ee', 3 )\n    true\n    > bool = endsWith( 'Beep', 'ee', -1 )\n    true\n    > bool = endsWith( 'beep', '' )\n    true\n\n    See Also\n    --------\n    startsWith\n",
	"ENV": "\nENV\n    An object containing the user environment.\n\n    Examples\n    --------\n    > var user = ENV.USER\n    <string>\n\n    See Also\n    --------\n    ARGV\n",
	"EPS": "\nEPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a double-precision floating-point number.\n\n    Examples\n    --------\n    > EPS\n    2.220446049250313e-16\n\n    See Also\n    --------\n    FLOAT32_EPS\n",
	"EULERGAMMA": "\nEULERGAMMA\n    The Euler-Mascheroni constant.\n\n    Examples\n    --------\n    > EULERGAMMA\n    0.5772156649015329\n\n",
	"err2json": "\nerr2json( error )\n    Returns a JSON representation of an error object.\n\n    The following built-in error types are supported:\n\n    - Error\n    - URIError\n    - ReferenceError\n    - SyntaxError\n    - RangeError\n    - EvalError\n    - TypeError\n\n    The JSON object is guaranteed to have the following properties:\n\n    - type: error type.\n    - message: error message.\n\n    The only standardized cross-platform property is `message`. Depending on the\n    platform, the following properties *may* be present:\n\n    - name: error name.\n    - stack: stack trace.\n    - code: error code (Node.js system errors).\n    - errno: error code string (Node.js system errors).\n    - syscall: string representing the failed system call (Node.js system\n      errors).\n\n    The function also serializes all enumerable properties.\n\n    The implementation supports custom error types and sets the `type` field to\n    the closest built-in error type.\n\n    Parameters\n    ----------\n    error: Error\n        Error to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var err = new Error( 'beep' );\n    > var json = err2json( err )\n    <Object>\n\n    See Also\n    --------\n    reviveError\n",
	"evil": "\nevil( str )\n    Alias for `eval` global.\n\n    A reference to `eval` is treated differently by the compiler. For example,\n    when evaluating code containing block-scoped declarations  (e.g., `let`,\n    `const`, `function`, `class`), the compiler may throw an `error` complaining\n    that block-scoped declarations are not yet supported outside of\n    `strict mode`. One possible workaround is to include `\"use strict\";` in the\n    evaluated code.\n\n    Parameters\n    ----------\n    str: string\n        Code to evaluate.\n\n    Returns\n    -------\n    out: any\n        Returned value if applicable.\n\n    Examples\n    --------\n    > var v = evil( '5*4*3*2*1' );\n    120\n\n",
	"every": "\nevery( collection )\n    Tests whether all elements in a collection are truthy.\n\n    The function immediately returns upon encountering a falsy value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if all elements are truthy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 1, 1, 1, 1, 1 ];\n    > var bool = every( arr )\n    true\n\n    See Also\n    --------\n    any, everyBy, forEach, none, some\n",
	"everyBy": "\neveryBy( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a non-truthy return\n    value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a truthy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = everyBy( arr, positive )\n    true\n\n    See Also\n    --------\n    anyBy, everyByRight, forEach, noneBy, someBy\n",
	"everyByAsync": "\neveryByAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-truthy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `false` as the second argument.\n\n    If all elements succeed, the function calls the `done` callback with `null`\n    as the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\neveryByAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection pass a\n    test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = everyByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByAsync, everyBy, everyByRightAsync, forEachAsync, noneByAsync, someByAsync\n",
	"everyByRight": "\neveryByRight( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a non-truthy return\n    value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a truthy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = everyByRight( arr, positive )\n    true\n\n    See Also\n    --------\n    anyBy, every, everyBy, forEachRight, noneByRight, someByRight\n",
	"everyByRightAsync": "\neveryByRightAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-truthy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `false` as the second argument.\n\n    If all elements succeed, the function calls the `done` callback with `null`\n    as the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\neveryByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection pass a\n    test implemented by a predicate function, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = everyByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByRightAsync, everyByAsync, everyByRight, forEachRightAsync, noneByRightAsync, someByRightAsync\n",
	"exists": "\nexists( path, clbk )\n    Asynchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    clbk: Function\n        Callback to invoke after testing for path existence. A callback may\n        accept a single argument, a boolean indicating whether a path exists, or\n        two arguments, an error argument and a boolean, matching the error-first\n        callback convention used in most asynchronous Node.js APIs.\n\n    Examples\n    --------\n    > function done( error, bool ) { console.log( bool ); };\n    > exists( './beep/boop', done );\n\n\nexists.sync( path )\n    Synchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the path exists.\n\n    Examples\n    --------\n    > var bool = exists.sync( './beep/boop' )\n    <boolean>\n\n    See Also\n    --------\n    readFile, readDir\n",
	"expandContractions": "\nexpandContractions( str )\n    Expands all contractions to their formal equivalents.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with expanded contractions.\n\n    Examples\n    --------\n    > var str = 'I won\\'t be able to get y\\'all out of this one.';\n    > var out = expandContractions( str )\n    'I will not be able to get you all out of this one.'\n\n    > str = 'It oughtn't to be my fault, because, you know, I didn't know';\n    > out = expandContractions( str )\n    'It ought not to be my fault, because, you know, I did not know'\n\n",
	"extname": "\nextname( filename )\n    Returns a filename extension.\n\n    Parameters\n    ----------\n    filename: string\n        Filename.\n\n    Returns\n    -------\n    ext: string\n        Filename extension.\n\n    Examples\n    --------\n    > var ext = extname( 'index.js' )\n    '.js'\n\n    See Also\n    --------\n    dirname\n",
	"fast.abs": "\nfast.abs( x )\n    Computes an absolute value.\n\n    This implementation is not IEEE 754 compliant. If provided `-0`, the\n    function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Absolute value.\n\n    Examples\n    --------\n    > var v = fast.abs( -1.0 )\n    1.0\n    > v = fast.abs( 2.0 )\n    2.0\n    > v = fast.abs( 0.0 )\n    0.0\n    > v = fast.abs( -0.0 )\n    -0.0\n    > v = fast.abs( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs\n",
	"fast.acosh": "\nfast.acosh( x )\n    Computes the hyperbolic arccosine of a number.\n\n    The domain of `x` is restricted to `[1,+infinity)`. If `x < 1`, the function\n    will return `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arccosine (in radians).\n\n    Examples\n    --------\n    > var v = fast.acosh( 1.0 )\n    0.0\n    > v = fast.acosh( 2.0 )\n    ~1.317\n    > v = fast.acosh( NaN )\n    NaN\n\n    // The function overflows for large `x`:\n    > v = fast.acosh( 1.0e308 )\n    Infinity\n\n    See Also\n    --------\n    base.acosh\n",
	"fast.ampbm": "\nfast.ampbm( x, y )\n    Computes the hypotenuse using the alpha max plus beta min algorithm.\n\n    The algorithm computes only an approximation.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = fast.ampbm( 5.0, 12.0 )\n    ~13.5\n\n\nfast.ampbm.factory( alpha, beta, [nonnegative[, ints]] )\n    Returns a function to compute a hypotenuse using the alpha max plus beta min\n    algorithm.\n\n    Parameters\n    ----------\n    alpha: number\n        Alpha.\n\n    beta: number\n        Beta.\n\n    nonnegative: boolean\n        Boolean indicating whether input values are always nonnegative.\n\n    ints: boolean\n        Boolean indicating whether input values are always 32-bit integers.\n\n    Returns\n    -------\n    fcn: Function\n        Function to compute a hypotenuse.\n\n    Examples\n    --------\n    > var hypot = fast.ampbm.factory( 1.0, 0.5 )\n    <Function>\n\n    See Also\n    --------\n    base.hypot\n",
	"fast.asinh": "\nfast.asinh( x )\n    Computes the hyperbolic arcsine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arcsine (in radians).\n\n    Examples\n    --------\n    > var v = fast.asinh( 0.0 )\n    0.0\n    > v = fast.asinh( 2.0 )\n    ~1.444\n    > v = fast.asinh( -2.0 )\n    ~-1.444\n    > v = fast.asinh( NaN )\n    NaN\n\n    // The function overflows for large `x`:\n    > v = fast.asinh( 1.0e200 )\n    Infinity\n\n    // The function underflows for small `x`:\n    > v = fast.asinh( 1.0e-50 )\n    0.0\n\n    See Also\n    --------\n    base.asinh\n",
	"fast.atanh": "\nfast.atanh( x )\n    Computes the hyperbolic arctangent of a number.\n\n    The domain of `x` is restricted to `[-1,1]`. If `|x| > 1`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arctangent (in radians).\n\n    Examples\n    --------\n    > var v = fast.atanh( 0.0 )\n    0.0\n    > v = fast.atanh( 0.9 )\n    ~1.472\n    > v = fast.atanh( 1.0 )\n    Infinity\n    > v = fast.atanh( -1.0 )\n    -Infinity\n    > v = fast.atanh( NaN )\n    NaN\n\n    // The function underflows for small `x`:\n    > v = fast.atanh( 1.0e-17 )\n    0.0\n\n    See Also\n    --------\n    base.atanh\n",
	"fast.hypot": "\nfast.hypot( x, y )\n    Computes the hypotenuse.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = fast.hypot( -5.0, 12.0 )\n    13.0\n\n    // For a sufficiently large `x` and/or `y`, the function overflows:\n    > h = fast.hypot( 1.0e154, 1.0e154 )\n    Infinity\n\n    // For sufficiently small `x` and/or `y`, the function underflows:\n    > h = fast.hypot( 1e-200, 1.0e-200 )\n    0.0\n\n    See Also\n    --------\n    base.hypot\n",
	"fast.log2Uint32": "\nfast.log2Uint32( x )\n    Returns an approximate binary logarithm (base two) of an unsigned 32-bit\n    integer `x`.\n\n    This function provides a performance boost when requiring only approximate\n    computations for integer arguments.\n\n    For high-precision applications, this function is never suitable.\n\n    Parameters\n    ----------\n    x: uinteger\n        Input value.\n\n    Returns\n    -------\n    out: uinteger\n        Integer binary logarithm (base two).\n\n    Examples\n    --------\n    > var v = fast.log2Uint32( 4 >>> 0 )\n    2\n    > v = fast.log2Uint32( 8 >>> 0 )\n    3\n    > v = fast.log2Uint32( 9 >>> 0 )\n    3\n\n    See Also\n    --------\n    base.log2\n",
	"fast.max": "\nfast.max( x, y )\n    Returns the maximum value.\n\n    The function ignores the sign of `0` and does not check for `NaN` arguments.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var v = fast.max( 3.14, 4.2 )\n    4.2\n    > v = fast.max( 3.14, NaN )\n    NaN\n    > v = fast.max( NaN, 3.14 )\n    3.14\n    > v = fast.max( -0.0, +0.0 )\n    +0.0\n    > v = fast.max( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.max\n",
	"fast.min": "\nfast.min( x, y )\n    Returns the minimum value.\n\n    The function ignores the sign of `0` and does not check for `NaN` arguments.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var v = fast.min( 3.14, 4.2 )\n    3.14\n    > v = fast.min( 3.14, NaN )\n    NaN\n    > v = fast.min( NaN, 3.14 )\n    3.14\n    > v = fast.min( -0.0, +0.0 )\n    +0.0\n    > v = fast.min( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.min\n",
	"fast.pow": "\nfast.pow( x, y )\n    Evaluates the exponential function given a signed 32-bit integer exponent.\n\n    This function is not recommended for high-precision applications due to\n    error accumulation.\n\n    If provided a negative exponent, the function first computes the reciprocal\n    of the base and then evaluates the exponential function. This can introduce\n    significant error.\n\n    Parameters\n    ----------\n    x: number\n        Base.\n\n    y: integer\n        Signed 32-bit integer exponent.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var v = fast.pow( 2.0, 3 )\n    8.0\n    > v = fast.pow( 3.14, 0 )\n    1.0\n    > v = fast.pow( 2.0, -2 )\n    0.25\n    > v = fast.pow( 0.0, 0 )\n    1.0\n    > v = fast.pow( -3.14, 1 )\n    -3.14\n    > v = fast.pow( NaN, 0 )\n    NaN\n\n    See Also\n    --------\n    base.pow\n",
	"fast.sqrtUint32": "\nfast.sqrtUint32( x )\n    Returns an approximate square root of an unsigned 32-bit integer `x`.\n\n    Prefer hardware `sqrt` over a software implementation.\n\n    When using a software `sqrt`, this function provides a performance boost\n    when an application requires only approximate computations for integer\n    arguments.\n\n    For applications requiring high-precision, this function is never suitable.\n\n    Parameters\n    ----------\n    x: uinteger\n        Input value.\n\n    Returns\n    -------\n    out: uinteger\n        Integer square root.\n\n    Examples\n    --------\n    > var v = fast.sqrtUint32( 9 >>> 0 )\n    3\n    > v = fast.sqrtUint32( 2 >>> 0 )\n    1\n    > v = fast.sqrtUint32( 3 >>> 0 )\n    1\n    > v = fast.sqrtUint32( 0 >>> 0 )\n    0\n\n    See Also\n    --------\n    base.sqrt\n",
	"FEMALE_FIRST_NAMES_EN": "\nFEMALE_FIRST_NAMES_EN()\n    Returns a list of common female first names in English speaking countries.\n\n    Returns\n    -------\n    out: Array<string>\n        List of common female first names.\n\n    Examples\n    --------\n    > var list = FEMALE_FIRST_NAMES_EN()\n    [ 'Aaren', 'Aarika', 'Abagael', 'Abagail', ... ]\n\n    References\n    ----------\n    - Ward, Grady. 2002. \"Moby Word II.\" <http://www.gutenberg.org/files/3201/\n    3201.txt>.\n\n    See Also\n    --------\n    MALE_FIRST_NAMES_EN\n",
	"find": "\nfind( arr, [options,] clbk )\n    Finds elements in an array-like object that satisfy a test condition.\n\n    Parameters\n    ----------\n    arr: Array|TypedArray|string\n        Object from which elements will be tested.\n\n    options: Object (optional)\n        Options.\n\n    options.k: integer (optional)\n        Limits the number of returned elements. The sign determines the\n        direction in which to search. If set to a negative integer, the function\n        searches from last element to first element. Default: arr.length.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'indices'.\n\n    clbk: Function\n        Function invoked for each array element. If the return value is truthy,\n        the value is considered to have satisfied the test condition.\n\n    Returns\n    -------\n    out: Array\n        Array of indices, element values, or arrays of index-value pairs.\n\n    Examples\n    --------\n    > var data = [ 30, 20, 50, 60, 10 ];\n    > function condition( val ) { return val > 20; };\n    > var vals = find( data, condition )\n    [ 0, 2, 3 ]\n\n    // Limit number of results:\n    > data = [ 30, 20, 50, 60, 10 ];\n    > var opts = { 'k': 2, 'returns': 'values' };\n    > vals = find( data, opts, condition )\n    [ 30, 50 ]\n\n    // Return both indices and values as index-value pairs:\n    > data = [ 30, 20, 50, 60, 10 ];\n    > opts = { 'k': -2, 'returns': '*' };\n    > vals = find( data, opts, condition )\n    [ [ 3, 60 ], [ 2, 50 ] ]\n\n",
	"flattenArray": "\nflattenArray( arr[, options] )\n    Flattens an array.\n\n    Parameters\n    ----------\n    arr: Array\n        Input array.\n\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    Returns\n    -------\n    out: Array\n        Flattened array.\n\n    Examples\n    --------\n    > var arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > var out = flattenArray( arr )\n    [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Set the maximum depth:\n    > arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > out = flattenArray( arr, { 'depth': 2 } )\n    [ 1, 2, 3, [ 4, [ 5 ], 6 ], 7, 8, 9 ]\n    > var bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n    true\n\n    // Deep copy:\n    > arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > out = flattenArray( arr, { 'depth': 2, 'copy': true } )\n    [ 1, 2, 3, [ 4, [ 5 ], 6 ], 7, 8, 9 ]\n    > bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n    false\n\n\nflattenArray.factory( dims[, options] )\n    Returns a function for flattening arrays having specified dimensions.\n\n    The returned function does not validate that input arrays actually have the\n    specified dimensions.\n\n    Parameters\n    ----------\n    dims: Array<integer>\n        Dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenArray.factory( [ 2, 2 ], {\n    ...     'copy': false\n    ... });\n    > var out = flatten( [ [ 1, 2 ], [ 3, 4 ] ] )\n    [ 1, 2, 3, 4 ]\n    > out = flatten( [ [ 5, 6 ], [ 7, 8 ] ] )\n    [ 5, 6, 7, 8 ]\n\n    See Also\n    --------\n    flattenObject\n",
	"flattenObject": "\nflattenObject( obj[, options] )\n    Flattens an object.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Object to flatten.\n\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    out: ObjectLike\n        Flattened object.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flattenObject( obj )\n    { 'a.b.c': 'd' }\n\n    // Set the `depth` option to flatten to a specified depth:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > out = flattenObject( obj, { 'depth': 1 } )\n    { 'a.b': { 'c': 'd' } }\n    > var bool = ( obj.a.b === out[ 'a.b' ] )\n    true\n\n    // Set the `delimiter` option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > out = flattenObject( obj, { 'delimiter': '-|-' } )\n    { 'a-|-b-|-c': 'd' }\n\n    // Flatten arrays:\n    > obj = { 'a': { 'b': [ 1, 2, 3 ] } };\n    > out = flattenObject( obj, { 'flattenArrays': true } )\n    { 'a.b.0': 1, 'a.b.1': 2, 'a.b.2': 3 }\n\n\nflattenObject.factory( options )\n    Returns a function for flattening arrays having specified dimensions.\n\n    The returned function does not validate that input arrays actually have the\n    specified dimensions.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenObject.factory({\n    ...     'depth': 2,\n    ...     'copy': true,\n    ...     'delimiter': '|'\n    ... });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flatten( obj )\n    { 'a|b': { 'c': 'd' } }\n\n    See Also\n    --------\n    flattenArray\n",
	"FLOAT16_EPS": "\nFLOAT16_EPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_EPS\n    0.0009765625\n\n    See Also\n    --------\n    FLOAT32_EPS, EPS\n",
	"FLOAT16_EXPONENT_BIAS": "\nFLOAT16_EXPONENT_BIAS\n    The bias of a half-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT16_EXPONENT_BIAS\n    15\n\n    See Also\n    --------\n    FLOAT32_EXPONENT_BIAS, FLOAT64_EXPONENT_BIAS\n",
	"FLOAT16_MAX": "\nFLOAT16_MAX\n    Maximum half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_MAX\n    65504.0\n\n    See Also\n    --------\n    FLOAT32_MAX, FLOAT64_MAX\n",
	"FLOAT16_MAX_SAFE_INTEGER": "\nFLOAT16_MAX_SAFE_INTEGER\n    Maximum safe half-precision floating-point integer.\n\n    The maximum safe half-precision floating-point integer is given by\n    `2^11 - 1`.\n\n    Examples\n    --------\n    > FLOAT16_MAX_SAFE_INTEGER\n    2047\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n",
	"FLOAT16_MIN_SAFE_INTEGER": "\nFLOAT16_MIN_SAFE_INTEGER\n    Minimum safe half-precision floating-point integer.\n\n    The minimum safe half-precision floating-point integer is given by\n    `-(2^11 - 1)`.\n\n    Examples\n    --------\n    > FLOAT16_MIN_SAFE_INTEGER\n    -2047\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n",
	"FLOAT16_NINF": "\nFLOAT16_NINF\n    Half-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > FLOAT16_NINF\n    -infinity\n\n    See Also\n    --------\n    FLOAT16_PINF, FLOAT32_NINF, NINF\n",
	"FLOAT16_NUM_BYTES": "\nFLOAT16_NUM_BYTES\n    Size (in bytes) of a half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    FLOAT32_NUM_BYTES, FLOAT64_NUM_BYTES\n",
	"FLOAT16_PINF": "\nFLOAT16_PINF\n    Half-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > FLOAT16_PINF\n    infinity\n\n    See Also\n    --------\n    FLOAT16_NINF, FLOAT32_PINF, PINF\n",
	"FLOAT16_PRECISION": "\nFLOAT16_PRECISION\n    Effective number of bits in the significand of a half-precision floating-\n    point number.\n\n    The effective number of bits is `10` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT16_PRECISION\n    11\n\n    See Also\n    --------\n    FLOAT32_PRECISION, FLOAT64_PRECISION\n",
	"FLOAT16_SMALLEST_NORMAL": "\nFLOAT16_SMALLEST_NORMAL\n    Smallest positive normalized half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_SMALLEST_NORMAL\n    6.103515625e-5\n\n    See Also\n    --------\n    FLOAT16_SMALLEST_SUBNORMAL, FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_NORMAL\n",
	"FLOAT16_SMALLEST_SUBNORMAL": "\nFLOAT16_SMALLEST_SUBNORMAL\n    Smallest positive denormalized half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_SMALLEST_SUBNORMAL\n    5.960464477539063e-8\n\n    See Also\n    --------\n    FLOAT16_SMALLEST_NORMAL, FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_SUBNORMAL\n",
	"FLOAT16_SQRT_EPS": "\nFLOAT16_SQRT_EPS\n    Square root of half-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT16_SQRT_EPS\n    0.03125\n\n    See Also\n    --------\n    FLOAT16_EPS, FLOAT32_SQRT_EPS, SQRT_EPS\n",
	"Float32Array": "\nFloat32Array()\n    A typed array constructor which returns a typed array representing an array\n    of single-precision floating-point numbers in the platform byte order.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array()\n    <Float32Array>\n\n\nFloat32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = new Float32Array( arr1 )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = new Float32Array( arr1 )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Float32Array( buf, 0, 4 )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Float32Array.BYTES_PER_ELEMENT\n    4\n\n\nFloat32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Float32Array.name\n    Float32Array\n\n\nFloat32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nFloat32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.byteLength\n    20\n\n\nFloat32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nFloat32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"FLOAT32_EPS": "\nFLOAT32_EPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_EPS\n    1.1920928955078125e-7\n\n    See Also\n    --------\n    EPS\n",
	"FLOAT32_EXPONENT_BIAS": "\nFLOAT32_EXPONENT_BIAS\n    The bias of a single-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT32_EXPONENT_BIAS\n    127\n\n    See Also\n    --------\n    FLOAT16_EXPONENT_BIAS, FLOAT64_EXPONENT_BIAS\n",
	"FLOAT32_MAX": "\nFLOAT32_MAX\n    Maximum single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_MAX\n    3.4028234663852886e+38\n\n    See Also\n    --------\n    FLOAT16_MAX, FLOAT64_MAX\n",
	"FLOAT32_MAX_SAFE_INTEGER": "\nFLOAT32_MAX_SAFE_INTEGER\n    Maximum safe single-precision floating-point integer.\n\n    The maximum safe single-precision floating-point integer is given by\n    `2^24 - 1`.\n\n    Examples\n    --------\n    > FLOAT32_MAX_SAFE_INTEGER\n    16777215\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n",
	"FLOAT32_MIN_SAFE_INTEGER": "\nFLOAT32_MIN_SAFE_INTEGER\n    Minimum safe single-precision floating-point integer.\n\n    The minimum safe single-precision floating-point integer is given by\n    `-(2^24 - 1)`.\n\n    Examples\n    --------\n    > FLOAT32_MIN_SAFE_INTEGER\n    -16777215\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n",
	"FLOAT32_NINF": "\nFLOAT32_NINF\n    Single-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > FLOAT32_NINF\n    -infinity\n\n    See Also\n    --------\n    FLOAT32_PINF, NINF\n",
	"FLOAT32_NUM_BYTES": "\nFLOAT32_NUM_BYTES\n    Size (in bytes) of a single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    FLOAT16_NUM_BYTES, FLOAT64_NUM_BYTES\n",
	"FLOAT32_PINF": "\nFLOAT32_PINF\n    Single-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > FLOAT32_PINF\n    +infinity\n\n    See Also\n    --------\n    FLOAT32_NINF, PINF\n",
	"FLOAT32_PRECISION": "\nFLOAT32_PRECISION\n    Effective number of bits in the significand of a single-precision floating-\n    point number.\n\n    The effective number of bits is `23` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT32_PRECISION\n    24\n\n    See Also\n    --------\n    FLOAT16_PRECISION, FLOAT64_PRECISION\n",
	"FLOAT32_SMALLEST_NORMAL": "\nFLOAT32_SMALLEST_NORMAL\n    Smallest positive normalized single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_SMALLEST_NORMAL\n    1.1754943508222875e-38\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_NORMAL\n",
	"FLOAT32_SMALLEST_SUBNORMAL": "\nFLOAT32_SMALLEST_SUBNORMAL\n    Smallest positive denormalized single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_SMALLEST_SUBNORMAL\n    1.401298464324817e-45\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_SUBNORMAL\n",
	"FLOAT32_SQRT_EPS": "\nFLOAT32_SQRT_EPS\n    Square root of single-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT32_SQRT_EPS\n    0.0003452669770922512\n\n    See Also\n    --------\n    FLOAT32_EPS, SQRT_EPS\n",
	"Float64Array": "\nFloat64Array()\n    A typed array constructor which returns a typed array representing an array\n    of double-precision floating-point numbers in the platform byte order.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array()\n    <Float64Array>\n\n\nFloat64Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat64Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = new Float64Array( arr1 )\n    <Float64Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat64Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = new Float64Array( arr1 )\n    <Float64Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat64Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 32 );\n    > var arr = new Float64Array( buf, 0, 4 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat64Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Float64Array.BYTES_PER_ELEMENT\n    8\n\n\nFloat64Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Float64Array.name\n    Float64Array\n\n\nFloat64Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nFloat64Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.byteLength\n    40\n\n\nFloat64Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.byteOffset\n    0\n\n\nFloat64Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float32Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"FLOAT64_EXPONENT_BIAS": "\nFLOAT64_EXPONENT_BIAS\n    The bias of a double-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT64_EXPONENT_BIAS\n    1023\n\n    See Also\n    --------\n    FLOAT16_EXPONENT_BIAS, FLOAT32_EXPONENT_BIAS\n",
	"FLOAT64_HIGH_WORD_EXPONENT_MASK": "\nFLOAT64_HIGH_WORD_EXPONENT_MASK\n    High word mask for the exponent of a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_HIGH_WORD_EXPONENT_MASK\n    2146435072\n    > base.toBinaryStringUint32( FLOAT64_HIGH_WORD_EXPONENT_MASK )\n    '01111111111100000000000000000000'\n\n    See Also\n    --------\n    FLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n",
	"FLOAT64_HIGH_WORD_SIGNIFICAND_MASK": "\nFLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n    High word mask for the significand of a double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n    1048575\n    > base.toBinaryStringUint32( FLOAT64_HIGH_WORD_SIGNIFICAND_MASK )\n    '00000000000011111111111111111111'\n\n    See Also\n    --------\n    FLOAT64_HIGH_WORD_EXPONENT_MASK\n",
	"FLOAT64_MAX": "\nFLOAT64_MAX\n    Maximum double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX\n    1.7976931348623157e+308\n\n    See Also\n    --------\n    FLOAT16_MAX, FLOAT32_MAX\n",
	"FLOAT64_MAX_BASE10_EXPONENT": "\nFLOAT64_MAX_BASE10_EXPONENT\n    The maximum base 10 exponent for a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE10_EXPONENT\n    308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT\n",
	"FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL": "\nFLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL\n    The maximum base 10 exponent for a subnormal double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL\n    -308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n",
	"FLOAT64_MAX_BASE2_EXPONENT": "\nFLOAT64_MAX_BASE2_EXPONENT\n    The maximum biased base 2 exponent for a double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE2_EXPONENT\n    1023\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n",
	"FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL": "\nFLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL\n    The maximum biased base 2 exponent for a subnormal double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL\n    -1023\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n",
	"FLOAT64_MAX_LN": "\nFLOAT64_MAX_LN\n    Natural logarithm of the maximum double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_LN\n    709.782712893384\n\n    See Also\n    --------\n    FLOAT64_MIN_LN\n",
	"FLOAT64_MAX_SAFE_FIBONACCI": "\nFLOAT64_MAX_SAFE_FIBONACCI\n    Maximum safe Fibonacci number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_FIBONACCI\n    8944394323791464\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_NTH_FIBONACCI\n",
	"FLOAT64_MAX_SAFE_INTEGER": "\nFLOAT64_MAX_SAFE_INTEGER\n    Maximum safe double-precision floating-point integer.\n\n    The maximum safe double-precision floating-point integer is given by\n    `2^53 - 1`.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_INTEGER\n    9007199254740991\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n",
	"FLOAT64_MAX_SAFE_LUCAS": "\nFLOAT64_MAX_SAFE_LUCAS\n    Maximum safe Lucas number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_LUCAS\n    7639424778862807\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_FIBONACCI, FLOAT64_MAX_SAFE_NTH_LUCAS\n",
	"FLOAT64_MAX_SAFE_NTH_FIBONACCI": "\nFLOAT64_MAX_SAFE_NTH_FIBONACCI\n    Maximum safe nth Fibonacci number when stored in double-precision floating-\n    point format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_NTH_FIBONACCI\n    78\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_FIBONACCI\n",
	"FLOAT64_MAX_SAFE_NTH_LUCAS": "\nFLOAT64_MAX_SAFE_NTH_LUCAS\n    Maximum safe nth Lucas number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_NTH_LUCAS\n    76\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_LUCAS, FLOAT64_MAX_SAFE_NTH_FIBONACCI\n",
	"FLOAT64_MIN_BASE10_EXPONENT": "\nFLOAT64_MIN_BASE10_EXPONENT\n    The minimum base 10 exponent for a normalized double-precision floating-\n    point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE10_EXPONENT\n    -308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n",
	"FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL": "\nFLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n    The minimum base 10 exponent for a subnormal double-precision floating-\n    point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n    -324\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n",
	"FLOAT64_MIN_BASE2_EXPONENT": "\nFLOAT64_MIN_BASE2_EXPONENT\n    The minimum biased base 2 exponent for a normalized double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE2_EXPONENT\n    -1022\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n",
	"FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL": "\nFLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n    The minimum biased base 2 exponent for a subnormal double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n    -1074\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n",
	"FLOAT64_MIN_LN": "\nFLOAT64_MIN_LN\n    Natural logarithm of the smallest normalized double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_LN\n    -708.3964185322641\n\n    See Also\n    --------\n    FLOAT64_MAX_LN\n",
	"FLOAT64_MIN_SAFE_INTEGER": "\nFLOAT64_MIN_SAFE_INTEGER\n    Minimum safe double-precision floating-point integer.\n\n    The minimum safe double-precision floating-point integer is given by\n    `-(2^53 - 1)`.\n\n    Examples\n    --------\n    > FLOAT64_MIN_SAFE_INTEGER\n    -9007199254740991\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n",
	"FLOAT64_NUM_BYTES": "\nFLOAT64_NUM_BYTES\n    Size (in bytes) of a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_NUM_BYTES\n    8\n\n    See Also\n    --------\n    FLOAT16_NUM_BYTES, FLOAT32_NUM_BYTES\n",
	"FLOAT64_PRECISION": "\nFLOAT64_PRECISION\n    Effective number of bits in the significand of a double-precision floating-\n    point number.\n\n    The effective number of bits is `52` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT64_PRECISION\n    53\n\n    See Also\n    --------\n    FLOAT16_PRECISION, FLOAT32_PRECISION\n",
	"FLOAT64_SMALLEST_NORMAL": "\nFLOAT64_SMALLEST_NORMAL\n    Smallest positive normalized double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_SMALLEST_NORMAL\n    2.2250738585072014e-308\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_SUBNORMAL\n",
	"FLOAT64_SMALLEST_SUBNORMAL": "\nFLOAT64_SMALLEST_SUBNORMAL\n    Smallest positive denormalized double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_SMALLEST_SUBNORMAL\n    4.940656458412465e-324\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_NORMAL\n",
	"forEach": "\nforEach( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > forEach( arr, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    forEachAsync, forEachRight\n",
	"forEachAsync": "\nforEachAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, onDuration, done )\n    1000\n    2500\n    3000\n    Done.\n\n    // Limit number of concurrent invocations:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, opts, onDuration, done )\n    2500\n    3000\n    1000\n    Done.\n\n    // Process sequentially:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, opts, onDuration, done )\n    3000\n    2500\n    1000\n    Done.\n\n\nforEachAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = forEachAsync.factory( opts, onDuration );\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    Done.\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    Done.\n\n    See Also\n    --------\n    forEach, forEachRightAsync\n",
	"forEachRight": "\nforEachRight( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection, iterating from right to\n    left.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > forEachRight( arr, logger )\n    3: 4\n    2: 3\n    1: 2\n    0: 1\n\n    See Also\n    --------\n    forEach, forEachRightAsync\n",
	"forEachRightAsync": "\nforEachRightAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection, iterating from\n    right to left.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, onDuration, done )\n    1000\n    2500\n    3000\n    Done.\n\n    // Limit number of concurrent invocations:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, opts, onDuration, done )\n    2500\n    3000\n    1000\n    Done.\n\n    // Process sequentially:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, opts, onDuration, done )\n    3000\n    2500\n    1000\n    Done.\n\n\nforEachRightAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = forEachRightAsync.factory( opts, onDuration );\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    Done.\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    Done.\n\n    See Also\n    --------\n    forEachAsync, forEachRight\n",
	"forIn": "\nforIn( obj, fcn[, thisArg] )\n    Invokes a function for each own and inherited enumerable property of an\n    object.\n\n    When invoked, the function is provided three arguments:\n\n    - `value`: object property value\n    - `key`: object property\n    - `obj`: the input object\n\n    To terminate iteration before visiting all properties, the provided function\n    must explicitly return `false`.\n\n    Property iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Input object, including arrays, typed arrays, and other collections.\n\n    fcn: Function\n        The function to invoke for each own enumerable property.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Input object.\n\n    Examples\n    --------\n    > function logger( v, k ) { console.log( '%s: %d', k, v ); };\n    > function Foo() { return this; };\n    > Foo.prototype.beep = 'boop';\n    > var obj = new Foo();\n    > forIn( obj, logger )\n    beep: boop\n\n    See Also\n    --------\n    forEach, forOwn\n",
	"forOwn": "\nforOwn( obj, fcn[, thisArg] )\n    Invokes a function for each own enumerable property of an object.\n\n    When invoked, the function is provided three arguments:\n\n    - `value`: object property value\n    - `key`: object property\n    - `obj`: the input object\n\n    To terminate iteration before visiting all properties, the provided function\n    must explicitly return `false`.\n\n    The function determines the list of own enumerable properties *before*\n    invoking the provided function. Hence, any modifications made to the input\n    object *after* calling this function (such as adding and removing\n    properties) will *not* affect the list of visited properties.\n\n    Property iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Input object, including arrays, typed arrays, and other collections.\n\n    fcn: Function\n        The function to invoke for each own enumerable property.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Input object.\n\n    Examples\n    --------\n    > function logger( v, k ) { console.log( '%s: %d', k, v ); };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\n    > forOwn( obj, logger )\n    a: 1\n    b: 2\n    c: 3\n    d: 4\n\n    See Also\n    --------\n    forEach, forIn\n",
	"FOURTH_PI": "\nFOURTH_PI\n    One fourth times the mathematical constant `π`.\n\n    Examples\n    --------\n    > FOURTH_PI\n    7.85398163397448309616e-1\n\n    See Also\n    --------\n    PI\n",
	"FOURTH_ROOT_EPS": "\nFOURTH_ROOT_EPS\n    Fourth root of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FOURTH_ROOT_EPS\n    0.0001220703125\n\n    See Also\n    --------\n    EPS\n",
	"FRB_SF_WAGE_RIGIDITY": "\nFRB_SF_WAGE_RIGIDITY()\n    Returns wage rates for U.S. workers that have not changed jobs within the\n    year.\n\n    Each array element has the following fields:\n\n    - date: collection date (month/day/year; e.g., 01/01/1980).\n    - all_workers: wage rates for hourly and non-hourly workers.\n    - hourly_workers: wage rates for hourly workers.\n    - non_hourly_workers: wage rates for non-hourly workers.\n    - less_than_high_school: wage rates for workers with less than a high school\n      education.\n    - high_school: wage rates for workers with a high school education.\n    - some_college: wage rates for workers with some college education.\n    - college: wage rates for workers with a college education.\n    - construction: wage rates for workers in the construction industry.\n    - finance: wage rates for workers in the finance industry.\n    - manufacturing: wage rates for workers in the manufacturing industry.\n\n    Returns\n    -------\n    out: Array<Object>\n        Wage rates.\n\n    Examples\n    --------\n    > var data = FRB_SF_WAGE_RIGIDITY()\n    [ {...}, {...}, ... ]\n\n    References\n    ----------\n    - Federal Reserve Bank of San Francisco. 2017. \"Wage Rigidity.\" <http://www.\n    frbsf.org/economic-research/indicators-data/nominal-wage-rigidity/>.\n\n",
	"fromCodePoint": "\nfromCodePoint( pt1[, pt2[, pt3[, ...]]] )\n    Creates a string from a sequence of Unicode code points.\n\n    In addition to multiple arguments, the function also supports providing an\n    array-like object as a single argument containing a sequence of Unicode code\n    points.\n\n    Parameters\n    ----------\n    pt1: ...integer\n        Sequence of Unicode code points.\n\n    Returns\n    -------\n    out: string\n        Output string.\n\n    Examples\n    --------\n    > var out = fromCodePoint( 9731 )\n    '☃'\n    > out = fromCodePoint( [ 9731 ] )\n    '☃'\n    > out = fromCodePoint( 97, 98, 99 )\n    'abc'\n    > out = fromCodePoint( [ 97, 98, 99 ] )\n    'abc'\n\n",
	"functionName": "\nfunctionName( fcn )\n    Returns the name of a function.\n\n    If provided an anonymous function, the function returns an empty `string` or\n    the string `\"anonymous\"`.\n\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    Returns\n    -------\n    out: string\n        Function name.\n\n    Examples\n    --------\n    > var v = functionName( String )\n    'String'\n    > v = functionName( function foo(){} )\n    'foo'\n    > v = functionName( function(){} )\n    '' || 'anonymous'\n\n    See Also\n    --------\n    constructorName\n",
	"functionSequence": "\nfunctionSequence( ...fcn )\n    Returns a pipeline function.\n\n    Starting from the left, the pipeline function evaluates each function and\n    passes the result as an argument to the next function. The result of the\n    rightmost function is the result of the whole.\n\n    Only the leftmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as unary functions.\n\n    Parameters\n    ----------\n    fcn: ...Function\n        Functions to evaluate in sequential order.\n\n    Returns\n    -------\n    out: Function\n        Pipeline function.\n\n    Examples\n    --------\n    > function a( x ) { return 2 * x; };\n    > function b( x ) { return x + 3; };\n    > function c( x ) { return x / 5; };\n    > var f = functionSequence( a, b, c );\n    > var z = f( 6 )\n    3\n\n    See Also\n    --------\n    compose, functionSequenceAsync\n",
	"functionSequenceAsync": "\nfunctionSequenceAsync( ...fcn )\n    Returns a pipeline function.\n\n    Starting from the left, the pipeline function evaluates each function and\n    passes the result as the first argument of the next function. The result of\n    the rightmost function is the result of the whole.\n\n    The last argument for each provided function is a `next` callback which\n    should be invoked upon function completion. The callback accepts two\n    arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the pipeline function suspends execution and immediately calls the\n    `done` callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Only the leftmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as binary functions.\n\n    The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    fcn: ...Function\n        Functions to evaluate in sequential order.\n\n    Returns\n    -------\n    out: Function\n        Pipeline function.\n\n    Examples\n    --------\n    > function a( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, 2*x );\n    ...    }\n    ... };\n    > function b( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x+3 );\n    ...    }\n    ... };\n    > function c( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x/5 );\n    ...    }\n    ... };\n    > var f = functionSequenceAsync( a, b, c );\n    > function done( error, result ) {\n    ...    if ( error ) {\n    ...        throw error;\n    ...    }\n    ...    console.log( result );\n    ... };\n    > f( 6, done )\n    3\n\n    See Also\n    --------\n    composeAsync, functionSequence\n",
	"GAMMA_LANCZOS_G": "\nGAMMA_LANCZOS_G\n    Arbitrary constant `g` to be used in Lanczos approximation functions.\n\n    Examples\n    --------\n    > GAMMA_LANCZOS_G\n    10.900511\n\n",
	"getPrototypeOf": "\ngetPrototypeOf( value )\n    Returns the prototype of a provided object.\n\n    In contrast to the native `Object.getPrototypeOf`, this function does not\n    throw when provided `null` or `undefined`. Instead, similar to when provided\n    any value with *no* inherited properties, the function returns `null`.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: Object|null\n        Prototype.\n\n    Examples\n    --------\n    > var proto = getPrototypeOf( {} )\n    {}\n\n    See Also\n    --------\n    hasPrototype\n",
	"getuid": "\ngetuid()\n    Returns the numeric user identity of the calling process.\n\n    The function only returns a user identity on POSIX platforms. For all other\n    platforms (e.g., Windows and Android), the function returns `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Numeric user identity.\n\n    Examples\n    --------\n    > var uid = getuid();\n\n",
	"GLAISHER": "\nGLAISHER\n    Glaisher-Kinkelin constant.\n\n    Examples\n    --------\n    > GLAISHER\n    1.2824271291006226\n\n",
	"group": "\ngroup( collection, [options,] groups )\n    Groups values as arrays associated with distinct keys.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    groups: Array|TypedArray|Object\n        A collection defining which group an element in the input collection\n        belongs to. Each value in `groups` should resolve to a value which can\n        be serialized as an object key. If provided an object, the object must\n        be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var groups = [ 'b', 'b', 'f', 'b' ];\n    > var out = group( collection, groups )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n    > groups = [ 1, 1, 2, 1 ];\n    > out = group( collection, groups )\n    { '1': [ 'beep', 'boop', 'bar' ], '2': [ 'foo' ] }\n\n    // Output group results as indices:\n    > groups = [ 'b', 'b', 'f', 'b' ];\n    > var opts = { 'returns': 'indices' };\n    > out = group( collection, opts, groups )\n    { '1': [ 0, 1, 3 ], '2': [ 2 ] }\n\n    // Output group results as index-element pairs:\n    > opts = { 'returns': '*' };\n    > out = group( collection, opts, groups )\n    { '1': [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], '2': [ [2, 'foo'] ] }\n\n    See Also\n    --------\n    bifurcate, countBy, groupBy\n",
	"groupBy": "\ngroupBy( collection, [options,] indicator )\n    Groups values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = groupBy( collection, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > out = groupBy( collection, opts, indicator )\n    { 'b': [ 0, 1, 3 ], 'other': [ 2 ] }\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupBy( collection, opts, indicator )\n    { 'b': [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], 'f': [ [2, 'foo' ] ] }\n\n    See Also\n    --------\n    bifurcateBy, countBy, group\n",
	"groupByAsync": "\ngroupByAsync( collection, [options,] indicator, done )\n    Groups values according to an indicator function.\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty object as the second argument.\n\n    The `group` returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, indicator, done )\n    1000\n    2500\n    3000\n    { \"true\": [ 1000, 3000 ], \"false\": [ 2500 ] }\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > groupByAsync( arr, opts, indicator, done )\n    1000\n    2500\n    3000\n    { \"true\": [ 2, 0 ], \"false\": [ 1 ] }\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > groupByAsync( arr, opts, indicator done )\n    1000\n    2500\n    3000\n    { \"true\": [ [ 2, 1000 ], [ 0, 3000 ] ], \"false\": [ [ 1, 2500 ] ] }\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n\n\ngroupByAsync.factory( [options,] indicator )\n    Returns a function which groups values according to an indicator function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A group-by function.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = groupByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    { \"true\": [ 2000, 1000 ], \"false\": [ 1500 ] }\n\n    See Also\n    --------\n    bifurcateByAsync, countByAsync, groupBy\n",
	"groupIn": "\ngroupIn( obj, [options,] indicator )\n    Group values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty object with no prototype, the function returns an empty\n    object.\n\n    The function iterates over an object's own and inherited properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > function Foo() { this.a = 'beep'; this.b = 'boop'; return this; };\n    > Foo.prototype = Object.create( null );\n    > Foo.prototype.c = 'foo';\n    > Foo.prototype.d = 'bar';\n    > var obj = new Foo();\n    > var out = groupIn( obj, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = groupIn( obj, opts, indicator )\n    { 'b': [ 'a', 'b', 'd' ], 'other': [ 'c' ] }\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupIn( obj, opts, indicator )\n    { 'b': [['a','beep'], ['b','boop'], ['d','bar']], 'other': [['c','foo' ]] }\n\n    See Also\n    --------\n    bifurcateIn, groupBy, groupOwn\n",
	"groupOwn": "\ngroupOwn( obj, [options,] indicator )\n    Group values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty object, the function returns an empty object.\n\n    The function iterates over an object's own properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var obj = { 'a': 'beep', 'b': 'boop', 'c': 'foo', 'd': 'bar' };\n    > var out = groupOwn( obj, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = groupOwn( obj, opts, indicator )\n    { 'b': [ 'a', 'b', 'd' ], 'other': [ 'c' ] }\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupOwn( obj, opts, indicator )\n    { 'b': [['a','beep'], ['b','boop'], ['d','bar']], 'other': [['c','foo' ]] }\n\n    See Also\n    --------\n    bifurcateOwn, group, groupBy\n",
	"HALF_LN2": "\nHALF_LN2\n    One half times the natural logarithm of `2`.\n\n    Examples\n    --------\n    > HALF_LN2\n    3.46573590279972654709e-01\n\n    See Also\n    --------\n    LN2\n",
	"HALF_PI": "\nHALF_PI\n    One half times the mathematical constant `π`.\n\n    Examples\n    --------\n    > HALF_PI\n    1.5707963267948966\n\n    See Also\n    --------\n    PI\n",
	"hasClassSupport": "\nhasClassSupport()\n    Tests for native `class` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `class` support.\n\n    Examples\n    --------\n    > var bool = hasClassSupport()\n    <boolean>\n\n",
	"hasFloat32ArraySupport": "\nhasFloat32ArraySupport()\n    Tests for native `Float32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Float32Array` support.\n\n    Examples\n    --------\n    > var bool = hasFloat32ArraySupport()\n    <boolean>\n\n",
	"hasFloat64ArraySupport": "\nhasFloat64ArraySupport()\n    Tests for native `Float64Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Float64Array` support.\n\n    Examples\n    --------\n    > var bool = hasFloat64ArraySupport()\n    <boolean>\n\n",
	"hasFunctionNameSupport": "\nhasFunctionNameSupport()\n    Tests for native function `name` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has function `name` support.\n\n    Examples\n    --------\n    > var bool = hasFunctionNameSupport()\n    <boolean>\n\n",
	"hasGeneratorSupport": "\nhasGeneratorSupport()\n    Tests whether an environment supports native generator functions.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment support generator functions.\n\n    Examples\n    --------\n    > var bool = hasGeneratorSupport()\n    <boolean>\n\n",
	"hasInt16ArraySupport": "\nhasInt16ArraySupport()\n    Tests for native `Int16Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int16Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt16ArraySupport()\n    <boolean>\n\n",
	"hasInt32ArraySupport": "\nhasInt32ArraySupport()\n    Tests for native `Int32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int32Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt32ArraySupport()\n    <boolean>\n\n",
	"hasInt8ArraySupport": "\nhasInt8ArraySupport()\n    Tests for native `Int8Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int8Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt8ArraySupport()\n    <boolean>\n\n",
	"hasMapSupport": "\nhasMapSupport()\n    Tests for native `Map` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Map` support.\n\n    Examples\n    --------\n    > var bool = hasMapSupport()\n    <boolean>\n\n",
	"hasOwnProp": "\nhasOwnProp( value, property )\n    Tests if an object has a specified property.\n\n    In contrast to the native `Object.prototype.hasOwnProperty`, this function\n    does not throw when provided `null` or `undefined`. Instead, the function\n    returns `false`.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified property.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = hasOwnProp( beep, 'boop' )\n    true\n    > bool = hasOwnProp( beep, 'bop' )\n    false\n\n    See Also\n    --------\n    hasProp\n",
	"hasProp": "\nhasProp( value, property )\n    Tests if an object has a specified property, either own or inherited.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified property.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = hasProp( beep, 'boop' )\n    true\n    > bool = hasProp( beep, 'toString' )\n    true\n    > bool = hasProp( beep, 'bop' )\n    false\n\n    See Also\n    --------\n    hasOwnProp\n",
	"hasPrototype": "\nhasPrototype( value, proto )\n    Tests if an object's prototype chain contains a provided prototype.\n\n    The function returns `false` if provided a primitive value.\n\n    This function is generally more robust than the `instanceof` operator (e.g.,\n    where inheritance is performed without using constructors).\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    proto: Object|Function\n        Prototype.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a provided prototype exists in a prototype chain.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > function Bar() { return this; };\n    > inherit( Bar, Foo );\n    > var bar = new Bar();\n    > var bool = hasPrototype( bar, Foo.prototype )\n    true\n\n    See Also\n    --------\n    getPrototypeOf\n",
	"hasProxySupport": "\nhasProxySupport()\n    Tests whether an environment has native `Proxy` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Proxy` support.\n\n    Examples\n    --------\n    > var bool = hasProxySupport()\n    <boolean>\n\n",
	"hasSetSupport": "\nhasSetSupport()\n    Tests for native `Set` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Set` support.\n\n    Examples\n    --------\n    > var bool = hasSetSupport()\n    <boolean>\n\n",
	"hasSymbolSupport": "\nhasSymbolSupport()\n    Tests for native `Symbol` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Symbol` support.\n\n    Examples\n    --------\n    > var bool = hasSymbolSupport()\n    <boolean>\n\n",
	"hasToStringTagSupport": "\nhasToStringTagSupport()\n    Tests for native `toStringTag` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `toStringTag` support.\n\n    Examples\n    --------\n    > var bool = hasToStringTagSupport()\n    <boolean>\n\n",
	"hasUint16ArraySupport": "\nhasUint16ArraySupport()\n    Tests for native `Uint16Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint16Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint16ArraySupport()\n    <boolean>\n\n",
	"hasUint32ArraySupport": "\nhasUint32ArraySupport()\n    Tests for native `Uint32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint32Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint32ArraySupport()\n    <boolean>\n\n",
	"hasUint8ArraySupport": "\nhasUint8ArraySupport()\n    Tests for native `Uint8Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint8Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint8ArraySupport()\n    <boolean>\n\n",
	"hasUint8ClampedArraySupport": "\nhasUint8ClampedArraySupport()\n    Tests for native `Uint8ClampedArray` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint8ClampedArray` support.\n\n    Examples\n    --------\n    > var bool = hasUint8ClampedArraySupport()\n    <boolean>\n\n",
	"hasWeakMapSupport": "\nhasWeakMapSupport()\n    Tests for native `WeakMap` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `WeakMap` support.\n\n    Examples\n    --------\n    > var bool = hasWeakMapSupport()\n    <boolean>\n\n",
	"hasWeakSetSupport": "\nhasWeakSetSupport()\n    Tests for native `WeakSet` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `WeakSet` support.\n\n    Examples\n    --------\n    > var bool = hasWeakSetSupport()\n    <boolean>\n\n",
	"hasWebAssemblySupport": "\nhasWebAssemblySupport()\n    Tests for native WebAssembly support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native WebAssembly support.\n\n    Examples\n    --------\n    > var bool = hasWebAssemblySupport()\n    <boolean>\n\n",
	"HOURS_IN_DAY": "\nHOURS_IN_DAY\n    Number of hours in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var hrs = days * HOURS_IN_DAY\n    75.36\n\n    See Also\n    --------\n    HOURS_IN_WEEK\n",
	"HOURS_IN_WEEK": "\nHOURS_IN_WEEK\n    Number of hours in a week.\n\n    Examples\n    --------\n    > var wkrs = 3.14;\n    > var hrs = wks * HOURS_IN_WEEK\n    527.52\n\n    See Also\n    --------\n    HOURS_IN_DAY\n",
	"hoursInMonth": "\nhoursInMonth( [month[, year]] )\n    Returns the number of hours in a month.\n\n    By default, the function returns the number of hours in the current month of\n    the current year (according to local time). To determine the number of hours\n    for a particular month and year, provide `month` and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also supports providing a `Date` object.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Hours in a month.\n\n    Examples\n    --------\n    > var num = hoursInMonth()\n    <number>\n    > num = hoursInMonth( 2 )\n    <number>\n    > num = hoursInMonth( 2, 2016 )\n    696\n    > num = hoursInMonth( 2, 2017 )\n    672\n\n    // Other ways to supply month:\n    > num = hoursInMonth( 'feb', 2016 )\n    696\n    > num = hoursInMonth( 'february', 2016 )\n    696\n\n    See Also\n    --------\n    hoursInYear\n",
	"hoursInYear": "\nhoursInYear( [value] )\n    Returns the number of hours in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of hours in the current year\n    (according to local time). To determine the number of hours for a particular\n    year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of hours in a year.\n\n    Examples\n    --------\n    > var num = hoursInYear()\n    <number>\n    > num = hoursInYear( 2016 )\n    8784\n    > num = hoursInYear( 2017 )\n    8760\n\n    See Also\n    --------\n    hoursInMonth\n",
	"httpServer": "\nhttpServer( [options,] [requestListener] )\n    Returns a function to create an HTTP server.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.port: integer (optional)\n        Server port. Default: `0` (i.e., randomly assigned).\n\n    options.maxport: integer (optional)\n        Max server port when port hunting. Default: `maxport = port`.\n\n    options.hostname: string (optional)\n        Server hostname.\n\n    options.address: string (optional)\n        Server address. Default: `'127.0.0.1'`.\n\n    requestListener: Function (optional)\n        Request callback.\n\n    Returns\n    -------\n    createServer: Function\n        Function to create an HTTP server.\n\n    Examples\n    --------\n    // Basic usage:\n    > var createServer = httpServer()\n    <Function>\n\n    // Provide a request callback:\n    > function onRequest( request, response ) {\n    >    console.log( request.url );\n    >    response.end( 'OK' );\n    > };\n    > createServer = httpServer( onRequest )\n    <Function>\n\n    // Specify a specific port:\n    > var opts = { 'port': 7331 };\n    > createServer = httpServer( opts )\n    <Function>\n\n\ncreateServer( done )\n    Creates an HTTP server.\n\n    Parameters\n    ----------\n    done: Function\n        Callback to invoke after creating a server.\n\n    Examples\n    --------\n    > function done( error, server ) {\n    >    if ( error ) {\n    >        throw error;\n    >    }\n    >    console.log( 'Success!' );\n    >    server.close();\n    > };\n    > var createServer = httpServer();\n    > createServer( done );\n\n",
	"identity": "\nidentity( x )\n    Identity function.\n\n    Parameters\n    ----------\n    x: any\n        Input value.\n\n    Returns\n    -------\n    out: any\n        Input value.\n\n    Examples\n    --------\n    > var v = identity( 3.14 )\n    3.14\n\n    See Also\n    --------\n    constantFunction\n",
	"ifelse": "\nifelse( bool, x, y )\n    If a condition is truthy, returns `x`; otherwise, returns `y`.\n\n    Parameters\n    ----------\n    bool: boolean\n        Condition.\n\n    x: any\n        Value to return if a condition is truthy.\n\n    y: any\n        Value to return if a condition is falsy.\n\n    Returns\n    -------\n    z: any\n        Either `x` or `y`.\n\n    Examples\n    --------\n    > var z = ifelse( true, 1.0, -1.0 )\n    1.0\n    > z = ifelse( false, 1.0, -1.0 )\n    -1.0\n\n    See Also\n    --------\n    ifelseAsync, ifthen\n",
	"ifelseAsync": "\nifelseAsync( predicate, x, y, done )\n    If a predicate function returns a truthy value, returns `x`; otherwise,\n    returns `y`.\n\n    A predicate function is provided a single argument:\n\n    - clbk: callback to invoke upon predicate completion\n\n    The callback function accepts two arguments:\n\n    - error: error object\n    - bool: condition used to determine whether to invoke `x` or `y`\n\n    The `done` callback is invoked upon function completion and is provided at\n    most two arguments:\n\n    - error: error object\n    - result: either `x` or `y`\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function.\n\n    x: any\n        Value to return if a condition is truthy.\n\n    y: any\n        Value to return if a condition is falsy.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function predicate( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, true );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > ifelseAsync( predicate, 'beep', 'boop', done )\n    'beep'\n\n    See Also\n    --------\n    ifelse, ifthenAsync\n",
	"ifthen": "\nifthen( bool, x, y )\n    If a condition is truthy, invoke `x`; otherwise, invoke `y`.\n\n    Parameters\n    ----------\n    bool: boolean\n        Condition.\n\n    x: Function\n        Function to invoke if a condition is truthy.\n\n    y: Function\n        Function to invoke if a condition is falsy.\n\n    Returns\n    -------\n    z: any\n        Return value of either `x` or `y`.\n\n    Examples\n    --------\n    > function x() { return 1.0; };\n    > function y() { return -1.0; };\n    > var z = ifthen( true, x, y )\n    1.0\n    > z = ifthen( false, x, y )\n    -1.0\n\n    See Also\n    --------\n    ifelse, ifthenAsync\n",
	"ifthenAsync": "\nifthenAsync( predicate, x, y, done )\n    If a predicate function returns a truthy value, invokes `x`; otherwise,\n    invokes `y`.\n\n    The predicate function is provided a single argument:\n\n    - clbk: callback to invoke upon predicate function completion\n\n    The predicate function callback accepts two arguments:\n\n    - error: error object\n    - bool: condition used to determine whether to invoke `x` or `y`\n\n    Both `x` and `y` are provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the `done` callback is invoked with its\n    first argument as `null` and all other provided arguments.\n\n    If the error argument is truthy, the `done` callback is invoked with only an\n    error argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function.\n\n    x: Function\n        Function to invoke if a condition is truthy.\n\n    y: Function\n        Function to invoke if a condition is falsy.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function predicate( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, false );\n    ...     }\n    ... };\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'beep' );\n    ...     }\n    ... };\n    > function y( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'boop' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > ifthenAsync( predicate, x, y, done )\n    'boop'\n\n    See Also\n    --------\n    ifelseAsync, ifthen\n",
	"imag": "\nimag( z )\n    Returns the imaginary component of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    im: number\n        Imaginary component.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var im = imag( z )\n    3.0\n\n    See Also\n    --------\n    real, reim\n",
	"IMG_ACANTHUS_MOLLIS": "\nIMG_ACANTHUS_MOLLIS()\n    Returns a `Buffer` containing image data of Karl Blossfeldt's gelatin silver\n    print *Acanthus mollis*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_ACANTHUS_MOLLIS()\n    <Buffer>\n\n    References\n    ----------\n    - Blossfeldt, Karl. 1928. *Acanthus mollis*. <http://www.getty.edu/art/\n    collection/objects/35443/karl-blossfeldt-acanthus-mollis-german-1928/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_ALLIUM_OREOPHILUM\n",
	"IMG_AIRPLANE_FROM_ABOVE": "\nIMG_AIRPLANE_FROM_ABOVE()\n    Returns a `Buffer` containing image data of Fédèle Azari's gelatin silver\n    print of an airplane, viewed from above looking down.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_AIRPLANE_FROM_ABOVE()\n    <Buffer>\n\n    References\n    ----------\n    - Azari, Fédèle. 1929. (no title). <http://www.getty.edu/art/collection/\n    objects/134512/fedele-azari-airplane-viewed-from-above-looking-down-italian-\n    1914-1929/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_ALLIUM_OREOPHILUM": "\nIMG_ALLIUM_OREOPHILUM()\n    Returns a `Buffer` containing image data of Karl Blossfeldt's gelatin silver\n    print *Allium ostrowskianum*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_ALLIUM_OREOPHILUM()\n    <Buffer>\n\n    References\n    ----------\n    - Blossfeldt, Karl. 1928. *Allium ostrowskianum*. <http://www.getty.edu/art/\n    collection/objects/35448/karl-blossfeldt-allium-ostrowskianum-\n    knoblauchpflanze-german-1928/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_ACANTHUS_MOLLIS\n",
	"IMG_BLACK_CANYON": "\nIMG_BLACK_CANYON()\n    Returns a `Buffer` containing image data of Timothy H. O'Sullivan's albumen\n    silver print *Black Cañon, Colorado River, From Camp 8, Looking Above*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_BLACK_CANYON()\n    <Buffer>\n\n    References\n    ----------\n    - O'Sullivan, Timothy H. 1871. *Black Cañon, Colorado River, From Camp 8,\n    Looking Above*. <http://www.getty.edu/art/collection/objects/40209/timothy-\n    h-o'sullivan-black-canon-colorado-river-from-camp-8-looking-above-american-\n    1871/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_DUST_BOWL_HOME": "\nIMG_DUST_BOWL_HOME()\n    Returns a `Buffer` containing image data of Dorothea Lange's gelatin silver\n    print of an abandoned Dust Bowl home.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_DUST_BOWL_HOME()\n    <Buffer>\n\n    References\n    ----------\n    - Lange, Dorothea. 1940. *Abandoned Dust Bowl Home*. <http://www.getty.edu/\n    art/collection/objects/128362/dorothea-lange-abandoned-dust-bowl-home-\n    american-about-1935-1940/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_FRENCH_ALPINE_LANDSCAPE": "\nIMG_FRENCH_ALPINE_LANDSCAPE()\n    Returns a `Buffer` containing image data of Adolphe Braun's carbon print of\n    a French alpine landscape.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_FRENCH_ALPINE_LANDSCAPE()\n    <Buffer>\n\n    References\n    ----------\n    - Braun, Adolphe. 1870. (no title). <http://www.getty.edu/art/collection/\n    objects/54324/adolphe-braun-alpine-landscape-french-1865-1870/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_LOCOMOTION_HOUSE_CAT": "\nIMG_LOCOMOTION_HOUSE_CAT()\n    Returns a `Buffer` containing image data of Eadweard J. Muybridge's\n    collotype of a house cat (24 views).\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_LOCOMOTION_HOUSE_CAT()\n    <Buffer>\n\n    References\n    ----------\n    - Muybridge, Eadweard J. 1887. *Animal Locomotion*. <http://www.getty.edu/\n    art/collection/objects/40918/eadweard-j-muybridge-animal-locomotion-american\n    -1887/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_LOCOMOTION_NUDE_MALE\n",
	"IMG_LOCOMOTION_NUDE_MALE": "\nIMG_LOCOMOTION_NUDE_MALE()\n    Returns a `Buffer` containing image data of Eadweard J. Muybridge's\n    collotype of a nude male moving in place (48 views).\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_LOCOMOTION_NUDE_MALE()\n    <Buffer>\n\n    References\n    ----------\n    - Muybridge, Eadweard J. 1887. *Animal Locomotion*. <http://www.getty.edu/\n    art/collection/objects/40918/eadweard-j-muybridge-animal-locomotion-american\n    -1887/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_LOCOMOTION_HOUSE_CAT\n",
	"IMG_MARCH_PASTORAL": "\nIMG_MARCH_PASTORAL()\n    Returns a `Buffer` containing image data of Peter Henry Emerson's\n    photogravure of sheep in a pastoral setting.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_MARCH_PASTORAL()\n    <Buffer>\n\n    References\n    ----------\n    - Emerson, Peter Henry. 1888. *A March Pastoral*. <http://www.getty.edu/art/\n    collection/objects/141994/peter-henry-emerson-a-march-pastoral-suffolk-\n    british-1888/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"IMG_NAGASAKI_BOATS": "\nIMG_NAGASAKI_BOATS()\n    Returns a `Buffer` containing image data of Felice Beato's albumen silver\n    print of boats in a river in Nagasaki.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_NAGASAKI_BOATS()\n    <Buffer>\n\n    References\n    ----------\n    - Beato, Felice. 1865. (no title). <http://www.getty.edu/art/collection/\n    objects/241797/felice-beato-boats-in-river-nagasaki-british-about-1865/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n",
	"incrspace": "\nincrspace( start, stop[, increment] )\n    Generates a linearly spaced numeric array using a provided increment.\n\n    If an `increment` is not provided, the default `increment` is `1`.\n\n    The output array is guaranteed to include the `start` value but does not\n    include the `stop` value.\n\n    Parameters\n    ----------\n    start: number\n        First array value.\n\n    stop: number\n        Array element bound.\n\n    increment: number (optional)\n        Increment. Default: `1`.\n\n    Returns\n    -------\n    arr: Array\n        Linearly spaced numeric array.\n\n    Examples\n    --------\n    > var arr = incrspace( 0, 11, 2 )\n    [ 0, 2, 4, 6, 8, 10 ]\n\n    See Also\n    --------\n    linspace, logspace\n",
	"indexOf": "\nindexOf( arr, searchElement[, fromIndex] )\n    Returns the first index at which a given element can be found.\n\n    Search is performed using *strict equality* comparison.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Array-like object.\n\n    searchElement: any\n        Element to find.\n\n    fromIndex: integer (optional)\n        Starting index (if negative, the start index is determined relative to\n        last element).\n\n    Returns\n    -------\n    out: integer\n        Index or -1.\n\n    Examples\n    --------\n    // Basic usage:\n    > var arr = [ 4, 3, 2, 1 ];\n    > var idx = indexOf( arr, 3 );\n    1\n    > arr = [ 4, 3, 2, 1 ];\n    > idx = indexOf( arr, 5 );\n    -1\n\n    // Using a `fromIndex`:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n    > idx = indexOf( arr, 2, 3 )\n    5\n\n    // `fromIndex` which exceeds `array` length:\n    > arr = [ 1, 2, 3, 4, 2, 5 ];\n    > idx = indexOf( arr, 2, 10 )\n    -1\n\n    // Negative `fromIndex`:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];\n    > idx = indexOf( arr, 2, -4 )\n    5\n    > idx = indexOf( arr, 2, -1 )\n    7\n\n    // Negative `fromIndex` exceeding input `array` length:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n    > idx = indexOf( arr, 2, -10 )\n    1\n\n    // Array-like objects:\n    > var str = 'bebop';\n    > idx = indexOf( str, 'o' )\n    3\n\n",
	"inherit": "\ninherit( ctor, superCtor )\n    Prototypical inheritance by replacing the prototype of one constructor with\n    the prototype of another constructor.\n\n    This function is not designed to work with ES2015/ES6 classes. For\n    ES2015/ES6 classes, use `class` with `extends`.\n\n    Parameters\n    ----------\n    ctor: Object|Function\n        Constructor which will inherit.\n\n    superCtor: Object|Function\n        Super (parent) constructor.\n\n    Returns\n    -------\n    out: Object|Function\n        Child constructor.\n\n    Examples\n    --------\n    // Create a parent constructor:\n    > function Foo() { return this; };\n    > Foo.prototype.beep = function beep() { return 'boop'; };\n\n    // Create a child constructor:\n    > function Bar() { Foo.call( this ); return this; };\n\n    // Setup inheritance:\n    > inherit( Bar, Foo );\n    > var bar = new Bar();\n    > var v = bar.beep()\n    'boop'\n\n",
	"inmap": "\ninmap( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection and updates the\n    collection in-place.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    fcn: Function\n        Function to invoke for each element in the input collection. The\n        function's return value is used to update the collection in-place.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function foo( v, i ) { return v * i; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = inmap( arr, foo )\n    [ 0.0, 2.0, 6.0 ]\n    > var bool = ( out === arr )\n    true\n\n    See Also\n    --------\n    forEach, inmapRight\n",
	"inmapAsync": "\ninmapAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection and updates a\n    collection in-place.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: value used to update the collection\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling. Note, however, that the function\n    may have mutated an input collection during prior invocations, resulting in\n    a partially mutated collection.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, fcn, done )\n    1000\n    2500\n    3000\n    true\n    [ 0, 2500, 2000 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, opts, fcn, done )\n    2500\n    3000\n    1000\n    true\n    [ 0, 2500, 2000 ]\n\n    // Process sequentially:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, opts, fcn, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 2000 ]\n\n\ninmapAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection and updates a collection in-place.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = inmapAsync.factory( opts, fcn );\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 2000 ]\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n    [ 0, 1500, 2000 ]\n\n    See Also\n    --------\n    forEachAsync, inmap, inmapRightAsync\n",
	"inmapRight": "\ninmapRight( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection and updates the\n    collection in-place, iterating from right to left.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    fcn: Function\n        Function to invoke for each element in the input collection. The\n        function's return value is used to update the collection in-place.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function foo( v, i ) { console.log( '%s: %d', i, v ); return v * i; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = inmapRight( arr, foo )\n    2: 3.0\n    1: 2.0\n    0: 1.0\n    [ 0.0, 2.0, 6.0 ]\n    > var bool = ( out === arr )\n    true\n\n    See Also\n    --------\n    forEachRight, inmap\n",
	"inmapRightAsync": "\ninmapRightAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection and updates a\n    collection in-place, iterating from right to left.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: value used to update the collection\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling. Note, however, that the function\n    may have mutated an input collection during prior invocations, resulting in\n    a partially mutated collection.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, fcn, done )\n    1000\n    2500\n    3000\n    true\n    [ 0, 2500, 6000 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, opts, fcn, done )\n    2500\n    3000\n    1000\n    true\n    [ 0, 2500, 6000 ]\n\n    // Process sequentially:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, opts, fcn, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 6000 ]\n\n\ninmapRightAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection and updates a collection in-place, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = inmapRightAsync.factory( opts, fcn );\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 6000 ]\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n    [ 0, 1500, 4000 ]\n\n    See Also\n    --------\n    forEachRightAsync, inmapAsync, inmapRight\n",
	"instanceOf": "\ninstanceOf( value, constructor )\n    Tests whether a value has in its prototype chain a specified constructor as\n    a prototype property.\n\n    While the prototype of an `object` created using object literal notion is\n    `undefined`, the function returns `true` when provided an `object` literal\n    and the `Object` constructor. This maintains consistent behavior with the\n    `instanceof` operator.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    constructor: Function\n        Constructor.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an instance of a provided constructor.\n\n    Examples\n    --------\n    > var bool = instanceOf( [], Array )\n    true\n    > bool = instanceOf( {}, Object )\n    true\n    > bool = instanceOf( null, Object )\n    false\n\n    See Also\n    --------\n    hasPrototype, constructorName, inherit, typeOf\n",
	"Int16Array": "\nInt16Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 16-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array()\n    <Int16Array>\n\n\nInt16Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 )\n    <Int16Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt16Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int16Array( arr1 )\n    <Int16Array>[ 5, 5, 5 ]\n\n\nInt16Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int16Array( arr1 )\n    <Int16Array>[ 5, 5, 5 ]\n\n\nInt16Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 8 );\n    > var arr = new Int16Array( buf, 0, 4 )\n    <Int16Array>[ 0, 0, 0, 0 ]\n\n\nInt16Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int16Array.BYTES_PER_ELEMENT\n    2\n\n\nInt16Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int16Array.name\n    Int16Array\n\n\nInt16Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt16Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.byteLength\n    10\n\n\nInt16Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt16Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float32Array, Float64Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"INT16_MAX": "\nINT16_MAX\n    Maximum signed 16-bit integer.\n\n    The maximum signed 16-bit integer is given by `2^15 - 1`.\n\n    Examples\n    --------\n    > INT16_MAX\n    32767\n\n    See Also\n    --------\n    INT16_MIN\n",
	"INT16_MIN": "\nINT16_MIN\n    Minimum signed 16-bit integer.\n\n    The minimum signed 16-bit integer is given by `-(2^15)`.\n\n    Examples\n    --------\n    > INT16_MIN\n    -32768\n\n    See Also\n    --------\n    INT16_MAX\n",
	"INT16_NUM_BYTES": "\nINT16_NUM_BYTES\n    Size (in bytes) of a 16-bit signed integer.\n\n    Examples\n    --------\n    > INT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    INT32_NUM_BYTES, INT8_NUM_BYTES, UINT16_NUM_BYTES\n",
	"Int32Array": "\nInt32Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 32-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array()\n    <Int32Array>\n\n\nInt32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 )\n    <Int32Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int32Array( arr1 )\n    <Int32Array>[ 5, 5, 5 ]\n\n\nInt32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int32Array( arr1 )\n    <Int32Array>[ 5, 5, 5 ]\n\n\nInt32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Int32Array( buf, 0, 4 )\n    <Int32Array>[ 0, 0, 0, 0 ]\n\n\nInt32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int32Array.BYTES_PER_ELEMENT\n    4\n\n\nInt32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int32Array.name\n    Int32Array\n\n\nInt32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.byteLength\n    20\n\n\nInt32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float32Array, Float64Array, Int16Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"INT32_MAX": "\nINT32_MAX\n    Maximum signed 32-bit integer.\n\n    The maximum signed 32-bit integer is given by `2^31 - 1`.\n\n    Examples\n    --------\n    > INT32_MAX\n    2147483647\n\n    See Also\n    --------\n    INT32_MIN\n",
	"INT32_MIN": "\nINT32_MIN\n    Minimum signed 32-bit integer.\n\n    The minimum signed 32-bit integer is given by `-(2^31)`.\n\n    Examples\n    --------\n    > INT32_MIN\n    -2147483648\n\n    See Also\n    --------\n    INT32_MAX\n",
	"INT32_NUM_BYTES": "\nINT32_NUM_BYTES\n    Size (in bytes) of a 32-bit signed integer.\n\n    Examples\n    --------\n    > INT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    INT16_NUM_BYTES, INT8_NUM_BYTES, UINT32_NUM_BYTES\n",
	"Int8Array": "\nInt8Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 8-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array()\n    <Int8Array>\n\n\nInt8Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 )\n    <Int8Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt8Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int8Array( arr1 )\n    <Int8Array>[ 5, 5, 5 ]\n\n\nInt8Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int8Array( arr1 )\n    <Int8Array>[ 5, 5, 5 ]\n\n\nInt8Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Int8Array( buf, 0, 4 )\n    <Int8Array>[ 0, 0, 0, 0 ]\n\n\nInt8Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int8Array.BYTES_PER_ELEMENT\n    1\n\n\nInt8Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int8Array.name\n    Int8Array\n\n\nInt8Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt8Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.byteLength\n    5\n\n\nInt8Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt8Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float32Array, Float64Array, Int16Array, Int32Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"INT8_MAX": "\nINT8_MAX\n    Maximum signed 8-bit integer.\n\n    The maximum signed 8-bit integer is given by `2^7 - 1`.\n\n    Examples\n    --------\n    > INT8_MAX\n    127\n\n    See Also\n    --------\n    INT8_MIN\n",
	"INT8_MIN": "\nINT8_MIN\n    Minimum signed 8-bit integer.\n\n    The minimum signed 8-bit integer is given by `-(2^7)`.\n\n    Examples\n    --------\n    > INT8_MIN\n    -128\n\n    See Also\n    --------\n    INT8_MAX\n",
	"INT8_NUM_BYTES": "\nINT8_NUM_BYTES\n    Size (in bytes) of an 8-bit signed integer.\n\n    Examples\n    --------\n    > INT8_NUM_BYTES\n    1\n\n    See Also\n    --------\n    INT16_NUM_BYTES, INT32_NUM_BYTES, UINT8_NUM_BYTES\n",
	"isAbsolutePath": "\nisAbsolutePath( value )\n    Tests if a value is an absolute path.\n\n    Function behavior is platform-specific. On Windows platforms, the function\n    is equal to `.win32()`. On POSIX platforms, the function is equal to\n    `.posix()`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an absolute path.\n\n    Examples\n    --------\n    // Windows environment:\n    > var bool = isAbsolutePath( 'C:\\\\foo\\\\bar\\\\baz' )\n    true\n\n    // POSIX environment:\n    > bool = isAbsolutePath( '/foo/bar/baz' )\n    true\n\n\nisAbsolutePath.posix( value )\n    Tests if a value is a POSIX absolute path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a POSIX absolute path.\n\n    Examples\n    --------\n    > var bool = isAbsolutePath.posix( '/foo/bar/baz' )\n    true\n    > bool = isAbsolutePath.posix( 'foo/bar/baz' )\n    false\n\n\nisAbsolutePath.win32( value )\n    Tests if a value is a Windows absolute path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a Windows absolute path.\n\n    Examples\n    --------\n    > var bool = isAbsolutePath.win32( 'C:\\\\foo\\\\bar\\\\baz' )\n    true\n    > bool = isAbsolutePath.win32( 'foo\\\\bar\\\\baz' )\n    false\n\n    See Also\n    --------\n    isRelativePath\n",
	"isAlphagram": "\nisAlphagram( value )\n    Tests if a value is an alphagram (i.e., a sequence of characters arranged in\n    alphabetical order).\n\n    The function first checks that an input value is a string before validating\n    that the value is an alphagram. For non-string values, the function returns\n    `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an alphagram.\n\n    Examples\n    --------\n    > var out = isAlphagram( 'beep' )\n    true\n    > out = isAlphagram( 'zba' )\n    false\n    > out = isAlphagram( '' )\n    false\n\n    See Also\n    --------\n    isAnagram\n",
	"isAnagram": "\nisAnagram( str, value )\n    Tests if a value is an anagram.\n\n    Parameters\n    ----------\n    str: string\n        Comparison string.\n\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an anagram.\n\n    Examples\n    --------\n    > var str1 = 'I am a weakish speller';\n    > var str2 = 'William Shakespeare';\n    > var bool = isAnagram( str1, str2 )\n    true\n    > bool = isAnagram( 'bat', 'tabba' )\n    false\n\n    See Also\n    --------\n    isAlphagram\n",
	"isArguments": "\nisArguments( value )\n    Tests if a value is an `arguments` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `arguments` object.\n\n    Examples\n    --------\n    > function foo() { return arguments; };\n    > var bool = isArguments( foo() )\n    true\n    > bool = isArguments( [] )\n    false\n\n",
	"isArray": "\nisArray( value )\n    Tests if a value is an array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array.\n\n    Examples\n    --------\n    > var bool = isArray( [] )\n    true\n    > bool = isArray( {} )\n    false\n\n    See Also\n    --------\n    isArrayLike\n",
	"isArrayArray": "\nisArrayArray( value )\n    Tests if a value is an array of arrays.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of arrays.\n\n    Examples\n    --------\n    > var bool = isArrayArray( [ [], [] ] )\n    true\n    > bool = isArrayArray( [ {}, {} ] )\n    false\n    > bool = isArrayArray( [] )\n    false\n\n",
	"isArrayBuffer": "\nisArrayBuffer( value )\n    Tests if a value is an `ArrayBuffer`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `ArrayBuffer`.\n\n    Examples\n    --------\n    > var bool = isArrayBuffer( new ArrayBuffer( 10 ) )\n    true\n    > bool = isArrayBuffer( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray\n",
	"isArrayLength": "\nisArrayLength( value )\n    Tests if a value is a valid array length.\n\n    A valid `length` property for an `Array` is any integer value on the\n    interval `[0, 2^32-1]`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a valid array length.\n\n    Examples\n    --------\n    > var bool = isArrayLength( 5 )\n    true\n    > bool = isArrayLength( 2.0e200 )\n    false\n    > bool = isArrayLength( -3.14 )\n    false\n    > bool = isArrayLength( null )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isArrayLike": "\nisArrayLike( value )\n    Tests if a value is array-like.\n\n    If provided a `string`, the function returns `true`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is array-like.\n\n    Examples\n    --------\n    > var bool = isArrayLike( [] )\n    true\n    > bool = isArrayLike( { 'length': 10 } )\n    true\n    > bool = isArrayLike( 'beep' )\n    true\n    > bool = isArrayLike( null )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLikeObject\n",
	"isArrayLikeObject": "\nisArrayLikeObject( value )\n    Tests if a value is an array-like object.\n\n    If provided a `string`, the function returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object.\n\n    Examples\n    --------\n    > var bool = isArrayLikeObject( [] )\n    true\n    > bool = isArrayLikeObject( { 'length': 10 } )\n    true\n    > bool = isArrayLikeObject( 'beep' )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike\n",
	"isASCII": "\nisASCII( str )\n    Tests whether a character belongs to the ASCII character set and whether\n    this is true for all characters in a provided string.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string has all ASCII characters.\n\n    Examples\n    --------\n    > var str = 'beep boop';\n    > var bool = isASCII( str )\n    true\n    > bool = isASCII( fromCodePoint( 130 ) )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isBetween": "\nisBetween( value, a, b[, left, right] )\n    Tests if a value is between two values.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    a: any\n        Left comparison value.\n\n    b: any\n        Right comparison value.\n\n    left: string (optional)\n        Indicates whether the left comparison value is inclusive. Must be either\n        'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    right: string (optional)\n        Indicates whether the right comparison value is inclusive. Must be\n        either 'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is between two values.\n\n    Examples\n    --------\n    > var bool = isBetween( 3.14, 3.0, 4.0 )\n    true\n    > bool = isBetween( 3.0, 3.0, 4.0 )\n    true\n    > bool = isBetween( 4.0, 3.0, 4.0 )\n    true\n    > bool = isBetween( 3.0, 3.14, 4.0 )\n    false\n    > bool = isBetween( 3.14, 3.14, 4.0, 'open', 'closed' )\n    false\n    > bool = isBetween( 3.14, 3.0, 3.14, 'closed', 'open' )\n    false\n\n    See Also\n    --------\n    isBetweenArray\n",
	"isBetweenArray": "\nisBetweenArray( value, a, b[, left, right] )\n    Tests if a value is an array-like object where every element is between two\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    a: any\n        Left comparison value.\n\n    b: any\n        Right comparison value.\n\n    left: string (optional)\n        Indicates whether the left comparison value is inclusive. Must be either\n        'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    right: string (optional)\n        Indicates whether the right comparison value is inclusive. Must be\n        either 'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object where every\n        element is between two values.\n\n    Examples\n    --------\n    > var arr = [ 3.0, 3.14, 4.0 ];\n    > var bool = isBetweenArray( arr, 3.0, 4.0 )\n    true\n    > bool = isBetweenArray( arr, 3.14, 4.0 )\n    false\n    > bool = isBetweenArray( arr, 3.0, 3.14 )\n    false\n    > bool = isBetweenArray( arr, 3.0, 4.0, 'open', 'closed' )\n    false\n    > bool = isBetweenArray( arr, 3.0, 4.0, 'closed', 'open' )\n    false\n\n    See Also\n    --------\n    isBetween\n",
	"isBinaryString": "\nisBinaryString( value )\n    Tests if a value is a binary string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a binary string.\n\n    Examples\n    --------\n    > var bool = isBinaryString( '1000101' )\n    true\n    > bool = isBinaryString( 'beep' )\n    false\n    > bool = isBinaryString( '' )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isBoolean": "\nisBoolean( value )\n    Tests if a value is a boolean.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean.\n\n    Examples\n    --------\n    > var bool = isBoolean( false )\n    true\n    > bool = isBoolean( new Boolean( false ) )\n    true\n\n\nisBoolean.isPrimitive( value )\n    Tests if a value is a boolean primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean primitive.\n\n    Examples\n    --------\n    > var bool = isBoolean.isPrimitive( true )\n    true\n    > bool = isBoolean.isPrimitive( false )\n    true\n    > bool = isBoolean.isPrimitive( new Boolean( true ) )\n    false\n\n\nisBoolean.isObject( value )\n    Tests if a value is a boolean object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean object.\n\n    Examples\n    --------\n    > var bool = isBoolean.isObject( true )\n    false\n    > bool = isBoolean.isObject( new Boolean( false ) )\n    true\n\n",
	"isBooleanArray": "\nisBooleanArray( value )\n    Tests if a value is an array-like object of booleans.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object of booleans.\n\n    Examples\n    --------\n    > var bool = isBooleanArray( [ true, false, true ] )\n    true\n    > bool = isBooleanArray( [ true, 'abc', false ] )\n    false\n\n\nisBooleanArray.primitives( value )\n    Tests if a value is an array-like object containing only boolean primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        boolean primitives.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.primitives( [ true, false ] )\n    true\n    > bool = isBooleanArray.primitives( [ false, new Boolean( true ) ] )\n    false\n\n\nisBooleanArray.objects( value )\n    Tests if a value is an array-like object containing only Boolean objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        Boolean objects.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.objects( [ new Boolean( false ), true ] )\n    false\n    > bool = isBooleanArray.objects( [ new Boolean( false ), new Boolean( true ) ] )\n    true\n\n",
	"isBuffer": "\nisBuffer( value )\n    Tests if a value is a `Buffer` instance.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Buffer` instance.\n\n    Examples\n    --------\n    > var bool = isBuffer( new Buffer( 'beep' ) )\n    true\n    > bool = isBuffer( new Buffer( [ 1, 2, 3, 4 ] ) )\n    true\n    > bool = isBuffer( {} )\n    false\n    > bool = isBuffer( [] )\n    false\n\n",
	"isCapitalized": "\nisCapitalized( value )\n    Tests if a value is a string having an uppercase first character.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string with an uppercase first\n        character.\n\n    Examples\n    --------\n    > var bool = isCapitalized( 'Hello' )\n    true\n    > bool = isCapitalized( 'world' )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isCollection": "\nisCollection( value )\n    Tests if a value is a collection.\n\n    A collection is defined as an array, typed array, or an array-like object\n    (excluding strings and functions).\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a collection.\n\n    Examples\n    --------\n    > var bool = isCollection( [] )\n    true\n    > bool = isCollection( { 'length': 0 } )\n    true\n    > bool = isCollection( {} )\n    false\n\n    See Also\n    --------\n    isArrayLike\n",
	"isDateObject": "\nisDateObject( value )\n    Tests if a value is a `Date` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Date` object.\n\n    Examples\n    --------\n    > var bool = isDateObject( new Date() )\n    true\n    > bool = isDateObject( '2017-01-01' )\n    false\n\n",
	"isDigitString": "\nisDigitString( str )\n    Tests whether a string contains only numeric digits.\n\n    Parameters\n    ----------\n    str: string\n        Input string\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only numeric digits.\n\n    Examples\n    --------\n    > var bool = isDigitString( '0123456789' )\n    true\n    > bool = isDigitString( 'abcdef' )\n    false\n    > bool = isDigitString( '0xff' )\n    false\n    > bool = isDigitString( '' )\n    false\n\n    See Also\n    --------\n    isHexString, isString\n",
	"isEmailAddress": "\nisEmailAddress( value )\n    Tests if a value is an email address.\n\n    Validation is not rigorous. *9* RFCs relate to email addresses, and\n    accounting for all of them is a fool's errand. The function performs the\n    simplest validation; i.e., requiring at least one `@` symbol.\n\n    For rigorous validation, send a confirmation email. If the email bounces,\n    consider the email invalid.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an email address.\n\n    Examples\n    --------\n    > var bool = isEmailAddress( 'beep@boop.com' )\n    true\n    > bool = isEmailAddress( 'beep' )\n    false\n    > bool = isEmailAddress( null )\n    false\n\n",
	"isEmptyArray": "\nisEmptyArray( value )\n    Tests if a value is an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty array.\n\n    Examples\n    --------\n    > var bool = isEmptyArray( [] )\n    true\n    > bool = isEmptyArray( [ 1, 2, 3 ] )\n    false\n    > bool = isEmptyArray( {} )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isEmptyObject": "\nisEmptyObject( value )\n    Tests if a value is an empty object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty object.\n\n    Examples\n    --------\n    > var bool = isEmptyObject( {} )\n    true\n    > bool = isEmptyObject( { 'beep': 'boop' } )\n    false\n    > bool = isEmptyObject( [] )\n    false\n\n    See Also\n    --------\n    isObject, isPlainObject\n",
	"isEmptyString": "\nisEmptyString( value )\n    Tests if a value is an empty string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty string.\n\n    Examples\n    --------\n    > var bool = isEmptyString( '' )\n    true\n    > bool = isEmptyString( new String( '' ) )\n    true\n    > bool = isEmptyString( 'beep' )\n    false\n    > bool = isEmptyString( [] )\n    false\n\n\nisEmptyString.isPrimitive( value )\n    Tests if a value is an empty string primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an empty string primitive.\n\n    Examples\n    --------\n    > var bool = isEmptyString.isPrimitive( '' )\n    true\n    > bool = isEmptyString.isPrimitive( new String( '' ) )\n    false\n\n\nisEmptyString.isObject( value )\n    Tests if a value is an empty `String` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an empty `String` object.\n\n    Examples\n    --------\n    > var bool = isEmptyString.isObject( new String( '' ) )\n    true\n    > bool = isEmptyString.isObject( '' )\n    false\n\n    See Also\n    --------\n    isString\n",
	"isEnumerableProperty": "\nisEnumerableProperty( value, property )\n    Tests if an object property is enumerable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object property is enumerable.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = isEnumerableProperty( beep, 'boop' )\n    true\n    > bool = isEnumerableProperty( beep, 'hasOwnProperty' )\n    false\n\n",
	"isError": "\nisError( value )\n    Tests if a value is an `Error` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `Error` object.\n\n    Examples\n    --------\n    > var bool = isError( new Error( 'beep' ) )\n    true\n    > bool = isError( {} )\n    false\n\n",
	"isEvalError": "\nisEvalError( value )\n    Tests if a value is an `EvalError` object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided an `EvalError` (or a descendant) object,\n    false positives may occur due to the fact that the `EvalError` constructor\n    inherits from `Error` and has no internal class of its own. Hence,\n    `EvalError` impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `EvalError` object.\n\n    Examples\n    --------\n    > var bool = isEvalError( new EvalError( 'beep' ) )\n    true\n    > bool = isEvalError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isEven": "\nisEven( value )\n    Tests if a value is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether is an even number.\n\n    Examples\n    --------\n    > var bool = isEven( 4.0 )\n    true\n    > bool = isEven( new Number( 4.0 ) )\n    true\n    > bool = isEven( 3.0 )\n    false\n    > bool = isEven( -3.14 )\n    false\n    > bool = isEven( null )\n    false\n\n\nisEven.isPrimitive( value )\n    Tests if a value is a number primitive that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isPrimitive( -4.0 )\n    true\n    > bool = isEven.isPrimitive( new Number( -4.0 ) )\n    false\n\n\nisEven.isObject( value )\n    Tests if a value is a number object that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isObject( 4.0 )\n    false\n    > bool = isEven.isObject( new Number( 4.0 ) )\n    true\n\n    See Also\n    --------\n    isOdd\n",
	"isFalsy": "\nisFalsy( value )\n    Tests if a value is a value which translates to `false` when evaluated in a\n    boolean context.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is falsy.\n\n    Examples\n    --------\n    > var bool = isFalsy( false )\n    true\n    > bool = isFalsy( '' )\n    true\n    > bool = isFalsy( 0 )\n    true\n    > bool = isFalsy( null )\n    true\n    > bool = isFalsy( void 0 )\n    true\n    > bool = isFalsy( NaN )\n    true\n    > bool = isFalsy( {} )\n    false\n    > bool = isFalsy( [] )\n    false\n\n    See Also\n    --------\n    isFalsyArray, isTruthy\n",
	"isFalsyArray": "\nisFalsyArray( value )\n    Tests if a value is an array-like object containing only falsy values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only falsy values.\n\n    Examples\n    --------\n    > var bool = isFalsyArray( [ null, '' ] )\n    true\n    > bool = isFalsyArray( [ {}, [] ] )\n    false\n    > bool = isFalsyArray( [] )\n    false\n\n    See Also\n    --------\n    isFalsy, isTruthyArray\n",
	"isFinite": "\nisFinite( value )\n    Tests if a value is a finite number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a finite number.\n\n    Examples\n    --------\n    > var bool = isFinite( 5.0 )\n    true\n    > bool = isFinite( new Number( 5.0 ) )\n    true\n    > bool = isFinite( 1.0/0.0 )\n    false\n    > bool = isFinite( null )\n    false\n\n\nisFinite.isPrimitive( value )\n    Tests if a value is a number primitive having a finite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive having a finite\n        value.\n\n    Examples\n    --------\n    > var bool = isFinite.isPrimitive( -3.0 )\n    true\n    > bool = isFinite.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisFinite.isObject( value )\n    Tests if a value is a number object having a finite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a finite\n        value.\n\n    Examples\n    --------\n    > var bool = isFinite.isObject( 3.0 )\n    false\n    > bool = isFinite.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isFiniteArray, isInfinite\n",
	"isFiniteArray": "\nisFiniteArray( value )\n    Tests if a value is an array-like object of finite numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object of finite\n        numbers.\n\n    Examples\n    --------\n    > var bool = isFiniteArray( [ -3.0, new Number(0.0), 2.0 ] )\n    true\n    > bool = isFiniteArray( [ -3.0, 1.0/0.0 ] )\n    false\n\n\nisFiniteArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive finite\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only primitive finite numbers.\n\n    Examples\n    --------\n    > var bool = isFiniteArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isFiniteArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isFiniteArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisFiniteArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having finite values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only number objects having finite values.\n\n    Examples\n    --------\n    > var bool = isFiniteArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isFiniteArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isFiniteArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isFinite, isInfinite\n",
	"isFloat32Array": "\nisFloat32Array( value )\n    Tests if a value is a `Float32Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Float32Array`.\n\n    Examples\n    --------\n    > var bool = isFloat32Array( new Float32Array( 10 ) )\n    true\n    > bool = isFloat32Array( [] )\n    false\n\n    See Also\n    --------\n    isFloat64Array\n",
	"isFloat64Array": "\nisFloat64Array( value )\n    Tests if a value is a `Float64Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Float64Array`.\n\n    Examples\n    --------\n    > var bool = isFloat64Array( new Float64Array( 10 ) )\n    true\n    > bool = isFloat64Array( [] )\n    false\n\n    See Also\n    --------\n    isFloat32Array\n",
	"isFunction": "\nisFunction( value )\n    Tests if a value is a function.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a function.\n\n    Examples\n    --------\n    > function beep() {};\n    > var bool = isFunction( beep )\n    true\n    > bool = isFunction( {} )\n    false\n\n",
	"isFunctionArray": "\nisFunctionArray( value )\n    Tests if a value is an array-like object containing only functions.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        functions.\n\n    Examples\n    --------\n    > function beep() {};\n    > function boop() {};\n    > var bool = isFunctionArray( [ beep, boop ] )\n    true\n    > bool = isFunctionArray( [ {}, beep ] )\n    false\n    > bool = isFunctionArray( [] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isHexString": "\nisHexString( str )\n    Tests whether a string contains only hexadecimal digits.\n\n    The function does not recognize `x` (as in the standard `0x` prefix).\n\n    Parameters\n    ----------\n    str: string\n        Input string\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only hexadecimal digits.\n\n    Examples\n    --------\n    > var bool = isHexString( '0123456789abcdefABCDEF' )\n    true\n    > bool = isHexString( '0xffffff' )\n    false\n    > bool = isHexString( 'x' )\n    false\n    > bool = isHexString( '' )\n\n    See Also\n    --------\n    isString\n",
	"isInfinite": "\nisInfinite( value )\n    Tests if a value is an infinite number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an infinite number.\n\n    Examples\n    --------\n    > var bool = isInfinite( 1.0/0.0 )\n    true\n    > bool = isInfinite( new Number( -1.0/0.0 ) )\n    true\n    > bool = isInfinite( 5.0 )\n    false\n    > bool = isInfinite( '1.0/0.0' )\n    false\n\n\nisInfinite.isPrimitive( value )\n    Tests if a value is a number primitive having an infinite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive having an\n        infinite value.\n\n    Examples\n    --------\n    > var bool = isInfinite.isPrimitive( -1.0/0.0 )\n    true\n    > bool = isInfinite.isPrimitive( new Number( -1.0/0.0 ) )\n    false\n\n\nisInfinite.isObject( value )\n    Tests if a value is a number object having an infinite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having an infinite\n        value.\n\n    Examples\n    --------\n    > var bool = isInfinite.isObject( 1.0/0.0 )\n    false\n    > bool = isInfinite.isObject( new Number( 1.0/0.0 ) )\n    true\n\n    See Also\n    --------\n    isFinite\n",
	"isInt16Array": "\nisInt16Array( value )\n    Tests if a value is an `Int16Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `Int16Array`.\n\n    Examples\n    --------\n    > var bool = isInt16Array( new Int16Array( 10 ) )\n    true\n    > bool = isInt16Array( [] )\n    false\n\n    See Also\n    --------\n    isInt32Array, isInt8Array\n",
	"isInt32Array": "\nisInt32Array( value )\n    Tests if a value is an `Int32Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `Int32Array`.\n\n    Examples\n    --------\n    > var bool = isInt32Array( new Int32Array( 10 ) )\n    true\n    > bool = isInt32Array( [] )\n    false\n\n    See Also\n    --------\n    isInt16Array, isInt8Array\n",
	"isInt8Array": "\nisInt8Array( value )\n    Tests if a value is an `Int8Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an `Int8Array`.\n\n    Examples\n    --------\n    > var bool = isInt8Array( new Int8Array( 10 ) )\n    true\n    > bool = isInt8Array( [] )\n    false\n\n    See Also\n    --------\n    isInt16Array, isInt32Array\n",
	"isInteger": "\nisInteger( value )\n    Tests if a value is an integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an integer.\n\n    Examples\n    --------\n    > var bool = isInteger( 5.0 )\n    true\n    > bool = isInteger( new Number( 5.0 ) )\n    true\n    > bool = isInteger( -3.14 )\n    false\n    > bool = isInteger( null )\n    false\n\n\nisInteger.isPrimitive( value )\n    Tests if a value is a number primitive having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isPrimitive( -3.0 )\n    true\n    > bool = isInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisInteger.isObject( value )\n    Tests if a value is a number object having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isObject( 3.0 )\n    false\n    > bool = isInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n",
	"isIntegerArray": "\nisIntegerArray( value )\n    Tests if a value is an array-like object of integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object of integer\n        values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray( [ -3.0, new Number(0.0), 2.0 ] )\n    true\n    > bool = isIntegerArray( [ -3.0, '3.0' ] )\n    false\n\n\nisIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive integer\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only primitive integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only number objects having integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isIntegerArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isIntegerArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isJSON": "\nisJSON( value )\n    Tests if a value is a parseable JSON string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a parseable JSON string.\n\n    Examples\n    --------\n    > var bool = isJSON( '{\"a\":5}' )\n    true\n    > bool = isJSON( '{a\":5}' )\n    false\n\n",
	"isLeapYear": "\nisLeapYear( value )\n    Tests whether a value corresponds to a leap year in the Gregorian calendar.\n\n    A leap year is defined as any year which is exactly divisible by `4`, except\n    for years which are exactly divisible by `100` and not by `400`. In this\n    definition, `100` corresponds to years marking a new century, and `400`\n    corresponds to the length of the *leap cycle*.\n\n    If not provided any `arguments`, the function returns a `boolean` indicating\n    if the current year (according to local time) is a leap year.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value corresponds to a leap year.\n\n    Examples\n    --------\n    > var bool = isLeapYear( new Date() )\n    <boolean>\n    > bool = isLeapYear( 1996 )\n    true\n    > bool = isLeapYear( 2001 )\n    false\n\n",
	"isLowercase": "\nisLowercase( value )\n    Tests if a value is a lowercase string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a lowercase string.\n\n    Examples\n    --------\n    > var bool = isLowercase( 'hello' )\n    true\n    > bool = isLowercase( 'World' )\n    false\n\n    See Also\n    --------\n    isString, isUppercase\n",
	"isnan": "\nisnan( value )\n    Tests if a value is `NaN`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is `NaN`.\n\n    Examples\n    --------\n    > var bool = isnan( NaN )\n    true\n    > bool = isnan( new Number( NaN ) )\n    true\n    > bool = isnan( 3.14 )\n    false\n    > bool = isnan( null )\n    false\n\n\nisnan.isPrimitive( value )\n    Tests if a value is a `NaN` number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `NaN` number primitive.\n\n    Examples\n    --------\n    > var bool = isnan.isPrimitive( NaN )\n    true\n    > bool = isnan.isPrimitive( 3.14 )\n    false\n    > bool = isnan.isPrimitive( new Number( NaN ) )\n    false\n\n\nisnan.isObject( value )\n    Tests if a value is a number object having a value of `NaN`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value of\n        `NaN`.\n\n    Examples\n    --------\n    > var bool = isnan.isObject( NaN )\n    false\n    > bool = isnan.isObject( new Number( NaN ) )\n    true\n\n    See Also\n    --------\n    isNumber\n",
	"isNaNArray": "\nisNaNArray( value )\n    Tests if a value is an array-like object containing only `NaN` values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `NaN` values.\n\n    Examples\n    --------\n    > var bool = isNaNArray( [ NaN, NaN, NaN ] )\n    true\n    > bool = isNaNArray( [ NaN, 2 ] )\n    false\n\n\nisNaNArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive `NaN`\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive `NaN` values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.primitives( [ NaN, new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.primitives( [ NaN, NaN, NaN ] )\n    true\n\n\nisNaNArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having `NaN` values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having `NaN` values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.objects( [ new Number( NaN ), new Number( NaN ) ] )\n    true\n    > bool = isNaNArray.objects( [ NaN, new Number( NaN ), new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.objects( [ NaN, NaN, NaN ] )\n    false\n\n    See Also\n    --------\n    isnan\n",
	"isNativeFunction": "\nisNativeFunction( value )\n    Tests if a value is a native function.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a native function.\n\n    Examples\n    --------\n    > var bool = isNativeFunction( Date )\n    true\n    > function beep() {};\n    > bool = isNativeFunction( beep )\n    false\n    > bool = isNativeFunction( {} )\n    false\n\n    See Also\n    --------\n    isFunction\n",
	"isNegativeInteger": "\nisNegativeInteger( value )\n    Tests if a value is a negative integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a negative integer.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger( -5.0 )\n    true\n    > bool = isNegativeInteger( new Number( -5.0 ) )\n    true\n    > bool = isNegativeInteger( 5.0 )\n    false\n    > bool = isNegativeInteger( -3.14 )\n    false\n    > bool = isNegativeInteger( null )\n    false\n\n\nisNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNegativeInteger.isObject( value )\n    Tests if a value is a number object having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isObject( -3.0 )\n    false\n    > bool = isNegativeInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNegativeIntegerArray": "\nisNegativeIntegerArray( value )\n    Tests if a value is an array-like object containing only negative integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative integers.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNegativeIntegerArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only negative primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNegativeNumber": "\nisNegativeNumber( value )\n    Tests if a value is a negative number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a negative number.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber( -5.0 )\n    true\n    > bool = isNegativeNumber( new Number( -5.0 ) )\n    true\n    > bool = isNegativeNumber( -3.14 )\n    true\n    > bool = isNegativeNumber( 5.0 )\n    false\n    > bool = isNegativeNumber( null )\n    false\n\n\nisNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNegativeNumber.isObject( value )\n    Tests if a value is a number object having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isObject( -3.0 )\n    false\n    > bool = isNegativeNumber.isObject( new Number( -3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n",
	"isNegativeNumberArray": "\nisNegativeNumberArray( value )\n    Tests if a value is an array-like object containing only negative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNegativeNumberArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive negative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative number values.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNegativeZero": "\nisNegativeZero( value )\n    Tests if a value is negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero( -0.0 )\n    true\n    > bool = isNegativeZero( new Number( -0.0 ) )\n    true\n    > bool = isNegativeZero( -3.14 )\n    true\n    > bool = isNegativeZero( 0.0 )\n    false\n    > bool = isNegativeZero( null )\n    false\n\n\nisNegativeZero.isPrimitive( value )\n    Tests if a value is a number primitive equal to negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive equal to\n        negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero.isPrimitive( -0.0 )\n    true\n    > bool = isNegativeZero.isPrimitive( new Number( -0.0 ) )\n    false\n\n\nisNegativeZero.isObject( value )\n    Tests if a value is a number object having a value equal to negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a value\n        equal to negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero.isObject( -0.0 )\n    false\n    > bool = isNegativeZero.isObject( new Number( -0.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber, isPositiveZero\n",
	"isNodeDuplexStreamLike": "\nisNodeDuplexStreamLike( value )\n    Tests if a value is Node duplex stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node duplex stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Duplex;\n    > s = new Stream();\n    > var bool = isNodeDuplexStreamLike( s )\n    true\n    > bool = isNodeDuplexStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n",
	"isNodeReadableStreamLike": "\nisNodeReadableStreamLike( value )\n    Tests if a value is Node readable stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node readable stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Readable;\n    > s = new Stream();\n    > var bool = isNodeReadableStreamLike( s )\n    true\n    > bool = isNodeReadableStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n",
	"isNodeREPL": "\nisNodeREPL()\n    Returns a boolean indicating if running in a Node.js REPL environment.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if running in a Node.js REPL environment.\n\n    Examples\n    --------\n    > var bool = isNodeREPL()\n    <boolean>\n\n",
	"isNodeStreamLike": "\nisNodeStreamLike( value )\n    Tests if a value is Node stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Stream;\n    > s = new Stream();\n    > var bool = isNodeStreamLike( s )\n    true\n    > bool = isNodeStreamLike( {} )\n    false\n\n",
	"isNodeTransformStreamLike": "\nisNodeTransformStreamLike( value )\n    Tests if a value is Node transform stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node transform stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Transform;\n    > s = new Stream();\n    > var bool = isNodeTransformStreamLike( s )\n    true\n    > bool = isNodeTransformStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n",
	"isNodeWritableStreamLike": "\nisNodeWritableStreamLike( value )\n    Tests if a value is Node writable stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node writable stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Writable;\n    > s = new Stream();\n    > var bool = isNodeWritableStreamLike( s )\n    true\n    > bool = isNodeWritableStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n",
	"isNonNegativeInteger": "\nisNonNegativeInteger( value )\n    Tests if a value is a nonnegative integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonnegative integer.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger( 5.0 )\n    true\n    > bool = isNonNegativeInteger( new Number( 5.0 ) )\n    true\n    > bool = isNonNegativeInteger( 3.14 )\n    false\n    > bool = isNonNegativeInteger( -5.0 )\n    false\n    > bool = isNonNegativeInteger( null )\n    false\n\n\nisNonNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisNonNegativeInteger.isObject( value )\n    Tests if a value is a number object having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isObject( 3.0 )\n    false\n    > bool = isNonNegativeInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNonNegativeIntegerArray": "\nisNonNegativeIntegerArray( value )\n    Tests if a value is an array-like object containing only nonnegative\n    integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative integers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] )\n    false\n\n\nisNonNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonnegative\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisNonNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonNegativeNumber": "\nisNonNegativeNumber( value )\n    Tests if a value is a nonnegative number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonnegative number.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber( 5.0 )\n    true\n    > bool = isNonNegativeNumber( new Number( 5.0 ) )\n    true\n    > bool = isNonNegativeNumber( 3.14 )\n    true\n    > bool = isNonNegativeNumber( -5.0 )\n    false\n    > bool = isNonNegativeNumber( null )\n    false\n\n\nisNonNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisNonNegativeNumber.isObject( value )\n    Tests if a value is a number object having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isObject( 3.0 )\n    false\n    > bool = isNonNegativeNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isNonNegativeNumberArray": "\nisNonNegativeNumberArray( value )\n    Tests if a value is an array-like object containing only nonnegative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isNonNegativeNumberArray( [ 3.0, '3.0' ] )\n    false\n\n\nisNonNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonnegative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisNonNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative number values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeNumberArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonPositiveInteger": "\nisNonPositiveInteger( value )\n    Tests if a value is a nonpositive integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonpositive integer.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger( -5.0 )\n    true\n    > bool = isNonPositiveInteger( new Number( -5.0 ) )\n    true\n    > bool = isNonPositiveInteger( 5.0 )\n    false\n    > bool = isNonPositiveInteger( -3.14 )\n    false\n    > bool = isNonPositiveInteger( null )\n    false\n\n\nisNonPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNonPositiveInteger.isObject( value )\n    Tests if a value is a number object having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isObject( -3.0 )\n    false\n    > bool = isNonPositiveInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isNonPositiveIntegerArray": "\nisNonPositiveIntegerArray( value )\n    Tests if a value is an array-like object containing only nonpositive\n    integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive integers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNonPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonpositive\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNonPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNonPositiveNumber": "\nisNonPositiveNumber( value )\n    Tests if a value is a nonpositive number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonpositive number.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber( -5.0 )\n    true\n    > bool = isNonPositiveNumber( new Number( -5.0 ) )\n    true\n    > bool = isNonPositiveNumber( -3.14 )\n    true\n    > bool = isNonPositiveNumber( 5.0 )\n    false\n    > bool = isNonPositiveNumber( null )\n    false\n\n\nisNonPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNonPositiveNumber.isObject( value )\n    Tests if a value is a number object having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isObject( -3.0 )\n    false\n    > bool = isNonPositiveNumber.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isNonPositiveNumberArray": "\nisNonPositiveNumberArray( value )\n    Tests if a value is an array-like object containing only nonpositive\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNonPositiveNumberArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNonPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonpositive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNonPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive number values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n",
	"isNull": "\nisNull( value )\n    Tests if a value is `null`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is `null`.\n\n    Examples\n    --------\n    > var bool = isNull( null )\n    true\n    > bool = isNull( true )\n    false\n\n    See Also\n    --------\n    isUndefined, isUndefinedOrNull\n",
	"isNullArray": "\nisNullArray( value )\n    Tests if a value is an array-like object containing only `null` values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `null` values.\n\n    Examples\n    --------\n    > var bool = isNullArray( [ null, null, null ] )\n    true\n    > bool = isNullArray( [ NaN, 2, null ] )\n    false\n\n    See Also\n    --------\n    isArray, isNull\n",
	"isNumber": "\nisNumber( value )\n    Tests if a value is a number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number.\n\n    Examples\n    --------\n    > var bool = isNumber( 3.14 )\n    true\n    > bool = isNumber( new Number( 3.14 ) )\n    true\n    > bool = isNumber( NaN )\n    true\n    > bool = isNumber( null )\n    false\n\n\nisNumber.isPrimitive( value )\n    Tests if a value is a number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive.\n\n    Examples\n    --------\n    > var bool = isNumber.isPrimitive( 3.14 )\n    true\n    > bool = isNumber.isPrimitive( NaN )\n    true\n    > bool = isNumber.isPrimitive( new Number( 3.14 ) )\n    false\n\n\nisNumber.isObject( value )\n    Tests if a value is a `Number` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Number` object.\n\n    Examples\n    --------\n    > var bool = isNumber.isObject( 3.14 )\n    false\n    > bool = isNumber.isObject( new Number( 3.14 ) )\n    true\n\n",
	"isNumberArray": "\nisNumberArray( value )\n    Tests if a value is an array-like object containing only numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        numbers.\n\n    Examples\n    --------\n    > var bool = isNumberArray( [ 1, 2, 3 ] )\n    true\n    > bool = isNumberArray( [ '1', 2, 3 ] )\n    false\n\n\nisNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only number primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number primitives.\n\n    Examples\n    --------\n    > var arr = [ 1, 2, 3 ];\n    > var bool = isNumberArray.primitives( arr )\n    true\n    > arr = [ 1, new Number( 2 ) ];\n    > bool = isNumberArray.primitives( arr )\n    false\n\n\nisNumberArray.objects( value )\n    Tests if a value is an array-like object containing only `Number` objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `Number` objects.\n\n    Examples\n    --------\n    > var arr = [ new Number( 1 ), new Number( 2 ) ];\n    > var bool = isNumberArray.objects( arr )\n    true\n    > arr = [ new Number( 1 ), 2 ];\n    > bool = isNumberArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isNumericArray\n",
	"isNumericArray": "\nisNumericArray( value )\n    Tests if a value is a numeric array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a numeric array.\n\n    Examples\n    --------\n    > var bool = isNumericArray( new Int8Array( 10 ) )\n    true\n    > bool = isNumericArray( [ 1, 2, 3 ] )\n    true\n    > bool = isNumericArray( [ '1', '2', '3' ] )\n    false\n\n",
	"isObject": "\nisObject( value )\n    Tests if a value is an object; e.g., `{}`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an object.\n\n    Examples\n    --------\n    > var bool = isObject( {} )\n    true\n    > bool = isObject( true )\n    false\n\n    See Also\n    --------\n    isObjectLike, isPlainObject\n",
	"isObjectArray": "\nisObjectArray( value )\n    Tests if a value is an array-like object containing only objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        objects.\n\n    Examples\n    --------\n    > var bool = isObjectArray( [ {}, new Number(3.0) ] )\n    true\n    > bool = isObjectArray( [ {}, { 'beep': 'boop' } ] )\n    true\n    > bool = isObjectArray( [ {}, '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isObject\n",
	"isObjectLike": "\nisObjectLike( value )\n    Tests if a value is object-like.\n\n    Return values are the same as would be obtained using the built-in `typeof`\n    operator except that `null` is not considered an `object`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is object-like.\n\n    Examples\n    --------\n    > var bool = isObjectLike( {} )\n    true\n    > bool = isObjectLike( [] )\n    true\n    > bool = isObjectLike( null )\n    false\n\n    See Also\n    --------\n    isObject, isPlainObject\n",
	"isOdd": "\nisOdd( value )\n    Tests if a value is an odd number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an odd number.\n\n    Examples\n    --------\n    > var bool = isOdd( 5.0 )\n    true\n    > bool = isOdd( new Number( 5.0 ) )\n    true\n    > bool = isOdd( 4.0 )\n    false\n    > bool = isOdd( new Number( 4.0 ) )\n    false\n    > bool = isOdd( -3.14 )\n    false\n    > bool = isOdd( null )\n    false\n\nisOdd.isPrimitive( value )\n    Tests if a value is a number primitive that is an odd number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an odd\n        number.\n\n    Examples\n    --------\n    > var bool = isOdd.isPrimitive( -5.0 )\n    true\n    > bool = isOdd.isPrimitive( new Number( -5.0 ) )\n    false\n\n\nisOdd.isObject( value )\n    Tests if a value is a number object that has an odd number value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that has an odd\n        number value.\n\n    Examples\n    --------\n    > var bool = isOdd.isObject( 5.0 )\n    false\n    > bool = isOdd.isObject( new Number( 5.0 ) )\n    true\n\n    See Also\n    --------\n    isEven\n",
	"isoWeeksInYear": "\nisoWeeksInYear( [year] )\n    Returns the number of ISO weeks in a year according to the Gregorian\n    calendar.\n\n    By default, the function returns the number of ISO weeks in the current year\n    (according to local time). To determine the number of ISO weeks for a\n    particular year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Number of ISO weeks in a year.\n\n    Examples\n    --------\n    > var num = isoWeeksInYear()\n    <number>\n    > num = isoWeeksInYear( 2015 )\n    53\n    > num = isoWeeksInYear( 2017 )\n    52\n\n",
	"isPlainObject": "\nisPlainObject( value )\n    Tests if a value is a plain object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a plain object.\n\n    Examples\n    --------\n    > var bool = isPlainObject( {} )\n    true\n    > bool = isPlainObject( null )\n    false\n\n    See Also\n    --------\n    isObject\n",
	"isPlainObjectArray": "\nisPlainObjectArray( value )\n    Tests if a value is an array-like object containing only plain objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        plain objects.\n\n    Examples\n    --------\n    > var bool = isPlainObjectArray( [ {}, { 'beep': 'boop' } ] )\n    true\n    > bool = isPlainObjectArray( [ {}, new Number(3.0) ] )\n    false\n    > bool = isPlainObjectArray( [ {}, '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isPlainObject\n",
	"isPositiveInteger": "\nisPositiveInteger( value )\n    Tests if a value is a positive integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a positive integer.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger( 5.0 )\n    true\n    > bool = isPositiveInteger( new Number( 5.0 ) )\n    true\n    > bool = isPositiveInteger( 3.14 )\n    false\n    > bool = isPositiveInteger( -5.0 )\n    false\n    > bool = isPositiveInteger( null )\n    false\n\n\nisPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        positive integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisPositiveInteger.isObject( value )\n    Tests if a value is a number object having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isObject( 3.0 )\n    false\n    > bool = isPositiveInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n",
	"isPositiveIntegerArray": "\nisPositiveIntegerArray( value )\n    Tests if a value is an array-like object containing only positive integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive integers.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isPositiveIntegerArray( [ 3.0, '3.0' ] )\n    false\n\n\nisPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveIntegerArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isInteger, isPositiveInteger\n",
	"isPositiveNumber": "\nisPositiveNumber( value )\n    Tests if a value is a positive number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a positive number.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber( 5.0 )\n    true\n    > bool = isPositiveNumber( new Number( 5.0 ) )\n    true\n    > bool = isPositiveNumber( 3.14 )\n    true\n    > bool = isPositiveNumber( -5.0 )\n    false\n    > bool = isPositiveNumber( null )\n    false\n\n\nisPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisPositiveNumber.isObject( value )\n    Tests if a value is a number object having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isObject( 3.0 )\n    false\n    > bool = isPositiveNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isPositiveNumberArray": "\nisPositiveNumberArray( value )\n    Tests if a value is an array-like object containing only positive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive numbers.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isPositiveNumberArray( [ 3.0, '3.0' ] )\n    false\n\n\nisPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive number values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveNumberArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isPositiveNumber\n",
	"isPositiveZero": "\nisPositiveZero( value )\n    Tests if a value is positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero( 0.0 )\n    true\n    > bool = isPositiveZero( new Number( 0.0 ) )\n    true\n    > bool = isPositiveZero( -3.14 )\n    true\n    > bool = isPositiveZero( -0.0 )\n    false\n    > bool = isPositiveZero( null )\n    false\n\n\nisPositiveZero.isPrimitive( value )\n    Tests if a value is a number primitive equal to positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive equal to\n        positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero.isPrimitive( 0.0 )\n    true\n    > bool = isPositiveZero.isPrimitive( new Number( 0.0 ) )\n    false\n\n\nisPositiveZero.isObject( value )\n    Tests if a value is a number object having a value equal to positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a value\n        equal to positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero.isObject( 0.0 )\n    false\n    > bool = isPositiveZero.isObject( new Number( 0.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber, isNegativeZero\n",
	"isPrimitive": "\nisPrimitive( value )\n    Tests if a value is a JavaScript primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a JavaScript primitive.\n\n    Examples\n    --------\n    > var bool = isPrimitive( true )\n    true\n    > bool = isPrimitive( {} )\n    false\n\n",
	"isPrimitiveArray": "\nisPrimitiveArray( value )\n    Tests if a value is an array-like object containing only JavaScript\n    primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        JavaScript primitives.\n\n    Examples\n    --------\n    > var bool = isPrimitiveArray( [ '3', 2, null ] )\n    true\n    > bool = isPrimitiveArray( [ {}, 2, 1 ] )\n    false\n    > bool = isPrimitiveArray( [ new String('abc'), '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isPrimitive\n",
	"isProbability": "\nisProbability( value )\n    Tests if a value is a probability.\n\n    A probability is defined as a numeric value on the interval `[0,1]`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability( 0.5 )\n    true\n    > bool = isProbability( new Number( 0.5 ) )\n    true\n    > bool = isProbability( 3.14 )\n    false\n    > bool = isProbability( -5.0 )\n    false\n    > bool = isProbability( null )\n    false\n\n\nisProbability.isPrimitive( value )\n    Tests if a value is a number primitive which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive which is a\n        probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isPrimitive( 0.3 )\n    true\n    > bool = isProbability.isPrimitive( new Number( 0.3 ) )\n    false\n\n\nisProbability.isObject( value )\n    Tests if a value is a number object having a value which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value which\n        is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isObject( 0.77 )\n    false\n    > bool = isProbability.isObject( new Number( 0.77 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n",
	"isProbabilityArray": "\nisProbabilityArray( value )\n    Tests if a value is an array-like object containing only probabilities.\n\n    A probability is defined as a numeric value on the interval `[0,1]`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray( [ 0.5, new Number(0.8) ] )\n    true\n    > bool = isProbabilityArray( [ 0.8, 1.2 ] )\n    false\n    > bool = isProbabilityArray( [ 0.8, '0.2' ] )\n    false\n\n\nisProbabilityArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    probabilities.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.primitives( [ 1.0, 0.0, 0.5 ] )\n    true\n    > bool = isProbabilityArray.primitives( [ 0.3, new Number(0.4) ] )\n    false\n\n\nisProbabilityArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having probability values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having probability values.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.objects( [ new Number(0.7), new Number(1.0) ] )\n    true\n    > bool = isProbabilityArray.objects( [ 1.0, 0.0, new Number(0.7) ] )\n    false\n\n    See Also\n    --------\n    isArray, isProbability\n",
	"isRangeError": "\nisRangeError( value )\n    Tests if a value is a `RangeError` object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a `RangeError` (or a descendant) object,\n    false positives may occur due to the fact that the `RangeError` constructor\n    inherits from `Error` and has no internal class of its own. Hence,\n    `RangeError` impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `RangeError` object.\n\n    Examples\n    --------\n    > var bool = isRangeError( new RangeError( 'beep' ) )\n    true\n    > bool = isRangeError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isReferenceError": "\nisReferenceError( value )\n    Tests if a value is a `ReferenceError` object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a `ReferenceError` (or a descendant)\n    object, false positives may occur due to the fact that the `ReferenceError`\n    constructor inherits from `Error` and has no internal class of its own.\n    Hence, `ReferenceError` impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `ReferenceError` object.\n\n    Examples\n    --------\n    > var bool = isReferenceError( new ReferenceError( 'beep' ) )\n    true\n    > bool = isReferenceError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isRegExp": "\nisRegExp( value )\n    Tests if a value is a regular expression.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a regular expression.\n\n    Examples\n    --------\n    > var bool = isRegExp( /\\.+/ )\n    true\n    > bool = isRegExp( {} )\n    false\n\n",
	"isRegExpString": "\nisRegExpString( value )\n    Tests if a value is a regular expression string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a regular expression string.\n\n    Examples\n    --------\n    > var bool = isRegExpString( '/beep/' )\n    true\n    > bool = isRegExpString( 'beep' )\n    false\n    > bool = isRegExpString( '' )\n    false\n    > bool = isRegExpString( null )\n    false\n\n    See Also\n    --------\n    isRegExp\n",
	"isRelativePath": "\nisRelativePath( value )\n    Tests if a value is a relative path.\n\n    Function behavior is platform-specific. On Windows platforms, the function\n    is equal to `.win32()`. On POSIX platforms, the function is equal to\n    `.posix()`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a relative path.\n\n    Examples\n    --------\n    // Windows environments:\n    > var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\n    true\n\n    // POSIX environments:\n    > bool = isRelativePath( './foo/bar/baz' )\n    true\n\n\nisRelativePath.posix( value )\n    Tests if a value is a POSIX relative path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a POSIX relative path.\n\n    Examples\n    --------\n    > var bool = isRelativePath.posix( './foo/bar/baz' )\n    true\n    > bool = isRelativePath.posix( '/foo/../bar/baz' )\n    false\n\n\nisRelativePath.win32( value )\n    Tests if a value is a Windows relative path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Windows relative path.\n\n    Examples\n    --------\n    > var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\n    true\n    > bool = isRelativePath( 'C:\\\\foo\\\\..\\\\bar\\\\baz' )\n    false\n\n    See Also\n    --------\n    isAbsolutePath\n",
	"isSafeInteger": "\nisSafeInteger( value )\n    Tests if a value is a safe integer.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a safe integer.\n\n    Examples\n    --------\n    > var bool = isSafeInteger( 5.0 )\n    true\n    > bool = isSafeInteger( new Number( 5.0 ) )\n    true\n    > bool = isSafeInteger( 2.0e200 )\n    false\n    > bool = isSafeInteger( -3.14 )\n    false\n    > bool = isSafeInteger( null )\n    false\n\n\nisSafeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a safe integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a safe\n        integer value.\n\n    Examples\n    --------\n    > var bool = isSafeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isSafeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisSafeInteger.isObject( value )\n    Tests if a value is a `Number` object having a safe integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Number` object having a safe\n        integer value.\n\n    Examples\n    --------\n    > var bool = isSafeInteger.isObject( 3.0 )\n    false\n    > bool = isSafeInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isInteger, isNumber\n",
	"isSafeIntegerArray": "\nisSafeIntegerArray( value )\n    Tests if a value is an array-like object containing only safe integers.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing\n        only safe integers.\n\n    Examples\n    --------\n    > var arr = [ -3.0, new Number(0.0), 2.0 ];\n    > var bool = isSafeIntegerArray( arr )\n    true\n    > arr = [ -3.0, '3.0' ];\n    > bool = isSafeIntegerArray( arr )\n    false\n\n\nisSafeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive safe\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive safe integer values.\n\n    Examples\n    --------\n    > var arr = [ -1.0, 10.0 ];\n    > var bool = isSafeIntegerArray.primitives( arr )\n    true\n    > arr = [ -1.0, 0.0, 5.0 ];\n    > bool = isSafeIntegerArray.primitives( arr )\n    true\n    > arr = [ -3.0, new Number(-1.0) ];\n    > bool = isSafeIntegerArray.primitives( arr )\n    false\n\n\nisSafeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only `Number` objects\n    having safe integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `Number` objects having safe integer values.\n\n    Examples\n    --------\n    > var arr = [ new Number(1.0), new Number(3.0) ];\n    > var bool = isSafeIntegerArray.objects( arr )\n    true\n    > arr = [ -1.0, 0.0, 3.0 ];\n    > bool = isSafeIntegerArray.objects( arr )\n    false\n    > arr = [ 3.0, new Number(-1.0) ];\n    > bool = isSafeIntegerArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isSafeInteger\n",
	"isSameValue": "\nisSameValue( a, b )\n    Tests if two arguments are the same value.\n\n    The function differs from the `===` operator in that the function treats\n    `-0` and `+0` as distinct and `NaNs` as the same.\n\n    Parameters\n    ----------\n    a: any\n        First input value.\n\n    b: any\n        Second input value.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether two arguments are the same value.\n\n    Examples\n    --------\n    > var bool = isSameValue( true, true )\n    true\n    > bool = isSameValue( {}, {} )\n    false\n    > bool = isSameValue( -0.0, -0.0 )\n    true\n    > bool = isSameValue( -0.0, 0.0 )\n    false\n    > bool = isSameValue( NaN, NaN )\n    true\n\n    See Also\n    --------\n    isStrictEqual\n",
	"isStrictEqual": "\nisStrictEqual( a, b )\n    Tests if two arguments are strictly equal.\n\n    The function differs from the `===` operator in that the function treats\n    `-0` and `+0` as distinct.\n\n    Parameters\n    ----------\n    a: any\n        First input value.\n\n    b: any\n        Second input value.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether two arguments are strictly equal.\n\n    Examples\n    --------\n    > var bool = isStrictEqual( true, true )\n    true\n    > bool = isStrictEqual( {}, {} )\n    false\n    > bool = isStrictEqual( -0.0, -0.0 )\n    true\n    > bool = isStrictEqual( -0.0, 0.0 )\n    false\n    > bool = isStrictEqual( NaN, NaN )\n    false\n\n    See Also\n    --------\n    isSameValue\n",
	"isString": "\nisString( value )\n    Tests if a value is a string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string.\n\n    Examples\n    --------\n    > var bool = isString( 'beep' )\n    true\n    > bool = isString( new String( 'beep' ) )\n    true\n    > bool = isString( 5 )\n    false\n\n\nisString.isPrimitive( value )\n    Tests if a value is a string primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string primitive.\n\n    Examples\n    --------\n    > var bool = isString.isPrimitive( 'beep' )\n    true\n    > bool = isString.isPrimitive( new String( 'beep' ) )\n    false\n\n\nisString.isObject( value )\n    Tests if a value is a `String` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `String` object.\n\n    Examples\n    --------\n    > var bool = isString.isObject( new String( 'beep' ) )\n    true\n    > bool = isString.isObject( 'beep' )\n    false\n\n",
	"isStringArray": "\nisStringArray( value )\n    Tests if a value is an array of strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of strings.\n\n    Examples\n    --------\n    > var bool = isStringArray( [ 'abc', 'def' ] )\n    true\n    > bool = isStringArray( [ 'abc', 123 ] )\n    false\n\n\nisStringArray.primitives( value )\n    Tests if a value is an array containing only string primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing only string\n        primitives.\n\n    Examples\n    --------\n    > var arr = [ 'abc', 'def' ];\n    > var bool = isStringArray.primitives( arr )\n    true\n    > arr = [ 'abc', new String( 'def' ) ];\n    > bool = isStringArray.primitives( arr )\n    false\n\n\nisStringArray.objects( value )\n    Tests if a value is an array containing only `String` objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing only `String`\n        objects.\n\n    Examples\n    --------\n    > var arr = [ new String( 'ab' ), new String( 'cd' ) ];\n    > var bool = isStringArray.objects( arr )\n    true\n    > arr = [ new String( 'abc' ), 'def' ];\n    > bool = isStringArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isString\n",
	"isSymbol": "\nisSymbol( value )\n    Tests if a value is a symbol.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a symbol.\n\n    Examples\n    --------\n    > var bool = isSymbol( Symbol( 'beep' ) )\n    true\n    > bool = isSymbol( Object( Symbol( 'beep' ) ) )\n    true\n    > bool = isSymbol( {} )\n    false\n    > bool = isSymbol( null )\n    false\n    > bool = isSymbol( true )\n    false\n\n",
	"isSymbolArray": "\nisSymbolArray( value )\n    Tests if a value is an array-like object containing only symbols.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only symbols.\n\n    Examples\n    --------\n    > var bool = isSymbolArray( [ Symbol( 'beep' ), Symbol( 'boop' ) ] )\n    true\n    > bool = isSymbolArray( Symbol( 'beep' ) )\n    false\n    > bool = isSymbolArray( [] )\n    false\n    > bool = isSymbolArray( {} )\n    false\n    > bool = isSymbolArray( null )\n    false\n    > bool = isSymbolArray( true )\n    false\n\n\nisSymbolArray.primitives( value )\n    Tests if a value is an array-like object containing only `symbol`\n    primitives.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `symbol` primitives.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.primitives( [ Symbol( 'beep' ) ] )\n    true\n    > bool = isSymbolArray.primitives( [ Object( Symbol( 'beep' ) ) ] )\n    false\n    > bool = isSymbolArray.primitives( [] )\n    false\n    > bool = isSymbolArray.primitives( {} )\n    false\n    > bool = isSymbolArray.primitives( null )\n    false\n    > bool = isSymbolArray.primitives( true )\n    false\n\n\nisSymbolArray.objects( value )\n    Tests if a value is an array-like object containing only `Symbol`\n    objects.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `Symbol` objects.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.objects( [ Object( Symbol( 'beep' ) ) ] )\n    true\n    > bool = isSymbolArray.objects( [ Symbol( 'beep' ) ] )\n    false\n    > bool = isSymbolArray.objects( [] )\n    false\n    > bool = isSymbolArray.objects( {} )\n    false\n    > bool = isSymbolArray.objects( null )\n    false\n    > bool = isSymbolArray.objects( true )\n    false\n\n    See Also\n    --------\n    isArray, isSymbol\n",
	"isSyntaxError": "\nisSyntaxError( value )\n    Tests if a value is a `SyntaxError` object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a `SyntaxError` (or a descendant) object,\n    false positives may occur due to the fact that the `SyntaxError` constructor\n    inherits from `Error` and has no internal class of its own. Hence,\n    `SyntaxError` impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `SyntaxError` object.\n\n    Examples\n    --------\n    > var bool = isSyntaxError( new SyntaxError( 'beep' ) )\n    true\n    > bool = isSyntaxError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isTruthy": "\nisTruthy( value )\n    Tests if a value is a value which translates to `true` when evaluated in a\n    boolean context.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is truthy.\n\n    Examples\n    --------\n     > var bool = isTruthy( true )\n    true\n    > bool = isTruthy( {} )\n    true\n    > bool = isTruthy( [] )\n    true\n    > bool = isTruthy( false )\n    false\n    > bool = isTruthy( '' )\n    false\n    > bool = isTruthy( 0 )\n    false\n    > bool = isTruthy( null )\n    false\n    > bool = isTruthy( void 0 )\n    false\n    > bool = isTruthy( NaN )\n    false\n\n    See Also\n    --------\n    isFalsy\n",
	"isTruthyArray": "\nisTruthyArray( value )\n    Tests if a value is an array-like object containing only truthy values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only truthy values.\n\n    Examples\n    --------\n    > var bool = isTruthyArray( [ {}, [] ] )\n    true\n    > bool = isTruthyArray( [ null, '' ] )\n    false\n    > bool = isTruthyArray( [] )\n    false\n\n    See Also\n    --------\n    isFalsyArray, isTruthy\n",
	"isTypeError": "\nisTypeError( value )\n    Tests if a value is a `TypeError` object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a `TypeError` (or a descendant) object,\n    false positives may occur due to the fact that the `TypeError` constructor\n    inherits from `Error` and has no internal class of its own. Hence,\n    `TypeError` impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `TypeError` object.\n\n    Examples\n    --------\n    > var bool = isTypeError( new TypeError( 'beep' ) )\n    true\n    > bool = isTypeError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isTypedArray": "\nisTypedArray( value )\n    Tests if a value is a typed array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a typed array.\n\n    Examples\n    --------\n    > var bool = isTypedArray( new Int8Array( 10 ) );\n    true\n\n    See Also\n    --------\n    isArray, isTypedArrayLike\n",
	"isTypedArrayLike": "\nisTypedArrayLike( value )\n    Tests if a value is typed-array-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is typed-array-like.\n\n    Examples\n    --------\n    > var bool = isTypedArrayLike( new Int16Array() )\n    true\n    > bool = isTypedArrayLike({\n    >    'length': 10,\n    >    'byteOffset': 0,\n    >    'byteLength': 10,\n    >    'BYTES_PER_ELEMENT': 4\n    > })\n    true\n\n    See Also\n    --------\n    isTypedArray\n",
	"isUint16Array": "\nisUint16Array( value )\n    Tests if a value is a `Uint16Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Uint16Array`.\n\n    Examples\n    --------\n    > var bool = isUint16Array( new Uint16Array( 10 ) )\n    true\n    > bool = isUint16Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint32Array, isUint8Array\n",
	"isUint32Array": "\nisUint32Array( value )\n    Tests if a value is a `Uint32Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Uint32Array`.\n\n    Examples\n    --------\n    > var bool = isUint32Array( new Uint32Array( 10 ) )\n    true\n    > bool = isUint32Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint16Array, isUint8Array\n",
	"isUint8Array": "\nisUint8Array( value )\n    Tests if a value is a `Uint8Array`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Uint8Array`.\n\n    Examples\n    --------\n    > var bool = isUint8Array( new Uint8Array( 10 ) )\n    true\n    > bool = isUint8Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint16Array, isUint32Array\n",
	"isUint8ClampedArray": "\nisUint8ClampedArray( value )\n    Tests if a value is a `Uint8ClampedArray`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Uint8ClampedArray`.\n\n    Examples\n    --------\n    > var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) )\n    true\n    > bool = isUint8ClampedArray( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint8Array\n",
	"isUNCPath": "\nisUNCPath( value )\n    Tests if a value is a UNC path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a UNC path.\n\n    Examples\n    --------\n    > var bool = isUNCPath( '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz' )\n    true\n    > bool = isUNCPath( '/foo/bar/baz' )\n    false\n\n",
	"isUndefined": "\nisUndefined( value )\n    Tests if a value is `undefined`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is `undefined`.\n\n    Examples\n    --------\n    > var bool = isUndefined( void 0 )\n    true\n    > bool = isUndefined( null )\n    false\n\n    See Also\n    --------\n    isNull, isUndefinedOrNull\n",
	"isUndefinedOrNull": "\nisUndefinedOrNull( value )\n    Tests if a value is `undefined` or `null`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is `undefined` or `null`.\n\n    Examples\n    --------\n    > var bool = isUndefinedOrNull( void 0 )\n    true\n    > bool = isUndefinedOrNull( null )\n    true\n    > bool = isUndefinedOrNull( false )\n    false\n\n    See Also\n    --------\n    isNull, isUndefined\n",
	"isUnityProbabilityArray": "\nisUnityProbabilityArray( value )\n    Tests if a value is an array of probabilities that sum to one.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of probabilities that sum\n        to one.\n\n    Examples\n    --------\n    > var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] )\n    true\n    > bool = isUnityProbabilityArray( Uint8Array( [ 0, 1 ] )\n    true\n    > bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] )\n    false\n    > bool = isUnityProbabilityArray( [ 3.14, 0.0 ] )\n    false\n\n    See Also\n    --------\n    isProbability, isProbabilityArray\n",
	"isUppercase": "\nisUppercase( value )\n    Tests if a value is an uppercase `string`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an uppercase `string`.\n\n    Examples\n    --------\n    > var bool = isUppercase( 'HELLO' )\n    true\n    > bool = isUppercase( 'World' )\n    false\n\n    See Also\n    --------\n    isLowercase, isString\n",
	"isURI": "\nisURI( value )\n    Tests if a value is a URI.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a URI.\n\n    Examples\n    --------\n    > var bool = isURI( 'http://google.com' )\n    true\n    > bool = isURI( 'http://localhost/' )\n    true\n    > bool = isURI( 'http://example.w3.org/path%20with%20spaces.html' )\n    true\n    > bool = isURI( 'ftp://ftp.is.co.za/rfc/rfc1808.txt' )\n    true\n\n    // No scheme:\n    > bool = isURI( '' )\n    false\n    > bool = isURI( 'foo@bar' )\n    false\n    > bool = isURI( '://foo/' )\n    false\n\n    // Illegal characters:\n    > bool = isURI( 'http://<foo>' )\n    false\n\n    // Invalid path:\n    > bool = isURI( 'http:////foo.html' )\n    false\n\n    // Incomplete hex escapes:\n    > bool = isURI( 'http://example.w3.org/%a' )\n    false\n\n",
	"isURIError": "\nisURIError( value )\n    Tests if a value is a `URIError` object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a `URIError` (or a descendant) object,\n    false positives may occur due to the fact that the `URIError` constructor\n    inherits from `Error` and has no internal class of its own. Hence,\n    `URIError` impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `URIError` object.\n\n    Examples\n    --------\n    > var bool = isURIError( new URIError( 'beep' ) )\n    true\n    > bool = isURIError( {} )\n    false\n\n    See Also\n    --------\n    isError\n",
	"isWhitespace": "\nisWhitespace( str )\n    Tests whether a string contains only white space characters.\n\n    A white space character is defined as one of the 25 characters defined as a\n    white space (\"WSpace=Y\",\"WS\") character in the Unicode 9.0 character\n    database, as well as one related white space character without the Unicode\n    character property \"WSpace=Y\" (zero width non-breaking space which was\n    deprecated as of Unicode 3.2).\n\n    Parameters\n    ----------\n    str: string\n        Input string\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only white space\n        characters.\n\n    Examples\n    --------\n    > var bool = isWhitespace( '       ' )\n    true\n    > bool = isWhitespace( 'abcdef' )\n    false\n    > bool = isWhitespace( '' )\n    false\n\n    See Also\n    --------\n    RE_WHITESPACE\n",
	"IS_BROWSER": "\nIS_BROWSER\n    Boolean indicating if the runtime is a web browser.\n\n    Examples\n    --------\n    > IS_BROWSER\n    <boolean>\n\n",
	"IS_DARWIN": "\nIS_DARWIN\n    Boolean indicating if the current process is running on Darwin.\n\n    Examples\n    --------\n    > IS_DARWIN\n    <boolean>\n\n",
	"IS_ELECTRON": "\nIS_ELECTRON\n    Boolean indicating if the runtime is Electron.\n\n    Examples\n    --------\n    > IS_ELECTRON\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON_MAIN, IS_ELECTRON_RENDERER\n",
	"IS_ELECTRON_MAIN": "\nIS_ELECTRON_MAIN\n    Boolean indicating if the runtime is the main Electron process.\n\n    Examples\n    --------\n    > IS_ELECTRON_MAIN\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON, IS_ELECTRON_RENDERER\n",
	"IS_ELECTRON_RENDERER": "\nIS_ELECTRON_RENDERER\n    Boolean indicating if the runtime is the Electron renderer process.\n\n    Examples\n    --------\n    > IS_ELECTRON_RENDERER\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON, IS_ELECTRON_MAIN\n",
	"IS_LITTLE_ENDIAN": "\nIS_LITTLE_ENDIAN\n    Boolean indicating if the environment is little endian.\n\n    Examples\n    --------\n    > IS_LITTLE_ENDIAN\n    <boolean>\n\n",
	"IS_NODE": "\nIS_NODE\n    Boolean indicating if the runtime is Node.js.\n\n    Examples\n    --------\n    > IS_NODE\n    <boolean>\n\n",
	"IS_WEB_WORKER": "\nIS_WEB_WORKER\n    Boolean indicating if the runtime is a web worker.\n\n    Examples\n    --------\n    > IS_WEB_WORKER\n    <boolean>\n\n",
	"IS_WINDOWS": "\nIS_WINDOWS\n    Boolean indicating if the current process is running on Windows.\n\n    Examples\n    --------\n    > IS_WINDOWS\n    <boolean>\n\n",
	"keysIn": "\nkeysIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    keys: Array\n        Value array.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var keys = keysIn( obj )\n    e.g., [ 'beep', 'foo' ]\n\n    See Also\n    --------\n    objectEntriesIn, objectValuesIn\n",
	"keyBy": "\nkeyBy( collection, fcn[, thisArg] )\n    Converts a collection to an object whose keys are determined by a provided\n    function and whose values are the collection values.\n\n    When invoked, the input function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If more than one element in a collection resolves to the same key, the key\n    value is the collection element which last resolved to the key.\n\n    Object values are shallow copies.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Output object.\n\n    Examples\n    --------\n    > function toKey( v ) { return v.a; };\n    > var arr = [ { 'a': 1 }, { 'a': 2 } ];\n    > keyBy( arr, toKey )\n    { '1': { 'a': 1 }, '2': { 'a': 2 } }\n\n    See Also\n    --------\n    forEach\n",
	"keyByRight": "\nkeyByRight( collection, fcn[, thisArg] )\n    Converts a collection to an object whose keys are determined by a provided\n    function and whose values are the collection values, iterating from right to\n    left.\n\n    When invoked, the input function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If more than one element in a collection resolves to the same key, the key\n    value is the collection element which last resolved to the key.\n\n    Object values are shallow copies.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Output object.\n\n    Examples\n    --------\n    > function toKey( v ) { return v.a; };\n    > var arr = [ { 'a': 1 }, { 'a': 2 } ];\n    > keyByRight( arr, toKey )\n    { '2': { 'a': 2 }, '1': { 'a': 1 } }\n\n    See Also\n    --------\n    forEachRight, keyBy\n",
	"kstest": "\nkstest( x, y[, ...params][, opts] )\n    Computes a Kolmogorov-Smirnov goodness-of-fit test.\n\n    For a numeric array or typed array `x`, a Kolmogorov-Smirnov goodness-of-fit\n    is computed for the null hypothesis that the values of `x` come from the\n    distribution specified by `y`. `y` can be either a string with the name of\n    the distribution to test against, or a function.\n\n    In the latter case, `y` is expected to be the cumulative distribution\n    function (CDF) of the distribution to test against, with its first parameter\n    being the value at which to evaluate the CDF and the remaining parameters\n    constituting the parameters of the distribution. The parameters of the\n    distribution are passed as additional arguments after `y` from `kstest` to\n    the chosen CDF. The function returns an object holding the calculated test\n    statistic `statistic` and the `pValue` of the test.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the hypothesis test results.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Input array holding numeric values.\n\n    y: Function|string\n        Either a CDF function or a string denoting the name of a distribution.\n\n    params: ...number (optional)\n        Distribution parameters passed to reference CDF.\n\n    options: Object (optional)\n        Function options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.sorted: boolean (optional)\n        Boolean indicating if the input array is already in sorted order.\n        Default: `false`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that the true distribution of `x` is not equal\n        to the reference distribution specified by `y` (`two-sided`), whether it\n        is `less` than the reference distribution or `greater` than the\n        reference distribution. Default: `'two-sided'`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        P-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.alternative: string\n        Used test alternative. Either `two-sided`, `less` or `greater`.\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Verify that data is drawn from a normal distribution:\n    > var rnorm = base.random.normal.factory({ 'seed': 4839 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < 100; i++ ) { x[ i ] = rnorm( 3.0, 1.0 ); }\n    // Test against N(0,1)\n    > var out = kstest( x, 'normal', 0.0, 1.0 );\n    { pValue: 0.0, statistic: 0.847, ... }\n    // Test against N(3,1)\n    > out = kstest( x, 'normal', 3.0, 1.0 )\n    { pValue: 0.6282, statistic: 0.0733, ... }\n\n    // Verify that data is drawn from a uniform distribution:\n    > runif = base.random.uniform.factory( 0.0, 1.0, { 'seed': 8798 })\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) { x[ i ] = runif(); }\n    > out = kstest( x, 'uniform', 0.0, 1.0 )\n    { pValue: ~0.703, statistic: ~0.069, ... }\n\n    // Print output:\n    > out.print()\n    Kolmogorov-Smirnov goodness-of-fit test.\n\n    Null hypothesis: the CDF of `x` is equal equal to the reference CDF.\n\n        pValue: 0.7039\n        statistic: 0.0689\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Set custom significance level:\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alpha': 0.1 })\n    { pValue: ~0.7039, statistic: ~0.069, ... }\n\n    // Carry out one-sided hypothesis tests:\n    > runif = base.random.uniform.factory( 0.0, 1.0, { 'seed': 8798 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) { x[ i ] = runif(); }\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alternative': 'less' });\n    { pValue: ~0.358, statistic: ~0.07, ... }\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alternative': 'greater' });\n    { pValue: ~0.907, statistic: ~0.02, ... }\n\n    // Set `sorted` option to true when data is in increasing order:\n    x = [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 ]\n    out = kstest( x, 'uniform', 0.0, 1.0, { 'sorted': true })\n    { pValue: ~1, statistic: 0.1, ... }\n\n",
	"LIU_NEGATIVE_OPINION_WORDS_EN": "\nLIU_NEGATIVE_OPINION_WORDS_EN()\n    Returns a list of negative opinion words.\n\n    A word's appearance in a sentence does *not* necessarily imply a positive or\n    negative opinion.\n\n    The list includes misspelled words. Their presence is intentional, as such\n    misspellings frequently occur in social media content.\n\n    Returns\n    -------\n    out: Array<string>\n        List of negative opinion words.\n\n    Examples\n    --------\n    > var list = LIU_NEGATIVE_OPINION_WORDS_EN()\n    [ '2-faced', '2-faces', 'abnormal', 'abolish', ... ]\n\n    References\n    ----------\n    - Hu, Minqing, and Bing Liu. 2004. \"Mining and Summarizing Customer\n    Reviews.\" In *Proceedings of the Tenth Acm Sigkdd International Conference\n    on Knowledge Discovery and Data Mining*, 168–77. KDD '04. New York, NY, USA:\n    ACM. doi:10.1145/1014052.1014073.\n    - Liu, Bing, Minqing Hu, and Junsheng Cheng. 2005. \"Opinion Observer:\n    Analyzing and Comparing Opinions on the Web.\" In *Proceedings of the 14th\n    International Conference on World Wide Web*, 342–51. WWW '05. New York, NY,\n    USA: ACM. doi:10.1145/1060745.1060797.\n\n    * If you use the list for publication or third party consumption, please\n    cite one of the listed references.\n\n    See Also\n    --------\n    LIU_POSITIVE_OPINION_WORDS_EN\n",
	"LIU_POSITIVE_OPINION_WORDS_EN": "\nLIU_POSITIVE_OPINION_WORDS_EN()\n    Returns a list of positive opinion words.\n\n    A word's appearance in a sentence does *not* necessarily imply a positive or\n    negative opinion.\n\n    The list includes misspelled words. Their presence is intentional, as such\n    misspellings frequently occur in social media content.\n\n    Returns\n    -------\n    out: Array<string>\n        List of positive opinion words.\n\n    Examples\n    --------\n    > var list = LIU_POSITIVE_OPINION_WORDS_EN()\n    [ 'a+', 'abound', 'abounds', 'abundance', ... ]\n\n    References\n    ----------\n    - Hu, Minqing, and Bing Liu. 2004. 'Mining and Summarizing Customer\n    Reviews.' In *Proceedings of the Tenth Acm Sigkdd International Conference\n    on Knowledge Discovery and Data Mining*, 168–77. KDD '04. New York, NY, USA:\n    ACM. doi:10.1145/1014052.1014073.\n    - Liu, Bing, Minqing Hu, and Junsheng Cheng. 2005. 'Opinion Observer:\n    Analyzing and Comparing Opinions on the Web.' In *Proceedings of the 14th\n    International Conference on World Wide Web*, 342–51. WWW '05. New York, NY,\n    USA: ACM. doi:10.1145/1060745.1060797.\n\n    * If you use the list for publication or third party consumption, please\n    cite one of the listed references.\n\n    See Also\n    --------\n    LIU_NEGATIVE_OPINION_WORDS_EN\n",
	"LN_HALF": "\nLN_HALF\n    Natural logarithm of `1/2`.\n\n    Examples\n    --------\n    > LN_HALF\n    -0.6931471805599453\n\n",
	"LN_PI": "\nLN_PI\n    Natural logarithm of the mathematical constant `π`.\n\n    Examples\n    --------\n    > LN_PI\n    1.1447298858494002\n\n    See Also\n    --------\n    PI\n",
	"LN_SQRT_TWO_PI": "\nLN_SQRT_TWO_PI\n    Natural logarithm of the square root of `2π`.\n\n    Examples\n    --------\n    > LN_SQRT_TWO_PI\n    0.9189385332046728\n\n    See Also\n    --------\n    PI\n",
	"LN_TWO_PI": "\nLN_TWO_PI\n    Natural logarithm of `2π`.\n\n    Examples\n    --------\n    > LN_TWO_PI\n    1.8378770664093456\n\n    See Also\n    --------\n    TWO_PI\n",
	"LN2": "\nLN2\n    Natural logarithm of `2`.\n\n    Examples\n    --------\n    > LN2\n    0.6931471805599453\n\n",
	"linspace": "\nlinspace( start, stop[, length] )\n    Generates a linearly spaced numeric array.\n\n    If a `length` is not provided, the default output array length is `100`.\n\n    The output array is guaranteed to include the `start` and `stop` values.\n\n    Parameters\n    ----------\n    start: number\n        First array value.\n\n    stop: number\n        Last array value.\n\n    length: integer (optional)\n        Length of output array. Default: `100`.\n\n    Returns\n    -------\n    arr: Array\n        Linearly spaced numeric array.\n\n    Examples\n    --------\n    > var arr = linspace( 0, 100, 6 )\n    [ 0, 20, 40, 60, 80, 100 ]\n\n    See Also\n    --------\n    incrspace, logspace\n",
	"logspace": "\nlogspace( a, b[, length] )\n    Generates a logarithmically spaced numeric array between `10^a` and `10^b`.\n\n    If a `length` is not provided, the default output array length is `10`.\n\n    The output array includes the values `10^a` and `10^b`.\n\n    Parameters\n    ----------\n    a: number\n        Exponent of start value.\n\n    b: number\n        Exponent of end value.\n\n    length: integer (optional)\n        Length of output array. Default: `10`.\n\n    Returns\n    -------\n    arr: Array\n        Logarithmically spaced numeric array.\n\n    Examples\n    --------\n    > var arr = logspace( 0, 2, 6 )\n    [ 1, ~2.5, ~6.31, ~15.85, ~39.81, 100 ]\n\n    See Also\n    --------\n    incrspace, linspace\n",
	"lowercase": "\nlowercase( str )\n    Converts a `string` to lowercase.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Lowercase string.\n\n    Examples\n    --------\n    > var out = lowercase( 'bEEp' )\n    'beep'\n\n    See Also\n    --------\n    uncapitalize, uppercase\n",
	"lowercaseKeys": "\nlowercaseKeys( obj )\n    Converts each object key to lowercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'A': 1, 'B': 2 };\n    > var out = lowercaseKeys( obj )\n    { 'a': 1, 'b': 2 }\n\n    See Also\n    --------\n    uncapitalizeKeys, uppercaseKeys\n",
	"lpad": "\nlpad( str, len[, pad] )\n    Left pads a `string` such that the padded `string` has a length of at least\n    `len`.\n\n    An output string is not guaranteed to have a length of exactly `len`, but to\n    have a length of at least `len`. To generate a padded string having a length\n    equal to `len`, post-process a padded string by trimming off excess\n    characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Minimum string length.\n\n    pad: string (optional)\n        String used to pad. Default: ' '.\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    > var out = lpad( 'a', 5 )\n    '    a'\n    > out = lpad( 'beep', 10, 'b' )\n    'bbbbbbbeep'\n    > out = lpad( 'boop', 12, 'beep' )\n    'beepbeepboop'\n\n    See Also\n    --------\n    pad, rpad\n",
	"ltrim": "\nltrim( str )\n    Trims whitespace from the beginning of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = ltrim( ' \\r\\n\\t  Beep \\t\\t\\n  ' )\n    'Beep \\t\\t\\n  '\n\n    See Also\n    --------\n    trim, rtrim\n",
	"MALE_FIRST_NAMES_EN": "\nMALE_FIRST_NAMES_EN()\n    Returns a list of common male first names in English speaking countries.\n\n    Returns\n    -------\n    out: Array<string>\n        List of common male first names.\n\n    Examples\n    --------\n    > var list = MALE_FIRST_NAMES_EN()\n    [ 'Aaron', 'Ab', 'Abba', 'Abbe', ... ]\n\n    References\n    ----------\n    - Ward, Grady. 2002. 'Moby Word II.' <http://www.gutenberg.org/files/3201/\n    3201.txt>.\n\n    See Also\n    --------\n    FEMALE_FIRST_NAMES_EN\n",
	"mapFun": "\nmapFun( fcn, n[, thisArg] )\n    Invokes a function `n` times and returns an array of accumulated function\n    return values.\n\n    The invoked function is provided a single argument: the invocation index\n    (zero-based).\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke.\n\n    n: integer\n        Number of times to invoke a function.\n\n    thisArg: any (optional)\n        Function execution context.\n\n    Returns\n    -------\n    out: Array\n        Array of accumulated function return values.\n\n    Examples\n    --------\n    > function fcn( i ) { return i; };\n    > var arr = mapFun( fcn, 5 )\n    [ 0, 1, 2, 3, 4 ]\n\n    See Also\n    --------\n    mapFunAsync\n",
	"mapFunAsync": "\nmapFunAsync( fcn, n, [options,] done )\n    Invokes a function `n` times and returns an array of accumulated function\n    return values.\n\n    For each iteration, the provided function is invoked with two arguments:\n\n    - `index`: invocation index (starting from zero)\n    - `next`: callback to be invoked upon function completion\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke.\n\n    n: integer\n        Number of times to invoke a function.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to allow only one pending invocation at a\n        time. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    done: Function\n        A callback invoked upon executing a provided function `n` times or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > mapFunAsync( fcn, 10, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > var opts = { 'limit': 2 };\n    > mapFunAsync( fcn, 10, opts, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Sequential invocation:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > var opts = { 'series': true };\n    > mapFunAsync( fcn, 10, opts, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n\nmapFunAsync.factory( [options,] fcn )\n    Returns a function which invokes a function `n` times and returns an array\n    of accumulated function return values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to allow only one pending invocation at a\n        time. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        Function to invoke.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function `n` times and returns an array of\n        accumulated function return values.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapFunAsync.factory( opts, fcn );\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > mapFunAsync( 10, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    See Also\n    --------\n    mapFun\n",
	"mapKeys": "\nmapKeys( obj, transform )\n    Maps keys from one object to a new object having the same values.\n\n    The transform function is provided three arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n\n    The value returned by a transform function should be a value which can be\n    serialized as an object key.\n\n    The function only maps own properties. Hence, the function does not map\n    inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    transform: Function\n        Transform function. Return values specify the keys of the output object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function transform( key, value ) { return key + value; };\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = mapKeys( obj, transform )\n    { 'a1': 1, 'b2': 2 }\n\n    See Also\n    --------\n    mapValues\n",
	"mapKeysAsync": "\nmapKeysAsync( obj, [options,] transform, done )\n    Maps keys from one object to a new object having the same values.\n\n    When invoked, `transform` is provided a maximum of four arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n    - `next`: a callback to be invoked after processing an object `key`\n\n    The actual number of provided arguments depends on function length. If\n    `transform` accepts two arguments, `transform` is provided:\n\n    - `key`\n    - `next`\n\n    If `transform` accepts three arguments, `transform` is provided:\n\n    - `key`\n    - `value`\n    - `next`\n\n    For every other `transform` signature, `transform` is provided all four\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `key`: transformed key\n\n    If a `transform` function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The key returned by a transform function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function only maps own properties. Hence, the function does not map\n    inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration and insertion order are *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Returned values specify the keys of the output\n        object.\n\n    done: Function\n        A callback invoked either upon processing all own properties or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2 };\n    > mapKeysAsync( obj, transform, done )\n    { 'a:1': 1, 'b:2': 2 }\n\n    // Limit number of concurrent invocations:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapKeysAsync( obj, opts, transform, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n\n    // Process sequentially:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'series': true };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapKeysAsync( obj, opts, transform, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n\n\nmapKeysAsync.factory( [options,] transform )\n    Returns a function which maps keys from one object to a new object having\n    the same values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Returned values specify the keys of the output\n        object.\n\n    Returns\n    -------\n    out: Function\n        A function which maps keys from one object to a new object having the\n        same values.\n\n    Examples\n    --------\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapKeysAsync.factory( opts, transform );\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > f( obj, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n    > obj = { 'beep': 'boop' };\n    > f( obj, done )\n    { 'beep:boop': 'beep' }\n\n    See Also\n    --------\n    mapKeys, mapValuesAsync\n",
	"mapValues": "\nmapValues( obj, transform )\n    Maps values from one object to a new object having the same keys.\n\n    The transform function is provided three arguments:\n\n    - `value`: object value corresponding to `key`\n    - `key`: object key\n    - `obj`: the input object\n\n    The function only maps values from own properties. Hence, the function does\n    not map inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function transform( value, key ) { return key + value; };\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = mapValues( obj, transform )\n    { 'a': 'a1', 'b': 'b2' }\n\n    See Also\n    --------\n    mapKeys, omitBy, pickBy\n",
	"mapValuesAsync": "\nmapValuesAsync( obj, [options,] transform, done )\n    Maps values from one object to a new object having the same keys.\n\n    When invoked, `transform` is provided a maximum of four arguments:\n\n    - `value`: object value corresponding to `key`\n    - `key`: object key\n    - `obj`: the input object\n    - `next`: a callback to be invoked after processing an object `value`\n\n    The actual number of provided arguments depends on function length. If\n    `transform` accepts two arguments, `transform` is provided:\n\n    - `value`\n    - `next`\n\n    If `transform` accepts three arguments, `transform` is provided:\n\n    - `value`\n    - `key`\n    - `next`\n\n    For every other `transform` signature, `transform` is provided all four\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `value`: transformed value\n\n    If a `transform` function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function only maps values from own properties. Hence, the function does\n    not map inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration and insertion order are *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    done: Function\n        A callback invoked either upon processing all own properties or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2 };\n    > mapValuesAsync( obj, transform, done )\n    { 'a': 'a:1', 'b': 'b:2' }\n\n    // Limit number of concurrent invocations:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapValuesAsync( obj, opts, transform, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n\n    // Process sequentially:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'series': true };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapValuesAsync( obj, opts, transform, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n\n\nmapValuesAsync.factory( [options,] transform )\n    Returns a function which maps values from one object to a new object having\n    the same keys.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    Returns\n    -------\n    out: Function\n        A function which maps values from one object to a new object having the\n        same keys.\n\n    Examples\n    --------\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapValuesAsync.factory( opts, transform );\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > f( obj, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n    > obj = { 'beep': 'boop' };\n    > f( obj, done )\n    { 'beep': 'beep:boop' }\n\n    See Also\n    --------\n    mapKeysAsync, mapValues\n",
	"memoize": "\nmemoize( fcn[, hashFunction] )\n    Returns a memoized function.\n\n    The function does not set the `length` property of the returned function.\n    Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    The function serializes provided arguments as a string and stores results\n    using the string as an identifier. To use a custom hash function, provide a\n    hash function argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to memoize.\n\n    hashFunction: Function (optional)\n        Function to map a set of arguments to a single value identifying that\n        set.\n\n    Returns\n    -------\n    out: Function\n        Memoized function.\n\n    Examples\n    --------\n    > function factorial( n ) {\n    ...     var prod;\n    ...     var i;\n    ...     prod = 1;\n    ...     for ( i = n; i > 1; i-- ) {\n    ...         prod *= i;\n    ...     }\n    ...     return prod;\n    ... };\n    > var memoized = memoize( factorial );\n    > var v = memoized( 5 )\n    120\n    > v = memoized( 5 )\n    120\n\n",
	"merge": "\nmerge( target, ...source )\n    Merges objects into a target object.\n\n    The target object is mutated.\n\n    Only plain objects are merged and extended. Other values/types are either\n    deep copied or assigned.\n\n    Support for deep merging class instances is inherently fragile.\n\n    `Number`, `String`, and `Boolean` objects are merged as primitives.\n\n    Functions are not deep copied.\n\n    Parameters\n    ----------\n    target: Object\n        Target object.\n\n    source: ...Object\n        Source objects (i.e., objects to be merged into the target object).\n\n    Returns\n    -------\n    out: Object\n        Merged (target) object.\n\n    Examples\n    --------\n    > var target = { 'a': 'beep' };\n    > var source = { 'a': 'boop', 'b': 'bap' };\n    > var out = merge( target, source )\n    { 'a': 'boop', 'b': 'bap' }\n    > var bool = ( out === target )\n    true\n\n\nmerge.factory( options )\n    Returns a function for merging and extending objects.\n\n    Parameters\n    ----------\n    options: Object\n        Options.\n\n    options.level: integer (optional)\n        Merge level. Default: Infinity.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy merged values. Deep copying\n        prevents shared references and source object mutation. Default: true.\n\n    options.override: boolean|Function (optional)\n        Defines the merge strategy. If `true`, source object values will always\n        override target object values. If `false`, source values never override\n        target values (useful for adding, but not overwriting, properties). To\n        define a custom merge strategy, provide a function. Default: true.\n\n    options.extend: boolean (optional)\n        Boolean indicating whether new properties can be added to the target\n        object. If `false`, only shared properties are merged. Default: true.\n\n    Returns\n    -------\n    fcn: Function\n        Function which can be used to merge objects.\n\n    Examples\n    --------\n    > var opts = {\n    ...     'level': 100,\n    ...     'copy': true,\n    ...     'override': true,\n    ...     'extend': true\n    ... };\n    > var merge = merge.factory( opts )\n    <Function>\n\n    // Set the `level` option to limit the merge depth:\n    > merge = merge.factory( { 'level': 2 } );\n    > var target = {\n    ...     '1': { 'a': 'beep', '2': { '3': null, 'b': [ 5, 6, 7 ] } }\n    ... };\n    > var source = {\n    ...     '1': { 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } }\n    ... };\n    > var out = merge( target, source )\n    { '1': { 'a': 'beep', 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } } }\n\n    // Set the `copy` option to `false` to allow shared references:\n    > merge = merge.factory( { 'copy': false } );\n    > target = {};\n    > source = { 'a': [ 1, 2, 3 ] };\n    > out = merge( target, source );\n    > var bool = ( out.a === source.a )\n    true\n\n    // Set the `override` option to `false` to preserve existing properties:\n    > merge = merge.factory( { 'override': false } );\n    > target = { 'a': 'beep', 'b': 'boop' };\n    > source = { 'a': null, 'c': 'bop' };\n    > out = merge( target, source )\n    { 'a': 'beep', 'b': 'boop', 'c': 'bop' }\n\n    // Define a custom merge strategy:\n    > function strategy( a, b, key ) {\n    ...     // a => target value\n    ...     // b => source value\n    ...     // key => object key\n    ...     if ( key === 'a' ) {\n    ...         return b;\n    ...     }\n    ...     if ( key === 'b' ) {\n    ...         return a;\n    ...     }\n    ...     return 'bebop';\n    ... };\n    > merge = merge.factory( { 'override': strategy } );\n    > target = { 'a': 'beep', 'b': 'boop', 'c': 1234 };\n    > source = { 'a': null, 'b': {}, 'c': 'bop' };\n    > out = merge( target, source )\n    { 'a': null, 'b': 'boop', 'c': 'bebop' }\n\n    // Prevent non-existent properties from being added to the target object:\n    > merge = merge.factory( { 'extend': false } );\n    > target = { 'a': 'beep', 'b': 'boop' };\n    > source = { 'b': 'hello', 'c': 'world' };\n    > out = merge( target, source )\n    { 'a': 'beep', 'b': 'hello' }\n\n    See Also\n    --------\n    copy\n",
	"MILLISECONDS_IN_DAY": "\nMILLISECONDS_IN_DAY\n    Number of milliseconds in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var ms = days * MILLISECONDS_IN_DAY\n    271296000\n\n",
	"MILLISECONDS_IN_HOUR": "\nMILLISECONDS_IN_HOUR\n    Number of milliseconds in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var ms = hrs * MILLISECONDS_IN_HOUR\n    11304000\n\n",
	"MILLISECONDS_IN_MINUTE": "\nMILLISECONDS_IN_MINUTE\n    Number of milliseconds in a minute.\n\n    Examples\n    --------\n    > var mins = 3.14;\n    > var ms = mins * MILLISECONDS_IN_MINUTE\n    188400\n\n",
	"MILLISECONDS_IN_SECOND": "\nMILLISECONDS_IN_SECOND\n    Number of milliseconds in a second.\n\n    Examples\n    --------\n    > var secs = 3.14;\n    > var ms = secs * MILLISECONDS_IN_SECOND\n    3140\n\n",
	"MILLISECONDS_IN_WEEK": "\nMILLISECONDS_IN_WEEK\n    Number of milliseconds in a week.\n\n    Examples\n    --------\n    > var weeks = 3.14;\n    > var ms = weeks * MILLISECONDS_IN_WEEK\n    1899072000\n\n",
	"MINARD_NAPOLEONS_MARCH": "\nMINARD_NAPOLEONS_MARCH( [options] )\n    Returns data for Charles Joseph Minard's cartographic depiction of\n    Napoleon's Russian campaign of 1812.\n\n    Data includes the following:\n\n    - army: army size\n    - cities: cities\n    - labels: map labels\n    - temperature: temperature during the army's return from Russia\n    - rivers: river data\n\n    Temperatures are on the Réaumur scale. Multiply each temperature by `1.25`\n    to convert to Celsius.\n\n    River data is formatted as GeoJSON.\n\n    River data is incomplete, with portions of rivers missing.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.data: string (optional)\n        Dataset name.\n\n    Returns\n    -------\n    out: Object|Array<Object>\n        Minard's data.\n\n    Examples\n    --------\n    > var data = MINARD_NAPOLEONS_MARCH();\n    > var army = data.army\n    [...]\n    > var cities = data.cities\n    [...]\n    > var labels = data.labels\n    [...]\n    > var river = data.river\n    {...}\n    > var t = data.temperature\n    [...]\n\n    References\n    ----------\n    - Minard, Charles Joseph. 1869. *Tableaux graphiques et cartes figuratives*.\n    Ecole nationale des ponts et chaussées.\n    - Wilkinson, Leland. 2005. *The Grammar of Graphics*. Springer-Verlag New\n    York. doi:10.1007/0-387-28695-0.\n\n",
	"MINUTES_IN_DAY": "\nMINUTES_IN_DAY\n    Number of minutes in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var mins = days * MINUTES_IN_DAY\n    4521.6\n\n",
	"MINUTES_IN_HOUR": "\nMINUTES_IN_HOUR\n    Number of minutes in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var mins = hrs * MINUTES_IN_HOUR\n    188.4\n\n",
	"MINUTES_IN_WEEK": "\nMINUTES_IN_WEEK\n    Number of minutes in a week.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var mins = wks * MINUTES_IN_WEEK\n    31651.2\n\n",
	"minutesInMonth": "\nminutesInMonth( [month[, year]] )\n    Returns the number of minutes in a month.\n\n    By default, the function returns the number of minutes in the current month\n    of the current year (according to local time). To determine the number of\n    minutes for a particular month and year, provide `month` and `year`\n    arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also supports providing a `Date` object.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Minutes in a month.\n\n    Examples\n    --------\n    > var num = minutesInMonth()\n    <number>\n    > num = minutesInMonth( 2 )\n    <number>\n    > num = minutesInMonth( 2, 2016 )\n    41760\n    > num = minutesInMonth( 2, 2017 )\n    40320\n\n    // Other ways to supply month:\n    > num = minutesInMonth( 'feb', 2016 )\n    41760\n    > num = minutesInMonth( 'february', 2016 )\n    41760\n\n    See Also\n    --------\n    minutesInYear\n",
	"minutesInYear": "\nminutesInYear( [value] )\n    Returns the number of minutes in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of minutes in the current year\n    (according to local time). To determine the number of minutes for a\n    particular year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of minutes in a year.\n\n    Examples\n    --------\n    > var num = minutesInYear()\n    <number>\n    > num = minutesInYear( 2016 )\n    527040\n    > num = minutesInYear( 2017 )\n    525600\n\n    See Also\n    --------\n    minutesInMonth\n",
	"MOBY_DICK": "\nMOBY_DICK()\n    Returns the text of Moby Dick by Herman Melville.\n\n    Each array element has the following fields:\n\n    - chapter: book chapter (number or identifier)\n    - title: chapter title (if available; otherwise, empty)\n    - text: chapter text\n\n    Returns\n    -------\n    out: Array<Object>\n        Book text.\n\n    Examples\n    --------\n    > var data = MOBY_DICK()\n    [ {...}, {...}, ... ]\n\n",
	"MONTHS_IN_YEAR": "\nMONTHS_IN_YEAR\n    Number of months in a year.\n\n    Examples\n    --------\n    > var yrs = 3.14;\n    > var mons = yrs * MONTHS_IN_YEAR\n    37.68\n\n",
	"MONTH_NAMES_EN": "\nMONTH_NAMES_EN()\n    Returns a list of month names (English).\n\n    Returns\n    -------\n    out: Array<string>\n        List of month names.\n\n    Examples\n    --------\n    > var list = MONTH_NAMES_EN()\n    [ 'January', 'February', 'March', 'April', ... ]\n\n",
	"moveProperty": "\nmoveProperty( source, prop, target )\n    Moves a property from one object to another object.\n\n    The property is deleted from the source object and the property's descriptor\n    is preserved during transfer.\n\n    If a source property is not configurable, the function throws an error, as\n    the property cannot be deleted from the source object.\n\n    Parameters\n    ----------\n    source: Object\n        Source object.\n\n    prop: string\n        Property to move.\n\n    target: Object\n        Target object.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether operation was successful.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 'b' };\n    > var obj2 = {};\n    > var bool = moveProperty( obj1, 'a', obj2 )\n    true\n    > bool = moveProperty( obj1, 'c', obj2 )\n    false\n\n",
	"nativeClass": "\nnativeClass( value )\n    Returns a string value indicating a specification defined classification of\n    an object.\n\n    The function is *not* robust for ES2015+ environments. In ES2015+,\n    `Symbol.toStringTag` allows overriding the default description of an object.\n    While measures are taken to uncover the default description, such measures\n    can be thwarted. While this function remains useful for type-checking, be\n    aware that value impersonation is possible. Where possible, prefer functions\n    tailored to checking for particular value types, as specialized functions\n    are better equipped to address `Symbol.toStringTag`.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        String value indicating a specification defined classification of the\n        input value.\n\n    Examples\n    --------\n    > var str = nativeClass( 'a' )\n    '[object String]'\n    > str = nativeClass( 5 )\n    '[object Number]'\n    > function Beep(){};\n    > str = nativeClass( new Beep() )\n    '[object Object]'\n\n    See Also\n    --------\n    constructorName, typeOf\n",
	"NIGHTINGALES_ROSE": "\nNIGHTINGALES_ROSE()\n    Returns data for Nightingale's famous polar area diagram.\n\n    Returns\n    -------\n    out: Array<Object>\n        Nightingale's data.\n\n    Examples\n    --------\n    > var data = NIGHTINGALES_ROSE()\n    [{...}, {...}, ...]\n\n    References\n    ----------\n    - Nightingale, Florence. 1859. *A contribution to the sanitary history of\n    the British army during the late war with Russia*. London, United Kingdom:\n    John W. Parker and Son. <http://ocp.hul.harvard.edu/dl/contagion/010164675>.\n\n",
	"NINF": "\nNINF\n    Double-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > NINF\n    -infinity\n\n    See Also\n    --------\n    FLOAT16_NINF, FLOAT32_NINF, PINF\n",
	"NODE_VERSION": "\nNODE_VERSION\n    Node version.\n\n    Examples\n    --------\n    > NODE_VERSION\n    <string>\n\n",
	"none": "\nnone( collection )\n    Tests whether all elements in a collection are falsy.\n\n    The function immediately returns upon encountering a truthy value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if all elements are falsy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 0, 0, 0 ];\n    > var bool = none( arr )\n    true\n\n    See Also\n    --------\n    any, every, forEach, noneBy, some\n",
	"noneBy": "\nnoneBy( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a falsy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = noneBy( arr, negative )\n    true\n\n    See Also\n    --------\n    anyBy, everyBy, forEach, none, noneByRight, someBy\n",
	"noneByAsync": "\nnoneByAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a truthy `result` value\n    and calls the `done` callback with `null` as the first argument and `false`\n    as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null` as\n    the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\nnoneByAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection fail a\n    test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = noneByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByAsync, everyByAsync, forEachAsync, noneBy, noneByRightAsync, someByAsync\n",
	"noneByRight": "\nnoneByRight( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a falsy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ -1, -2, -3, -4 ];\n    > var bool = noneByRight( arr, positive )\n    true\n\n    See Also\n    --------\n    anyByRight, everyByRight, forEachRight, none, noneBy, someByRight\n",
	"noneByRightAsync": "\nnoneByRightAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a truthy `result` value\n    and calls the `done` callback with `null` as the first argument and `false`\n    as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null` as\n    the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\nnoneByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection fail a\n    test implemented by a predicate function, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = noneByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByRightAsync, everyByRightAsync, forEachRightAsync, noneByAsync, noneByRight, someByRightAsync\n",
	"noop": "\nnoop()\n    A function which does nothing.\n\n    Examples\n    --------\n    > noop();\n\n",
	"now": "\nnow()\n    Returns the time in seconds since the epoch.\n\n    The Unix epoch is 00:00:00 UTC on 1 January 1970.\n\n    Returns\n    -------\n    out: integer\n        Time in seconds since the epoch.\n\n    Examples\n    --------\n    > var ts = now()\n    <number>\n\n",
	"NUM_CPUS": "\nNUM_CPUS\n    Number of CPUs.\n\n    In browser environments, the number of CPUs is determined by querying the\n    hardware concurrency API.\n\n    In Node.js environments, the number of CPUs is determined via the `os`\n    module.\n\n    Examples\n    --------\n    > NUM_CPUS\n    <number>\n\n",
	"objectEntries": "\nobjectEntries( obj )\n    Returns an array of an object's own enumerable property `[key, value]`\n    pairs.\n\n    Entry order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic return values.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    arr: Array\n        Array containing key-value pairs.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop', 'foo': 'bar' };\n    > var entries = objectEntries( obj )\n    e.g., [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ]\n\n    See Also\n    --------\n    objectEntriesIn, objectFromEntries, objectValues\n",
	"objectEntriesIn": "\nobjectEntriesIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    `[key, value]` pairs.\n\n    Entry order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic return values.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    arr: Array\n        Array containing key-value pairs.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var entries = objectEntriesIn( obj )\n    e.g., [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ]\n\n    See Also\n    --------\n    objectEntries, objectFromEntries, keysIn, objectValuesIn\n",
	"objectFromEntries": "\nobjectFromEntries( entries )\n    Creates an object from an array of key-value pairs.\n\n    Parameters\n    ----------\n    entries: Array<Array>\n        Input object.\n\n    Returns\n    -------\n    out: Object\n        Object created from `[key, value]` pairs.\n\n    Examples\n    --------\n    > var entries = [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ];\n    > var obj = objectFromEntries( entries )\n    { 'beep': 'boop', 'foo': 'bar' }\n\n    See Also\n    --------\n    objectEntries\n",
	"objectInverse": "\nobjectInverse( obj[, options] )\n    Inverts an object, such that keys become values and values become keys.\n\n    Beware when providing objects having values which are themselves objects.\n    The function relies on native object serialization (`#toString`) when\n    converting values to keys.\n\n    Insertion order is not guaranteed, as object key enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's keys, thus allowing for\n    deterministic inversion.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    options: Object (optional)\n        Options.\n\n    options.duplicates: boolean (optional)\n        Boolean indicating whether to store keys mapped to duplicate values in\n        arrays. Default: `true`.\n\n    Returns\n    -------\n    out: Object\n        Inverted object.\n\n    Examples\n    --------\n    // Basic usage:\n    > var obj = { 'a': 'beep', 'b': 'boop' };\n    > var out = objectInverse( obj )\n    { 'beep': 'a', 'boop': 'b' }\n\n    // Duplicate values:\n    > obj = { 'a': 'beep', 'b': 'beep' };\n    > out = objectInverse( obj )\n    { 'beep': [ 'a', 'b' ] }\n\n    // Override duplicate values:\n    > obj = {};\n    > obj.a = 'beep';\n    > obj.b = 'boop';\n    > obj.c = 'beep';\n    > out = objectInverse( obj, { 'duplicates': false } )\n    { 'beep': 'c', 'boop': 'b' }\n\n    See Also\n    --------\n    objectInverseBy\n",
	"objectInverseBy": "\nobjectInverseBy( obj, [options,] transform )\n    Inverts an object, such that keys become values and values become keys,\n    according to a transform function.\n\n    The transform function is provided three arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n\n    The value returned by a transform function should be a value which can be\n    serialized as an object key. Hence, beware when providing objects having\n    values which are themselves objects. The function relies on native object\n    serialization (`#toString`) when converting transform function return values\n    to keys.\n\n    Insertion order is not guaranteed, as object key enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's keys, thus allowing for\n    deterministic inversion.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    options: Object (optional)\n        Options.\n\n    options.duplicates: boolean (optional)\n        Boolean indicating whether to store keys mapped to duplicate values in\n        arrays. Default: `true`.\n\n    transform: function\n        Transform function.\n\n    Returns\n    -------\n    out: Object\n        Inverted object.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( key, value ) { return key + value; };\n    > var obj = { 'a': 'beep', 'b': 'boop' };\n    > var out = objectInverseBy( obj, transform )\n    { 'abeep': 'a', 'bboop': 'b' }\n\n    // Duplicate values:\n    > function transform( key, value ) { return value; };\n    > obj = { 'a': 'beep', 'b': 'beep' };\n    > out = objectInverseBy( obj, transform )\n    { 'beep': [ 'a', 'b' ] }\n\n    // Override duplicate values:\n    > obj = {};\n    > obj.a = 'beep';\n    > obj.b = 'boop';\n    > obj.c = 'beep';\n    > out = objectInverseBy( obj, { 'duplicates': false }, transform )\n    { 'beep': 'c', 'boop': 'b' }\n\n    See Also\n    --------\n    objectInverse\n",
	"objectValues": "\nobjectValues( obj )\n    Returns an array of an object's own enumerable property values.\n\n    Value order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    values: Array\n        Value array.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop', 'foo': 'bar' };\n    > var vals = objectValues( obj )\n    e.g., [ 'boop', 'bar' ]\n\n    See Also\n    --------\n    objectEntries\n",
	"objectValuesIn": "\nobjectValuesIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    values.\n\n    Value order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    values: Array\n        Value array.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var values = objectValuesIn( obj )\n    e.g., [ 'boop', 'bar' ]\n\n    See Also\n    --------\n    objectEntriesIn, keysIn, objectValues\n",
	"omit": "\nomit( obj, keys )\n    Returns a partial object copy excluding specified keys.\n\n    The function returns a shallow copy.\n\n    The function ignores non-existent keys.\n\n    The function only copies own properties. Hence, the function never copies\n    inherited properties.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    keys: string|Array<string>\n        Keys to exclude.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = omit( obj1, 'b' )\n    { 'a': 1 }\n\n    See Also\n    --------\n    omitBy\n",
	"omitBy": "\nomitBy( obj, predicate )\n    Returns a partial object copy excluding properties for which a predicate\n    returns a truthy value.\n\n    The function returns a shallow copy.\n\n    The function only copies own properties. Hence, the function never copies\n    inherited properties.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    predicate: Function\n        Predicate function.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function predicate( key, value ) { return ( value > 1 ); };\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = omitBy( obj1, predicate )\n    { 'a': 1 }\n\n    See Also\n    --------\n    omit\n",
	"openURL": "\nopenURL( url )\n    Opens a URL in a user's default browser.\n\n    In a non-browser environment, the function returns an unreferenced child\n    process. In a browser environment, the function returns a reference to a\n    `window` object.\n\n    Parameters\n    ----------\n    url: string\n        URL to open.\n\n    Returns\n    -------\n    out: process|Window\n        Child process or `window` object.\n\n    Examples\n    --------\n    > var out = openURL( 'https://google.com' );\n\n",
	"pad": "\npad( str, len[, options] )\n    Pads a `string` such that the padded `string` has length `len`.\n\n    Any padding which does not evenly divide available space is trimmed such\n    that the returned string length is always `len`.\n\n    If `len < str.length`, the input string is trimmed.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Output string length.\n\n    options: Object (optional)\n        Options.\n\n    options.lpad: string (optional)\n        String used to left pad.\n\n    options.rpad: string (optional)\n        String used to right pad.\n\n    options.centerRight: boolean (optional)\n        Boolean indicating whether to center right in the event of a tie.\n        Default: `false` (i.e., center left).\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    // Standard usage:\n    > var out = pad( 'a', 5 )\n    'a    '\n\n    // Left pad:\n    > out = pad( 'a', 10, { 'lpad': 'b' })\n    'bbbbbbbbba'\n\n    // Right pad:\n    > out = pad( 'a', 12, { 'rpad': 'b' })\n    'abbbbbbbbbbb'\n\n    // Center an input string:\n    > var opts = { 'lpad': 'a', 'rpad': 'c' };\n    > out = pad( 'b', 11, opts )\n    'aaaaabccccc'\n\n    // Left center:\n    > opts.centerRight = false;\n    > out = pad( 'b', 10, opts )\n    'aaaabccccc'\n\n    // Right center:\n    > opts.centerRight = true;\n    > out = pad( 'b', 10, opts )\n    'aaaaabcccc'\n\n    // Output string always length `len`:\n    > opts = { 'lpad': 'boop', 'rpad': 'woot' };\n    > out = pad( 'beep', 10, opts )\n    'boobeepwoo'\n\n    // Pad right, trim right:\n    > out = pad( 'beep', 2 )\n    'be'\n\n    // Pad left, trim left:\n    > opts = { 'lpad': 'b' };\n    > out = pad( 'beep', 2, opts )\n    'ep'\n\n    // Pad both, trim both:\n    > opts = { 'lpad': '@', 'rpad': '!' };\n    > out = pad( 'beep', 2, opts )\n    'ee'\n\n    // Pad both, trim both starting from left:\n    > out = pad( 'abcdef', 3, opts )\n    'cde'\n\n    // Pad both, trim both starting from right:\n    > opts.centerRight = true;\n    > out = pad( 'abcdef', 3, opts )\n    'bcd'\n\n    See Also\n    --------\n    lpad, rpad\n",
	"papply": "\npapply( fcn, ...args )\n    Returns a function of smaller arity by partially applying arguments.\n\n    The implementation does not set the `length` property of the returned\n    function. Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to partially apply.\n\n    args: ...any\n        Arguments to partially apply.\n\n    Returns\n    -------\n    out: Function\n        Partially applied function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var add2 = papply( add, 2 );\n    > var sum = add2( 3 )\n    5\n\n    See Also\n    --------\n    papplyRight\n",
	"papplyRight": "\npapplyRight( fcn, ...args )\n    Returns a function of smaller arity by partially applying arguments from the\n    right.\n\n    The implementation does not set the `length` property of the returned\n    function. Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to partially apply.\n\n    args: ...any\n        Arguments to partially apply.\n\n    Returns\n    -------\n    out: Function\n        Partially applied function.\n\n    Examples\n    --------\n    > function say( text, name ) { return text + ', ' + name + '.'; };\n    > var toGrace = papplyRight( say, 'Grace Hopper' );\n    > var str = toGrace( 'Hello' )\n    'Hello, Grace Hopper.'\n    > str = toGrace( 'Thank you' )\n    'Thank you, Grace Hopper.'\n\n    See Also\n    --------\n    papply\n",
	"parallel": "\nparallel( files, [options,] clbk )\n    Executes scripts in parallel.\n\n    Relative file paths are resolved relative to the current working directory.\n\n    Ordered script output does not imply that scripts are executed in order. To\n    preserve script order, execute the scripts sequentially via some other\n    means.\n\n    Parameters\n    ----------\n    files: Array<string>\n        Script file paths.\n\n    options: Object (optional)\n        Options.\n\n    options.cmd: string (optional)\n        Executable file/command. Default: `'node'`.\n\n    options.concurrency: integer (optional)\n        Number of scripts to execute concurrently. Script concurrency cannot\n        exceed the number of scripts. By specifying a concurrency greater than\n        the number of workers, a worker may be executing more than `1` script at\n        any one time. While not likely to be advantageous for synchronous\n        scripts, setting a higher concurrency may be advantageous for scripts\n        performing asynchronous tasks. If the script concurrency is less than\n        the number of workers, the number of workers is reduced to match the\n        specified concurrency. Default: `options.workers`.\n\n    options.workers: integer (optional)\n        Number of workers. Default: number of CPUs minus `1`.\n\n    options.ordered: boolean (optional)\n        Boolean indicating whether to preserve the order of script output. By\n        default, the `stdio` output for each script is interleaved; i.e., the\n        `stdio` output from one script may be interleaved with the `stdio`\n        output from one or more other scripts. To preserve the `stdio` output\n        order for each script, set the `ordered` option to `true`. Default:\n        `false`.\n\n    options.uid: integer (optional)\n        Process user identity.\n\n    options.gid: integer (optional)\n        Process group identity.\n\n    options.maxBuffer: integer (optional)\n        Max child process `stdio` buffer size. This option is only applied when\n        `options.ordered = true`. Default: `200*1024*1024`.\n\n    clbk: Function\n        Callback to invoke after executing all scripts.\n\n    Examples\n    --------\n    > function done( error ) { if ( error ) { throw error; } };\n    > var files = [ './a.js', './b.js' ];\n    > parallel( files, done );\n\n    // Specify the number of workers:\n    > var opts = { 'workers': 8 };\n    > parallel( files, opts, done );\n\n",
	"parseJSON": "\nparseJSON( str[, reviver] )\n    Attempts to parse a string as JSON.\n\n    Function behavior differs from `JSON.parse()` as follows:\n\n    - throws a `TypeError` if provided any value which is not a string.\n    - throws a `TypeError` if provided a `reviver` argument which is not a\n      function.\n    - returns, rather than throws, a `SyntaxError` if unable to parse a string\n      as JSON.\n\n    Parameters\n    ----------\n    str: string\n        String to parse.\n\n    reviver: Function\n        Transformation function.\n\n    Returns\n    -------\n    out: any|Error\n        Parsed value or an error.\n\n    Examples\n    --------\n    > var obj = parseJSON( '{\"beep\":\"boop\"}' )\n    { 'beep': 'boop' }\n\n    // Provide a reviver:\n    > function reviver( key, value ) {\n    ...     if ( key === '' ) { return value; }\n    ...     if ( key === 'beep' ) { return value; }\n    ... };\n    > var str = '{\"beep\":\"boop\",\"a\":\"b\"}';\n    > var out = parseJSON( str, reviver )\n    { 'beep': 'boop' }\n\n",
	"PATH_DELIMITER": "\nPATH_DELIMITER\n    Platform-specific path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER\n    <string>\n\n    // POSIX environment:\n    > var path = '/usr/bin:/bin:/usr/sbin';\n    > var parts = path.split( PATH_DELIMITER )\n    [ '/usr/bin', '/bin', '/usr/sbin' ]\n\n    // Windows environment:\n    > path = 'C:\\\\Windows\\\\system32;C:\\\\Windows';\n    > parts = path.split( PATH_DELIMITER )\n    [ 'C:\\\\Windows\\system32', 'C:\\\\Windows' ]\n\n    See Also\n    --------\n    PATH_DELIMITER_POSIX, PATH_DELIMITER_WIN32\n",
	"PATH_DELIMITER_POSIX": "\nPATH_DELIMITER_POSIX\n    POSIX path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER_POSIX\n    ':'\n    > var PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\n    > var paths = PATH.split( PATH_DELIMITER_POSIX )\n    [ '/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin' ]\n\n    See Also\n    --------\n    PATH_DELIMITER, PATH_DELIMITER_WIN32\n",
	"PATH_DELIMITER_WIN32": "\nPATH_DELIMITER_WIN32\n    Windows path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER_WIN32\n    ';'\n    > var PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\n    > var paths = PATH.split( PATH_DELIMITER_WIN32 )\n    [ 'C:\\\\Windows\\\\system32', 'C:\\\\Windows', 'C:\\\\Program Files\\\\node\\\\' ]\n\n    See Also\n    --------\n    PATH_DELIMITER, PATH_DELIMITER_POSIX\n",
	"PATH_SEP": "\nPATH_SEP\n    Platform-specific path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP\n    <string>\n\n    // Windows environment:\n    > var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP )\n    [ 'foo', 'bar', 'baz' ]\n\n    // POSIX environment:\n    > parts = 'foo/bar/baz'.split( PATH_SEP )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP_POSIX, PATH_SEP_WIN32\n",
	"PATH_SEP_POSIX": "\nPATH_SEP_POSIX\n    POSIX path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP_POSIX\n    '/'\n    > var parts = 'foo/bar/baz'.split( PATH_SEP_POSIX )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP, PATH_SEP_WIN32\n",
	"PATH_SEP_WIN32": "\nPATH_SEP_WIN32\n    Windows path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP_WIN32\n    '\\\\'\n    > var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP_WIN32 )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP, PATH_SEP_POSIX\n",
	"pcorrtest": "\npcorrtest( x, y[, options] )\n    Computes a Pearson product-moment correlation test between paired samples.\n\n    By default, the function performs a t-test for the null hypothesis that the\n    data in arrays or typed arrays `x` and `y` is not correlated. A test against\n    a different population correlation can be carried out by supplying the `rho`\n    option. In this case, a test using the Fisher's z transform is conducted.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Nnumber in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.rho: number (optional)\n        Number denoting the correlation under the null hypothesis.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        P-value of the test.\n\n    out.statistic: number.\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the Pearson product-moment correlation\n        coefficient. The confidence interval is calculated using Fisher's\n        z-transform.\n\n    out.nullValue: number\n        Assumed correlation under H0 (equal to the supplied `rho` option).\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    > var rho = 0.5;\n    > var x = new Array( 300 );\n    > var y = new Array( 300 );\n    > for ( var i = 0; i < 300; i++ ) {\n    ...    x[ i ] = base.random.normal( 0.0, 1.0 );\n    ...    y[ i ] = ( rho * x[ i ] ) + base.random.normal( 0.0, base.sqrt( 1.0 - (rho*rho) ) );\n    ... }\n    > var out = pcorrtest( x, y )\n    {\n        alpha: 0.05,\n        rejected: true,\n        pValue: 0,\n        statistic: 10.115805615994121,\n        ci: [ 0.4161679018930295, 0.5853122968949995 ],\n        alternative: 'two-sided',\n        method: 't-test for Pearson correlation coefficient',\n        nullValue: 0,\n        pcorr: 0.505582072355616,\n    }\n\n    // Print output:\n    > var table = out.print()\n    t-test for Pearson correlation coefficient\n\n    Alternative hypothesis: True correlation coefficient is not equal to 0\n\n        pValue: 0\n        statistic: 9.2106\n        95% confidence interval: [0.3776,0.5544]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n",
	"percentEncode": "\npercentEncode( str )\n    Percent-encodes a UTF-16 encoded string according to RFC 3986.\n\n    Parameters\n    ----------\n    str: string\n        UTF-16 encoded string.\n\n    Returns\n    -------\n    out: string\n        Percent-encoded string.\n\n    Examples\n    --------\n    > var out = percentEncode( '☃' )\n    '%E2%98%83'\n\n",
	"PHI": "\nPHI\n    Golden ratio.\n\n    Examples\n    --------\n    > PHI\n    1.618033988749895\n\n",
	"PI": "\nPI\n    The mathematical constant `π`.\n\n    Examples\n    --------\n    > PI\n    3.141592653589793\n\n    See Also\n    --------\n    TWO_PI\n",
	"PI_SQUARED": "\nPI_SQUARED\n    Square of the mathematical constant `π`.\n\n    Examples\n    --------\n    > PI_SQUARED\n    9.869604401089358\n\n    See Also\n    --------\n    PI\n",
	"pick": "\npick( obj, keys )\n    Returns a partial object copy containing only specified keys.\n\n    If a key does not exist as an own property in a source object, the key is\n    ignored.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    keys: string|Array<string>\n        Keys to copy.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = pick( obj1, 'b' )\n    { 'b': 2 }\n\n    See Also\n    --------\n    pickBy\n",
	"pickBy": "\npickBy( obj, predicate )\n    Returns a partial object copy containing properties for which a predicate\n    returns a truthy value.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    predicate: Function\n        Predicate function.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function predicate( key, value ) {\n    ...     return ( value > 1 );\n    ... };\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = pickBy( obj1, predicate )\n    { 'b': 2 }\n\n    See Also\n    --------\n    pick\n",
	"PINF": "\nPINF\n    Double-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > PINF\n    infinity\n\n    See Also\n    --------\n    NINF\n",
	"PLATFORM": "\nPLATFORM\n    Platform on which the current process is running.\n\n    Possible values:\n\n    - 'win32'\n    - 'darwin'\n    - 'linux'\n\n    Examples\n    --------\n    > PLATFORM\n    <string>\n\n",
	"pluck": "\npluck( arr, prop[, options] )\n    Extracts a property value from each element of an object array.\n\n    The function skips `null` and `undefined` array elements.\n\n    Extracted values are not cloned.\n\n    Parameters\n    ----------\n    arr: Array\n        Source array.\n\n    prop: string\n        Property to access.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to return a new data structure. To mutate the\n        input data structure (e.g., when input values can be discarded or when\n        optimizing memory usage), set the `copy` option to `false`. Default:\n        true.\n\n    Returns\n    -------\n    out: Array\n        Destination array.\n\n    Examples\n    --------\n    > var arr = [\n    ...     { 'a': 1, 'b': 2 },\n    ...     { 'a': 0.5, 'b': 3 }\n    ... ];\n    > var out = pluck( arr, 'a' )\n    [ 1, 0.5 ]\n\n    > arr = [\n    ...     { 'a': 1, 'b': 2 },\n    ...     { 'a': 0.5, 'b': 3 }\n    ... ];\n    > out = pluck( arr, 'a', { 'copy': false } )\n    [ 1, 0.5 ]\n    > var bool = ( arr[ 0 ] === out[ 0 ] )\n    true\n\n    See Also\n    --------\n    deepPluck, pick\n",
	"pop": "\npop( collection )\n    Removes and returns the last element of a collection.\n\n    The function returns an array with two elements: the shortened collection\n    and the removed element.\n\n    If the input collection is a typed array whose length is greater than `0`,\n    the first return value does not equal the input reference.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the value should be\n        array-like.\n\n    Returns\n    -------\n    out: Array\n        Updated collection and the removed item.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var out = pop( arr )\n    [ [ 1.0, 2.0, 3.0, 4.0 ], 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > out = pop( arr )\n    [ <Float64Array>[ 1.0 ], 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 2, '0': 1.0, '1': 2.0 };\n    > out = pop( arr )\n    [ { 'length': 1, '0': 1.0 }, 2.0 ]\n\n    See Also\n    --------\n    push, shift, unshift\n",
	"prepend": "\nprepend( collection1, collection2 )\n    Adds the elements of one collection to the beginning of another collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection1: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    collection2: Array|TypedArray|Object\n        A collection containing the elements to add. If the collection is an\n        `Object`, the collection should be array-like.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = prepend( arr, [ 6.0, 7.0 ] )\n    [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = prepend( arr, [ 3.0, 4.0 ] )\n    <Float64Array>[ 3.0, 4.0, 1.0, 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 1, '0': 1.0 };\n    > arr = prepend( arr, [ 2.0, 3.0 ] )\n    { 'length': 3, '0': 2.0, '1': 3.0, '2': 1.0 }\n\n    See Also\n    --------\n    append, unshift\n",
	"push": "\npush( collection, ...items )\n    Adds one or more elements to the end of a collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    items: ...any\n        Items to add.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = push( arr, 6.0, 7.0 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = push( arr, 3.0, 4.0 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 0 };\n    > arr = push( arr, 1.0, 2.0 )\n    { 'length': 2, '0': 1.0, '1': 2.0 }\n\n    See Also\n    --------\n    pop, shift, unshift\n",
	"quarterOfYear": "\nquarterOfYear( [month] )\n    Returns the quarter of the year.\n\n    By default, the function returns the quarter of the year for the current\n    month in the current year (according to local time). To determine the\n    quarter for a particular month, provide either a month or a `Date`\n    object.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    Parameters\n    ----------\n    month: integer|string|Date (optional)\n        Month (or `Date`).\n\n    Returns\n    -------\n    out: integer\n        Quarter of the year.\n\n    Examples\n    --------\n    > var q = quarterOfYear( new Date() )\n    <number>\n    > q = quarterOfYear( 4 )\n    2\n    > q = quarterOfYear( 'June' )\n    2\n\n    // Other ways to supply month:\n    > q = quarterOfYear( 'April' )\n    2\n    > q = quarterOfYear( 'apr' )\n    2\n\n    See Also\n    --------\n    dayOfYear\n",
	"readDir": "\nreadDir( path, clbk )\n    Asynchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    clbk: Function\n        Callback to invoke after reading directory contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readDir( './beep/boop', onRead );\n\n\nreadDir.sync( path )\n    Synchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        Directory contents.\n\n    Examples\n    --------\n    > var out = readDir.sync( './beep/boop' );\n\n    See Also\n    --------\n    exists, readFile\n",
	"readFile": "\nreadFile( file[, options,] clbk )\n    Asynchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readFile( './beep/boop.js', onRead );\n\n\nreadFile.sync( file[, options] )\n    Synchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var out = readFile.sync( './beep/boop.js' );\n\n    See Also\n    --------\n    exists, readDir, readJSON\n",
	"readFileList": "\nreadFileList( filepaths[, options,] clbk )\n    Asynchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Each file is represented by an object with the following fields:\n\n    - file: file path\n    - data: file contents as either a Buffer or string\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n    > readFileList( filepaths, onRead );\n\n\nreadFileList.sync( filepaths[, options] )\n    Synchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        File contents.\n\n    out[ i ].file: string\n        File path.\n\n    out[ i ].data: Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n    > var out = readFileList.sync( filepaths );\n\n",
	"readJSON": "\nreadJSON( file[, options,] clbk )\n    Asynchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. If the encoding option is set to `utf8` and the file has a\n        UTF-8 byte order mark (BOM), the byte order mark is *removed* before\n        attempting to parse as JSON. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readJSON( './beep/boop.json', onRead );\n\n\nreadJSON.sync( file[, options] )\n    Synchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. If the encoding option is set to `utf8` and the file has a\n        UTF-8 byte order mark (BOM), the byte order mark is *removed* before\n        attempting to parse as JSON. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    Returns\n    -------\n    out: Error|JSON\n        File contents.\n\n    Examples\n    --------\n    > var out = readJSON.sync( './beep/boop.json' );\n\n    See Also\n    --------\n    readFile\n",
	"readWASM": "\nreadWASM( file, [options,] clbk )\n    Asynchronously reads a file as WebAssembly.\n\n    The function returns file contents as a Uint8Array.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readWASM( './beep/boop.wasm', onRead );\n\n\nreadWASM.sync( file[, options] )\n    Synchronously reads a file as WebAssembly.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Uint8Array\n        File contents.\n\n    Examples\n    --------\n    > var out = readWASM.sync( './beep/boop.wasm' );\n\n    See Also\n    --------\n    readFile\n",
	"real": "\nreal( z )\n    Returns the real component of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    re: number\n        Real component.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var re = real( z )\n    5.0\n\n    See Also\n    --------\n    imag, reim\n",
	"realmax": "\nrealmax( dtype )\n    Returns the maximum finite value capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Maximum finite value.\n\n    Examples\n    --------\n    > var m = realmax( 'float16' )\n    65504.0\n    > m = realmax( 'float32' )\n    3.4028234663852886e+38\n\n    See Also\n    --------\n    realmin, typemax\n",
	"realmin": "\nrealmin( dtype )\n    Returns the smallest positive normal value capable of being represented by a\n    numeric real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Smallest finite normal value.\n\n    Examples\n    --------\n    > var m = realmin( 'float16' )\n    0.00006103515625\n    > m = realmin( 'float32' )\n    1.1754943508222875e-38\n\n    See Also\n    --------\n    realmax, typemin\n",
	"reduce": "\nreduce( collection, initial, reducer[, thisArg] )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result.\n\n    When invoked, the reduction function is provided four arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, the function returns the initial value.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    initial: any\n        Accumulator value used in the first invocation of the reduction\n        function.\n\n    reducer: Function\n        Function to invoke for each element in the input collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: any\n        Accumulated result.\n\n    Examples\n    --------\n    > function sum( acc, v ) { return acc + v; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = reduce( arr, 0, sum )\n    6.0\n\n    See Also\n    --------\n    forEach, reduceAsync, reduceRight\n",
	"reduceAsync": "\nreduceAsync( collection, initial, [options,] reducer, done )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result.\n\n    When invoked, `reducer` is provided a maximum of five arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If\n    `reducer` accepts three arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `next`\n\n    If `reducer` accepts four arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `reducer` signature, `reducer` is provided all five\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `accumulator`: accumulated value\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    If provided an empty collection, the function invokes the `done` callback\n    with the `initial` value as the second argument.\n\n    The function does not skip `undefined` elements.\n\n    When processing collection elements concurrently, *beware* of race\n    conditions when updating an accumulator. This is especially true when an\n    accumulator is a primitive (e.g., a number). In general, prefer object\n    accumulators.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, fcn, done )\n    3000\n    2500\n    1000\n    6500\n\n    // Limit number of concurrent invocations:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, opts, fcn, done )\n    2500\n    3000\n    1000\n    6500\n\n    // Process concurrently:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'series': false };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, opts, fcn, done )\n    1000\n    2500\n    3000\n    6500\n\n\nreduceAsync.factory( [options,] fcn )\n    Returns a function which applies a function against an accumulator and each\n    element in a collection and returns the accumulated result.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > var opts = { 'series': false };\n    > var f = reduceAsync.factory( opts, fcn );\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > f( arr, acc, done )\n    1000\n    2500\n    3000\n    6500\n    > acc = { 'sum': 0 };\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, acc, done )\n    1000\n    1500\n    2000\n    4500\n\n    See Also\n    --------\n    forEachAsync, reduce, reduceRightAsync\n",
	"reduceRight": "\nreduceRight( collection, initial, reducer[, thisArg] )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result, iterating from right to left.\n\n    When invoked, the reduction function is provided four arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, the function returns the initial value.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    initial: any\n        Accumulator value used in the first invocation of the reduction\n        function.\n\n    reducer: Function\n        Function to invoke for each element in the input collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: any\n        Accumulated result.\n\n    Examples\n    --------\n    > function sum( acc, v ) { console.log( '%s: %d', i, v ); return acc + v; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = reduceRight( arr, 0, sum )\n    2: 3.0\n    1: 2.0\n    0: 1.0\n    6.0\n\n    See Also\n    --------\n    forEachRight, reduce, reduceRightAsync\n",
	"reduceRightAsync": "\nreduceRightAsync( collection, initial, [options,] reducer, done )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result, iterating from right to left.\n\n    When invoked, `reducer` is provided a maximum of five arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If\n    `reducer` accepts three arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `next`\n\n    If `reducer` accepts four arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `reducer` signature, `reducer` is provided all five\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `accumulator`: accumulated value\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    If provided an empty collection, the function invokes the `done` callback\n    with the `initial` value as the second argument.\n\n    The function does not skip `undefined` elements.\n\n    When processing collection elements concurrently, *beware* of race\n    conditions when updating an accumulator. This is especially true when an\n    accumulator is a primitive (e.g., a number). In general, prefer object\n    accumulators.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, fcn, done )\n    3000\n    2500\n    1000\n    6500\n\n    // Limit number of concurrent invocations:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, opts, fcn, done )\n    2500\n    3000\n    1000\n    6500\n\n    // Process concurrently:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'series': false };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, opts, fcn, done )\n    1000\n    2500\n    3000\n    6500\n\n\nreduceRightAsync.factory( [options,] fcn )\n    Returns a function which applies a function against an accumulator and each\n    element in a collection and returns the accumulated result, iterating from\n    right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > var opts = { 'series': false };\n    > var f = reduceRightAsync.factory( opts, fcn );\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > f( arr, acc, done )\n    1000\n    2500\n    3000\n    6500\n    > acc = { 'sum': 0 };\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, acc, done )\n    1000\n    1500\n    2000\n    4500\n\n    See Also\n    --------\n    forEachRightAsync, reduceAsync, reduceRight\n",
	"reFromString": "\nreFromString( str )\n    Parses a regular expression string and returns a new regular expression.\n\n    Provided strings should be properly escaped.\n\n    If unable to parse a string as a regular expression, the function returns\n    `null`.\n\n    Parameters\n    ----------\n    str: string\n        Regular expression string.\n\n    Returns\n    -------\n    out: RegExp|null\n        Regular expression or null.\n\n    Examples\n    --------\n    > var re = reFromString( '/beep/' )\n    /beep/\n    > re = reFromString( '/beep' )\n    null\n\n",
	"reim": "\nreim( z )\n    Returns the real and imaginary components of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    out: Float64Array|Float32Array\n        Array containing the real and imaginary components, respectively.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var out = reim( z )\n    <Float64Array>[ 5.0, 3.0 ]\n\n    See Also\n    --------\n    imag, real\n",
	"removeFirst": "\nremoveFirst( str )\n    Removes the first character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Updated string.\n\n    Examples\n    --------\n    > var out = removeFirst( 'beep' )\n    'eep'\n    > out = removeFirst( 'Boop' )\n    'oop'\n\n    See Also\n    --------\n    removeLast\n",
	"removeLast": "\nremoveLast( str )\n    Removes the last character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Updated string.\n\n    Examples\n    --------\n    > var out = removeLast( 'beep' )\n    'bee'\n    > out = removeLast( 'Boop' )\n    'Boo'\n\n    See Also\n    --------\n    removeFirst\n",
	"removePunctuation": "\nremovePunctuation( str )\n    Removes punctuation characters from a `string`.\n\n    The function removes the following characters:\n\n    - Apostrophe: `\n    - Braces : { }\n    - Brackets: [ ]\n    - Colon: :\n    - Comma: ,\n    - Exclamation Mark: !\n    - Fraction Slash: /\n    - Guillemets: < >\n    - Parentheses: ( )\n    - Period: .\n    - Semicolon: ;\n    - Tilde: ~\n    - Vertical Bar: |\n    - Question Mark: ?\n    - Quotation Marks: ' \"\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with punctuation characters removed.\n\n    Examples\n    --------\n    > var str = 'Sun Tzu said: \"A leader leads by example not by force.\"';\n    > var out = {{alias }}( str )\n    'Sun Tzu said A leader leads by example not by force'\n\n    > str = 'This function removes these characters: `{}[]:,!/<>().;~|?\\'\"';\n    > out = removePunctuation( str )\n    'This function removes these characters'\n\n",
	"removeUTF8BOM": "\nremoveUTF8BOM( str )\n    Removes a UTF-8 byte order mark (BOM) from the beginning of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with BOM removed.\n\n    Examples\n    --------\n    > var out = removeUTF8BOM( '\\ufeffbeep' )\n    'beep'\n\n",
	"removeWords": "\nremoveWords( str, words[, ignoreCase] )\n    Removes all occurrences of the given words from a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    words: Array<string>\n        Array of words to be removed.\n\n    ignoreCase: boolean\n        Boolean indicating whether to perform a case-insensitive operation.\n        Default: `false`.\n\n    Returns\n    -------\n    out: string\n        String with words removed.\n\n    Examples\n    --------\n    > var out = removeWords( 'beep boop Foo bar', [ 'boop', 'foo' ] )\n    'beep  Foo bar'\n\n    // Case-insensitive:\n    > out = removeWords( 'beep boop Foo bar', [ 'boop', 'foo' ], true )\n    'beep   bar'\n\n",
	"reorderArguments": "\nreorderArguments( fcn, indices[, thisArg] )\n    Returns a function that invokes a provided function with reordered\n    arguments.\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    indices: Array<integer>\n        Argument indices.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Function with reordered arguments.\n\n    Examples\n    --------\n    > function foo( a, b, c ) { return [ a, b, c ]; };\n    > var bar = reorderArguments( foo, [ 2, 0, 1 ] );\n    > var out = bar( 1, 2, 3 )\n    [ 3, 1, 2 ]\n\n    See Also\n    --------\n    reverseArguments\n",
	"repeat": "\nrepeat( str, n )\n    Repeats a string `n` times and returns the concatenated result.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    n: integer\n        Number of repetitions.\n\n    Returns\n    -------\n    out: string\n        Repeated string.\n\n    Examples\n    --------\n    > var out = repeat( 'a', 5 )\n    'aaaaa'\n    > out = repeat( '', 100 )\n    ''\n    > out = repeat( 'beep', 0 )\n    ''\n\n    See Also\n    --------\n    pad\n",
	"replace": "\nreplace( str, search, newval )\n    Replaces `search` occurrences with a replacement `string`.\n\n    When provided a `string` as the `search` value, the function replaces *all*\n    occurrences. To remove only the first match, use a regular expression.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string|RegExp\n        Search expression.\n\n    newval: string|Function\n        Replacement value or function.\n\n    Returns\n    -------\n    out: string\n        String containing replacement(s).\n\n    Examples\n    --------\n    // Standard usage:\n    > var out = replace( 'beep', 'e', 'o' )\n    'boop'\n\n    // Replacer function:\n    > function replacer( match, p1 ) { return '/'+p1+'/'; };\n    > var str = 'Oranges and lemons';\n    > out = replace( str, /([^\\s]+)/gi, replacer )\n    '/Oranges/ /and/ /lemons/'\n\n    // Replace only first match:\n    > out = replace( 'beep', /e/, 'o' )\n    'boep'\n\n",
	"rescape": "\nrescape( str )\n    Escapes a regular expression string.\n\n    Parameters\n    ----------\n    str: string\n        Regular expression string.\n\n    Returns\n    -------\n    out: string\n        Escaped string.\n\n    Examples\n    --------\n    > var str = rescape( '[A-Z]*' )\n    '\\\\[A\\\\-Z\\\\]\\\\*'\n\n",
	"resolveParentPath": "\nresolveParentPath( path[, options,] clbk )\n    Asynchronously resolves a path by walking parent directories.\n\n    If unable to resolve a path, the function returns `null` as the path result.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    clbk: Function\n        Callback to invoke after resolving a path.\n\n    Examples\n    --------\n    > function onPath( error, path ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( path );\n    ...     }\n    ... };\n    > resolveParentPath( 'package.json', onPath );\n\n\nresolveParentPath.sync( path[, options] )\n    Synchronously resolves a path by walking parent directories.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    Returns\n    -------\n    out: string|null\n        Resolved path.\n\n    Examples\n    --------\n    > var out = resolveParentPath.sync( 'package.json' );\n\n",
	"reverseArguments": "\nreverseArguments( fcn[, thisArg] )\n    Returns a function that invokes a provided function with arguments in\n    reverse order.\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Function with reversed arguments.\n\n    Examples\n    --------\n    > function foo( a, b, c ) { return [ a, b, c ]; };\n    > var bar = reverseArguments( foo );\n    > var out = bar( 1, 2, 3 )\n    [ 3, 2, 1 ]\n\n    See Also\n    --------\n    reorderArguments\n",
	"reverseString": "\nreverseString( str )\n    Reverses a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Reversed string.\n\n    Examples\n    --------\n    > var out = reverseString( 'foo' )\n    'oof'\n    > out = reverseString( 'abcdef' )\n    'fedcba'\n\n",
	"reviveComplex": "\nreviveComplex( key, value )\n    Revives a JSON-serialized complex number.\n\n    The serialization format for complex numbers is an object having the\n    following fields:\n\n    - type: complex number type (e.g., \"Complex128\", \"Complex64\")\n    - re: real component (number)\n    - im: imaginary component (number)\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex )\n    <Complex128>\n\n    See Also\n    --------\n    Complex128, Complex64, reviveComplex128, reviveComplex64\n",
	"reviveComplex128": "\nreviveComplex128( key, value )\n    Revives a JSON-serialized 128-bit complex number.\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex128 )\n    <Complex128>\n\n    See Also\n    --------\n    Complex128, reviveComplex64, reviveComplex\n",
	"reviveComplex64": "\nreviveComplex64( key, value )\n    Revives a JSON-serialized 64-bit complex number.\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex64 )\n    <Complex64>\n\n    See Also\n    --------\n    Complex64, reviveComplex128, reviveComplex\n",
	"reviveError": "\nreviveError( key, value )\n    Revives a JSON-serialized error object.\n\n    The following built-in error types are supported:\n\n    - Error\n    - URIError\n    - ReferenceError\n    - SyntaxError\n    - RangeError\n    - EvalError\n    - TypeError\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or error object.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\n    > var err = JSON.parse( str, reviveError )\n    <TypeError>\n\n    See Also\n    --------\n    err2json\n",
	"reviveTypedArray": "\nreviveTypedArray( key, value )\n    Revives a JSON-serialized typed array.\n\n    The serialization format for typed array is an object having the following\n    fields:\n\n    - type: typed array type (e.g., \"Float64Array\", \"Int8Array\")\n    - data: typed array data as an array of numbers\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or typed array.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Float64Array\",\"data\":[5,3]}';\n    > var arr = parseJSON( str, reviveTypedArray )\n    <Float64Array>[ 5.0, 3.0 ]\n\n    See Also\n    --------\n    typedarray2json\n",
	"RE_BASENAME": "\nRE_BASENAME\n    Regular expression to capture the last part of a path.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_BASENAME.posix\n    Regular expression to capture the last part of a POSIX path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME.exec( '/foo/bar/index.js' )[ 1 ]\n    'index.js'\n\n\nRE_BASENAME.win32\n    Regular expression to capture the last part of a Windows path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'index.js'\n\n    See Also\n    --------\n    RE_BASENAME_POSIX, RE_BASENAME_WINDOWS\n",
	"RE_BASENAME_POSIX": "\nRE_BASENAME_POSIX\n    Regular expression to capture the last part of a POSIX path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    '.gitignore'\n    > base = RE_BASENAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    'file.pdf'\n    > base = RE_BASENAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    'file'\n    > base = RE_BASENAME_POSIX.exec( 'index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_POSIX.exec( '.' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_POSIX.exec( './' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_BASENAME, RE_BASENAME_WINDOWS\n",
	"RE_BASENAME_WINDOWS": "\nRE_BASENAME_WINDOWS\n    Regular expression to capture the last part of a Windows path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    '.gitignore'\n    > base = RE_BASENAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    'file.pdf'\n    > base = RE_BASENAME_WINDOWS.exec( 'foo\\\\bar\\\\file' )[ 1 ]\n    'file'\n    > base = RE_BASENAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_WINDOWS.exec( '.' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_BASENAME, RE_BASENAME_POSIX\n",
	"RE_COLOR_HEXADECIMAL": "\nRE_COLOR_HEXADECIMAL\n    Regular expression to match a hexadecimal color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.test( 'ffffff' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.test( '000' )\n    false\n    > bool = RE_COLOR_HEXADECIMAL.test( 'beep' )\n    false\n\n\nRE_COLOR_HEXADECIMAL.shorthand\n    Regular expression to match a shorthand hexadecimal color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.shorthand.test( 'ffffff' )\n    false\n    > bool = RE_COLOR_HEXADECIMAL.shorthand.test( '000' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.shorthand.test( 'beep' )\n    false\n\n\nRE_COLOR_HEXADECIMAL.either\n    Regular expression to match either a shorthand or full length hexadecimal\n    color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.either.test( 'ffffff' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.either.test( '000' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.either.test( 'beep' )\n    false\n\n",
	"RE_DECIMAL_NUMBER": "\nRE_DECIMAL_NUMBER\n    Regular expression to capture a decimal number.\n\n    A leading digit is not required.\n\n    A decimal point and at least one trailing digit is required.\n\n    Examples\n    --------\n    > var bool = RE_DECIMAL_NUMBER.test( '1.234' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '-1.234' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '0.0' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '.0' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '0' )\n    false\n    > bool = RE_DECIMAL_NUMBER.test( 'beep' )\n    false\n\n    // Create a RegExp to capture all decimal numbers:\n    > var re = new RegExp( RE_DECIMAL_NUMBER.source, 'g' );\n    > var str = '1.234 5.6, 7.8';\n    > var out = str.match( re );\n    [ '1.234', '5.6', '7.8' ]\n\n\n",
	"RE_DIRNAME": "\nRE_DIRNAME\n    Regular expression to capture a path dirname.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_DIRNAME.posix\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n\n\nRE_DIRNAME.win32\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n\n    See Also\n    --------\n    RE_DIRNAME_POSIX, RE_DIRNAME_WINDOWS, dirname\n",
	"RE_DIRNAME_POSIX": "\nRE_DIRNAME_POSIX\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    './foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    'foo'\n    > dir = RE_DIRNAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    '/foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( 'index.js' )[ 1 ]\n    ''\n    > dir = RE_DIRNAME_POSIX.exec( '.' )[ 1 ]\n    '.'\n    > dir = RE_DIRNAME_POSIX.exec( './' )[ 1 ]\n    '.'\n    > dir = RE_DIRNAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_DIRNAME, RE_DIRNAME_WINDOWS, dirname\n",
	"RE_DIRNAME_WINDOWS": "\nRE_DIRNAME_WINDOWS\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME_WINDOWS.exec( 'foo\\\\bar\\\\index.js' )[ 1 ]\n    'foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    'foo'\n    > dir = RE_DIRNAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\n    '\\\\foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    ''\n    > dir = RE_DIRNAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_DIRNAME, RE_DIRNAME_POSIX, dirname\n",
	"RE_EOL": "\nRE_EOL\n    Regular expression to match a newline character sequence: /\\r?\\n/.\n\n    Examples\n    --------\n    > var bool = RE_EOL.test( '\\n' )\n    true\n    > bool = RE_EOL.test( '\\r\\n' )\n    true\n    > bool = RE_EOL.test( '\\\\r\\\\n' )\n    false\n\n",
	"RE_EXTENDED_LENGTH_PATH": "\nRE_EXTENDED_LENGTH_PATH\n    Regular expression to test if a string is an extended-length path.\n\n    Extended-length paths are Windows paths which begin with `\\\\?\\`.\n\n    Examples\n    --------\n    > var path = '\\\\\\\\?\\\\C:\\\\foo\\\\bar';\n    > var bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    true\n    > path = '\\\\\\\\?\\\\UNC\\\\server\\\\share';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    true\n    > path = 'C:\\\\foo\\\\bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n    > path = '/c/foo/bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n    > path = '/foo/bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n\n",
	"RE_EXTNAME": "\nRE_EXTNAME\n    Regular expression to capture a filename extension.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_EXTNAME.posix\n    Regular expression to capture a POSIX filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n\n\nRE_EXTNAME.win32\n    Regular expression to capture a Windows filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n\n    See Also\n    --------\n    RE_EXTNAME_POSIX, RE_EXTNAME_WINDOWS, extname\n",
	"RE_EXTNAME_POSIX": "\nRE_EXTNAME_POSIX\n    Regular expression to capture a POSIX filename extension.\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var ext = RE_EXTNAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    '.pdf'\n    > ext = RE_EXTNAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( 'index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_POSIX.exec( '.' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( './' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_EXTNAME, RE_EXTNAME_WINDOWS, extname\n",
	"RE_EXTNAME_WINDOWS": "\nRE_EXTNAME_WINDOWS\n    Regular expression to capture a Windows filename extension.\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var ext = RE_EXTNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    '.pdf'\n    > ext = RE_EXTNAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_WINDOWS.exec( beep\\\\boop.' )[ 1 ]\n    '.'\n    > ext = RE_EXTNAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_EXTNAME, RE_EXTNAME_POSIX, extname\n",
	"RE_FILENAME": "\nRE_FILENAME\n    Regular expression to split a filename.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_FILENAME.posix\n    Regular expression to split a POSIX filename.\n\n    When executed, the regular expression splits a POSIX filename into the\n    following parts:\n\n    - input value\n    - root\n    - dirname\n    - basename\n    - extname\n\n    Examples\n    --------\n    > var f = '/foo/bar/index.js';\n    > var parts = RE_FILENAME.exec( f ).slice()\n    [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]\n\n\nRE_FILENAME.win32\n    Regular expression to split a Windows filename.\n\n    When executed, the regular expression splits a Windows filename into the\n    following parts:\n\n    - input value\n    - device\n    - slash\n    - dirname\n    - basename\n    - extname\n\n    Examples\n    --------\n    > var f = 'C:\\\\foo\\\\bar\\\\index.js';\n    > var parts = RE_FILENAME.exec( f ).slice()\n    [ 'C:\\\\foo\\\\bar\\\\index.js', 'C:', '\\\\', 'foo\\\\bar\\\\', 'index.js', '.js' ]\n\n    See Also\n    --------\n    RE_FILENAME_POSIX, RE_FILENAME_WINDOWS\n",
	"RE_FILENAME_POSIX": "\nRE_FILENAME_POSIX\n    Regular expression to split a POSIX filename.\n\n    When executed, the regular expression splits a POSIX filename into the\n    following parts:\n\n    - input value\n    - root\n    - dirname\n    - basename\n    - extname\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var parts = RE_FILENAME_POSIX.exec( '/foo/bar/index.js' ).slice()\n    [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]\n    > parts = RE_FILENAME_POSIX.exec( './foo/bar/.gitignore' ).slice()\n    [ './foo/bar/.gitignore', '', './foo/bar/', '.gitignore', '' ]\n    > parts = RE_FILENAME_POSIX.exec( 'foo/file.pdf' ).slice()\n    [ 'foo/file.pdf', '', 'foo/', 'file.pdf', '.pdf' ]\n    > parts = RE_FILENAME_POSIX.exec( '/foo/bar/file' ).slice()\n    [ '/foo/bar/file', '/', 'foo/bar/', 'file', '' ]\n    > parts = RE_FILENAME_POSIX.exec( 'index.js' ).slice()\n    [ 'index.js', '', '', 'index.js', '.js' ]\n    > parts = RE_FILENAME_POSIX.exec( '.' ).slice()\n    [ '.', '', '', '.', '' ]\n    > parts = RE_FILENAME_POSIX.exec( './' ).slice()\n    [ './', '', '.', '.', '' ]\n    > parts = RE_FILENAME_POSIX.exec( '' ).slice()\n    [ '', '', '', '', '' ]\n\n    See Also\n    --------\n    RE_FILENAME, RE_FILENAME_WINDOWS\n",
	"RE_FILENAME_WINDOWS": "\nRE_FILENAME_WINDOWS\n    Regular expression to split a Windows filename.\n\n    When executed, the regular expression splits a Windows filename into the\n    following parts:\n\n    - input value\n    - device\n    - slash\n    - dirname\n    - basename\n    - extname\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var parts = RE_FILENAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\index.js' ).slice()\n    [ 'C:\\\\foo\\\\bar\\\\index.js', 'C:', '\\\\', 'foo\\\\bar\\\\', 'index.js', '.js' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\.gitignore' ).slice()\n    [ '\\\\foo\\\\bar\\\\.gitignore', '', '\\\\', 'foo\\\\bar\\\\', '.gitignore', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( 'foo\\\\file.pdf' ).slice()\n    [ 'foo\\\\file.pdf', '', '', 'foo\\\\', 'file.pdf', '.pdf' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' ).slice()\n    [ '\\\\foo\\\\bar\\\\file', '', '\\\\', 'foo\\\\bar\\\\', 'file', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( 'index.js' ).slice()\n    [ 'index.js', '', '', '', 'index.js', '.js' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '.' ).slice()\n    [ '.', '', '', '', '.', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( './' ).slice()\n    [ './', '', '', '.', '.', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '' ).slice()\n    [ '', '', '', '', '', '' ]\n\n    See Also\n    --------\n    RE_FILENAME, RE_FILENAME_POSIX\n",
	"RE_FUNCTION_NAME": "\nRE_FUNCTION_NAME\n    Regular expression to capture a function name.\n\n    Examples\n    --------\n    > function beep() { return 'boop'; };\n    > var name = RE_FUNCTION_NAME.exec( beep.toString() )[ 1 ]\n    'beep'\n    > name = RE_FUNCTION_NAME.exec( function () {} )[ 1 ]\n    ''\n\n    See Also\n    --------\n    functionName\n",
	"RE_NATIVE_FUNCTION": "\nRE_NATIVE_FUNCTION\n    Regular expression to match a native function.\n\n    Examples\n    --------\n    > var bool = RE_NATIVE_FUNCTION.test( Date.toString() )\n    true\n    > bool = RE_NATIVE_FUNCTION.test( (function noop() {}).toString() )\n    false\n\n    See Also\n    --------\n    RE_FUNCTION_NAME, functionName\n",
	"RE_REGEXP": "\nRE_REGEXP\n    Regular expression to parse a regular expression string.\n\n    Regular expression strings should be escaped.\n\n    Examples\n    --------\n    > var bool = RE_REGEXP.test( '/^beep$/' )\n    true\n    > bool = RE_REGEXP.test( '/boop' )\n    false\n\n    // Escape regular expression strings:\n    > bool = RE_REGEXP.test( '/^\\/([^\\/]+)\\/(.*)$/' )\n    false\n    > bool = RE_REGEXP.test( '/^\\\\/([^\\\\/]+)\\\\/(.*)$/' )\n    true\n\n    See Also\n    --------\n    reFromString\n",
	"RE_UNC_PATH": "\nRE_UNC_PATH\n    Regular expression to parse a UNC path.\n\n    Examples\n    --------\n    > var path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b';\n    > var bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::b';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\\\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = 'beep boop \\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b:c';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '//server/share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '/foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = 'foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = './foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '/foo/../bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n\n    See Also\n    --------\n    isUNCPath\n",
	"RE_UTF16_SURROGATE_PAIR": "\nRE_UTF16_SURROGATE_PAIR\n    Regular expression to match a UTF-16 surrogate pair.\n\n    Examples\n    --------\n    > var bool = RE_UTF16_SURROGATE_PAIR.test( 'abc\\uD800\\uDC00def' )\n    true\n    > bool = RE_UTF16_SURROGATE_PAIR.test( 'abcdef' )\n    false\n\n    See Also\n    --------\n    RE_UTF16_UNPAIRED_SURROGATE\n",
	"RE_UTF16_UNPAIRED_SURROGATE": "\nRE_UTF16_UNPAIRED_SURROGATE\n    Regular expression to match an unpaired UTF-16 surrogate.\n\n    Examples\n    --------\n    > var bool = RE_UTF16_UNPAIRED_SURROGATE.test( 'abc' )\n    false\n    > bool = RE_UTF16_UNPAIRED_SURROGATE.test( '\\uD800' )\n    true\n\n    See Also\n    --------\n    RE_UTF16_SURROGATE_PAIR\n",
	"RE_WHITESPACE": "\nRE_WHITESPACE\n    Regular expression to match a white space character.\n\n    Matches the 25 characters defined as white space (\"WSpace=Y\",\"WS\")\n    characters in the Unicode 9.0 character database.\n\n    Matches one related white space character without the Unicode character\n    property \"WSpace=Y\" (zero width non-breaking space which was deprecated as\n    of Unicode 3.2).\n\n    Examples\n    --------\n    > var bool = RE_WHITESPACE.test( '\\n' )\n    true\n    > bool = RE_WHITESPACE.test( ' ' )\n    true\n    > bool = RE_WHITESPACE.test( 'a' )\n    false\n\n    See Also\n    --------\n    isWhitespace\n",
	"rpad": "\nrpad( str, len[, pad] )\n    Right pads a `string` such that the padded `string` has a length of at least\n    `len`.\n\n    An output string is not guaranteed to have a length of exactly `len`, but to\n    have a length of at least `len`. To generate a padded string having a length\n    equal to `len`, post-process a padded string by trimming off excess\n    characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Minimum string length.\n\n    pad: string (optional)\n        String used to pad. Default: ' '.\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    > var out = rpad( 'a', 5 )\n    'a    '\n    > out = rpad( 'beep', 10, 'p' )\n    'beeppppppp'\n    > out = rpad( 'beep', 12, 'boop' )\n    'beepboopboop'\n\n    See Also\n    --------\n    lpad, pad\n",
	"rtrim": "\nrtrim( str )\n    Trims whitespace from the end of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = rtrim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n    ' \\t\\t\\n  Beep'\n\n    See Also\n    --------\n    ltrim, trim\n",
	"safeintmax": "\nsafeintmax( dtype )\n    Returns the maximum safe integer capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Maximum safe integer.\n\n    Examples\n    --------\n    > var m = safeintmax( 'float16' )\n    2047\n    > m = safeintmax( 'float32' )\n    16777215\n\n    See Also\n    --------\n    safeintmin, realmax, typemax\n",
	"safeintmin": "\nsafeintmin( dtype )\n    Returns the minimum safe integer capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Minimum safe integer.\n\n    Examples\n    --------\n    > var m = safeintmin( 'float16' )\n    -2047\n    > m = safeintmin( 'float32' )\n    -16777215\n\n    See Also\n    --------\n    safeintmax, realmin, typemin\n",
	"sample": "\nsample( x[, options] )\n    Samples elements from an array-like object.\n\n    Parameters\n    ----------\n    x: ArrayLike\n        Array-like object from which to sample.\n\n    options: Object (optional)\n        Options.\n\n    options.size: integer (optional)\n        Sample size. By default, the function returns an array having the same\n        length as `x`. Specify the `size` option to generate a sample of a\n        different size.\n\n    options.probs: Array<number> (optional)\n        Element probabilities. By default, the probability of sampling an\n        element is the same for all elements. To assign elements different\n        probabilities, set the `probs` option. The `probs` option must be a\n        numeric array consisting of nonnegative values which sum to one. When\n        sampling without replacement, note that the `probs` option denotes the\n        initial element probabilities which are then updated after each draw.\n\n    options.replace: boolean (optional)\n        Boolean indicating whether to sample with replacement. If the `replace`\n        option is set to `false`, the `size` option cannot be an integer larger\n        than the number of elements in `x`. Default: `true`.\n\n    Returns\n    -------\n    out: Array\n        Sample.\n\n    Examples\n    --------\n    > var out = sample( 'abc' )\n    e.g., [ 'a', 'a', 'b' ]\n    > out = sample( [ 3, 6, 9 ] )\n    e.g., [ 3, 9, 6 ]\n    > var bool = ( out.length === 3 )\n    true\n\n    > out = sample( [ 3, null, NaN, 'abc', function(){} ] )\n    e.g., [ 3, 'abc', null, 3, null ]\n\n    // Set sample size:\n    > out = sample( [ 3, 6, 9 ], { 'size': 10 })\n    e.g., [ 6, 3, 9, 9, 9, 6, 9, 6, 9, 3 ]\n    > out = sample( [ 0, 1 ], { 'size': 20 })\n    e.g., [ 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0 ]\n\n    // Draw without replacement:\n    > out = sample( [ 1, 2, 3, 4, 5, 6 ], { 'replace': false, 'size': 3 })\n    e.g., [ 6, 1, 5 ]\n    > out = sample( [ 0, 1 ], { 'replace': false })\n    e.g., [ 0, 1 ]\n\n    // Assigning non-uniform element probabilities:\n    > var x = [ 1, 2, 3, 4, 5, 6 ];\n    > var probs = [ 0.1, 0.1, 0.1, 0.1, 0.1, 0.5 ];\n    > out = sample( x, { 'probs': probs })\n    e.g., [ 5, 6, 6, 5, 6, 4 ]\n    > out = sample( x, { 'probs': probs, 'size': 3, 'replace': false })\n    e.g., [ 6, 4, 1 ]\n\n\nsample.factory( [pool, ][options] )\n    Returns a function to sample elements from an array-like object.\n\n    If provided an array-like object `pool`, the returned function will always\n    sample from the supplied object.\n\n    Parameters\n    ----------\n    pool: ArrayLike (optional)\n        Array-like object from which to sample.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: integer (optional)\n        Integer-valued seed.\n\n    options.size: integer (optional)\n        Sample size.\n\n    options.replace: boolean (optional)\n        Boolean indicating whether to sample with replacement. Default: `true`.\n\n    options.mutate: boolean (optional)\n        Boolean indicating whether to mutate the `pool` when sampling without\n        replacement. If a population from which to sample is provided, the\n        underlying `pool` remains by default constant for each function\n        invocation. To mutate the `pool` by permanently removing observations\n        when sampling without replacement, set the `mutate` option to `true`.\n        The returned function returns `null` after all population units are\n        exhausted. Default: `false`.\n\n    Returns\n    -------\n    fcn: Function\n        Function to sample elements from an array-like object.\n\n    Examples\n    --------\n    // Set a seed:\n    > var mysample = sample.factory({ 'seed': 232 });\n    > var out = mysample( 'abcdefg' )\n    [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]\n\n    // Provide `pool` and set a seed plus a default sample size:\n    > var pool = [ 1, 2, 3, 4, 5, 6 ];\n    > mysample = sample.factory( pool, { 'seed': 232, 'size': 2 });\n    > out = mysample()\n    [ 6, 4 ]\n    > out = mysample()\n    [ 6, 5 ]\n\n    // Mutate the `pool`:\n    > var opts = { 'seed': 474, 'size': 3, 'mutate': true, 'replace': false };\n    > pool = [ 1, 2, 3, 4, 5, 6 ];\n    > mysample = sample.factory( pool, opts );\n    > out = mysample()\n    [ 4, 3, 6 ]\n    > out = mysample()\n    [ 1, 5, 2 ]\n    > out = mysample()\n    null\n\n    // Override default `size` parameter when invoking created function:\n    > mysample = sample.factory( [ 0, 1 ], { 'size': 2 });\n    > out = mysample()\n    e.g., [ 1, 1 ]\n    > out = mysample({ 'size': 10 })\n    e.g, [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]\n\n    // Sample with and without replacement:\n    > mysample = sample.factory( [ 0, 1 ], { 'size': 2 });\n    > out = mysample()\n    e.g., [ 1, 1 ]\n    > out = mysample({ 'replace': false })\n    e.g., [ 0, 1 ] or [ 1, 0 ]\n    > out = mysample()\n    e.g., [ 1, 1 ]\n\n",
	"SAVOY_STOPWORDS_FIN": "\nSAVOY_STOPWORDS_FIN()\n    Returns a list of Finnish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_FIN()\n    [ 'aiemmin', 'aika', 'aikaa', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_FR": "\nSAVOY_STOPWORDS_FR()\n    Returns a list of French stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_FR()\n    [ 'a', 'à', 'â', 'abord', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_GER": "\nSAVOY_STOPWORDS_GER()\n    Returns a list of German stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_GER()\n    [ 'a', 'ab', 'aber', 'ach', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_IT": "\nSAVOY_STOPWORDS_IT()\n    Returns a list of Italian stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_IT()\n    [ 'a', 'abbastanza', 'accidenti', 'ad', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_POR": "\nSAVOY_STOPWORDS_POR()\n    Returns a list of Portuguese stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_POR()\n    [ 'aiemmin', 'aika', 'aikaa', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_SP": "\nSAVOY_STOPWORDS_SP()\n    Returns a list of Spanish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_SP()\n    [ 'a', 'acuerdo', 'adelante', 'ademas', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SAVOY_STOPWORDS_SWE": "\nSAVOY_STOPWORDS_SWE()\n    Returns a list of Swedish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_SWE()\n    [ 'aderton', 'adertonde', 'adjö', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n",
	"SECONDS_IN_DAY": "\nSECONDS_IN_DAY\n    Number of seconds in a day.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var secs = days * SECONDS_IN_DAY\n    271296\n\n",
	"SECONDS_IN_HOUR": "\nSECONDS_IN_HOUR\n    Number of seconds in an hour.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var secs = hrs * SECONDS_IN_HOUR\n    11304\n\n",
	"SECONDS_IN_MINUTE": "\nSECONDS_IN_MINUTE\n    Number of seconds in a minute.\n\n    Examples\n    --------\n    > var mins = 3.14;\n    > var secs = mins * SECONDS_IN_MINUTE\n    188.4\n\n",
	"SECONDS_IN_WEEK": "\nSECONDS_IN_WEEK\n    Number of seconds in a week.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var secs = wks * SECONDS_IN_WEEK\n    1899072\n\n",
	"secondsInMonth": "\nsecondsInMonth( [month[, year]] )\n    Returns the number of seconds in a month.\n\n    By default, the function returns the number of seconds in the current month\n    of the current year (according to local time). To determine the number of\n    seconds for a particular month and year, provide `month` and `year`\n    arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also supports providing a `Date` object.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Seconds in a month.\n\n    Examples\n    --------\n    > var num = secondsInMonth()\n    <number>\n    > num = secondsInMonth( 2 )\n    <number>\n    > num = secondsInMonth( 2, 2016 )\n    2505600\n    > num = secondsInMonth( 2, 2017 )\n    2419200\n\n    // Other ways to supply month:\n    > num = secondsInMonth( 'feb', 2016 )\n    2505600\n    > num = secondsInMonth( 'february', 2016 )\n    2505600\n\n    See Also\n    --------\n    secondsInYear\n",
	"secondsInYear": "\nsecondsInYear( [value] )\n    Returns the number of seconds in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of seconds in the current year\n    (according to local time). To determine the number of seconds for a\n    particular year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of seconds in a year.\n\n    Examples\n    --------\n    > var num = secondsInYear()\n    <number>\n    > num = secondsInYear( 2016 )\n    31622400\n    > num = secondsInYear( 2017 )\n    31536000\n\n    See Also\n    --------\n    secondsInMonth\n",
	"setReadOnly": "\nsetReadOnly( obj, prop, value )\n    Defines a read-only property.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string\n        Property name.\n\n    value: any\n        Value to set.\n\n    Examples\n    --------\n    > var obj = {};\n    > setReadOnly( obj, 'foo', 'bar' );\n    > obj.foo = 'boop';\n    > obj\n    { 'foo': 'bar' }\n\n",
	"shift": "\nshift( collection )\n    Removes and returns the first element of a collection.\n\n    The function returns an array with two elements: the shortened collection\n    and the removed element.\n\n    If the input collection is a typed array whose length is greater than `0`,\n    the first return value does not equal the input reference.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the value should be\n        array-like.\n\n    Returns\n    -------\n    out: Array\n        Updated collection and the removed item.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var out = shift( arr )\n    [ [ 2.0, 3.0, 4.0, 5.0 ], 1.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > out = shift( arr )\n    [ <Float64Array>[ 2.0 ], 1.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 2, '0': 1.0, '1': 2.0 };\n    > out = shift( arr )\n    [ { 'length': 1, '0': 2.0 }, 1.0 ]\n\n    See Also\n    --------\n    pop, push, unshift\n",
	"sizeOf": "\nsizeOf( dtype )\n    Returns the size (in bytes) of the canonical binary representation of a\n    specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n    - complex128: 128-bit complex numbers\n    - complex64: 64-bit complex numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Size (in bytes).\n\n    Examples\n    --------\n    > var s = sizeOf( 'int8' )\n    1\n    > s = sizeOf( 'uint32' )\n    4\n\n    See Also\n    --------\n    realmax, typemax\n",
	"some": "\nsome( collection, n )\n    Tests whether at least `n` elements in a collection are truthy.\n\n    The function immediately returns upon finding `n` truthy elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of truthy elements.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n` truthy\n        elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 1, 2, 3 ];\n    > var bool = some( arr, 3 )\n    true\n\n    See Also\n    --------\n    any, every, forEach, none, someBy\n",
	"someBy": "\nsomeBy( collection, n, predicate[, thisArg ] )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon finding `n` successful elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n`\n        successful elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, -3, 4, -1 ];\n    > var bool = someBy( arr, 2, negative )\n    true\n\n    See Also\n    --------\n    anyBy, everyBy, forEach, noneBy, someByAsync, someByRight\n",
	"someByAsync": "\nsomeByAsync( collection, n, [options,] predicate, done )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon receiving `n` non-falsy `result`\n    values and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nsomeByAsync.factory( [options,] predicate )\n    Returns a function which tests whether a collection contains at least `n`\n    elements which pass a test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = someByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, 2, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, 2, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByAsync, everyByAsync, forEachAsync, noneByAsync, someBy, someByRightAsync\n",
	"someByRight": "\nsomeByRight( collection, n, predicate[, thisArg ] )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon finding `n` successful elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n`\n        successful elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ -1, 1, -2, 3, 4 ];\n    > var bool = someByRight( arr, 2, negative )\n    true\n\n    See Also\n    --------\n    anyByRight, everyByRight, forEachRight, noneByRight, someBy, someByRightAsync\n",
	"someByRightAsync": "\nsomeByRightAsync( collection, n, [options,] predicate, done )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon receiving `n` non-falsy `result`\n    values and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nsomeByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether a collection contains at least `n`\n    elements which pass a test implemented by a predicate function, iterating\n    from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = someByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, 2, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, 2, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByRightAsync, everyByRightAsync, forEachRightAsync, noneByRightAsync, someByAsync, someByRight\n",
	"SOTU": "\nSOTU( [options] )\n    Returns State of the Union (SOTU) addresses.\n\n    Each State of the Union address is represented by an object with the\n    following fields:\n\n    - year: speech year\n    - name: President name\n    - party: the President's political party\n    - text: speech text\n\n    The following political parties are recognized:\n\n    - Democratic\n    - Republican\n    - Democratic-Republican\n    - Federalist\n    - National Union\n    - Whig\n    - Whig & Democratic\n    - none\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.name: String|Array<string> (optional)\n        President name(s).\n\n    options.party: String|Array<string> (optional)\n        Political party (or parties).\n\n    options.year: integer|Array<integer> (optional)\n        Year(s).\n\n    options.range: Array<integer> (optional)\n        Two-element array specifying a year range.\n\n    Returns\n    -------\n    out: Array<Object>\n        State of the Union addresses.\n\n    Examples\n    --------\n    > var out = SOTU()\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses by one or more Presidents...\n    > var opts = { 'name': 'Barack Obama' };\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses by one or more political parties...\n    > opts = { 'party': [ 'Democratic', 'Federalist' ] };\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses from one or more years...\n    > opts = { 'year': [ 2008, 2009, 2011 ] };\n    > out = SOTU( opts )\n    [ {...}, {...}, {...} ]\n\n    // Retrieve addresses from a range of consecutive years...\n    > opts = { 'range': [ 2008-2016 ] }\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n",
	"SPACHE_REVISED": "\nSPACHE_REVISED()\n    Returns a list of simple American-English words (revised Spache).\n\n    Returns\n    -------\n    out: Array<string>\n        List of simple American-English words.\n\n    Examples\n    --------\n    > var list = SPACHE_REVISED()\n    [ 'a', 'able', 'about', 'above', ... ]\n\n    References\n    ----------\n    - Spache, George. 1953. \"A New Readability Formula for Primary-Grade Reading\n    Materials.\" *The Elementary School Journal* 53 (7): 410–13. doi:10.1086/\n    458513.\n    - Klare, George R. 1974. \"Assessing Readability.\" *Reading Research\n    Quarterly* 10 (1). Wiley, International Reading Association: 62–102.\n    <http://www.jstor.org/stable/747086>.\n    - Stone, Clarence R. 1956. \"Measuring Difficulty of Primary Reading\n    Material: A Constructive Criticism of Spache's Measure.\" *The Elementary\n    School Journal* 57 (1). University of Chicago Press: 36–41.\n    <http://www.jstor.org/stable/999700>.\n    - Perera, Katherine. 2012. \"The assessment of linguistic difficulty in\n    reading material.\" In *Linguistics and the Teacher*, edited by Ronald\n    Carter, 101–13. Routledge Library Editions: Education. Taylor & Francis.\n    <https://books.google.com/books?id=oNXFQ9Gn6XIC>.\n\n",
	"SPAM_ASSASSIN": "\nSPAM_ASSASSIN()\n    Returns the Spam Assassin public mail corpus.\n\n    Each array element has the following fields:\n\n    - id: message id (relative to message group)\n    - group: message group\n    - checksum: object containing checksum info\n    - text: message text (including headers)\n\n    The message group may be one of the following:\n\n    - easy-ham-1: easier to detect non-spam e-mails (2500 messages)\n    - easy-ham-2: easier to detect non-spam e-mails collected at a later date\n      (1400 messages)\n    - hard-ham-1: harder to detect non-spam e-mails (250 messages)\n    - spam-1: spam e-mails (500 messages)\n    - spam-2: spam e-mails collected at a later date (1396 messages)\n\n    The checksum object contains the following fields:\n\n    - type: checksum type (e.g., MD5)\n    - value: checksum value\n\n    Returns\n    -------\n    out: Array<Object>\n        Corpus.\n\n    Examples\n    --------\n    > var data = SPAM_ASSASSIN()\n    [ {...}, {...}, ... ]\n\n",
	"SQRT_EPS": "\nSQRT_EPS\n    Square root of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > SQRT_EPS\n    0.14901161193847656e-7\n\n    See Also\n    --------\n    EPS\n",
	"SQRT_HALF": "\nSQRT_HALF\n    Square root of `1/2`.\n\n    Examples\n    --------\n    > SQRT_HALF\n    0.7071067811865476\n\n    See Also\n    --------\n    LN_HALF\n",
	"SQRT_HALF_PI": "\nSQRT_HALF_PI\n    Square root of the mathematical constant `π` divided by `2`.\n\n    Examples\n    --------\n    > SQRT_HALF_PI\n    1.2533141373155003\n\n    See Also\n    --------\n    PI\n",
	"SQRT_PHI": "\nSQRT_PHI\n    Square root of the golden ratio.\n\n    Examples\n    --------\n    > SQRT_PHI\n    1.272019649514069\n\n    See Also\n    --------\n    PHI\n",
	"SQRT_PI": "\nSQRT_PI\n    Square root of the mathematical constant `π`.\n\n    Examples\n    --------\n    > SQRT_PI\n    1.7724538509055160\n\n    See Also\n    --------\n    PI\n",
	"SQRT_THREE": "\nSQRT_THREE\n    Square root of `3`.\n\n    Examples\n    --------\n    > SQRT_THREE\n    1.7320508075688772\n\n",
	"SQRT_TWO": "\nSQRT_TWO\n    Square root of `2`.\n\n    Examples\n    --------\n    > SQRT_TWO\n    1.4142135623730951\n\n    See Also\n    --------\n    LN2\n",
	"SQRT_TWO_PI": "\nSQRT_TWO_PI\n    Square root of the mathematical constant `π` times `2`.\n\n    Examples\n    --------\n    > SQRT_TWO_PI\n    2.5066282746310007\n\n    See Also\n    --------\n    TWO_PI\n",
	"startcase": "\nstartcase( str )\n    Capitalizes the first letter of each word in an input `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String containing words where each first letter is capitalized.\n\n    Examples\n    --------\n    > var out = startcase( 'beep boop' )\n    'Beep Boop'\n\n    See Also\n    --------\n    lowercase, uppercase\n",
	"startsWith": "\nstartsWith( str, search[, position] )\n    Tests if a `string` starts with the characters of another `string`.\n\n    If provided an empty `search` string, the function always returns `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string\n        Search string.\n\n    position: integer (optional)\n        Position at which to start searching for `search`. If less than `0`, the\n        start position is determined relative to the end of the input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a `string` starts with the characters of\n        another `string`.\n\n    Examples\n    --------\n    > var bool = startsWith( 'Beep', 'Be' )\n    true\n    > bool = startsWith( 'Beep', 'ep' )\n    false\n    > bool = startsWith( 'Beep', 'ee', 1 )\n    true\n    > bool = startsWith( 'Beep', 'ee', -3 )\n    true\n    > bool = startsWith( 'Beep', '' )\n    true\n\n    See Also\n    --------\n    endsWith\n",
	"STOPWORDS_EN": "\nSTOPWORDS_EN()\n    Returns a list of English stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = STOPWORDS_EN()\n    [ 'a', 'about', 'above', 'across', ... ]\n\n",
	"tabulate": "\ntabulate( collection )\n    Generates a frequency table.\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to tabulate. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Frequency table.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'beep' ];\n    > var out = tabulate( collection )\n    [ [ 'beep', 2, 0.5 ], [ 'boop', 1, 0.25 ], [ 'foo', 1, 0.25 ] ]\n\n    See Also\n    --------\n    countBy, groupBy, tabulateBy\n",
	"tabulateBy": "\ntabulateBy( collection, [options,] indicator )\n    Generates a frequency table according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to tabulate. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Frequency table.\n\n    Examples\n    --------\n    > function indicator( value ) { return value[ 0 ]; };\n    > var collection = [ 'beep', 'boop', 'foo', 'beep' ];\n    > var out = tabulateBy( collection, indicator )\n    [ [ 'b', 3, 0.75 ], [ 'f', 1, 0.25 ] ]\n\n    See Also\n    --------\n    countBy, groupBy, tabulate\n",
	"tabulateByAsync": "\ntabulateByAsync( collection, [options,] indicator, done )\n    Generates a frequency table according to an indicator function.\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty array as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even': 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, indicator, done )\n    750\n    1000\n    2500\n    3000\n    [ [ 'odd', 2, 0.5 ], [ 'even', 2, 0.5 ] ]\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    750\n    [ [ 'odd', 2, 0.5 ], [ 'even', 2, 0.5 ] ]\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n\n\ntabulateByAsync.factory( [options,] indicator )\n    Returns a function which generates a frequency table according to an\n    indicator function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    Returns\n    -------\n    out: Function\n        A function which generates a frequency table according to an indicator\n        function.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = tabulateByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n    > arr = [ 2000, 1500, 1000, 750 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n\n    See Also\n    --------\n    countByAsync, groupByAsync, tabulateBy\n",
	"tic": "\ntic()\n    Returns a high-resolution time.\n\n    The returned array has the following format: `[seconds, nanoseconds]`.\n\n    Returns\n    -------\n    out: Array<integer>\n        High resolution time.\n\n    Examples\n    --------\n    > var t = tic()\n    [ <number>, <number> ]\n\n    See Also\n    --------\n    toc\n",
	"timeit": "\ntimeit( code, [options,] clbk )\n    Times a snippet.\n\n    If the `asynchronous` option is set to `true`, the implementation assumes\n    that `before`, `after`, and `code` snippets are all asynchronous.\n    Accordingly, these snippets should invoke a `next( [error] )` callback\n    once complete. The implementation wraps the snippet within a function\n    accepting two arguments: `state` and `next`.\n\n    The `state` parameter is simply an empty object which allows the `before`,\n    `after`, and `code` snippets to share state.\n\n    Notes:\n\n    - Snippets always run in strict mode.\n    - Always verify results. Doing so prevents the compiler from performing dead\n      code elimination and other optimization techniques, which would render\n      timing results meaningless.\n    - Executed code is not sandboxed and has access to the global state. You are\n      strongly advised against timing untrusted code. To time untrusted code,\n      do so in an isolated environment (e.g., a separate process with restricted\n      access to both global state and the host environment).\n    - Wrapping asynchronous code does add overhead, but, in most cases, the\n      overhead should be negligible compared to the execution cost of the timed\n      snippet.\n    - When the `asynchronous` options is `true`, ensure that the main `code`\n      snippet is actually asynchronous. If a snippet releases the zalgo, an\n      error complaining about exceeding the maximum call stack size is highly\n      likely.\n    - While many benchmark frameworks calculate various statistics over raw\n      timing results (e.g., mean and standard deviation), do not do this.\n      Instead, consider the fastest time an approximate lower bound for how fast\n      an environment can execute a snippet. Slower times are more likely\n      attributable to other processes interfering with timing accuracy rather\n      than attributable to variability in JavaScript's speed. In which case, the\n      minimum time is most likely the only result of interest. When considering\n      all raw timing results, apply common sense rather than statistics.\n\n    Parameters\n    ----------\n    code: string\n         Snippet to time.\n\n    options: Object (optional)\n        Options.\n\n    options.before: string (optional)\n        Setup code. Default: `''`.\n\n    options.after: string (optional)\n        Cleanup code. Default: `''`.\n\n    options.iterations: integer|null (optional)\n        Number of iterations. If `null`, the number of iterations is determined\n        by trying successive powers of `10` until the total time is at least\n        `0.1` seconds. Default: `1e6`.\n\n    options.repeats: integer (optional)\n        Number of repeats. Default: `3`.\n\n    options.asynchronous: boolean (optional)\n        Boolean indicating whether a snippet is asynchronous. Default: `false`.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > var code = 'var x = Math.pow( Math.random(), 3 );';\n    > code += 'if ( x !== x ) {';\n    > code += 'throw new Error( \\'Something went wrong.\\' );';\n    > code += '}';\n    > function done( error, results ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.dir( results );\n    ... };\n    > timeit( code, done );\n    e.g.,\n    {\n        \"iterations\": 1000000,\n        \"repeats\": 3,\n        \"min\": [ 0, 135734733 ],    // [seconds,nanoseconds]\n        \"elapsed\": 0.135734733,     // seconds\n        \"rate\": 7367311.062526641,  // iterations/second\n        \"times\": [                  // raw timing results\n            [ 0, 145641393 ],\n            [ 0, 135734733 ],\n            [ 0, 140462721 ]\n        ]\n    }\n\n",
	"tmpdir": "\ntmpdir()\n    Returns the directory for storing temporary files.\n\n    Returns\n    -------\n    dir: string\n         Directory for temporary files.\n\n    Examples\n    --------\n    > var dir = tmpdir()\n    e.g., '/path/to/temporary/files/directory'\n\n    See Also\n    --------\n    configdir, homedir\n",
	"toc": "\ntoc( time )\n    Returns a high-resolution time difference, where `time` is a two-element\n    array with format `[seconds, nanoseconds]`.\n\n    Similar to `time`, the returned array has format `[seconds, nanoseconds]`.\n\n    Parameters\n    ----------\n    time: Array<integer>\n        High-resolution time.\n\n    Returns\n    -------\n    out: Array<integer>\n        High resolution time difference.\n\n    Examples\n    --------\n    > var start = tic();\n    > var delta = toc( start )\n    [ <number>, <number> ]\n\n    See Also\n    --------\n    tic\n",
	"tokenize": "\ntokenize( str[, keepWhitespace] )\n    Tokenizes a string.\n\n    To include whitespace characters (spaces, tabs, line breaks) in the output\n    array, set `keepWhitespace` to `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    keepWhitespace: boolean\n        Boolean indicating whether whitespace characters should be returned as\n        part of the token array. Default: `false`.\n\n    Returns\n    -------\n    out: Array\n        Array of tokens.\n\n    Examples\n    --------\n    > var out = tokenize( 'Hello Mrs. Maple, could you call me back?' )\n    [ 'Hello', 'Mrs.', 'Maple', ',', 'could', 'you', 'call', 'me', 'back', '?' ]\n\n    > out = tokenize( 'Hello World!', true )\n    [ 'Hello', ' ', 'World', '!' ]\n\n",
	"trim": "\ntrim( str )\n    Trims whitespace from the beginning and end of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = trim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n    'Beep'\n\n    See Also\n    --------\n    ltrim, pad, rtrim\n",
	"trycatch": "\ntrycatch( x, y )\n    If a function does not throw, returns the function return value; otherwise,\n    returns `y`.\n\n    Parameters\n    ----------\n    x: Function\n        Function to try invoking.\n\n    y: any\n        Value to return if a function throws an error.\n\n    Returns\n    -------\n    z: any\n        Either the return value of `x` or the provided argument `y`.\n\n    Examples\n    --------\n    > function x() {\n    ...     if ( base.random.randu() < 0.5 ) {\n    ...         throw new Error( 'beep' );\n    ...     }\n    ...     return 1.0;\n    ... };\n    > var z = trycatch( x, -1.0 )\n    <number>\n\n    See Also\n    --------\n    trycatchAsync, trythen\n",
	"trycatchAsync": "\ntrycatchAsync( x, y, done )\n    If a function does not return an error, invokes a callback with the function\n    result; otherwise, invokes a callback with a value `y`.\n\n    A function `x` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts two arguments:\n\n    - error: error object\n    - result: function result\n\n    The `done` callback is invoked upon function completion and is provided two\n    arguments:\n\n    - error: error object\n    - result: either the result of `x` or the provided argument `y`\n\n    If `x` invokes `clbk` with an error argument, the function invokes the\n    `done` callback with both the error and the argument `y`.\n\n    If `x` does not invoke `clbk` with an error argument, the function invokes\n    the `done` callback with a first argument equal to `null` and the function\n    `result`.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    x: Function\n        Function to invoke.\n\n    y: any\n        Value to return if `x` returns an error.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( new Error( 'beep' ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         // process error...\n    ...     }\n    ...     console.log( result );\n    ... };\n    > trycatchAsync( x, 'boop', done )\n    'boop'\n\n    See Also\n    --------\n    trycatch, trythenAsync\n",
	"tryFunction": "\ntryFunction( fcn[, thisArg] )\n    Wraps a function in a try/catch block.\n\n    If provided an asynchronous function, the returned function only traps\n    errors which occur during the current event loop tick.\n\n    If a function throws a literal, the literal is serialized as a string and\n    returned as an `Error` object.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to wrap.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Wrapped function.\n\n    Examples\n    --------\n    > function fcn() { throw new Error( 'beep boop' ); };\n    > var f = wrap( fcn );\n    > var out = f();\n    > out.message\n    'beep boop'\n\n",
	"tryRequire": "\ntryRequire( id )\n    Wraps `require` in a `try/catch` block.\n\n    This function traps and returns any errors encountered when attempting to\n    require a module.\n\n    Use caution when attempting to resolve a relative path or a local module.\n    This function attempts to resolve a module from its current path. Thus, the\n    function is unable to resolve anything which is not along its search path.\n    For local requires, use an absolute file path.\n\n    Parameters\n    ----------\n    id: string\n        Module id.\n\n    Returns\n    -------\n    out: any|Error\n        Resolved module or an `Error`.\n\n    Examples\n    --------\n    > var out = tryRequire( '_unknown_module_id_' )\n    <Error>\n\n",
	"trythen": "\ntrythen( x, y )\n    If a function does not throw, returns the function return value; otherwise,\n    returns the value returned by a second function `y`.\n\n    The function `y` is provided a single argument:\n\n    - error: the error thrown by `x`\n\n    Parameters\n    ----------\n    x: Function\n        Function to try invoking.\n\n    y: Function\n        Function to invoke if an initial function throws an error.\n\n    Returns\n    -------\n    z: any\n        The return value of either `x` or `y`.\n\n    Examples\n    --------\n    > function x() {\n    ...     if ( base.random.randu() < 0.5 ) {\n    ...         throw new Error( 'beep' );\n    ...     }\n    ...     return 1.0;\n    ... };\n    > function y() {\n    ...     return -1.0;\n    ... };\n    > var z = trythen( x, y )\n    <number>\n\n    See Also\n    --------\n    trycatch, trythenAsync\n",
	"trythenAsync": "\ntrythenAsync( x, y, done )\n    If a function does not return an error, invokes a callback with the function\n    result; otherwise, invokes a second function `y`.\n\n    A function `x` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the function invokes a `done` callback with\n    its first argument as `null` and all other provided arguments.\n\n    If the error argument is truthy, the function invokes a function `y`. The\n    number of arguments provided to `y` depends on the function's length. If `y`\n    is a unary function, `y` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    Otherwise, `y` is provided two arguments:\n\n    - error: the error from `x`\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the `done` callback is invoked with its\n    first argument equal to `null` and all other arguments provided by `y`.\n\n    If the error argument is truthy, the `done` callback is invoked with only\n    the error argument provided by `y`.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    x: Function\n        Function to invoke.\n\n    y: Function\n        Function to invoke if `x` returns an error.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( new Error( 'beep' ) );\n    ...     }\n    ... };\n    > function y( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'boop' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > trythenAsync( x, y, done )\n    'boop'\n\n    See Also\n    --------\n    trycatchAsync, trythen\n",
	"ttest": "\nttest( x[, y][, options] )\n    Computes a one-sample or paired Student's t test.\n\n    When no `y` is supplied, the function performs a one-sample t-test for the\n    null hypothesis that the data in array or typed array `x` is drawn from a\n    normal distribution with mean zero and unknown variance.\n\n    When array or typed array `y` is supplied, the function tests whether the\n    differences `x - y` come from a normal distribution with mean zero and\n    unknown variance via the paired t-test.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Data array.\n\n    y: Array<number> (optional)\n        Paired data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Indicates whether the alternative hypothesis is that the mean of `x` is\n        larger than `mu` (`greater`), smaller than `mu` (`less`) or equal to\n        `mu` (`two-sided`). Default: `'two-sided'`.\n\n    options.mu: number (optional)\n        Hypothesized true mean under the null hypothesis. Set this option to\n        test whether the data comes from a distribution with the specified `mu`.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        P-value of the test.\n\n    out.statistic: number.\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed mean under H0 (or difference in means when `y` is supplied).\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.df: number\n        Degrees of freedom.\n\n    out.mean: number\n        Sample mean of `x` or `x - y`, respectively.\n\n    out.sd: number\n        Standard error of the mean.\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // One-sample t-test:\n    > var rnorm = base.random.normal.factory( 0.0, 2.0, { 'seed': 5776 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ... }\n    > var out = ttest( x )\n    {\n        rejected: false,\n        pValue: ~0.722,\n        statistic: ~0.357,\n        ci: [~-0.333,~0.479],\n        // ...\n    }\n\n    // Paired t-test:\n    > rnorm = base.random.normal.factory( 1.0, 2.0, { 'seed': 786 });\n    > x = new Array( 100 );\n    > var y = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ...     y[ i ] = rnorm();\n    ... }\n    > out = ttest( x, y )\n    {\n        rejected: false,\n        pValue: ~0.191,\n        statistic: ~1.315,\n        ci: [ ~-0.196, ~0.964 ],\n        // ...\n    }\n\n    // Print formatted output:\n    > var table = out.print()\n    Paired t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.1916\n        statistic: 1.3148\n        df: 99\n        95% confidence interval: [-0.1955,0.9635]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose custom significance level:\n    > arr = [ 2, 4, 3, 1, 0 ];\n    > out = ttest( arr, { 'alpha': 0.01 });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is not equal to 0\n\n        pValue: 0.0474\n        statistic: 2.8284\n        df: 4\n        99% confidence interval: [-1.2556,5.2556]\n\n    Test Decision: Fail to reject null in favor of alternative at 1%\n    significance level\n\n    // Test for a mean equal to five:\n    > var arr = [ 4, 4, 6, 6, 5 ];\n    > out = ttest( arr, { 'mu': 5 })\n    {\n        rejected: false,\n        pValue: 1,\n        statistic: 0,\n        ci: [ ~3.758, ~6.242 ],\n        // ...\n    }\n\n    // Perform one-sided tests:\n    > arr = [ 4, 4, 6, 6, 5 ];\n    > out = ttest( arr, { 'alternative': 'less' });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is less than 0\n\n        pValue: 0.9998\n        statistic: 11.1803\n        df: 4\n        95% confidence interval: [-Infinity,5.9534]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    > out = ttest( arr, { 'alternative': 'greater' });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is greater than 0\n\n        pValue: 0.0002\n        statistic: 11.1803\n        df: 4\n        95% confidence interval: [4.0466,Infinity]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n    See Also\n    --------\n    ttest2\n",
	"ttest2": "\nttest2( x, y[, options] )\n    Computes a two-sample Student's t test.\n\n    By default, the function performs a two-sample t-test for the null\n    hypothesis that the data in arrays or typed arrays `x` and `y` is\n    independently drawn from normal distributions with equal means.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.difference: number (optional)\n        Number denoting the difference in means under the null hypothesis.\n        Default: `0`.\n\n    options.variance: string (optional)\n        String indicating if the test should be conducted under the assumption\n        that the unknown variances of the normal distributions are `equal` or\n        `unequal`. As a default choice, the function carries out the Welch test\n        (using the Satterthwaite approximation for the degrees of freedom),\n        which does not have the requirement that the variances of the underlying\n        distributions are equal. If the equal variances assumption seems\n        warranted, set the option to `equal`. Default: `unequal`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        P-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed difference in means under H0.\n\n    out.xmean: number\n        Sample mean of `x`.\n\n    out.ymean: number\n        Sample mean of `y`.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.df: number\n        Degrees of freedom.\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Student's sleep data:\n    > var x = [ 0.7, -1.6, -0.2, -1.2, -0.1, 3.4, 3.7, 0.8, 0.0, 2.0 ];\n    > var y = [ 1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 5.5, 1.6, 4.6, 3.4 ];\n    > var out = ttest2( x, y )\n    {\n        rejected: false,\n        pValue: ~0.079,\n        statistic: ~-1.861,\n        ci: [ ~-3.365, ~0.205 ],\n        // ...\n    }\n\n    // Print table output:\n    > var table = out.print();\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.0794\n        statistic: -1.8608\n        95% confidence interval: [-3.3655,0.2055]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose a different significance level than `0.05`:\n    > out = ttest2( x, y, { 'alpha': 0.1 });\n    > table = out.print();\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.0794\n        statistic: -1.8608\n        90% confidence interval: [-3.0534,-0.1066]\n\n    Test Decision: Reject null in favor of alternative at 10% significance level\n\n    // Perform one-sided tests:\n    > out = ttest2( x, y, { 'alternative': 'less' });\n    > table = out.print()\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is less than 0\n\n        pValue: 0.0397\n        statistic: -1.8608\n        df: 17.7765\n        95% confidence interval: [-Infinity,-0.1066]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n    > out = ttest2( x, y, { 'alternative': 'greater' });\n    > table = out.print()\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is greater than 0\n\n        pValue: 0.9603\n        statistic: -1.8608\n        df: 17.7765\n        95% confidence interval: [-3.0534,Infinity]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Run tests with equal variances assumption:\n    > x = [ 2, 3, 1, 4 ];\n    > y = [ 1, 2, 3, 1, 2, 5, 3, 4 ];\n    > out = ttest2( x, y, { 'variance': 'equal' });\n    > table = out.print();\n    Two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.8848\n        statistic: -0.1486\n        df: 10\n        95% confidence interval: [-1.9996,1.7496]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Test for a difference in means besides zero:\n    > var rnorm = base.random.normal.factory({ 'seed': 372 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm( 2.0, 3.0 );\n    ... }\n    > y = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     y[ i ] = rnorm( 1.0, 3.0 );\n    ... }\n    > out = ttest2( x, y, { 'difference': 1.0, 'variance': 'equal' })\n    {\n        rejected: false,\n        pValue: ~0.642,\n        statistic: ~-0.466,\n        ci: [ ~-0.0455, ~1.646 ],\n        // ...\n    }\n\n    See Also\n    --------\n    ttest\n",
	"TWO_PI": "\nTWO_PI\n    The mathematical constant `π` times `2`.\n\n    Examples\n    --------\n    > TWO_PI\n    6.283185307179586\n\n    See Also\n    --------\n    PI\n",
	"typedarray2json": "\ntypedarray2json( arr )\n    Returns a JSON representation of a typed array.\n\n    The following typed array types are supported:\n\n    - Float64Array\n    - Float32Array\n    - Int32Array\n    - Uint32Array\n    - Int16Array\n    - Uint16Array\n    - Int8Array\n    - Uint8Array\n    - Uint8ClampedArray\n\n    The returned JSON object has the following properties:\n\n    - type: typed array type\n    - data: typed array data as a generic array\n\n    The implementation supports custom typed arrays and sets the `type` field to\n    the closest known typed array type.\n\n    Parameters\n    ----------\n    arr: TypedArray\n        Typed array to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 2 );\n    > arr[ 0 ] = 5.0;\n    > arr[ 1 ] = 3.0;\n    > var json = typedarray2json( arr )\n    { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }\n\n    See Also\n    --------\n    reviveTypedArray\n",
	"typedarray": "\ntypedarray( [dtype] )\n    Creates a typed array.\n\n    The function supports the following data types:\n\n    - float64: double-precision floating-point numbers (IEEE 754)\n    - float32: single-precision floating-point numbers (IEEE 754)\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    The default typed array data type is `float64`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = typedarray()\n    <Float64Array>\n    > arr = typedarray( 'float32' )\n    <Float32Array>\n\n\ntypedarray( length[, dtype] )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = typedarray( 5 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n    > arr = typedarray( 5, 'int32' )\n    <Int32Array>[ 0, 0, 0, 0, 0 ]\n\n\ntypedarray( typedarray[, dtype] )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = typedarray( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = typedarray( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarray( obj[, dtype] )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = typedarray( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarray( buffer[, byteOffset[, length]][, dtype] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = typedarray( buf, 0, 4, 'float32' )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n    See Also\n    --------\n    Float64Array, Float32Array, Int32Array, Uint32Array, Int16Array, Uint16Array, Int8Array, Uint8Array, Uint8ClampedArray\n",
	"typemax": "\ntypemax( dtype )\n    Returns the maximum value of a specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var m = typemax( 'int8' )\n    127\n    > m = typemax( 'uint32' )\n    4294967295\n\n    See Also\n    --------\n    realmax, typemin\n",
	"typemin": "\ntypemin( dtype )\n    Returns the minimum value of a specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var m = typemin( 'int8' )\n    -128\n    > m = typemin( 'uint32' )\n    0\n\n    See Also\n    --------\n    realmin, typemax\n",
	"typeOf": "\ntypeOf( value )\n    Determines a value's type.\n\n    The following values are not natively provided in older JavaScript engines:\n\n    - Map\n    - Set\n    - WeakMap\n    - WeakSet\n    - Symbol\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        The value's type.\n\n    Examples\n    --------\n    // Built-ins:\n    > var t = typeOf( 'a' )\n    'string'\n    > t = typeOf( 5 )\n    'number'\n    > t = typeOf( NaN )\n    'number'\n    > t = typeOf( true )\n    'boolean'\n    > t = typeOf( false )\n    'boolean'\n    > t = typeOf( null )\n    'null'\n    > t = typeOf( undefined )\n    'undefined'\n    > t = typeOf( [] )\n    'array'\n    > t = typeOf( {} )\n    'object'\n    > t = typeOf( function noop() {} )\n    'function'\n    > t = typeOf( new Symbol( 'beep' ) )\n    'symbol'\n    > t = typeOf( /.+/ )\n    'regexp'\n    > t = typeOf( new String( 'beep' ) )\n    'string'\n    > t = typeOf( new Number( 5 ) )\n    'number'\n    > t = typeOf( new Boolean( false ) )\n    'boolean'\n    > t = typeOf( new Array() )\n    'array'\n    > t = typeOf( new Object() )\n    'object'\n    > t = typeOf( new Int8Array( 10 ) )\n    'int8array'\n    > t = typeOf( new Uint8Array( 10 ) )\n    'uint8array'\n    > t = typeOf( new Uint8ClampedArray( 10 ) )\n    'uint8clampedarray'\n    > t = typeOf( new Int16Array( 10 ) )\n    'int16array'\n    > t = typeOf( new Uint16Array( 10 ) )\n    'uint16array'\n    > t = typeOf( new Int32Array( 10 ) )\n    'int32array'\n    > t = typeOf( new Uint32Array( 10 ) )\n    'uint32array'\n    > t = typeOf( new Float32Array( 10 ) )\n    'float32array'\n    > t = typeOf( new Float64Array( 10 ) )\n    'float64array'\n    > t = typeOf( new ArrayBuffer( 10 ) )\n    'arraybuffer'\n    > t = typeOf( new Date() )\n    'date'\n    > t = typeOf( new RegExp( '.+ )') )\n    'regexp'\n    > t = typeOf( new Map() )\n    'map'\n    > t = typeOf( new Set() )\n    'set'\n    > t = typeOf( new WeakMap() )\n    'weakmap'\n    > t = typeOf( new WeakSet() )\n    'weakset'\n    > t = typeOf( new Error( 'beep' ) )\n    'error'\n    > t = typeOf( new TypeError( 'beep' ) )\n    'typeerror'\n    > t = typeOf( new SyntaxError( 'beep' ) )\n    'syntaxerror'\n    > t = typeOf( new ReferenceError( 'beep' ) )\n    'referenceerror'\n    > t = typeOf( new URIError( 'beep' ) )\n    'urierror'\n    > t = typeOf( new RangeError( 'beep' ) )\n    'rangeerror'\n    > t = typeOf( new EvalError( 'beep' ) )\n    'evalerror'\n    > t = typeOf( Math )\n    'math'\n    > t = typeOf( JSON )\n    'json'\n\n    // Arguments object:\n    > function beep() { return arguments; };\n    > t = typeOf( beep() )\n    'arguments'\n\n    // Node.js Buffer object:\n    > t = typeOf( new Buffer( 10 ) )\n    'buffer'\n\n    // Custom constructor:\n    > function Person() { return this };\n    > t = typeOf( new Person() )\n    'person'\n\n    // Anonymous constructor:\n    > var Foo = function () { return this; };\n    > t = typeOf new Foo() )\n    ''\n\n    See Also\n    --------\n    constructorName, nativeClass\n",
	"Uint16Array": "\nUint16Array()\n    A typed array constructor which returns a typed array representing an array\n    of 16-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array()\n    <Uint16Array>\n\n\nUint16Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 )\n    <Uint16Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint16Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint16Array( arr1 )\n    <Uint16Array>[ 5, 5, 5 ]\n\n\nUint16Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint16Array( arr1 )\n    <Uint16Array>[ 5, 5, 5 ]\n\n\nUint16Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 8 );\n    > var arr = new Uint16Array( buf, 0, 4 )\n    <Uint16Array>[ 0, 0, 0, 0 ]\n\n\nUint16Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint16Array.BYTES_PER_ELEMENT\n    2\n\n\nUint16Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint16Array.name\n    Uint16Array\n\n\nUint16Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint16Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.byteLength\n    10\n\n\nUint16Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint16Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint32Array, Uint8Array, Uint8ClampedArray\n",
	"UINT16_MAX": "\nUINT16_MAX\n    Maximum unsigned 16-bit integer.\n\n    The maximum unsigned 16-bit integer is given by `2^16 - 1`.\n\n    Examples\n    --------\n    > UINT16_MAX\n    65535\n\n    See Also\n    --------\n    INT16_MAX\n",
	"UINT16_NUM_BYTES": "\nUINT16_NUM_BYTES\n    Size (in bytes) of a 16-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    INT16_NUM_BYTES, UINT32_NUM_BYTES, UINT8_NUM_BYTES\n",
	"Uint32Array": "\nUint32Array()\n    A typed array constructor which returns a typed array representing an array\n    of 32-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array()\n    <Uint32Array>\n\n\nUint32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 )\n    <Uint32Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint32Array( arr1 )\n    <Uint32Array>[ 5, 5, 5 ]\n\n\nUint32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint32Array( arr1 )\n    <Uint32Array>[ 5, 5, 5 ]\n\n\nUint32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Uint32Array( buf, 0, 4 )\n    <Uint32Array>[ 0, 0, 0, 0 ]\n\n\nUint32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint32Array.BYTES_PER_ELEMENT\n    4\n\n\nUint32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint32Array.name\n    Uint32Array\n\n\nUint32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.byteLength\n    20\n\n\nUint32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint8Array, Uint8ClampedArray\n",
	"UINT32_MAX": "\nUINT32_MAX\n    Maximum unsigned 32-bit integer.\n\n    The maximum unsigned 32-bit integer is given by `2^32 - 1`.\n\n    Examples\n    --------\n    > UINT32_MAX\n    4294967295\n\n    See Also\n    --------\n    INT32_MAX\n",
	"UINT32_NUM_BYTES": "\nUINT32_NUM_BYTES\n    Size (in bytes) of a 32-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    INT32_NUM_BYTES, UINT16_NUM_BYTES, UINT8_NUM_BYTES\n",
	"Uint8Array": "\nUint8Array()\n    A typed array constructor which returns a typed array representing an array\n    of 8-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array()\n    <Uint8Array>\n\n\nUint8Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 )\n    <Uint8Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint8Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint8Array( arr1 )\n    <Uint8Array>[ 5, 5, 5 ]\n\n\nUint8Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint8Array( arr1 )\n    <Uint8Array>[ 5, 5, 5 ]\n\n\nUint8Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Uint8Array( buf, 0, 4 )\n    <Uint8Array>[ 0, 0, 0, 0 ]\n\n\nUint8Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint8Array.BYTES_PER_ELEMENT\n    1\n\n\nUint8Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint8Array.name\n    Uint8Array\n\n\nUint8Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint8Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.byteLength\n    5\n\n\nUint8Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint8Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8ClampedArray\n",
	"Uint8ClampedArray": "\nUint8ClampedArray()\n    A typed array constructor which returns a typed array representing an array\n    of 8-bit unsigned integers in the platform byte order clamped to 0-255.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray()\n    <Uint8ClampedArray>\n\n\nUint8ClampedArray( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 )\n    <Uint8ClampedArray>[ 0, 0, 0, 0, 0 ]\n\n\nUint8ClampedArray( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint8ClampedArray( arr1 )\n    <Uint8ClampedArray>[ 5, 5, 5 ]\n\n\nUint8ClampedArray( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint8ClampedArray( arr1 )\n    <Uint8ClampedArray>[ 5, 5, 5 ]\n\n\nUint8ClampedArray( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Uint8ClampedArray( buf, 0, 4 )\n    <Uint8ClampedArray>[ 0, 0, 0, 0 ]\n\n\nUint8ClampedArray.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint8ClampedArray.BYTES_PER_ELEMENT\n    1\n\n\nUint8ClampedArray.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint8ClampedArray.name\n    Uint8ClampedArray\n\n\nUint8ClampedArray.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint8ClampedArray.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.byteLength\n    5\n\n\nUint8ClampedArray.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.byteOffset\n    0\n\n\nUint8ClampedArray.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.length\n    5\n\n\nTODO: add methods\n\n\n    See Also\n    --------\n    Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array\n",
	"UINT8_MAX": "\nUINT8_MAX\n    Maximum unsigned 8-bit integer.\n\n    The maximum unsigned 8-bit integer is given by `2^8 - 1`.\n\n    Examples\n    --------\n    > UINT8_MAX\n    255\n\n    See Also\n    --------\n    INT8_MAX\n",
	"UINT8_NUM_BYTES": "\nUINT8_NUM_BYTES\n    Size (in bytes) of an 8-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT8_NUM_BYTES\n    1\n\n    See Also\n    --------\n    INT8_NUM_BYTES, UINT16_NUM_BYTES, UINT32_NUM_BYTES\n",
	"uncapitalize": "\nuncapitalize( str )\n    Lowercases the first character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Uncapitalized string.\n\n    Examples\n    --------\n    > var out = uncapitalize( 'Beep' )\n    'beep'\n    > out = uncapitalize( 'bOOp' )\n    'bOOp'\n\n    See Also\n    --------\n    capitalize, lowercase\n",
	"uncapitalizeKeys": "\nuncapitalizeKeys( obj )\n    Converts the first letter of each object key to lowercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'AA': 1, 'BB': 2 };\n    > var out = uncapitalizeKeys( obj )\n    { 'aA': 1, 'bB': 2 }\n\n    See Also\n    --------\n    capitalizeKeys, lowercaseKeys\n",
	"uncurry": "\nuncurry( fcn[, arity, ][thisArg] )\n    Transforms a curried function into a function invoked with multiple\n    arguments.\n\n    Parameters\n    ----------\n    fcn: Function\n        Curried function.\n\n    arity: integer (optional)\n        Number of parameters.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Uncurried function.\n\n    Examples\n    --------\n    > function addX( x ) {\n    ...     return function addY( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > var fcn = uncurry( addX );\n    > var sum = fcn( 2, 3 )\n    5\n\n    // To enforce a fixed number of parameters, provide an `arity` argument:\n    > function add( x ) {\n    ...     return function add( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > fcn = uncurry( add, 2 );\n    > sum = fcn( 9 )\n    <Error>\n\n    // To specify an execution context, provide a `thisArg` argument:\n    > function addX( x ) {\n    ...     this.x = x;\n    ...     return addY;\n    ... };\n    > function addY( y ) {\n    ...     return this.x + y;\n    ... };\n    > fcn = uncurry( addX, {} );\n    > sum = fcn( 2, 3 )\n    5\n\n    See Also\n    --------\n    curry, uncurryRight\n",
	"uncurryRight": "\nuncurryRight( fcn[, arity, ][thisArg] )\n    Transforms a curried function into a function invoked with multiple\n    arguments.\n\n    Provided arguments are applied starting from the right.\n\n    Parameters\n    ----------\n    fcn: Function\n        Curried function.\n\n    arity: integer (optional)\n        Number of parameters.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Uncurried function.\n\n    Examples\n    --------\n    > function addX( x ) {\n    ...     return function addY( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > var fcn = uncurryRight( addX );\n    > var sum = fcn( 3, 2 )\n    5\n\n    // To enforce a fixed number of parameters, provide an `arity` argument:\n    > function add( y ) {\n    ...     return function add( x ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > fcn = uncurryRight( add, 2 );\n    > sum = fcn( 9 )\n    <Error>\n\n    // To specify an execution context, provide a `thisArg` argument:\n    > function addY( y ) {\n    ...     this.y = y;\n    ...     return addX;\n    ... };\n    > function addX( x ) {\n    ...     return x + this.y;\n    ... };\n    > fcn = uncurryRight( addY, {} );\n    > sum = fcn( 3, 2 )\n    5\n\n    See Also\n    --------\n    curry, curryRight, uncurry\n",
	"UNICODE_MAX": "\nUNICODE_MAX\n    Maximum Unicode code point.\n\n    Examples\n    --------\n    > UNICODE_MAX\n    1114111\n\n    See Also\n    --------\n    UNICODE_MAX_BMP\n",
	"UNICODE_MAX_BMP": "\nUNICODE_MAX_BMP\n    Maximum Unicode code point in the Basic Multilingual Plane (BMP).\n\n    Examples\n    --------\n    > UNICODE_MAX_BMP\n    65535\n\n    See Also\n    --------\n    UNICODE_MAX\n",
	"unshift": "\nunshift( collection, ...items )\n    Adds one or more elements to the beginning of a collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    items: ...any\n        Items to add.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = unshift( arr, 6.0, 7.0 )\n    [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = unshift( arr, 3.0, 4.0 )\n    <Float64Array>[ 3.0, 4.0, 1.0, 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 1, '0': 1.0 };\n    > arr = unshift( arr, 2.0, 3.0 )\n    { 'length': 3, '0': 2.0, '1': 3.0, '2': 1.0 }\n\n    See Also\n    --------\n    pop, push, shift\n",
	"until": "\nuntil( predicate, fcn[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to stop invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i >= 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > until( predicate, beep )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhile, untilAsync, untilEach, whilst\n",
	"untilAsync": "\nuntilAsync( predicate, fcn, done[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is falsy, the function invokes `fcn`; otherwise, the\n    function invokes the `done` callback.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i, clbk ) { clbk( null, i >= 5 ); };\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > untilAsync( predicate, fcn, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhileAsync, until, whileAsync\n",
	"untilEach": "\nuntilEach( collection, predicate, fcn[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > untilEach( arr, predicate, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    untilEachRight, whileEach\n",
	"untilEachRight": "\nuntilEachRight( collection, predicate, fcn[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > untilEachRight( arr, predicate, logger )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n\n    See Also\n    --------\n    untilEach, whileEachRight\n",
	"unzip": "\nunzip( arr[, idx] )\n    Unzips a zipped array (i.e., a nested array of tuples).\n\n    Parameters\n    ----------\n    arr: Array\n        Zipped array.\n\n    idx: Array<number> (optional)\n        Array of indices specifying which tuple elements to unzip.\n\n    Returns\n    -------\n    out: Array\n        Array of unzipped arrays.\n\n    Examples\n    --------\n    // Basic usage:\n    > var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n    > var out = unzip( arr )\n    [ [ 1, 2 ], [ 'a', 'b' ], [ 3, 4 ] ]\n\n    // Provide indices:\n    > arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n    > out = unzip( arr, [ 0, 2 ] )\n    [ [ 1, 2 ], [ 3, 4 ] ]\n\n    See Also\n    --------\n    zip\n",
	"uppercase": "\nuppercase( str )\n    Converts a `string` to uppercase.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Uppercase string.\n\n    Examples\n    --------\n    > var out = uppercase( 'bEEp' )\n    'BEEP'\n\n    See Also\n    --------\n    capitalize, lowercase\n",
	"uppercaseKeys": "\nuppercaseKeys( obj )\n    Converts each object key to uppercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = uppercaseKeys( obj )\n    { 'A': 1, 'B': 2 }\n\n    See Also\n    --------\n    capitalizeKeys, lowercaseKeys\n",
	"US_STATES_ABBR": "\nUS_STATES_ABBR()\n    Returns a list of US state two-letter abbreviations in alphabetical order\n    according to state name.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state two-letter abbreviations.\n\n    Examples\n    --------\n    > var list = US_STATES_ABBR()\n    [ 'AL', 'AK', 'AZ', 'AR', ... ]\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES\n",
	"US_STATES_CAPITALS": "\nUS_STATES_CAPITALS()\n    Returns a list of US state capitals in alphabetical order according to state\n    name.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state capitals.\n\n    Examples\n    --------\n    > var list = US_STATES_CAPITALS()\n    [ 'Montgomery', 'Juneau', 'Phoenix', ... ]\n\n    See Also\n    --------\n    US_STATES_ABBR, US_STATES_CAPITALS_NAMES, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n",
	"US_STATES_CAPITALS_NAMES": "\nUS_STATES_CAPITALS_NAMES()\n    Returns an object mapping US state capitals to state names.\n\n    Returns\n    -------\n    out: Object\n        An object mapping US state capitals to state names.\n\n    Examples\n    --------\n    > var out = US_STATES_CAPITALS_NAMES()\n    { 'Montgomery': 'Alabama', 'Juneau': 'Alaska', ... }\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n",
	"US_STATES_NAMES": "\nUS_STATES_NAMES()\n    Returns a list of US state names in alphabetical order.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state names.\n\n    Examples\n    --------\n    > var list = US_STATES_NAMES()\n    [ 'Alabama', 'Alaska', 'Arizona', ... ]\n\n    See Also\n    --------\n    US_STATES_ABBR, US_STATES_CAPITALS, US_STATES_CAPITALS_NAMES, US_STATES_NAMES_CAPITALS\n",
	"US_STATES_NAMES_CAPITALS": "\nUS_STATES_NAMES_CAPITALS()\n    Returns an object mapping US state names to state capitals.\n\n    Returns\n    -------\n    out: Object\n        An object mapping US state names to state capitals.\n\n    Examples\n    --------\n    > var out = US_STATES_NAMES_CAPITALS()\n    { 'Alabama': 'Montgomery', 'Alaska': 'Juneau', ... }\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n",
	"utf16ToUTF8Array": "\nutf16ToUTF8Array( str )\n    Converts a UTF-16 encoded string to an array of integers using UTF-8\n    encoding.\n\n    The following byte sequences are used to represent a character. The sequence\n    depends on the code point:\n\n        0x00000000 - 0x0000007F:\n            0xxxxxxx\n\n        0x00000080 - 0x000007FF:\n            110xxxxx 10xxxxxx\n\n        0x00000800 - 0x0000FFFF:\n            1110xxxx 10xxxxxx 10xxxxxx\n\n        0x00010000 - 0x001FFFFF:\n            11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n    The `x` bit positions correspond to code point bits.\n\n    Only the shortest possible multi-byte sequence which can represent a code\n    point is used.\n\n    Parameters\n    ----------\n    str: string\n        UTF-16 encoded string.\n\n    Returns\n    -------\n    out: Array\n        Array of integers.\n\n    Examples\n    --------\n    > var str = '☃';\n    > var out = utf16ToUTF8Array( str )\n    [ 226, 152, 131 ]\n\n",
	"waterfall": "\nwaterfall( fcns, clbk[, thisArg] )\n    Executes functions in series, passing the results of one function as\n    arguments to the next function.\n\n    The last argument applied to each waterfall function is a callback. The\n    callback should be invoked upon a series function completion. The first\n    argument is reserved as an error argument (which can be `null`). Any results\n    which should be passed to the next function in the series should be provided\n    beginning with the second argument.\n\n    If any function calls the provided callback with a truthy `error` argument,\n    the waterfall suspends execution and immediately calls the completion\n    callback for subsequent error handling.\n\n    Execution is *not* guaranteed to be asynchronous. To ensure asynchrony, wrap\n    the completion callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcns: Array<Function>\n        Array of functions.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Function context.\n\n    Examples\n    --------\n    > function foo( next ) { next( null, 'beep' ); };\n    > function bar( str, next ) { console.log( str ); next(); };\n    > function done( error ) { if ( error ) { throw error; } };\n    > var fcns = [ foo, bar ];\n    > waterfall( fcns, done );\n\n\nwaterfall.factory( fcns, clbk[, thisArg] )\n    Returns a reusable waterfall function.\n\n    Parameters\n    ----------\n    fcns: Array<Function>\n        Array of functions.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    fcn: Function\n        Waterfall function.\n\n    Examples\n    --------\n    > function foo( next ) { next( null, 'beep' ); };\n    > function bar( str, next ) { console.log( str ); next(); };\n    > function done( error ) { if ( error ) { throw error; } };\n    > var fcns = [ foo, bar ];\n    > var waterfall = waterfall.factory( fcns, done );\n    > waterfall();\n    > waterfall();\n    > waterfall();\n\n",
	"whilst": "\nwhilst( predicate, fcn[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i < 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > whilst( predicate, beep )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhile, until, whileAsync, whileEach\n",
	"whileAsync": "\nwhileAsync( predicate, fcn, done[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is truthy, the function invokes `fcn`; otherwise, the\n    function invokes the `done` callback.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i, clbk ) { clbk( null, i < 5 ); };\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > whileAsync( predicate, fcn, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhileAsync, untilAsync, whilst\n",
	"whileEach": "\nwhileEach( collection, predicate, fcn[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > whileEach( arr, predicate, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    untilEach, whileEachRight\n",
	"whileEachRight": "\nwhileEachRight( collection, predicate, fcn[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > whileEachRight( arr, predicate, logger )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n\n    See Also\n    --------\n    whileEach, untilEachRight\n",
	"zip": "\nzip( arr[, options] )\n    Generates array tuples from input arrays.\n\n    Parameters\n    ----------\n    arr: ...Array\n        Input arrays to be zipped.\n\n    options: Object (optional)\n        Options.\n\n    options.trunc: boolean (optional)\n        Boolean indicating whether to truncate arrays longer than the shortest\n        input array. Default: `true`.\n\n    options.fill: any (optional)\n        Fill value used for arrays of unequal length. Default: `null`.\n\n    options.arrays: boolean (optional)\n        Boolean indicating whether an input array should be interpreted as an\n        array of arrays to be zipped. Default: `false`.\n\n    Returns\n    -------\n    out: Array\n        Array of arrays.\n\n    Examples\n    --------\n    // Basic usage:\n    > var out = zip( [ 1, 2 ], [ 'a', 'b' ] )\n    [ [ 1, 'a' ], [ 2, 'b' ] ]\n\n    // Turn off truncation:\n    > var opts = { 'trunc': false };\n    > out = zip( [ 1, 2, 3 ], [ 'a', 'b' ], opts )\n    [ [ 1, 'a' ], [ 2, 'b' ], [ 3, null ] ]\n\n    See Also\n    --------\n    unzip\n",
	"ztest": "\nztest( x, sigma[, options] )\n    Computes a one-sample z-test.\n\n    The function performs a one-sample z-test for the null hypothesis that the\n    data in array or typed array `x` is drawn from a normal distribution with\n    mean zero and standard deviation `sigma`.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Data array.\n\n    sigma: number\n        Known standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Indicates whether the alternative hypothesis is that the mean of `x` is\n        larger than `mu` (`greater`), smaller than `mu` (`less`) or equal to\n        `mu` (`two-sided`). Default: `'two-sided'`.\n\n    options.mu: number (optional)\n        Hypothesized true mean under the null hypothesis. Set this option to\n        test whether the data comes from a distribution with the specified `mu`.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        P-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for mean.\n\n    out.nullValue: number\n        Assumed mean value under H0.\n\n    out.sd: number\n        Standard error.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test (`One-Sample z-test`).\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // One-sample z-test:\n    > var rnorm = base.random.normal.factory( 0.0, 2.0, { 'seed': 212 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ... }\n    > var out = ztest( x, 2.0 )\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: ~0.180,\n        statistic: ~-1.34,\n        ci: [ ~-0.66, ~0.124 ],\n        ...\n    }\n\n    // Choose custom significance level and print output:\n    > arr = [ 2, 4, 3, 1, 0 ];\n    > out = ztest( arr, 2.0, { 'alpha': 0.01 });\n    > table = out.print()\n    One-sample z-test\n\n    Alternative hypothesis: True mean is not equal to 0\n\n        pValue: 0.0253\n        statistic: 2.2361\n        99% confidence interval: [-0.3039,4.3039]\n\n    Test Decision: Fail to reject null in favor of alternative at 1%\n    significance level\n\n\n    // Test for a mean equal to five:\n    > var arr = [ 4, 4, 6, 6, 5 ];\n    > out = ztest( arr, 1.0, { 'mu': 5 })\n    {\n        rejected: false,\n        pValue: 1,\n        statistic: 0,\n        ci: [ ~4.123, ~5.877 ],\n        // ...\n    }\n\n    // Perform one-sided tests:\n    > arr = [ 4, 4, 6, 6, 5 ];\n    > out = ztest( arr, 1.0, { 'alternative': 'less' });\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: 1,\n        statistic: 11.180339887498949,\n        ci: [ -Infinity, 5.735600904580115 ],\n        // ...\n    }\n    > out = ztest( arr, 1.0, { 'alternative': 'greater' });\n    {\n        alpha: 0.05,\n        rejected: true,\n        pValue: 0,\n        statistic: 11.180339887498949,\n        ci: [ 4.264399095419885, Infinity ],\n        //...\n    }\n\n    See Also\n    --------\n    ztest2\n",
	"ztest2": "\nztest2( x, y, sigmax, sigmay[, options] )\n    Computes a two-sample z-test.\n\n    By default, the function performs a two-sample z-test for the null\n    hypothesis that the data in arrays or typed arrays `x` and `y` is\n    independently drawn from normal distributions with equal means and known\n    standard deviations `sigmax` and `sigmay`.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    sigmax: number\n        Known standard deviation of first group.\n\n    sigmay: number\n        Known standard deviation of second group.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.difference: number (optional)\n        Number denoting the difference in means under the null hypothesis.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        P-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed difference in means under H0.\n\n    out.xmean: number\n        Sample mean of `x`.\n\n    out.ymean: number\n        Sample mean of `y`.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test.\n\n    out.print: function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Drawn from Normal(0,2):\n    > var x = [ -0.21, 0.14, 1.65, 2.11, -1.86, -0.29, 1.48, 0.81, 0.86, 1.04 ];\n    // Drawn from Normal(1,2):\n    > var y = [ -1.53, -2.93, 2.34, -1.15, 2.7, -0.12, 4.22, 1.66, 3.43, 4.66 ];\n    > var out = ztest2( x, y, 2.0, 2.0 )\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: ~0.398,\n        statistic: ~-0.844\n        ci: [ ~-2.508, ~0.988 ],\n        alternative: 'two-sided',\n        method: 'Two-sample z-test',\n        nullValue: 0,\n        xmean: ~0.573,\n        ymean: ~1.328\n    }\n\n    // Print table output:\n    > var table = out.print();\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.3986\n        statistic: -0.8441\n        95% confidence interval: [-2.508,0.998]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose a different significance level than `0.05`:\n    > out = ztest2( x, y, 2.0, 2.0, { 'alpha': 0.4 });\n    > table = out.print();\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.3986\n        statistic: -0.8441\n        60% confidence interval: [-1.5078,-0.0022]\n\n    Test Decision: Reject null in favor of alternative at 40% significance level\n\n    // Perform one-sided tests:\n    > out = ztest2( x, y, 2.0, 2.0, { 'alternative': 'less' });\n    > table = out.print()\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is less than 0\n\n        pValue: 0.1993\n        statistic: -0.8441\n        95% confidence interval: [-Infinity,0.7162]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n\n    > out = ztest2( x, y, 2.0, 2.0, { 'alternative': 'greater' });\n    > table = out.print()\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is greater than 0\n\n        pValue: 0.8007\n        statistic: -0.8441\n        95% confidence interval: [-2.2262,Infinity]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Test for a difference in means besides zero:\n    > var rnorm = base.random.normal.factory({ 'seed': 372 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm( 2.0, 1.0 );\n    ... }\n    > y = new Array( 100 );\n    ... for ( i = 0; i < x.length; i++ ) {\n    ...     y[ i ] = rnorm( 0.0, 2.0 );\n    ... }\n    > out = ztest2( x, y, 1.0, 2.0, { 'difference': 2.0 })\n    {\n        rejected: false,\n        pValue: ~0.35,\n        statistic: ~-0.935\n        ci: [ ~1.353, ~2.229 ],\n        // ...\n    }\n\n    See Also\n    --------\n    ztest\n"
};

},{}],152:[function(require,module,exports){
'use strict';

// MODULES //

var copy = require( '@stdlib/utils/copy' );
var HELP = require( './db.js' );


// MAIN //

/**
* Returns REPL help texts.
*
* @returns {Object} docs
*
* @example
* var o = help();
* // returns {...}
*/
function help() {
	return copy( HELP );
} // end FUNCTION help()


// EXPORTS //

module.exports = help;

},{"./db.js":151,"@stdlib/utils/copy":186}],153:[function(require,module,exports){
'use strict';

/**
* REPL help texts.
*
* @module @stdlib/repl/help
*
* @example
* var help = require( '@stdlib/repl/help' );
*
* var o = help();
* // returns {...}
*/

// MODULES //

var help = require( './help.js' );


// EXPORTS //

module.exports = help;

},{"./help.js":152}],154:[function(require,module,exports){
module.exports={
  "name": "@stdlib/repl/help",
  "version": "0.0.0",
  "description": "REPL help texts.",
  "author": {
    "name": "The Stdlib Authors",
    "url": "https://github.com/stdlib-js/stdlib/graphs/contributors"
  },
  "contributors": [
    {
      "name": "The Stdlib Authors",
      "url": "https://github.com/stdlib-js/stdlib/graphs/contributors"
    }
  ],
  "scripts": {},
  "main": "./lib",
  "repository": {
    "type": "git",
    "url": "git://github.com/stdlib-js/stdlib.git"
  },
  "homepage": "https://github.com/stdlib-js/stdlib",
  "keywords": [
    "stdlib",
    "repl",
    "docs",
    "help",
    "documentation",
    "man",
    "manual"
  ],
  "bugs": {
    "url": "https://github.com/stdlib-js/stdlib/issues"
  },
  "dependencies": {},
  "devDependencies": {},
  "engines": {
    "node": ">=0.10.0",
    "npm": ">2.7.0"
  },
  "license": "Apache-2.0"
}

},{}],155:[function(require,module,exports){
'use strict';

// MODULES //

var debug = require( 'debug' )( 'transform-stream' );


// MAIN //

/**
* Implements the `_transform` method as a pass through.
*
* @private
* @param {(Buffer|string)} chunk - streamed chunk
* @param {string} encoding - Buffer encoding
* @param {Callback} clbk - callback to invoke after transforming the streamed chunk
*/
function _transform( chunk, encoding, clbk ) {
	debug( 'Received a new chunk. Chunk: %s. Encoding: %s.', chunk.toString(), encoding );
	clbk( null, chunk );
} // end FUNCTION _transform()


// EXPORTS //

module.exports = _transform;

},{"debug":235}],156:[function(require,module,exports){
'use strict';

// MODULES //

var debug = require( 'debug' )( 'transform-stream' );
var Transform = require( 'readable-stream' ).Transform;
var copy = require( '@stdlib/utils/copy' );
var DEFAULTS = require( './defaults.json' );
var validate = require( './validate.js' );
var destroy = require( './destroy.js' );
var _transform = require( './_transform.js' );


// MAIN //

/**
* Transform stream constructor factory.
*
* @param {Options} [options] - stream options
* @param {Function} [options.transform] - callback to invoke upon receiving a new chunk
* @param {Function} [options.flush] - callback to invoke after receiving all chunks and prior to the stream closing
* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing
* @throws {TypeError} must provide valid options
* @returns {Function} Transform stream constructor
*
* @example
* var stdout = require( '@stdlib/streams/base/stdout' );
*
* function transform( chunk, enc, clbk ) {
*     clbk( null, chunk.toString()+'\n' );
* }
*
* var opts = {
*     'transform': transform
* };
*
* var TransformStream = ctor( opts );
*
* var stream = new TransformStream();
*
* stream.pipe( stdout );
*
* stream.write( '1' );
* stream.write( '2' );
* stream.write( '3' );
*
* stream.end();
* // => '1\n2\n3\n'
*/
function ctor( options ) {
	var transform;
	var _opts;
	var err;
	_opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( _opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( _opts.transform ) {
		transform = _opts.transform;
	} else {
		transform = _transform;
	}
	/**
	* Transform stream constructor.
	*
	* @private
	* @constructor
	* @param {Options} [options] - stream options
	* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode
	* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
	* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
	* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
	* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing
	* @throws {TypeError} must provide valid options
	* @returns {TransformStream} transform stream
	*
	* @example
	* var stdout = require( '@stdlib/streams/base/stdout' );
	*
	* var stream = new TransformStream();
	*
	* stream.pipe( stdout );
	*
	* stream.write( '1' );
	* stream.write( '2' );
	* stream.write( '3' );
	*
	* stream.end();
	* // => '1\n2\n3\n'
	*/
	function TransformStream( options ) {
		var opts;
		var err;
		if ( !( this instanceof TransformStream ) ) {
			if ( arguments.length ) {
				return new TransformStream( options );
			}
			return new TransformStream();
		}
		opts = copy( _opts );
		if ( arguments.length ) {
			err = validate( opts, options );
			if ( err ) {
				throw err;
			}
		}
		debug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );
		Transform.call( this, opts );
		this._destroyed = false;
		return this;
	} // end FUNCTION TransformStream()

	/*
	* Create a prototype which inherits from the parent prototype.
	*/
	TransformStream.prototype = Object.create( Transform.prototype );

	/*
	* Set the constructor.
	*/
	TransformStream.prototype.constructor = TransformStream;

	/**
	* Implements the `_transform` method.
	*
	* @private
	* @memberof TransformStream.prototype
	* @function _transform
	* @param {(Buffer|string)} chunk - streamed chunk
	* @param {string} encoding - Buffer encoding
	* @param {Callback} clbk - callback to invoke after transforming the streamed chunk
	*/
	TransformStream.prototype._transform = _transform;

	if ( _opts.flush ) {
		/**
		* Implements the `_flush` method.
		*
		* @private
		* @memberof TransformStream.prototype
		* @function _flush
		* @param {Callback} callback to invoke after performing flush tasks
		*/
		TransformStream.prototype.flush = _opts.flush;
	}

	/**
	* Gracefully destroys a stream, providing backwards compatibility.
	*
	* @private
	* @memberof TransformStream.prototype
	* @function destroy
	* @param {Object} [error] - optional error message
	* @returns {TransformStream} stream instance
	*/
	TransformStream.prototype.destroy = destroy;

	return TransformStream;
} // end FUNCTION ctor()


// EXPORTS //

module.exports = ctor;

},{"./_transform.js":155,"./defaults.json":157,"./destroy.js":158,"./validate.js":163,"@stdlib/utils/copy":186,"debug":235,"readable-stream":257}],157:[function(require,module,exports){
module.exports={
	"objectMode": false,
	"encoding": null,
	"allowHalfOpen": false,
	"decodeStrings": true
}

},{}],158:[function(require,module,exports){
(function (process){
'use strict';

// MODULES //

var debug = require( 'debug' )( 'transform-stream' );


// MAIN //

/**
* Gracefully destroys a stream, providing backwards compatibility.
*
* @private
* @param {Object} [error] - optional error message
* @returns {Stream} stream instance
*/
function destroy( error ) {
	/* jshint validthis: true */ // TODO: eslint
	var self;
	if ( this._destroyed ) {
		debug( 'Attempted to destroy an already destroyed stream.' );
		return;
	}
	self = this;
	this._destroyed = true;

	// TODO: replace with polyfill
	process.nextTick( close );

	return this;

	/**
	* Closes a stream.
	*
	* @private
	*/
	function close() {
		if ( error ) {
			debug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );
			self.emit( 'error', error );
		}
		debug( 'Closing the stream...' );
		self.emit( 'close' );
	}
} // end FUNCTION destroy()


// EXPORTS //

module.exports = destroy;

}).call(this,require('_process'))
},{"_process":232,"debug":235}],159:[function(require,module,exports){
'use strict';

// MODULES //

var copy = require( '@stdlib/utils/copy' );
var Stream = require( './stream.js' );


// MAIN //

/**
* Creates a reusable transform stream factory.
*
* @param {Options} [options] - stream options
* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing
* @returns {Function} transform stream factory
*
* @example
* function transform( chunk, enc, clbk ) {
*     clbk( null, chunk.toString()+'\n' );
* }
*
* var opts = {
*     'objectMode': true,
*     'encoding': 'utf8',
*     'highWaterMark': 64,
*     'decodeStrings': false
* };
*
* var factory = streamFactory( opts );
*
* // Create 10 identically configured streams...
* var streams = [];
* var i;
* for ( i = 0; i < 10; i++ ) {
*     streams.push( factory( transform ) );
* }
*/
function streamFactory( options ) {
	var opts;
	if ( arguments.length ) {
		opts = copy( options );
	} else {
		opts = {};
	}
	/**
	* Creates a transform stream.
	*
	* @private
	* @param {Function} transform - callback to invoke upon receiving a new chunk
	* @param {Function} [flush] - callback to invoke after receiving all chunks and prior to the stream closing
	* @throws {TypeError} must provide valid options
	* @throws {TypeError} transform callback must be a function
	* @throws {TypeError} flush callback must be a function
	* @returns {TransformStream} transform stream
	*/
	return function createStream( transform, flush ) {
		opts.transform = transform;
		if ( arguments.length > 1 ) {
			opts.flush = flush;
		} else {
			delete opts.flush; // clear any previous `flush`
		}
		return new Stream( opts );
	};
} // end FUNCTION streamFactory()


// EXPORTS //

module.exports = streamFactory;

},{"./stream.js":162,"@stdlib/utils/copy":186}],160:[function(require,module,exports){
'use strict';

/**
* Transform stream.
*
* @module @stdlib/streams/utils/transform
*
* @example
* var stdout = require( '@stdlib/streams/base/stdout' );
* var transformStream = require( '@stdlib/streams/utils/transform' );
*
* function transform( chunk, enc, clbk ) {
*     clbk( null, chunk.toString()+'\n' );
* }
*
* var opts = {
*     'transform': transform
* };
* var stream = transformStream( opts );
*
* stream.pipe( stdout );
*
* stream.write( '1' );
* stream.write( '2' );
* stream.write( '3' );
*
* stream.end();
* // => '1\n2\n3\n'
*
*
* @example
* var transformStream = require( '@stdlib/streams/utils/transform' );
*
* function transform( chunk, enc, clbk ) {
*     clbk( null, chunk.toString()+'\n' );
* }
*
* var opts = {
*     'objectMode': true,
*     'encoding': 'utf8',
*     'highWaterMark': 64,
*     'decodeStrings': false
* };
*
* var factory = transformStream.factory( opts );
*
* // Create 10 identically configured streams...
* var streams = [];
* var i;
* for ( i = 0; i < 10; i++ ) {
*     streams.push( factory( transform ) );
* }
*
*
* @example
* var stdout = require( '@stdlib/streams/base/stdout' );
* var transformStream = require( '@stdlib/streams/utils/transform' );
*
* function stringify( chunk, enc, clbk ) {
*     clbk( null, JSON.stringify( chunk ) );
* }
*
* function newline( chunk, enc, clbk ) {
*     clbk( null, chunk+'\n' );
* }
*
* var s1 = transformStream.objectMode({
*     'transform': stringify
* });
*
* var s2 = transformStream.objectMode({
*     'transform': newline
* });
*
* s1.pipe( s2 ).pipe( stdout );
*
* s1.write( {'value': 'a'} );
* s1.write( {'value': 'b'} );
* s1.write( {'value': 'c'} );
*
* s1.end();
* // => '{"value":"a"}\n{"value":"b"}\n{"value":"c"}\n'
*
*
* @example
* var stdout = require( '@stdlib/streams/base/stdout' );
* var transformStream = require( '@stdlib/streams/utils/transform' );
*
* function transform( chunk, enc, clbk ) {
*     clbk( null, chunk.toString()+'\n' );
* }
*
* var opts = {
*     'transform': transform
* };
*
* var Stream = transformStream.ctor( opts );
*
* var stream = new Stream();
*
* stream.pipe( stdout );
*
* stream.write( '1' );
* stream.write( '2' );
* stream.write( '3' );
*
* stream.end();
* // => '1\n2\n3\n'
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var transform = require( './stream.js' );
var objectMode = require( './object_mode.js' );
var factory = require( './factory.js' );
var ctor = require( './ctor.js' );


// MAIN //

setReadOnly( transform, 'objectMode', objectMode );
setReadOnly( transform, 'factory', factory );
setReadOnly( transform, 'ctor', ctor );


// EXPORTS //

module.exports = transform;

},{"./ctor.js":156,"./factory.js":159,"./object_mode.js":161,"./stream.js":162,"@stdlib/utils/define-read-only-property":189}],161:[function(require,module,exports){
'use strict';

// MODULES //

var Stream = require( './stream.js' );


// MAIN //

/**
* Returns a transform stream with `objectMode` set to `true`.
*
* @param {Options} [options] - stream options
* @param {Function} [options.transform] - callback to invoke upon receiving a new chunk
* @param {Function} [options.flush] - callback to invoke after receiving all chunks and prior to the stream closing
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing
* @throws {TypeError} must provide valid options
* @returns {TransformStream} transform stream
*
* @example
* var stdout = require( '@stdlib/streams/base/stdout' );
*
* function stringify( chunk, enc, clbk ) {
*     clbk( null, JSON.stringify( chunk ) );
* }
*
* function newline( chunk, enc, clbk ) {
*     clbk( null, chunk+'\n' );
* }
*
* var s1 = objectMode({
*     'transform': stringify
* });
*
* var s2 = objectMode({
*     'transform': newline
* });
*
* s1.pipe( s2 ).pipe( stdout );
*
* s1.write( {'value': 'a'} );
* s1.write( {'value': 'b'} );
* s1.write( {'value': 'c'} );
*
* s1.end();
* // => '{"value":"a"}\n{"value":"b"}\n{"value":"c"}\n'
*/
function objectMode( options ) {
	var opts;
	if ( arguments.length ) {
		opts = options;
	} else {
		opts = {};
	}
	opts.objectMode = true;
	return new Stream( opts );
} // end FUNCTION objectMode()


// EXPORTS //

module.exports = objectMode;

},{"./stream.js":162}],162:[function(require,module,exports){
'use strict';

// MODULES //

var debug = require( 'debug' )( 'transform-stream' );
var Transform = require( 'readable-stream' ).Transform;
var copy = require( '@stdlib/utils/copy' );
var DEFAULTS = require( './defaults.json' );
var validate = require( './validate.js' );
var destroy = require( './destroy.js' );
var _transform = require( './_transform.js' );


// MAIN //

/**
* Transform stream constructor.
*
* @constructor
* @param {Options} [options] - stream options
* @param {Function} [options.transform] - callback to invoke upon receiving a new chunk
* @param {Function} [options.flush] - callback to invoke after receiving all chunks and prior to the stream closing
* @param {boolean} [options.objectMode=false] - specifies whether stream should operate in object mode
* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing
* @throws {TypeError} must provide valid options
* @returns {TransformStream} transform stream
*
* @example
* var stdout = require( '@stdlib/streams/base/stdout' );
*
* function transform( chunk, enc, clbk ) {
*     clbk( null, chunk.toString()+'\n' );
* }
*
* var opts = {
*     'transform': transform
* };
* var stream = new TransformStream( opts );
*
* stream.pipe( stdout );
*
* stream.write( '1' );
* stream.write( '2' );
* stream.write( '3' );
*
* stream.end();
* // => '1\n2\n3\n'
*/
function TransformStream( options ) {
	var opts;
	var err;
	if ( !( this instanceof TransformStream ) ) {
		if ( arguments.length ) {
			return new TransformStream( options );
		}
		return new TransformStream();
	}
	opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );
	Transform.call( this, opts );
	this._destroyed = false;
	if ( opts.transform ) {
		this._transform = opts.transform;
	} else {
		this._transform = _transform;
	}
	if ( opts.flush ) {
		this._flush = opts.flush;
	}
	return this;
} // end FUNCTION TransformStream()

/*
* Create a prototype which inherits from the parent prototype.
*/
TransformStream.prototype = Object.create( Transform.prototype );

/*
* Set the constructor.
*/
TransformStream.prototype.constructor = TransformStream;

/**
* Gracefully destroys a stream, providing backwards compatibility.
*
* @memberof TransformStream.prototype
* @function destroy
* @param {Object} [error] - optional error message
* @returns {TransformStream} stream instance
*/
TransformStream.prototype.destroy = destroy;


// EXPORTS //

module.exports = TransformStream;

},{"./_transform.js":155,"./defaults.json":157,"./destroy.js":158,"./validate.js":163,"@stdlib/utils/copy":186,"debug":235,"readable-stream":257}],163:[function(require,module,exports){
'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {Function} [options.transform] - callback to invoke upon receiving a new chunk
* @param {Function} [options.flush] - callback to invoke after receiving all chunks and prior to the stream closing
* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode
* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`
* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`
* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends
* @param {boolean} [options.decodeStrings] - specifies whether to decode `strings` into `Buffer` objects when writing
* @returns {(Error|null)} null or an error object
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'transform' ) ) {
		opts.transform = options.transform;
		if ( !isFunction( opts.transform ) ) {
			return new TypeError( 'invalid option. `transform` option must be a function. Option: `' + opts.transform + '`.' );
		}
	}
	if ( hasOwnProp( options, 'flush' ) ) {
		opts.flush = options.flush;
		if ( !isFunction( opts.flush ) ) {
			return new TypeError( 'invalid option. `flush` option must be a function. Option: `' + opts.flush + '`.' );
		}
	}
	if ( hasOwnProp( options, 'objectMode' ) ) {
		opts.objectMode = options.objectMode;
		if ( !isBoolean( opts.objectMode ) ) {
			return new TypeError( 'invalid option. `objectMode` option must be a primitive boolean. Option: `' + opts.objectMode + '`.' );
		}
	}
	if ( hasOwnProp( options, 'encoding' ) ) {
		opts.encoding = options.encoding;
		if ( !isString( opts.encoding ) ) {
			return new TypeError( 'invalid option. `encoding` option must be a primitive string. Option: `' + opts.encoding + '`.' );
		}
	}
	if ( hasOwnProp( options, 'allowHalfOpen' ) ) {
		opts.allowHalfOpen = options.allowHalfOpen;
		if ( !isBoolean( opts.allowHalfOpen ) ) {
			return new TypeError( 'invalid option. `allowHalfOpen` option must be a primitive boolean. Option: `' + opts.allowHalfOpen + '`.' );
		}
	}
	if ( hasOwnProp( options, 'highWaterMark' ) ) {
		opts.highWaterMark = options.highWaterMark;
		if ( !isNonNegative( opts.highWaterMark ) ) {
			return new TypeError( 'invalid option. `highWaterMark` option must be a nonnegative number. Option: `' + opts.highWaterMark + '`.' );
		}
	}
	if ( hasOwnProp( options, 'decodeStrings' ) ) {
		opts.decodeStrings = options.decodeStrings;
		if ( !isBoolean( opts.decodeStrings ) ) {
			return new TypeError( 'invalid option. `decodeStrings` option must be a primitive boolean. Option: `' + opts.decodeStrings + '`.' );
		}
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;

},{"@stdlib/assert/has-own-property":2,"@stdlib/assert/is-boolean":10,"@stdlib/assert/is-function":20,"@stdlib/assert/is-nonnegative-number":44,"@stdlib/assert/is-plain-object":59,"@stdlib/assert/is-string":71}],164:[function(require,module,exports){
'use strict';

/**
* Maximum Unicode code point in the Basic Multilingual Plane (BMP).
*
* @module @stdlib/string/constants/unicode-max-bmp
* @type {integer32}
*
* @example
* var UNICODE_MAX_BMP = require( '@stdlib/string/constants/unicode-max-bmp' );
* // returns 65535
*/


// MAIN //

/**
* Maximum Unicode code point in the Basic Multilingual Plane (BMP).
*
* @constant
* @type {integer32}
* @see [Unicode]{@link https://en.wikipedia.org/wiki/Unicode}
* @default 65535
*/
var UNICODE_MAX_BMP = 0xFFFF|0; // asm type annotation


// EXPORTS //

module.exports = UNICODE_MAX_BMP;

},{}],165:[function(require,module,exports){
'use strict';

/**
* Maximum Unicode code point.
*
* @module @stdlib/string/constants/unicode-max
* @type {integer32}
*
* @example
* var UNICODE_MAX = require( '@stdlib/string/constants/unicode-max' );
* // returns 1114111
*/


// MAIN //

/**
* Maximum Unicode code point.
*
* @constant
* @type {integer32}
* @see [Unicode]{@link https://en.wikipedia.org/wiki/Unicode}
* @default 1114111
*/
var UNICODE_MAX = 0x10FFFF|0; // asm type annotation


// EXPORTS //

module.exports = UNICODE_MAX;

},{}],166:[function(require,module,exports){
'use strict';

/**
* Create a string from a sequence of Unicode code points.
*
* @module @stdlib/string/from-code-point
*
* @example
* var fromCodePoint = require( '@stdlib/string/from-code-point' );
*
* var str = fromCodePoint( 9731 );
* // returns '☃'
*/

// MODULES //

var fromCodePoint = require( './main.js' );


// EXPORTS //

module.exports = fromCodePoint;

},{"./main.js":167}],167:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var MAX_CODE_POINT = require( '@stdlib/string/constants/unicode-max' );
var MAX_BMP_CODE_POINT = require( '@stdlib/string/constants/unicode-max-bmp' );


// VARIABLES //

var fromCharCode = String.fromCharCode;

// Factor to rescale a code point from a supplementary plane:
var Ox10000 = 0x10000|0; // 65536

// Factor added to obtain a high surrogate:
var OxD800 = 0xD800|0; // 55296

// Factor added to obtain a low surrogate:
var OxDC00 = 0xDC00|0; // 56320

// 10-bit mask: 2^10-1 = 1023 => 0x3ff => 00000000 00000000 00000011 11111111
var Ox3FF = 1023|0;


// MAIN //

/**
* Creates a string from a sequence of Unicode code points.
*
* ## Notes
*
* * UTF-16 encoding uses one 16-bit unit for non-surrogates (U+0000 to U+D7FF and U+E000 to U+FFFF).
*
* * UTF-16 encoding uses two 16-bit units (surrogate pairs) for U+10000 to U+10FFFF and encodes U+10000-U+10FFFF by subtracting 0x10000 from the code point, expressing the result as a 20-bit binary, and splitting the 20 bits of 0x0-0xFFFFF as upper and lower 10-bits. The respective 10-bits are stored in two 16-bit words: a high and a low surrogate.
*
*
* @param {...NonNegativeInteger} args - sequence of code points
* @throws {Error} must provide either an array-like object of code points or one or more code points as separate arguments
* @throws {TypeError} a code point must be a nonnegative integer
* @throws {RangeError} must provide a valid Unicode code point
* @returns {string} created string
*
* @example
* var str = fromCodePoint( 9731 );
* // returns '☃'
*/
function fromCodePoint( args ) {
	var len;
	var str;
	var arr;
	var low;
	var hi;
	var pt;
	var i;

	len = arguments.length;
	if ( len === 1 && isArrayLikeObject( args ) ) {
		arr = arguments[ 0 ];
		len = arr.length;
	} else {
		arr = new Array( len );
		for ( i = 0; i < len; i++ ) {
			arr[ i ] = arguments[ i ];
		}
	}
	if ( len === 0 ) {
		throw new Error( 'insufficient input arguments. Must provide either an array of code points or one or more code points as separate arguments.' );
	}
	str = '';
	for ( i = 0; i < len; i++ ) {
		pt = arr[ i ];
		if ( !isNonNegativeInteger( pt ) ) {
			throw new TypeError( 'invalid input argument. Must provide valid code points (nonnegative integers). Value: `'+pt+'`.' );
		}
		if ( pt > MAX_CODE_POINT ) {
			throw new RangeError( 'invalid input argument. Must provide a valid code point (cannot exceed max). Value: `'+pt+'`.' );
		}
		if ( pt <= MAX_BMP_CODE_POINT ) {
			str += fromCharCode( pt );
		} else {
			// Code point from a supplementary plane. Split into two 16-bit code units (surrogate pair).
			pt -= Ox10000;
			hi = (pt >> 10) + OxD800;
			low = (pt & Ox3FF) + OxDC00;
			str += fromCharCode( hi, low );
		}
	}
	return str;
} // end FUNCTION fromCodePoint()


// EXPORTS //

module.exports = fromCodePoint;

},{"@stdlib/assert/is-array-like-object":3,"@stdlib/assert/is-nonnegative-integer":40,"@stdlib/string/constants/unicode-max":165,"@stdlib/string/constants/unicode-max-bmp":164}],168:[function(require,module,exports){
'use strict';

/**
* Trim whitespace characters from the beginning of a string.
*
* @module @stdlib/string/left-trim
*
* @example
* var ltrim = require( '@stdlib/string/left-trim' );
*
* var out = ltrim( '   Whitespace   ' );
* // returns 'Whitespace   '
*
* out = ltrim( '\t\t\tTabs\t\t\t' );
* // returns 'Tabs\t\t\t'
*/

// MODULES //

var ltrim = require( './left_trim.js' );


// EXPORTS //

module.exports = ltrim;

},{"./left_trim.js":169}],169:[function(require,module,exports){
'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

// The following regular expression should suffice to polyfill (most?) all environments.
var RE = /^[\u0020\f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;


// MAIN //

/**
* Trims whitespace characters from the beginning of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} trimmed string
*
* @example
* var out = ltrim( '   Whitespace   ' );
* // returns 'Whitespace   '
*
* @example
* var out = ltrim( '\t\t\tTabs\t\t\t' );
* // returns 'Tabs\t\t\t'
*
* @example
* var out = ltrim( '\n\n\nNew Lines\n\n\n' );
* // returns 'New Lines\n\n\n'
*/
function ltrim( str ) {
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. Must provide a string primitive. Value: `' + str + '`.' );
	}
	return replace( str, RE, '' );
} // end FUNCTION ltrim()


// EXPORTS //

module.exports = ltrim;

},{"@stdlib/assert/is-string":71,"@stdlib/string/replace":170}],170:[function(require,module,exports){
'use strict';

/**
* Replace search occurrences with a replacement string.
*
* @module @stdlib/string/replace
*
* @example
* var replace = require( '@stdlib/string/replace' );
*
* var str = 'beep';
* var out = replace( str, 'e', 'o' );
* // returns 'boop'
*
* str = 'Hello World';
* out = replace( str, /world/i, 'Mr. President' );
* // returns 'Hello Mr. President'
*/

// MODULES //

var replace = require( './replace.js' );


// EXPORTS //

module.exports = replace;

},{"./replace.js":171}],171:[function(require,module,exports){
'use strict';

// MODULES //

var rescape = require( '@stdlib/utils/escape-regexp-string' );
var isFunction = require( '@stdlib/assert/is-function' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegexp = require( '@stdlib/assert/is-regexp' );


// MAIN //

/**
* Replace search occurrences with a replacement string.
*
* @param {string} str - input string
* @param {(string|RegExp)} search - search expression
* @param {(string|Function)} newval - replacement value or function
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument argument must be a string primitive or regular expression
* @throws {TypeError} third argument must be a string primitive or function
* @returns {string} new string containing replacement(s)
*
* @example
* var str = 'beep';
* var out = replace( str, 'e', 'o' );
* // returns 'boop'
*
* @example
* var str = 'Hello World';
* var out = replace( str, /world/i, 'Mr. President' );
* // returns 'Hello Mr. President'
*
* @example
* var capitalize = require( '@stdlib/utils/string/capitalize' );
*
* var str = 'Oranges and lemons say the bells of St. Clement\'s';
*
* function replacer( match, p1 ) {
*     return capitalize( p1 );
* }
*
* var out = replace( str, /([^\s]*)/gi, replacer);
* // returns 'Oranges And Lemons Say The Bells Of St. Clement\'s'
*/
function replace( str, search, newval ) {
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string primitive. Value: `' + str + '`.' );
	}
	if ( isString( search ) ) {
		search = rescape( search );
		search = new RegExp( search, 'g' );
	}
	else if ( !isRegexp( search ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a string primitive or regular expression. Value: `' + search + '`.' );
	}
	if ( !isString( newval ) && !isFunction( newval ) ) {
		throw new TypeError( 'invalid input argument. Third argument must be a string primitive or replacement function. Value: `' + newval + '`.' );
	}
	return str.replace( search, newval );
} // end FUNCTION replace()


// EXPORTS //

module.exports = replace;

},{"@stdlib/assert/is-function":20,"@stdlib/assert/is-regexp":66,"@stdlib/assert/is-string":71,"@stdlib/utils/escape-regexp-string":195}],172:[function(require,module,exports){
'use strict';

/**
* Trim whitespace characters from the end of a string.
*
* @module @stdlib/string/right-trim
*
* @example
* var rtrim = require( '@stdlib/string/right-trim' );
*
* var out = rtrim( '   Whitespace   ' );
* // returns '   Whitespace'
*
* out = rtrim( '\t\t\tTabs\t\t\t' );
* // returns '\t\t\tTabs'
*
* out = rtrim( '\n\n\nNew Lines\n\n\n' );
* // returns '\n\n\nNew Lines'
*/

// MODULES //

var rtrim = require( './right_trim.js' );


// EXPORTS //

module.exports = rtrim;

},{"./right_trim.js":173}],173:[function(require,module,exports){
'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

// The following regular expression should suffice to polyfill (most?) all environments.
var RE = /[\u0020\f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+$/;


// MAIN //

/**
* Trims whitespace from the end of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} trimmed string
*
* @example
* var out = rtrim( '   Whitespace   ' );
* // returns '   Whitespace'
*
* @example
* var out = rtrim( '\t\t\tTabs\t\t\t' );
* // returns '\t\t\tTabs'
*
* @example
* var out = rtrim( '\n\n\nNew Lines\n\n\n' );
* // returns '\n\n\nNew Lines'
*/
function rtrim( str ) {
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. Must provide a string primitive. Value: `' + str + '`.' );
	}
	return replace( str, RE, '' );
} // end FUNCTION rtrim()


// EXPORTS //

module.exports = rtrim;

},{"@stdlib/assert/is-string":71,"@stdlib/string/replace":170}],174:[function(require,module,exports){
'use strict';

/**
* Trim whitespace characters from the beginning and end of a string.
*
* @module @stdlib/string/trim
*
* @example
* var trim = require( '@stdlib/string/trim' );
*
* var out = trim( '   Whitespace   ' );
* // returns 'Whitespace'
*
* out = trim( '\t\t\tTabs\t\t\t' );
* // returns 'Tabs'
*
* out = trim( '\n\n\nNew Lines\n\n\n' );
* // returns 'New Lines'
*/

// MODULES //

var trim = require( './trim.js' );


// EXPORTS //

module.exports = trim;

},{"./trim.js":175}],175:[function(require,module,exports){
'use strict';

// MODULES //

var ltrim = require( '@stdlib/string/left-trim' );
var rtrim = require( '@stdlib/string/right-trim' );


// MAIN //

/**
* Trim whitespace characters from beginning and end of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} trimmed string
*
* @example
* var out = trim( '   Whitespace   ' );
* // returns 'Whitespace'
*
* @example
* var out = trim( '\t\t\tTabs\t\t\t' );
* // returns 'Tabs'
*
* @example
* var out = trim( '\n\n\nNew Lines\n\n\n' ) );
* // returns 'New Lines'
*/
function trim( str ) {
	return ltrim( rtrim( str ) );
} // end FUNCTION trim()


// EXPORTS //

module.exports = trim;

},{"@stdlib/string/left-trim":168,"@stdlib/string/right-trim":172}],176:[function(require,module,exports){
'use strict';

// MODULES //

var Global = require( 'system.global' )();
var isObject = require( '@stdlib/assert/is-object' );
var modf = require( '@stdlib/math/base/special/modf' );
var round = require( '@stdlib/math/base/special/round' );
var now = require( './now.js' );


// VARIABLES //

var ts;
var ns;

if ( isObject( Global.performance ) ) {
	ns = Global.performance;
} else {
	ns = {};
}
if ( ns.now ) {
	ts = ns.now.bind( ns );
} else if ( ns.mozNow ) {
	ts = ns.mozNow.bind( ns );
} else if ( ns.msNow ) {
	ts = ns.msNow.bind( ns );
} else if ( ns.oNow ) {
	ts = ns.oNow.bind( ns );
} else if ( ns.webkitNow ) {
	ts = ns.webkitNow.bind( ns );
} else {
	ts = now;
}


// MAIN //

/**
* Returns a high-resolution time.
*
* #### Notes
*
* * Output format: `[seconds, nanoseconds]`.
*
*
* @private
* @returns {NumberArray} high-resolution time
*
* @example
* var t = tic();
* // returns [<number>,<number>]
*/
function tic() {
	var parts;
	var t;

	// Get a millisecond timestamp and convert to seconds:
	t = ts() / 1000;

	// Decompose the timestamp into integer (seconds) and fractional parts:
	parts = modf( t );

	// Convert the fractional part to nanoseconds:
	parts[ 1 ] = round( parts[1] * 1.0e9 );

	// Return the high-resolution time:
	return parts;
} // end FUNCTION tic()


// EXPORTS //

module.exports = tic;

},{"./now.js":178,"@stdlib/assert/is-object":57,"@stdlib/math/base/special/modf":131,"@stdlib/math/base/special/round":133,"system.global":260}],177:[function(require,module,exports){
'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );


// EXPORTS //

module.exports = isFunction( Date.now );

},{"@stdlib/assert/is-function":20}],178:[function(require,module,exports){
'use strict';

// MODULES //

var bool = require( './detect.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var now;
if ( bool ) {
	now = Date.now;
} else {
	now = polyfill;
}


// EXPORTS //

module.exports = now;

},{"./detect.js":177,"./polyfill.js":179}],179:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Returns the time in milliseconds since the epoch.
*
* @private
* @returns {number} time
*
* @example
* var ts = now();
* // returns <number>
*/
function now() {
	var d = new Date();
	return d.getTime();
} // end FUNCTION now()


// EXPORTS //

module.exports = now;

},{}],180:[function(require,module,exports){
'use strict';

/**
* Return a high-resolution time difference.
*
* @module @stdlib/time/toc
*
* @example
* var tic = requrie( '@stdlib/time/tic' );
* var toc = require( '@stdlib/time/toc' );
*
* var start = tic();
* var delta = toc( start );
* // returns [<number>,<number>]
*/

// MODULES //

var toc = require( './toc.js' );


// EXPORTS //

module.exports = toc;

},{"./toc.js":181}],181:[function(require,module,exports){
'use strict';

// MODULES //

var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;
var tic = require( '@stdlib/time/tic' );


// MAIN //

/**
* Returns a high-resolution time difference.
*
* #### Notes
*
* * Output format: `[seconds, nanoseconds]`.
*
*
* @param {NonNegativeIntegerArray} time - high-resolution time
* @throws {TypeError} must provide a nonnegative integer array
* @throws {RangeError} input array must have length `2`
* @returns {NumberArray} high resolution time difference
*
* @example
* var tic = require( '@stdlib/time/tic' );
*
* var start = tic();
* var delta = toc( start );
* // returns [<number>,<number>]
*/
function toc( time ) {
	var now = tic();
	var sec;
	var ns;
	if ( !isNonNegativeIntegerArray( time ) ) {
		throw new TypeError( 'invalid input argument. Must provide an array of nonnegative integers. Value: `' + time + '`.' );
	}
	if ( time.length !== 2 ) {
		throw new RangeError( 'invalid input argument. Input array must have length `2`.' );
	}
	sec = now[ 0 ] - time[ 0 ];
	ns = now[ 1 ] - time[ 1 ];
	if ( sec > 0 && ns < 0 ) {
		sec -= 1;
		ns += 1e9;
	}
	else if ( sec < 0 && ns > 0 ) {
		sec += 1;
		ns -= 1e9;
	}
	return [ sec, ns ];
} // end FUNCTION toc()


// EXPORTS //

module.exports = toc;

},{"@stdlib/assert/is-nonnegative-integer-array":38,"@stdlib/time/tic":176}],182:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var RE = require( '@stdlib/regexp/function-name' );
var isBuffer = require( '@stdlib/assert/is-buffer' );


// MAIN //

/**
* Determines the name of a value's constructor.
*
* @param {*} v - input value
* @returns {string} name of a value's constructor
*
* @example
* var v = constructorName( 'a' );
* // returns 'String'
* @example
* var v = constructorName( 5 );
* // returns 'Number'
* @example
* var v = constructorName( null );
* // returns 'Null'
* @example
* var v = constructorName( undefined );
* // returns 'Undefined'
* @example
* var v = constructorName( function noop(){} );
* // returns 'Function'
*/
function constructorName( v ) {
	var name;
	var ctor;
	name = nativeClass( v ).slice( 8, -1 );
	if ( (name === 'Object' || name === 'Error') && v.constructor ) {
		ctor = v.constructor;
		if ( typeof ctor.name === 'string' ) {
			return ctor.name;
		}
		return RE.exec( ctor.toString() )[ 1 ];
	}
	if ( isBuffer( v ) ) {
		return 'Buffer';
	}
	return name;
} // end FUNCTION constructorName()


// EXPORTS //

module.exports = constructorName;

},{"@stdlib/assert/is-buffer":16,"@stdlib/regexp/function-name":148,"@stdlib/utils/native-class":210}],183:[function(require,module,exports){
'use strict';

/**
* Determines the name of a value's constructor.
*
* @module @stdlib/utils/constructor-name
*
* @example
* var constructorName = require( '@stdlib/utils/constructor-name' );
*
* var v = constructorName( 'a' );
* // returns 'String'
*
* v = constructorName( {} );
* // returns 'Object'
*
* v = constructorName( true );
* // returns 'Boolean'
*/

// MODULES //

var constructorName = require( './constructor_name.js' );


// EXPORTS //

module.exports = constructorName;

},{"./constructor_name.js":182}],184:[function(require,module,exports){
'use strict';

// MODULES //

var isArray = require( '@stdlib/assert/is-array' );
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var deepCopy = require( './deep_copy.js' );


// MAIN //

/**
* Copies or deep clones a value to an arbitrary depth.
*
* @param {*} value - value to copy
* @param {NonNegativeInteger} [level=+infinity] - copy depth
* @returns {*} value copy
*
* @example
* var out = copy( 'beep' );
* // returns 'beep'
*
* @example
* var value = [
*     {
*         'a': 1,
*         'b': true,
*         'c': [ 1, 2, 3 ]
*     }
* ];
* var out = copy( value );
* // returns [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]
*
* var bool = ( value[0].c === out[0].c );
* // returns false
*/
function copy( value, level ) {
	var out;
	if ( arguments.length > 1 ) {
		if ( !isNonNegativeInteger( level ) ) {
			throw new TypeError( 'invalid input argument. `level` must be a nonnegative integer. Value: `' + level + '`.' );
		}
		if ( level === 0 ) {
			return value;
		}
	} else {
		level = PINF;
	}
	out = ( isArray(value) ) ? [] : {};
	return deepCopy( value, out, [value], [out], level );
} // end FUNCTION copy()


// EXPORTS //

module.exports = copy;

},{"./deep_copy.js":185,"@stdlib/assert/is-array":7,"@stdlib/assert/is-nonnegative-integer":40,"@stdlib/math/constants/float64-pinf":145}],185:[function(require,module,exports){
(function (Buffer){
'use strict';

// MODULES //

var objectKeys = require( 'object-keys' ).shim();
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isArray = require( '@stdlib/assert/is-array' );
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isError = require( '@stdlib/assert/is-error' );
var typeOf = require( '@stdlib/utils/type-of' );
var regexp = require( '@stdlib/utils/regexp-from-string' );
var indexOf = require( '@stdlib/utils/index-of' );
var typedArrays = require( './typed_arrays.js' );


// FUNCTIONS //

/**
* Clones a class instance.
*
* #### Notes
*
* * This should __only__ be used for simple cases. Any instances with privileged access to variables (e.g., within closures) cannot be cloned. This approach should be considered __fragile__.
* * The function is greedy, disregarding the notion of a `level`. Instead, the function deep copies all properties, as we assume the concept of `level` applies only to the class instance reference but not to its internal state. This prevents, in theory, two instances from sharing state.
*
*
* @private
* @param {Object} val - class instance
* @returns {Object} new instance
*/
function cloneInstance( val ) {
	var cache = [];
	var refs = [];
	var names;
	var name;
	var desc;
	var tmp;
	var ref;
	var i;

	ref = Object.create( Object.getPrototypeOf( val ) );
	cache.push( val );
	refs.push( ref );

	names = Object.getOwnPropertyNames( val );
	for ( i = 0; i < names.length; i++ ) {
		name = names[ i ];
		desc = Object.getOwnPropertyDescriptor( val, name );
		if ( hasOwnProp( desc, 'value' ) ) {
			tmp = ( isArray( val[name] ) ) ? [] : {};
			desc.value = deepCopy( val[name], tmp, cache, refs, -1 );
		}
		Object.defineProperty( ref, name, desc );
	}
	if ( !Object.isExtensible( val ) ) {
		Object.preventExtensions( ref );
	}
	if ( Object.isSealed( val ) ) {
		Object.seal( ref );
	}
	if ( Object.isFrozen( val ) ) {
		Object.freeze( ref );
	}
	return ref;
} // end FUNCTION cloneInstance()

/**
* Copies an error object.
*
* @private
* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error - error to copy
* @returns {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error copy
*
* @example
* var err1 = new TypeError( 'beep' );
*
* var err2 = copyError( err1 );
* // returns <TypeError>
*/
function copyError( error ) {
	/* jshint newcap:false */ // TODO: eslint
	var cache = [];
	var refs = [];
	var keys;
	var desc;
	var tmp;
	var key;
	var err;
	var i;

	// Create a new error...
	err = new error.constructor( error.message );

	cache.push( error );
	refs.push( err );

	// If a `stack` property is present, copy it over...
	if ( error.stack ) {
		err.stack = error.stack;
	}
	// Node.js specific (system errors)...
	if ( error.code ) {
		err.code = error.code;
	}
	if ( error.errno ) {
		err.errno = error.errno;
	}
	if ( error.syscall ) {
		err.syscall = error.syscall;
	}
	// Any enumerable properties...
	keys = objectKeys( error );
	for ( i = 0; i < keys.length; i++ ) {
		key = keys[ i ];
		desc = Object.getOwnPropertyDescriptor( error, key );
		if ( hasOwnProp( desc, 'value' ) ) {
			tmp = ( isArray( error[ key ] ) ) ? [] : {};
			desc.value = deepCopy( error[ key ], tmp, cache, refs, -1 );
		}
		Object.defineProperty( err, key, desc );
	}
	return err;
} // end FUNCTION copyError()


// MAIN //

/**
* Recursively performs a deep copy of an input object.
*
* @private
* @param {*} val - value to copy
* @param {(Array|Object)} copy - copy
* @param {Array} cache - an array of visited objects
* @param {Array} refs - an array of object references
* @param {NonNegativeInteger} level - copy depth
* @returns {*} deep copy
*/
function deepCopy( val, copy, cache, refs, level ) {
	var parent;
	var keys;
	var name;
	var desc;
	var ctor;
	var key;
	var ref;
	var x;
	var i;
	var j;

	level -= 1;

	// Primitives and functions...
	if (
		typeof val !== 'object' ||
		val === null
	) {
		return val;
	}
	if ( isBuffer( val ) ) {
		return new Buffer( val );
	}
	if ( isError( val ) ) {
		return copyError( val );
	}
	// Objects...
	name = typeOf( val );

	if ( name === 'date' ) {
		return new Date( +val );
	}
	if ( name === 'regexp' ) {
		return regexp( val.toString() );
	}
	if ( name === 'set' ) {
		return new Set( val );
	}
	if ( name === 'map' ) {
		return new Map( val );
	}
	if (
		name === 'string' ||
		name === 'boolean' ||
		name === 'number'
	) {
		// If provided an `Object`, return an equivalent primitive!
		return val.valueOf();
	}
	ctor = typedArrays[ name ];
	if ( ctor ) {
		return ctor( val );
	}
	// Class instances...
	if (
		name !== 'array' &&
		name !== 'object'
	) {
		// Cloning requires ES5 or higher...
		if ( typeof Object.freeze === 'function' ) {
			return cloneInstance( val );
		}
		return {};
	}
	// Arrays and plain objects...
	keys = objectKeys( val );
	if ( level > 0 ) {
		parent = name;
		for ( j = 0; j < keys.length; j++ ) {
			key = keys[ j ];
			x = val[ key ];

			// Primitive, Buffer, special class instance...
			name = typeOf( x );
			if (
				typeof x !== 'object' ||
				x === null ||
				(
					name !== 'array' &&
					name !== 'object'
				) ||
				isBuffer( x )
			) {
				if ( parent === 'object' ) {
					desc = Object.getOwnPropertyDescriptor( val, key );
					if ( hasOwnProp( desc, 'value' ) ) {
						desc.value = deepCopy( x );
					}
					Object.defineProperty( copy, key, desc );
				} else {
					copy[ key ] = deepCopy( x );
				}
				continue;
			}
			// Circular reference...
			i = indexOf( cache, x );
			if ( i !== -1 ) {
				copy[ key ] = refs[ i ];
				continue;
			}
			// Plain array or object...
			ref = ( isArray(x) ) ? [] : {};
			cache.push( x );
			refs.push( ref );
			if ( parent === 'array' ) {
				copy[ key ] = deepCopy( x, ref, cache, refs, level );
			} else {
				desc = Object.getOwnPropertyDescriptor( val, key );
				if ( hasOwnProp( desc, 'value' ) ) {
					desc.value = deepCopy( x, ref, cache, refs, level );
				}
				Object.defineProperty( copy, key, desc );
			}
		}
	} else if ( name === 'array' ) {
		for ( j = 0; j < keys.length; j++ ) {
			key = keys[ j ];
			copy[ key ] = val[ key ];
		}
	} else {
		for ( j = 0; j < keys.length; j++ ) {
			key = keys[ j ];
			desc = Object.getOwnPropertyDescriptor( val, key );
			Object.defineProperty( copy, key, desc );
		}
	}
	if ( !Object.isExtensible( val ) ) {
		Object.preventExtensions( copy );
	}
	if ( Object.isSealed( val ) ) {
		Object.seal( copy );
	}
	if ( Object.isFrozen( val ) ) {
		Object.freeze( copy );
	}
	return copy;
} // end FUNCTION deepCopy()


// EXPORTS //

module.exports = deepCopy;

}).call(this,require("buffer").Buffer)
},{"./typed_arrays.js":187,"@stdlib/assert/has-own-property":2,"@stdlib/assert/is-array":7,"@stdlib/assert/is-buffer":16,"@stdlib/assert/is-error":18,"@stdlib/utils/index-of":202,"@stdlib/utils/regexp-from-string":222,"@stdlib/utils/type-of":227,"buffer":233,"object-keys":244}],186:[function(require,module,exports){
'use strict';

/**
* Copy or deep clone a value to an arbitrary depth.
*
* @module @stdlib/utils/copy
*
* @example
* var copy = require( '@stdlib/utils/copy' );
*
* var out = copy( 'beep' );
* // returns 'beep'
*
* @example
* var copy = require( '@stdlib/utils/copy' );
*
* var value = [
*     {
*         'a': 1,
*         'b': true,
*         'c': [ 1, 2, 3 ]
*     }
* ];
* var out = copy( value );
* // returns [ {'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]
*
* var bool = ( value[0].c === out[0].c );
* // returns false
*/

// MODULES //

var copy = require( './copy.js' );


// EXPORTS //

module.exports = copy;

},{"./copy.js":184}],187:[function(require,module,exports){
/* eslint-disable no-new-func */
'use strict';

// MAIN //

var ctors = [
	'Int8Array',
	'Uint8Array',
	'Uint8ClampedArray',
	'Int16Array',
	'Uint16Array',
	'Int32Array',
	'Uint32Array',
	'Float32Array',
	'Float64Array'
];

/**
* Create functions for copying typed arrays.
*
* @private
* @returns {Object} typed array functions
*/
function createTypedArrayFcns() {
	var typedArrays = {};
	var ctor;
	var i;
	for ( i = 0; i < ctors.length; i++ ) {
		ctor = ctors[ i ];
		typedArrays[ ctor.toLowerCase() ] = new Function( 'arr', 'return new '+ctor+'( arr );' );
	}
	return typedArrays;
} // end FUNCTION createTypedArrayFcns()


// EXPORTS //

module.exports = createTypedArrayFcns();

},{}],188:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],189:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":188}],190:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
} // end FUNCTION hasSymbolSupport()


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],191:[function(require,module,exports){
'use strict';

/**
* Tests for native `Symbol` support.
*
* @module @stdlib/utils/detect-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/utils/detect-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var hasSymbolSupport = require( './detect_symbol_support.js' );


// EXPORTS //

module.exports = hasSymbolSupport;

},{"./detect_symbol_support.js":190}],192:[function(require,module,exports){
'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/utils/detect-symbol-support' )();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( hasSymbols && typeof Symbol.toStringTag === 'symbol' );
} // end FUNCTION hasToStringTagSupport()


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/utils/detect-symbol-support":191}],193:[function(require,module,exports){
'use strict';

/**
* Tests for native `toStringTag` support.
*
* @module @stdlib/utils/detect-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/utils/detect-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var hasToStringTagSupport = require( './has_tostringtag_support.js' );


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"./has_tostringtag_support.js":192}],194:[function(require,module,exports){
'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;


// VARIABLES //

var RE = /[-\/\\^$*+?.()|[\]{}]/g; // eslint-disable-line no-useless-escape


// MAIN //

/**
* Escapes a regular expression string.
*
* @param {string} str - regular expression string
* @throws {TypeError} first argument must be a string primitive
* @returns {string} escaped string
*
* @example
* var str = rescape( '[A-Z]*' );
* // returns '\\[A\\-Z\\]\\*'
*/
function rescape( str ) {
	var len;
	var s;
	var i;

	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. Must provide a regular expression string. Value: `' + str + '`.' );
	}
	// Check if the string starts with a forward slash...
	if ( str[ 0 ] === '/' ) {
		// Find the last forward slash...
		len = str.length;
		for ( i = len-1; i >= 0; i-- ) {
			if ( str[ i ] === '/' ) {
				break;
			}
		}
	}
	// If we searched the string to no avail or if the first letter is not `/`, assume that the string is not of the form `/[...]/[gimy]`:
	if ( i === void 0 || i <= 0 ) {
		return str.replace( RE, '\\$&' );
	}
	// We need to de-construct the string...
	s = str.substring( 1, i );

	// Only escape the characters between the `/`:
	s = s.replace( RE, '\\$&' );

	// Reassemble:
	str = str[ 0 ] + s + str.substring( i );

	return str;
} // end FUNCTION rescape()


// EXPORTS //

module.exports = rescape;

},{"@stdlib/assert/is-string":71}],195:[function(require,module,exports){
'use strict';

/**
* Escape a regular expression string or pattern.
*
* @module @stdlib/utils/escape-regexp-string
*
* @example
* var rescape = require( '@stdlib/utils/escape-regexp-string' );
*
* var str = rescape( '[A-Z]*' );
* // returns '\\[A\\-Z\\]\\*'
*/

// MODULES //

var rescape = require( './escape_regexp_string.js' );


// EXPORTS //

module.exports = rescape;

},{"./escape_regexp_string.js":194}],196:[function(require,module,exports){
'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );


// MAIN //

var getProto;
if ( isFunction( Object.getPrototypeOf ) ) {
	getProto = require( './native.js' );
} else {
	getProto = require( './polyfill.js' );
}


// EXPORTS //

module.exports = getProto;

},{"./native.js":199,"./polyfill.js":200,"@stdlib/assert/is-function":20}],197:[function(require,module,exports){
'use strict';

// MODULES //

var getProto = require( './detect.js' );


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @param {*} value - input value
* @returns {(Object|null)} prototype
*
* @example
* var proto = getPrototypeOf( {} );
* // returns {}
*/
function getPrototypeOf( value ) {
	if (
		value === null ||
		value === void 0
	) {
		return null;
	}
	// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:
	value = Object( value );

	return getProto( value );
} // end FUNCTION getPrototypeOf()


// EXPORTS //

module.exports = getPrototypeOf;

},{"./detect.js":196}],198:[function(require,module,exports){
'use strict';

/**
* Return the prototype of a provided object.
*
* @module @stdlib/utils/get-prototype-of
*
* @example
* var getPrototype = require( '@stdlib/utils/get-prototype-of' );
*
* var proto = getPrototype( {} );
* // returns {}
*/

// MODULES //

var getPrototype = require( './get_prototype_of.js' );


// EXPORTS //

module.exports = getPrototype;

},{"./get_prototype_of.js":197}],199:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = Object.getPrototypeOf;

},{}],200:[function(require,module,exports){
'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var getProto = require( './proto.js' );


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @private
* @param {Object} obj - input object
* @returns {(Object|null)} prototype
*/
function getPrototypeOf( obj ) {
	var proto = getProto( obj );
	if ( proto || proto === null ) {
		return proto;
	}
	if ( nativeClass( obj.constructor ) === '[object Function]' ) {
		// May break if the constructor has been tampered with...
		return obj.constructor.prototype;
	}
	if ( obj instanceof Object ) {
		return Object.prototype;
	}
	// Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.
	return null;
} // end FUNCTION getPrototypeOf()


// EXPORTS //

module.exports = getPrototypeOf;

},{"./proto.js":201,"@stdlib/utils/native-class":210}],201:[function(require,module,exports){
'use strict';

/**
* Returns the value of the `__proto__` property.
*
* @private
* @param {Object} obj - input object
* @returns {*} value of `__proto__` property
*/
function getProto( obj ) {
	// eslint-disable-next-line no-proto
	return obj.__proto__;
} // end FUNCTION getProto()


// EXPORTS //

module.exports = getProto;

},{}],202:[function(require,module,exports){
'use strict';

/**
* Return the first index at which a given element can be found.
*
* @module @stdlib/utils/index-of
*
* @example
* var indexOf = require( '@stdlib/utils/index-of' );
*
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 3 );
* // returns 1
*
* arr = [ 4, 3, 2, 1 ];
* idx = indexOf( arr, 5 );
* // returns -1
*
* // Using a `fromIndex`:
* arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* idx = indexOf( arr, 2, 3 );
* // returns 5
*
* // `fromIndex` which exceeds `array` length:
* arr = [ 1, 2, 3, 4, 2, 5 ];
* idx = indexOf( arr, 2, 10 );
* // returns -1
*
* // Negative `fromIndex`:
* arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];
* idx = indexOf( arr, 2, -4 );
* // returns 5
*
* idx = indexOf( arr, 2, -1 );
* // returns 7
*
* // Negative `fromIndex` exceeding input `array` length:
* arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* idx = indexOf( arr, 2, -10 );
* // returns 1
*
* // Array-like objects:
* var str = 'bebop';
* idx = indexOf( str, 'o' );
* // returns 3
*/

// MODULES //

var indexOf = require( './index_of.js' );


// EXPORTS //

module.exports = indexOf;

},{"./index_of.js":203}],203:[function(require,module,exports){
'use strict';

// MODULES //

var isnan = require( '@stdlib/assert/is-nan' );
var isArrayLike = require( '@stdlib/assert/is-array-like' );
var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;


// MAIN //

/**
* Returns the first index at which a given element can be found.
*
* @param {ArrayLike} arr - array-like object
* @param {*} searchElement - element to find
* @param {integer} [fromIndex] - starting index (if negative, the start index is determined relative to last element)
* @throws {TypeError} must provide an array-like object
* @throws {TypeError} `fromIndex` must be an integer
* @returns {integer} index or -1
*
* @example
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 3 );
* // returns 1
*
* @example
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 5 );
* // returns -1
*
* @example
* // Using a `fromIndex`:
* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* var idx = indexOf( arr, 2, 3 );
* // returns 5
*
* @example
* // `fromIndex` which exceeds `array` length:
* var arr = [ 1, 2, 3, 4, 2, 5 ];
* var idx = indexOf( arr, 2, 10 );
* // returns -1
*
* @example
* // Negative `fromIndex`:
* var arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];
* var idx = indexOf( arr, 2, -4 );
* // returns 5
*
* idx = indexOf( arr, 2, -1 );
* // returns 7
*
* @example
* // Negative `fromIndex` exceeding input `array` length:
* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* var idx = indexOf( arr, 2, -10 );
* // returns 1
*
* @example
* // Array-like objects:
* var str = 'bebop';
* var idx = indexOf( str, 'o' );
* // returns 3
*/
function indexOf( arr, searchElement, fromIndex ) {
	var len;
	var i;
	if ( !isArrayLike( arr ) ) {
		throw new TypeError( 'invalid input argument. First argument must be an array-like object. Value: `' + arr + '`.' );
	}
	len = arr.length;
	if ( len === 0 ) {
		return -1;
	}
	if ( arguments.length === 3 ) {
		if ( !isInteger( fromIndex ) ) {
			throw new TypeError( 'invalid input argument. `fromIndex` must be an integer. Value: `' + fromIndex + '`.' );
		}
		if ( fromIndex >= 0 ) {
			if ( fromIndex >= len ) {
				return -1;
			}
			i = fromIndex;
		} else {
			i = len + fromIndex;
			if ( i < 0 ) {
				i = 0;
			}
		}
	} else {
		i = 0;
	}
	// Check for `NaN`...
	if ( isnan( searchElement ) ) {
		for ( ; i < len; i++ ) {
			if ( isnan( arr[i] ) ) {
				return i;
			}
		}
	} else {
		for ( ; i < len; i++ ) {
			if ( arr[ i ] === searchElement ) {
				return i;
			}
		}
	}
	return -1;
} // end FUNCTION indexOf()


// EXPORTS //

module.exports = indexOf;

},{"@stdlib/assert/is-array-like":5,"@stdlib/assert/is-integer":23,"@stdlib/assert/is-nan":31}],204:[function(require,module,exports){
'use strict';

// MODULES //

var objectCreate = require( './native.js' );
var createObject = require( './polyfill.js' );


// EXPORTS //

if ( typeof objectCreate === 'function' ) {
	module.exports = objectCreate;
} else {
	module.exports = createObject;
}

},{"./native.js":207,"./polyfill.js":208}],205:[function(require,module,exports){
'use strict';

/**
* Implement prototypical inheritance by replacing the prototype of one constructor with the prototype of another constructor.
*
* @module @stdlib/utils/inherit
*
* @example
* var inherit = require( '@stdlib/utils/inherit' );
*
* function Foo() {
*     return this;
* }
* Foo.prototype.beep = function beep() {
*     return 'boop';
* };
*
* function Bar() {
*     Foo.call( this );
*     return this;
* }
* inherit( Bar, Foo );
*
* var bar = new Bar();
* var v = bar.beep();
* // returns 'boop'
*/

// MODULES //

var inherit = require( './inherit.js' );


// EXPORTS //

module.exports = inherit;

},{"./inherit.js":206}],206:[function(require,module,exports){
'use strict';

// MODULES //

var validate = require( './validate.js' );
var createObject = require( './detect.js' );


// MAIN //

/**
* Implements prototypical inheritance by replacing the prototype of one constructor with the prototype of another constructor.
*
* #### Notes
*
* * This implementation is not designed to work with ES2015/ES6 classes. For ES2015/ES6 classes, use `class` with `extends`.
* * For reference, see [node#3455](https://github.com/nodejs/node/pull/3455), [node#4179](https://github.com/nodejs/node/issues/4179), [node#3452](https://github.com/nodejs/node/issues/3452), and [node commit](https://github.com/nodejs/node/commit/29da8cf8d7ab8f66b9091ab22664067d4468461e#diff-3deb3f32958bb937ae05c6f3e4abbdf5).
*
*
* @param {(Object|Function)} ctor - constructor which will inherit
* @param {(Object|Function)} superCtor - super (parent) constructor
* @throws {TypeError} first argument must be either an object or a function which can inherit
* @throws {TypeError} second argument must be either an object or a function from which a constructor can inherit
* @throws {TypeError} second argument must have an inheritable prototype
* @returns {(Object|Function)} child constructor
*
* @example
* function Foo() {
*     return this;
* }
* Foo.prototype.beep = function beep() {
*     return 'boop';
* };
*
* function Bar() {
*     Foo.call( this );
*     return this;
* }
* inherit( Bar, Foo );
*
* var bar = new Bar();
* var v = bar.beep();
* // returns 'boop'
*/
function inherit( ctor, superCtor ) {
	var err = validate( ctor );
	if ( err ) {
		throw err;
	}
	err = validate( superCtor );
	if ( err ) {
		throw err;
	}
	if ( typeof superCtor.prototype === 'undefined' ) {
		throw new TypeError( 'invalid input argument. Second argument must have a prototype from which another object can inherit. Value: `'+superCtor.prototype+'`.' );
	}
	// Create a prototype which inherits from the parent prototype:
	ctor.prototype = createObject( superCtor.prototype );

	// Set the constructor to refer to the child constructor:
	ctor.prototype.constructor = ctor;

	return ctor;
} // end FUNCTION inherit()


// EXPORTS //

module.exports = inherit;

},{"./detect.js":204,"./validate.js":209}],207:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = Object.create;

},{}],208:[function(require,module,exports){
'use strict';

// FUNCTIONS //

/**
* Dummy constructor.
*
* @private
*/
function Ctor() {
	// Empty...
}


// MAIN //

/**
* An `Object.create` shim for older JavaScript engines.
*
* @private
* @param {Object} proto - prototype
* @returns {Object} created object
*
* @example
* var obj = createObject( Object.prototype );
* // returns {}
*/
function createObject( proto ) {
	Ctor.prototype = proto;
	return new Ctor();
} // end FUNCTION createObject()


// EXPORTS //

module.exports = createObject;

},{}],209:[function(require,module,exports){
'use strict';

/**
* Tests that a value is a valid constructor.
*
* @private
* @param {*} value - value to test
* @returns {(Error|null)} error object or null
*
* @example
* var ctor = function ctor() {};
*
* var err = validate( ctor );
* // returns null
*
* err = validate( null );
* // returns <TypeError>
*/
function validate( value ) {
	var type = typeof value;
	if (
		value === null ||
		(type !== 'object' && type !== 'function')
	) {
		return new TypeError( 'invalid input argument. A provided constructor must be either an object (except null) or a function. Value: `'+value+'`.' );
	}
	return null;
} // end FUNCTION validate()


// EXPORTS //

module.exports = validate;

},{}],210:[function(require,module,exports){
'use strict';

/**
* Returns a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/utils/detect-tostringtag-support' )();


// MAIN //

var nativeClass;
if ( hasToStringTag ) {
	nativeClass = require( './polyfill.js' );
} else {
	nativeClass = require( './native_class.js' );
}


// EXPORTS //

module.exports = nativeClass;

},{"./native_class.js":211,"./polyfill.js":212,"@stdlib/utils/detect-tostringtag-support":193}],211:[function(require,module,exports){
'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
} // end FUNCTION nativeClass()


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":213}],212:[function(require,module,exports){
'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
} // end FUNCTION nativeClass()


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":213,"./tostringtag.js":214,"@stdlib/assert/has-own-property":2}],213:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = Object.prototype.toString; // eslint-disable-line no-redeclare

},{}],214:[function(require,module,exports){
'use strict';

// EXPORTS //

module.exports = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';

},{}],215:[function(require,module,exports){
'use strict';

/**
* No operation.
*
* @module @stdlib/utils/noop
*
* @example
* var noop = require( '@stdlib/utils/noop' );
*
* noop();
* // ...does nothing.
*/

// MODULES //

var noop = require( './noop.js' );


// EXPORTS //

module.exports = noop;

},{"./noop.js":216}],216:[function(require,module,exports){
'use strict';

/**
* No operation.
*
* @example
* noop();
* // ...does nothing.
*/
function noop() {
	// Empty function...
}


// EXPORTS //

module.exports = noop;

},{}],217:[function(require,module,exports){
'use strict';

/**
* Return a partial object copy excluding specified keys.
*
* @module @stdlib/utils/omit
*
* @example
* var omit = require( '@stdlib/utils/omit' );
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omit( obj1, 'b' );
* // returns { 'a': 1 }
*/

// MODULES //

var omit = require( './omit.js' );


// EXPORTS //

module.exports = omit;

},{"./omit.js":218}],218:[function(require,module,exports){
'use strict';

// MODULES //

var getKeys = require( 'object-keys' ).shim();
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var indexOf = require( '@stdlib/utils/index-of' );


// MAIN //

/**
* Returns a partial object copy excluding specified keys.
*
* @param {Object} obj - source object
* @param {(string|StringArray)} keys - keys to exclude
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be either a string or an array of strings
* @returns {Object} new object
*
* @example
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omit( obj1, 'b' );
* // returns { 'a': 1 }
*/
function omit( obj, keys ) {
	var ownKeys;
	var out;
	var key;
	var i;
	if ( typeof obj !== 'object' || obj === null ) {
		throw new TypeError( 'invalid input argument. First argument must be an object. Value: `'+obj+'`.' );
	}
	ownKeys = getKeys( obj );
	out = {};
	if ( isString( keys ) ) {
		for ( i = 0; i < ownKeys.length; i++ ) {
			key = ownKeys[ i ];
			if ( key !== keys ) {
				out[ key ] = obj[ key ];
			}
		}
		return out;
	}
	if ( isStringArray( keys ) ) {
		for ( i = 0; i < ownKeys.length; i++ ) {
			key = ownKeys[ i ];
			if ( indexOf( keys, key ) === -1 ) {
				out[ key ] = obj[ key ];
			}
		}
		return out;
	}
	throw new TypeError( 'invalid input argument. Second argument must be either a string primitive or an array of string primitives. Value: `'+keys+'`.' );
} // end FUNCTION omit()


// EXPORTS //

module.exports = omit;

},{"@stdlib/assert/is-string":71,"@stdlib/assert/is-string-array":69,"@stdlib/utils/index-of":202,"object-keys":244}],219:[function(require,module,exports){
'use strict';

/**
* Return a partial object copy containing only specified keys.
*
* @module @stdlib/utils/pick
*
* @example
* var pick = require( '@stdlib/utils/pick' );
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = pick( obj1, 'b' );
* // returns { 'b': 2 }
*/

// MODULES //

var pick = require( './pick.js' );


// EXPORTS //

module.exports = pick;

},{"./pick.js":220}],220:[function(require,module,exports){
'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var hasOwnProp = require( '@stdlib/assert/has-own-property' );


// MAIN //

/**
* Returns a partial object copy containing only specified keys. If a key does not exist as an own property in a source object, the key is ignored.
*
* @param {Object} obj - source object
* @param {(string|StringArray)} keys - keys to copy
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be either a string or an array of strings
* @returns {Object} new object
*
* @example
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = pick( obj1, 'b' );
* // returns { 'b': 2 }
*/
function pick( obj, keys ) {
	var out;
	var key;
	var i;
	if ( typeof obj !== 'object' || obj === null ) {
		throw new TypeError( 'invalid input argument. First argument must be an object. Value: `'+obj+'`.' );
	}
	out = {};
	if ( isString( keys ) ) {
		if ( hasOwnProp( obj, keys ) ) {
			out[ keys ] = obj[ keys ];
		}
		return out;
	}
	if ( isStringArray( keys ) ) {
		for ( i = 0; i < keys.length; i++ ) {
			key = keys[ i ];
			if ( hasOwnProp( obj, key ) ) {
				out[ key ] = obj[ key ];
			}
		}
		return out;
	}
	throw new TypeError( 'invalid input argument. Second argument must be either a string primitive or an array of string primitives. Value: `'+keys+'`.' );
} // end FUNCTION pick()


// EXPORTS //

module.exports = pick;

},{"@stdlib/assert/has-own-property":2,"@stdlib/assert/is-string":71,"@stdlib/assert/is-string-array":69}],221:[function(require,module,exports){
'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var RE = require( '@stdlib/regexp/regexp' );


// MAIN //

/**
* Parses a regular expression string and returns a new regular expression.
*
* @param {string} str - regular expression string
* @returns {(RegExp|null)} regular expression or null
*
* @example
* var re = reFromString( '/beep/' )
* // returns /beep/
*/
function reFromString( str ) {
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. Must provide a regular expression string. Value: `' + str + '`.' );
	}
	// Capture the regular expression pattern and any flags:
	str = RE.exec( str );

	// Create a new regular expression:
	return ( str ) ? new RegExp( str[1], str[2] ) : null;
} // end FUNCTION reFromString()


// EXPORTS //

module.exports = reFromString;

},{"@stdlib/assert/is-string":71,"@stdlib/regexp/regexp":149}],222:[function(require,module,exports){
'use strict';

/**
* Create a regular expression from a regular expression string.
*
* @module @stdlib/utils/regexp-from-string
*
* @example
* var reFromString = require( '@stdlib/utils/regexp-from-string' );
*
* var re = reFromString( '/beep/' );
* // returns /beep/
*/

// MODULES //

var reFromString = require( './from_string.js' );


// EXPORTS //

module.exports = reFromString;

},{"./from_string.js":221}],223:[function(require,module,exports){
'use strict';

// MODULES //

var RE = require( './fixtures/re.js' );
var nodeList = require( './fixtures/nodelist.js' );
var typedarray = require( './fixtures/typedarray.js' );


// MAIN //

/**
* Checks whether a polyfill is needed when using the `typeof` operator.
*
* @private
* @returns {boolean} boolean indicating whether a polyfill is needed
*/
function check() {
	if (
		// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):
		typeof RE === 'function' ||
		// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):
		typeof typedarray === 'object' ||
		// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):
		typeof nodeList === 'function'
	) {
		return true;
	}
	return false;
} // end FUNCTION check()


// EXPORTS //

module.exports = check;

},{"./fixtures/nodelist.js":224,"./fixtures/re.js":225,"./fixtures/typedarray.js":226}],224:[function(require,module,exports){
'use strict';

// MODULES //

var root = require( 'system.global' )(); // eslint-disable-line no-redeclare


// MAIN //

var nodeList = root.document && root.document.childNodes;


// EXPORTS //

module.exports = nodeList;

},{"system.global":260}],225:[function(require,module,exports){
'use strict';

var RE = /./;


// EXPORTS //

module.exports = RE;

},{}],226:[function(require,module,exports){
'use strict';

var typedarray = Int8Array;


// EXPORTS //

module.exports = typedarray;

},{}],227:[function(require,module,exports){
'use strict';

/**
* Determine a value's type.
*
* @module @stdlib/utils/type-of
*
* @example
* var typeOf = require( '@stdlib/utils/type-of' );
*
* var str = typeOf( 'a' );
* // returns 'string'
*
* str = typeOf( 5 );
* // returns 'number'
*/

// MODULES //

var usePolyfill = require( './check.js' );
var typeOf = require( './typeof.js' );
var polyfill = require( './polyfill.js' );


// EXPORTS //

module.exports = ( usePolyfill() ) ? polyfill : typeOf;

},{"./check.js":223,"./polyfill.js":228,"./typeof.js":229}],228:[function(require,module,exports){
'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	return ctorName( v ).toLowerCase();
} // end FUNCTION typeOf()


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":183}],229:[function(require,module,exports){
'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// NOTES //

/*
* Built-in `typeof` operator behavior:
*
* ``` text
* typeof null => 'object'
* typeof undefined => 'undefined'
* typeof 'a' => 'string'
* typeof 5 => 'number'
* typeof NaN => 'number'
* typeof true => 'boolean'
* typeof false => 'boolean'
* typeof {} => 'object'
* typeof [] => 'object'
* typeof function foo(){} => 'function'
* typeof function* foo(){} => 'object'
* typeof Symbol() => 'symbol'
* ```
*
*/


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	var type;

	// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):
	if ( v === null ) {
		return 'null';
	}
	type = typeof v;

	// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.
	if ( type === 'object' ) {
		return ctorName( v ).toLowerCase();
	}
	return type;
} // end FUNCTION typeOf()


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":183}],230:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],231:[function(require,module,exports){

},{}],232:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],233:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":230,"ieee754":240}],234:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":242}],235:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))
},{"./debug":236,"_process":232}],236:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":243}],237:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":239,"object-keys":244}],238:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],239:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],240:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],241:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],242:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],243:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],244:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":245}],245:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],246:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":232}],247:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":249,"./_stream_writable":251,"core-util-is":234,"inherits":241,"process-nextick-args":246}],248:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":250,"core-util-is":234,"inherits":241}],249:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":247,"./internal/streams/BufferList":252,"./internal/streams/destroy":253,"./internal/streams/stream":254,"_process":232,"core-util-is":234,"events":238,"inherits":241,"isarray":255,"process-nextick-args":246,"safe-buffer":258,"string_decoder/":256,"util":231}],250:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":247,"core-util-is":234,"inherits":241}],251:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":247,"./internal/streams/destroy":253,"./internal/streams/stream":254,"_process":232,"core-util-is":234,"inherits":241,"process-nextick-args":246,"safe-buffer":258,"util-deprecate":263}],252:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":258}],253:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":246}],254:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":238}],255:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],256:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":258}],257:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":247,"./lib/_stream_passthrough.js":248,"./lib/_stream_readable.js":249,"./lib/_stream_transform.js":250,"./lib/_stream_writable.js":251}],258:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":233}],259:[function(require,module,exports){
(function (global){
/* globals self, window, global */
/* eslint no-negated-condition: 0, no-new-func: 0 */

'use strict';

if (typeof self !== 'undefined') {
	module.exports = self;
} else if (typeof window !== 'undefined') {
	module.exports = window;
} else if (typeof global !== 'undefined') {
	module.exports = global;
} else {
	module.exports = Function('return this')();
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],260:[function(require,module,exports){
'use strict';

var defineProperties = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var polyfill = getPolyfill();

var getGlobal = function () { return polyfill; };

defineProperties(getGlobal, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = getGlobal;

},{"./implementation":259,"./polyfill":261,"./shim":262,"define-properties":237}],261:[function(require,module,exports){
(function (global){
'use strict';

var implementation = require('./implementation');

module.exports = function getPolyfill() {
	if (typeof global !== 'object' || !global || global.Math !== Math || global.Array !== Array) {
		return implementation;
	}
	return global;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./implementation":259}],262:[function(require,module,exports){
(function (global){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimGlobal() {
	var polyfill = getPolyfill();
	if (define.supportsDescriptors) {
		var descriptor = Object.getOwnPropertyDescriptor(polyfill, 'global');
		if (!descriptor || (descriptor.configurable && (descriptor.enumerable || descriptor.writable || global !== polyfill))) {
			Object.defineProperty(polyfill, 'global', {
				configurable: true,
				enumerable: false,
				value: polyfill,
				writable: false
			});
		}
	} else if (typeof global !== 'object' || global !== polyfill) {
		polyfill.global = polyfill;
	}
	return polyfill;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polyfill":261,"define-properties":237}],263:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[150]);
