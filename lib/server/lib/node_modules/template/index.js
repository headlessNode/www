/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax */

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;


// VARIABLES //

var RE_META = /({{ THEME }}|{{ TITLE }}|{{ DESCRIPTION }}|{{ URL }}|<style id="mui-ssr-styles"><\/style>|<div id="root"><\/div>)/;


// MAIN //

/**
* Returns a template instance.
*
* @private
* @constructor
* @param {string} html - raw HTML
* @throws {TypeError} must provide a string
* @returns {Template} template instance
*/
function Template( html ) {
	var str;
	var i;
	if ( !( this instanceof Template ) ) {
		return new Template( html );
	}
	if ( !isString( html ) ) {
		throw new TypeError( 'invalid argument. Must provide a string. Value: `' + html + '`.' );
	}
	// Cache the raw HTML string:
	this._raw = html;

	// Find the meta elements in the input HTML:
	this._template = html.split( RE_META );

	// Initialize an object for storing indices:
	this._indices = {
		'title': [],
		'description': [],
		'url': [],
		'theme': -1,
		'css': -1,
		'root': -1
	};

	// Determine the indices for each meta data item...
	for ( i = 0; i < this._template.length; i++ ) {
		str = this._template[ i ];
		if ( str === '{{ TITLE }}' ) {
			this._indices.title.push( i );
		} else if ( str === '{{ DESCRIPTION }}' ) {
			this._indices.description.push( i );
		} else if ( str === '{{ URL }}' ) {
			this._indices.url.push( i );
		} else if ( str === '{{ THEME }}' ) {
			this._indices.theme = i; // Note: can only be one `theme`` element
		} else if ( str === '<style id="mui-ssr-styles"></style>' ) {
			this._indices.css = i; // Note: can only be one `mui-ssr-styles` element
		} else if ( str === '<div id="root"></div>' ) {
			this._indices.root = i; // Note: can only be one `root`` element
		}
	}
	return this;
}

/**
* Sets title strings.
*
* @private
* @name title
* @memberof Template.prototype
* @type {Function}
* @param {string} str - title string
* @returns {Template} template instance
*/
Template.prototype.title = function setTitle( str ) {
	var idx;
	var i;

	idx = this._indices.title;
	for ( i = 0; i < idx.length; i++ ) {
		this._template[ idx[ i ] ] = str;
	}
	return this;
};

/**
* Sets description strings.
*
* @private
* @name description
* @memberof Template.prototype
* @type {Function}
* @param {string} str - description string
* @returns {Template} template instance
*/
Template.prototype.description = function setDescription( str ) {
	var idx;
	var i;

	idx = this._indices.description;
	for ( i = 0; i < idx.length; i++ ) {
		this._template[ idx[ i ] ] = str;
	}
	return this;
};

/**
* Sets URL strings.
*
* @private
* @name url
* @memberof Template.prototype
* @type {Function}
* @param {string} str - url string
* @returns {Template} template instance
*/
Template.prototype.url = function setURL( str ) {
	var idx;
	var i;

	idx = this._indices.url;
	for ( i = 0; i < idx.length; i++ ) {
		this._template[ idx[ i ] ] = str;
	}
	return this;
};

/**
* Sets the theme.
*
* @private
* @name theme
* @memberof Template.prototype
* @type {Function}
* @param {string} theme - theme name
* @returns {Template} template instance
*/
Template.prototype.theme = function setTheme( theme ) {
	this._template[ this._indices.theme ] = theme;
	return this;
};

/**
* Sets server-side CSS.
*
* @private
* @name css
* @memberof Template.prototype
* @type {Function}
* @param {string} css - CSS string
* @returns {Template} template instance
*/
Template.prototype.css = function setCSS( css ) {
	this._template[ this._indices.css ] = '<style id="mui-ssr-styles">' + css + '</style>';
	return this;
};

/**
* Sets the content of the "root" element.
*
* @private
* @name content
* @memberof Template.prototype
* @type {Function}
* @param {string} str - content string
* @returns {Template} template instance
*/
Template.prototype.content = function setContent( str ) {
	this._template[ this._indices.root ] = '<div id="root">' + str + '</div>';
	return this;
};

/**
* Clones the template instance.
*
* @private
* @name clone
* @memberof Template.prototype
* @type {Function}
* @returns {Template} new template instance
*/
Template.prototype.clone = function clone() {
	return new Template( this._raw );
};

/**
* Serializes a template to a string.
*
* @private
* @name toString
* @memberof Template.prototype
* @type {Function}
* @returns {string} serialized template
*/
Template.prototype.toString = function toString() {
	return this._template.join( '' );
};


// EXPORTS //

module.exports = Template;
