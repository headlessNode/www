#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var cwd = require( '@stdlib/process/cwd' );
var httpServer = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var server;
	var flags;
	var fopts;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Extract options...
	opts = {};
	if ( flags.address ) {
		opts.address = flags.address;
	}
	if ( flags.hostname ) {
		opts.hostname = flags.hostname;
	}
	if ( flags.latest ) {
		opts.latest = flags.latest;
	}
	if ( flags.logger ) {
		opts.logger = flags.logger;
	}
	if ( flags.port ) {
		opts.port = parseInt( flags.port, 10 );
	}
	if ( flags.prefix ) {
		opts.prefix = flags.prefix;
	}
	if ( flags.root ) {
		opts.root = flags.root;
	}
	if ( flags.static ) {
		opts.static = flags.static;
	}
	if ( flags.template ) {
		fopts = {
			'encoding': 'utf8'
		};
		opts.template = readFileSync( resolve( cwd(), flags.template ), fopts );
		if ( opts.template instanceof Error ) {
			return cli.error( opts.template, 1 );
		}
	}
	if ( flags.trust_proxy ) {
		opts.trustProxy = flags.trust_proxy;
	}
	// Create a server:
	server = httpServer( opts );
	server( done );

	/**
	* Callback invoked upon creating a server.
	*
	* @private
	* @param {(Error|null)} error - error object
	*/
	function done( error ) {
		if ( error ) {
			cli.error( error, 1 );
		}
	}
}

main();
